uint64_t AutomationJSON.samplingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return AutomationJSON.samplingStrategy.getter(MEMORY[0x263F7FBE8], a1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t makeSamplingStrategy(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.SamplingStrategyConfiguration?);
  uint64_t v4 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v4);
  v8 = (char *)&v15 - v7;
  outlined init with copy of AutomationJSON.SamplingStrategyConfiguration?(a1, (uint64_t)&v15 - v7);
  uint64_t v9 = type metadata accessor for AutomationJSON.SamplingStrategyConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    outlined init with copy of AutomationJSON.SamplingStrategyConfiguration?((uint64_t)v8, (uint64_t)v6);
    int v13 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 88))(v6, v9);
    if (v13 == *MEMORY[0x263F7FBD0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v6, v9);
      uint64_t v11 = *v6;
      char v12 = 1;
      goto LABEL_9;
    }
    if (v13 == *MEMORY[0x263F7FBE0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v6, v9);
      char v12 = 0;
      uint64_t v11 = *v6;
      goto LABEL_9;
    }
    if (v13 == *MEMORY[0x263F7FBD8])
    {
      uint64_t v11 = 0;
      char v12 = 2;
      goto LABEL_9;
    }
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v6, v9);
  }
  uint64_t v11 = 0;
  char v12 = -1;
LABEL_9:
  *(void *)a2 = v11;
  *(unsigned char *)(a2 + 8) = v12;
  return outlined destroy of AutomationJSON.SamplingStrategyConfiguration?((uint64_t)v8);
}

uint64_t outlined destroy of AutomationJSON.SamplingStrategyConfiguration?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.SamplingStrategyConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AutomationJSON.ParameterizedPrompt.samplingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return AutomationJSON.samplingStrategy.getter(MEMORY[0x263F7FBC8], a1);
}

uint64_t AutomationJSON.samplingStrategy.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.SamplingStrategyConfiguration?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v5);
  makeSamplingStrategy(from:)((uint64_t)v7, a2);
  return outlined destroy of AutomationJSON.SamplingStrategyConfiguration?((uint64_t)v7);
}

uint64_t default argument 2 of TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 4 of TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 3 of TokenGenerator.complete(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 5 of TokenGenerator.complete(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x263F8EE78];
}

void default argument 1 of TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = MEMORY[0x263F8EE88];
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  *(_WORD *)(a1 + 129) = 514;
}

uint64_t default argument 4 of TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:)()
{
  return MEMORY[0x263F8EE78];
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
    }
  }
}

uint64_t outlined init with copy of AutomationJSON.SamplingStrategyConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.SamplingStrategyConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static CachePolicy.== infix(_:_:)()
{
  return 1;
}

Swift::Int CachePolicy.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CachePolicy()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CachePolicy()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CachePolicy and conformance CachePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type CachePolicy and conformance CachePolicy;
  if (!lazy protocol witness table cache variable for type CachePolicy and conformance CachePolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachePolicy and conformance CachePolicy);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CachePolicy()
{
  return 1;
}

ValueMetadata *type metadata accessor for CachePolicy()
{
  return &type metadata for CachePolicy;
}

uint64_t register<A>(documents:registrationCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for URL();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DocumentResource();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](register<A>(documents:registrationCallback:), 0, 0);
}

void register<A>(documents:registrationCallback:)()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[DocumentResourceIdentifier], os_unfair_lock_s>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 112) = v2;
  *(_DWORD *)(v2 + 24) = 0;
  v3 = (os_unfair_lock_s *)(v2 + 24);
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 16) = MEMORY[0x263F8EE78];
  uint64_t v5 = (void *)(v2 + 16);
  int64_t v6 = *(void *)(v1 + 16);
  if (v6)
  {
    uint64_t v24 = v2;
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v30 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    uint64_t v9 = v1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v25 = (void (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v26 = *(void *)(v8 + 72);
    uint64_t v27 = v7;
    uint64_t v10 = v30;
    do
    {
      uint64_t v12 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 80);
      uint64_t v13 = *(void *)(v0 + 56);
      v28(v11, v9, v13);
      v28(v12, v11, v13);
      DocumentResource.init(url:)();
      (*v25)(v11, v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
        uint64_t v10 = v30;
      }
      unint64_t v15 = *(void *)(v10 + 16);
      unint64_t v14 = *(void *)(v10 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v10 = v30;
      }
      uint64_t v16 = *(void *)(v0 + 104);
      uint64_t v17 = *(void *)(v0 + 88);
      *(void *)(v10 + 16) = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v10+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v15, v16, v17);
      uint64_t v30 = v10;
      v9 += v26;
      --v6;
    }
    while (v6);
    uint64_t v18 = *(void *)(v0 + 16);
    long long v29 = *(_OWORD *)(v0 + 40);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(v0 + 24))(v10);
    *(void *)(v0 + 120) = v19;
    swift_bridgeObjectRelease();
    uint64_t v20 = swift_task_alloc();
    *(void *)(v0 + 128) = v20;
    *(_OWORD *)(v20 + 16) = v29;
    *(void *)(v20 + 32) = v19;
    *(void *)(v20 + 40) = v18;
    *(void *)(v20 + 48) = v24;
    v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v21;
    void *v21 = v0;
    v21[1] = register<A>(documents:registrationCallback:);
    uint64_t v33 = MEMORY[0x263F8EE60] + 8;
    MEMORY[0x270FA22B8]();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
    closure #3 in register<A>(documents:registrationCallback:)(v5, &v30);
    os_unfair_lock_unlock(v3);
    uint64_t v22 = v30;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v23 = *(void (**)(uint64_t))(v0 + 8);
    v23(v22);
  }
}

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64_t v8 = v0;
  uint64_t v1 = v0[18];
  uint64_t v2 = (os_unfair_lock_s *)v0[14];
  v3 = v2 + 4;
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  closure #3 in register<A>(documents:registrationCallback:)(v3, &v7);
  os_unfair_lock_unlock(v4);
  if (!v1)
  {
    uint64_t v5 = v7;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v6 = (void (*)(uint64_t))v0[1];
    v6(v5);
  }
}

uint64_t register<A>(documents:registrationCallback:)()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](register<A>(documents:registrationCallback:), 0, 0);
}

uint64_t closure #2 in register<A>(documents:registrationCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  v7[15] = a2;
  v7[16] = a3;
  uint64_t v8 = *(void *)(a6 - 8);
  v7[21] = v8;
  v7[22] = *(void *)(v8 + 64);
  v7[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  v7[26] = swift_getTupleTypeMetadata2();
  uint64_t v9 = type metadata accessor for Optional();
  v7[27] = v9;
  v7[28] = *(void *)(v9 - 8);
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in register<A>(documents:registrationCallback:), 0, 0);
}

uint64_t closure #2 in register<A>(documents:registrationCallback:)()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  *(void *)(v0 + 104) = *(void *)(v0 + 128);
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x261200DB0](v5, WitnessTable);
  *(void *)(v0 + 112) = *(void *)(v0 + 96);
  type metadata accessor for EnumeratedSequence();
  EnumeratedSequence.makeIterator()();
  uint64_t v31 = v2;
  uint64_t v32 = v2 - 8;
  type metadata accessor for EnumeratedSequence.Iterator();
  while (1)
  {
    uint64_t v9 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 216);
    EnumeratedSequence.Iterator.next()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v8, v9, v10);
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 48))(v8, 1, v11);
    uint64_t v13 = *(uint64_t **)(v0 + 240);
    if (v12 == 1) {
      break;
    }
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v35 = v14;
    uint64_t v39 = *(void *)(v0 + 192);
    unint64_t v15 = *(char **)(v0 + 184);
    uint64_t v33 = v15;
    uint64_t v38 = *(void *)(v0 + 144);
    uint64_t v36 = *(void *)(v0 + 136);
    uint64_t v37 = *v13;
    uint64_t v16 = (char *)v13 + *(int *)(v31 + 48);
    uint64_t v17 = type metadata accessor for TaskPriority();
    uint64_t v34 = *(void *)(v17 - 8);
    long long v40 = *(_OWORD *)(v0 + 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v14, 1, 1, v17);
    uint64_t v18 = *(void (**)(char *, char *, void))(v4 + 32);
    v18(v15, v16, v40);
    unint64_t v19 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    unint64_t v20 = (v3 + 7 + v19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    *(_OWORD *)(v22 + 32) = v40;
    v18((char *)(v22 + v19), v33, v40);
    *(void *)(v22 + v20) = v36;
    *(void *)(v22 + v21) = v37;
    *(void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8)) = v38;
    outlined init with copy of TaskPriority?(v35, v39);
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v39, 1, v17);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v23 = *(void *)(v0 + 192);
    if (v21 == 1)
    {
      outlined destroy of TaskPriority?(*(void *)(v0 + 192));
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v23, v17);
    }
    if (*(void *)(v22 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v26 = v25;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = 0;
    }
    uint64_t v27 = **(void **)(v0 + 120);
    uint64_t v28 = v26 | v24;
    if (v26 | v24)
    {
      uint64_t v28 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v24;
      *(void *)(v0 + 40) = v26;
    }
    uint64_t v7 = *(void *)(v0 + 200);
    *(void *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = v28;
    *(void *)(v0 + 88) = v27;
    swift_task_create();
    swift_release();
    outlined destroy of TaskPriority?(v7);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t closure #1 in closure #2 in register<A>(documents:registrationCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a8;
  v8[16] = v17;
  v8[13] = a6;
  v8[14] = a7;
  v8[11] = a4;
  v8[12] = a5;
  uint64_t v10 = type metadata accessor for DocumentResourceIdentifier();
  v8[17] = v10;
  v8[18] = *(void *)(v10 - 8);
  v8[19] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DocumentRegistration.Progress();
  v8[20] = v11;
  v8[21] = *(void *)(v11 - 8);
  v8[22] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for DocumentRegistration.Status();
  v8[23] = v12;
  v8[24] = *(void *)(v12 - 8);
  v8[25] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DocumentRegistration();
  v8[26] = v13;
  v8[27] = *(void *)(v13 - 8);
  v8[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentRegistration?);
  v8[29] = swift_task_alloc();
  v8[30] = *(void *)(a8 - 8);
  v8[31] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[32] = AssociatedTypeWitness;
  v8[33] = *(void *)(AssociatedTypeWitness - 8);
  v8[34] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #2 in register<A>(documents:registrationCallback:), 0, 0);
}

uint64_t closure #1 in closure #2 in register<A>(documents:registrationCallback:)()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 16))(*(void *)(v0 + 248), *(void *)(v0 + 88), *(void *)(v0 + 120));
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t v1 = (_DWORD *)MEMORY[0x263F41588];
  *(_DWORD *)(v0 + 296) = *MEMORY[0x263F41580];
  *(_DWORD *)(v0 + 300) = *v1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v3;
  void *v3 = v0;
  v3[1] = closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 232);
  return MEMORY[0x270FA1E88](v5, 0, 0, v0 + 80, v4, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  }
  else {
    uint64_t v2 = closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[33] + 8))(v0[34], v0[32]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void closure #1 in closure #2 in register<A>(documents:registrationCallback:)()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    int v5 = *(_DWORD *)(v0 + 296);
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v8 = *(void *)(v0 + 184);
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 224), v1, v2);
    DocumentRegistration.status.getter();
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v8);
    if (v9 == v5)
    {
      uint64_t v10 = *(void *)(v0 + 200);
      uint64_t v11 = *(void *)(v0 + 176);
      uint64_t v12 = *(void *)(v0 + 160);
      uint64_t v13 = *(void *)(v0 + 168);
      uint64_t v14 = *(void *)(v0 + 104);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 192) + 96))(v10, *(void *)(v0 + 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v10, v12);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_25F91CC30;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      uint64_t v16 = *(void *)(v0 + 72);
      *(void *)(v0 + 48) = *(void *)(v0 + 64);
      *(void *)(v0 + 56) = v16;
      v17._countAndFlagsBits = 0x746E656D75636F44;
      v17._object = (void *)0xEE00203A4C525520;
      String.append(_:)(v17);
      if (v14 < 0)
      {
        __break(1u);
      }
      else if (*(void *)(*(void *)(v0 + 96) + 16) > *(void *)(v0 + 104))
      {
        uint64_t v24 = *(void *)(v0 + 216);
        uint64_t v56 = *(void *)(v0 + 208);
        uint64_t v57 = *(void *)(v0 + 224);
        uint64_t v25 = *(void *)(v0 + 168);
        uint64_t v26 = *(void *)(v0 + 176);
        uint64_t v27 = *(void *)(v0 + 160);
        type metadata accessor for URL();
        lazy protocol witness table accessor for type URL and conformance URL();
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 0x6572676F7250202CLL;
        v29._object = (void *)0xED0000202D207373;
        String.append(_:)(v29);
        DocumentRegistration.Progress.progress.getter();
        Float.write<A>(to:)();
        v30._countAndFlagsBits = 37;
        v30._object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        uint64_t v31 = *(void *)(v0 + 48);
        uint64_t v32 = *(void *)(v0 + 56);
        *(void *)(v15 + 56) = MEMORY[0x263F8D310];
        *(void *)(v15 + 32) = v31;
        *(void *)(v15 + 40) = v32;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v57, v56);
LABEL_9:
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v34 = (void *)swift_task_alloc();
        *(void *)(v0 + 280) = v34;
        *uint64_t v34 = v0;
        v34[1] = closure #1 in closure #2 in register<A>(documents:registrationCallback:);
        uint64_t v22 = *(void *)(v0 + 256);
        uint64_t v18 = *(void *)(v0 + 232);
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = v0 + 80;
        uint64_t v23 = AssociatedConformanceWitness;
        goto _$sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj;
      }
      __break(1u);
    }
    else
    {
      if (v9 != *(_DWORD *)(v0 + 300))
      {
        _assertionFailure(_:_:file:line:flags:)();
        return;
      }
      uint64_t v35 = *(void *)(v0 + 200);
      uint64_t v37 = *(void *)(v0 + 144);
      uint64_t v36 = *(void *)(v0 + 152);
      uint64_t v38 = *(void *)(v0 + 136);
      uint64_t v39 = *(void *)(v0 + 104);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 192) + 96))(v35, *(void *)(v0 + 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v36, v35, v38);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_25F91CC30;
      *(void *)(v0 + 32) = 0;
      *(void *)(v0 + 40) = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      uint64_t v18 = swift_bridgeObjectRelease();
      strcpy((char *)(v0 + 16), "Document URL: ");
      *(unsigned char *)(v0 + 31) = -18;
      if ((v39 & 0x8000000000000000) == 0)
      {
        if (*(void *)(*(void *)(v0 + 96) + 16) > *(void *)(v0 + 104))
        {
          uint64_t v41 = *(void *)(v0 + 288);
          uint64_t v42 = *(void *)(v0 + 152);
          uint64_t v43 = *(void *)(v0 + 112);
          v44 = (os_unfair_lock_s *)(v43 + 24);
          v45 = (unint64_t *)(v43 + 16);
          type metadata accessor for URL();
          lazy protocol witness table accessor for type URL and conformance URL();
          v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          v47._countAndFlagsBits = 0x747369676552202CLL;
          v47._object = (void *)0xEC00000064657265;
          String.append(_:)(v47);
          uint64_t v48 = *(void *)(v0 + 16);
          uint64_t v49 = *(void *)(v0 + 24);
          *(void *)(v40 + 56) = MEMORY[0x263F8D310];
          *(void *)(v40 + 32) = v48;
          *(void *)(v40 + 40) = v49;
          print(_:separator:terminator:)();
          swift_bridgeObjectRelease();
          *(void *)(swift_task_alloc() + 16) = v42;
          os_unfair_lock_lock(v44);
          partial apply for closure #1 in closure #1 in closure #2 in register<A>(documents:registrationCallback:)(v45);
          os_unfair_lock_unlock(v44);
          if (v41) {
            return;
          }
          uint64_t v51 = *(void *)(v0 + 216);
          uint64_t v50 = *(void *)(v0 + 224);
          uint64_t v52 = *(void *)(v0 + 208);
          uint64_t v54 = *(void *)(v0 + 144);
          uint64_t v53 = *(void *)(v0 + 152);
          uint64_t v55 = *(void *)(v0 + 136);
          swift_task_dealloc();
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
          goto LABEL_9;
        }
LABEL_22:
        __break(1u);
_$sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj:
        MEMORY[0x270FA1E88](v18, v19, v20, v21, v22, v23);
        return;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 256));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(void (**)(void))(v0 + 8);
  v4();
}

uint64_t closure #1 in closure #1 in closure #2 in register<A>(documents:registrationCallback:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  unint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, v8);
  }
  unint64_t v10 = *(void *)(v8 + 16);
  unint64_t v9 = *(void *)(v8 + 24);
  if (v10 >= v9 >> 1) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1, v8);
  }
  *(void *)(v8 + 16) = v10 + 1;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v10, v7, v4);
  *a1 = v8;
  return result;
}

uint64_t closure #3 in register<A>(documents:registrationCallback:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentResource>, MEMORY[0x263F41560]);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Attachment>, MEMORY[0x263F7FB40]);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>, MEMORY[0x263F7FB70]);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentResourceEnvelope>, type metadata accessor for DocumentResourceEnvelope);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformationEnvelope.AssetEnvelope>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ModerationEnvelope.ProbabilityEnvelope)>, &demangling cache variable for type metadata for (String, ModerationEnvelope.ProbabilityEnvelope));
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformation.Asset>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability)>, &demangling cache variable for type metadata for (PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability));
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Candidate>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.ToolCall>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Segment>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Annotation>, type metadata accessor for PromptCompletion.Annotation);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>, type metadata accessor for Prompt.Turn);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Content>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptEnvelope.DelimiterEnvelope>, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolDescription>, type metadata accessor for ToolDescription);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolDescriptionEnvelope>, type metadata accessor for ToolDescriptionEnvelope);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletionEnvelope.CandidateEnvelope>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolCallEnvelope>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletionEnvelope.SegmentEnvelope>);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationEnvelope>, type metadata accessor for AnnotationEnvelope);
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptTemplateInfo.RichVariableBinding.Component>, MEMORY[0x263F7FC20]);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)>, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
  uint64_t *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AsyncThrowingStream<DocumentRegistration, Error>>, &demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AsyncThrowingStream<DocumentRegistration, Error>.Continuation>, &demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>.Continuation);
  uint64_t *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolType>, MEMORY[0x263F40E50]);
  uint64_t *v3 = result;
  return result;
}

uint64_t partial apply for closure #2 in register<A>(documents:registrationCallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return closure #2 in register<A>(documents:registrationCallback:)(a1, a2, v8, v9, v10, v6, v7);
}

uint64_t partial apply for closure #2 in register<A>(documents:registrationCallback:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Attachment>, MEMORY[0x263F7FB40]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)>, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9]) {
      memmove(v13, v14, 48 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v9] || v13 >= &v14[48 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9]) {
      memmove(v13, v14, 56 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[56 * v9] || v13 >= &v14[56 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[64 * v9]) {
      memmove(v14, v15, v9 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[64 * v9] || v14 >= &v15[64 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = 48 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v13 + 4;
  uint64_t v16 = a4 + 4;
  size_t v17 = 3 * v11;
  if (a1)
  {
    if (v13 != a4 || v15 >= &v16[v17]) {
      memmove(v13 + 4, a4 + 4, v17 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  size_t v14 = *(void *)(v13 + 72);
  uint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  uint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptEnvelope.AttachmentEnvelope>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_25F7A54D8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v6 = (*(void *)(*(void *)(v4 - 8) + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + v7);
  uint64_t v13 = *(void *)((char *)v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #2 in register<A>(documents:registrationCallback:)(a1, v8, v9, v10, v11, v12, v13, v4);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in register<A>(documents:registrationCallback:)(unint64_t *a1)
{
  return closure #1 in closure #1 in closure #2 in register<A>(documents:registrationCallback:)(a1, *(void *)(v1 + 16));
}

uint64_t InferenceRequestHandler.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a18;
  v22[3] = a19;
  v22[4] = a20;
  v22[5] = a21;
  v22[6] = a10;
  v22[7] = a11;
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = a18;
  v23[3] = a19;
  v23[4] = a20;
  v23[5] = a21;
  v23[6] = a12;
  v23[7] = a13;
  unint64_t result = (void *)swift_allocObject();
  result[2] = a18;
  result[3] = a19;
  result[4] = a20;
  result[5] = a21;
  result[6] = a14;
  result[7] = a15;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[9] = v22;
  a9[10] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[11] = v23;
  a9[12] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[13] = result;
  a9[14] = a16;
  a9[15] = a17;
  return result;
}

uint64_t sub_25F7A5A0C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t (*InferenceRequestHandler.ResponseStream.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (char *)swift_allocObject();
  *((void *)v10 + 2) = a2;
  *((void *)v10 + 3) = a3;
  *((void *)v10 + 4) = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v10[v9], a1, a3);
  return partial apply for closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
}

uint64_t (*partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:)(a1, a2, v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t InferenceRequestHandler.handleRequest(data:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 208) = a2;
  *(void *)(v4 + 216) = a3;
  *(void *)(v4 + 200) = a1;
  uint64_t v5 = type metadata accessor for InferenceError();
  *(void *)(v4 + 224) = v5;
  *(void *)(v4 + 232) = *(void *)(v5 - 8);
  *(void *)(v4 + 240) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InferenceError.Context();
  *(void *)(v4 + 248) = v6;
  *(void *)(v4 + 256) = *(void *)(v6 - 8);
  *(void *)(v4 + 264) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for InferenceProviderRequestConfiguration();
  *(void *)(v4 + 272) = v7;
  *(void *)(v4 + 280) = *(void *)(v7 - 8);
  *(void *)(v4 + 288) = swift_task_alloc();
  *(void *)(v4 + 296) = type metadata accessor for InferenceRequest(0);
  *(void *)(v4 + 304) = swift_task_alloc();
  *(void *)(v4 + 312) = type metadata accessor for OneShotRequest(0);
  *(void *)(v4 + 320) = swift_task_alloc();
  *(void *)(v4 + 328) = swift_task_alloc();
  long long v8 = v3[5];
  *(_OWORD *)(v4 + 80) = v3[4];
  *(_OWORD *)(v4 + 96) = v8;
  long long v9 = v3[7];
  *(_OWORD *)(v4 + 112) = v3[6];
  *(_OWORD *)(v4 + 128) = v9;
  long long v10 = v3[1];
  *(_OWORD *)(v4 + 16) = *v3;
  *(_OWORD *)(v4 + 32) = v10;
  long long v11 = v3[3];
  *(_OWORD *)(v4 + 48) = v3[2];
  *(_OWORD *)(v4 + 64) = v11;
  return MEMORY[0x270FA2498](InferenceRequestHandler.handleRequest(data:configuration:), 0, 0);
}

uint64_t InferenceRequestHandler.handleRequest(data:configuration:)()
{
  unint64_t v20 = v0;
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.inference);
  outlined retain of InferenceRequestHandler((uint64_t)(v0 + 2));
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    v19[0] = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v7 = v0[2];
    unint64_t v6 = v0[3];
    swift_bridgeObjectRetain();
    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of InferenceRequestHandler((uint64_t)(v0 + 2));
    *(_WORD *)(v4 + 12) = 2080;
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000025F92C310, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25F79F000, v2, v3, "%s:%s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v5, -1, -1);
    MEMORY[0x261201C80](v4, -1, -1);
  }
  else
  {
    outlined release of InferenceRequestHandler((uint64_t)(v0 + 2));
  }

  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type OneShotRequest and conformance OneShotRequest, (void (*)(uint64_t))type metadata accessor for OneShotRequest);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[38];
  uint64_t v11 = v0[35];
  long long v10 = (char *)v0[36];
  uint64_t v12 = v0[34];
  uint64_t v13 = v0[27];
  outlined init with take of OneShotRequest(v0[40], v8, type metadata accessor for OneShotRequest);
  uint64_t v14 = v0[2];
  uint64_t v15 = v0[3];
  outlined init with copy of OneShotRequest(v8, v9, type metadata accessor for OneShotRequest);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  type metadata accessor for InferenceRequestInstrumentation(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v0[42] = InferenceRequestInstrumentation.init(inferenceRequestHandlerIdentifier:inferenceRequest:configuration:)(v14, v15, v9, v10);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[43] = v16;
  v16[2] = v8;
  v16[3] = v0 + 2;
  v16[4] = v13;
  size_t v17 = (void *)swift_task_alloc();
  v0[44] = v17;
  *size_t v17 = v0;
  v17[1] = InferenceRequestHandler.handleRequest(data:configuration:);
  return InferenceRequestInstrumentation.measure(_:)((uint64_t)&async function pointer to partial apply for closure #1 in InferenceRequestHandler.handleRequest(data:configuration:), (uint64_t)v16);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[41];
  swift_release();
  outlined destroy of OneShotRequest(v1, type metadata accessor for OneShotRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v4 = v0[46];
  os_log_type_t v3 = v0[47];
  return v2(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 328);
  swift_release();
  outlined destroy of OneShotRequest(v1, type metadata accessor for OneShotRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t InferenceRequestHandler.handleRequest(data:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 360) = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    uint64_t v7 = InferenceRequestHandler.handleRequest(data:configuration:);
  }
  else
  {
    *(void *)(v6 + 368) = a2;
    *(void *)(v6 + 376) = a1;
    swift_task_dealloc();
    uint64_t v7 = InferenceRequestHandler.handleRequest(data:configuration:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t closure #1 in InferenceRequestHandler.handleRequest(data:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[220] = a5;
  v5[219] = a4;
  v5[218] = a3;
  v5[217] = a2;
  v5[216] = a1;
  v5[221] = type metadata accessor for TokenGenerationError(0);
  v5[222] = swift_task_alloc();
  v5[223] = swift_task_alloc();
  v5[224] = swift_task_alloc();
  type metadata accessor for CountTokensPromptTemplateRequest(0);
  v5[225] = swift_task_alloc();
  type metadata accessor for CompletePromptTemplateRequest(0);
  v5[226] = swift_task_alloc();
  type metadata accessor for CompletePromptRequest(0);
  v5[227] = swift_task_alloc();
  v5[228] = type metadata accessor for OneShotRequest(0);
  v5[229] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in InferenceRequestHandler.handleRequest(data:configuration:), 0, 0);
}

uint64_t closure #1 in InferenceRequestHandler.handleRequest(data:configuration:)()
{
  outlined init with copy of OneShotRequest(v0[218], v0[229], type metadata accessor for OneShotRequest);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v19 = v0 + 176;
      uint64_t v24 = v0[219];
      outlined init with take of OneShotRequest(v0[229], v0[225], type metadata accessor for CountTokensPromptTemplateRequest);
      uint64_t v27 = (int *)(*(void *)(v24 + 112) + **(int **)(v24 + 112));
      unint64_t v25 = (void *)swift_task_alloc();
      v0[243] = v25;
      *unint64_t v25 = v0;
      v25[1] = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
      uint64_t v18 = (void *)v0[225];
      goto LABEL_6;
    case 2u:
      uint64_t v19 = v0 + 68;
      uint64_t v20 = v0[219];
      outlined init with take of OneShotRequest(v0[229], v0[227], type metadata accessor for CompletePromptRequest);
      uint64_t v27 = (int *)(*(void *)(v20 + 32) + **(int **)(v20 + 32));
      uint64_t v21 = (void *)swift_task_alloc();
      v0[239] = v21;
      void *v21 = v0;
      v21[1] = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
      uint64_t v18 = (void *)v0[227];
      goto LABEL_6;
    case 3u:
      uint64_t v19 = v0 + 112;
      uint64_t v22 = v0[219];
      outlined init with take of OneShotRequest(v0[229], v0[226], type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v27 = (int *)(*(void *)(v22 + 48) + **(int **)(v22 + 48));
      uint64_t v23 = (void *)swift_task_alloc();
      v0[241] = v23;
      *uint64_t v23 = v0;
      v23[1] = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
      uint64_t v18 = (void *)v0[226];
LABEL_6:
      uint64_t v16 = v0[220];
      size_t v17 = v19;
      break;
    default:
      uint64_t v1 = (uint64_t *)v0[229];
      uint64_t v2 = v0[219];
      uint64_t v3 = *v1;
      uint64_t v4 = v1[1];
      v0[230] = v4;
      uint64_t v5 = v1[2];
      v0[231] = v5;
      uint64_t v6 = v1[3];
      v0[232] = v6;
      uint64_t v7 = v1[4];
      uint64_t v8 = v1[5];
      v0[233] = v8;
      uint64_t v10 = v1[6];
      uint64_t v9 = v1[7];
      v0[234] = v9;
      uint64_t v11 = v1[8];
      uint64_t v12 = v1[9];
      v0[235] = v12;
      uint64_t v13 = v1[10];
      v0[236] = v13;
      uint64_t v14 = *(int **)(v2 + 16);
      v0[190] = v3;
      v0[191] = v4;
      v0[192] = v5;
      v0[193] = v6;
      v0[194] = v7;
      v0[195] = v8;
      v0[196] = v10;
      v0[197] = v9;
      v0[198] = v11;
      v0[199] = v12;
      v0[200] = v13;
      uint64_t v27 = (int *)((char *)v14 + *v14);
      uint64_t v15 = (void *)swift_task_alloc();
      v0[237] = v15;
      *uint64_t v15 = v0;
      v15[1] = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
      uint64_t v16 = v0[220];
      size_t v17 = v0 + 148;
      uint64_t v18 = v0 + 190;
      break;
  }
  return ((uint64_t (*)(void *, void *, uint64_t))v27)(v17, v18, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1904) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *log;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];
  uint64_t v84;
  uint64_t v85;

  v84 = v0;
  uint64_t v1 = *(void *)(v0 + 1184);
  v79 = *(void *)(v0 + 1200);
  v80 = *(void *)(v0 + 1192);
  uint64_t v2 = *(void *)(v0 + 1208);
  uint64_t v3 = *(void *)(v0 + 1216);
  uint64_t v4 = *(void *)(v0 + 1224);
  uint64_t v5 = *(void *)(v0 + 1232);
  v77 = *(void *)(v0 + 1240);
  uint64_t v6 = *(void *)(v0 + 1248);
  v70 = *(void *)(v0 + 1256);
  uint64_t v7 = *(void *)(v0 + 1272);
  v72 = *(void *)(v0 + 1280);
  v73 = *(void *)(v0 + 1264);
  v71 = *(void *)(v0 + 1288);
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  v67 = v1;
  uint64_t v8 = *(void *)(v0 + 1752);
  v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Log.inference);
  outlined retain of InferenceRequestHandler(v8);
  outlined copy of PromptRenderingEnvelope?(v80, v79);
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.default.getter();
  log = v9;
  uint64_t v11 = os_log_type_enabled(v9, v10);
  v65 = v2;
  uint64_t v12 = v5;
  uint64_t v13 = *(uint64_t **)(v0 + 1752);
  v68 = v3;
  v75 = v12;
  v69 = v4;
  if (v11)
  {
    uint64_t v14 = swift_slowAlloc();
    v63 = swift_slowAlloc();
    v83[0] = v63;
    *(_DWORD *)uint64_t v14 = 136315650;
    v62 = v7;
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 1704) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of InferenceRequestHandler((uint64_t)v13);
    *(_WORD *)(v14 + 12) = 2080;
    *(void *)(v0 + 1712) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000025F92C310, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2048;
    size_t v17 = v67;
    *(void *)(v0 + 1720) = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v18 = v65;
    outlined consume of PromptRenderingEnvelope?(v80, v79);
    _os_log_impl(&dword_25F79F000, log, v10, "%s:%s:countTokens:response\ncount: %ld", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v63, -1, -1);
    MEMORY[0x261201C80](v14, -1, -1);

    uint64_t v19 = v69;
    uint64_t v20 = v62;
    uint64_t v21 = v6;
    uint64_t v22 = v77;
    uint64_t v23 = v70;
    uint64_t v24 = v72;
    unint64_t v25 = v73;
    uint64_t v26 = v71;
  }
  else
  {
    outlined release of InferenceRequestHandler((uint64_t)v13);
    uint64_t v27 = v4;
    uint64_t v23 = v70;
    uint64_t v26 = v71;
    uint64_t v24 = v72;
    uint64_t v18 = v2;
    outlined consume of PromptRenderingEnvelope?(v80, v79);

    uint64_t v21 = v6;
    uint64_t v22 = v77;
    uint64_t v20 = v7;
    unint64_t v25 = v73;
    uint64_t v19 = v27;
    uint64_t v3 = v68;
    size_t v17 = v67;
  }
  *(void *)(v0 + 1296) = v17;
  *(void *)(v0 + 1304) = v80;
  *(void *)(v0 + 1312) = v79;
  *(void *)(v0 + 1320) = v18;
  *(void *)(v0 + 1328) = v3;
  *(void *)(v0 + 1336) = v19;
  *(void *)(v0 + 1344) = v75;
  *(void *)(v0 + 1352) = v22;
  *(void *)(v0 + 1360) = v21;
  *(void *)(v0 + 1368) = v23;
  *(void *)(v0 + 1376) = v25;
  *(void *)(v0 + 1384) = v20;
  *(void *)(v0 + 1392) = v24;
  *(void *)(v0 + 1400) = v26;
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  uint64_t v28 = *(void **)(v0 + 1904);
  lazy protocol witness table accessor for type CountTokensResponse and conformance CountTokensResponse();
  Swift::String v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v74 = v30;
  uint64_t v31 = v28;
  outlined consume of PromptRenderingEnvelope?(v80, v79);
  if (v28)
  {
    *(void *)(v0 + 1696) = v28;
    MEMORY[0x261201A80](v28);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      uint64_t v32 = *(void *)(v0 + 1792);
      uint64_t v33 = *(void *)(v0 + 1784);

      outlined init with take of OneShotRequest(v32, v33, type metadata accessor for TokenGenerationError);
      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v34 = *(void *)(v0 + 1784);
      uint64_t v35 = *(void *)(v0 + 1776);
      uint64_t v36 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v64, (uint64_t)static Log.inference);
      outlined init with copy of OneShotRequest(v34, v35, type metadata accessor for TokenGenerationError);
      outlined retain of InferenceRequestHandler(v36);
      uint64_t v37 = Logger.logObject.getter();
      uint64_t v38 = static os_log_type_t.error.getter();
      uint64_t v39 = os_log_type_enabled(v37, v38);
      uint64_t v40 = *(void *)(v0 + 1776);
      if (v39)
      {
        uint64_t v41 = *(uint64_t **)(v0 + 1752);
        uint64_t v42 = swift_slowAlloc();
        uint64_t v43 = (void *)swift_slowAlloc();
        v81 = swift_slowAlloc();
        v83[0] = v81;
        *(_DWORD *)uint64_t v42 = 136315394;
        v45 = *v41;
        v44 = v41[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v41);
        *(_WORD *)(v42 + 12) = 2112;
        lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
        swift_allocError();
        outlined init with copy of OneShotRequest(v40, v46, type metadata accessor for TokenGenerationError);
        Swift::String v47 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1648) = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v43 = v47;
        outlined destroy of OneShotRequest(v40, type metadata accessor for TokenGenerationError);
        _os_log_impl(&dword_25F79F000, v37, v38, "%s: Request failed %@", (uint8_t *)v42, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v43, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v81, -1, -1);
        MEMORY[0x261201C80](v42, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined destroy of OneShotRequest(v40, type metadata accessor for TokenGenerationError);
      }

      v59 = *(void *)(v0 + 1784);
      type metadata accessor for InferenceError();
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
      swift_allocError();
      TokenGenerationError.toInferenceError()(v60);
      swift_willThrow();
      outlined destroy of OneShotRequest(v59, type metadata accessor for TokenGenerationError);
    }
    else
    {

      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v50 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v64, (uint64_t)static Log.inference);
      outlined retain of InferenceRequestHandler(v50);
      MEMORY[0x261201A80](v28);
      outlined retain of InferenceRequestHandler(v50);
      MEMORY[0x261201A80](v28);
      uint64_t v51 = Logger.logObject.getter();
      uint64_t v52 = static os_log_type_t.error.getter();
      uint64_t v53 = os_log_type_enabled(v51, v52);
      uint64_t v54 = *(uint64_t **)(v0 + 1752);
      if (v53)
      {
        uint64_t v55 = swift_slowAlloc();
        v78 = (void *)swift_slowAlloc();
        v82 = swift_slowAlloc();
        v83[0] = v82;
        *(_DWORD *)uint64_t v55 = 136315394;
        v76 = v51;
        uint64_t v57 = *v54;
        uint64_t v56 = v54[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v56, v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v54);
        outlined release of InferenceRequestHandler((uint64_t)v54);
        *(_WORD *)(v55 + 12) = 2112;
        MEMORY[0x261201A80](v31);
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1680) = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v78 = v58;

        uint64_t v51 = v76;
        _os_log_impl(&dword_25F79F000, v76, v52, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v55, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v78, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v82, -1, -1);
        MEMORY[0x261201C80](v55, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined release of InferenceRequestHandler((uint64_t)v54);
      }
      swift_willThrow();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v61 = *(uint64_t (**)(void))(v0 + 8);
    return v61();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v48(v29, v74);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1920) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  else {
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  void (*v16)(_OWORD *);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void);
  os_log_type_t type;
  NSObject *log;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[12];
  uint64_t v74;
  uint64_t v75;

  v74 = v0;
  uint64_t v1 = *(_OWORD *)(v0 + 656);
  uint64_t v3 = *(_OWORD *)(v0 + 672);
  uint64_t v2 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 144) = v3;
  *(_OWORD *)(v0 + 160) = v2;
  uint64_t v4 = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 704);
  uint64_t v5 = *(_OWORD *)(v0 + 592);
  uint64_t v7 = *(_OWORD *)(v0 + 608);
  uint64_t v6 = *(_OWORD *)(v0 + 624);
  *(_OWORD *)(v0 + 80) = v7;
  *(_OWORD *)(v0 + 96) = v6;
  uint64_t v8 = *(_OWORD *)(v0 + 624);
  uint64_t v10 = *(_OWORD *)(v0 + 640);
  uint64_t v9 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 112) = v10;
  *(_OWORD *)(v0 + 128) = v9;
  uint64_t v11 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 32) = v11;
  uint64_t v12 = *(_OWORD *)(v0 + 592);
  uint64_t v14 = *(_OWORD *)(v0 + 544);
  uint64_t v13 = *(_OWORD *)(v0 + 560);
  uint64_t v15 = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 48) = v15;
  *(_OWORD *)(v0 + 64) = v12;
  v73[8] = v3;
  v73[9] = v4;
  v73[10] = *(_OWORD *)(v0 + 704);
  v73[4] = v7;
  v73[5] = v8;
  v73[6] = v10;
  v73[7] = v1;
  v73[0] = v14;
  v73[1] = v13;
  uint64_t v16 = *(void (**)(_OWORD *))(v0 + 1728);
  v73[2] = v15;
  v73[3] = v5;
  v16(v73);
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  size_t v17 = (uint64_t *)(v0 + 1680);
  uint64_t v18 = *(void *)(v0 + 1752);
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.inference);
  outlined retain of InferenceRequestHandler(v18);
  uint64_t v20 = Logger.logObject.getter();
  uint64_t v21 = static os_log_type_t.default.getter();
  uint64_t v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(uint64_t **)(v0 + 1752);
  if (v22)
  {
    uint64_t v24 = swift_slowAlloc();
    v69 = swift_slowAlloc();
    *(void *)&v73[0] = v69;
    *(_DWORD *)uint64_t v24 = 136315394;
    type = v21;
    uint64_t v26 = *v23;
    unint64_t v25 = v23[1];
    swift_bridgeObjectRetain();
    uint64_t v27 = v26;
    size_t v17 = (uint64_t *)(v0 + 1680);
    *(void *)(v0 + 1664) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v25, (uint64_t *)v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of InferenceRequestHandler((uint64_t)v23);
    *(_WORD *)(v24 + 12) = 2080;
    *(void *)(v0 + 1672) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000025F92C310, (uint64_t *)v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25F79F000, v20, type, "%s:%s:completePrompt:response", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v69, -1, -1);
    MEMORY[0x261201C80](v24, -1, -1);
  }
  else
  {
    outlined release of InferenceRequestHandler((uint64_t)v23);
  }

  uint64_t v28 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 864) = v28;
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 176);
  Swift::String v29 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 784) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 800) = v29;
  Swift::String v30 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 816) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 832) = v30;
  uint64_t v31 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 736) = v31;
  uint64_t v32 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 768) = v32;
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  uint64_t v33 = *(void **)(v0 + 1920);
  lazy protocol witness table accessor for type CompletePromptResponse and conformance CompletePromptResponse();
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v36 = v35;
  outlined destroy of OneShotRequest(*(void *)(v0 + 1816), type metadata accessor for CompletePromptRequest);
  outlined release of CompletePromptResponse((void *)(v0 + 16));
  if (v33)
  {
    *(void *)(v0 + 1696) = v33;
    MEMORY[0x261201A80](v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      uint64_t v37 = *(void *)(v0 + 1792);
      uint64_t v38 = *(void *)(v0 + 1784);

      outlined init with take of OneShotRequest(v37, v38, type metadata accessor for TokenGenerationError);
      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v39 = *(void *)(v0 + 1784);
      uint64_t v40 = *(void *)(v0 + 1776);
      uint64_t v41 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v19, (uint64_t)static Log.inference);
      outlined init with copy of OneShotRequest(v39, v40, type metadata accessor for TokenGenerationError);
      outlined retain of InferenceRequestHandler(v41);
      uint64_t v42 = Logger.logObject.getter();
      uint64_t v43 = static os_log_type_t.error.getter();
      v44 = os_log_type_enabled(v42, v43);
      v45 = *(void *)(v0 + 1776);
      if (v44)
      {
        Swift::String v46 = *(uint64_t **)(v0 + 1752);
        Swift::String v47 = swift_slowAlloc();
        uint64_t v48 = (void *)swift_slowAlloc();
        v71 = swift_slowAlloc();
        *(void *)&v73[0] = v71;
        *(_DWORD *)Swift::String v47 = 136315394;
        uint64_t v50 = *v46;
        uint64_t v49 = v46[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v49, (uint64_t *)v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v46);
        *(_WORD *)(v47 + 12) = 2112;
        lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
        swift_allocError();
        outlined init with copy of OneShotRequest(v45, v51, type metadata accessor for TokenGenerationError);
        uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1648) = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v48 = v52;
        outlined destroy of OneShotRequest(v45, type metadata accessor for TokenGenerationError);
        _os_log_impl(&dword_25F79F000, v42, v43, "%s: Request failed %@", (uint8_t *)v47, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v48, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v71, -1, -1);
        MEMORY[0x261201C80](v47, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined destroy of OneShotRequest(v45, type metadata accessor for TokenGenerationError);
      }

      v64 = *(void *)(v0 + 1784);
      type metadata accessor for InferenceError();
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
      swift_allocError();
      TokenGenerationError.toInferenceError()(v65);
      swift_willThrow();
      outlined destroy of OneShotRequest(v64, type metadata accessor for TokenGenerationError);
    }
    else
    {

      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v55 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v19, (uint64_t)static Log.inference);
      outlined retain of InferenceRequestHandler(v55);
      MEMORY[0x261201A80](v33);
      outlined retain of InferenceRequestHandler(v55);
      MEMORY[0x261201A80](v33);
      uint64_t v56 = Logger.logObject.getter();
      uint64_t v57 = static os_log_type_t.error.getter();
      uint64_t v58 = os_log_type_enabled(v56, v57);
      v59 = *(uint64_t **)(v0 + 1752);
      if (v58)
      {
        v60 = swift_slowAlloc();
        v70 = (void *)swift_slowAlloc();
        v72 = swift_slowAlloc();
        *(void *)&v73[0] = v72;
        *(_DWORD *)v60 = 136315394;
        log = v56;
        v62 = *v59;
        v61 = v59[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v61, (uint64_t *)v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v59);
        outlined release of InferenceRequestHandler((uint64_t)v59);
        *(_WORD *)(v60 + 12) = 2112;
        MEMORY[0x261201A80](v33);
        v63 = _swift_stdlib_bridgeErrorToNSError();
        *size_t v17 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v70 = v63;

        uint64_t v56 = log;
        _os_log_impl(&dword_25F79F000, log, v57, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v60, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v70, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v72, -1, -1);
        MEMORY[0x261201C80](v60, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined release of InferenceRequestHandler((uint64_t)v59);
      }
      swift_willThrow();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v66 = *(uint64_t (**)(void))(v0 + 8);
    return v66();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v53(v34, v36);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1936) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  else {
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  void (*v15)(_OWORD *);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  BOOL v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void);
  NSObject *log;
  void *v67;
  os_log_type_t type;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[12];
  uint64_t v73;
  uint64_t v74;

  v73 = v0;
  uint64_t v1 = *(_OWORD *)(v0 + 1040);
  uint64_t v2 = *(_OWORD *)(v0 + 1008);
  *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 1024);
  *(_OWORD *)(v0 + 336) = v1;
  *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 1056);
  uint64_t v3 = *(_OWORD *)(v0 + 944);
  uint64_t v5 = *(_OWORD *)(v0 + 960);
  uint64_t v4 = *(_OWORD *)(v0 + 976);
  *(_OWORD *)(v0 + 256) = v5;
  *(_OWORD *)(v0 + 272) = v4;
  uint64_t v6 = *(_OWORD *)(v0 + 976);
  uint64_t v8 = *(_OWORD *)(v0 + 992);
  uint64_t v7 = *(_OWORD *)(v0 + 1008);
  *(_OWORD *)(v0 + 288) = v8;
  *(_OWORD *)(v0 + 304) = v7;
  uint64_t v9 = *(_OWORD *)(v0 + 912);
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 896);
  *(_OWORD *)(v0 + 208) = v9;
  uint64_t v10 = *(_OWORD *)(v0 + 944);
  uint64_t v12 = *(_OWORD *)(v0 + 896);
  uint64_t v11 = *(_OWORD *)(v0 + 912);
  uint64_t v13 = *(_OWORD *)(v0 + 928);
  *(_OWORD *)(v0 + 224) = v13;
  *(_OWORD *)(v0 + 240) = v10;
  uint64_t v14 = *(_OWORD *)(v0 + 1040);
  v72[8] = *(_OWORD *)(v0 + 1024);
  v72[9] = v14;
  v72[10] = *(_OWORD *)(v0 + 1056);
  v72[4] = v5;
  v72[5] = v6;
  v72[6] = v8;
  v72[7] = v2;
  v72[0] = v12;
  v72[1] = v11;
  uint64_t v15 = *(void (**)(_OWORD *))(v0 + 1728);
  v72[2] = v13;
  v72[3] = v3;
  v15(v72);
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)(v0 + 1752);
  size_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.inference);
  outlined retain of InferenceRequestHandler(v16);
  uint64_t v18 = Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.default.getter();
  uint64_t v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(uint64_t **)(v0 + 1752);
  if (v20)
  {
    uint64_t v22 = swift_slowAlloc();
    v69 = swift_slowAlloc();
    *(void *)&v72[0] = v69;
    *(_DWORD *)uint64_t v22 = 136315394;
    type = v19;
    uint64_t v23 = v17;
    unint64_t v25 = *v21;
    uint64_t v24 = v21[1];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 1624) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, (uint64_t *)v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    size_t v17 = v23;
    swift_bridgeObjectRelease();
    outlined release of InferenceRequestHandler((uint64_t)v21);
    *(_WORD *)(v22 + 12) = 2080;
    *(void *)(v0 + 1632) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000025F92C310, (uint64_t *)v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25F79F000, v18, type, "%s:%s:completePromptTemplate:response", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v69, -1, -1);
    MEMORY[0x261201C80](v22, -1, -1);
  }
  else
  {
    outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
  }

  uint64_t v26 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 512) = v26;
  *(_OWORD *)(v0 + 528) = *(_OWORD *)(v0 + 352);
  uint64_t v27 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 448) = v27;
  uint64_t v28 = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 480) = v28;
  Swift::String v29 = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 384) = v29;
  Swift::String v30 = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 416) = v30;
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  uint64_t v31 = *(void **)(v0 + 1936);
  lazy protocol witness table accessor for type CompletePromptResponse and conformance CompletePromptResponse();
  uint64_t v32 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v34 = v33;
  uint64_t v35 = v31;
  outlined destroy of OneShotRequest(*(void *)(v0 + 1808), type metadata accessor for CompletePromptTemplateRequest);
  outlined release of CompletePromptResponse((void *)(v0 + 192));
  if (v31)
  {
    *(void *)(v0 + 1696) = v31;
    MEMORY[0x261201A80](v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      uint64_t v36 = *(void *)(v0 + 1792);
      uint64_t v37 = *(void *)(v0 + 1784);

      outlined init with take of OneShotRequest(v36, v37, type metadata accessor for TokenGenerationError);
      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v38 = *(void *)(v0 + 1784);
      uint64_t v39 = *(void *)(v0 + 1776);
      uint64_t v40 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v17, (uint64_t)static Log.inference);
      outlined init with copy of OneShotRequest(v38, v39, type metadata accessor for TokenGenerationError);
      outlined retain of InferenceRequestHandler(v40);
      uint64_t v41 = Logger.logObject.getter();
      uint64_t v42 = static os_log_type_t.error.getter();
      uint64_t v43 = os_log_type_enabled(v41, v42);
      v44 = *(void *)(v0 + 1776);
      if (v43)
      {
        v45 = *(uint64_t **)(v0 + 1752);
        Swift::String v46 = swift_slowAlloc();
        Swift::String v47 = (void *)swift_slowAlloc();
        v70 = swift_slowAlloc();
        *(void *)&v72[0] = v70;
        *(_DWORD *)Swift::String v46 = 136315394;
        uint64_t v49 = *v45;
        uint64_t v48 = v45[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v48, (uint64_t *)v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v45);
        *(_WORD *)(v46 + 12) = 2112;
        lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
        swift_allocError();
        outlined init with copy of OneShotRequest(v44, v50, type metadata accessor for TokenGenerationError);
        uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1648) = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Swift::String v47 = v51;
        outlined destroy of OneShotRequest(v44, type metadata accessor for TokenGenerationError);
        _os_log_impl(&dword_25F79F000, v41, v42, "%s: Request failed %@", (uint8_t *)v46, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v47, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v70, -1, -1);
        MEMORY[0x261201C80](v46, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined destroy of OneShotRequest(v44, type metadata accessor for TokenGenerationError);
      }

      v63 = *(void *)(v0 + 1784);
      type metadata accessor for InferenceError();
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
      swift_allocError();
      TokenGenerationError.toInferenceError()(v64);
      swift_willThrow();
      outlined destroy of OneShotRequest(v63, type metadata accessor for TokenGenerationError);
    }
    else
    {

      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v54 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v17, (uint64_t)static Log.inference);
      outlined retain of InferenceRequestHandler(v54);
      MEMORY[0x261201A80](v31);
      outlined retain of InferenceRequestHandler(v54);
      MEMORY[0x261201A80](v31);
      uint64_t v55 = Logger.logObject.getter();
      uint64_t v56 = static os_log_type_t.error.getter();
      uint64_t v57 = os_log_type_enabled(v55, v56);
      uint64_t v58 = *(uint64_t **)(v0 + 1752);
      if (v57)
      {
        v59 = swift_slowAlloc();
        v67 = (void *)swift_slowAlloc();
        v71 = swift_slowAlloc();
        *(void *)&v72[0] = v71;
        *(_DWORD *)v59 = 136315394;
        log = v55;
        v61 = *v58;
        v60 = v58[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v60, (uint64_t *)v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v58);
        outlined release of InferenceRequestHandler((uint64_t)v58);
        *(_WORD *)(v59 + 12) = 2112;
        MEMORY[0x261201A80](v31);
        v62 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1680) = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v67 = v62;

        uint64_t v55 = log;
        _os_log_impl(&dword_25F79F000, log, v56, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v59, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v67, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v71, -1, -1);
        MEMORY[0x261201C80](v59, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined release of InferenceRequestHandler((uint64_t)v58);
      }
      swift_willThrow();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v65 = *(uint64_t (**)(void))(v0 + 8);
    return v65();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v52(v32, v34);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1952) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  else {
    uint64_t v2 = closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void);
  os_log_type_t type;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *log;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[3];
  uint64_t v85;
  uint64_t v86;

  v85 = v0;
  v69 = *(void *)(v0 + 1408);
  uint64_t v1 = *(void *)(v0 + 1424);
  uint64_t v2 = *(void *)(v0 + 1440);
  uint64_t v3 = *(void *)(v0 + 1448);
  v79 = *(void *)(v0 + 1456);
  v81 = *(void *)(v0 + 1416);
  uint64_t v4 = *(void *)(v0 + 1464);
  v75 = *(void *)(v0 + 1432);
  v77 = *(void *)(v0 + 1472);
  v71 = *(void *)(v0 + 1480);
  v72 = *(void *)(v0 + 1488);
  uint64_t v5 = *(void *)(v0 + 1496);
  uint64_t v6 = *(void *)(v0 + 1504);
  v70 = *(void *)(v0 + 1512);
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 1752);
  v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Log.inference);
  outlined retain of InferenceRequestHandler(v7);
  outlined copy of PromptRenderingEnvelope?(v81, v1);
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.default.getter();
  log = v8;
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v3;
  uint64_t v12 = *(uint64_t **)(v0 + 1752);
  v74 = v11;
  v67 = v6;
  if (v10)
  {
    v64 = v1;
    uint64_t v13 = swift_slowAlloc();
    v65 = swift_slowAlloc();
    v84[0] = v65;
    *(_DWORD *)uint64_t v13 = 136315650;
    type = v9;
    uint64_t v14 = v2;
    uint64_t v15 = *v12;
    uint64_t v16 = v12[1];
    swift_bridgeObjectRetain();
    size_t v17 = v15;
    uint64_t v2 = v14;
    *(void *)(v0 + 1640) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of InferenceRequestHandler((uint64_t)v12);
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v0 + 1616) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000025F92C310, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2048;
    uint64_t v18 = v69;
    *(void *)(v0 + 1608) = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of PromptRenderingEnvelope?(v81, v64);
    _os_log_impl(&dword_25F79F000, log, type, "%s:%s:countTokens:response\ncount: %ld", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v65, -1, -1);
    MEMORY[0x261201C80](v13, -1, -1);

    uint64_t v19 = v5;
    uint64_t v20 = v4;
    uint64_t v21 = v64;
    uint64_t v22 = v79;
    uint64_t v23 = v77;
    uint64_t v24 = v71;
    unint64_t v25 = v72;
    uint64_t v26 = v70;
  }
  else
  {
    outlined release of InferenceRequestHandler((uint64_t)v12);
    unint64_t v25 = v72;
    uint64_t v24 = v71;
    uint64_t v27 = v1;
    uint64_t v28 = v1;
    uint64_t v23 = v77;
    outlined consume of PromptRenderingEnvelope?(v81, v27);

    uint64_t v21 = v28;
    uint64_t v20 = v4;
    uint64_t v22 = v79;
    uint64_t v19 = v5;
    uint64_t v6 = v67;
    uint64_t v26 = v70;
    uint64_t v18 = v69;
  }
  *(void *)(v0 + 1072) = v18;
  *(void *)(v0 + 1080) = v81;
  *(void *)(v0 + 1088) = v21;
  *(void *)(v0 + 1096) = v75;
  *(void *)(v0 + 1104) = v2;
  *(void *)(v0 + 1112) = v74;
  *(void *)(v0 + 1120) = v22;
  *(void *)(v0 + 1128) = v20;
  *(void *)(v0 + 1136) = v23;
  *(void *)(v0 + 1144) = v24;
  *(void *)(v0 + 1152) = v25;
  *(void *)(v0 + 1160) = v19;
  *(void *)(v0 + 1168) = v6;
  *(void *)(v0 + 1176) = v26;
  Swift::String v29 = v21;
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  Swift::String v30 = *(void **)(v0 + 1952);
  lazy protocol witness table accessor for type CountTokensResponse and conformance CountTokensResponse();
  v73 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v32 = v31;
  outlined destroy of OneShotRequest(*(void *)(v0 + 1800), type metadata accessor for CountTokensPromptTemplateRequest);
  uint64_t v33 = v30;
  outlined consume of PromptRenderingEnvelope?(v81, v29);
  if (v30)
  {
    *(void *)(v0 + 1696) = v30;
    MEMORY[0x261201A80](v30);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      uint64_t v34 = *(void *)(v0 + 1792);
      uint64_t v35 = *(void *)(v0 + 1784);

      outlined init with take of OneShotRequest(v34, v35, type metadata accessor for TokenGenerationError);
      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v36 = *(void *)(v0 + 1784);
      uint64_t v37 = *(void *)(v0 + 1776);
      uint64_t v38 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v66, (uint64_t)static Log.inference);
      outlined init with copy of OneShotRequest(v36, v37, type metadata accessor for TokenGenerationError);
      outlined retain of InferenceRequestHandler(v38);
      uint64_t v39 = Logger.logObject.getter();
      uint64_t v40 = static os_log_type_t.error.getter();
      uint64_t v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = *(void *)(v0 + 1776);
      if (v41)
      {
        uint64_t v43 = *(uint64_t **)(v0 + 1752);
        v44 = swift_slowAlloc();
        v80 = (void *)swift_slowAlloc();
        v82 = swift_slowAlloc();
        v84[0] = v82;
        *(_DWORD *)v44 = 136315394;
        Swift::String v46 = *v43;
        v45 = v43[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v45, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v43);
        *(_WORD *)(v44 + 12) = 2112;
        lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
        swift_allocError();
        outlined init with copy of OneShotRequest(v42, v47, type metadata accessor for TokenGenerationError);
        uint64_t v48 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1648) = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v80 = v48;
        outlined destroy of OneShotRequest(v42, type metadata accessor for TokenGenerationError);
        _os_log_impl(&dword_25F79F000, v39, v40, "%s: Request failed %@", (uint8_t *)v44, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v80, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v82, -1, -1);
        MEMORY[0x261201C80](v44, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined destroy of OneShotRequest(v42, type metadata accessor for TokenGenerationError);
      }

      v60 = *(void *)(v0 + 1784);
      type metadata accessor for InferenceError();
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
      swift_allocError();
      TokenGenerationError.toInferenceError()(v61);
      swift_willThrow();
      outlined destroy of OneShotRequest(v60, type metadata accessor for TokenGenerationError);
    }
    else
    {

      if (one-time initialization token for inference != -1) {
        swift_once();
      }
      uint64_t v51 = *(void *)(v0 + 1752);
      __swift_project_value_buffer(v66, (uint64_t)static Log.inference);
      outlined retain of InferenceRequestHandler(v51);
      MEMORY[0x261201A80](v30);
      outlined retain of InferenceRequestHandler(v51);
      MEMORY[0x261201A80](v30);
      uint64_t v52 = Logger.logObject.getter();
      uint64_t v53 = static os_log_type_t.error.getter();
      uint64_t v54 = os_log_type_enabled(v52, v53);
      uint64_t v55 = *(uint64_t **)(v0 + 1752);
      if (v54)
      {
        uint64_t v56 = swift_slowAlloc();
        v78 = (void *)swift_slowAlloc();
        v83 = swift_slowAlloc();
        v84[0] = v83;
        *(_DWORD *)uint64_t v56 = 136315394;
        v76 = v52;
        uint64_t v58 = *v55;
        uint64_t v57 = v55[1];
        swift_bridgeObjectRetain();
        *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v57, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v55);
        outlined release of InferenceRequestHandler((uint64_t)v55);
        *(_WORD *)(v56 + 12) = 2112;
        MEMORY[0x261201A80](v33);
        v59 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 1680) = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v78 = v59;

        uint64_t v52 = v76;
        _os_log_impl(&dword_25F79F000, v76, v53, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v56, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v78, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v83, -1, -1);
        MEMORY[0x261201C80](v56, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
        outlined release of InferenceRequestHandler((uint64_t)v55);
      }
      swift_willThrow();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v62 = *(uint64_t (**)(void))(v0 + 8);
    return v62();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v49(v73, v32);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  NSObject *log;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 1904);
  *(void *)(v0 + 1696) = v1;
  MEMORY[0x261201A80](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v2 = *(void *)(v0 + 1792);
    uint64_t v3 = *(void *)(v0 + 1784);

    outlined init with take of OneShotRequest(v2, v3, type metadata accessor for TokenGenerationError);
    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 1784);
    uint64_t v5 = *(void *)(v0 + 1776);
    uint64_t v6 = *(void *)(v0 + 1752);
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.inference);
    outlined init with copy of OneShotRequest(v4, v5, type metadata accessor for TokenGenerationError);
    outlined retain of InferenceRequestHandler(v6);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 1776);
    if (v10)
    {
      uint64_t v12 = *(uint64_t **)(v0 + 1752);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v37[0] = v35;
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v16 = *v12;
      uint64_t v15 = v12[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v12);
      *(_WORD *)(v13 + 12) = 2112;
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
      swift_allocError();
      outlined init with copy of OneShotRequest(v11, v17, type metadata accessor for TokenGenerationError);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1648) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v18;
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
      _os_log_impl(&dword_25F79F000, v8, v9, "%s: Request failed %@", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v35, -1, -1);
      MEMORY[0x261201C80](v13, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
    }

    Swift::String v29 = *(void *)(v0 + 1784);
    type metadata accessor for InferenceError();
    lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    TokenGenerationError.toInferenceError()(v30);
    swift_willThrow();
    outlined destroy of OneShotRequest(v29, type metadata accessor for TokenGenerationError);
  }
  else
  {

    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 1752);
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.inference);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.error.getter();
    uint64_t v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(uint64_t **)(v0 + 1752);
    if (v23)
    {
      unint64_t v25 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v37[0] = v36;
      *(_DWORD *)unint64_t v25 = 136315394;
      log = v21;
      uint64_t v27 = *v24;
      uint64_t v26 = v24[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v24);
      outlined release of InferenceRequestHandler((uint64_t)v24);
      *(_WORD *)(v25 + 12) = 2112;
      MEMORY[0x261201A80](v1);
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1680) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v28;

      uint64_t v21 = log;
      _os_log_impl(&dword_25F79F000, log, v22, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v25, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v36, -1, -1);
      MEMORY[0x261201C80](v25, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined release of InferenceRequestHandler((uint64_t)v24);
    }
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  NSObject *log;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = v0;
  outlined destroy of OneShotRequest(*(void *)(v0 + 1816), type metadata accessor for CompletePromptRequest);
  uint64_t v1 = *(void **)(v0 + 1920);
  *(void *)(v0 + 1696) = v1;
  MEMORY[0x261201A80](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v2 = *(void *)(v0 + 1792);
    uint64_t v3 = *(void *)(v0 + 1784);

    outlined init with take of OneShotRequest(v2, v3, type metadata accessor for TokenGenerationError);
    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 1784);
    uint64_t v5 = *(void *)(v0 + 1776);
    uint64_t v6 = *(void *)(v0 + 1752);
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.inference);
    outlined init with copy of OneShotRequest(v4, v5, type metadata accessor for TokenGenerationError);
    outlined retain of InferenceRequestHandler(v6);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 1776);
    if (v10)
    {
      uint64_t v12 = *(uint64_t **)(v0 + 1752);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v37[0] = v35;
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v16 = *v12;
      uint64_t v15 = v12[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v12);
      *(_WORD *)(v13 + 12) = 2112;
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
      swift_allocError();
      outlined init with copy of OneShotRequest(v11, v17, type metadata accessor for TokenGenerationError);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1648) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v18;
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
      _os_log_impl(&dword_25F79F000, v8, v9, "%s: Request failed %@", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v35, -1, -1);
      MEMORY[0x261201C80](v13, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
    }

    Swift::String v29 = *(void *)(v0 + 1784);
    type metadata accessor for InferenceError();
    lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    TokenGenerationError.toInferenceError()(v30);
    swift_willThrow();
    outlined destroy of OneShotRequest(v29, type metadata accessor for TokenGenerationError);
  }
  else
  {

    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 1752);
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.inference);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.error.getter();
    uint64_t v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(uint64_t **)(v0 + 1752);
    if (v23)
    {
      unint64_t v25 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v37[0] = v36;
      *(_DWORD *)unint64_t v25 = 136315394;
      log = v21;
      uint64_t v27 = *v24;
      uint64_t v26 = v24[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v24);
      outlined release of InferenceRequestHandler((uint64_t)v24);
      *(_WORD *)(v25 + 12) = 2112;
      MEMORY[0x261201A80](v1);
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1680) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v28;

      uint64_t v21 = log;
      _os_log_impl(&dword_25F79F000, log, v22, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v25, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v36, -1, -1);
      MEMORY[0x261201C80](v25, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined release of InferenceRequestHandler((uint64_t)v24);
    }
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  NSObject *log;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = v0;
  outlined destroy of OneShotRequest(*(void *)(v0 + 1808), type metadata accessor for CompletePromptTemplateRequest);
  uint64_t v1 = *(void **)(v0 + 1936);
  *(void *)(v0 + 1696) = v1;
  MEMORY[0x261201A80](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v2 = *(void *)(v0 + 1792);
    uint64_t v3 = *(void *)(v0 + 1784);

    outlined init with take of OneShotRequest(v2, v3, type metadata accessor for TokenGenerationError);
    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 1784);
    uint64_t v5 = *(void *)(v0 + 1776);
    uint64_t v6 = *(void *)(v0 + 1752);
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.inference);
    outlined init with copy of OneShotRequest(v4, v5, type metadata accessor for TokenGenerationError);
    outlined retain of InferenceRequestHandler(v6);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 1776);
    if (v10)
    {
      uint64_t v12 = *(uint64_t **)(v0 + 1752);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v37[0] = v35;
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v16 = *v12;
      uint64_t v15 = v12[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v12);
      *(_WORD *)(v13 + 12) = 2112;
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
      swift_allocError();
      outlined init with copy of OneShotRequest(v11, v17, type metadata accessor for TokenGenerationError);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1648) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v18;
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
      _os_log_impl(&dword_25F79F000, v8, v9, "%s: Request failed %@", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v35, -1, -1);
      MEMORY[0x261201C80](v13, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
    }

    Swift::String v29 = *(void *)(v0 + 1784);
    type metadata accessor for InferenceError();
    lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    TokenGenerationError.toInferenceError()(v30);
    swift_willThrow();
    outlined destroy of OneShotRequest(v29, type metadata accessor for TokenGenerationError);
  }
  else
  {

    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 1752);
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.inference);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.error.getter();
    uint64_t v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(uint64_t **)(v0 + 1752);
    if (v23)
    {
      unint64_t v25 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v37[0] = v36;
      *(_DWORD *)unint64_t v25 = 136315394;
      log = v21;
      uint64_t v27 = *v24;
      uint64_t v26 = v24[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v24);
      outlined release of InferenceRequestHandler((uint64_t)v24);
      *(_WORD *)(v25 + 12) = 2112;
      MEMORY[0x261201A80](v1);
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1680) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v28;

      uint64_t v21 = log;
      _os_log_impl(&dword_25F79F000, log, v22, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v25, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v36, -1, -1);
      MEMORY[0x261201C80](v25, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined release of InferenceRequestHandler((uint64_t)v24);
    }
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  NSObject *log;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = v0;
  outlined destroy of OneShotRequest(*(void *)(v0 + 1800), type metadata accessor for CountTokensPromptTemplateRequest);
  uint64_t v1 = *(void **)(v0 + 1952);
  *(void *)(v0 + 1696) = v1;
  MEMORY[0x261201A80](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v2 = *(void *)(v0 + 1792);
    uint64_t v3 = *(void *)(v0 + 1784);

    outlined init with take of OneShotRequest(v2, v3, type metadata accessor for TokenGenerationError);
    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 1784);
    uint64_t v5 = *(void *)(v0 + 1776);
    uint64_t v6 = *(void *)(v0 + 1752);
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.inference);
    outlined init with copy of OneShotRequest(v4, v5, type metadata accessor for TokenGenerationError);
    outlined retain of InferenceRequestHandler(v6);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 1776);
    if (v10)
    {
      uint64_t v12 = *(uint64_t **)(v0 + 1752);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v37[0] = v35;
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v16 = *v12;
      uint64_t v15 = v12[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v12);
      *(_WORD *)(v13 + 12) = 2112;
      lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
      swift_allocError();
      outlined init with copy of OneShotRequest(v11, v17, type metadata accessor for TokenGenerationError);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1648) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v18;
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
      _os_log_impl(&dword_25F79F000, v8, v9, "%s: Request failed %@", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v35, -1, -1);
      MEMORY[0x261201C80](v13, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined destroy of OneShotRequest(v11, type metadata accessor for TokenGenerationError);
    }

    Swift::String v29 = *(void *)(v0 + 1784);
    type metadata accessor for InferenceError();
    lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    TokenGenerationError.toInferenceError()(v30);
    swift_willThrow();
    outlined destroy of OneShotRequest(v29, type metadata accessor for TokenGenerationError);
  }
  else
  {

    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 1752);
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.inference);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    outlined retain of InferenceRequestHandler(v19);
    MEMORY[0x261201A80](v1);
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.error.getter();
    uint64_t v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(uint64_t **)(v0 + 1752);
    if (v23)
    {
      unint64_t v25 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v37[0] = v36;
      *(_DWORD *)unint64_t v25 = 136315394;
      log = v21;
      uint64_t v27 = *v24;
      uint64_t v26 = v24[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v24);
      outlined release of InferenceRequestHandler((uint64_t)v24);
      *(_WORD *)(v25 + 12) = 2112;
      MEMORY[0x261201A80](v1);
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1680) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v28;

      uint64_t v21 = log;
      _os_log_impl(&dword_25F79F000, log, v22, "%s: Received unexpected non-TokenGenerationError: %@", (uint8_t *)v25, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v36, -1, -1);
      MEMORY[0x261201C80](v25, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler(*(void *)(v0 + 1752));
      outlined release of InferenceRequestHandler((uint64_t)v24);
    }
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t InferenceRequestHandler.handleStreamingRequest(data:configuration:)@<X0>(uint64_t (*a1)(uint64_t a1)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v106 = a2;
  v105 = a1;
  v107 = a4;
  uint64_t v6 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v91 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v99 = v10;
  uint64_t v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v90 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v94 = v16;
  size_t v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for StreamingRequest(0);
  uint64_t v92 = *(void *)(v108 - 8);
  uint64_t v18 = *(void *)(v92 + 64);
  uint64_t v19 = MEMORY[0x270FA5388](v108);
  uint64_t v97 = (uint64_t)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v93 = (uint64_t)&v89 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v104 = (char *)&v89 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v103 = (uint64_t)&v89 - v24;
  long long v25 = v4[5];
  long long v117 = v4[4];
  long long v118 = v25;
  long long v26 = v4[7];
  long long v119 = v4[6];
  long long v120 = v26;
  long long v27 = v4[1];
  v116[0] = *v4;
  v116[1] = v27;
  long long v28 = v4[3];
  v116[2] = v4[2];
  v116[3] = v28;
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Log.inference);
  outlined retain of InferenceRequestHandler((uint64_t)v116);
  uint64_t v95 = v30;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v102 = v8;
  uint64_t v101 = v9;
  v100 = v11;
  uint64_t v98 = v15;
  v96 = v17;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v110 = v35;
    *(_DWORD *)uint64_t v34 = 136315394;
    uint64_t v36 = v14;
    unint64_t v38 = *((void *)&v116[0] + 1);
    uint64_t v37 = *(void *)&v116[0];
    swift_bridgeObjectRetain();
    uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v14 = v36;
    swift_bridgeObjectRelease();
    outlined release of InferenceRequestHandler((uint64_t)v116);
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000025F92C3F0, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25F79F000, v31, v32, "%s:%s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v35, -1, -1);
    MEMORY[0x261201C80](v34, -1, -1);
  }
  else
  {
    outlined release of InferenceRequestHandler((uint64_t)v116);
  }

  uint64_t v39 = (uint64_t)v104;
  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest, (void (*)(uint64_t))type metadata accessor for StreamingRequest);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v40 = v103;
  outlined init with take of OneShotRequest(v39, v103, type metadata accessor for StreamingRequest);
  uint64_t v41 = a3;
  v104 = (char *)*((void *)&v116[0] + 1);
  uint64_t v42 = *(void *)&v116[0];
  v105 = type metadata accessor for StreamingRequest;
  uint64_t v43 = v93;
  outlined init with copy of OneShotRequest(v40, v93, type metadata accessor for StreamingRequest);
  uint64_t v44 = v98;
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
  Swift::String v46 = v96;
  uint64_t v106 = v41;
  uint64_t v47 = v41;
  uint64_t v48 = v14;
  v45(v96, v47, v14);
  unint64_t v49 = (*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  unint64_t v50 = (v18 + *(unsigned __int8 *)(v44 + 80) + v49) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v51 = swift_allocObject();
  uint64_t v94 = v42;
  *(void *)(v51 + 16) = v42;
  uint64_t v52 = v104;
  *(void *)(v51 + 24) = v104;
  outlined init with take of OneShotRequest(v43, v51 + v49, type metadata accessor for StreamingRequest);
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v51 + v50, v46, v48);
  uint64_t v53 = v97;
  outlined init with copy of OneShotRequest(v40, v97, v105);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v55 = v90;
    outlined init with take of OneShotRequest(v53, v90, type metadata accessor for CompletePromptRequest);
    outlined retain of InferenceRequestHandler((uint64_t)v116);
    outlined retain of InferenceRequestHandler((uint64_t)v116);
    swift_bridgeObjectRetain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (unint64_t)v52;
      uint64_t v59 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      uint64_t v110 = v60;
      *(_DWORD *)uint64_t v59 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v58, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v116);
      outlined release of InferenceRequestHandler((uint64_t)v116);
      *(_WORD *)(v59 + 12) = 2080;
      uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000025F92C3F0, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25F79F000, v56, v57, "%s:%s:completePrompt", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v60, -1, -1);
      MEMORY[0x261201C80](v59, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler((uint64_t)v116);
      outlined release of InferenceRequestHandler((uint64_t)v116);
    }

    uint64_t v66 = v102;
    uint64_t v67 = v101;
    v68 = v100;
    v69 = (uint64_t (*)(uint64_t, uint64_t))v117;
    swift_retain();
    uint64_t v110 = v69(v55, v106);
    uint64_t v111 = v70;
    v112 = partial apply for closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:);
    uint64_t v113 = v51;
    v114 = closure #1 in InstrumentedStream.init<>(using:on:);
    uint64_t v115 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
    lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>> and conformance InstrumentedStream<A>, &demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
    AsyncMapSequence.init(_:transform:)();
    unint64_t v71 = (*(unsigned __int8 *)(v67 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    uint64_t v72 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v67 + 32))(v72 + v71, v68, v66);
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<Data>);
    v74 = v107;
    v107[3] = v73;
    v74[4] = lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<Data> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<Data>);
    swift_release();
    void *v74 = closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
    v74[1] = v72;
    v75 = type metadata accessor for CompletePromptRequest;
LABEL_18:
    outlined destroy of OneShotRequest(v55, v75);
    return outlined destroy of OneShotRequest(v103, type metadata accessor for StreamingRequest);
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v55 = v91;
    outlined init with take of OneShotRequest(v53, v91, type metadata accessor for CompletePromptTemplateRequest);
    outlined retain of InferenceRequestHandler((uint64_t)v116);
    outlined retain of InferenceRequestHandler((uint64_t)v116);
    unint64_t v61 = (unint64_t)v52;
    swift_bridgeObjectRetain();
    v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v110 = v65;
      *(_DWORD *)uint64_t v64 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v61, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v116);
      outlined release of InferenceRequestHandler((uint64_t)v116);
      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000025F92C3F0, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25F79F000, v62, v63, "%s:%s:completePromptTemplate", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v65, -1, -1);
      MEMORY[0x261201C80](v64, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler((uint64_t)v116);
      outlined release of InferenceRequestHandler((uint64_t)v116);
    }

    uint64_t v76 = v102;
    uint64_t v77 = v101;
    v78 = v100;
    v79 = (uint64_t (*)(uint64_t, uint64_t))v118;
    swift_retain();
    uint64_t v110 = v79(v55, v106);
    uint64_t v111 = v80;
    v112 = partial apply for closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:);
    uint64_t v113 = v51;
    v114 = closure #1 in InstrumentedStream.init<>(using:on:);
    uint64_t v115 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
    lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>> and conformance InstrumentedStream<A>, &demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
    AsyncMapSequence.init(_:transform:)();
    unint64_t v81 = (*(unsigned __int8 *)(v77 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    uint64_t v82 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v77 + 32))(v82 + v81, v78, v76);
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<Data>);
    v84 = (uint64_t (**)@<X0>(uint64_t *@<X8>))v107;
    v107[3] = v83;
    v84[4] = (uint64_t (*)@<X0>(uint64_t *@<X8>))lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<Data> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<Data>);
    swift_release();
    *v84 = partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
    v84[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v82;
    v75 = type metadata accessor for CompletePromptTemplateRequest;
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v86, v87))
  {
    v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v88 = 0;
    _os_log_impl(&dword_25F79F000, v86, v87, "Incorrect streaming request handler used when registering document. Please use the one which supports the clientData type.", v88, 2u);
    MEMORY[0x261201C80](v88, -1, -1);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1)
{
  v1[7] = a1;
  uint64_t v2 = type metadata accessor for InferenceError();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for InferenceError.Context();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:), 0, 0);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error);
  return v5();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0) {
    **(unsigned char **)(v2 + 16) = 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t closure #3 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #3 in InferenceRequestHandler.handleStreamingRequest(data:configuration:), 0, 0);
}

uint64_t closure #3 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  type metadata accessor for CompletePromptResponseElement(0);
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, (void (*)(uint64_t))type metadata accessor for CompletePromptResponseElement);
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v2 = *(uint64_t **)(v0 + 16);
  *uint64_t v2 = v1;
  v2[1] = v3;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #4 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #4 in InferenceRequestHandler.handleStreamingRequest(data:configuration:), 0, 0);
}

uint64_t closure #4 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  type metadata accessor for CompletePromptResponseElement(0);
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, (void (*)(uint64_t))type metadata accessor for CompletePromptResponseElement);
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v2 = *(uint64_t **)(v0 + 16);
  *uint64_t v2 = v1;
  v2[1] = v3;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v138 = a2;
  v139 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>, ClientData>);
  uint64_t v123 = *(void *)(v5 - 8);
  uint64_t v124 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v121 = v6;
  v122 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCCodableObject?);
  MEMORY[0x270FA5388](v7 - 8);
  v125 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for XPCCodableObject();
  uint64_t v127 = *(void *)(v9 - 8);
  uint64_t v128 = v9;
  MEMORY[0x270FA5388](v9);
  v126 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v11 - 8);
  long long v120 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData>);
  uint64_t v131 = *(void *)(v13 - 8);
  uint64_t v132 = v13;
  MEMORY[0x270FA5388](v13);
  v129 = v14;
  v130 = (char *)&v114 - (((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v118 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = (void *)type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v17 = *(v137 - 1);
  MEMORY[0x270FA5388](v137);
  v134 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = v18;
  uint64_t v19 = type metadata accessor for StreamingRequest(0);
  uint64_t v133 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v133 + 64);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v136 = (void **)((char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v114 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  long long v27 = (char *)&v114 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v140 = (uint64_t)&v114 - v28;
  long long v29 = v3[5];
  long long v144 = v3[4];
  long long v145 = v29;
  long long v30 = v3[7];
  long long v146 = v3[6];
  long long v147 = v30;
  long long v31 = v3[1];
  v143[0] = *v3;
  v143[1] = v31;
  long long v32 = v3[3];
  v143[2] = v3[2];
  v143[3] = v32;
  uint64_t v119 = a1;
  uint64_t v33 = ClientData.data.getter();
  if (v34 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v35 = v33;
    unint64_t v36 = v34;
    if (one-time initialization token for decoder != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest, (void (*)(uint64_t))type metadata accessor for StreamingRequest);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v35, v36);
    uint64_t v114 = 0;
    v116 = type metadata accessor for StreamingRequest;
    uint64_t v37 = v140;
    outlined init with take of OneShotRequest((uint64_t)v27, v140, type metadata accessor for StreamingRequest);
    unint64_t v115 = *((void *)&v143[0] + 1);
    uint64_t v38 = *(void *)&v143[0];
    long long v117 = type metadata accessor for StreamingRequest;
    uint64_t v39 = (uint64_t)v24;
    outlined init with copy of OneShotRequest(v37, (uint64_t)v24, type metadata accessor for StreamingRequest);
    uint64_t v40 = v134;
    uint64_t v41 = v137;
    (*(void (**)(char *, uint64_t, void *))(v17 + 16))(v134, v138, v137);
    unint64_t v42 = (*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
    unint64_t v43 = (v20 + *(unsigned __int8 *)(v17 + 80) + v42) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    unint64_t v44 = v115;
    uint64_t v45 = swift_allocObject();
    uint64_t v135 = v38;
    *(void *)(v45 + 16) = v38;
    *(void *)(v45 + 24) = v44;
    uint64_t v46 = v45 + v42;
    uint64_t v47 = v45;
    outlined init with take of OneShotRequest(v39, v46, v116);
    (*(void (**)(unint64_t, char *, void *))(v17 + 32))(v47 + v43, v40, v41);
    uint64_t v48 = v136;
    outlined init with copy of OneShotRequest(v140, (uint64_t)v136, v117);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      uint64_t v50 = v118;
      outlined init with take of OneShotRequest((uint64_t)v48, v118, type metadata accessor for CompletePromptRequest);
      uint64_t v57 = one-time initialization token for inference;
      swift_bridgeObjectRetain();
      if (v57 != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Log.inference);
      outlined retain of InferenceRequestHandler((uint64_t)v143);
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = swift_slowAlloc();
        v62 = (void *)swift_slowAlloc();
        v142._documents._rawValue = v62;
        *(_DWORD *)uint64_t v61 = 136315394;
        swift_bridgeObjectRetain();
        v141.invocationIdentifier._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v44, (uint64_t *)&v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v143);
        *(_WORD *)(v61 + 12) = 2080;
        v141.invocationIdentifier._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x800000025F92C460, (uint64_t *)&v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25F79F000, v59, v60, "%s:%s:completePrompt", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v62, -1, -1);
        MEMORY[0x261201C80](v61, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler((uint64_t)v143);
      }

      v86 = (uint64_t (*)(uint64_t, uint64_t))v144;
      swift_retain();
      v142._documents._rawValue = (void *)v86(v50, v138);
      v142._metadata.invocationIdentifier._countAndFlagsBits = v87;
      v142._metadata.invocationIdentifier._object = partial apply for closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:);
      v142._metadata.functionIdentifier._countAndFlagsBits = v47;
      v142._metadata.functionIdentifier._object = closure #1 in InstrumentedStream.init<>(using:on:);
      v142._metadata.clientRequestIdentifier.value._countAndFlagsBits = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
      type metadata accessor for ClientData();
      lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>> and conformance InstrumentedStream<A>, &demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
      v88 = v130;
      AsyncMapSequence.init(_:transform:)();
      uint64_t v89 = v131;
      unint64_t v90 = (*(unsigned __int8 *)(v131 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
      uint64_t v91 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v89 + 32))(v91 + v90, v88, v132);
      uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<ClientData>);
      uint64_t v93 = v139;
      v139[3] = v92;
      v93[4] = lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<ClientData> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<ClientData>);
      swift_release();
      *uint64_t v93 = closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
      v93[1] = v91;
      v85 = type metadata accessor for CompletePromptRequest;
      goto LABEL_22;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v50 = (uint64_t)v120;
      outlined init with take of OneShotRequest((uint64_t)v48, (uint64_t)v120, type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v51 = one-time initialization token for inference;
      swift_bridgeObjectRetain();
      if (v51 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Log.inference);
      outlined retain of InferenceRequestHandler((uint64_t)v143);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = (void *)swift_slowAlloc();
        v142._documents._rawValue = v56;
        *(_DWORD *)uint64_t v55 = 136315394;
        swift_bridgeObjectRetain();
        v141.invocationIdentifier._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v44, (uint64_t *)&v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of InferenceRequestHandler((uint64_t)v143);
        *(_WORD *)(v55 + 12) = 2080;
        v141.invocationIdentifier._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x800000025F92C460, (uint64_t *)&v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25F79F000, v53, v54, "%s:%s:completePromptTemplate", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v56, -1, -1);
        MEMORY[0x261201C80](v55, -1, -1);
      }
      else
      {
        outlined release of InferenceRequestHandler((uint64_t)v143);
      }

      uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t))v145;
      swift_retain();
      v142._documents._rawValue = (void *)v77(v50, v138);
      v142._metadata.invocationIdentifier._countAndFlagsBits = v78;
      v142._metadata.invocationIdentifier._object = partial apply for closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:);
      v142._metadata.functionIdentifier._countAndFlagsBits = v47;
      v142._metadata.functionIdentifier._object = closure #1 in InstrumentedStream.init<>(using:on:);
      v142._metadata.clientRequestIdentifier.value._countAndFlagsBits = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
      type metadata accessor for ClientData();
      lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>> and conformance InstrumentedStream<A>, &demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>);
      v79 = v130;
      AsyncMapSequence.init(_:transform:)();
      uint64_t v80 = v131;
      unint64_t v81 = (*(unsigned __int8 *)(v131 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
      uint64_t v82 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v80 + 32))(v82 + v81, v79, v132);
      uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<ClientData>);
      v84 = (uint64_t (**)@<X0>(uint64_t *@<X8>))v139;
      v139[3] = v83;
      v84[4] = (uint64_t (*)@<X0>(uint64_t *@<X8>))lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<ClientData> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<ClientData>);
      swift_release();
      *v84 = partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
      v84[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v82;
      v85 = type metadata accessor for CompletePromptTemplateRequest;
LABEL_22:
      outlined destroy of OneShotRequest(v50, v85);
      return outlined destroy of OneShotRequest(v140, type metadata accessor for StreamingRequest);
    }
    uint64_t v132 = v47;
    os_log_type_t v63 = *v48;
    uint64_t v64 = (uint64_t)v48[1];
    uint64_t v65 = (char *)v48[2];
    v134 = (char *)v48[3];
    uint64_t v66 = v48[4];
    uint64_t v131 = (uint64_t)v48[5];
    uint64_t v67 = (char *)v48[6];
    v129 = v63;
    v130 = v67;
    v136 = (void **)v48[7];
    v137 = v66;
    uint64_t v68 = one-time initialization token for inference;
    swift_bridgeObjectRetain();
    if (v68 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)static Log.inference);
    outlined retain of InferenceRequestHandler((uint64_t)v143);
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    BOOL v72 = os_log_type_enabled(v70, v71);
    uint64_t v73 = v127;
    uint64_t v133 = v64;
    if (v72)
    {
      uint64_t v74 = swift_slowAlloc();
      v75 = (void *)swift_slowAlloc();
      v142._documents._rawValue = v75;
      *(_DWORD *)uint64_t v74 = 136315394;
      long long v120 = v65;
      swift_bridgeObjectRetain();
      v141.invocationIdentifier._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v44, (uint64_t *)&v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of InferenceRequestHandler((uint64_t)v143);
      *(_WORD *)(v74 + 12) = 2080;
      v141.invocationIdentifier._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x800000025F92C460, (uint64_t *)&v142);
      uint64_t v65 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25F79F000, v70, v71, "%s:%s:registerDocument", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy();
      uint64_t v76 = v75;
      uint64_t v64 = v133;
      MEMORY[0x261201C80](v76, -1, -1);
      MEMORY[0x261201C80](v74, -1, -1);
    }
    else
    {
      outlined release of InferenceRequestHandler((uint64_t)v143);
    }

    uint64_t v24 = v125;
    ClientData.xpcData.getter();
    uint64_t v94 = v128;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v24, 1, v128) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v126, v24, v94);
      uint64_t v95 = (void *)XPCCodableObject.copyUnderlyingXPCObject()();
      v96 = v130;
      v142._documents._rawValue = v129;
      v142._metadata.invocationIdentifier._countAndFlagsBits = v64;
      uint64_t v97 = v65;
      v142._metadata.invocationIdentifier._object = v65;
      v142._metadata.functionIdentifier._countAndFlagsBits = (uint64_t)v134;
      uint64_t v98 = v136;
      uint64_t v99 = v131;
      v142._metadata.functionIdentifier._object = v137;
      v142._metadata.clientRequestIdentifier.value._countAndFlagsBits = v131;
      v142._metadata.clientRequestIdentifier.value._object = v130;
      v142._metadata.userInfo._rawValue = v136;
      uint64_t v100 = RegisterDocumentRequest.documents.getter();
      swift_unknownObjectRetain();
      uint64_t v135 = (uint64_t)v95;
      uint64_t v101 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay26GenerativeModelsFoundation16DocumentResourceVG_AHs5NeverOTg50165_s15TokenGeneration23InferenceRequestHandlerV015handleStreamingD010clientData13configurationSci_p20ModelManagerServices06ClientI0V_AG0c8ProviderD13ConfigurationVtF26de12Foundation16gH9VANXEfU3_So13OS_xpc_object_pTf1cn_nTf4ng_n(v100, v95);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v141.invocationIdentifier._countAndFlagsBits = v133;
      v141.invocationIdentifier._object = v97;
      v141.functionIdentifier._countAndFlagsBits = (uint64_t)v134;
      v141.functionIdentifier._object = v137;
      v141.clientRequestIdentifier.value._countAndFlagsBits = v99;
      v141.clientRequestIdentifier.value._object = v96;
      v141.userInfo._rawValue = v98;
      RegisterDocumentRequest.init(documents:metadata:)(&v142, (Swift::OpaquePointer)v101, &v141);
      uint64_t v102 = (uint64_t (*)(TokenGeneration::RegisterDocumentRequest *, uint64_t))v146;
      uint64_t v103 = v132;
      swift_retain();
      v104 = (void *)v102(&v142, v138);
      uint64_t v106 = v105;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v142._documents._rawValue = v104;
      v142._metadata.invocationIdentifier._countAndFlagsBits = v106;
      v142._metadata.invocationIdentifier._object = partial apply for closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:);
      v142._metadata.functionIdentifier._countAndFlagsBits = v103;
      v142._metadata.functionIdentifier._object = 0;
      v142._metadata.clientRequestIdentifier.value._countAndFlagsBits = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>);
      type metadata accessor for ClientData();
      lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>> and conformance InstrumentedStream<A>, &demangling cache variable for type metadata for InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>);
      v107 = v122;
      AsyncMapSequence.init(_:transform:)();
      uint64_t v108 = v123;
      unint64_t v109 = (*(unsigned __int8 *)(v123 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
      uint64_t v110 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v108 + 32))(v110 + v109, v107, v124);
      uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<ClientData>);
      v112 = (uint64_t (**)@<X0>(uint64_t *@<X8>))v139;
      v139[3] = v111;
      v112[4] = (uint64_t (*)@<X0>(uint64_t *@<X8>))lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<ClientData> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<ClientData>);
      swift_release();
      swift_unknownObjectRelease();
      *v112 = partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
      v112[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v110;
      (*(void (**)(char *, uint64_t))(v127 + 8))(v126, v128);
      return outlined destroy of OneShotRequest(v140, type metadata accessor for StreamingRequest);
    }
  }
  outlined destroy of XPCCodableObject?((uint64_t)v24);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)(uint64_t a1)
{
  v1[7] = a1;
  uint64_t v2 = type metadata accessor for InferenceError();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for InferenceError.Context();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:), 0, 0);
}

uint64_t closure #1 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)()
{
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.inference);
  MEMORY[0x261201A80](v1);
  MEMORY[0x261201A80](v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)v0[7];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    MEMORY[0x261201A80](v6);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v8;

    _os_log_impl(&dword_25F79F000, v3, v4, "Failed to decode request data! %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v18, -1, -1);
    MEMORY[0x261201C80](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v10 = v0[12];
  uint64_t v9 = v0[13];
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[11];
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[9];
  swift_getErrorValue();
  Error.localizedDescription.getter();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v9, v12);
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v11, *MEMORY[0x263F562B0], v13);
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v11, v13);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InferenceRequest(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of OneShotRequest(a3, (uint64_t)v14, type metadata accessor for StreamingRequest);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a4, v8);
  type metadata accessor for InferenceRequestInstrumentation(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  return InferenceRequestInstrumentation.init(inferenceRequestHandlerIdentifier:inferenceRequest:configuration:)(a1, a2, (uint64_t)v14, v11);
}

uint64_t closure #3 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #3 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:), 0, 0);
}

uint64_t closure #3 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  type metadata accessor for CompletePromptResponseElement(0);
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, (void (*)(uint64_t))type metadata accessor for CompletePromptResponseElement);
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  MEMORY[0x2611FF900](v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #4 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](closure #4 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:), 0, 0);
}

uint64_t closure #4 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  type metadata accessor for CompletePromptResponseElement(0);
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, (void (*)(uint64_t))type metadata accessor for CompletePromptResponseElement);
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  MEMORY[0x2611FF900](v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #6 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCCodableObject?);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  type metadata accessor for DocumentRegistration.InternalStatus();
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for DocumentRegistrationEnvelope(0);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DocumentRegistration();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for RegisterDocumentResponseElement(0);
  v2[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #6 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:), 0, 0);
}

uint64_t closure #6 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v18 = v0[11];
  uint64_t v19 = v0[17];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[6];
  uint64_t v15 = v0[7];
  uint64_t v16 = v0[9];
  uint64_t v17 = v0[5];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v2, v0[3], v4);
  v8(v1, v2, v4);
  DocumentRegistration.internalStatus.getter();
  DocumentRegistrationStatusEnvelope.init(sealing:)(v6, v5);
  DocumentRegistration.url.getter();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(v1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5 + *(int *)(v16 + 20), v15, v17);
  outlined init with take of OneShotRequest(v5, v18, type metadata accessor for DocumentRegistrationEnvelope);
  v9(v2, v4);
  outlined init with take of OneShotRequest(v18, v19, type metadata accessor for DocumentRegistrationEnvelope);
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type RegisterDocumentResponseElement and conformance RegisterDocumentResponseElement, (void (*)(uint64_t))type metadata accessor for RegisterDocumentResponseElement);
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[4];
  uint64_t v12 = type metadata accessor for XPCCodableObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  ClientData.init(data:xpcData:)();
  outlined destroy of OneShotRequest(v10, type metadata accessor for RegisterDocumentResponseElement);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a16;
  v21[3] = a17;
  v21[4] = a18;
  v21[5] = a19;
  v21[6] = a10;
  v21[7] = a11;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a16;
  v22[3] = a17;
  v22[4] = a18;
  v22[5] = a19;
  v22[6] = a12;
  v22[7] = a13;
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = a16;
  v23[3] = a17;
  v23[4] = a18;
  v23[5] = a19;
  v23[6] = a14;
  v23[7] = a15;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[9] = v21;
  a9[10] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[11] = v22;
  a9[12] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[13] = v23;
  a9[14] = &async function pointer to partial apply for closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:);
  a9[15] = v24;
  return swift_bridgeObjectRetain();
}

uint64_t closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for InferenceError.Context();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:), 0, 0);
}

uint64_t InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a12;
  v20[3] = a13;
  v20[4] = a14;
  v20[5] = a15;
  v20[6] = a7;
  v20[7] = a8;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a12;
  v21[3] = a13;
  v21[4] = a14;
  v21[5] = a15;
  v21[6] = a10;
  v21[7] = a11;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = &async function pointer to partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  a9[7] = v22;
  a9[8] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[9] = v20;
  a9[10] = partial apply for closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  a9[11] = v23;
  a9[12] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[13] = v21;
  a9[14] = &async function pointer to partial apply for closure #5 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  a9[15] = v24;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a12;
  v20[3] = a13;
  v20[4] = a14;
  v20[5] = a15;
  v20[6] = a7;
  v20[7] = a8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a12;
  v22[3] = a13;
  v22[4] = a14;
  v22[5] = a15;
  v22[6] = a10;
  v22[7] = a11;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = &async function pointer to partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  a9[7] = v19;
  a9[8] = partial apply for closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  a9[9] = v20;
  a9[10] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  a9[11] = v21;
  a9[12] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:);
  a9[13] = v22;
  a9[14] = &async function pointer to partial apply for closure #5 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  a9[15] = v23;
  return swift_bridgeObjectRetain_n();
}

uint64_t (*closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12(v9);
  uint64_t v13 = type metadata accessor for CompletePromptResponseElement(0);
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v11, v13, a5, a7);
}

uint64_t (*closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  type metadata accessor for CompletePromptResponseElement(0);
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

uint64_t closure #1 in closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = type metadata accessor for InferenceError.Context();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:), 0, 0);
}

uint64_t InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a10;
  v18[3] = a11;
  v18[4] = a7;
  v18[5] = a8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = &async function pointer to partial apply for closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[7] = v17;
  a9[8] = partial apply for closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[9] = v18;
  a9[10] = partial apply for closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[11] = v19;
  a9[12] = partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[13] = v20;
  a9[14] = &async function pointer to partial apply for closure #5 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[15] = v21;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a10;
  v18[3] = a11;
  v18[4] = a7;
  v18[5] = a8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = &async function pointer to partial apply for closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[7] = v17;
  a9[8] = partial apply for closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[9] = v18;
  a9[10] = partial apply for closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[11] = v19;
  a9[12] = partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[13] = v20;
  a9[14] = &async function pointer to partial apply for closure #5 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  a9[15] = v21;
  return swift_bridgeObjectRetain_n();
}

uint64_t closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for InferenceError();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for InferenceError.Context();
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:), 0, 0);
}

uint64_t (*closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v8 = type metadata accessor for CompletePromptResponseElement(255);
  uint64_t v9 = type metadata accessor for AsyncMapSequence();
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v21 - v17;
  v22(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, a5);
  AsyncSequence.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, a5);
  uint64_t WitnessTable = swift_getWitnessTable();
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v12, v8, v9, WitnessTable);
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for Token();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:), 0, 0);
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[2];
  (*(void (**)(uint64_t, void, void))(v0[5] + 16))(v1, v0[3], v0[4]);
  CompletePromptResponseElement.init(token:)(v1, v2);
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t (*closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  type metadata accessor for CompletePromptResponseElement(0);
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  type metadata accessor for CompletePromptResponseElement(0);
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

uint64_t closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = type metadata accessor for InferenceError();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for InferenceError.Context();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:), 0, 0);
}

uint64_t (*closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  type metadata accessor for DocumentRegistration();
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

uint64_t closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = type metadata accessor for InferenceError.Context();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:), 0, 0);
}

{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = type metadata accessor for InferenceError.Context();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:), 0, 0);
}

uint64_t closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  _StringGuts.grow(_:)(61);
  v6._countAndFlagsBits = v5;
  v6._object = v3;
  String.append(_:)(v6);
  v7._object = (void *)0x800000025F92C4E0;
  v7._countAndFlagsBits = 0xD00000000000003BLL;
  String.append(_:)(v7);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  uint64_t v8 = type metadata accessor for InferenceError();
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v9, v1, v4);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x263F56270], v8);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t (*closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  uint64_t v12 = type metadata accessor for CompletePromptResponseElement(0);
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v10, v12, a5, a6);
}

uint64_t (*closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  type metadata accessor for DocumentRegistration();
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
}

uint64_t (*closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t)))@<X0>(uint64_t *a1@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = type metadata accessor for CompletePromptResponseElement(255);
  uint64_t v7 = type metadata accessor for AsyncMapSequence();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v12 - v8;
  a3(a1, a2);
  AsyncSequence.map<A>(_:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v9, v6, v7, WitnessTable);
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2)
{
  v2[17] = a1;
  v2[18] = a2;
  type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  v2[19] = swift_task_alloc();
  type metadata accessor for PromptCompletionStreamElementEnvelope(0);
  v2[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:), 0, 0);
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v20 = v0[20];
  uint64_t v19 = (void *)v0[19];
  uint64_t v21 = v0[17];
  UUID.init()();
  uint64_t v5 = UUID.uuidString.getter();
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v1, v3);
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  v7(v2, v3);
  uint64_t v11 = Token.text.getter();
  uint64_t v13 = v12;
  v0[5] = &type metadata for PromptCompletionEventCandidateTextDelta;
  v0[6] = &protocol witness table for PromptCompletionEventCandidateTextDelta;
  uint64_t v14 = swift_allocObject();
  v0[2] = v14;
  *(void *)(v14 + 16) = v18;
  *(void *)(v14 + 24) = v17;
  *(void *)(v14 + 32) = v8;
  *(void *)(v14 + 40) = v10;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v11;
  *(void *)(v14 + 64) = v13;
  *(_OWORD *)(v14 + 72) = xmmword_25F91CC60;
  outlined init with copy of PromptCompletionEvent((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  outlined init with copy of PromptCompletionEvent((uint64_t)(v0 + 7), (uint64_t)(v0 + 12));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(0, 0xF000000000000000);
  PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)((uint64_t)(v0 + 12), v19);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  outlined init with take of OneShotRequest((uint64_t)v19, v20, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  outlined init with take of OneShotRequest(v20, v21, type metadata accessor for PromptCompletionStreamElementEnvelope);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(0, 0xF000000000000000);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t (*closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  type metadata accessor for CompletePromptResponseElement(0);
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
}

uint64_t closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = type metadata accessor for InferenceError();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for InferenceError.Context();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:), 0, 0);
}

uint64_t closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v8 = v0[2];
  uint64_t v7 = (void *)v0[3];
  _StringGuts.grow(_:)(56);
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  v10._object = (void *)0x800000025F92C4A0;
  v10._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v10);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v4);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v3, *MEMORY[0x263F56270], v5);
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v11, v3, v5);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t (*closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = *(_OWORD *)(v10 + 16);
  uint64_t v14 = *(void *)(v10 + 32);
  uint64_t v15 = *(void *)(v10 + 56);
  v19[0] = *(_OWORD *)v10;
  v19[1] = v13;
  uint64_t v20 = v14;
  long long v21 = *(_OWORD *)(v10 + 40);
  uint64_t v22 = v15;
  v16(v19);
  uint64_t v17 = type metadata accessor for DocumentRegistration();
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v12, v17, a6, a8);
}

uint64_t closure #5 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for InferenceError.Context();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #5 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:), 0, 0);
}

uint64_t closure #5 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  _StringGuts.grow(_:)(56);
  v6._countAndFlagsBits = v5;
  v6._object = v3;
  String.append(_:)(v6);
  v7._object = (void *)0x800000025F92C4A0;
  v7._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v7);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  uint64_t v8 = type metadata accessor for InferenceError();
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v9, v1, v4);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x263F56270], v8);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X3>, unint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  a6[3] = __swift_instantiateConcreteTypeFromMangledName(a3);
  a6[4] = lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(a4, a3);
  __swift_allocate_boxed_opaque_existential_1Tm(a6);
  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(a5, a2);
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x270FA5388](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  a6[3] = __swift_instantiateConcreteTypeFromMangledName(a3);
  a6[4] = lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(a4, a3);
  __swift_allocate_boxed_opaque_existential_1Tm(a6);
  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(a5, a2);
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

uint64_t closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2[3] = swift_getAssociatedTypeWitness();
  a2[4] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1Tm(a2);
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

uint64_t InferenceRequestHandler.ResponseStream.makeAsyncIterator()@<X0>(void (*a1)(long long *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  a1(v4);
  return outlined init with take of AsyncIteratorProtocol(v4, a2);
}

uint64_t InferenceRequestHandler.ResponseStream.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v3[10] = type metadata accessor for TokenGenerationError(0);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](InferenceRequestHandler.ResponseStream.AsyncIterator.next(), 0, 0);
}

uint64_t InferenceRequestHandler.ResponseStream.AsyncIterator.next()()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = v0[9];
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  v0[13] = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  v0[14] = v4;
  v0[15] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  v0[16] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[17] = v6;
  void *v6 = v0;
  v6[1] = InferenceRequestHandler.ResponseStream.AsyncIterator.next();
  return MEMORY[0x270FA1E80](v5, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = InferenceRequestHandler.ResponseStream.AsyncIterator.next();
  }
  else {
    uint64_t v2 = InferenceRequestHandler.ResponseStream.AsyncIterator.next();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1Tm;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 120) + 8))(v1, *(void *)(v0 + 112));
    swift_task_dealloc();
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  else
  {
    *(void *)(v0 + 40) = v2;
    boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1Tm, v1, v2);
    swift_task_dealloc();
  }
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  Swift::String v7 = *(void *)(v6 + 16);
  uint64_t v8 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, v8 ^ 1u, 1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  swift_task_dealloc();
  uint64_t v1 = *(void **)(v0 + 144);
  *(void *)(v0 + 48) = v1;
  MEMORY[0x261201A80](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v3 = *(void *)(v0 + 96);

    outlined init with take of OneShotRequest(v3, v2, type metadata accessor for TokenGenerationError);
    uint64_t v4 = type metadata accessor for InferenceError();
    lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v6 = v5;
    TokenGenerationError.inferenceErrorContext.getter();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x263F56280], v4);
    swift_willThrow();
    outlined destroy of OneShotRequest(v2, type metadata accessor for TokenGenerationError);
  }
  else
  {

    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance InferenceRequestHandler.ResponseStream<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return InferenceRequestHandler.ResponseStream.AsyncIterator.next()(a1, a2);
}

uint64_t _s15TokenGeneration23InferenceRequestHandlerV14ResponseStream33_6CE5FDA809054AFDA0F170337ADF1236LLV13AsyncIteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v12;
  *uint64_t v12 = v6;
  v12[1] = _s15TokenGeneration23InferenceRequestHandlerV14ResponseStream33_6CE5FDA809054AFDA0F170337ADF1236LLV13AsyncIteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x270FA1E90](a1, a2, a3, a5, a6, v6 + 16);
}

uint64_t _s15TokenGeneration23InferenceRequestHandlerV14ResponseStream33_6CE5FDA809054AFDA0F170337ADF1236LLV13AsyncIteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0) {
    **(void **)(v2 + 24) = *(void *)(v2 + 16);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance InferenceRequestHandler.ResponseStream<A>@<X0>(uint64_t a1@<X8>)
{
  void (**v1)(long long *__return_ptr);
  uint64_t vars8;

  InferenceRequestHandler.ResponseStream.makeAsyncIterator()(*v1, a1);
  return swift_release();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined retain of InferenceRequestHandler(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of InferenceRequestHandler(uint64_t a1)
{
  return a1;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    size_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *size_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Prompt.Rendering?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    size_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *size_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    BOOL v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PromptCompletion.Aggregator.CandidateAggregator>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  long long v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    int64_t v9 = v5[1];
    char v10 = v5[2];
    size_t v11 = v5[3];
    uint64_t v12 = v5[4];
    uint64_t v13 = v5[5];
    uint64_t v23 = *((unsigned char *)v5 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason?(v11, v12);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v16 = v6;
    v16[1] = v7;
    uint64_t v17 = v3[7] + 56 * result;
    *(void *)uint64_t v17 = v8;
    *(void *)(v17 + 8) = v9;
    *(void *)(v17 + 16) = v10;
    *(void *)(v17 + 24) = v11;
    *(void *)(v17 + 32) = v12;
    *(void *)(v17 + 40) = v13;
    *(unsigned char *)(v17 + 48) = v23;
    uint64_t v18 = v3[2];
    uint64_t v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v3[2] = v20;
    v5 += 9;
    unint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  void v25[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, PromptTemplateInfo.RichVariableBinding));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, PromptTemplateInfo.RichVariableBinding>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  int64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  char v10 = v6 + 64;
  size_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Prompt.Rendering?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, PromptTemplateInfo.RichVariableBinding));
    BOOL v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if (v17) {
      break;
    }
    uint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    long long v21 = type metadata accessor for PromptTemplateInfo.RichVariableBinding();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    uint64_t v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SpecialToken, String));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SpecialToken, String>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  int64_t v9 = &v5[*(int *)(v2 + 48)];
  char v10 = v6 + 64;
  size_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Prompt.Rendering?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (SpecialToken, String));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for SpecialToken();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = (void *)(v7[7] + 16 * v16);
    uint64_t v20 = *((void *)v9 + 1);
    *uint64_t v19 = *(void *)v9;
    v19[1] = v20;
    long long v21 = v7[2];
    uint64_t v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.handleRequest(data:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  int64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *int64_t v9 = v3;
  v9[1] = partial apply for closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  return closure #1 in InferenceRequestHandler.handleRequest(data:configuration:)(a1, a2, v6, v7, v8);
}

{
  uint64_t *v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_25F7B3028()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(v2);
}

uint64_t sub_25F7B30F4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)
                                              + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error));
  return v6(a1, v4);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_25F7B3234()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data>);
}

uint64_t partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data>)
                 - 8);
  return specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), &demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data>, &demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data>.Iterator, &lazy protocol witness table cache variable for type AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data>.Iterator and conformance AsyncMapSequence<A, B>.Iterator, &lazy protocol witness table cache variable for type AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data> and conformance AsyncMapSequence<A, B>, a1);
}

{
  uint64_t v1;
  uint64_t v3;

  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>, ClientData>)
                 - 8);
  return specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), &demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>, ClientData>, &demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>, ClientData>.Iterator, &lazy protocol witness table cache variable for type AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>, ClientData>.Iterator and conformance AsyncMapSequence<A, B>.Iterator, &lazy protocol witness table cache variable for type AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>, ClientData> and conformance AsyncMapSequence<A, B>, a1);
}

{
  uint64_t v1;
  uint64_t v3;

  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData>)
                 - 8);
  return specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), &demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData>, &demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData>.Iterator, &lazy protocol witness table cache variable for type AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData>.Iterator and conformance AsyncMapSequence<A, B>.Iterator, &lazy protocol witness table cache variable for type AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData> and conformance AsyncMapSequence<A, B>, a1);
}

{
  uint64_t v1;
  uint64_t v3;

  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>)
                 - 8);
  return specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), &demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>, &demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>.Iterator, &lazy protocol witness table cache variable for type AsyncThrowingStream<CompletePromptResponseElement, Error>.Iterator and conformance AsyncThrowingStream<A, B>.Iterator, &lazy protocol witness table cache variable for type AsyncThrowingStream<CompletePromptResponseElement, Error> and conformance AsyncThrowingStream<A, B>, a1);
}

{
  uint64_t v1;
  uint64_t v3;

  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>)
                 - 8);
  return specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), &demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>, &demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>.Iterator, &lazy protocol witness table cache variable for type AsyncThrowingStream<DocumentRegistration, Error>.Iterator and conformance AsyncThrowingStream<A, B>.Iterator, &lazy protocol witness table cache variable for type AsyncThrowingStream<DocumentRegistration, Error> and conformance AsyncThrowingStream<A, B>, a1);
}

uint64_t sub_25F7B32D0()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, Data>);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in InferenceRequestHandler.handleStreamingRequest(clientData:configuration:)(v2);
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for StreamingRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v28 = v8;
      uint64_t v29 = v4;
      if (*(void *)(v9 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v17 = v9 + v16[5];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = v17 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v19 = type metadata accessor for Locale();
      uint64_t v20 = *(void *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v9 + v16[8] + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v21 = v9 + v16[10];
      uint64_t v22 = type metadata accessor for Constraints(0);
      uint64_t v3 = (v2 + 32) & ~v2;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22)) {
        goto LABEL_25;
      }
      int v23 = swift_getEnumCaseMultiPayload();
      if (v23 != 2 && v23 != 1)
      {
        if (!v23)
        {
          uint64_t v24 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v21, v24);
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (EnumCaseMultiPayload) {
        goto LABEL_27;
      }
      uint64_t v28 = v8;
      uint64_t v29 = v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v12 = v9 + *(int *)(v11 + 24);
      uint64_t v13 = type metadata accessor for Constraints(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
      {
        int v14 = swift_getEnumCaseMultiPayload();
        if (v14 == 2 || v14 == 1)
        {
          swift_bridgeObjectRelease();
        }
        else if (!v14)
        {
          uint64_t v15 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v12, v15);
        }
      }
      swift_bridgeObjectRelease();
      if (*(void *)(v9 + *(int *)(v11 + 32) + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v28;
    uint64_t v4 = v29;
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v25 = (v3 + v4 + v7) & ~v7;
  uint64_t v26 = v25 + v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v25, v5);
  return MEMORY[0x270FA0238](v0, v26, v2 | v7 | 7);
}

uint64_t partial apply for closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for StreamingRequest(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for InferenceProviderRequestConfiguration() - 8);
  return closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + v2, v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t outlined destroy of XPCCodableObject?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCCodableObject?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay26GenerativeModelsFoundation16DocumentResourceVG_AHs5NeverOTg50165_s15TokenGeneration23InferenceRequestHandlerV015handleStreamingD010clientData13configurationSci_p20ModelManagerServices06ClientI0V_AG0c8ProviderD13ConfigurationVtF26de12Foundation16gH9VANXEfU3_So13OS_xpc_object_pTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  xpc_object_t v24 = a2;
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DocumentResource();
  uint64_t v7 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!v9) {
    return v10;
  }
  uint64_t v20 = v2;
  uint64_t v26 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  unint64_t v21 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = a1 + v21;
  uint64_t v12 = *(void *)(v7 + 72);
  uint64_t v13 = (void (**)(char *, uint64_t))(v4 + 8);
  BOOL v14 = (void (**)(unint64_t, char *, uint64_t))(v7 + 32);
  while (1)
  {
    DocumentResource.url.getter();
    URL.path(percentEncoded:)(1);
    (*v13)(v6, v23);
    uint64_t v15 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    xpc_object_t v16 = xpc_dictionary_get_value(v24, (const char *)(v15 + 32));
    swift_release();
    if (!v16) {
      break;
    }
    xpc_fd_dup(v16);
    DocumentResource.url.getter();
    DocumentResource.metadata.getter();
    DocumentResource.init(_:_:_:)();
    swift_unknownObjectRelease();
    uint64_t v10 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
      uint64_t v10 = v26;
    }
    unint64_t v18 = *(void *)(v10 + 16);
    unint64_t v17 = *(void *)(v10 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      uint64_t v10 = v26;
    }
    *(void *)(v10 + 16) = v18 + 1;
    (*v14)(v10 + v21 + v18 * v12, v25, v22);
    uint64_t v26 = v10;
    v11 += v12;
    if (!--v9) {
      return v10;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_25F7B3E2C()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<DocumentRegistration>>, ClientData>);
}

uint64_t sub_25F7B3EC8()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData>);
}

uint64_t sub_25F7B3F64()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncMapSequence<InstrumentedStream<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>>, ClientData>);
}

uint64_t (*partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  return closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:countTokensPromptTemplate:)(a1, a2, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)(a1, a2, a3, v9, v8);
}

uint64_t partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)(a1, a2, a3, v9, v8);
}

uint64_t (*partial apply for closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2))()
{
  return closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #5 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)(a1, a2, a3, v9, v8);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #5 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, a2, a3, v9, v8);
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, a3, v9, v8);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, a3, v9, v8);
}

uint64_t (*partial apply for closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16));
}

{
  uint64_t *v2;

  return closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t (*partial apply for closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))()
{
  return closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

{
  uint64_t v2;

  return closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t (*partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))()
{
  return closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #5 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)(a1, a2, a3, v9, v8);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)(a1, a2, a3, v9, v8);
}

uint64_t sub_25F7B4450()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25F7B4494()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t (*partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  return closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, a3, v9, v8);
}

uint64_t (*partial apply for closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 48));
}

uint64_t (*partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  return closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t destroy for InferenceRequestHandler()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for InferenceRequestHandler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for InferenceRequestHandler(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_retain();
  swift_release();
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for InferenceRequestHandler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequestHandler(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceRequestHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceRequestHandler()
{
  return &type metadata for InferenceRequestHandler;
}

uint64_t type metadata instantiation function for InferenceRequestHandler.ResponseStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

void *initializeBufferWithCopyOfBuffer for InferenceRequestHandler.ResponseStream(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for InferenceRequestHandler.ResponseStream()
{
  return swift_release();
}

void *assignWithCopy for InferenceRequestHandler.ResponseStream(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for InferenceRequestHandler.ResponseStream(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequestHandler.ResponseStream(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceRequestHandler.ResponseStream(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for InferenceRequestHandler.ResponseStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in InferenceRequestHandler.ResponseStream<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in InferenceRequestHandler.ResponseStream<A>.AsyncIterator()
{
  return MEMORY[0x263F8E4E0];
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1Tm(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of AsyncIteratorProtocol(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_25F7B4D60()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)), a1);
}

uint64_t partial apply for closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, v5, v4);
}

uint64_t sub_25F7B4ED8()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t sub_25F7B4F74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 80);
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 72), v1);
  }
  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t outlined init with copy of PromptCompletionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t partial apply for closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, v5, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, v5, v4);
}

uint64_t sub_25F7B5150()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
}

uint64_t partial apply for closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, v5, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, v5, v4);
}

uint64_t sub_25F7B5298()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t sub_25F7B5350()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
}

uint64_t sub_25F7B5408()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t partial apply for closure #1 in closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, v5, v4);
}

uint64_t sub_25F7B54C0()
{
  return objectdestroy_23Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t objectdestroy_23Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of OneShotRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of OneShotRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of OneShotRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of PromptRenderingEnvelope?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of PromptRenderingEnvelope?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CountTokensResponse and conformance CountTokensResponse()
{
  unint64_t result = lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse;
  if (!lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse;
  if (!lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse;
  if (!lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CompletePromptResponse and conformance CompletePromptResponse()
{
  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse);
  }
  return result;
}

void *outlined release of CompletePromptResponse(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  uint64_t v6 = a1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  outlined consume of PromptRenderingEnvelope?(v6, v4);
  return a1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t initializeWithCopy for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for InferenceRequestHandler.ResponseStream.AsyncIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t InferenceRequestInstrumentation.measure(_:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](InferenceRequestInstrumentation.measure(_:), 0, 0);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  long long v4 = (void *)*v3;
  long long v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  v4[14] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = InferenceRequestInstrumentation.measure(_:);
  }
  else {
    uint64_t v5 = InferenceRequestInstrumentation.measure(_:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t InferenceRequestInstrumentation.measure(_:)()
{
  v0[12] = *(void *)(v0[8] + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_eventReporter);
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v1 = v0[11];
  uint64_t v2 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  long long v3 = (int *)v0[6];
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[11], &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  uint64_t v7 = (uint64_t (*)(uint64_t (*)(long long *), uint64_t))((char *)v3 + *v3);
  long long v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  *long long v4 = v0;
  v4[1] = InferenceRequestInstrumentation.measure(_:);
  uint64_t v5 = v0[8];
  return v7(partial apply for closure #1 in InferenceRequestInstrumentation.measure(_:), v5);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = v0[8];
  long long v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 0;
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  if (v1)
  {

    long long v4 = 1;
  }
  else
  {
    long long v4 = 0;
  }
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[10];
  swift_task_dealloc();
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, v4, 1, v8);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v7, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v9 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v9(v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[8];
  long long v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  MEMORY[0x261201A80](v1);
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  long long v4 = (void *)v0[14];
  uint64_t v5 = v0[9];
  swift_task_dealloc();
  uint64_t v6 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v5, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t InferenceRequestInstrumentation.init(inferenceRequestHandlerIdentifier:inferenceRequest:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v46 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v39 = v9;
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v10 = v43;
  MEMORY[0x270FA5388](v9);
  unint64_t v42 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = (uint64_t (*)(void))type metadata accessor for InferenceRequest(0);
  MEMORY[0x270FA5388](v41);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.RequestType();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputTokensCount) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputImagesCount) = 0;
  unint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  uint64_t v37 = a4;
  uint64_t v38 = v18;
  v18(v4 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_configuration, a4, v9);
  unint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  unint64_t v49 = 0xD00000000000001BLL;
  unint64_t v50 = 0x800000025F92C840;
  uint64_t v40 = a3;
  Swift::String v19 = InferenceRequest.eventTypeSuffix()();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  unint64_t v20 = v50;
  unint64_t v21 = (unint64_t *)(v4 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_eventType);
  unint64_t *v21 = v49;
  v21[1] = v20;
  outlined init with copy of InferenceRequest(a3, (uint64_t)v13, type metadata accessor for InferenceRequest);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v23 = (unsigned int *)MEMORY[0x263F4FCF8];
  if (EnumCaseMultiPayload != 1) {
    uint64_t v23 = (unsigned int *)MEMORY[0x263F4FD00];
  }
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *v23, v14);
  uint64_t v41 = type metadata accessor for InferenceRequest;
  outlined destroy of InferenceRequest((uint64_t)v13, type metadata accessor for InferenceRequest);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v4 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_requestType, v17, v14);
  type metadata accessor for EventReporter();
  swift_allocObject();
  *(void *)(v4 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_eventReporter) = EventReporter.init()();
  uint64_t v24 = v4;
  uint64_t v36 = v4;
  uint64_t v25 = v42;
  uint64_t v26 = v38;
  uint64_t v27 = v39;
  v38((uint64_t)v42, a4, v39);
  type metadata accessor for InferenceRequestTransparency();
  uint64_t v28 = swift_allocObject();
  static GenerativeExperiencesTransparencyLog.ExecutionEnvironment.from(inferenceRequestHandlerIdentifier:)(v44, v45, (void *)(v28 + OBJC_IVAR____TtC15TokenGeneration28InferenceRequestTransparency_executionEnvironment));
  swift_bridgeObjectRelease();
  uint64_t v29 = v25;
  v26(v28 + OBJC_IVAR____TtC15TokenGeneration28InferenceRequestTransparency_configuration, v25, v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<InferenceRequestTransparency.MutableState, os_unfair_lock_s>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_DWORD *)(v30 + 48) = 0;
  long long v31 = *(void (**)(char *, uint64_t))(v43 + 8);
  v31(v29, v27);
  *(void *)(v28 + OBJC_IVAR____TtC15TokenGeneration28InferenceRequestTransparency_mutableState) = v30;
  *(void *)(v24 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_transparency) = v28;
  uint64_t v32 = v46;
  uint64_t v33 = v40;
  InferenceRequest.prompt()(v46);
  uint64_t v47 = v32;
  uint64_t v48 = v28;
  os_unfair_lock_lock((os_unfair_lock_t)(v30 + 48));
  partial apply for closure #1 in InferenceRequestTransparency.record(prompt:)((unint64_t *)(v30 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 48));
  v31(v37, v27);
  outlined destroy of InferenceRequest(v33, v41);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v32, &demangling cache variable for type metadata for Prompt?);
  return v36;
}

Swift::String __swiftcall InferenceRequest.eventTypeSuffix()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OneShotRequest(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for StreamingRequest(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = type metadata accessor for InferenceRequest(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of InferenceRequest(v1, (uint64_t)v16, type metadata accessor for InferenceRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of StreamingRequest((uint64_t)v16, (uint64_t)v7, type metadata accessor for OneShotRequest);
    outlined init with copy of InferenceRequest((uint64_t)v7, (uint64_t)v5, type metadata accessor for OneShotRequest);
    unint64_t v17 = 0xEB00000000736E65;
    unint64_t v18 = 0x6B6F54746E756F63;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        unint64_t v18 = 0xD000000000000019;
        unint64_t v17 = 0x800000025F92C880;
        break;
      case 2u:
        unint64_t v18 = 0x6574656C706D6F63;
        unint64_t v17 = 0xEE0074706D6F7250;
        break;
      case 3u:
        unint64_t v17 = 0x800000025F92C860;
        unint64_t v18 = 0xD000000000000016;
        break;
      default:
        break;
    }
    outlined destroy of InferenceRequest((uint64_t)v5, type metadata accessor for OneShotRequest);
    uint64_t v20 = (uint64_t)v7;
    unint64_t v21 = type metadata accessor for OneShotRequest;
  }
  else
  {
    outlined init with take of StreamingRequest((uint64_t)v16, (uint64_t)v13, type metadata accessor for StreamingRequest);
    outlined init with copy of InferenceRequest((uint64_t)v13, (uint64_t)v11, type metadata accessor for StreamingRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        unint64_t v17 = 0x800000025F92C860;
        unint64_t v18 = 0xD000000000000016;
      }
      else
      {
        unint64_t v18 = 0xD000000000000010;
        unint64_t v17 = 0x800000025F92C8A0;
      }
    }
    else
    {
      unint64_t v18 = 0x6574656C706D6F63;
      unint64_t v17 = 0xEE0074706D6F7250;
    }
    outlined destroy of InferenceRequest((uint64_t)v11, type metadata accessor for StreamingRequest);
    uint64_t v20 = (uint64_t)v13;
    unint64_t v21 = type metadata accessor for StreamingRequest;
  }
  outlined destroy of InferenceRequest(v20, v21);
  uint64_t v22 = v18;
  uint64_t v23 = (void *)v17;
  result._object = v23;
  result._countAndFlagsBits = v22;
  return result;
}

uint64_t InferenceRequest.prompt()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v54 = type metadata accessor for StreamingRequest(0);
  uint64_t v1 = MEMORY[0x270FA5388](v54);
  uint64_t v3 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v53 - v4;
  uint64_t v6 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v53 = (uint64_t *)((char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for CompletePromptTemplateRequest(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (uint64_t *)((char *)&v53 - v15);
  uint64_t v17 = type metadata accessor for OneShotRequest(0);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (uint64_t *)((char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v23 = type metadata accessor for InferenceRequest(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of InferenceRequest(v56, (uint64_t)v25, type metadata accessor for InferenceRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of StreamingRequest((uint64_t)v25, (uint64_t)v22, type metadata accessor for OneShotRequest);
    outlined init with copy of InferenceRequest((uint64_t)v22, (uint64_t)v20, type metadata accessor for OneShotRequest);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v39 = v53;
        outlined init with take of StreamingRequest((uint64_t)v20, (uint64_t)v53, type metadata accessor for CountTokensPromptTemplateRequest);
        uint64_t v40 = v39[1];
        if (v40)
        {
          uint64_t v41 = v55;
          PromptEnvelope.unseal()(*v39, v40, v39[2], v39[3], v55);
          uint64_t v42 = type metadata accessor for Prompt();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 0, 1, v42);
        }
        else
        {
          uint64_t v49 = type metadata accessor for Prompt();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v55, 1, 1, v49);
        }
        unint64_t v50 = type metadata accessor for CountTokensPromptTemplateRequest;
        uint64_t v51 = (uint64_t)v39;
        break;
      case 2u:
        outlined init with take of StreamingRequest((uint64_t)v20, (uint64_t)v8, type metadata accessor for CompletePromptRequest);
        uint64_t v34 = v55;
        PromptEnvelope.unseal()(*v8, v8[1], v8[2], v8[3], v55);
        outlined destroy of InferenceRequest((uint64_t)v8, type metadata accessor for CompletePromptRequest);
        uint64_t v35 = type metadata accessor for OneShotRequest;
        uint64_t v36 = (uint64_t)v22;
        goto LABEL_13;
      case 3u:
        outlined init with take of StreamingRequest((uint64_t)v20, (uint64_t)v16, type metadata accessor for CompletePromptTemplateRequest);
        uint64_t v43 = v16[1];
        if (v43)
        {
          uint64_t v44 = v55;
          PromptEnvelope.unseal()(*v16, v43, v16[2], v16[3], v55);
          uint64_t v45 = type metadata accessor for Prompt();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 0, 1, v45);
        }
        else
        {
          uint64_t v52 = type metadata accessor for Prompt();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v55, 1, 1, v52);
        }
        unint64_t v50 = type metadata accessor for CompletePromptTemplateRequest;
        uint64_t v51 = (uint64_t)v16;
        break;
      default:
        uint64_t v26 = v55;
        PromptEnvelope.unseal()(*v20, v20[1], v20[2], v20[3], v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of InferenceRequest((uint64_t)v22, type metadata accessor for OneShotRequest);
        uint64_t v27 = type metadata accessor for Prompt();
        uint64_t v28 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
        uint64_t v29 = v26;
        return v28(v29, 0, 1, v27);
    }
    outlined destroy of InferenceRequest(v51, v50);
    uint64_t v47 = type metadata accessor for OneShotRequest;
    uint64_t v48 = (uint64_t)v22;
    return outlined destroy of InferenceRequest(v48, v47);
  }
  outlined init with take of StreamingRequest((uint64_t)v25, (uint64_t)v5, type metadata accessor for StreamingRequest);
  outlined init with copy of InferenceRequest((uint64_t)v5, (uint64_t)v3, type metadata accessor for StreamingRequest);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      outlined destroy of InferenceRequest((uint64_t)v5, type metadata accessor for StreamingRequest);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = type metadata accessor for Prompt();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v55, 1, 1, v37);
    }
    outlined init with take of StreamingRequest((uint64_t)v3, (uint64_t)v14, type metadata accessor for CompletePromptTemplateRequest);
    uint64_t v31 = v14[1];
    if (v31)
    {
      uint64_t v32 = v55;
      PromptEnvelope.unseal()(*v14, v31, v14[2], v14[3], v55);
      uint64_t v33 = type metadata accessor for Prompt();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 0, 1, v33);
    }
    else
    {
      uint64_t v46 = type metadata accessor for Prompt();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v55, 1, 1, v46);
    }
    outlined destroy of InferenceRequest((uint64_t)v14, type metadata accessor for CompletePromptTemplateRequest);
    uint64_t v47 = type metadata accessor for StreamingRequest;
    uint64_t v48 = (uint64_t)v5;
    return outlined destroy of InferenceRequest(v48, v47);
  }
  outlined init with take of StreamingRequest((uint64_t)v3, (uint64_t)v8, type metadata accessor for CompletePromptRequest);
  uint64_t v34 = v55;
  PromptEnvelope.unseal()(*v8, v8[1], v8[2], v8[3], v55);
  outlined destroy of InferenceRequest((uint64_t)v8, type metadata accessor for CompletePromptRequest);
  uint64_t v35 = type metadata accessor for StreamingRequest;
  uint64_t v36 = (uint64_t)v5;
LABEL_13:
  outlined destroy of InferenceRequest(v36, v35);
  uint64_t v27 = type metadata accessor for Prompt();
  uint64_t v28 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  uint64_t v29 = v34;
  return v28(v29, 0, 1, v27);
}

uint64_t InferenceRequestInstrumentation.handleCompletePromptResponse(_:)(long long *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PromptCompletion(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = &v52[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = &v52[-v9];
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (uint64_t *)&v52[-v11];
  long long v13 = a1[9];
  long long v61 = a1[8];
  long long v62 = v13;
  long long v63 = a1[10];
  long long v14 = a1[5];
  long long v57 = a1[4];
  long long v58 = v14;
  long long v15 = a1[7];
  long long v59 = a1[6];
  long long v60 = v15;
  long long v16 = a1[1];
  long long v53 = *a1;
  long long v54 = v16;
  long long v17 = a1[3];
  long long v55 = a1[2];
  long long v56 = v17;
  PromptCompletionEnvelope.unseal()(&v52[-v11]);
  uint64_t v18 = v12[6];
  outlined destroy of InferenceRequest((uint64_t)v12, type metadata accessor for PromptCompletion);
  *(void *)(v2 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputTokensCount) = v18;
  long long v19 = a1[9];
  long long v61 = a1[8];
  long long v62 = v19;
  long long v63 = a1[10];
  long long v20 = a1[5];
  long long v57 = a1[4];
  long long v58 = v20;
  long long v21 = a1[7];
  long long v59 = a1[6];
  long long v60 = v21;
  long long v22 = a1[1];
  long long v53 = *a1;
  long long v54 = v22;
  long long v23 = a1[3];
  long long v55 = a1[2];
  long long v56 = v23;
  PromptCompletionEnvelope.unseal()(v10);
  uint64_t v24 = v10[4];
  swift_bridgeObjectRetain();
  uint64_t result = outlined destroy of InferenceRequest((uint64_t)v10, type metadata accessor for PromptCompletion);
  uint64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v24 + 32 + 56 * v27);
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30) {
        break;
      }
      uint64_t v31 = 0;
LABEL_11:
      BOOL v33 = __OFADD__(v28, v31);
      v28 += v31;
      if (v33) {
        goto LABEL_16;
      }
      if (++v27 == v26)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = (unsigned char *)(v29 + 72);
    while (1)
    {
      if (*v32 == 1)
      {
        BOOL v33 = __OFADD__(v31++, 1);
        if (v33) {
          break;
        }
      }
      v32 += 48;
      if (!--v30) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = 0;
LABEL_15:
    *(void *)(v2 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputImagesCount) = v28;
    long long v34 = a1[9];
    long long v61 = a1[8];
    long long v62 = v34;
    long long v63 = a1[10];
    long long v35 = a1[5];
    long long v57 = a1[4];
    long long v58 = v35;
    long long v36 = a1[7];
    long long v59 = a1[6];
    long long v60 = v36;
    long long v37 = a1[1];
    long long v53 = *a1;
    long long v54 = v37;
    long long v38 = a1[3];
    long long v55 = a1[2];
    long long v56 = v38;
    PromptCompletionEnvelope.unseal()(v12);
    uint64_t v40 = *v12;
    uint64_t v39 = v12[1];
    uint64_t v41 = v12[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of InferenceRequest((uint64_t)v12, type metadata accessor for PromptCompletion);
    *(void *)&long long v53 = v40;
    *((void *)&v53 + 1) = v39;
    *(void *)&long long v54 = v41;
    InferenceRequestInstrumentation.reportModelInformation(_:)((uint64_t)&v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)(v2 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_transparency);
    long long v43 = a1[9];
    long long v61 = a1[8];
    long long v62 = v43;
    long long v63 = a1[10];
    long long v44 = a1[5];
    long long v57 = a1[4];
    long long v58 = v44;
    long long v45 = a1[7];
    long long v59 = a1[6];
    long long v60 = v45;
    long long v46 = a1[1];
    long long v53 = *a1;
    long long v54 = v46;
    long long v47 = a1[3];
    long long v55 = a1[2];
    long long v56 = v47;
    uint64_t v48 = PromptCompletionEnvelope.unseal()(v7);
    MEMORY[0x270FA5388](v48);
    *(void *)&v52[-16] = v7;
    *(void *)&v52[-8] = v42;
    unint64_t v50 = v49 + 4;
    uint64_t v51 = v49 + 12;
    os_unfair_lock_lock(v49 + 12);
    partial apply for closure #1 in InferenceRequestTransparency.record(completion:)(v50);
    os_unfair_lock_unlock(v51);
    return outlined destroy of InferenceRequest((uint64_t)v7, type metadata accessor for PromptCompletion);
  }
  return result;
}

uint64_t closure #1 in InferenceRequestInstrumentation.start()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (uint64_t *)((char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent.Subtype?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v7 = *MEMORY[0x263F4FB08];
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v6, v7, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  GenerativeFunctionsInstrumentationEvent.subtype.setter();
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest();
  uint64_t v10 = swift_allocBox();
  static Buildable.with(_:)();
  *uint64_t v2 = v10;
  uint64_t v11 = *MEMORY[0x263F4FD98];
  uint64_t v12 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 104))(v2, v11, v12);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v12);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t closure #1 in closure #1 in InferenceRequestInstrumentation.start()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  InferenceProviderRequestConfiguration.requestUUID.getter();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 0, 1, v3);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
  InferenceProviderRequestConfiguration.sessionUUID.getter();
  v4(v2, 0, 1, v3);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
  InferenceProviderRequestConfiguration.useCaseIdentifier.getter();
  return GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter();
}

uint64_t closure #2 in closure #1 in InferenceRequestInstrumentation.start()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.RequestType?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a2 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_requestType;
  uint64_t v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.RequestType();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return MEMORY[0x2611FFF00](v5);
}

void InferenceRequestInstrumentation.reportModelInformation(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(_OWORD **)a1;
  if (*(void *)(*(void *)a1 + 16))
  {
    long long v13 = v12[3];
    v27[0] = v12[2];
    v27[1] = v13;
    v27[2] = v12[4];
    MEMORY[0x270FA5388](v9);
    *(&v24 - 2) = v2;
    *(&v24 - 1) = (uint8_t *)v27;
    outlined retain of ModelInformation.Asset((uint64_t)v27);
    EventReporter.send(eventBuiltWithPresetsAnd:)();
    outlined release of ModelInformation.Asset((uint64_t)v27);
    uint64_t v23 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v11, 0, 1, v23);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v11, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  }
  else
  {
    if (one-time initialization token for inference != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.inference);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      long long v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v25 = v18;
      *(_DWORD *)long long v17 = 136315138;
      *(void *)&v27[0] = v18;
      uint64_t v24 = v17 + 4;
      InferenceProviderRequestConfiguration.requestUUID.getter();
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v21 = v20;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, (uint64_t *)v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25F79F000, v15, v16, "No model information found for request %s", v17, 0xCu);
      uint64_t v22 = v25;
      swift_arrayDestroy();
      MEMORY[0x261201C80](v22, -1, -1);
      MEMORY[0x261201C80](v17, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)()
{
  uint64_t v0 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  MEMORY[0x270FA5388](v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x6E496C65646F6D2ELL;
  v1._object = (void *)0xEA00000000006F66;
  String.append(_:)(v1);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  static Buildable.with(_:)();
  return GenerativeFunctionsInstrumentationEvent.identifiers.setter();
}

uint64_t closure #1 in closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  InferenceProviderRequestConfiguration.requestUUID.getter();
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v14 = a3;
  static Buildable.with(_:)();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 0, 1, v11);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
}

uint64_t closure #1 in closure #1 in closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t result = GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.identifier.setter();
  if (*(void *)(a2 + 24))
  {
    swift_bridgeObjectRetain();
    return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter();
  }
  return result;
}

uint64_t InferenceRequestInstrumentation.handlePromptCompletionEvent(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v36[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PromptCompletionEvent(a1, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if (swift_dynamicCast())
  {
    v36[0] = v36[6];
    v36[1] = v36[7];
    v36[2] = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    InferenceRequestInstrumentation.reportModelInformation(_:)((uint64_t)v36);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v8 = v40;
    unint64_t v9 = v41;
    uint64_t v10 = OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputTokensCount;
    uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputTokensCount);
    if (v11)
    {
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (!v12)
      {
LABEL_6:
        *(void *)(v2 + v10) = v13;
        MEMORY[0x270FA5388](result);
        *(&v35 - 2) = v15;
        *(&v35 - 1) = v14;
        uint64_t v17 = (uint64_t)&v16[4];
        uint64_t v18 = v16 + 12;
        os_unfair_lock_lock(v16 + 12);
        closure #1 in InferenceRequestTransparency.record(textDelta:)partial apply(v17);
        os_unfair_lock_unlock(v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data?(v8, v9);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      }
    }
    else
    {
      unint64_t v35 = v38;
      EventReporter.send(eventBuiltWithPresetsAnd:)();
      uint64_t v33 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v6, 0, 1, v33);
      uint64_t result = outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v6, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
      uint64_t v34 = *(void *)(v2 + v10);
      BOOL v12 = __OFADD__(v34, 1);
      uint64_t v13 = v34 + 1;
      if (!v12) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
    if (!swift_dynamicCast())
    {
      if (swift_dynamicCast())
      {
        uint64_t v26 = v37;
        unint64_t v27 = v38;
        uint64_t v28 = v39;
        unint64_t v29 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v26, v27);
        outlined consume of Data._Representation(v28, v29);
        uint64_t v30 = *(os_unfair_lock_s **)(*(void *)(v2
                                               + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_transparency)
                                   + OBJC_IVAR____TtC15TokenGeneration28InferenceRequestTransparency_mutableState);
        uint64_t v31 = v30 + 4;
        uint64_t v32 = v30 + 12;
        os_unfair_lock_lock(v30 + 12);
        partial apply for closure #1 in InferenceRequestTransparency.submit()(v31);
        os_unfair_lock_unlock(v32);
      }
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    }
    uint64_t v19 = v38;
    unint64_t v20 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of Data._Representation(v19, v20);
    uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputImagesCount);
    BOOL v12 = __OFADD__(v21, 1);
    uint64_t v22 = v21 + 1;
    if (!v12)
    {
      *(void *)(v2 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputImagesCount) = v22;
      MEMORY[0x270FA5388](result);
      *(&v35 - 2) = 0x3E6567616D693CLL;
      *(&v35 - 1) = 0xE700000000000000;
      uint64_t v24 = (uint64_t)&v23[4];
      uint64_t v25 = v23 + 12;
      os_unfair_lock_lock(v23 + 12);
      partial apply for closure #1 in InferenceRequestTransparency.record(textDelta:)(v24);
      os_unfair_lock_unlock(v25);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in InferenceRequestInstrumentation.handlePromptCompletionEvent(_:)()
{
  uint64_t v0 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  MEMORY[0x270FA5388](v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x6F5474737269662ELL;
  v1._object = (void *)0xEB000000006E656BLL;
  String.append(_:)(v1);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  static Buildable.with(_:)();
  return GenerativeFunctionsInstrumentationEvent.identifiers.setter();
}

void closure #1 in InferenceRequestInstrumentation.end(error:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationError?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (void *)((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (void *)((char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent.Subtype?);
  MEMORY[0x270FA5388](v10 - 8);
  BOOL v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  MEMORY[0x270FA5388](v13);
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  if (a3)
  {
    uint64_t v14 = *MEMORY[0x263F4FAE8];
    uint64_t v15 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v12, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
    MEMORY[0x261201A80](a3);
    GenerativeFunctionsInstrumentationEvent.subtype.setter();
    swift_getErrorValue();
    Error.telemetryValue.getter(v25[2], v25[3], v6);
    uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationError();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 0, 1, v17);
    GenerativeFunctionsInstrumentationEvent.error.setter();
  }
  else
  {
    uint64_t v18 = *MEMORY[0x263F4FAD0];
    uint64_t v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
    uint64_t v20 = *(void *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v12, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v12, 0, 1, v19);
    GenerativeFunctionsInstrumentationEvent.subtype.setter();
    type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest();
    uint64_t v21 = swift_allocBox();
    static Buildable.with(_:)();
    *unint64_t v9 = v21;
    uint64_t v22 = *MEMORY[0x263F4FD98];
    uint64_t v23 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
    uint64_t v24 = *(void *)(v23 - 8);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v24 + 104))(v9, v22, v23);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v24 + 56))(v9, 0, 1, v23);
    GenerativeFunctionsInstrumentationEvent.metadata.setter();
  }
}

uint64_t closure #1 in closure #1 in InferenceRequestInstrumentation.handlePromptCompletionEvent(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  InferenceProviderRequestConfiguration.requestUUID.getter();
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
}

uint64_t Error.telemetryValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v70 = a2;
  os_log_type_t v71 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceError.Context?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for InferenceError.Context();
  uint64_t v65 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceError?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v13);
  uint64_t v67 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v63 - v19;
  uint64_t v21 = type metadata accessor for InferenceError();
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = v16;
  uint64_t v69 = v4;
  uint64_t v24 = v4;
  uint64_t v26 = v25;
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v66(v20, v24, a1);
  char v27 = swift_dynamicCast();
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if ((v27 & 1) == 0)
  {
    v28(v15, 1, 1, v21);
    uint64_t v30 = &demangling cache variable for type metadata for InferenceError?;
    uint64_t v31 = (uint64_t)v15;
    goto LABEL_5;
  }
  v28(v15, 0, 1, v21);
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v15, v21);
  InferenceError.context.getter();
  uint64_t v29 = v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v8, 1, v9) != 1)
  {
    uint64_t v64 = v21;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v11, v8, v9);
    uint64_t v43 = InferenceError.Context.userInfo.getter();
    if (*(void *)(v43 + 16))
    {
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000015, 0x800000025F92C800);
      if (v45)
      {
        uint64_t v46 = *(void *)(*(void *)(v43 + 56) + 16 * v44 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v47 = InferenceError.Context.userInfo.getter();
        if (*(void *)(v47 + 16))
        {
          unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x800000025F92C820);
          if (v49)
          {
            unint64_t v50 = (uint64_t *)(*(void *)(v47 + 56) + 16 * v48);
            uint64_t v51 = *v50;
            uint64_t v52 = v50[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError();
            uint64_t v53 = swift_allocBox();
            MEMORY[0x270FA5388](v53);
            *(&v63 - 6) = (uint64_t)v23;
            *(&v63 - 5) = v54;
            *(&v63 - 4) = v46;
            *(&v63 - 3) = v51;
            *(&v63 - 2) = v52;
            static Buildable.with(_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v9);
            (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v64);
            long long v55 = v71;
            *os_log_type_t v71 = v53;
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = InferenceError.Context.domain.getter();
    unint64_t v58 = v57;
    swift_bridgeObjectRelease();
    uint64_t v59 = HIBYTE(v58) & 0xF;
    if ((v58 & 0x2000000000000000) == 0) {
      uint64_t v59 = v56 & 0xFFFFFFFFFFFFLL;
    }
    if (!v59)
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v9);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v64);
      goto LABEL_6;
    }
    type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError();
    uint64_t v60 = swift_allocBox();
    MEMORY[0x270FA5388](v60);
    *(&v63 - 2) = (uint64_t)v23;
    *(&v63 - 1) = (uint64_t)v11;
    static Buildable.with(_:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v64);
    long long v55 = v71;
    *os_log_type_t v71 = v60;
LABEL_21:
    uint64_t v61 = *MEMORY[0x263F4FA10];
    uint64_t v62 = type metadata accessor for GenerativeFunctionsInstrumentationError();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 104))(v55, v61, v62);
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v21);
  uint64_t v30 = &demangling cache variable for type metadata for InferenceError.Context?;
  uint64_t v31 = (uint64_t)v8;
LABEL_5:
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v31, v30);
LABEL_6:
  uint64_t v32 = v71;
  uint64_t v33 = v68;
  uint64_t v34 = v67;
  v66(v67, v69, a1);
  uint64_t v35 = _getErrorEmbeddedNSError<A>(_:)();
  if (v35)
  {
    long long v36 = (void *)v35;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, a1);
  }
  else
  {
    long long v36 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v37, v34, a1);
  }
  unint64_t v38 = (void *)_convertErrorToNSError(_:)();

  type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError();
  uint64_t v39 = swift_allocBox();
  MEMORY[0x270FA5388](v39);
  *(&v63 - 2) = (uint64_t)v38;
  static Buildable.with(_:)();

  *uint64_t v32 = v39;
  uint64_t v40 = *MEMORY[0x263F4FA10];
  uint64_t v41 = type metadata accessor for GenerativeFunctionsInstrumentationError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v32, v40, v41);
}

uint64_t InferenceRequestInstrumentation.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_configuration;
  uint64_t v2 = type metadata accessor for InferenceProviderRequestConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_requestType;
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for InferenceRequestInstrumentation()
{
  return type metadata accessor for InferenceRequestInstrumentation(0);
}

uint64_t type metadata accessor for InferenceRequestInstrumentation(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for InferenceRequestInstrumentation);
}

uint64_t type metadata completion function for InferenceRequestInstrumentation()
{
  uint64_t result = type metadata accessor for InferenceProviderRequestConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.RequestType();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata instantiation function for InstrumentedStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for InstrumentedStream()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InstrumentedStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = (unint64_t *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v15 = *v14;
    swift_retain();
    if (v15 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
      return v4;
    }
    unint64_t v16 = v14[1];
    *(void *)unint64_t v13 = v15;
    *(void *)(v13 + 8) = v16;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for InstrumentedStream(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = swift_release();
  if (*(void *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for InstrumentedStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = *v11;
  swift_retain();
  if (v12 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    unint64_t v13 = v11[1];
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for InstrumentedStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  unint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = *v11;
  if (*v10 < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      unint64_t v14 = v11[1];
      *unint64_t v10 = v12;
      v10[1] = v14;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    return a1;
  }
  if (v12 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v13 = v11[1];
  *unint64_t v10 = v12;
  v10[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for InstrumentedStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (uint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = v10[1];
    *(void *)unint64_t v9 = v11;
    *(void *)(v9 + 8) = v12;
  }
  return a1;
}

uint64_t assignWithTake for InstrumentedStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if (*v10 < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      uint64_t v14 = *(void *)(v11 + 8);
      *unint64_t v10 = v12;
      v10[1] = v14;
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    return a1;
  }
  if (v12 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  *unint64_t v10 = v12;
  v10[1] = v13;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InstrumentedStream(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25F7BA2A4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for InstrumentedStream(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x25F7BA4ACLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for InstrumentedStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for InferenceRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for OneShotRequest(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v33 = a2[1];
          if (v33)
          {
            *(void *)a1 = *a2;
            *(void *)(a1 + 8) = v33;
            uint64_t v34 = a2[3];
            *(void *)(a1 + 16) = a2[2];
            *(void *)(a1 + 24) = v34;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v72 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v72;
          }
          uint64_t v174 = type metadata accessor for CountTokensPromptTemplateRequest(0);
          uint64_t v73 = *(int *)(v174 + 20);
          uint64_t v74 = (void *)(a1 + v73);
          uint64_t v75 = (uint64_t)a2 + v73;
          uint64_t v76 = *(uint64_t *)((char *)a2 + v73 + 8);
          void *v74 = *(uint64_t *)((char *)a2 + v73);
          v74[1] = v76;
          v74[2] = *(uint64_t *)((char *)a2 + v73 + 16);
          uint64_t v77 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
          uint64_t v78 = (char *)v74 + v77;
          v79 = (const void *)(v75 + v77);
          uint64_t v80 = type metadata accessor for Locale();
          uint64_t v81 = *(void *)(v80 - 8);
          uint64_t v82 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v81 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v82(v79, 1, v80))
          {
            uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
            memcpy(v78, v79, *(void *)(*(void *)(v83 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v81 + 16))(v78, v79, v80);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
          }
          uint64_t v98 = *(int *)(v174 + 24);
          uint64_t v99 = (void *)(a1 + v98);
          uint64_t v100 = (uint64_t *)((char *)a2 + v98);
          uint64_t v101 = v100[1];
          *uint64_t v99 = *v100;
          v99[1] = v101;
          uint64_t v102 = v100[3];
          v99[2] = v100[2];
          v99[3] = v102;
          uint64_t v103 = v100[5];
          v99[4] = v100[4];
          v99[5] = v103;
          v99[6] = v100[6];
          break;
        case 2u:
          uint64_t v35 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v35;
          uint64_t v36 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v36;
          *(void *)(a1 + 32) = a2[4];
          *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
          *(void *)(a1 + 48) = a2[6];
          *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
          uint64_t v37 = a2[8];
          *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
          *(void *)(a1 + 64) = v37;
          *(void *)(a1 + 80) = a2[10];
          *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
          *(void *)(a1 + 96) = a2[12];
          *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
          *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
          uint64_t v38 = a2[15];
          *(void *)(a1 + 112) = a2[14];
          *(void *)(a1 + 120) = v38;
          uint64_t v39 = a2[17];
          *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
          *(void *)(a1 + 136) = v39;
          *(void *)(a1 + 152) = a2[19];
          *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
          uint64_t v173 = type metadata accessor for CompletePromptRequest(0);
          uint64_t v40 = *(int *)(v173 + 24);
          v170 = (void *)(a1 + v40);
          uint64_t v41 = (uint64_t *)((char *)a2 + v40);
          uint64_t v42 = type metadata accessor for Constraints(0);
          uint64_t v43 = *(void *)(v42 - 8);
          unint64_t v44 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v44(v41, 1, v42))
          {
            uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
            memcpy(v170, v41, *(void *)(*(void *)(v45 - 8) + 64));
            uint64_t v46 = (int *)v173;
          }
          else
          {
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload == 2)
            {
              uint64_t v150 = v41[1];
              void *v170 = *v41;
              v170[1] = v150;
              swift_bridgeObjectRetain();
              uint64_t v46 = (int *)v173;
            }
            else
            {
              uint64_t v46 = (int *)v173;
              if (EnumCaseMultiPayload == 1)
              {
                uint64_t v85 = v41[1];
                void *v170 = *v41;
                v170[1] = v85;
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v151 = type metadata accessor for GenerationSchema();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v151 - 8) + 16))(v170, v41, v151);
              }
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v170, 0, 1, v42);
          }
          *(void *)(a1 + v46[7]) = *(uint64_t *)((char *)a2 + v46[7]);
          uint64_t v152 = v46[8];
          uint64_t v153 = a1 + v152;
          v154 = (_OWORD *)((char *)a2 + v152);
          unint64_t v155 = *(uint64_t *)((char *)a2 + v152 + 8);
          swift_bridgeObjectRetain();
          if (v155 < 4)
          {
            *(_OWORD *)uint64_t v153 = *v154;
          }
          else
          {
            *(void *)uint64_t v153 = *(void *)v154;
            *(void *)(v153 + 8) = v155;
            swift_bridgeObjectRetain();
          }
          *(void *)(a1 + v46[9]) = *(uint64_t *)((char *)a2 + v46[9]);
          uint64_t v156 = v46[10];
          v157 = (void *)(a1 + v156);
          v158 = (uint64_t *)((char *)a2 + v156);
          uint64_t v159 = v158[1];
          void *v157 = *v158;
          v157[1] = v159;
          uint64_t v160 = v158[3];
          v157[2] = v158[2];
          v157[3] = v160;
          uint64_t v161 = v158[5];
          v157[4] = v158[4];
          v157[5] = v161;
          v157[6] = v158[6];
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v47 = a2[1];
          if (v47)
          {
            *(void *)a1 = *a2;
            *(void *)(a1 + 8) = v47;
            uint64_t v48 = a2[3];
            *(void *)(a1 + 16) = a2[2];
            *(void *)(a1 + 24) = v48;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v86 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v86;
          }
          v175 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
          uint64_t v87 = v175[5];
          v88 = (void *)(a1 + v87);
          uint64_t v89 = (uint64_t)a2 + v87;
          uint64_t v90 = *(uint64_t *)((char *)a2 + v87 + 8);
          void *v88 = *(uint64_t *)((char *)a2 + v87);
          v88[1] = v90;
          v88[2] = *(uint64_t *)((char *)a2 + v87 + 16);
          uint64_t v91 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
          uint64_t v92 = (char *)v88 + v91;
          uint64_t v93 = (const void *)(v89 + v91);
          uint64_t v94 = type metadata accessor for Locale();
          uint64_t v95 = *(void *)(v94 - 8);
          v96 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v95 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v96(v93, 1, v94))
          {
            uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
            memcpy(v92, v93, *(void *)(*(void *)(v97 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v95 + 16))(v92, v93, v94);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
          }
          uint64_t v104 = v175[6];
          uint64_t v105 = a1 + v104;
          uint64_t v106 = (uint64_t)a2 + v104;
          *(void *)uint64_t v105 = *(void *)v106;
          *(unsigned char *)(v105 + 8) = *(unsigned char *)(v106 + 8);
          *(void *)(v105 + 16) = *(void *)(v106 + 16);
          *(unsigned char *)(v105 + 24) = *(unsigned char *)(v106 + 24);
          *(void *)(v105 + 32) = *(void *)(v106 + 32);
          *(unsigned char *)(v105 + 40) = *(unsigned char *)(v106 + 40);
          *(unsigned char *)(v105 + 56) = *(unsigned char *)(v106 + 56);
          *(void *)(v105 + 48) = *(void *)(v106 + 48);
          uint64_t v107 = *(void *)(v106 + 64);
          *(unsigned char *)(v105 + 72) = *(unsigned char *)(v106 + 72);
          *(void *)(v105 + 64) = v107;
          uint64_t v108 = *(void *)(v106 + 88);
          *(void *)(v105 + 80) = *(void *)(v106 + 80);
          *(void *)(v105 + 88) = v108;
          *(unsigned char *)(v105 + 96) = *(unsigned char *)(v106 + 96);
          *(void *)(v105 + 104) = *(void *)(v106 + 104);
          *(unsigned char *)(v105 + 112) = *(unsigned char *)(v106 + 112);
          *(void *)(v105 + 120) = *(void *)(v106 + 120);
          *(_WORD *)(v105 + 128) = *(_WORD *)(v106 + 128);
          *(void *)(a1 + v175[7]) = *(uint64_t *)((char *)a2 + v175[7]);
          uint64_t v109 = v175[8];
          uint64_t v110 = a1 + v109;
          uint64_t v111 = (_OWORD *)((char *)a2 + v109);
          unint64_t v112 = *(uint64_t *)((char *)a2 + v109 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v112 < 4)
          {
            *(_OWORD *)uint64_t v110 = *v111;
          }
          else
          {
            *(void *)uint64_t v110 = *(void *)v111;
            *(void *)(v110 + 8) = v112;
            swift_bridgeObjectRetain();
          }
          *(void *)(a1 + v175[9]) = *(uint64_t *)((char *)a2 + v175[9]);
          uint64_t v113 = v175[10];
          uint64_t v114 = (void *)(a1 + v113);
          unint64_t v115 = (uint64_t *)((char *)a2 + v113);
          uint64_t v116 = type metadata accessor for Constraints(0);
          uint64_t v117 = *(void *)(v116 - 8);
          uint64_t v118 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v117 + 48);
          swift_bridgeObjectRetain();
          if (v118(v115, 1, v116))
          {
            uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
            memcpy(v114, v115, *(void *)(*(void *)(v119 - 8) + 64));
          }
          else
          {
            int v120 = swift_getEnumCaseMultiPayload();
            if (v120 == 2 || v120 == 1)
            {
              uint64_t v121 = v115[1];
              *uint64_t v114 = *v115;
              v114[1] = v121;
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v162 = type metadata accessor for GenerationSchema();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v162 - 8) + 16))(v114, v115, v162);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(void *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
          }
          uint64_t v163 = v175[11];
          v164 = (void *)(a1 + v163);
          v165 = (uint64_t *)((char *)a2 + v163);
          uint64_t v166 = v165[1];
          void *v164 = *v165;
          v164[1] = v166;
          uint64_t v167 = v165[3];
          v164[2] = v165[2];
          v164[3] = v167;
          uint64_t v168 = v165[5];
          v164[4] = v165[4];
          v164[5] = v168;
          v164[6] = v165[6];
          break;
        default:
          uint64_t v6 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v6;
          uint64_t v7 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v7;
          uint64_t v8 = a2[5];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = v8;
          uint64_t v9 = a2[7];
          *(void *)(a1 + 48) = a2[6];
          *(void *)(a1 + 56) = v9;
          uint64_t v10 = a2[9];
          *(void *)(a1 + 64) = a2[8];
          *(void *)(a1 + 72) = v10;
          *(void *)(a1 + 80) = a2[10];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      type metadata accessor for StreamingRequest(0);
      int v12 = swift_getEnumCaseMultiPayload();
      if (v12 == 2)
      {
        uint64_t v15 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v15;
        uint64_t v16 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v16;
        uint64_t v17 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v17;
        uint64_t v19 = a2[6];
        uint64_t v18 = a2[7];
        *(void *)(a1 + 48) = v19;
        *(void *)(a1 + 56) = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        if (v12 == 1)
        {
          uint64_t v13 = a2[1];
          if (v13)
          {
            *(void *)a1 = *a2;
            *(void *)(a1 + 8) = v13;
            uint64_t v14 = a2[3];
            *(void *)(a1 + 16) = a2[2];
            *(void *)(a1 + 24) = v14;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v49 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v49;
          }
          v176 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
          uint64_t v50 = v176[5];
          uint64_t v51 = (void *)(a1 + v50);
          uint64_t v52 = (uint64_t)a2 + v50;
          uint64_t v53 = *(uint64_t *)((char *)a2 + v50 + 8);
          *uint64_t v51 = *(uint64_t *)((char *)a2 + v50);
          v51[1] = v53;
          v51[2] = *(uint64_t *)((char *)a2 + v50 + 16);
          uint64_t v54 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
          long long v55 = (char *)v51 + v54;
          uint64_t v56 = (const void *)(v52 + v54);
          uint64_t v57 = type metadata accessor for Locale();
          uint64_t v58 = *(void *)(v57 - 8);
          uint64_t v59 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v58 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v59(v56, 1, v57))
          {
            uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
            memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v58 + 16))(v55, v56, v57);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
          }
          uint64_t v61 = v176[6];
          uint64_t v62 = a1 + v61;
          uint64_t v63 = (uint64_t)a2 + v61;
          *(void *)uint64_t v62 = *(void *)v63;
          *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
          *(void *)(v62 + 16) = *(void *)(v63 + 16);
          *(unsigned char *)(v62 + 24) = *(unsigned char *)(v63 + 24);
          *(void *)(v62 + 32) = *(void *)(v63 + 32);
          *(unsigned char *)(v62 + 40) = *(unsigned char *)(v63 + 40);
          *(unsigned char *)(v62 + 56) = *(unsigned char *)(v63 + 56);
          *(void *)(v62 + 48) = *(void *)(v63 + 48);
          uint64_t v64 = *(void *)(v63 + 64);
          *(unsigned char *)(v62 + 72) = *(unsigned char *)(v63 + 72);
          *(void *)(v62 + 64) = v64;
          uint64_t v65 = *(void *)(v63 + 88);
          *(void *)(v62 + 80) = *(void *)(v63 + 80);
          *(void *)(v62 + 88) = v65;
          *(unsigned char *)(v62 + 96) = *(unsigned char *)(v63 + 96);
          *(void *)(v62 + 104) = *(void *)(v63 + 104);
          *(unsigned char *)(v62 + 112) = *(unsigned char *)(v63 + 112);
          *(void *)(v62 + 120) = *(void *)(v63 + 120);
          *(_WORD *)(v62 + 128) = *(_WORD *)(v63 + 128);
          *(void *)(a1 + v176[7]) = *(uint64_t *)((char *)a2 + v176[7]);
          uint64_t v66 = v176[8];
          uint64_t v67 = a1 + v66;
          uint64_t v68 = (_OWORD *)((char *)a2 + v66);
          unint64_t v69 = *(uint64_t *)((char *)a2 + v66 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v69 < 4)
          {
            *(_OWORD *)uint64_t v67 = *v68;
          }
          else
          {
            *(void *)uint64_t v67 = *(void *)v68;
            *(void *)(v67 + 8) = v69;
            swift_bridgeObjectRetain();
          }
          *(void *)(a1 + v176[9]) = *(uint64_t *)((char *)a2 + v176[9]);
          uint64_t v122 = v176[10];
          uint64_t v123 = (void *)(a1 + v122);
          uint64_t v124 = (uint64_t *)((char *)a2 + v122);
          uint64_t v125 = type metadata accessor for Constraints(0);
          uint64_t v126 = *(void *)(v125 - 8);
          uint64_t v127 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v126 + 48);
          swift_bridgeObjectRetain();
          if (v127(v124, 1, v125))
          {
            uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
            memcpy(v123, v124, *(void *)(*(void *)(v128 - 8) + 64));
          }
          else
          {
            int v129 = swift_getEnumCaseMultiPayload();
            if (v129 == 2 || v129 == 1)
            {
              uint64_t v130 = v124[1];
              *uint64_t v123 = *v124;
              v123[1] = v130;
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v143 = type metadata accessor for GenerationSchema();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v143 - 8) + 16))(v123, v124, v143);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(void *, void, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
          }
          uint64_t v144 = v176[11];
          long long v145 = (void *)(a1 + v144);
          long long v146 = (uint64_t *)((char *)a2 + v144);
          uint64_t v147 = v146[1];
          *long long v145 = *v146;
          v145[1] = v147;
          uint64_t v148 = v146[3];
          v145[2] = v146[2];
          v145[3] = v148;
          uint64_t v149 = v146[5];
          v145[4] = v146[4];
          v145[5] = v149;
          v145[6] = v146[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v20 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v20;
          uint64_t v21 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v21;
          *(void *)(a1 + 32) = a2[4];
          *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
          *(void *)(a1 + 48) = a2[6];
          *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
          uint64_t v22 = a2[8];
          *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
          *(void *)(a1 + 64) = v22;
          *(void *)(a1 + 80) = a2[10];
          *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
          *(void *)(a1 + 96) = a2[12];
          *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
          *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
          uint64_t v23 = a2[15];
          *(void *)(a1 + 112) = a2[14];
          *(void *)(a1 + 120) = v23;
          uint64_t v24 = a2[17];
          *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
          *(void *)(a1 + 136) = v24;
          *(void *)(a1 + 152) = a2[19];
          *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
          uint64_t v25 = type metadata accessor for CompletePromptRequest(0);
          uint64_t v26 = *(int *)(v25 + 24);
          __dst = (void *)(a1 + v26);
          v172 = (int *)v25;
          char v27 = (uint64_t *)((char *)a2 + v26);
          uint64_t v28 = type metadata accessor for Constraints(0);
          uint64_t v29 = *(void *)(v28 - 8);
          uint64_t v30 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v30(v27, 1, v28))
          {
            uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
            memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
            uint64_t v32 = v172;
          }
          else
          {
            int v70 = swift_getEnumCaseMultiPayload();
            if (v70 == 2)
            {
              uint64_t v131 = v27[1];
              void *__dst = *v27;
              __dst[1] = v131;
              swift_bridgeObjectRetain();
              uint64_t v32 = v172;
            }
            else
            {
              uint64_t v32 = v172;
              if (v70 == 1)
              {
                uint64_t v71 = v27[1];
                void *__dst = *v27;
                __dst[1] = v71;
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v132 = type metadata accessor for GenerationSchema();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v132 - 8) + 16))(__dst, v27, v132);
              }
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
          }
          *(void *)(a1 + v32[7]) = *(uint64_t *)((char *)a2 + v32[7]);
          uint64_t v133 = v32[8];
          uint64_t v134 = a1 + v133;
          uint64_t v135 = (_OWORD *)((char *)a2 + v133);
          unint64_t v136 = *(uint64_t *)((char *)a2 + v133 + 8);
          swift_bridgeObjectRetain();
          if (v136 < 4)
          {
            *(_OWORD *)uint64_t v134 = *v135;
          }
          else
          {
            *(void *)uint64_t v134 = *(void *)v135;
            *(void *)(v134 + 8) = v136;
            swift_bridgeObjectRetain();
          }
          *(void *)(a1 + v32[9]) = *(uint64_t *)((char *)a2 + v32[9]);
          uint64_t v137 = v32[10];
          uint64_t v138 = (void *)(a1 + v137);
          v139 = (uint64_t *)((char *)a2 + v137);
          uint64_t v140 = v139[1];
          *uint64_t v138 = *v139;
          v138[1] = v140;
          uint64_t v141 = v139[3];
          v138[2] = v139[2];
          v138[3] = v141;
          uint64_t v142 = v139[5];
          v138[4] = v139[4];
          v138[5] = v142;
          v138[6] = v139[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for InferenceRequest(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for OneShotRequest(0);
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      case 1:
        if (*(void *)(a1 + 8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v15 = a1 + *(int *)(type metadata accessor for CountTokensPromptTemplateRequest(0) + 20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = v15 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v17 = type metadata accessor for Locale();
        uint64_t v18 = *(void *)(v17 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
          (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
        }
        goto LABEL_48;
      case 2:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = type metadata accessor for CompletePromptRequest(0);
        uint64_t v4 = a1 + *(int *)(v3 + 24);
        uint64_t v19 = type metadata accessor for Constraints(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v4, 1, v19)) {
          goto LABEL_45;
        }
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload != 2 && EnumCaseMultiPayload != 1) {
          goto LABEL_31;
        }
        goto LABEL_44;
      case 3:
        if (*(void *)(a1 + 8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v21 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
        uint64_t v22 = a1 + v21[5];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = v22 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v24 = type metadata accessor for Locale();
        uint64_t v25 = *(void *)(v24 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + v21[8] + 8) >= 4uLL) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v12 = a1 + v21[10];
        uint64_t v26 = type metadata accessor for Constraints(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v12, 1, v26)) {
          goto LABEL_48;
        }
        int v14 = swift_getEnumCaseMultiPayload();
        if (v14 != 2 && v14 != 1) {
          goto LABEL_42;
        }
        goto LABEL_47;
      default:
        return result;
    }
  }
  type metadata accessor for StreamingRequest(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 2)
  {
    if (result == 1)
    {
      if (*(void *)(a1 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v7 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v8 = a1 + v7[5];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v8 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v10 = type metadata accessor for Locale();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + v7[8] + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = a1 + v7[10];
      uint64_t v13 = type metadata accessor for Constraints(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13)) {
        goto LABEL_48;
      }
      int v14 = swift_getEnumCaseMultiPayload();
      if (v14 != 2 && v14 != 1)
      {
LABEL_42:
        if (!v14)
        {
          uint64_t v27 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v12, v27);
        }
        goto LABEL_48;
      }
    }
    else
    {
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v4 = a1 + *(int *)(v3 + 24);
      uint64_t v5 = type metadata accessor for Constraints(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
LABEL_44:
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_31:
          if (!EnumCaseMultiPayload)
          {
            uint64_t v20 = type metadata accessor for GenerationSchema();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v4, v20);
          }
        }
      }
LABEL_45:
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + *(int *)(v3 + 32) + 8) >= 4uLL) {
        swift_bridgeObjectRelease();
      }
    }
LABEL_47:
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_49:
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InferenceRequest(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for OneShotRequest(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v30 = *(void *)(a2 + 8);
        if (v30)
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v30;
          uint64_t v31 = *(void *)(a2 + 24);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = v31;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v69 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v69;
        }
        uint64_t v165 = type metadata accessor for CountTokensPromptTemplateRequest(0);
        uint64_t v70 = *(int *)(v165 + 20);
        uint64_t v71 = (void *)(a1 + v70);
        uint64_t v72 = a2 + v70;
        uint64_t v73 = *(void *)(a2 + v70 + 8);
        *uint64_t v71 = *(void *)(a2 + v70);
        v71[1] = v73;
        v71[2] = *(void *)(a2 + v70 + 16);
        uint64_t v74 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v75 = (char *)v71 + v74;
        uint64_t v76 = (const void *)(v72 + v74);
        uint64_t v77 = type metadata accessor for Locale();
        uint64_t v78 = *(void *)(v77 - 8);
        v79 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v78 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v79(v76, 1, v77))
        {
          uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v75, v76, *(void *)(*(void *)(v80 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v78 + 16))(v75, v76, v77);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        uint64_t v95 = *(int *)(v165 + 24);
        goto LABEL_73;
      case 2u:
        uint64_t v32 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v32;
        uint64_t v33 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v33;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        uint64_t v34 = *(void *)(a2 + 64);
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)(a1 + 64) = v34;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
        *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
        uint64_t v35 = *(void *)(a2 + 120);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(void *)(a1 + 120) = v35;
        uint64_t v36 = *(void *)(a2 + 136);
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
        *(void *)(a1 + 136) = v36;
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
        uint64_t v164 = type metadata accessor for CompletePromptRequest(0);
        uint64_t v37 = *(int *)(v164 + 24);
        uint64_t v161 = (void *)(a1 + v37);
        uint64_t v38 = (void *)(a2 + v37);
        uint64_t v39 = type metadata accessor for Constraints(0);
        uint64_t v40 = *(void *)(v39 - 8);
        uint64_t v41 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v41(v38, 1, v39))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v161, v38, *(void *)(*(void *)(v42 - 8) + 64));
          uint64_t v43 = (int *)v164;
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 2)
          {
            uint64_t v142 = v38[1];
            *uint64_t v161 = *v38;
            v161[1] = v142;
            swift_bridgeObjectRetain();
            uint64_t v43 = (int *)v164;
          }
          else
          {
            uint64_t v43 = (int *)v164;
            if (EnumCaseMultiPayload == 1)
            {
              uint64_t v82 = v38[1];
              *uint64_t v161 = *v38;
              v161[1] = v82;
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v143 = type metadata accessor for GenerationSchema();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v143 - 8) + 16))(v161, v38, v143);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v161, 0, 1, v39);
        }
        *(void *)(a1 + v43[7]) = *(void *)(a2 + v43[7]);
        uint64_t v144 = v43[8];
        uint64_t v145 = a1 + v144;
        long long v146 = (_OWORD *)(a2 + v144);
        unint64_t v147 = *(void *)(a2 + v144 + 8);
        swift_bridgeObjectRetain();
        if (v147 < 4)
        {
          *(_OWORD *)uint64_t v145 = *v146;
        }
        else
        {
          *(void *)uint64_t v145 = *(void *)v146;
          *(void *)(v145 + 8) = v147;
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + v43[9]) = *(void *)(a2 + v43[9]);
        uint64_t v148 = v43[10];
        uint64_t v149 = (void *)(a1 + v148);
        uint64_t v150 = (void *)(a2 + v148);
        uint64_t v151 = v150[1];
        *uint64_t v149 = *v150;
        v149[1] = v151;
        uint64_t v152 = v150[3];
        v149[2] = v150[2];
        v149[3] = v152;
        uint64_t v153 = v150[5];
        v149[4] = v150[4];
        v149[5] = v153;
        v149[6] = v150[6];
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v44 = *(void *)(a2 + 8);
        if (v44)
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v44;
          uint64_t v45 = *(void *)(a2 + 24);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = v45;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v83 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v83;
        }
        uint64_t v166 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
        uint64_t v84 = v166[5];
        uint64_t v85 = (void *)(a1 + v84);
        uint64_t v86 = a2 + v84;
        uint64_t v87 = *(void *)(a2 + v84 + 8);
        *uint64_t v85 = *(void *)(a2 + v84);
        v85[1] = v87;
        v85[2] = *(void *)(a2 + v84 + 16);
        uint64_t v88 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v89 = (char *)v85 + v88;
        uint64_t v90 = (const void *)(v86 + v88);
        uint64_t v91 = type metadata accessor for Locale();
        uint64_t v92 = *(void *)(v91 - 8);
        uint64_t v93 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v92 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v93(v90, 1, v91))
        {
          uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v89, v90, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v92 + 16))(v89, v90, v91);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
        }
        uint64_t v96 = v166[6];
        uint64_t v97 = a1 + v96;
        uint64_t v98 = a2 + v96;
        *(void *)uint64_t v97 = *(void *)v98;
        *(unsigned char *)(v97 + 8) = *(unsigned char *)(v98 + 8);
        *(void *)(v97 + 16) = *(void *)(v98 + 16);
        *(unsigned char *)(v97 + 24) = *(unsigned char *)(v98 + 24);
        *(void *)(v97 + 32) = *(void *)(v98 + 32);
        *(unsigned char *)(v97 + 40) = *(unsigned char *)(v98 + 40);
        *(unsigned char *)(v97 + 56) = *(unsigned char *)(v98 + 56);
        *(void *)(v97 + 48) = *(void *)(v98 + 48);
        uint64_t v99 = *(void *)(v98 + 64);
        *(unsigned char *)(v97 + 72) = *(unsigned char *)(v98 + 72);
        *(void *)(v97 + 64) = v99;
        uint64_t v100 = *(void *)(v98 + 88);
        *(void *)(v97 + 80) = *(void *)(v98 + 80);
        *(void *)(v97 + 88) = v100;
        *(unsigned char *)(v97 + 96) = *(unsigned char *)(v98 + 96);
        *(void *)(v97 + 104) = *(void *)(v98 + 104);
        *(unsigned char *)(v97 + 112) = *(unsigned char *)(v98 + 112);
        *(void *)(v97 + 120) = *(void *)(v98 + 120);
        *(_WORD *)(v97 + 128) = *(_WORD *)(v98 + 128);
        *(void *)(a1 + v166[7]) = *(void *)(a2 + v166[7]);
        uint64_t v101 = v166[8];
        uint64_t v102 = a1 + v101;
        uint64_t v103 = (_OWORD *)(a2 + v101);
        unint64_t v104 = *(void *)(a2 + v101 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v104 < 4)
        {
          *(_OWORD *)uint64_t v102 = *v103;
        }
        else
        {
          *(void *)uint64_t v102 = *(void *)v103;
          *(void *)(v102 + 8) = v104;
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + v166[9]) = *(void *)(a2 + v166[9]);
        uint64_t v105 = v166[10];
        uint64_t v106 = (void *)(a1 + v105);
        uint64_t v107 = (void *)(a2 + v105);
        uint64_t v108 = type metadata accessor for Constraints(0);
        uint64_t v109 = *(void *)(v108 - 8);
        uint64_t v110 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v109 + 48);
        swift_bridgeObjectRetain();
        if (v110(v107, 1, v108))
        {
          uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v106, v107, *(void *)(*(void *)(v111 - 8) + 64));
        }
        else
        {
          int v112 = swift_getEnumCaseMultiPayload();
          if (v112 == 2 || v112 == 1)
          {
            uint64_t v113 = v107[1];
            *uint64_t v106 = *v107;
            v106[1] = v113;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v154 = type metadata accessor for GenerationSchema();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v154 - 8) + 16))(v106, v107, v154);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
        }
        uint64_t v95 = v166[11];
LABEL_73:
        unint64_t v155 = (void *)(a1 + v95);
        uint64_t v156 = (void *)(a2 + v95);
        uint64_t v157 = v156[1];
        *unint64_t v155 = *v156;
        v155[1] = v157;
        uint64_t v158 = v156[3];
        v155[2] = v156[2];
        v155[3] = v158;
        uint64_t v159 = v156[5];
        v155[4] = v156[4];
        v155[5] = v159;
        v155[6] = v156[6];
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v4;
        uint64_t v5 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v5;
        uint64_t v6 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v6;
        uint64_t v7 = *(void *)(a2 + 56);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = v7;
        uint64_t v8 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = v8;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    type metadata accessor for StreamingRequest(0);
    int v9 = swift_getEnumCaseMultiPayload();
    if (v9 == 2)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v12;
      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v13;
      uint64_t v14 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v14;
      uint64_t v16 = *(void *)(a2 + 48);
      uint64_t v15 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v16;
      *(void *)(a1 + 56) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (v9 == 1)
    {
      uint64_t v10 = *(void *)(a2 + 8);
      if (v10)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v10;
        uint64_t v11 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v46 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v46;
      }
      uint64_t v167 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v47 = v167[5];
      uint64_t v48 = (void *)(a1 + v47);
      uint64_t v49 = a2 + v47;
      uint64_t v50 = *(void *)(a2 + v47 + 8);
      *uint64_t v48 = *(void *)(a2 + v47);
      v48[1] = v50;
      v48[2] = *(void *)(a2 + v47 + 16);
      uint64_t v51 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v52 = (char *)v48 + v51;
      uint64_t v53 = (const void *)(v49 + v51);
      uint64_t v54 = type metadata accessor for Locale();
      uint64_t v55 = *(void *)(v54 - 8);
      uint64_t v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v56(v53, 1, v54))
      {
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v52, v53, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v55 + 16))(v52, v53, v54);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      }
      uint64_t v58 = v167[6];
      uint64_t v59 = a1 + v58;
      uint64_t v60 = a2 + v58;
      *(void *)uint64_t v59 = *(void *)v60;
      *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
      *(void *)(v59 + 16) = *(void *)(v60 + 16);
      *(unsigned char *)(v59 + 24) = *(unsigned char *)(v60 + 24);
      *(void *)(v59 + 32) = *(void *)(v60 + 32);
      *(unsigned char *)(v59 + 40) = *(unsigned char *)(v60 + 40);
      *(unsigned char *)(v59 + 56) = *(unsigned char *)(v60 + 56);
      *(void *)(v59 + 48) = *(void *)(v60 + 48);
      uint64_t v61 = *(void *)(v60 + 64);
      *(unsigned char *)(v59 + 72) = *(unsigned char *)(v60 + 72);
      *(void *)(v59 + 64) = v61;
      uint64_t v62 = *(void *)(v60 + 88);
      *(void *)(v59 + 80) = *(void *)(v60 + 80);
      *(void *)(v59 + 88) = v62;
      *(unsigned char *)(v59 + 96) = *(unsigned char *)(v60 + 96);
      *(void *)(v59 + 104) = *(void *)(v60 + 104);
      *(unsigned char *)(v59 + 112) = *(unsigned char *)(v60 + 112);
      *(void *)(v59 + 120) = *(void *)(v60 + 120);
      *(_WORD *)(v59 + 128) = *(_WORD *)(v60 + 128);
      *(void *)(a1 + v167[7]) = *(void *)(a2 + v167[7]);
      uint64_t v63 = v167[8];
      uint64_t v64 = a1 + v63;
      uint64_t v65 = (_OWORD *)(a2 + v63);
      unint64_t v66 = *(void *)(a2 + v63 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v66 < 4)
      {
        *(_OWORD *)uint64_t v64 = *v65;
      }
      else
      {
        *(void *)uint64_t v64 = *(void *)v65;
        *(void *)(v64 + 8) = v66;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v167[9]) = *(void *)(a2 + v167[9]);
      uint64_t v114 = v167[10];
      unint64_t v115 = (void *)(a1 + v114);
      uint64_t v116 = (void *)(a2 + v114);
      uint64_t v117 = type metadata accessor for Constraints(0);
      uint64_t v118 = *(void *)(v117 - 8);
      uint64_t v119 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v118 + 48);
      swift_bridgeObjectRetain();
      if (v119(v116, 1, v117))
      {
        uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v115, v116, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        int v121 = swift_getEnumCaseMultiPayload();
        if (v121 == 2 || v121 == 1)
        {
          uint64_t v122 = v116[1];
          *unint64_t v115 = *v116;
          v115[1] = v122;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v135 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v135 - 8) + 16))(v115, v116, v135);
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
      }
      uint64_t v136 = v167[11];
      uint64_t v137 = (void *)(a1 + v136);
      uint64_t v138 = (void *)(a2 + v136);
      uint64_t v139 = v138[1];
      void *v137 = *v138;
      v137[1] = v139;
      uint64_t v140 = v138[3];
      v137[2] = v138[2];
      v137[3] = v140;
      uint64_t v141 = v138[5];
      v137[4] = v138[4];
      v137[5] = v141;
      v137[6] = v138[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v17 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v17;
      uint64_t v18 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v18;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v19 = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 64) = v19;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      uint64_t v20 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v20;
      uint64_t v21 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v21;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
      uint64_t v22 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v23 = *(int *)(v22 + 24);
      __dst = (void *)(a1 + v23);
      uint64_t v163 = (int *)v22;
      uint64_t v24 = (void *)(a2 + v23);
      uint64_t v25 = type metadata accessor for Constraints(0);
      uint64_t v26 = *(void *)(v25 - 8);
      uint64_t v27 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27(v24, 1, v25))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(__dst, v24, *(void *)(*(void *)(v28 - 8) + 64));
        uint64_t v29 = v163;
      }
      else
      {
        int v67 = swift_getEnumCaseMultiPayload();
        if (v67 == 2)
        {
          uint64_t v123 = v24[1];
          void *__dst = *v24;
          __dst[1] = v123;
          swift_bridgeObjectRetain();
          uint64_t v29 = v163;
        }
        else
        {
          uint64_t v29 = v163;
          if (v67 == 1)
          {
            uint64_t v68 = v24[1];
            void *__dst = *v24;
            __dst[1] = v68;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v124 = type metadata accessor for GenerationSchema();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v124 - 8) + 16))(__dst, v24, v124);
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
      }
      *(void *)(a1 + v29[7]) = *(void *)(a2 + v29[7]);
      uint64_t v125 = v29[8];
      uint64_t v126 = a1 + v125;
      uint64_t v127 = (_OWORD *)(a2 + v125);
      unint64_t v128 = *(void *)(a2 + v125 + 8);
      swift_bridgeObjectRetain();
      if (v128 < 4)
      {
        *(_OWORD *)uint64_t v126 = *v127;
      }
      else
      {
        *(void *)uint64_t v126 = *(void *)v127;
        *(void *)(v126 + 8) = v128;
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v29[9]) = *(void *)(a2 + v29[9]);
      uint64_t v129 = v29[10];
      uint64_t v130 = (void *)(a1 + v129);
      uint64_t v131 = (void *)(a2 + v129);
      uint64_t v132 = v131[1];
      void *v130 = *v131;
      v130[1] = v132;
      uint64_t v133 = v131[3];
      v130[2] = v131[2];
      v130[3] = v133;
      uint64_t v134 = v131[5];
      v130[4] = v131[4];
      v130[5] = v134;
      v130[6] = v131[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for InferenceRequest(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of InferenceRequest(a1, type metadata accessor for InferenceRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for OneShotRequest(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          if (*(void *)(a2 + 8))
          {
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v64 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v64;
          }
          __dstb = (int *)type metadata accessor for CountTokensPromptTemplateRequest(0);
          uint64_t v65 = __dstb[5];
          unint64_t v66 = (void *)(a1 + v65);
          uint64_t v67 = a2 + v65;
          *unint64_t v66 = *(void *)(a2 + v65);
          v66[1] = *(void *)(a2 + v65 + 8);
          v66[2] = *(void *)(a2 + v65 + 16);
          uint64_t v68 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
          long long v69 = (char *)v66 + v68;
          uint64_t v70 = (const void *)(v67 + v68);
          uint64_t v71 = type metadata accessor for Locale();
          uint64_t v72 = *(void *)(v71 - 8);
          uint64_t v73 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v72 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v73(v70, 1, v71))
          {
            uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
            memcpy(v69, v70, *(void *)(*(void *)(v74 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v72 + 16))(v69, v70, v71);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
          }
          uint64_t v87 = __dstb[6];
          goto LABEL_74;
        case 2u:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          uint64_t v21 = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
          *(void *)(a1 + 32) = v21;
          uint64_t v22 = *(void *)(a2 + 48);
          *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
          *(void *)(a1 + 48) = v22;
          uint64_t v23 = *(void *)(a2 + 64);
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
          *(void *)(a1 + 64) = v23;
          uint64_t v24 = *(void *)(a2 + 80);
          *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
          *(void *)(a1 + 80) = v24;
          uint64_t v25 = *(void *)(a2 + 96);
          *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
          *(void *)(a1 + 96) = v25;
          *(void *)(a1 + 112) = *(void *)(a2 + 112);
          uint64_t v26 = *(void *)(a2 + 120);
          *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
          *(void *)(a1 + 120) = v26;
          uint64_t v27 = *(void *)(a2 + 136);
          *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
          *(void *)(a1 + 136) = v27;
          uint64_t v28 = *(void *)(a2 + 152);
          *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
          *(void *)(a1 + 152) = v28;
          *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
          __dsta = (int *)type metadata accessor for CompletePromptRequest(0);
          uint64_t v29 = __dsta[6];
          uint64_t v143 = (void *)(a1 + v29);
          uint64_t v30 = (void *)(a2 + v29);
          uint64_t v31 = type metadata accessor for Constraints(0);
          uint64_t v32 = *(void *)(v31 - 8);
          uint64_t v33 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v33(v30, 1, v31))
          {
            uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
            memcpy(v143, v30, *(void *)(*(void *)(v34 - 8) + 64));
            uint64_t v35 = __dsta;
          }
          else
          {
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload == 2)
            {
              *uint64_t v143 = *v30;
              v143[1] = v30[1];
              swift_bridgeObjectRetain();
              uint64_t v35 = __dsta;
            }
            else
            {
              uint64_t v35 = __dsta;
              if (EnumCaseMultiPayload == 1)
              {
                *uint64_t v143 = *v30;
                v143[1] = v30[1];
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v131 = type metadata accessor for GenerationSchema();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v131 - 8) + 16))(v143, v30, v131);
              }
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v143, 0, 1, v31);
          }
          *(void *)(a1 + v35[7]) = *(void *)(a2 + v35[7]);
          uint64_t v132 = v35[8];
          uint64_t v133 = a1 + v132;
          uint64_t v134 = a2 + v132;
          unint64_t v135 = *(void *)(a2 + v132 + 8);
          swift_bridgeObjectRetain();
          if (v135 < 4)
          {
            *(_OWORD *)uint64_t v133 = *(_OWORD *)v134;
          }
          else
          {
            *(void *)uint64_t v133 = *(void *)v134;
            *(void *)(v133 + 8) = *(void *)(v134 + 8);
            swift_bridgeObjectRetain();
          }
          *(void *)(a1 + v35[9]) = *(void *)(a2 + v35[9]);
          uint64_t v136 = v35[10];
          uint64_t v137 = (void *)(a1 + v136);
          uint64_t v138 = (void *)(a2 + v136);
          void *v137 = *v138;
          v137[1] = v138[1];
          v137[2] = v138[2];
          v137[3] = v138[3];
          v137[4] = v138[4];
          v137[5] = v138[5];
          v137[6] = v138[6];
          swift_bridgeObjectRetain();
          break;
        case 3u:
          if (*(void *)(a2 + 8))
          {
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v76 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v76;
          }
          __dstc = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
          uint64_t v77 = __dstc[5];
          uint64_t v78 = (void *)(a1 + v77);
          uint64_t v79 = a2 + v77;
          void *v78 = *(void *)(a2 + v77);
          v78[1] = *(void *)(a2 + v77 + 8);
          v78[2] = *(void *)(a2 + v77 + 16);
          uint64_t v80 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
          uint64_t v81 = (char *)v78 + v80;
          uint64_t v82 = (const void *)(v79 + v80);
          uint64_t v83 = type metadata accessor for Locale();
          uint64_t v84 = *(void *)(v83 - 8);
          uint64_t v85 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v84 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v85(v82, 1, v83))
          {
            uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
            memcpy(v81, v82, *(void *)(*(void *)(v86 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v84 + 16))(v81, v82, v83);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
          }
          uint64_t v88 = __dstc[6];
          uint64_t v89 = a1 + v88;
          uint64_t v90 = (uint64_t *)(a2 + v88);
          uint64_t v91 = *v90;
          *(unsigned char *)(v89 + 8) = *((unsigned char *)v90 + 8);
          *(void *)uint64_t v89 = v91;
          uint64_t v92 = v90[2];
          *(unsigned char *)(v89 + 24) = *((unsigned char *)v90 + 24);
          *(void *)(v89 + 16) = v92;
          uint64_t v93 = v90[4];
          *(unsigned char *)(v89 + 40) = *((unsigned char *)v90 + 40);
          *(void *)(v89 + 32) = v93;
          uint64_t v94 = v90[6];
          *(unsigned char *)(v89 + 56) = *((unsigned char *)v90 + 56);
          *(void *)(v89 + 48) = v94;
          uint64_t v95 = v90[8];
          *(unsigned char *)(v89 + 72) = *((unsigned char *)v90 + 72);
          *(void *)(v89 + 64) = v95;
          *(void *)(v89 + 80) = v90[10];
          uint64_t v96 = v90[11];
          *(unsigned char *)(v89 + 96) = *((unsigned char *)v90 + 96);
          *(void *)(v89 + 88) = v96;
          uint64_t v97 = v90[13];
          *(unsigned char *)(v89 + 112) = *((unsigned char *)v90 + 112);
          *(void *)(v89 + 104) = v97;
          uint64_t v98 = v90[15];
          *(unsigned char *)(v89 + 128) = *((unsigned char *)v90 + 128);
          *(void *)(v89 + 120) = v98;
          *(unsigned char *)(v89 + 129) = *((unsigned char *)v90 + 129);
          *(void *)(a1 + __dstc[7]) = *(void *)(a2 + __dstc[7]);
          uint64_t v99 = __dstc[8];
          uint64_t v100 = a1 + v99;
          uint64_t v101 = a2 + v99;
          unint64_t v102 = *(void *)(a2 + v99 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v102 < 4)
          {
            *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
          }
          else
          {
            *(void *)uint64_t v100 = *(void *)v101;
            *(void *)(v100 + 8) = *(void *)(v101 + 8);
            swift_bridgeObjectRetain();
          }
          *(void *)(a1 + __dstc[9]) = *(void *)(a2 + __dstc[9]);
          uint64_t v103 = __dstc[10];
          unint64_t v104 = (void *)(a1 + v103);
          uint64_t v105 = (void *)(a2 + v103);
          uint64_t v106 = type metadata accessor for Constraints(0);
          uint64_t v107 = *(void *)(v106 - 8);
          uint64_t v108 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v107 + 48);
          swift_bridgeObjectRetain();
          if (v108(v105, 1, v106))
          {
            uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
            memcpy(v104, v105, *(void *)(*(void *)(v109 - 8) + 64));
          }
          else
          {
            int v110 = swift_getEnumCaseMultiPayload();
            if (v110 == 2 || v110 == 1)
            {
              void *v104 = *v105;
              v104[1] = v105[1];
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v139 = type metadata accessor for GenerationSchema();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v139 - 8) + 16))(v104, v105, v139);
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
          }
          uint64_t v87 = __dstc[11];
LABEL_74:
          uint64_t v140 = (void *)(a1 + v87);
          uint64_t v141 = (void *)(a2 + v87);
          *uint64_t v140 = *v141;
          v140[1] = v141[1];
          v140[2] = v141[2];
          v140[3] = v141[3];
          v140[4] = v141[4];
          v140[5] = v141[5];
          v140[6] = v141[6];
          break;
        default:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(void *)(a1 + 72) = *(void *)(a2 + 72);
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      goto LABEL_76;
    }
    type metadata accessor for StreamingRequest(0);
    int v4 = swift_getEnumCaseMultiPayload();
    if (v4 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v4 == 1)
      {
        if (*(void *)(a2 + 8))
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v36 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v36;
        }
        uint64_t v149 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
        uint64_t v37 = v149[5];
        uint64_t v38 = (void *)(a1 + v37);
        uint64_t v39 = a2 + v37;
        *uint64_t v38 = *(void *)(a2 + v37);
        v38[1] = *(void *)(a2 + v37 + 8);
        v38[2] = *(void *)(a2 + v37 + 16);
        uint64_t v40 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
        uint64_t v41 = (char *)v38 + v40;
        uint64_t v42 = (const void *)(v39 + v40);
        uint64_t v43 = type metadata accessor for Locale();
        uint64_t v44 = *(void *)(v43 - 8);
        uint64_t v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v45(v42, 1, v43))
        {
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
          memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
        uint64_t v47 = v149[6];
        uint64_t v48 = a1 + v47;
        uint64_t v49 = (uint64_t *)(a2 + v47);
        uint64_t v50 = *v49;
        *(unsigned char *)(v48 + 8) = *((unsigned char *)v49 + 8);
        *(void *)uint64_t v48 = v50;
        uint64_t v51 = v49[2];
        *(unsigned char *)(v48 + 24) = *((unsigned char *)v49 + 24);
        *(void *)(v48 + 16) = v51;
        uint64_t v52 = v49[4];
        *(unsigned char *)(v48 + 40) = *((unsigned char *)v49 + 40);
        *(void *)(v48 + 32) = v52;
        uint64_t v53 = v49[6];
        *(unsigned char *)(v48 + 56) = *((unsigned char *)v49 + 56);
        *(void *)(v48 + 48) = v53;
        uint64_t v54 = v49[8];
        *(unsigned char *)(v48 + 72) = *((unsigned char *)v49 + 72);
        *(void *)(v48 + 64) = v54;
        *(void *)(v48 + 80) = v49[10];
        uint64_t v55 = v49[11];
        *(unsigned char *)(v48 + 96) = *((unsigned char *)v49 + 96);
        *(void *)(v48 + 88) = v55;
        uint64_t v56 = v49[13];
        *(unsigned char *)(v48 + 112) = *((unsigned char *)v49 + 112);
        *(void *)(v48 + 104) = v56;
        uint64_t v57 = v49[15];
        *(unsigned char *)(v48 + 128) = *((unsigned char *)v49 + 128);
        *(void *)(v48 + 120) = v57;
        *(unsigned char *)(v48 + 129) = *((unsigned char *)v49 + 129);
        *(void *)(a1 + v149[7]) = *(void *)(a2 + v149[7]);
        uint64_t v58 = v149[8];
        uint64_t v59 = a1 + v58;
        uint64_t v60 = a2 + v58;
        unint64_t v61 = *(void *)(a2 + v58 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v61 < 4)
        {
          *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
        }
        else
        {
          *(void *)uint64_t v59 = *(void *)v60;
          *(void *)(v59 + 8) = *(void *)(v60 + 8);
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + v149[9]) = *(void *)(a2 + v149[9]);
        uint64_t v111 = v149[10];
        int v112 = (void *)(a1 + v111);
        uint64_t v113 = (void *)(a2 + v111);
        uint64_t v114 = type metadata accessor for Constraints(0);
        uint64_t v115 = *(void *)(v114 - 8);
        uint64_t v116 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v115 + 48);
        swift_bridgeObjectRetain();
        if (v116(v113, 1, v114))
        {
          uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v112, v113, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          int v118 = swift_getEnumCaseMultiPayload();
          if (v118 == 2 || v118 == 1)
          {
            *int v112 = *v113;
            v112[1] = v113[1];
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v127 = type metadata accessor for GenerationSchema();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v127 - 8) + 16))(v112, v113, v127);
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
        }
        uint64_t v128 = v149[11];
        uint64_t v129 = (void *)(a1 + v128);
        uint64_t v130 = (void *)(a2 + v128);
        void *v129 = *v130;
        v129[1] = v130[1];
        v129[2] = v130[2];
        v129[3] = v130[3];
        v129[4] = v130[4];
        v129[5] = v130[5];
        v129[6] = v130[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        goto LABEL_76;
      }
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v5 = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      uint64_t v6 = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 48) = v6;
      uint64_t v7 = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 64) = v7;
      uint64_t v8 = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 80) = v8;
      uint64_t v9 = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a1 + 96) = v9;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      uint64_t v10 = *(void *)(a2 + 120);
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 120) = v10;
      uint64_t v11 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v11;
      uint64_t v12 = *(void *)(a2 + 152);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(void *)(a1 + 152) = v12;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      uint64_t v13 = type metadata accessor for CompletePromptRequest(0);
      uint64_t v14 = *(int *)(v13 + 24);
      uint64_t v144 = (int *)v13;
      __dst = (void *)(a1 + v14);
      uint64_t v15 = (void *)(a2 + v14);
      uint64_t v16 = type metadata accessor for Constraints(0);
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18(v15, 1, v16))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
        uint64_t v20 = v144;
      }
      else
      {
        uint64_t v62 = v17;
        int v63 = swift_getEnumCaseMultiPayload();
        if (v63 == 2 || v63 == 1)
        {
          void *__dst = *v15;
          __dst[1] = v15[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v119 = type metadata accessor for GenerationSchema();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v119 - 8) + 16))(__dst, v15, v119);
        }
        uint64_t v20 = v144;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(__dst, 0, 1, v16);
      }
      *(void *)(a1 + v20[7]) = *(void *)(a2 + v20[7]);
      uint64_t v120 = v20[8];
      uint64_t v121 = a1 + v120;
      uint64_t v122 = a2 + v120;
      unint64_t v123 = *(void *)(a2 + v120 + 8);
      swift_bridgeObjectRetain();
      if (v123 < 4)
      {
        *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
      }
      else
      {
        *(void *)uint64_t v121 = *(void *)v122;
        *(void *)(v121 + 8) = *(void *)(v122 + 8);
        swift_bridgeObjectRetain();
      }
      *(void *)(a1 + v20[9]) = *(void *)(a2 + v20[9]);
      uint64_t v124 = v20[10];
      uint64_t v125 = (void *)(a1 + v124);
      uint64_t v126 = (void *)(a2 + v124);
      void *v125 = *v126;
      v125[1] = v126[1];
      v125[2] = v126[2];
      v125[3] = v126[3];
      v125[4] = v126[4];
      v125[5] = v126[5];
      v125[6] = v126[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
LABEL_76:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for InferenceRequest(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for InferenceRequest);
}

uint64_t type metadata accessor for InferenceRequestInstrumentation(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_OWORD *initializeWithTake for InferenceRequest(_OWORD *a1, _OWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v4 = type metadata accessor for StreamingRequest(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 1)
    {
      if (EnumCaseMultiPayload)
      {
LABEL_13:
        memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
        goto LABEL_43;
      }
      long long v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      long long v19 = a2[9];
      a1[8] = a2[8];
      a1[9] = v19;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      long long v20 = a2[5];
      a1[4] = a2[4];
      a1[5] = v20;
      long long v21 = a2[7];
      a1[6] = a2[6];
      a1[7] = v21;
      long long v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      uint64_t v23 = (int *)type metadata accessor for CompletePromptRequest(0);
      uint64_t v24 = v23[6];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for Constraints(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
        goto LABEL_17;
      }
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_31:
        memcpy(v25, v26, *(void *)(v28 + 64));
LABEL_37:
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        goto LABEL_38;
      }
LABEL_36:
      uint64_t v82 = type metadata accessor for GenerationSchema();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(v25, v26, v82);
      swift_storeEnumTagMultiPayload();
      goto LABEL_37;
    }
    long long v29 = a2[1];
    *a1 = *a2;
    a1[1] = v29;
    uint64_t v30 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    uint64_t v31 = v30[5];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    *(_OWORD *)uint64_t v32 = *(_OWORD *)((char *)a2 + v31);
    *((void *)v32 + 2) = *(void *)((char *)a2 + v31 + 16);
    uint64_t v34 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    uint64_t v35 = &v32[v34];
    long long v36 = &v33[v34];
    uint64_t v37 = type metadata accessor for Locale();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v57 = v30[6];
    uint64_t v58 = (char *)a1 + v57;
    uint64_t v59 = (char *)a2 + v57;
    long long v60 = *((_OWORD *)v59 + 3);
    *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
    *((_OWORD *)v58 + 3) = v60;
    *((_WORD *)v58 + 64) = *((_WORD *)v59 + 64);
    long long v61 = *((_OWORD *)v59 + 7);
    *((_OWORD *)v58 + 6) = *((_OWORD *)v59 + 6);
    *((_OWORD *)v58 + 7) = v61;
    long long v62 = *((_OWORD *)v59 + 5);
    *((_OWORD *)v58 + 4) = *((_OWORD *)v59 + 4);
    *((_OWORD *)v58 + 5) = v62;
    long long v63 = *((_OWORD *)v59 + 1);
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    *((_OWORD *)v58 + 1) = v63;
    *(void *)((char *)a1 + v30[7]) = *(void *)((char *)a2 + v30[7]);
    *(_OWORD *)((char *)a1 + v30[8]) = *(_OWORD *)((char *)a2 + v30[8]);
    *(void *)((char *)a1 + v30[9]) = *(void *)((char *)a2 + v30[9]);
    uint64_t v64 = v30[10];
    uint64_t v65 = (char *)a1 + v64;
    unint64_t v66 = (char *)a2 + v64;
    uint64_t v67 = type metadata accessor for Constraints(0);
    uint64_t v68 = *(void *)(v67 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67)) {
      goto LABEL_29;
    }
    if (swift_getEnumCaseMultiPayload())
    {
LABEL_33:
      memcpy(v65, v66, *(void *)(v68 + 64));
LABEL_40:
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
      goto LABEL_41;
    }
LABEL_39:
    uint64_t v87 = type metadata accessor for GenerationSchema();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32))(v65, v66, v87);
    swift_storeEnumTagMultiPayload();
    goto LABEL_40;
  }
  uint64_t v4 = type metadata accessor for OneShotRequest(0);
  int v5 = swift_getEnumCaseMultiPayload();
  if (v5 == 3)
  {
    long long v40 = a2[1];
    *a1 = *a2;
    a1[1] = v40;
    uint64_t v30 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    uint64_t v41 = v30[5];
    uint64_t v42 = (char *)a1 + v41;
    uint64_t v43 = (char *)a2 + v41;
    *(_OWORD *)uint64_t v42 = *(_OWORD *)((char *)a2 + v41);
    *((void *)v42 + 2) = *(void *)((char *)a2 + v41 + 16);
    uint64_t v44 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    uint64_t v45 = &v42[v44];
    uint64_t v46 = &v43[v44];
    uint64_t v47 = type metadata accessor for Locale();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    uint64_t v73 = v30[6];
    uint64_t v74 = (char *)a1 + v73;
    uint64_t v75 = (char *)a2 + v73;
    long long v76 = *((_OWORD *)v75 + 3);
    *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
    *((_OWORD *)v74 + 3) = v76;
    *((_WORD *)v74 + 64) = *((_WORD *)v75 + 64);
    long long v77 = *((_OWORD *)v75 + 7);
    *((_OWORD *)v74 + 6) = *((_OWORD *)v75 + 6);
    *((_OWORD *)v74 + 7) = v77;
    long long v78 = *((_OWORD *)v75 + 5);
    *((_OWORD *)v74 + 4) = *((_OWORD *)v75 + 4);
    *((_OWORD *)v74 + 5) = v78;
    long long v79 = *((_OWORD *)v75 + 1);
    *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    *((_OWORD *)v74 + 1) = v79;
    *(void *)((char *)a1 + v30[7]) = *(void *)((char *)a2 + v30[7]);
    *(_OWORD *)((char *)a1 + v30[8]) = *(_OWORD *)((char *)a2 + v30[8]);
    *(void *)((char *)a1 + v30[9]) = *(void *)((char *)a2 + v30[9]);
    uint64_t v80 = v30[10];
    uint64_t v65 = (char *)a1 + v80;
    unint64_t v66 = (char *)a2 + v80;
    uint64_t v67 = type metadata accessor for Constraints(0);
    uint64_t v68 = *(void *)(v67 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
    {
LABEL_29:
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v65, v66, *(void *)(*(void *)(v81 - 8) + 64));
LABEL_41:
      uint64_t v88 = v30[11];
      uint64_t v89 = (char *)a1 + v88;
      uint64_t v90 = (char *)a2 + v88;
      long long v91 = *((_OWORD *)v90 + 1);
      *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
      *((_OWORD *)v89 + 1) = v91;
      *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
      *((void *)v89 + 6) = *((void *)v90 + 6);
      goto LABEL_42;
    }
    if (swift_getEnumCaseMultiPayload()) {
      goto LABEL_33;
    }
    goto LABEL_39;
  }
  if (v5 == 2)
  {
    long long v50 = a2[1];
    *a1 = *a2;
    a1[1] = v50;
    long long v51 = a2[9];
    a1[8] = a2[8];
    a1[9] = v51;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    long long v52 = a2[5];
    a1[4] = a2[4];
    a1[5] = v52;
    long long v53 = a2[7];
    a1[6] = a2[6];
    a1[7] = v53;
    long long v54 = a2[3];
    a1[2] = a2[2];
    a1[3] = v54;
    uint64_t v23 = (int *)type metadata accessor for CompletePromptRequest(0);
    uint64_t v55 = v23[6];
    uint64_t v25 = (char *)a1 + v55;
    uint64_t v26 = (char *)a2 + v55;
    uint64_t v27 = type metadata accessor for Constraints(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
LABEL_17:
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v25, v26, *(void *)(*(void *)(v56 - 8) + 64));
LABEL_38:
      *(void *)((char *)a1 + v23[7]) = *(void *)((char *)a2 + v23[7]);
      *(_OWORD *)((char *)a1 + v23[8]) = *(_OWORD *)((char *)a2 + v23[8]);
      *(void *)((char *)a1 + v23[9]) = *(void *)((char *)a2 + v23[9]);
      uint64_t v83 = v23[10];
      uint64_t v84 = (char *)a1 + v83;
      uint64_t v85 = (char *)a2 + v83;
      long long v86 = *((_OWORD *)v85 + 1);
      *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
      *((_OWORD *)v84 + 1) = v86;
      *((_OWORD *)v84 + 2) = *((_OWORD *)v85 + 2);
      *((void *)v84 + 6) = *((void *)v85 + 6);
LABEL_42:
      swift_storeEnumTagMultiPayload();
      goto LABEL_43;
    }
    if (swift_getEnumCaseMultiPayload()) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  if (v5 != 1) {
    goto LABEL_13;
  }
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)((char *)a2 + v8);
  *((void *)v9 + 2) = *(void *)((char *)a2 + v8 + 16);
  uint64_t v11 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  uint64_t v12 = &v9[v11];
  uint64_t v13 = &v10[v11];
  uint64_t v14 = type metadata accessor for Locale();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v69 = *(int *)(v7 + 24);
  uint64_t v70 = (char *)a1 + v69;
  uint64_t v71 = (char *)a2 + v69;
  long long v72 = *((_OWORD *)v71 + 1);
  *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
  *((_OWORD *)v70 + 1) = v72;
  *((_OWORD *)v70 + 2) = *((_OWORD *)v71 + 2);
  *((void *)v70 + 6) = *((void *)v71 + 6);
  swift_storeEnumTagMultiPayload();
LABEL_43:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for InferenceRequest(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of InferenceRequest(a1, type metadata accessor for InferenceRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for OneShotRequest(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload != 2)
        {
          if (EnumCaseMultiPayload == 1)
          {
            long long v6 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v6;
            uint64_t v7 = type metadata accessor for CountTokensPromptTemplateRequest(0);
            uint64_t v8 = *(int *)(v7 + 20);
            uint64_t v9 = a1 + v8;
            uint64_t v10 = a2 + v8;
            *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + v8);
            *(void *)(v9 + 16) = *(void *)(a2 + v8 + 16);
            uint64_t v11 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
            uint64_t v12 = (void *)(v9 + v11);
            uint64_t v13 = (const void *)(v10 + v11);
            uint64_t v14 = type metadata accessor for Locale();
            uint64_t v15 = *(void *)(v14 - 8);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
            {
              uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
              memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
            }
            uint64_t v69 = *(int *)(v7 + 24);
            uint64_t v70 = a1 + v69;
            uint64_t v71 = a2 + v69;
            long long v72 = *(_OWORD *)(v71 + 16);
            *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
            *(_OWORD *)(v70 + 16) = v72;
            *(_OWORD *)(v70 + 32) = *(_OWORD *)(v71 + 32);
            *(void *)(v70 + 48) = *(void *)(v71 + 48);
            swift_storeEnumTagMultiPayload();
            goto LABEL_44;
          }
          goto LABEL_14;
        }
        long long v50 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v50;
        long long v51 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v51;
        *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
        long long v52 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v52;
        long long v53 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v53;
        long long v54 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v54;
        uint64_t v23 = (int *)type metadata accessor for CompletePromptRequest(0);
        uint64_t v55 = v23[6];
        uint64_t v25 = (void *)(a1 + v55);
        uint64_t v26 = (const void *)(a2 + v55);
        uint64_t v27 = type metadata accessor for Constraints(0);
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
LABEL_18:
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          memcpy(v25, v26, *(void *)(*(void *)(v56 - 8) + 64));
LABEL_39:
          *(void *)(a1 + v23[7]) = *(void *)(a2 + v23[7]);
          *(_OWORD *)(a1 + v23[8]) = *(_OWORD *)(a2 + v23[8]);
          *(void *)(a1 + v23[9]) = *(void *)(a2 + v23[9]);
          uint64_t v83 = v23[10];
          uint64_t v84 = a1 + v83;
          uint64_t v85 = a2 + v83;
          long long v86 = *(_OWORD *)(v85 + 16);
          *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
          *(_OWORD *)(v84 + 16) = v86;
          *(_OWORD *)(v84 + 32) = *(_OWORD *)(v85 + 32);
          *(void *)(v84 + 48) = *(void *)(v85 + 48);
LABEL_43:
          swift_storeEnumTagMultiPayload();
          goto LABEL_44;
        }
        if (swift_getEnumCaseMultiPayload()) {
          goto LABEL_32;
        }
        goto LABEL_37;
      }
      long long v40 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v40;
      uint64_t v30 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v41 = v30[5];
      uint64_t v42 = a1 + v41;
      uint64_t v43 = a2 + v41;
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(a2 + v41);
      *(void *)(v42 + 16) = *(void *)(a2 + v41 + 16);
      uint64_t v44 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v45 = (void *)(v42 + v44);
      uint64_t v46 = (const void *)(v43 + v44);
      uint64_t v47 = type metadata accessor for Locale();
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v48 + 32))(v45, v46, v47);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      uint64_t v73 = v30[6];
      uint64_t v74 = a1 + v73;
      uint64_t v75 = a2 + v73;
      long long v76 = *(_OWORD *)(v75 + 48);
      *(_OWORD *)(v74 + 32) = *(_OWORD *)(v75 + 32);
      *(_OWORD *)(v74 + 48) = v76;
      *(_WORD *)(v74 + 128) = *(_WORD *)(v75 + 128);
      long long v77 = *(_OWORD *)(v75 + 112);
      *(_OWORD *)(v74 + 96) = *(_OWORD *)(v75 + 96);
      *(_OWORD *)(v74 + 112) = v77;
      long long v78 = *(_OWORD *)(v75 + 80);
      *(_OWORD *)(v74 + 64) = *(_OWORD *)(v75 + 64);
      *(_OWORD *)(v74 + 80) = v78;
      long long v79 = *(_OWORD *)(v75 + 16);
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      *(_OWORD *)(v74 + 16) = v79;
      *(void *)(a1 + v30[7]) = *(void *)(a2 + v30[7]);
      *(_OWORD *)(a1 + v30[8]) = *(_OWORD *)(a2 + v30[8]);
      *(void *)(a1 + v30[9]) = *(void *)(a2 + v30[9]);
      uint64_t v80 = v30[10];
      uint64_t v65 = (void *)(a1 + v80);
      unint64_t v66 = (const void *)(a2 + v80);
      uint64_t v67 = type metadata accessor for Constraints(0);
      uint64_t v68 = *(void *)(v67 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
      {
LABEL_30:
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v65, v66, *(void *)(*(void *)(v81 - 8) + 64));
LABEL_42:
        uint64_t v88 = v30[11];
        uint64_t v89 = a1 + v88;
        uint64_t v90 = a2 + v88;
        long long v91 = *(_OWORD *)(v90 + 16);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        *(_OWORD *)(v89 + 16) = v91;
        *(_OWORD *)(v89 + 32) = *(_OWORD *)(v90 + 32);
        *(void *)(v89 + 48) = *(void *)(v90 + 48);
        goto LABEL_43;
      }
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v4 = type metadata accessor for StreamingRequest(0);
      int v17 = swift_getEnumCaseMultiPayload();
      if (v17 != 1)
      {
        if (v17)
        {
LABEL_14:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v4 - 8) + 64));
LABEL_44:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
        long long v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v18;
        long long v19 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v19;
        *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
        long long v20 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v20;
        long long v21 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v21;
        long long v22 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v22;
        uint64_t v23 = (int *)type metadata accessor for CompletePromptRequest(0);
        uint64_t v24 = v23[6];
        uint64_t v25 = (void *)(a1 + v24);
        uint64_t v26 = (const void *)(a2 + v24);
        uint64_t v27 = type metadata accessor for Constraints(0);
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
          goto LABEL_18;
        }
        if (swift_getEnumCaseMultiPayload())
        {
LABEL_32:
          memcpy(v25, v26, *(void *)(v28 + 64));
LABEL_38:
          (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
          goto LABEL_39;
        }
LABEL_37:
        uint64_t v82 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v82 - 8) + 32))(v25, v26, v82);
        swift_storeEnumTagMultiPayload();
        goto LABEL_38;
      }
      long long v29 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v29;
      uint64_t v30 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      uint64_t v31 = v30[5];
      uint64_t v32 = a1 + v31;
      uint64_t v33 = a2 + v31;
      *(_OWORD *)uint64_t v32 = *(_OWORD *)(a2 + v31);
      *(void *)(v32 + 16) = *(void *)(a2 + v31 + 16);
      uint64_t v34 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      uint64_t v35 = (void *)(v32 + v34);
      long long v36 = (const void *)(v33 + v34);
      uint64_t v37 = type metadata accessor for Locale();
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v38 + 32))(v35, v36, v37);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      uint64_t v57 = v30[6];
      uint64_t v58 = a1 + v57;
      uint64_t v59 = a2 + v57;
      long long v60 = *(_OWORD *)(v59 + 48);
      *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
      *(_OWORD *)(v58 + 48) = v60;
      *(_WORD *)(v58 + 128) = *(_WORD *)(v59 + 128);
      long long v61 = *(_OWORD *)(v59 + 112);
      *(_OWORD *)(v58 + 96) = *(_OWORD *)(v59 + 96);
      *(_OWORD *)(v58 + 112) = v61;
      long long v62 = *(_OWORD *)(v59 + 80);
      *(_OWORD *)(v58 + 64) = *(_OWORD *)(v59 + 64);
      *(_OWORD *)(v58 + 80) = v62;
      long long v63 = *(_OWORD *)(v59 + 16);
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
      *(_OWORD *)(v58 + 16) = v63;
      *(void *)(a1 + v30[7]) = *(void *)(a2 + v30[7]);
      *(_OWORD *)(a1 + v30[8]) = *(_OWORD *)(a2 + v30[8]);
      *(void *)(a1 + v30[9]) = *(void *)(a2 + v30[9]);
      uint64_t v64 = v30[10];
      uint64_t v65 = (void *)(a1 + v64);
      unint64_t v66 = (const void *)(a2 + v64);
      uint64_t v67 = type metadata accessor for Constraints(0);
      uint64_t v68 = *(void *)(v67 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67)) {
        goto LABEL_30;
      }
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_34:
        memcpy(v65, v66, *(void *)(v68 + 64));
LABEL_41:
        (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        goto LABEL_42;
      }
    }
    uint64_t v87 = type metadata accessor for GenerationSchema();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v87 - 8) + 32))(v65, v66, v87);
    swift_storeEnumTagMultiPayload();
    goto LABEL_41;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for InferenceRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for InferenceRequest()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for InferenceRequest()
{
  uint64_t result = type metadata accessor for StreamingRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OneShotRequest(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in InstrumentedStream<A>()
{
  return swift_getWitnessTable();
}

uint64_t closure #1 in Error.telemetryValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  uint64_t v35 = 0x636E657265666E49;
  uint64_t v36 = 0xEF2E726F72724565;
  v10._countAndFlagsBits = InferenceError.caseName.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  uint64_t result = GenerativeFunctionsInstrumentationError.GenericError.domain.setter();
  uint64_t v14 = HIBYTE(a6) & 0xF;
  uint64_t v15 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v16 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v16 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16)
  {
    uint64_t v30 = 0;
    char v29 = 1;
    return MEMORY[0x2611FFDC0](v30, v29 & 1);
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(a5, a6, 10);
    LOBYTE(a5) = v34;
    swift_bridgeObjectRelease();
LABEL_44:
    char v29 = a5 & 1;
    if (a5) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v18;
    }
    return MEMORY[0x2611FFDC0](v30, v29 & 1);
  }
  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0) {
      int v17 = (unsigned __int8 *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      int v17 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v18 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v17, v15, 10);
    LOBYTE(a5) = v19 & 1;
    goto LABEL_44;
  }
  uint64_t v35 = a5;
  uint64_t v36 = a6 & 0xFFFFFFFFFFFFFFLL;
  if (a5 == 43)
  {
    if (!v14) {
      goto LABEL_58;
    }
    if (v14 == 1 || (BYTE1(a5) - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v18 = (BYTE1(a5) - 48);
    if (v14 != 2)
    {
      if ((BYTE2(a5) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v18 = 10 * (BYTE1(a5) - 48) + (BYTE2(a5) - 48);
      uint64_t v20 = v14 - 3;
      if (v20)
      {
        long long v21 = (unsigned __int8 *)&v35 + 3;
        while (1)
        {
          unsigned int v22 = *v21 - 48;
          if (v22 > 9) {
            goto LABEL_31;
          }
          uint64_t v23 = 10 * v18;
          if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
            goto LABEL_31;
          }
          uint64_t v18 = v23 + v22;
          if (__OFADD__(v23, v22)) {
            goto LABEL_31;
          }
          LOBYTE(a5) = 0;
          ++v21;
          if (!--v20) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    LOBYTE(a5) = 0;
    goto LABEL_44;
  }
  if (a5 != 45)
  {
    if (!v14 || (a5 - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v18 = (a5 - 48);
    if (v14 != 1)
    {
      if ((BYTE1(a5) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v18 = 10 * (a5 - 48) + (BYTE1(a5) - 48);
      uint64_t v24 = v14 - 2;
      if (v24)
      {
        uint64_t v25 = (unsigned __int8 *)&v35 + 2;
        while (1)
        {
          unsigned int v26 = *v25 - 48;
          if (v26 > 9) {
            goto LABEL_31;
          }
          uint64_t v27 = 10 * v18;
          if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
            goto LABEL_31;
          }
          uint64_t v18 = v27 + v26;
          if (__OFADD__(v27, v26)) {
            goto LABEL_31;
          }
          LOBYTE(a5) = 0;
          ++v25;
          if (!--v24) {
            goto LABEL_44;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (v14)
  {
    if (v14 != 1 && (BYTE1(a5) - 48) <= 9u)
    {
      if (v14 == 2)
      {
        LOBYTE(a5) = 0;
        uint64_t v18 = -(uint64_t)(BYTE1(a5) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(a5) - 48) <= 9u)
      {
        uint64_t v18 = -10 * (BYTE1(a5) - 48) - (BYTE2(a5) - 48);
        uint64_t v28 = v14 - 3;
        if (!v28) {
          goto LABEL_43;
        }
        uint64_t v31 = (unsigned __int8 *)&v35 + 3;
        while (1)
        {
          unsigned int v32 = *v31 - 48;
          if (v32 > 9) {
            break;
          }
          uint64_t v33 = 10 * v18;
          if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
            break;
          }
          uint64_t v18 = v33 - v32;
          if (__OFSUB__(v33, v32)) {
            break;
          }
          LOBYTE(a5) = 0;
          ++v31;
          if (!--v28) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_31:
    uint64_t v18 = 0;
    LOBYTE(a5) = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t closure #2 in Error.telemetryValue.getter()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = InferenceError.caseName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = InferenceError.Context.domain.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  GenerativeFunctionsInstrumentationError.GenericError.domain.setter();
  uint64_t v3 = InferenceError.Context.code.getter();
  return MEMORY[0x2611FFDC0](v3, 0);
}

uint64_t closure #3 in Error.telemetryValue.getter(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_domain);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  GenerativeFunctionsInstrumentationError.GenericError.domain.setter();
  return MEMORY[0x2611FFDC0](objc_msgSend(a2, sel_code), 0);
}

uint64_t closure #1 in InstrumentedStream.init<>(using:on:)()
{
  PromptCompletionStreamElementEnvelope.Envelope.unseal()(v1);
  InferenceRequestInstrumentation.handlePromptCompletionEvent(_:)((uint64_t)v1);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v1);
}

uint64_t InstrumentedStream.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  Swift::String v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
  uint64_t v13 = dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(v3 + *(int *)(a1 + 36)))(v13);
  uint64_t v15 = (uint64_t *)(v3 + *(int *)(a1 + 40));
  uint64_t v16 = *v15;
  InstrumentedStream.AsyncIterator.init(wrapped:instrumentation:handleElement:isStarted:)((uint64_t)v12, v14, *v15, v15[1], 0, a2);
  return _s15TokenGeneration31InferenceRequestInstrumentationCxRi_zRi0_zly7ElementQzIseghgn_Sgs8SendableRzSciRzlWOy(v16);
}

int *InstrumentedStream.AsyncIterator.init(wrapped:instrumentation:handleElement:isStarted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  uint64_t result = (int *)type metadata accessor for InstrumentedStream.AsyncIterator();
  *(void *)(a6 + result[9]) = a2;
  uint64_t v14 = (void *)(a6 + result[10]);
  *uint64_t v14 = a3;
  v14[1] = a4;
  *(unsigned char *)(a6 + result[11]) = a5;
  return result;
}

uint64_t InstrumentedStream.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  v3[6] = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = *(void *)(AssociatedTypeWitness - 8);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](InstrumentedStream.AsyncIterator.next(), 0, 0);
}

uint64_t InstrumentedStream.AsyncIterator.next()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(int *)(v0[3] + 44);
  if ((*(unsigned char *)(v1 + v2) & 1) == 0)
  {
    EventReporter.send(eventBuiltWithPresetsAnd:)();
    uint64_t v3 = v0[15];
    uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v0[15], &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
    *(unsigned char *)(v1 + v2) = 1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[16] = v7;
  *uint64_t v7 = v0;
  v7[1] = InstrumentedStream.AsyncIterator.next();
  uint64_t v8 = v0[10];
  return MEMORY[0x270FA1E80](v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = InstrumentedStream.AsyncIterator.next();
  }
  else {
    uint64_t v2 = InstrumentedStream.AsyncIterator.next();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void, uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[17];
    uint64_t v6 = v0[3];
    uint64_t v5 = v0[4];
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    uint64_t v7 = *(void *)(v5 + *(int *)(v6 + 36));
    uint64_t v8 = swift_task_alloc();
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = 0;
    EventReporter.send(eventBuiltWithPresetsAnd:)();
    if (v4)
    {

      uint64_t v4 = 1;
    }
    uint64_t v9 = v0[14];
    swift_task_dealloc();
    uint64_t v10 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
    uint64_t v11 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, v4, 1, v10);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v9, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  }
  else
  {
    uint64_t v13 = v0[3];
    Swift::String v12 = v0[4];
    uint64_t v14 = *(void (**)(void, uint64_t, uint64_t))(v2 + 32);
    v14(v0[12], v1, v3);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v12 + *(int *)(v13 + 40));
    if (v15)
    {
      uint64_t v16 = v0[12];
      int v17 = *(void *)(v0[4] + *(int *)(v0[3] + 36));
      swift_retain();
      v15(v17, v16);
      _s15TokenGeneration31InferenceRequestInstrumentationCxRi_zRi0_zly7ElementQzIseghgn_Sgs8SendableRzSciRzlWOe((uint64_t)v15);
    }
    v14(v0[2], v0[12], v0[7]);
    uint64_t v11 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], v11, 1, v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[17];
  uint64_t v2 = *(void *)(v0[4] + *(int *)(v0[3] + 36));
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  MEMORY[0x261201A80](v1);
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v4 = (void *)v0[17];
  uint64_t v5 = v0[13];
  swift_task_dealloc();
  uint64_t v6 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v5, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance InstrumentedStream<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return InstrumentedStream.AsyncIterator.next()(a1, a2);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance InstrumentedStream<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  InstrumentedStream.makeAsyncIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
  return v4(v2, a1);
}

uint64_t partial apply for closure #1 in InferenceRequestInstrumentation.start()()
{
  return closure #1 in InferenceRequestInstrumentation.start()();
}

void partial apply for closure #1 in InferenceRequestInstrumentation.end(error:)(uint64_t a1)
{
  closure #1 in InferenceRequestInstrumentation.end(error:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t _s15TokenGeneration31InferenceRequestInstrumentationCxRi_zRi0_zly7ElementQzIseghgn_Sgs8SendableRzSciRzlWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in InferenceRequestInstrumentation.end(error:)()
{
  return closure #1 in closure #1 in InferenceRequestInstrumentation.handlePromptCompletionEvent(_:)();
}

uint64_t partial apply for closure #2 in closure #1 in InferenceRequestInstrumentation.end(error:)()
{
  MEMORY[0x2611FFF20](*(void *)(v0 + OBJC_IVAR____TtC15TokenGeneration31InferenceRequestInstrumentation_outputTokensCount), 0);
  return GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.outputImagesCount.setter();
}

uint64_t partial apply for closure #3 in Error.telemetryValue.getter(int a1)
{
  return closure #3 in Error.telemetryValue.getter(a1, *(id *)(v1 + 16));
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  long long v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x261200D40](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t partial apply for closure #2 in Error.telemetryValue.getter()
{
  return closure #2 in Error.telemetryValue.getter();
}

uint64_t partial apply for closure #1 in Error.telemetryValue.getter(uint64_t a1)
{
  return closure #1 in Error.telemetryValue.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x261200CA0);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x261200CA0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x261200CA0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in InferenceRequestInstrumentation.start()()
{
  return closure #1 in closure #1 in InferenceRequestInstrumentation.start()();
}

uint64_t partial apply for closure #2 in closure #1 in InferenceRequestInstrumentation.start()(uint64_t a1)
{
  return closure #2 in closure #1 in InferenceRequestInstrumentation.start()(a1, v1);
}

uint64_t _s15TokenGeneration31InferenceRequestInstrumentationCxRi_zRi0_zly7ElementQzIseghgn_Sgs8SendableRzSciRzlWOy(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for InstrumentedStream.AsyncIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of FinishReason(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

double partial apply for closure #1 in InferenceRequestTransparency.submit()(_OWORD *a1)
{
  return closure #1 in InferenceRequestTransparency.submit()(a1);
}

uint64_t partial apply for closure #1 in InferenceRequestTransparency.record(textDelta:)(uint64_t a1)
{
  return closure #1 in InferenceRequestTransparency.record(textDelta:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in InferenceRequestInstrumentation.handlePromptCompletionEvent(_:)()
{
  return closure #1 in InferenceRequestInstrumentation.handlePromptCompletionEvent(_:)();
}

uint64_t partial apply for closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)()
{
  return closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)();
}

uint64_t outlined retain of ModelInformation.Asset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v3);
  return a1;
}

uint64_t outlined release of ModelInformation.Asset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in InferenceRequestInstrumentation.reportModelInformation(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in InferenceRequestInstrumentation.measure(_:)(long long *a1)
{
  long long v1 = a1[9];
  v7[8] = a1[8];
  v7[9] = v1;
  v7[10] = a1[10];
  long long v2 = a1[5];
  v7[4] = a1[4];
  v7[5] = v2;
  long long v3 = a1[7];
  v7[6] = a1[6];
  v7[7] = v3;
  long long v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  long long v5 = a1[3];
  v7[2] = a1[2];
  v7[3] = v5;
  return InferenceRequestInstrumentation.handleCompletePromptResponse(_:)(v7);
}

uint64_t outlined destroy of InferenceRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in InferenceRequestTransparency.record(completion:)(void *a1)
{
  return closure #1 in InferenceRequestTransparency.record(completion:)(a1);
}

uint64_t partial apply for closure #1 in InferenceRequestTransparency.record(prompt:)(unint64_t *a1)
{
  return closure #1 in InferenceRequestTransparency.record(prompt:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined destroy of GenerativeFunctionsInstrumentationEvent?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of InferenceRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of StreamingRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata completion function for InstrumentedStream.AsyncIterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InstrumentedStream.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v11 = *v10;
    unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = *(void *)v13;
    swift_retain();
    if (v14 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 8);
      *(void *)unint64_t v12 = v14;
      *(void *)(v12 + 8) = v15;
      swift_retain();
    }
    *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  }
  return a1;
}

uint64_t destroy for InstrumentedStream.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  unint64_t v4 = ((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  uint64_t result = swift_release();
  if (*(void *)(v4 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for InstrumentedStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = v6 + a1;
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)v10;
  swift_retain();
  if (v11 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)unint64_t v9 = v11;
    *(void *)(v9 + 8) = v12;
    swift_retain();
  }
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  return a1;
}

uint64_t assignWithCopy for InstrumentedStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *unint64_t v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(void *)v11;
  if (*(void *)v10 < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      uint64_t v14 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = v12;
      *(void *)(v10 + 8) = v14;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    goto LABEL_8;
  }
  if (v12 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  return a1;
}

uint64_t initializeWithTake for InstrumentedStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v10 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v11 = *(void *)(v10 + 8);
    *(void *)unint64_t v9 = *(void *)v10;
    *(void *)(v9 + 8) = v11;
  }
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  return a1;
}

uint64_t assignWithTake for InstrumentedStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)v10;
  if (*(void *)v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)(v10 + 8);
      *(void *)unint64_t v9 = v11;
      *(void *)(v9 + 8) = v13;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    goto LABEL_8;
  }
  if (v11 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  swift_release();
LABEL_8:
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for InstrumentedStream.AsyncIterator(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
    if (v9 < 4) {
      unsigned int v10 = ((a2 - v7 + 255) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25F7C2080);
      case 4:
        int v13 = *(_DWORD *)&a1[v9];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v15 = 0;
        }
        if (v9 == 1) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    unint64_t v17 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for InstrumentedStream.AsyncIterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v9 >= a3)
  {
    int v14 = 0;
    if (v9 >= a2)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              char v19 = (void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = (a2 - 1);
              }
              *char v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
              v18(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v10 <= 3) {
      unsigned int v12 = ((a3 - v9 + 255) >> v11) + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v9 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v15 = ~v9 + a2;
  if (v10 < 4) {
    int v16 = (v15 >> v11) + 1;
  }
  else {
    int v16 = 1;
  }
  if (v10 >= 4) {
    unsigned int v17 = v15;
  }
  else {
    unsigned int v17 = v15;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x25F7C22D0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t closure #1 in InferenceRequestTransparency.record(textDelta:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in InferenceRequestTransparency.record(textDelta:)(a1);
}

void closure #1 in InferenceRequestInstrumentation.end(error:)partial apply(uint64_t a1)
{
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration16PromptCompletionV7SegmentVG_AH7ContentOs5NeverOTg504_s15d12Generation16fg71V23transparencyDescription07_B6A0E2G24BC0F2AD1EA2F42FD0087EEC9LLSSvgAC7i4OAC7H52Vcfu_32b1aea282a60d71b97bfb98b78a1fe981AiGTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v16;
    unint64_t v4 = (char *)(a1 + 72);
    do
    {
      unint64_t v5 = *((void *)v4 - 4);
      uint64_t v6 = *((void *)v4 - 3);
      uint64_t v7 = *((void *)v4 - 2);
      unint64_t v8 = *((void *)v4 - 1);
      char v9 = *v4;
      uint64_t v15 = *((void *)v4 - 5);
      outlined copy of PromptCompletion.Content(v15, v5, v6, v7, v8, *v4);
      unint64_t v11 = *(void *)(v16 + 16);
      unint64_t v10 = *(void *)(v16 + 24);
      unint64_t v12 = v11 + 1;
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        unint64_t v12 = v11 + 1;
      }
      *(void *)(v16 + 16) = v12;
      uint64_t v13 = v16 + 48 * v11;
      *(void *)(v13 + 32) = v15;
      *(void *)(v13 + 40) = v5;
      *(void *)(v13 + 48) = v6;
      *(void *)(v13 + 56) = v7;
      *(void *)(v13 + 64) = v8;
      *(unsigned char *)(v13 + 72) = v9;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t static GenerativeExperiencesTransparencyLog.ExecutionEnvironment.from(inferenceRequestHandlerIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 == 0xD000000000000015 && a2 == 0x800000025F92C940
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v6 = (unsigned int *)MEMORY[0x263F4F730];
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000025F92C960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v6 = (unsigned int *)MEMORY[0x263F4F738];
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025F92C980 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v6 = (unsigned int *)MEMORY[0x263F4F728];
  }
  else
  {
    *a3 = 0;
    uint64_t v6 = (unsigned int *)MEMORY[0x263F4F740];
  }
  uint64_t v7 = *v6;
  uint64_t v8 = type metadata accessor for GenerativeExperiencesTransparencyLog.ExecutionEnvironment();
  char v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);
  return v9(a3, v7, v8);
}

uint64_t closure #1 in InferenceRequestTransparency.record(prompt:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt?(a2, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for Prompt();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Prompt?((uint64_t)v6);
    unint64_t v9 = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = Prompt.transparencyDescription.getter();
    unint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  type metadata accessor for TransparencyReport();
  swift_allocObject();
  TransparencyReport.init()();
  TransparencyReport.logEvent(configuration:prompt:response:executionEnvironment:)();
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = v9;
  a1[1] = v10;
  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

unint64_t Prompt.transparencyDescription.getter()
{
  uint64_t v55 = type metadata accessor for Prompt.Turn.Segment(0);
  uint64_t v47 = *(void *)(v55 - 8);
  uint64_t v0 = MEMORY[0x270FA5388](v55);
  uint64_t v2 = (void *)((char *)v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)v45 - v3;
  uint64_t v50 = type metadata accessor for Prompt.Turn(0);
  uint64_t v5 = *(void *)(v50 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v50);
  uint64_t v53 = (uint64_t)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  long long v54 = (char *)v45 - v9;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v45 - v10;
  unint64_t result = Prompt.turns()();
  unint64_t v13 = result;
  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t v57 = MEMORY[0x263F8EE78];
  uint64_t v52 = *(void *)(result + 16);
  if (v52)
  {
    unint64_t v15 = 0;
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t v51 = v5;
    while (v15 < *(void *)(v13 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v18 = *(void *)(v5 + 72);
      outlined init with copy of Prompt.Turn(v13 + v17 + v18 * v15, (uint64_t)v11, type metadata accessor for Prompt.Turn);
      if (*v11 == 2)
      {
        outlined init with take of Prompt.Turn((uint64_t)v11, (uint64_t)v54);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        }
        uint64_t v16 = v57;
        unint64_t v20 = *(void *)(v57 + 16);
        unint64_t v19 = *(void *)(v57 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v16 = v57;
        }
        *(void *)(v16 + 16) = v20 + 1;
        unint64_t result = outlined init with take of Prompt.Turn((uint64_t)v54, v16 + v17 + v20 * v18);
        uint64_t v5 = v51;
      }
      else
      {
        unint64_t result = outlined destroy of Prompt.Turn((uint64_t)v11, type metadata accessor for Prompt.Turn);
      }
      if (v52 == ++v15)
      {
        uint64_t v21 = v57;
        uint64_t v14 = MEMORY[0x263F8EE78];
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
LABEL_14:
    swift_bridgeObjectRelease();
    int64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v57 = v14;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
      uint64_t v23 = 0;
      uint64_t v24 = *(unsigned __int8 *)(v5 + 80);
      v45[1] = v21;
      int64_t v46 = v22;
      uint64_t v49 = v21 + ((v24 + 32) & ~v24);
      uint64_t v48 = *(void *)(v5 + 72);
      long long v54 = v4;
      do
      {
        uint64_t v52 = v23;
        uint64_t v25 = v53;
        outlined init with copy of Prompt.Turn(v49 + v48 * v23, v53, type metadata accessor for Prompt.Turn);
        uint64_t v26 = *(void *)(v25 + *(int *)(v50 + 24));
        int64_t v27 = *(void *)(v26 + 16);
        if (v27)
        {
          uint64_t v56 = v14;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
          uint64_t v28 = *(unsigned __int8 *)(v47 + 80);
          uint64_t v51 = v26;
          uint64_t v29 = v26 + ((v28 + 32) & ~v28);
          uint64_t v30 = *(void *)(v47 + 72);
          do
          {
            outlined init with copy of Prompt.Turn(v29, (uint64_t)v4, type metadata accessor for Prompt.Turn.Segment);
            outlined init with copy of Prompt.Turn((uint64_t)v4, (uint64_t)v2, type metadata accessor for Prompt.Turn.Segment);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              outlined destroy of Prompt.Turn((uint64_t)v2, type metadata accessor for Prompt.Turn.Segment);
              unint64_t v31 = 0xE700000000000000;
              uint64_t v32 = 0x3E6567616D693CLL;
            }
            else
            {
              uint64_t v32 = *v2;
              unint64_t v31 = v2[1];
            }
            outlined destroy of Prompt.Turn((uint64_t)v4, type metadata accessor for Prompt.Turn.Segment);
            uint64_t v14 = v56;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
              uint64_t v14 = v56;
            }
            unint64_t v34 = *(void *)(v14 + 16);
            unint64_t v33 = *(void *)(v14 + 24);
            if (v34 >= v33 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
              uint64_t v14 = v56;
            }
            *(void *)(v14 + 16) = v34 + 1;
            uint64_t v35 = v14 + 16 * v34;
            *(void *)(v35 + 32) = v32;
            *(void *)(v35 + 40) = v31;
            v29 += v30;
            --v27;
            uint64_t v4 = v54;
          }
          while (v27);
          swift_bridgeObjectRelease();
          int64_t v22 = v46;
        }
        uint64_t v56 = v14;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v38 = v37;
        swift_bridgeObjectRelease();
        outlined destroy of Prompt.Turn(v53, type metadata accessor for Prompt.Turn);
        uint64_t v39 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1);
          uint64_t v39 = v57;
        }
        uint64_t v40 = v52;
        unint64_t v42 = *(void *)(v39 + 16);
        unint64_t v41 = *(void *)(v39 + 24);
        if (v42 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
          uint64_t v40 = v52;
          uint64_t v39 = v57;
        }
        uint64_t v23 = v40 + 1;
        *(void *)(v39 + 16) = v42 + 1;
        uint64_t v43 = v39 + 16 * v42;
        *(void *)(v43 + 32) = v36;
        *(void *)(v43 + 40) = v38;
        uint64_t v14 = MEMORY[0x263F8EE78];
      }
      while (v23 != v22);
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v39 = MEMORY[0x263F8EE78];
    }
    uint64_t v57 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v44;
  }
  return result;
}

uint64_t closure #1 in InferenceRequestTransparency.record(completion:)(void *a1)
{
  PromptCompletion.transparencyDescription.getter();
  type metadata accessor for TransparencyReport();
  swift_allocObject();
  TransparencyReport.init()();
  TransparencyReport.logEvent(configuration:prompt:response:executionEnvironment:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

uint64_t PromptCompletion.transparencyDescription.getter()
{
  if (*(void *)(*(void *)(v0 + 32) + 16))
  {
    uint64_t v1 = swift_bridgeObjectRetain();
    uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration16PromptCompletionV7SegmentVG_AH7ContentOs5NeverOTg504_s15d12Generation16fg71V23transparencyDescription07_B6A0E2G24BC0F2AD1EA2F42FD0087EEC9LLSSvgAC7i4OAC7H52Vcfu_32b1aea282a60d71b97bfb98b78a1fe981AiGTf3nnnpk_nTf1cn_n(v1);
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 16);
    if (!v3) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE78];
    uint64_t v3 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v3) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if (*(unsigned char *)(v4 + 32))
    {
      unint64_t v6 = 0xE700000000000000;
      uint64_t v7 = 0x3E6567616D693CLL;
    }
    else
    {
      uint64_t v7 = *(void *)(v4 - 8);
      unint64_t v6 = *(void *)v4;
      swift_bridgeObjectRetain();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    }
    unint64_t v9 = v5[2];
    unint64_t v8 = v5[3];
    if (v9 >= v8 >> 1) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v5);
    }
    v5[2] = v9 + 1;
    uint64_t v10 = &v5[2 * v9];
    v10[4] = v7;
    v10[5] = v6;
    v4 += 48;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
LABEL_14:
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t closure #1 in InferenceRequestTransparency.record(textDelta:)(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  uint64_t v10 = v7;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a2;
  v8._object = a3;
  String.append(_:)(v8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v6;
  return result;
}

double closure #1 in InferenceRequestTransparency.submit()(_OWORD *a1)
{
  type metadata accessor for TransparencyReport();
  swift_allocObject();
  TransparencyReport.init()();
  TransparencyReport.logEvent(configuration:prompt:response:executionEnvironment:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t InferenceRequestTransparency.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15TokenGeneration28InferenceRequestTransparency_configuration;
  uint64_t v2 = type metadata accessor for InferenceProviderRequestConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15TokenGeneration28InferenceRequestTransparency_executionEnvironment;
  uint64_t v4 = type metadata accessor for GenerativeExperiencesTransparencyLog.ExecutionEnvironment();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for InferenceRequestTransparency()
{
  return type metadata accessor for InferenceRequestTransparency();
}

uint64_t type metadata accessor for InferenceRequestTransparency()
{
  uint64_t result = type metadata singleton initialization cache for InferenceRequestTransparency;
  if (!type metadata singleton initialization cache for InferenceRequestTransparency) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for InferenceRequestTransparency()
{
  uint64_t result = type metadata accessor for InferenceProviderRequestConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for GenerativeExperiencesTransparencyLog.ExecutionEnvironment();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for InferenceRequestTransparency.MutableState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for InferenceRequestTransparency.MutableState(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for InferenceRequestTransparency.MutableState(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for InferenceRequestTransparency.MutableState(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequestTransparency.MutableState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceRequestTransparency.MutableState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceRequestTransparency.MutableState()
{
  return &type metadata for InferenceRequestTransparency.MutableState;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined copy of PromptCompletion.Content(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  if (a6)
  {
    return outlined copy of Data._Representation(a1, a2);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return outlined copy of Data?(a4, a5);
  }
}

uint64_t outlined init with copy of Prompt?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Prompt?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Prompt.Turn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.Turn(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Prompt.Turn(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Prompt.Turn(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[10] = v12;
  v9[11] = v8;
  v9[8] = a8;
  v9[9] = v11;
  v9[6] = a5;
  v9[7] = a7;
  v9[4] = a3;
  v9[5] = a4;
  v9[2] = a1;
  v9[3] = a2;
  return MEMORY[0x270FA2498](InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:), 0, 0);
}

uint64_t InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  type metadata accessor for OneShotRequest(0);
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type OneShotRequest and conformance OneShotRequest, (void (*)(uint64_t))type metadata accessor for OneShotRequest);
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[12] = v1;
  v0[13] = v2;
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0[9] + 32)
                                                                                              + **(int **)(v0[9] + 32));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:);
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[3];
  return v12(v10, v9, v3, v4, v7, v8, v6);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  static WireFormat.decode<A>(_:from:)();
  outlined consume of Data._Representation(v2, v1);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of Data._Representation(v0[12], v0[13]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:);
  }
  else
  {
    uint64_t v8 = v6[12];
    unint64_t v9 = v6[13];
    v6[16] = a2;
    v6[17] = a1;
    outlined consume of Data._Representation(v8, v9);
    uint64_t v7 = InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v46 = a6;
  uint64_t v44 = a4;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v39 = a1;
  uint64_t v49 = a7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>);
  uint64_t v50 = a5;
  unint64_t v42 = lazy protocol witness table accessor for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>();
  uint64_t v11 = type metadata accessor for AsyncThrowingMapSequence();
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v43 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v45 = (char *)&v36 - v15;
  uint64_t v16 = v10;
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  unint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v36 - v20;
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  type metadata accessor for StreamingRequest(0);
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest, (void (*)(uint64_t))type metadata accessor for StreamingRequest);
  uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v24 = v23;
  uint64_t v37 = a8;
  uint64_t v38 = a9;
  uint64_t v25 = v46;
  uint64_t v26 = v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v46 + 48))(v39, v40, v22, v23, v41, v44, v46);
  outlined consume of Data._Representation(v22, v24);
  uint64_t v27 = v47;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v19, v21, v16);
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = v50;
  void v28[2] = v26;
  v28[3] = v29;
  uint64_t v30 = v37;
  v28[4] = v25;
  v28[5] = v30;
  v28[6] = v38;
  unint64_t v31 = v45;
  AsyncSequence.map<A>(_:)();
  swift_release();
  uint64_t v32 = v48;
  uint64_t v33 = (uint64_t)v43;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v43, v31, v11);
  uint64_t WitnessTable = swift_getWitnessTable();
  AsyncThrowingStream<>.init<A>(_:)(v33, v29, v11, WitnessTable);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v21, v16);
}

uint64_t closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 32) = a6;
  *(void *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 40) = *a2;
  return MEMORY[0x270FA2498](closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:), 0, 0);
}

uint64_t closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)()
{
  static WireFormat.decode<A>(_:from:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:xpcCodableObject:requiredAssets:expectedResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v42 = a4;
  uint64_t v45 = a5;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v39 = a1;
  uint64_t v48 = a7;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>);
  uint64_t v49 = a6;
  unint64_t v43 = lazy protocol witness table accessor for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>();
  uint64_t v12 = type metadata accessor for AsyncThrowingMapSequence();
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v44 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v46 = (char *)&v36 - v16;
  uint64_t v17 = v11;
  uint64_t v18 = *(void *)(v11 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v15);
  uint64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unint64_t v23 = (char *)&v36 - v22;
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  type metadata accessor for StreamingRequest(0);
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest, (void (*)(uint64_t))type metadata accessor for StreamingRequest);
  uint64_t v24 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v26 = v25;
  uint64_t v37 = a9;
  uint64_t v38 = a10;
  uint64_t v27 = v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 56))(v39, v40, v24, v25, v41, v42, v45, a8);
  outlined consume of Data._Representation(v24, v26);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = v49;
  void v28[2] = v27;
  v28[3] = v29;
  uint64_t v30 = v37;
  v28[4] = a8;
  v28[5] = v30;
  v28[6] = v38;
  unint64_t v31 = v46;
  AsyncSequence.map<A>(_:)();
  swift_release();
  uint64_t v32 = v47;
  uint64_t v33 = (uint64_t)v44;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v31, v12);
  uint64_t WitnessTable = swift_getWitnessTable();
  AsyncThrowingStream<>.init<A>(_:)(v33, v29, v12, WitnessTable);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
}

uint64_t closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:xpcCodableObject:requiredAssets:expectedResponse:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 32) = a6;
  *(void *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 40) = *a2;
  return MEMORY[0x270FA2498](closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:xpcCodableObject:requiredAssets:expectedResponse:), 0, 0);
}

void static ModelCatalog.AssetKey.tokenizer.getter(void *a1@<X8>)
{
  *a1 = 0x657A696E656B6F54;
  a1[1] = 0xE900000000000072;
}

void static ModelCatalog.AssetKey.adaptor.getter(void *a1@<X8>)
{
  *a1 = 0x726F7470616441;
  a1[1] = 0xE700000000000000;
}

void static ModelCatalog.AssetKey.foundation.getter(void *a1@<X8>)
{
  *a1 = 0x697461646E756F46;
  a1[1] = 0xEA00000000006E6FLL;
}

uint64_t ModelCatalog.AssetKey.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static ModelCatalog.AssetKey.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int ModelCatalog.AssetKey.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelCatalog.AssetKey()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModelCatalog.AssetKey()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelCatalog.AssetKey()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey;
  if (!lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey;
  if (!lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModelCatalog.AssetKey(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t dispatch thunk of InferenceSessionProtocol.requestPrewarm()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InferenceSessionProtocol.modelInfo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InferenceSessionProtocol.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 + 32)
                                                                                              + **(int **)(a7 + 32));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = partial apply for closure #1 in InferenceRequestHandler.handleRequest(data:configuration:);
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of InferenceSessionProtocol.request(loggingIdentifier:data:xpcData:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 40) + **(int **)(a8 + 40));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = dispatch thunk of InferenceSessionProtocol.request(loggingIdentifier:data:xpcData:requiredAssets:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of InferenceSessionProtocol.streamingRequest(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of InferenceSessionProtocol.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 56))();
}

ValueMetadata *type metadata accessor for ModelCatalog()
{
  return &type metadata for ModelCatalog;
}

void *initializeBufferWithCopyOfBuffer for ModelCatalog.AssetKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ModelCatalog.AssetKey()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ModelCatalog.AssetKey(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ModelCatalog.AssetKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelCatalog.AssetKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelCatalog.AssetKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelCatalog.AssetKey()
{
  return &type metadata for ModelCatalog.AssetKey;
}

unint64_t lazy protocol witness table accessor for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>;
  if (!lazy protocol witness table cache variable for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>);
  }
  return result;
}

uint64_t sub_25F7C4C5C()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:xpcCodableObject:requiredAssets:expectedResponse:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *(void *)uint64_t v8 = v3;
  *(void *)(v8 + 24) = v6;
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 8) = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  *(void *)(v8 + 16) = a1;
  *(_OWORD *)(v8 + 40) = *a2;
  return MEMORY[0x270FA2498](closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:xpcCodableObject:requiredAssets:expectedResponse:), 0, 0);
}

uint64_t lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25F7C4D7C()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *(void *)uint64_t v8 = v3;
  *(void *)(v8 + 24) = v6;
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 8) = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  *(void *)(v8 + 16) = a1;
  *(_OWORD *)(v8 + 40) = *a2;
  return MEMORY[0x270FA2498](closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:), 0, 0);
}

uint64_t one-time initialization function for assets(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.assets);
}

uint64_t one-time initialization function for generator(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.generator);
}

uint64_t one-time initialization function for schema(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.schema);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t one-time initialization function for generation(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.generation);
}

uint64_t one-time initialization function for inference(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.inference);
}

uint64_t one-time initialization function for prompt(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.prompt);
}

uint64_t one-time initialization function for assets(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t ModelBundle.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static ModelBundle.ModelType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ModelBundle.ModelType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ModelBundle.ModelType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ModelBundle.ModelType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelBundle.ModelType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ModelBundle.ModelType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelBundle.ModelType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ModelBundle.modelType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

TokenGeneration::ModelBundle __swiftcall ModelBundle.init(preverifiedIdentifier:)(Swift::String preverifiedIdentifier)
{
  *(Swift::String *)uint64_t v1 = preverifiedIdentifier;
  *(unsigned char *)(v1 + 16) = 2;
  result.identifier = preverifiedIdentifier;
  return result;
}

TokenGeneration::ModelBundle __swiftcall ModelBundle.init(preverifiedIdentifier:modelType:)(Swift::String preverifiedIdentifier, TokenGeneration::ModelBundle::ModelType modelType)
{
  char v3 = *(unsigned char *)modelType;
  *(Swift::String *)uint64_t v2 = preverifiedIdentifier;
  *(unsigned char *)(v2 + 16) = v3;
  result.identifier = preverifiedIdentifier;
  result.modelType.value = modelType;
  return result;
}

TokenGeneration::ModelBundle_optional __swiftcall ModelBundle.init(identifier:)(Swift::String identifier)
{
  *(Swift::String *)uint64_t v1 = identifier;
  *(unsigned char *)(v1 + 16) = 2;
  result.value.identifier = identifier;
  return result;
}

void static ModelBundle.summarization.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000017;
  *(void *)(a1 + 8) = 0x800000025F92CA10;
  *(unsigned char *)(a1 + 16) = 2;
}

void static ModelBundle.summarizationLarge.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000001DLL;
  *(void *)(a1 + 8) = 0x800000025F92CA30;
  *(unsigned char *)(a1 + 16) = 2;
}

void ModelBundle.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int ModelBundle.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelBundle()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ModelBundle()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  String.hash(into:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelBundle()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t specialized static ModelBundle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    if (v2 == 2)
    {
      if (v3 != 2) {
        return 0;
      }
    }
    else if (v3 == 2 || ((v3 ^ v2) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelBundle.ModelType and conformance ModelBundle.ModelType()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelBundle.ModelType and conformance ModelBundle.ModelType;
  if (!lazy protocol witness table cache variable for type ModelBundle.ModelType and conformance ModelBundle.ModelType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelBundle.ModelType and conformance ModelBundle.ModelType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelBundle and conformance ModelBundle()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelBundle and conformance ModelBundle;
  if (!lazy protocol witness table cache variable for type ModelBundle and conformance ModelBundle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelBundle and conformance ModelBundle);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelBundle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ModelBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelBundle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelBundle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelBundle()
{
  return &type metadata for ModelBundle;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ModelBundle.ModelType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelBundle.ModelType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F7C58CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ModelBundle.ModelType(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ModelBundle.ModelType(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ModelBundle.ModelType()
{
  return &type metadata for ModelBundle.ModelType;
}

ValueMetadata *type metadata accessor for ModelManagerSession()
{
  return &type metadata for ModelManagerSession;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D58LL4data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v19;
  uint64_t result = specialized Set.startIndex.getter(a1);
  int64_t v5 = result;
  int v7 = v6;
  char v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_14;
    }
    char v18 = v9;
    uint64_t v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    unint64_t v14 = *(void *)(v19 + 16);
    unint64_t v13 = *(void *)(v19 + 24);
    swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    }
    *(void *)(v19 + 16) = v14 + 1;
    uint64_t v15 = v19 + 16 * v14;
    *(void *)(v15 + 32) = v11;
    *(void *)(v15 + 40) = v12;
    uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v18 & 1, a1);
    int64_t v5 = result;
    int v7 = v16;
    char v9 = v17 & 1;
    if (!--v1)
    {
      outlined consume of Set<ModelCatalog.AssetKey>.Index._Variant(result, v16, v9);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration11ModelBundleVG_SSs5NeverOTg504_s15d12Generation19f63ManagerSessionV13configurationAcA0E13ConfigurationV_tcfcSSAA0C6G54Vcfu_33_0baf9da394eac09806e55f5fc8c8a9f7AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    unsigned int v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 3;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:xpcData:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCCodableObject?);
  v7[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ClientData();
  long long v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](ModelManagerSession.request(loggingIdentifier:data:xpcData:requiredAssets:), 0, 0);
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:xpcData:requiredAssets:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v11 = v0[8];
  uint64_t v4 = v0[5];
  unint64_t v3 = v0[6];
  type metadata accessor for OneShotRequest();
  uint64_t v5 = type metadata accessor for XPCCodableObject();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, v2, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
  swift_retain();
  outlined copy of Data._Representation(v4, v3);
  ClientData.init(data:xpcData:)();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D584data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_nTm(v11);
  specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0[15] = OneShotRequest.__allocating_init(session:loggingIdentifier:clientData:requiredAssetIDs:)();
  uint64_t v12 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x263F562E0] + MEMORY[0x263F562E0]);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[16] = v8;
  void *v8 = v0;
  v8[1] = ModelManagerSession.request(loggingIdentifier:data:xpcData:requiredAssets:);
  uint64_t v9 = v0[13];
  return v12(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ModelManagerSession.request(loggingIdentifier:data:xpcData:requiredAssets:);
  }
  else {
    uint64_t v2 = ModelManagerSession.request(loggingIdentifier:data:xpcData:requiredAssets:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(uint64_t, unint64_t);
  uint64_t v6;

  uint64_t result = ClientData.data.getter();
  if (v2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = result;
    uint64_t v4 = v2;
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
    return v5(v3, v4);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();
  specialized ModelManagerSession.attemptUnwrappingGenerationError(_:)(v1);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = type metadata accessor for Request();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](ModelManagerSession.request(loggingIdentifier:data:requiredAssets:), 0, 0);
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)()
{
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  unint64_t v2 = v0[6];
  swift_retain();
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D584data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_nTm(v1);
  specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v3, v2);
  swift_bridgeObjectRetain();
  Request.init(session:loggingIdentifier:clientData:requiredAssetTypes:)();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = ModelManagerSession.request(loggingIdentifier:data:requiredAssets:);
  return MEMORY[0x270F4C3B0]();
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[14];
  unint64_t v2 = v0[15];
  return v1(v2, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = (void *)v0[13];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  specialized ModelManagerSession.attemptUnwrappingGenerationError(_:)(v1);
  swift_willThrow();

  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 104) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = ModelManagerSession.request(loggingIdentifier:data:requiredAssets:);
  }
  else
  {
    *(void *)(v6 + 112) = a2;
    *(void *)(v6 + 120) = a1;
    uint64_t v7 = ModelManagerSession.request(loggingIdentifier:data:requiredAssets:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v35 = a6;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>);
  uint64_t v10 = *(void *)(v32 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](v32);
  unint64_t v31 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = type metadata accessor for Request();
  uint64_t v33 = *(void *)(v15 - 8);
  uint64_t v34 = v15;
  MEMORY[0x270FA5388](v15);
  char v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a5;
  swift_retain();
  uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D584data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_nTm(a4);
  specialized Set.init<A>(_:)(v18);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  Request.init(session:loggingIdentifier:clientData:requiredAssetTypes:)();
  Request.executeStream()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  uint64_t v19 = swift_allocBox();
  uint64_t v21 = v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  unint64_t v23 = v31;
  uint64_t v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v14, v32);
  unint64_t v25 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v25, v23, v24);
  *(void *)(v26 + ((v11 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v29;
  swift_retain();
  swift_retain();
  AsyncThrowingStream.init<>(unfolding:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v34);
  return swift_release();
}

uint64_t closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a1;
  v3[14] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_projectBox();
  return MEMORY[0x270FA2498](closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:), 0, 0);
}

uint64_t closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  swift_beginAccess();
  outlined init with copy of ResponseAsyncIterator<Data>?(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  LODWORD(v1) = v5(v2, 1, v3);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v2, &demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  if (v1 == 1)
  {
    uint64_t v6 = v0[17];
    uint64_t v7 = v0[15];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>);
    ResponseStream.makeAsyncIterator()();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v7, 0, 1, v3);
    swift_beginAccess();
    outlined assign with take of ResponseAsyncIterator<Data>?(v7, v6);
  }
  uint64_t v8 = v0[17];
  swift_beginAccess();
  if (v5(v8, 1, v3))
  {
    swift_endAccess();
    *(_OWORD *)v0[13] = xmmword_25F91CC60;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v0[18] = v11;
    *uint64_t v11 = v0;
    v11[1] = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:);
    return MEMORY[0x270F4C2E0](v0 + 11, v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:);
  }
  else
  {
    swift_endAccess();
    uint64_t v2 = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(_OWORD *)*(void *)(v0 + 104) = *(_OWORD *)(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 152);
  swift_endAccess();
  specialized ModelManagerSession.attemptUnwrappingGenerationError(_:)(v1);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v62 = a7;
  uint64_t v52 = a6;
  uint64_t v48 = a5;
  unint64_t v49 = a4;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  uint64_t v58 = a8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v64 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ResponseSequence();
  uint64_t v59 = *(void *)(v11 - 8);
  uint64_t v60 = v11;
  uint64_t v61 = *(void *)(v59 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v57 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v63 = (char *)&v46 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>.Continuation.BufferingPolicy);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>.Continuation);
  uint64_t v51 = *(void *)(v54 - 8);
  uint64_t v53 = *(void *)(v51 + 64);
  uint64_t v19 = MEMORY[0x270FA5388](v54);
  uint64_t v50 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v46 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCCodableObject?);
  MEMORY[0x270FA5388](v23 - 8);
  unint64_t v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ClientData();
  MEMORY[0x270FA5388](v26 - 8);
  type metadata accessor for StreamingRequest();
  uint64_t v27 = type metadata accessor for XPCCodableObject();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v25, v48, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  swift_retain();
  outlined copy of Data._Representation(a3, v49);
  ClientData.init(data:xpcData:)();
  uint64_t v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D584data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_nTm(v52);
  specialized Set.init<A>(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v56 = StreamingRequest.__allocating_init(session:loggingIdentifier:clientData:requiredAssetIDs:)();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x263F8F680], v15);
  uint64_t v30 = v22;
  uint64_t v47 = v22;
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  unint64_t v31 = v63;
  dispatch thunk of StreamingRequest.execute()();
  uint64_t v32 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v64, 1, 1, v32);
  uint64_t v34 = v59;
  uint64_t v33 = v60;
  uint64_t v35 = v57;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v57, v31, v60);
  uint64_t v37 = v50;
  uint64_t v36 = v51;
  uint64_t v38 = v54;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v50, v30, v54);
  unint64_t v39 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v40 = v36;
  unint64_t v41 = (v61 + *(unsigned __int8 *)(v36 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v42 = (v53 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 0;
  *(void *)(v43 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v43 + v39, v35, v33);
  (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v43 + v41, v37, v38);
  *(void *)(v43 + v42) = v62;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v64, (uint64_t)&async function pointer to partial apply for closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:), v43);
  swift_retain();
  uint64_t v44 = v47;
  AsyncThrowingStream.Continuation.onTermination.setter();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v63, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v38);
}

uint64_t closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>.Continuation.YieldResult);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientData();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientData?);
  v5[13] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ResponseIterator();
  v5[14] = v8;
  v5[15] = *(void *)(v8 - 8);
  v5[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:), 0, 0);
}

uint64_t closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)()
{
  ResponseSequence.makeAsyncIterator()();
  uint64_t v1 = lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(&lazy protocol witness table cache variable for type ResponseIterator and conformance ResponseIterator, MEMORY[0x263F562F0]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[17] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:);
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  return MEMORY[0x270FA1E80](v3, v4, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:);
  }
  else {
    uint64_t v2 = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[12], v1, v2);
    uint64_t v6 = ClientData.data.getter();
    uint64_t v9 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[10];
    if (v7 >> 60 != 15)
    {
      uint64_t v12 = v0[8];
      uint64_t v11 = v0[9];
      uint64_t v13 = v0[7];
      v0[2] = v6;
      v0[3] = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>.Continuation);
      AsyncThrowingStream.Continuation.yield(_:)();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v14 = lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(&lazy protocol witness table cache variable for type ResponseIterator and conformance ResponseIterator, MEMORY[0x263F562F0]);
    uint64_t v15 = (void *)swift_task_alloc();
    v0[17] = v15;
    *uint64_t v15 = v0;
    v15[1] = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:);
    uint64_t v16 = v0[13];
    uint64_t v17 = v0[14];
    return MEMORY[0x270FA1E80](v16, v17, v14);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 32) = *(void *)(v0 + 144);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  return MEMORY[0x270FA2498](closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = (void *)v0[18];
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  specialized ModelManagerSession.attemptUnwrappingGenerationError(_:)(v1);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t closure #2 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>.Continuation.Termination);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  int v8 = *MEMORY[0x263F8F650];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a1 == v8)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    return MEMORY[0x261200E80](a2, MEMORY[0x263F8EE60] + 8, v10, MEMORY[0x263F8E4E0]);
  }
  return result;
}

void protocol witness for InferenceSessionProtocol.requestPrewarm() in conformance ModelManagerSession()
{
  Session.requestPrewarm()();
  if (v0)
  {
    specialized ModelManagerSession.attemptUnwrappingGenerationError(_:)(v0);
    swift_willThrow();
  }
}

void protocol witness for InferenceSessionProtocol.modelInfo() in conformance ModelManagerSession(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelInstance();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Session.fetchModelInfo()();
  if (v1)
  {
    specialized ModelManagerSession.attemptUnwrappingGenerationError(_:)(v1);
    swift_willThrow();
  }
  else
  {
    uint64_t v7 = ModelInstance.assetBundleIdentifier.getter();
    uint64_t v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = 2;
  }
}

void protocol witness for InferenceSessionProtocol.cancel() in conformance ModelManagerSession()
{
}

uint64_t protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *v5;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession;
  return ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)(a1, a2, a3, a4, a5, v12);
}

uint64_t protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:xpcData:requiredAssets:) in conformance ModelManagerSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = *v6;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:xpcData:requiredAssets:) in conformance ModelManagerSession;
  return ModelManagerSession.request(loggingIdentifier:data:xpcData:requiredAssets:)(a1, a2, a3, a4, a5, a6, v14);
}

uint64_t protocol witness for InferenceSessionProtocol.streamingRequest(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(a1, a2, a3, a4, *v5, a5);
}

uint64_t protocol witness for InferenceSessionProtocol.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:) in conformance ModelManagerSession@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(a1, a2, a3, a4, a5, a6, *v7, a7);
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of AsyncIteratorProtocol(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v38, &demangling cache variable for type metadata for ContiguousBytes?);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = specialized Data._Representation.init(_:)(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = specialized Data._Representation.init(count:)(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:));
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    outlined consume of Data?(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  outlined consume of Data?((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t closure #1 in uuid(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v4 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v2, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_25F91D0D0;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for Insecure.MD5();
      lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, MEMORY[0x263F04840]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25F7C8E38()
{
  uint64_t v1 = type metadata accessor for ResponseSequence();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>.Continuation);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();
  return MEMORY[0x270FA0238](v0, v11, v10);
}

uint64_t partial apply for closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for ResponseSequence() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>.Continuation)
                 - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v9;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v13;
  *uint64_t v13 = v3;
  v13[1] = partial apply for closure #1 in closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(a1, v10, v11, v1 + v6, v12);
}

uint64_t partial apply for closure #2 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(uint64_t a1)
{
  return closure #2 in ModelManagerSession.streamingRequest(loggingIdentifier:data:xpcData:requiredAssets:)(a1, v1);
}

void *specialized ModelManagerSession.attemptUnwrappingGenerationError(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGenerationError?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for TokenGenerationError(0);
  uint64_t v5 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  unint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for InferenceError();
  uint64_t v67 = *(void *)(v69 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v69);
  uint64_t v65 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v58 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v68 = (char *)&v58 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelManagerError?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ModelManagerError();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  BOOL v23 = (char *)&v58 - v22;
  uint64_t v71 = (uint64_t)a1;
  MEMORY[0x261201A80](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  int v24 = swift_dynamicCast();
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (!v24)
  {
    v25(v16, 1, 1, v17);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v16, &demangling cache variable for type metadata for ModelManagerError?);
    if (one-time initialization token for generator != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Log.generator);
    MEMORY[0x261201A80](a1);
    MEMORY[0x261201A80](a1);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v71 = v50;
      *(_DWORD *)unint64_t v49 = 136315138;
      swift_getErrorValue();
      swift_getDynamicType();
      uint64_t v51 = _typeName(_:qualified:)();
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25F79F000, v47, v48, "Received unexpected error type from model manager: %s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v50, -1, -1);
      MEMORY[0x261201C80](v49, -1, -1);
    }
    else
    {
    }
    goto LABEL_15;
  }
  v25(v16, 0, 1, v17);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t))(v18 + 88))(v21, v17) != *MEMORY[0x263F561F8])
  {
    uint64_t v53 = *(void (**)(char *, uint64_t))(v18 + 8);
    v53(v23, v17);
    v53(v21, v17);
LABEL_15:
    MEMORY[0x261201A80](a1);
    return a1;
  }
  uint64_t v64 = v23;
  (*(void (**)(char *, uint64_t))(v18 + 96))(v21, v17);
  uint64_t v27 = v67;
  unsigned int v26 = v68;
  uint64_t v28 = v69;
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
  uint64_t v62 = v67 + 32;
  v61(v68, v21, v69);
  long long v63 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v63(v12, v26, v28);
  TokenGenerationError.init(_:)((uint64_t)v12, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v66) == 1)
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v4, &demangling cache variable for type metadata for TokenGenerationError?);
    if (one-time initialization token for generator != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.generator);
    unint64_t v30 = v65;
    uint64_t v31 = v28;
    v63(v65, v26, v28);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v64;
    if (v34)
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v60 = (void *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v71 = v59;
      *(_DWORD *)uint64_t v36 = 136315650;
      uint64_t v70 = v31;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceError.Type);
      uint64_t v37 = String.init<A>(describing:)();
      uint64_t v38 = v30;
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v70 = v66;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGenerationError.Type);
      uint64_t v40 = String.init<A>(describing:)();
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2112;
      lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
      swift_allocError();
      v63(v42, v30, v69);
      uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v70 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v44 = v60;
      *uint64_t v60 = v43;
      uint64_t v31 = v69;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v38, v69);
      _os_log_impl(&dword_25F79F000, v32, v33, "Received %s that couldn't be converted to a %s:%@", (uint8_t *)v36, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261201C80](v44, -1, -1);
      uint64_t v45 = v59;
      swift_arrayDestroy();
      uint64_t v35 = v64;
      MEMORY[0x261201C80](v45, -1, -1);
      MEMORY[0x261201C80](v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v30, v31);
    }

    lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    a1 = (void *)swift_allocError();
    v61(v56, v68, v31);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v35, v17);
  }
  else
  {
    outlined init with take of TokenGenerationError((uint64_t)v4, (uint64_t)v7);
    lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))type metadata accessor for TokenGenerationError);
    uint64_t v54 = v26;
    a1 = (void *)swift_allocError();
    outlined init with take of TokenGenerationError((uint64_t)v7, v55);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v54, v28);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v64, v17);
  }
  return a1;
}

uint64_t outlined init with take of TokenGenerationError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenGenerationError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of Set<ModelCatalog.AssetKey>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25F7C9BC4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>)
                 - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in register<A>(documents:registrationCallback:);
  return closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(a1, v5, v6);
}

uint64_t outlined init with copy of ResponseAsyncIterator<Data>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ResponseAsyncIterator<Data>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *specialized Data._Representation.init(_:)(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t specialized ModelManagerSession.init(configuration:)(uint64_t *a1)
{
  v54[4] = *MEMORY[0x263EF8340];
  uint64_t v46 = type metadata accessor for Insecure.MD5();
  uint64_t v41 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Insecure.MD5Digest();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v40 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unint64_t v39 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v53 = (char *)&v34 - v12;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v15 = a1[2];
  uint64_t v51 = a1[4];
  uint64_t v52 = v13;
  unint64_t v17 = a1[6];
  unint64_t v16 = a1[7];
  uint64_t v18 = a1[8];
  uint64_t v49 = a1[9];
  uint64_t v50 = v18;
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration11ModelBundleVG_SSs5NeverOTg504_s15d12Generation19f63ManagerSessionV13configurationAcA0E13ConfigurationV_tcfcSSAA0C6G54Vcfu_33_0baf9da394eac09806e55f5fc8c8a9f7AHSSTf3nnnpk_nTf1cn_n(v19);
  uint64_t v47 = v15;
  uint64_t v48 = v20;
  uint64_t v44 = 0;
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v35 = v8;
    uint64_t v36 = v9;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v38 = v14;
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized Data.init<A>(_:)(v17, v16);
    unint64_t v23 = v22;
    lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, MEMORY[0x263F04840]);
    unint64_t v25 = v45;
    uint64_t v24 = v46;
    dispatch thunk of HashFunction.init()();
    uint64_t v26 = v24;
    uint64_t v27 = v25;
    unint64_t v37 = v16;
    switch(v23 >> 62)
    {
      case 1uLL:
        if (v21 >> 32 < (int)v21) {
          __break(1u);
        }
        outlined copy of Data._Representation(v21, v23);
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v21, v21 >> 32);
        goto LABEL_8;
      case 2uLL:
        uint64_t v28 = *(void *)(v21 + 16);
        uint64_t v29 = *(void *)(v21 + 24);
        outlined copy of Data._Representation(v21, v23);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v28, v29);
        swift_release();
        swift_release();
LABEL_8:
        outlined consume of Data._Representation(v21, v23);
        goto LABEL_11;
      case 3uLL:
        memset(v54, 0, 14);
        goto LABEL_10;
      default:
        v54[0] = v21;
        LOWORD(v54[1]) = v23;
        BYTE2(v54[1]) = BYTE2(v23);
        BYTE3(v54[1]) = BYTE3(v23);
        BYTE4(v54[1]) = BYTE4(v23);
        BYTE5(v54[1]) = BYTE5(v23);
LABEL_10:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        outlined consume of Data._Representation(v21, v23);
LABEL_11:
        unint64_t v30 = v40;
        dispatch thunk of HashFunction.finalize()();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v26);
        outlined consume of Data._Representation(v21, v23);
        uint64_t v31 = v39;
        uint64_t v8 = v35;
        Insecure.MD5Digest.withUnsafeBytes<A>(_:)();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v43);
        uint64_t v9 = v36;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v7, v31, v8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
        swift_bridgeObjectRelease();
        break;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    UUID.init()();
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v53, v7, v8);
  }
  type metadata accessor for Session();
  uint64_t v32 = Session.__allocating_init(supportedAssetBundleIdentifiers:useCaseID:onBehalfOfPID:parentOfOnBehalfOfPid:loggingIdentifier:sessionSetID:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t lazy protocol witness table accessor for type ResponseIterator and conformance ResponseIterator(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for TokenGenerationOverrides(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7CAB9C);
}

uint64_t sub_25F7CAB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationOverrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7CAC20);
}

uint64_t sub_25F7CAC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TokenGenerationOverrides()
{
  uint64_t result = type metadata singleton initialization cache for TokenGenerationOverrides;
  if (!type metadata singleton initialization cache for TokenGenerationOverrides) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TokenGenerationOverrides()
{
  type metadata accessor for Overridable<Bool>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Overridable<Bool>()
{
  if (!lazy cache variable for type metadata for Overridable<Bool>)
  {
    unint64_t v0 = type metadata accessor for Overridable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Overridable<Bool>);
    }
  }
}

unint64_t Prompt.turns()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v299 = (uint64_t)&v294 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  v298 = (char *)&v294 - v4;
  uint64_t v342 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v366 = *(void *)(v342 - 8);
  MEMORY[0x270FA5388](v342);
  v341 = (char *)&v294 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v350 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v363 = *(void *)(v350 - 8);
  MEMORY[0x270FA5388](v350);
  v349 = (char *)&v294 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v356 = type metadata accessor for Prompt.AttachmentContent();
  v362 = *(void (***)(char *, uint64_t))(v356 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v356);
  v315 = (char *)&v294 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v294 - v9;
  uint64_t v353 = type metadata accessor for Prompt.Turn.Segment(0);
  uint64_t v352 = *(void *)(v353 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v353);
  uint64_t v301 = (uint64_t)&v294 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v300 = (uint64_t *)((char *)&v294 - v14);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v348 = (uint64_t)&v294 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v347 = (uint64_t)&v294 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v344 = (uint64_t)&v294 - v20;
  MEMORY[0x270FA5388](v19);
  v343 = (uint64_t *)((char *)&v294 - v21);
  uint64_t v22 = type metadata accessor for Prompt.Attachment();
  uint64_t v354 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  v328 = (char *)&v294 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v361 = (char *)&v294 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v330 = (char *)&v294 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v331 = (char *)&v294 - v30;
  MEMORY[0x270FA5388](v29);
  v365 = (char *)&v294 - v31;
  v307 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v306 = *((void *)v307 - 1);
  uint64_t v32 = MEMORY[0x270FA5388](v307);
  uint64_t v303 = (uint64_t)&v294 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v295 = (uint64_t)&v294 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  v297 = (char *)&v294 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v296 = (uint64_t)&v294 - v39;
  MEMORY[0x270FA5388](v38);
  uint64_t v310 = (uint64_t)&v294 - v40;
  uint64_t v308 = 0;
  uint64_t v41 = type metadata accessor for Prompt.Delimiter();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  v333 = (char *)&v294 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  v322 = (char *)&v294 - v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  v316 = (char *)&v294 - v48;
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  v364 = (char *)&v294 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v53 = (char *)&v294 - v52;
  MEMORY[0x270FA5388](v51);
  uint64_t v55 = (char *)&v294 - v54;
  uint64_t v359 = v0;
  uint64_t v56 = Prompt.delimiters.getter();
  uint64_t v57 = v41;
  uint64_t v58 = *(void *)(v56 + 16);
  v360 = v10;
  unint64_t v371 = v22;
  uint64_t v367 = v57;
  uint64_t v357 = v42;
  if (v58)
  {
    uint64_t v61 = *(void (**)(void, void, void))(v42 + 16);
    uint64_t v59 = v42 + 16;
    uint64_t v60 = v61;
    unint64_t v62 = (*(unsigned __int8 *)(v59 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 64);
    unint64_t v358 = v56;
    unint64_t v63 = v56 + v62;
    uint64_t v64 = *(void *)(v59 + 56);
    v370 = (void *)MEMORY[0x263F8EE78];
    uint64_t v368 = v64;
    do
    {
      uint64_t v67 = v367;
      v60(v55, v63, v367);
      v60(v53, v55, v67);
      init(delimiter:) in TurnDelimiter #1 in Prompt.turns()((uint64_t)v53, (uint64_t *)&v372);
      (*(void (**)(char *, uint64_t))(v59 - 8))(v55, v67);
      int v68 = (int)v372;
      if (((unsigned __int16)v372 & 0xFF00) != 0x200)
      {
        long long v369 = v373;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v370 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v370[2] + 1, 1, v370);
        }
        unint64_t v70 = v370[2];
        unint64_t v69 = v370[3];
        if (v70 >= v69 >> 1) {
          v370 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v370);
        }
        uint64_t v65 = v370;
        v370[2] = v70 + 1;
        uint64_t v66 = &v65[3 * v70];
        *((unsigned char *)v66 + 32) = v68;
        *((unsigned char *)v66 + 33) = BYTE1(v68) & 1;
        *((unsigned char *)v66 + 34) = BYTE2(v68) & 1;
        *(_OWORD *)(v66 + 5) = v369;
        uint64_t v64 = v368;
      }
      v63 += v64;
      --v58;
    }
    while (v58);
    swift_bridgeObjectRelease();
    uint64_t v10 = v360;
  }
  else
  {
    swift_bridgeObjectRelease();
    v370 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v71 = v370[2];
  if (v71)
  {
    long long v72 = (unsigned __int8 *)(v370 + 4);
    uint64_t v73 = (char *)v370 + 34;
    uint64_t v74 = v370 + 5;
    uint64_t v75 = v370 + 6;
    long long v76 = v370 + 9;
    long long v77 = (void *)MEMORY[0x263F8EE78];
    uint64_t v78 = v71 - 1;
    uint64_t v79 = 1;
LABEL_14:
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = *v75;
    uint64_t v84 = *v74;
    char v85 = *v73;
    uint64_t v75 = &v76[3 * v79];
    int v86 = 2;
    unsigned int v87 = *v72;
    while (1)
    {
      uint64_t v88 = v87;
      int v89 = v85 & 1;
      if (v86 == 2)
      {
        uint64_t v90 = v84;
      }
      else
      {
        uint64_t v88 = v80;
        uint64_t v90 = v81;
      }
      if (v86 == 2) {
        uint64_t v91 = v83;
      }
      else {
        uint64_t v91 = v82;
      }
      if (v86 != 2) {
        int v89 = v86;
      }
      if (v87 != 4)
      {
        uint64_t v80 = v88;
        uint64_t v81 = v90;
        uint64_t v82 = v91;
        int v86 = v89;
      }
      if (v71 == v79) {
        break;
      }
      unsigned int v87 = *((unsigned __int8 *)v75 - 40);
      char v85 = *((unsigned char *)v75 - 38);
      uint64_t v84 = *(v75 - 4);
      uint64_t v83 = *(v75 - 3);
      if (v86 == 2)
      {
        int v86 = 2;
      }
      else if (*((unsigned char *)v75 - 39))
      {
        uint64_t v368 = v78;
        *(void *)&long long v369 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77, &demangling cache variable for type metadata for _ContiguousArrayStorage<TurnSpan #1 in Prompt.turns()>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
        }
        unint64_t v93 = v77[2];
        unint64_t v92 = v77[3];
        unint64_t v94 = v93 + 1;
        uint64_t v78 = v368;
        long long v76 = (void *)v369;
        if (v93 >= v92 >> 1)
        {
          unint64_t v358 = v93 + 1;
          uint64_t v96 = v77;
          unint64_t v97 = v93;
          uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v92 > 1), v93 + 1, 1, v96, &demangling cache variable for type metadata for _ContiguousArrayStorage<TurnSpan #1 in Prompt.turns()>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
          unint64_t v94 = v358;
          unint64_t v93 = v97;
          uint64_t v78 = v368;
          long long v76 = (void *)v369;
          long long v77 = v98;
        }
        v77[2] = v94;
        uint64_t v95 = &v77[6 * v93];
        *((unsigned char *)v95 + 32) = v80;
        v95[5] = v81;
        v95[6] = v84;
        v95[7] = v82;
        v95[8] = v83;
        *((unsigned char *)v95 + 72) = v86 & 1;
        if (v78 != v79)
        {
          long long v72 = (unsigned __int8 *)(v75 - 2);
          uint64_t v73 = (char *)v75 - 14;
          uint64_t v74 = v75 - 1;
          v79 += 2;
          goto LABEL_14;
        }
        break;
      }
      v75 += 3;
      ++v79;
    }
    uint64_t v10 = v360;
    unint64_t v99 = (unint64_t)v77;
  }
  else
  {
    unint64_t v99 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  unint64_t v100 = (unint64_t)v361;
  int64_t v311 = *(void *)(v99 + 16);
  if (!v311)
  {
    Prompt.string.getter();
    unint64_t v102 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_173;
    }
    goto LABEL_41;
  }
  uint64_t v101 = v357;
LABEL_44:
  unint64_t v309 = v99 + 32;
  v370 = (void *)(v354 + 16);
  *(void *)&long long v369 = v354 + 8;
  v329 = (void (**)(char *, char *, unint64_t))(v354 + 32);
  v346 = (uint64_t (**)(char *, unint64_t))(v362 + 11);
  int v345 = *MEMORY[0x263F7FB68];
  v327 = (void (**)(char *, unint64_t))(v362 + 1);
  v326 = (void (**)(char *, unint64_t))(v362 + 12);
  v325 = (void (**)(char *, char *, uint64_t))(v363 + 32);
  v324 = (void (**)(uint64_t, char *, uint64_t))(v363 + 16);
  v323 = (void (**)(char *, uint64_t))(v363 + 8);
  v362 = (void (**)(char *, uint64_t))(v101 + 8);
  uint64_t v363 = v101 + 16;
  v321 = (void (**)(char *, char *, uint64_t))(v101 + 32);
  v340 = (void (**)(char *, uint64_t))(v366 + 8);
  swift_bridgeObjectRetain();
  unint64_t v106 = 0;
  *(void *)&long long v107 = 136315138;
  long long v314 = v107;
  uint64_t v313 = MEMORY[0x263F8EE58] + 8;
  unint64_t v102 = MEMORY[0x263F8EE78];
  unint64_t v304 = v99;
  do
  {
    if (v106 >= *(void *)(v99 + 16)) {
      goto LABEL_171;
    }
    unint64_t v312 = v106;
    uint64_t v108 = (unsigned __int8 *)(v309 + 48 * v106);
    if (v108[40] == 1)
    {
      if (one-time initialization token for defaultSystemInstructions != -1) {
        swift_once();
      }
      uint64_t v109 = __swift_project_value_buffer((uint64_t)v307, (uint64_t)static Prompt.Turn.defaultSystemInstructions);
      outlined init with copy of Prompt.Turn.Segment(v109, v310, type metadata accessor for Prompt.Turn);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v102 + 16) + 1, 1, v102, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>, type metadata accessor for Prompt.Turn, type metadata accessor for Prompt.Turn);
      }
      unint64_t v111 = *(void *)(v102 + 16);
      unint64_t v110 = *(void *)(v102 + 24);
      uint64_t v112 = v102;
      if (v111 >= v110 >> 1) {
        uint64_t v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1, v102, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>, type metadata accessor for Prompt.Turn, type metadata accessor for Prompt.Turn);
      }
      *(void *)(v112 + 16) = v111 + 1;
      unint64_t v102 = v112;
      outlined init with take of Prompt.Turn.Segment(v310, v112+ ((*(unsigned __int8 *)(v306 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v306 + 80))+ *(void *)(v306 + 72) * v111, type metadata accessor for Prompt.Turn);
      goto LABEL_46;
    }
    unint64_t v305 = v102;
    uint64_t v339 = *v108;
    unint64_t v338 = *((void *)v108 + 1);
    uint64_t v337 = *((void *)v108 + 2);
    uint64_t v114 = *((void *)v108 + 3);
    uint64_t v113 = (void (*)(void, void, void))*((void *)v108 + 4);
    uint64_t v368 = v114;
    v355 = v113;
    unint64_t v102 = Prompt.attachments.getter();
    uint64_t v115 = (char *)MEMORY[0x263F8EE78];
    v372 = (char *)MEMORY[0x263F8EE78];
    uint64_t v366 = *(void *)(v102 + 16);
    if (!v366) {
      goto LABEL_71;
    }
    unint64_t v100 = 0;
    uint64_t v10 = v331;
    do
    {
      if (v100 >= *(void *)(v102 + 16))
      {
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
        goto LABEL_172;
      }
      unint64_t v117 = (*(unsigned __int8 *)(v354 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v354 + 80);
      uint64_t v118 = *(void *)(v354 + 72);
      uint64_t v119 = *(void (**)(void, void, void))(v354 + 16);
      uint64_t v120 = v365;
      unint64_t v99 = v371;
      v119(v365, v102 + v117 + v118 * v100, v371);
      uint64_t v121 = Prompt.Attachment.priority.getter();
      v119(v10, v120, v99);
      if (v368 >= v121)
      {
        uint64_t v116 = *(void (**)(char *, unint64_t))v369;
        (*(void (**)(char *, unint64_t))v369)(v10, v99);
LABEL_59:
        v116(v365, v99);
        goto LABEL_60;
      }
      uint64_t v122 = (void (**)(char *, unint64_t))v369;
      uint64_t v123 = Prompt.Attachment.priority.getter();
      uint64_t v116 = *v122;
      (*v122)(v10, v99);
      if (v123 >= (uint64_t)v355)
      {
        uint64_t v10 = v331;
        goto LABEL_59;
      }
      uint64_t v124 = *v329;
      (*v329)(v330, v365, v99);
      uint64_t v125 = v372;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v125 + 2) + 1, 1);
        uint64_t v125 = v372;
      }
      unint64_t v127 = *((void *)v125 + 2);
      unint64_t v126 = *((void *)v125 + 3);
      if (v127 >= v126 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v126 > 1, v127 + 1, 1);
        uint64_t v125 = v372;
      }
      *((void *)v125 + 2) = v127 + 1;
      v124(&v125[v117 + v127 * v118], v330, v371);
      v372 = v125;
      uint64_t v10 = v331;
LABEL_60:
      ++v100;
    }
    while (v366 != v100);
    uint64_t v115 = v372;
    unint64_t v100 = (unint64_t)v361;
    uint64_t v10 = v360;
LABEL_71:
    swift_bridgeObjectRelease();
    v372 = v115;
    swift_retain();
    uint64_t v128 = v308;
    specialized MutableCollection<>.sort(by:)((void **)&v372);
    unint64_t v99 = v356;
    if (v128)
    {
      swift_release();
      __break(1u);
      JUMPOUT(0x25F7CD9A4);
    }
    uint64_t v308 = 0;
    swift_release();
    uint64_t v129 = *((void *)v372 + 2);
    if (v129)
    {
      unint64_t v130 = (*(unsigned __int8 *)(v354 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v354 + 80);
      v336 = v372;
      uint64_t v131 = &v372[v130];
      uint64_t v366 = *(void *)(v354 + 72);
      unint64_t v102 = v338;
      unint64_t v133 = MEMORY[0x263F8EE78];
      v351 = *(char **)(v354 + 16);
      uint64_t v132 = (void (*)(void, void, void))v351;
      ((void (*)(unint64_t, char *, unint64_t))v351)(v100, &v372[v130], v371);
      while (1)
      {
        if (v102 != Prompt.Attachment.position.getter())
        {
          Prompt.string.getter();
          Prompt.string.getter();
          swift_bridgeObjectRelease();
          unint64_t v102 = String.index(_:offsetBy:)();
          swift_bridgeObjectRelease();
          Prompt.string.getter();
          unint64_t v100 = v135;
          Prompt.string.getter();
          swift_bridgeObjectRelease();
          Prompt.Attachment.position.getter();
          unint64_t v99 = String.index(_:offsetBy:)();
          swift_bridgeObjectRelease();
          Prompt.string.getter();
          if (v99 >> 14 < v102 >> 14) {
            goto LABEL_168;
          }
          uint64_t v136 = String.subscript.getter();
          uint64_t v138 = v137;
          uint64_t v140 = v139;
          uint64_t v142 = v141;
          swift_bridgeObjectRelease();
          uint64_t v143 = MEMORY[0x261200C90](v136, v138, v140, v142);
          uint64_t v145 = v144;
          swift_bridgeObjectRelease();
          long long v146 = v343;
          uint64_t *v343 = v143;
          v146[1] = v145;
          swift_storeEnumTagMultiPayload();
          outlined init with copy of Prompt.Turn.Segment((uint64_t)v146, v344, type metadata accessor for Prompt.Turn.Segment);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v133 + 16) + 1, 1, v133, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment);
          }
          unint64_t v99 = v356;
          unint64_t v100 = (unint64_t)v361;
          uint64_t v132 = (void (*)(void, void, void))v351;
          unint64_t v148 = *(void *)(v133 + 16);
          unint64_t v147 = *(void *)(v133 + 24);
          if (v148 >= v147 >> 1) {
            unint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v147 > 1, v148 + 1, 1, v133, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment);
          }
          *(void *)(v133 + 16) = v148 + 1;
          outlined init with take of Prompt.Turn.Segment(v344, v133+ ((*(unsigned __int8 *)(v352 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v352 + 80))+ *(void *)(v352 + 72) * v148, type metadata accessor for Prompt.Turn.Segment);
          outlined destroy of Prompt.Turn.Segment((uint64_t)v343, type metadata accessor for Prompt.Turn.Segment);
        }
        Prompt.Attachment.content.getter();
        int v149 = (*v346)(v10, v99);
        if (v149 == v345)
        {
          (*v326)(v10, v99);
          uint64_t v150 = v349;
          uint64_t v151 = v350;
          (*v325)(v349, v10, v350);
          uint64_t v152 = v347;
          (*v324)(v347, v150, v151);
          swift_storeEnumTagMultiPayload();
          outlined init with copy of Prompt.Turn.Segment(v152, v348, type metadata accessor for Prompt.Turn.Segment);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v133 + 16) + 1, 1, v133, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment);
          }
          unint64_t v154 = *(void *)(v133 + 16);
          unint64_t v153 = *(void *)(v133 + 24);
          unint64_t v100 = (unint64_t)v361;
          if (v154 >= v153 >> 1) {
            unint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v153 > 1, v154 + 1, 1, v133, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment);
          }
          *(void *)(v133 + 16) = v154 + 1;
          outlined init with take of Prompt.Turn.Segment(v348, v133+ ((*(unsigned __int8 *)(v352 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v352 + 80))+ *(void *)(v352 + 72) * v154, type metadata accessor for Prompt.Turn.Segment);
          outlined destroy of Prompt.Turn.Segment(v347, type metadata accessor for Prompt.Turn.Segment);
          (*v323)(v349, v350);
        }
        else
        {
          unint64_t v358 = v133;
          unint64_t v155 = v328;
          if (one-time initialization token for prompt != -1) {
            swift_once();
          }
          uint64_t v156 = type metadata accessor for Logger();
          __swift_project_value_buffer(v156, (uint64_t)static Log.prompt);
          unint64_t v157 = v371;
          v132(v155, v100, v371);
          uint64_t v158 = Logger.logObject.getter();
          os_log_type_t v159 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v158, v159))
          {
            uint64_t v160 = swift_slowAlloc();
            uint64_t v161 = (char *)swift_slowAlloc();
            v372 = v161;
            *(_DWORD *)uint64_t v160 = v314;
            Prompt.Attachment.content.getter();
            uint64_t v10 = v360;
            uint64_t v162 = String.init<A>(describing:)();
            *(void *)(v160 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v163, (uint64_t *)&v372);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, unint64_t))v369)(v155, v157);
            _os_log_impl(&dword_25F79F000, v158, v159, "Unknown prompt attachment type: %s", (uint8_t *)v160, 0xCu);
            swift_arrayDestroy();
            uint64_t v164 = v161;
            uint64_t v132 = (void (*)(void, void, void))v351;
            MEMORY[0x261201C80](v164, -1, -1);
            uint64_t v165 = v160;
            unint64_t v99 = v356;
            MEMORY[0x261201C80](v165, -1, -1);
          }
          else
          {
            (*(void (**)(char *, unint64_t))v369)(v155, v157);
          }

          (*v327)(v10, v99);
          unint64_t v100 = (unint64_t)v361;
          unint64_t v133 = v358;
        }
        unint64_t v102 = Prompt.Attachment.position.getter();
        unint64_t v134 = v371;
        (*(void (**)(unint64_t, unint64_t))v369)(v100, v371);
        v131 += v366;
        if (!--v129) {
          break;
        }
        v132(v100, v131, v134);
      }
      swift_release();
    }
    else
    {
      swift_release();
      unint64_t v133 = MEMORY[0x263F8EE78];
      unint64_t v102 = v338;
    }
    uint64_t v166 = v316;
    if (v102 != v337)
    {
      unint64_t v100 = v337;
      Prompt.string.getter();
      Prompt.string.getter();
      swift_bridgeObjectRelease();
      unint64_t v102 = String.index(_:offsetBy:)();
      swift_bridgeObjectRelease();
      Prompt.string.getter();
      unint64_t v99 = v167;
      Prompt.string.getter();
      swift_bridgeObjectRelease();
      unint64_t v168 = String.index(_:offsetBy:)();
      swift_bridgeObjectRelease();
      Prompt.string.getter();
      if (v168 >> 14 >= v102 >> 14)
      {
        uint64_t v169 = String.subscript.getter();
        uint64_t v171 = v170;
        unint64_t v99 = v172;
        uint64_t v174 = v173;
        swift_bridgeObjectRelease();
        uint64_t v175 = MEMORY[0x261200C90](v169, v171, v99, v174);
        uint64_t v177 = v176;
        swift_bridgeObjectRelease();
        v178 = v300;
        uint64_t *v300 = v175;
        v178[1] = v177;
        swift_storeEnumTagMultiPayload();
        outlined init with copy of Prompt.Turn.Segment((uint64_t)v178, v301, type metadata accessor for Prompt.Turn.Segment);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v133 + 16) + 1, 1, v133, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment);
        }
        unint64_t v180 = *(void *)(v133 + 16);
        unint64_t v179 = *(void *)(v133 + 24);
        unint64_t v102 = v180 + 1;
        unint64_t v100 = (unint64_t)v361;
        if (v180 >= v179 >> 1) {
          unint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v179 > 1, v180 + 1, 1, v133, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment);
        }
        *(void *)(v133 + 16) = v102;
        outlined init with take of Prompt.Turn.Segment(v301, v133+ ((*(unsigned __int8 *)(v352 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v352 + 80))+ *(void *)(v352 + 72) * v180, type metadata accessor for Prompt.Turn.Segment);
        outlined destroy of Prompt.Turn.Segment((uint64_t)v300, type metadata accessor for Prompt.Turn.Segment);
        goto LABEL_104;
      }
LABEL_172:
      __break(1u);
LABEL_173:
      unint64_t v99 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v99 + 16) + 1, 1, (void *)v99, &demangling cache variable for type metadata for _ContiguousArrayStorage<TurnSpan #1 in Prompt.turns()>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
LABEL_41:
      unint64_t v104 = *(void *)(v99 + 16);
      unint64_t v103 = *(void *)(v99 + 24);
      int64_t v311 = v104 + 1;
      uint64_t v101 = v357;
      if (v104 >= v103 >> 1)
      {
        v293 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v103 > 1), v311, 1, (void *)v99, &demangling cache variable for type metadata for _ContiguousArrayStorage<TurnSpan #1 in Prompt.turns()>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
        uint64_t v101 = v357;
        unint64_t v99 = (unint64_t)v293;
      }
      *(void *)(v99 + 16) = v311;
      unint64_t v105 = v99 + 48 * v104;
      *(unsigned char *)(v105 + 32) = 2;
      *(void *)(v105 + 40) = 0;
      *(void *)(v105 + 48) = v102;
      *(_OWORD *)(v105 + 56) = xmmword_25F91D130;
      *(unsigned char *)(v105 + 72) = 0;
      goto LABEL_44;
    }
LABEL_104:
    unint64_t v358 = v133;
    uint64_t v181 = Prompt.delimiters.getter();
    v372 = (char *)MEMORY[0x263F8EE78];
    uint64_t v366 = *(void *)(v181 + 16);
    if (v366)
    {
      unint64_t v100 = 0;
      uint64_t v182 = v357;
      uint64_t v183 = v367;
      v351 = (char *)v181;
      while (1)
      {
        if (v100 >= *(void *)(v181 + 16)) {
          goto LABEL_167;
        }
        unint64_t v102 = (unint64_t)v166;
        unint64_t v99 = (*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80);
        uint64_t v185 = *(void *)(v182 + 72);
        v186 = *(void (**)(void, void, void))(v182 + 16);
        v187 = v364;
        v186(v364, v181 + v99 + v185 * v100, v183);
        uint64_t v188 = v183;
        uint64_t v189 = Prompt.Delimiter.priority.getter();
        v186(v166, v187, v188);
        v190 = v362;
        if (v189 < v368)
        {
          v184 = *v362;
          (*v362)(v166, v188);
          uint64_t v183 = v188;
        }
        else
        {
          uint64_t v191 = Prompt.Delimiter.priority.getter();
          v184 = *v190;
          (*v190)(v166, v188);
          if ((uint64_t)v355 >= v191)
          {
            v192 = *v321;
            (*v321)(v322, v364, v188);
            v193 = v372;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v193 + 2) + 1, 1);
              v193 = v372;
            }
            uint64_t v10 = v360;
            unint64_t v195 = *((void *)v193 + 2);
            unint64_t v194 = *((void *)v193 + 3);
            if (v195 >= v194 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v194 > 1, v195 + 1, 1);
              v193 = v372;
            }
            *((void *)v193 + 2) = v195 + 1;
            uint64_t v196 = v367;
            v192(&v193[v99 + v195 * v185], v322, v367);
            v372 = v193;
            uint64_t v183 = v196;
            uint64_t v166 = v316;
            goto LABEL_108;
          }
          uint64_t v183 = v188;
        }
        v184(v364, v183);
        uint64_t v10 = v360;
LABEL_108:
        uint64_t v181 = (uint64_t)v351;
        ++v100;
        uint64_t v182 = v357;
        if (v366 == v100)
        {
          v197 = v372;
          unint64_t v100 = (unint64_t)v361;
          goto LABEL_120;
        }
      }
    }
    v197 = (char *)MEMORY[0x263F8EE78];
LABEL_120:
    swift_bridgeObjectRelease();
    uint64_t v198 = *((void *)v197 + 2);
    v199 = v333;
    if (v198)
    {
      uint64_t v200 = 0;
      v201 = v197;
      v202 = 0;
      uint64_t v366 = 0;
      uint64_t v335 = 0;
      v336 = 0;
      uint64_t v337 = 0;
      unint64_t v338 = 0;
      unint64_t v203 = (*(unsigned __int8 *)(v357 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v357 + 80);
      v302 = v201;
      uint64_t v10 = (char *)v201 + v203;
      v351 = *(char **)(v357 + 72);
      v355 = *(void (**)(void, void, void))(v357 + 16);
      BOOL v332 = v339 != 1;
      LODWORD(v368) = 1;
      char v204 = 1;
      v334 = (void *)MEMORY[0x263F8EE78];
      do
      {
        v355(v199, v10, v367);
        if (v202)
        {
          if ((v204 & 1) == 0)
          {
            Prompt.string.getter();
            Prompt.string.getter();
            swift_bridgeObjectRelease();
            unint64_t v102 = String.index(_:offsetBy:)();
            swift_bridgeObjectRelease();
            Prompt.string.getter();
            unint64_t v100 = v205;
            Prompt.string.getter();
            swift_bridgeObjectRelease();
            Prompt.Delimiter.position.getter();
            unint64_t v99 = String.index(_:offsetBy:)();
            swift_bridgeObjectRelease();
            Prompt.string.getter();
            if (v99 >> 14 < v102 >> 14) {
              goto LABEL_169;
            }
            uint64_t v206 = String.subscript.getter();
            uint64_t v208 = v207;
            uint64_t v210 = v209;
            uint64_t v212 = v211;
            swift_bridgeObjectRelease();
            MEMORY[0x261200C90](v206, v208, v210, v212);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            Prompt.ToolCall.init(id:text:)(v200, (uint64_t)v202, (uint64_t)&v372);
            uint64_t v213 = v373;
            if ((void)v373)
            {
              v320 = v372;
              uint64_t v214 = *((void *)&v373 + 1);
              uint64_t v215 = v374;
              uint64_t v216 = v376;
              uint64_t v318 = v375;
              uint64_t v218 = v377;
              unint64_t v217 = v378;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unint64_t v317 = v217;
              outlined copy of Data?(v218, v217);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v319 = v214;
              if (isUniquelyReferenced_nonNull_native) {
                v220 = v334;
              }
              else {
                v220 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v334[2] + 1, 1, v334);
              }
              unint64_t v222 = v220[2];
              unint64_t v221 = v220[3];
              if (v222 >= v221 >> 1) {
                v220 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v221 > 1), v222 + 1, 1, v220);
              }
              v220[2] = v222 + 1;
              v334 = v220;
              v223 = &v220[8 * v222];
              uint64_t v224 = (uint64_t)v320;
              v223[4] = v320;
              v223[5] = v213;
              uint64_t v225 = v319;
              v223[6] = v319;
              v223[7] = v215;
              uint64_t v226 = v318;
              v223[8] = v318;
              v223[9] = v216;
              unint64_t v227 = v317;
              v223[10] = v218;
              v223[11] = v227;
              outlined consume of Prompt.ToolCall?(v224, v213, v225, v215, v226, v216, v218, v227);
            }
            v199 = v333;
          }
          if (v368)
          {
            swift_bridgeObjectRelease();
            uint64_t v228 = 0;
            uint64_t v366 = 0;
            LODWORD(v368) = 1;
            char v204 = 1;
          }
          else
          {
            outlined consume of Prompt.ToolCallResult?(v335, (uint64_t)v336);
            Prompt.string.getter();
            Prompt.string.getter();
            swift_bridgeObjectRelease();
            unint64_t v102 = String.index(_:offsetBy:)();
            swift_bridgeObjectRelease();
            Prompt.string.getter();
            unint64_t v100 = v229;
            Prompt.string.getter();
            swift_bridgeObjectRelease();
            Prompt.Delimiter.position.getter();
            unint64_t v99 = String.index(_:offsetBy:)();
            swift_bridgeObjectRelease();
            Prompt.string.getter();
            if (v99 >> 14 < v102 >> 14) {
              goto LABEL_170;
            }
            uint64_t v230 = String.subscript.getter();
            uint64_t v232 = v231;
            uint64_t v234 = v233;
            uint64_t v236 = v235;
            swift_bridgeObjectRelease();
            uint64_t v337 = MEMORY[0x261200C90](v230, v232, v234, v236);
            unint64_t v338 = v237;
            swift_bridgeObjectRelease();
            uint64_t v228 = 0;
            uint64_t v366 = 0;
            LODWORD(v368) = 1;
            char v204 = 1;
            uint64_t v335 = v200;
            v336 = v202;
            v199 = v333;
          }
        }
        else
        {
          uint64_t v228 = v200;
        }
        v238 = v341;
        Prompt.Delimiter.token.getter();
        uint64_t v239 = Prompt.SpecialToken.instance.getter();
        v202 = v240;
        (*v340)(v238, v342);
        if (v202)
        {
          swift_bridgeObjectRelease();
          uint64_t v241 = Prompt.Delimiter.position.getter();
          (*v362)(v199, v367);
          uint64_t v242 = v366;
          if (v339 != 1) {
            uint64_t v242 = v241;
          }
          uint64_t v366 = v242;
          LODWORD(v368) = (v339 == 1) & v368;
          v204 &= v332;
          uint64_t v228 = v239;
        }
        else
        {
          (*v362)(v199, v367);
        }
        uint64_t v10 = &v351[(void)v10];
        uint64_t v200 = v228;
        --v198;
      }
      while (v198);
      swift_release();
      uint64_t v10 = v360;
      unint64_t v100 = (unint64_t)v361;
      unint64_t v243 = v338;
      uint64_t v198 = v337;
      v244 = v336;
      uint64_t v245 = v335;
    }
    else
    {
      swift_release();
      uint64_t v245 = 0;
      v244 = 0;
      unint64_t v243 = 0;
      v334 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    unint64_t v99 = v304;
    switch(v339)
    {
      case 1:
        outlined consume of Prompt.ToolCallResult?(v245, (uint64_t)v244);
        v271 = v334;
        if (v334[2])
        {
          swift_bridgeObjectRelease();
          uint64_t v272 = type metadata accessor for Locale();
          v273 = *(void (**)(void, void, void, void))(*(void *)(v272 - 8) + 56);
          uint64_t v274 = (uint64_t)v298;
          v273(v298, 1, 1, v272);
          uint64_t v275 = v299;
          outlined init with copy of Locale?(v274, v299);
          v276 = v307;
          v277 = v297;
          uint64_t v278 = (uint64_t)&v297[v307[5]];
          v273(v278, 1, 1, v272);
          uint64_t v279 = v276[9];
          unsigned char *v277 = 1;
          *(void *)&v277[v276[6]] = MEMORY[0x263F8EE78];
          *(void *)&v277[v276[8]] = v271;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v286 = type metadata accessor for Locale();
          v287 = *(void (**)(void, void, void, void))(*(void *)(v286 - 8) + 56);
          uint64_t v274 = (uint64_t)v298;
          v287(v298, 1, 1, v286);
          uint64_t v275 = v299;
          outlined init with copy of Locale?(v274, v299);
          v276 = v307;
          v277 = v297;
          uint64_t v278 = (uint64_t)&v297[v307[5]];
          v287(v278, 1, 1, v286);
          uint64_t v279 = v276[9];
          unsigned char *v277 = 1;
          *(void *)&v277[v276[6]] = v358;
          *(void *)&v277[v276[8]] = MEMORY[0x263F8EE78];
        }
        v280 = &v277[v279];
        _OWORD *v280 = 0u;
        v280[1] = 0u;
        v277[v276[7]] = 0;
        swift_bridgeObjectRetain();
        outlined assign with take of Locale?(v275, v278);
        uint64_t v281 = v295;
        outlined init with take of Prompt.Turn.Segment((uint64_t)v277, v295, type metadata accessor for Prompt.Turn);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v274, &demangling cache variable for type metadata for Locale?);
        swift_bridgeObjectRelease();
        uint64_t v257 = v296;
        outlined init with take of Prompt.Turn.Segment(v281, v296, type metadata accessor for Prompt.Turn);
        goto LABEL_160;
      case 2:
        outlined consume of Prompt.ToolCallResult?(v245, (uint64_t)v244);
        swift_bridgeObjectRelease();
        uint64_t v254 = type metadata accessor for Locale();
        v255 = *(void (**)(void, void, void, void))(*(void *)(v254 - 8) + 56);
        uint64_t v248 = (uint64_t)v298;
        v255(v298, 1, 1, v254);
        uint64_t v249 = v299;
        outlined init with copy of Locale?(v248, v299);
        v250 = v307;
        v251 = v297;
        uint64_t v252 = (uint64_t)&v297[v307[5]];
        v255(v252, 1, 1, v254);
        uint64_t v253 = v250[9];
        unsigned char *v251 = 2;
        goto LABEL_149;
      case 3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v244)
        {
          uint64_t v258 = type metadata accessor for Locale();
          unint64_t v338 = v243;
          uint64_t v337 = v198;
          uint64_t v259 = (uint64_t)v244;
          uint64_t v260 = v258;
          v261 = *(void (**)(void, void, void, void))(*(void *)(v258 - 8) + 56);
          uint64_t v262 = (uint64_t)v298;
          v261(v298, 1, 1, v258);
          uint64_t v263 = v299;
          outlined init with copy of Locale?(v262, v299);
          v264 = v307;
          uint64_t v265 = v245;
          v266 = v297;
          uint64_t v267 = (uint64_t)&v297[v307[5]];
          v261(v267, 1, 1, v260);
          v268 = (uint64_t *)&v266[v264[9]];
          unsigned char *v266 = 3;
          uint64_t v269 = MEMORY[0x263F8EE78];
          *(void *)&v266[v264[6]] = MEMORY[0x263F8EE78];
          *(void *)&v266[v264[8]] = v269;
          uint64_t *v268 = v265;
          v268[1] = v259;
          unint64_t v270 = v338;
          v268[2] = v337;
          v268[3] = v270;
          v266[v264[7]] = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined assign with take of Locale?(v263, v267);
          uint64_t v257 = v296;
          outlined init with take of Prompt.Turn.Segment((uint64_t)v266, v296, type metadata accessor for Prompt.Turn);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(v262, &demangling cache variable for type metadata for Locale?);
          outlined consume of Prompt.ToolCallResult?(v265, v259);
LABEL_160:
          outlined init with copy of Prompt.Turn.Segment(v257, v303, type metadata accessor for Prompt.Turn);
          unint64_t v288 = v305;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v288 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v288 + 16) + 1, 1, v288, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>, type metadata accessor for Prompt.Turn, type metadata accessor for Prompt.Turn);
          }
          unint64_t v100 = (unint64_t)v361;
          unint64_t v99 = v304;
          uint64_t v10 = v360;
          unint64_t v290 = *(void *)(v288 + 16);
          unint64_t v289 = *(void *)(v288 + 24);
          uint64_t v291 = v288;
          if (v290 >= v289 >> 1) {
            uint64_t v291 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v289 > 1, v290 + 1, 1, v288, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>, type metadata accessor for Prompt.Turn, type metadata accessor for Prompt.Turn);
          }
          *(void *)(v291 + 16) = v290 + 1;
          unint64_t v102 = v291;
          outlined init with take of Prompt.Turn.Segment(v303, v291+ ((*(unsigned __int8 *)(v306 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v306 + 80))+ *(void *)(v306 + 72) * v290, type metadata accessor for Prompt.Turn);
          outlined destroy of Prompt.Turn.Segment(v257, type metadata accessor for Prompt.Turn);
        }
        else
        {
          if (one-time initialization token for prompt != -1) {
            swift_once();
          }
          uint64_t v282 = type metadata accessor for Logger();
          __swift_project_value_buffer(v282, (uint64_t)static Log.prompt);
          v283 = Logger.logObject.getter();
          os_log_type_t v284 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v283, v284))
          {
            v285 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v285 = 0;
            _os_log_impl(&dword_25F79F000, v283, v284, "Role was tool, but no tool result was found. Prompt is malformed.", v285, 2u);
            MEMORY[0x261201C80](v285, -1, -1);
          }

          unint64_t v102 = v305;
        }
        break;
      default:
        outlined consume of Prompt.ToolCallResult?(v245, (uint64_t)v244);
        swift_bridgeObjectRelease();
        uint64_t v246 = type metadata accessor for Locale();
        v247 = *(void (**)(void, void, void, void))(*(void *)(v246 - 8) + 56);
        uint64_t v248 = (uint64_t)v298;
        v247(v298, 1, 1, v246);
        uint64_t v249 = v299;
        outlined init with copy of Locale?(v248, v299);
        v250 = v307;
        v251 = v297;
        uint64_t v252 = (uint64_t)&v297[v307[5]];
        v247(v252, 1, 1, v246);
        uint64_t v253 = v250[9];
        unsigned char *v251 = 0;
LABEL_149:
        *(void *)&v251[v250[6]] = v358;
        *(void *)&v251[v250[8]] = MEMORY[0x263F8EE78];
        v256 = &v251[v253];
        _OWORD *v256 = 0u;
        v256[1] = 0u;
        v251[v250[7]] = 0;
        swift_bridgeObjectRetain();
        outlined assign with take of Locale?(v249, v252);
        uint64_t v257 = v296;
        outlined init with take of Prompt.Turn.Segment((uint64_t)v251, v296, type metadata accessor for Prompt.Turn);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?(v248, &demangling cache variable for type metadata for Locale?);
        swift_bridgeObjectRelease();
        goto LABEL_160;
    }
LABEL_46:
    unint64_t v106 = v312 + 1;
  }
  while (v312 + 1 != v311);
  swift_bridgeObjectRelease_n();
  return v102;
}

BOOL static Prompt.Turn.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Prompt.Turn.role.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Prompt.Turn.role.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Prompt.Turn.role.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Prompt.Turn(0) + 20);
  return outlined init with copy of Locale?(v3, a1);
}

uint64_t Prompt.Turn.locale.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Prompt.Turn(0) + 20);
  return outlined assign with take of Locale?(a1, v3);
}

uint64_t (*Prompt.Turn.locale.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.content.getter()
{
  uint64_t v21 = type metadata accessor for Prompt.Turn.Segment(0);
  uint64_t v1 = *(void *)(v21 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v21);
  uint64_t v4 = (uint64_t *)((char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = *(void *)(v0 + *(int *)(type metadata accessor for Prompt.Turn(0) + 24));
  int64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (v8)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v10 = v7 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    uint64_t v11 = *(void *)(v1 + 72);
    uint64_t v19 = v7;
    uint64_t v20 = v11;
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v10, (uint64_t)v6, type metadata accessor for Prompt.Turn.Segment);
      outlined init with copy of Prompt.Turn.Segment((uint64_t)v6, (uint64_t)v4, type metadata accessor for Prompt.Turn.Segment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined destroy of Prompt.Turn.Segment((uint64_t)v4, type metadata accessor for Prompt.Turn.Segment);
        uint64_t v12 = 0;
        unint64_t v13 = 0xE000000000000000;
      }
      else
      {
        uint64_t v12 = *v4;
        unint64_t v13 = v4[1];
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v6, type metadata accessor for Prompt.Turn.Segment);
      uint64_t v9 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
        uint64_t v9 = v22;
      }
      unint64_t v15 = *(void *)(v9 + 16);
      unint64_t v14 = *(void *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v9 = v22;
      }
      *(void *)(v9 + 16) = v15 + 1;
      uint64_t v16 = v9 + 16 * v15;
      *(void *)(v16 + 32) = v12;
      *(void *)(v16 + 40) = v13;
      v10 += v20;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t key path setter for Prompt.Turn.content : Prompt.Turn(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>);
  uint64_t v5 = *(void *)(type metadata accessor for Prompt.Turn.Segment(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25F91CC30;
  int64_t v8 = (void *)(v7 + v6);
  void *v8 = v4;
  v8[1] = v3;
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(int *)(type metadata accessor for Prompt.Turn(0) + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + v9) = v7;
  return result;
}

uint64_t Prompt.Turn.content.setter(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>);
  uint64_t v5 = *(void *)(type metadata accessor for Prompt.Turn.Segment(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25F91CC30;
  int64_t v8 = (void *)(v7 + v6);
  void *v8 = a1;
  v8[1] = a2;
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(int *)(type metadata accessor for Prompt.Turn(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v9) = v7;
  return result;
}

uint64_t (*Prompt.Turn.content.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = Prompt.Turn.content.getter();
  a1[1] = v3;
  return Prompt.Turn.content.modify;
}

uint64_t Prompt.Turn.content.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>);
  uint64_t v6 = *(void *)(type metadata accessor for Prompt.Turn.Segment(0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_25F91CC30;
  uint64_t v9 = (void *)(v8 + v7);
  *uint64_t v9 = v5;
  v9[1] = v3;
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = *(int *)(type metadata accessor for Prompt.Turn(0) + 24);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v4 + v10) = v8;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v4 + v10) = v8;
  }
  return result;
}

uint64_t Prompt.Turn.segments.getter()
{
  type metadata accessor for Prompt.Turn(0);
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Turn.segments.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Prompt.Turn(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Prompt.Turn.segments.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.toolCalls.getter()
{
  type metadata accessor for Prompt.Turn(0);
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Turn.toolCalls.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Prompt.Turn(0) + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Prompt.Turn.toolCalls.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.toolResult.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Prompt.Turn(0) + 36));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return outlined copy of Prompt.ToolCallResult?(v4, v5);
}

__n128 Prompt.Turn.toolResult.setter(__n128 *a1)
{
  __n128 v6 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Prompt.Turn(0) + 36));
  outlined consume of Prompt.ToolCallResult?(*v4, v4[1]);
  __n128 result = v6;
  *(__n128 *)uint64_t v4 = v6;
  long long v4[2] = v2;
  v4[3] = v3;
  return result;
}

uint64_t (*Prompt.Turn.toolResult.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t static Prompt.Turn.user(segments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Prompt.Turn(0);
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = type metadata accessor for Locale();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  outlined init with copy of Locale?((uint64_t)v13, (uint64_t)v11);
  uint64_t v16 = (uint64_t)&v7[v5[7]];
  v15((char *)v16, 1, 1, v14);
  uint64_t v17 = v5[11];
  *uint64_t v7 = 2;
  *(void *)&v7[v5[8]] = a1;
  uint64_t v18 = &v7[v17];
  *(void *)&v7[v5[10]] = MEMORY[0x263F8EE78];
  *uint64_t v18 = 0u;
  v18[1] = 0u;
  v7[v5[9]] = 0;
  swift_bridgeObjectRetain();
  outlined assign with take of Locale?((uint64_t)v11, v16);
  outlined init with take of Prompt.Turn.Segment((uint64_t)v7, a2, type metadata accessor for Prompt.Turn);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.Turn.user(segments:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a2, (uint64_t)v8);
  uint64_t v9 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v10 = (uint64_t)&a3[v9[5]];
  uint64_t v11 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v9[9];
  *a3 = 2;
  *(void *)&a3[v9[6]] = a1;
  unint64_t v13 = &a3[v12];
  *(void *)&a3[v9[8]] = MEMORY[0x263F8EE78];
  *unint64_t v13 = 0u;
  v13[1] = 0u;
  a3[v9[7]] = 0;
  swift_bridgeObjectRetain();
  return outlined assign with take of Locale?((uint64_t)v8, v10);
}

uint64_t static Prompt.Turn.response(segments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for Prompt.Turn(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  outlined init with copy of Locale?((uint64_t)v12, (uint64_t)v10);
  uint64_t v15 = (uint64_t)&v6[v4[7]];
  v14((char *)v15, 1, 1, v13);
  uint64_t v16 = v4[11];
  unsigned char *v6 = 1;
  *(void *)&v6[v4[8]] = a1;
  uint64_t v17 = &v6[v16];
  *(void *)&v6[v4[10]] = MEMORY[0x263F8EE78];
  *uint64_t v17 = 0u;
  v17[1] = 0u;
  v6[v4[9]] = 0;
  swift_bridgeObjectRetain();
  outlined assign with take of Locale?((uint64_t)v10, v15);
  outlined init with take of Prompt.Turn.Segment((uint64_t)v6, v20, type metadata accessor for Prompt.Turn);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.Turn.response(segments:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a2, (uint64_t)v8);
  uint64_t v9 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v10 = (uint64_t)&a3[v9[5]];
  uint64_t v11 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v9[9];
  *a3 = 1;
  *(void *)&a3[v9[6]] = a1;
  uint64_t v13 = &a3[v12];
  *(void *)&a3[v9[8]] = MEMORY[0x263F8EE78];
  *uint64_t v13 = 0u;
  v13[1] = 0u;
  a3[v9[7]] = 0;
  swift_bridgeObjectRetain();
  return outlined assign with take of Locale?((uint64_t)v8, v10);
}

uint64_t static Prompt.Turn.instructions(segments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Prompt.Turn(0);
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = type metadata accessor for Locale();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  outlined init with copy of Locale?((uint64_t)v13, (uint64_t)v11);
  uint64_t v16 = (uint64_t)&v7[v5[7]];
  v15((char *)v16, 1, 1, v14);
  uint64_t v17 = v5[11];
  *uint64_t v7 = 0;
  *(void *)&v7[v5[8]] = a1;
  uint64_t v18 = &v7[v17];
  *(void *)&v7[v5[10]] = MEMORY[0x263F8EE78];
  *uint64_t v18 = 0u;
  v18[1] = 0u;
  v7[v5[9]] = 0;
  swift_bridgeObjectRetain();
  outlined assign with take of Locale?((uint64_t)v11, v16);
  outlined init with take of Prompt.Turn.Segment((uint64_t)v7, a2, type metadata accessor for Prompt.Turn);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.Turn.instructions(segments:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a2, (uint64_t)v8);
  uint64_t v9 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v10 = (uint64_t)&a3[v9[5]];
  uint64_t v11 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v9[9];
  *a3 = 0;
  *(void *)&a3[v9[6]] = a1;
  uint64_t v13 = &a3[v12];
  *(void *)&a3[v9[8]] = MEMORY[0x263F8EE78];
  *uint64_t v13 = 0u;
  v13[1] = 0u;
  a3[v9[7]] = 0;
  swift_bridgeObjectRetain();
  return outlined assign with take of Locale?((uint64_t)v8, v10);
}

uint64_t static Prompt.Turn.toolCalls(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = type metadata accessor for Prompt.Turn(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  outlined init with copy of Locale?((uint64_t)v12, (uint64_t)v10);
  uint64_t v15 = (uint64_t)&v6[v4[7]];
  v14((char *)v15, 1, 1, v13);
  uint64_t v16 = &v6[v4[11]];
  unsigned char *v6 = 1;
  *(void *)&v6[v4[8]] = MEMORY[0x263F8EE78];
  *(void *)&v6[v4[10]] = a1;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  v6[v4[9]] = 0;
  swift_bridgeObjectRetain();
  outlined assign with take of Locale?((uint64_t)v10, v15);
  outlined init with take of Prompt.Turn.Segment((uint64_t)v6, v19, type metadata accessor for Prompt.Turn);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.Turn.toolCalls(_:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a2, (uint64_t)v8);
  uint64_t v9 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v10 = (uint64_t)&a3[v9[5]];
  uint64_t v11 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = &a3[v9[9]];
  *a3 = 1;
  *(void *)&a3[v9[6]] = MEMORY[0x263F8EE78];
  *(void *)&a3[v9[8]] = a1;
  *uint64_t v12 = 0u;
  v12[1] = 0u;
  a3[v9[7]] = 0;
  swift_bridgeObjectRetain();
  return outlined assign with take of Locale?((uint64_t)v8, v10);
}

uint64_t static Prompt.Turn.toolCallResult(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for Prompt.Turn(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v15 = a1[2];
  uint64_t v16 = a1[3];
  uint64_t v24 = v15;
  uint64_t v25 = v13;
  uint64_t v17 = type metadata accessor for Locale();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v12, 1, 1, v17);
  outlined init with copy of Locale?((uint64_t)v12, (uint64_t)v10);
  uint64_t v19 = (uint64_t)&v6[v4[7]];
  v18((char *)v19, 1, 1, v17);
  uint64_t v20 = &v6[v4[11]];
  unsigned char *v6 = 3;
  uint64_t v21 = MEMORY[0x263F8EE78];
  *(void *)&v6[v4[8]] = MEMORY[0x263F8EE78];
  *(void *)&v6[v4[10]] = v21;
  *uint64_t v20 = v25;
  v20[1] = v14;
  v20[2] = v24;
  v20[3] = v16;
  v6[v4[9]] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of Locale?((uint64_t)v10, v19);
  outlined init with take of Prompt.Turn.Segment((uint64_t)v6, v26, type metadata accessor for Prompt.Turn);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for Locale?);
}

uint64_t static Prompt.Turn.toolCallResult(_:locale:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  outlined init with copy of Locale?(a2, (uint64_t)v8);
  uint64_t v13 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v14 = (uint64_t)&a3[v13[5]];
  uint64_t v15 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = &a3[v13[9]];
  *a3 = 3;
  uint64_t v17 = MEMORY[0x263F8EE78];
  *(void *)&a3[v13[6]] = MEMORY[0x263F8EE78];
  *(void *)&a3[v13[8]] = v17;
  *uint64_t v16 = v10;
  v16[1] = v9;
  v16[2] = v12;
  void v16[3] = v11;
  a3[v13[7]] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined assign with take of Locale?((uint64_t)v8, v14);
}

double Prompt.Turn.init(role:segments:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  char v5 = *a1;
  uint64_t v6 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v7 = &a3[v6[5]];
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v6[9];
  *a3 = v5;
  *(void *)&a3[v6[6]] = a2;
  uint64_t v10 = &a3[v9];
  a3[v6[7]] = 0;
  *(void *)&a3[v6[8]] = MEMORY[0x263F8EE78];
  double result = 0.0;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  return result;
}

double Prompt.Turn.init(role:content:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  char v7 = *a1;
  uint64_t v8 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v9 = &a4[v8[5]];
  uint64_t v10 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = &a4[v8[9]];
  *a4 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>);
  uint64_t v12 = *(void *)(type metadata accessor for Prompt.Turn.Segment(0) - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_25F91CC30;
  uint64_t v15 = (void *)(v14 + v13);
  *uint64_t v15 = a2;
  v15[1] = a3;
  swift_storeEnumTagMultiPayload();
  *(void *)&a4[v8[6]] = v14;
  a4[v8[7]] = 0;
  *(void *)&a4[v8[8]] = MEMORY[0x263F8EE78];
  double result = 0.0;
  *uint64_t v11 = 0u;
  v11[1] = 0u;
  return result;
}

uint64_t one-time initialization function for defaultSystemInstructions()
{
  uint64_t v0 = (int *)type metadata accessor for Prompt.Turn(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v3 - 8);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer((uint64_t)v0, static Prompt.Turn.defaultSystemInstructions);
  uint64_t v6 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static Prompt.Turn.defaultSystemInstructions);
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v5, 1, 1, v7);
  uint64_t v9 = (uint64_t)&v2[v0[5]];
  v8((char *)v9, 1, 1, v7);
  uint64_t v10 = &v2[v0[9]];
  *uint64_t v2 = 0;
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)&v2[v0[6]] = MEMORY[0x263F8EE78];
  *(void *)&v2[v0[8]] = v11;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  v2[v0[7]] = 1;
  outlined assign with take of Locale?((uint64_t)v5, v9);
  return outlined init with take of Prompt.Turn.Segment((uint64_t)v2, v6, type metadata accessor for Prompt.Turn);
}

uint64_t static Prompt.Turn.defaultSystemInstructions.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultSystemInstructions != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Prompt.Turn(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Prompt.Turn.defaultSystemInstructions);
  return outlined init with copy of Prompt.Turn.Segment(v3, a1, type metadata accessor for Prompt.Turn);
}

uint64_t static Prompt.Turn.defaultSystemInstructions(locale:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v6);
  uint64_t v7 = (int *)type metadata accessor for Prompt.Turn(0);
  uint64_t v8 = (uint64_t)&a2[v7[5]];
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = &a2[v7[9]];
  *a2 = 1;
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)&a2[v7[6]] = MEMORY[0x263F8EE78];
  *(void *)&a2[v7[8]] = v11;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  a2[v7[7]] = 1;
  return outlined assign with take of Locale?((uint64_t)v6, v8);
}

void Prompt.Turn.Role.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Prompt.Turn.Role.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.Turn.Role(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Prompt.Turn.Segment.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Prompt.Turn.Segment(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt.Turn.Segment(v0, (uint64_t)v7, type metadata accessor for Prompt.Turn.Segment);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment, MEMORY[0x263F7FB58]);
    dispatch thunk of Hashable.hash(into:)();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)();
    return swift_bridgeObjectRelease();
  }
}

Swift::Int Prompt.Turn.Segment.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Prompt.Turn.Segment(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of Prompt.Turn.Segment(v1, (uint64_t)v8, type metadata accessor for Prompt.Turn.Segment);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment, MEMORY[0x263F7FB58]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Turn.Segment()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of Prompt.Turn.Segment(v1, (uint64_t)v8, type metadata accessor for Prompt.Turn.Segment);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment, MEMORY[0x263F7FB58]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Prompt.Turn.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v1);
  uint64_t v11 = (int *)type metadata accessor for Prompt.Turn(0);
  outlined init with copy of Locale?((uint64_t)&v1[v11[5]], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v12 = *(void *)&v1[v11[6]];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v12);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2[v11[7]]);
  uint64_t v13 = *(void *)&v2[v11[8]];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t *)&v2[v11[9]];
  uint64_t v15 = v14[1];
  if (v15)
  {
    uint64_t v16 = *v14;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    String.hash(into:)();
    outlined consume of Prompt.ToolCallResult?(v16, v15);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int Prompt.Turn.hashValue.getter()
{
  Hasher.init(_seed:)();
  Prompt.Turn.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.Turn()
{
  Hasher.init(_seed:)();
  Prompt.Turn.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Turn()
{
  Hasher.init(_seed:)();
  Prompt.Turn.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t Prompt.ToolCall.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

{
  return MEMORY[0x270F58218]();
}

uint64_t Prompt.ToolCall.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Prompt.ToolCall.id.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.ToolCall.kind.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 Prompt.ToolCall.kind.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*Prompt.ToolCall.kind.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.ToolCall._userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of Data?(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t Prompt.ToolCall._userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 48), *(void *)(v2 + 56));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*Prompt.ToolCall._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

double Prompt.ToolCall.init(id:kind:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *a3;
  uint64_t v5 = *((void *)a3 + 2);
  uint64_t v6 = *((void *)a3 + 3);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(_OWORD *)(a4 + 16) = v4;
  *(void *)(a4 + 32) = v5;
  *(void *)(a4 + 40) = v6;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = xmmword_25F91CC60;
  return result;
}

uint64_t Prompt.ToolCall.init(id:text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v10 = String.data(using:allowLossyConversion:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v12 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v10, v12);
    swift_release();
    uint64_t v14 = v18[2];
    uint64_t v15 = v18[3];
    uint64_t v16 = v18[4];
    uint64_t v17 = v18[5];
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    *(void *)(a3 + 16) = v14;
    *(void *)(a3 + 24) = v15;
    *(void *)(a3 + 32) = v16;
    *(void *)(a3 + 40) = v17;
    *(_OWORD *)(a3 + 48) = xmmword_25F91CC60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  return result;
}

uint64_t Prompt.ToolCall.Kind.hash(into:)()
{
  Hasher._combine(_:)(0);
  String.hash(into:)();
  return String.hash(into:)();
}

uint64_t static Prompt.ToolCall.Function.== infix(_:_:)(void *a1, void *a2)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.ToolCall.Function.Envelope(a1, a2) & 1;
}

Swift::Int Prompt.ToolCall.Kind.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.ToolCall.Kind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt.ToolCall.Kind()
{
  Hasher._combine(_:)(0);
  String.hash(into:)();
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ToolCall.Kind()
{
  return Hasher._finalize()();
}

uint64_t (*Prompt.ToolCall.Function.name.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t (*Prompt.ToolCall.Function.arguments.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  if (*v0) {
    return 0x746E656D75677261;
  }
  else {
    return 1701667182;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Prompt.ToolCall.Function.Envelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Prompt.ToolCall.Function.Envelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance Prompt.ToolCall.Function.Envelope.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Prompt.ToolCall.Function.Envelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Prompt.ToolCall.Function.Envelope.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.ToolCall.Function.Envelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt.ToolCall.Function.Envelope()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ToolCall.Function.Envelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Prompt.ToolCall.Function.Envelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized Prompt.ToolCall.Function.Envelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Prompt.ToolCall.Function.Envelope(void *a1)
{
  return Prompt.ToolCall.Function.Envelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.ToolCall.Function.Envelope(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.ToolCall.Function(void *a1, void *a2)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.ToolCall.Function.Envelope(a1, a2) & 1;
}

void Prompt.ToolCall.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
}

Swift::Int Prompt.ToolCall.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ToolCall()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
  return Hasher._finalize()();
}

uint64_t Prompt.ToolCallResult.toolCallID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.ToolCallResult.toolCallID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Prompt.ToolCallResult.toolCallID.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.ToolCallResult.content.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Prompt.ToolCallResult.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Prompt.ToolCallResult.content.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.ToolCallResult.init(toolCallID:content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t static Prompt.ToolCallResult.== infix(_:_:)(void *a1, void *a2)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.ToolCall.Function.Envelope(a1, a2) & 1;
}

Swift::Int Prompt.ToolCall.Function.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt.ToolCall.Function()
{
  String.hash(into:)();
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ToolCall.Function()
{
  return Hasher._finalize()();
}

uint64_t static Prompt.transcript(turns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Prompt.StringInterpolation();
  MEMORY[0x270FA5388](v4 - 8);
  BOOL v6 = (char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v124 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v92 = (char *)v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Prompt();
  uint64_t v123 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v120 = (char *)v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for Prompt.Turn.Segment(0);
  uint64_t v93 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v122 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v97 = (char *)v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v106 = (char *)v91 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v96 = (char *)v91 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unint64_t v99 = (char *)v91 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v115 = (char *)v91 - v22;
  uint64_t v23 = type metadata accessor for Prompt.Turn(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v111 = (char *)v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v98 = (uint64_t)v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)v91 - v29;
  Prompt.init(stringLiteral:)();
  uint64_t v31 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  uint64_t v107 = *(void *)(a1 + 16);
  if (v107)
  {
    uint64_t v101 = v30;
    uint64_t v105 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    unint64_t v102 = (void (**)(char *, char *, uint64_t))(v13 + 32);
    uint64_t v104 = *(void *)(v24 + 72);
    uint64_t v118 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v119 = (void (**)(char *, uint64_t))(v123 + 8);
    uint64_t v112 = (void (**)(char *, uint64_t))(v124 + 8);
    uint64_t v113 = (void (**)(char *, uint64_t, uint64_t))(v124 + 32);
    v91[0] = a1;
    swift_bridgeObjectRetain();
    int v100 = 0;
    uint64_t v32 = 0;
    uint64_t v114 = (void *)0x800000025F92CA50;
    uint64_t v33 = v92;
    uint64_t v95 = v9;
    uint64_t v34 = v115;
    unint64_t v110 = (int *)v23;
    uint64_t v35 = v111;
    v91[1] = v6;
    uint64_t v103 = v7;
    uint64_t v116 = v12;
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v105 + v104 * v32, (uint64_t)v35, type metadata accessor for Prompt.Turn);
      if (v35[v110[7]] == 1)
      {
        static Prompt.SpecialToken.Chat.defaultInstructions(locale:)();
        static Prompt.+= infix(_:_:)();
        uint64_t v36 = v7;
        uint64_t v37 = *v118;
        (*v118)(v34, v12);
        uint64_t v35 = v111;
        static Prompt.SpecialToken.Chat.turnEnd(locale:)();
        static Prompt.+= infix(_:_:)();
        unint64_t v117 = v37;
        v37(v34, v12);
        uint64_t v7 = v36;
      }
      else
      {
        switch(*v35)
        {
          case 1:
            uint64_t v38 = v12;
            uint64_t v39 = v96;
            static Prompt.SpecialToken.Chat.response.getter();
            break;
          case 2:
            uint64_t v38 = v12;
            uint64_t v39 = v96;
            static Prompt.SpecialToken.Chat.user.getter();
            break;
          case 3:
            uint64_t v38 = v12;
            uint64_t v39 = v96;
            static Prompt.SpecialToken.Chat.tool.getter();
            break;
          default:
            uint64_t v38 = v12;
            uint64_t v39 = v96;
            static Prompt.SpecialToken.Chat.instructions.getter();
            break;
        }
        uint64_t v40 = *v102;
        uint64_t v41 = v99;
        (*v102)(v99, v39, v38);
        static Prompt.SpecialToken.Chat.user.getter();
        int v100 = MEMORY[0x2611FF240](v41, v34);
        uint64_t v42 = *v118;
        (*v118)(v34, v38);
        uint64_t v43 = v41;
        uint64_t v44 = v38;
        unint64_t v117 = v42;
        v42(v43, v38);
        uint64_t v45 = (uint64_t)v101;
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v101, &demangling cache variable for type metadata for Locale?);
        uint64_t v46 = (unsigned __int8 *)v111;
        uint64_t v108 = &v111[v110[5]];
        outlined init with copy of Locale?((uint64_t)v108, v45);
        uint64_t v47 = *v46;
        uint64_t v109 = v32;
        uint64_t v48 = v103;
        uint64_t v49 = v95;
        switch(v47)
        {
          case 1:
            uint64_t v50 = v97;
            static Prompt.SpecialToken.Chat.response.getter();
            break;
          case 2:
            uint64_t v50 = v97;
            static Prompt.SpecialToken.Chat.user.getter();
            break;
          case 3:
            uint64_t v50 = v97;
            static Prompt.SpecialToken.Chat.tool.getter();
            break;
          default:
            uint64_t v50 = v97;
            static Prompt.SpecialToken.Chat.instructions.getter();
            break;
        }
        v40(v106, v50, v44);
        outlined init with copy of Locale?((uint64_t)v108, v98);
        Prompt.SpecialToken.locale.setter();
        static Prompt.+= infix(_:_:)();
        uint64_t v51 = v110;
        uint64_t v52 = *(void *)&v111[v110[6]];
        uint64_t v53 = *(void *)(v52 + 16);
        if (v53)
        {
          uint64_t v54 = v93;
          uint64_t v55 = v52 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
          swift_bridgeObjectRetain();
          uint64_t v56 = *(void *)(v54 + 72);
          uint64_t v57 = (uint64_t)v122;
          do
          {
            outlined init with copy of Prompt.Turn.Segment(v55, v57, type metadata accessor for Prompt.Turn.Segment);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              (*v113)(v33, v57, v48);
              Prompt.StringInterpolation.init(literalCapacity:interpolationCount:)();
              v60._countAndFlagsBits = 0;
              v60._object = (void *)0xE000000000000000;
              String.append(_:)(v60);
              Prompt.StringInterpolation.appendInterpolation(image:)();
              v61._countAndFlagsBits = 0;
              v61._object = (void *)0xE000000000000000;
              String.append(_:)(v61);
              unint64_t v62 = v120;
              Prompt.init(stringInterpolation:)();
              MEMORY[0x2611FF4D0](a2, v62);
              unint64_t v63 = v62;
              uint64_t v57 = (uint64_t)v122;
              (*v119)(v63, v49);
              (*v112)(v33, v48);
            }
            else
            {
              uint64_t v58 = v120;
              Prompt.init(stringLiteral:)();
              MEMORY[0x2611FF4D0](a2, v58);
              uint64_t v59 = v58;
              uint64_t v57 = (uint64_t)v122;
              (*v119)(v59, v49);
            }
            v55 += v56;
            --v53;
          }
          while (v53);
          swift_bridgeObjectRelease();
          uint64_t v51 = v110;
        }
        uint64_t v64 = v51[8];
        uint64_t v65 = v111;
        uint64_t v34 = v115;
        uint64_t v66 = v116;
        uint64_t v32 = v109;
        if (*(void *)(*(void *)&v111[v64] + 16))
        {
          static Prompt.SpecialToken.ToolUse.actionStart.getter();
          static Prompt.+= infix(_:_:)();
          v117(v34, v66);
          uint64_t v67 = *(void *)(*(void *)&v65[v64] + 16);
          if (v67)
          {
            uint64_t v94 = swift_bridgeObjectRetain();
            int v68 = (uint64_t *)(v94 + 48);
            do
            {
              uint64_t v69 = *(v68 - 2);
              uint64_t v70 = *(v68 - 1);
              uint64_t v71 = (void *)v68[1];
              uint64_t v73 = v68[2];
              unint64_t v72 = v68[3];
              uint64_t v74 = v68[4];
              unint64_t v75 = v68[5];
              uint64_t v123 = *v68;
              uint64_t v124 = v74;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Data?(v74, v75);
              long long v76 = v115;
              MEMORY[0x2611FF320](v69, v70);
              static Prompt.+= infix(_:_:)();
              v117(v76, v116);
              uint64_t v129 = v73;
              unint64_t v130 = v72;
              uint64_t v127 = 34;
              unint64_t v128 = 0xE100000000000000;
              uint64_t v125 = 8796;
              unint64_t v126 = 0xE200000000000000;
              lazy protocol witness table accessor for type String and conformance String();
              uint64_t v77 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
              uint64_t v78 = a2;
              uint64_t v80 = v79;
              uint64_t v129 = 0;
              unint64_t v130 = 0xE000000000000000;
              _StringGuts.grow(_:)(33);
              swift_bridgeObjectRelease();
              uint64_t v129 = 0x3A22656D616E227BLL;
              unint64_t v130 = 0xEA00000000002220;
              swift_bridgeObjectRetain();
              v81._countAndFlagsBits = v123;
              v81._object = v71;
              String.append(_:)(v81);
              swift_bridgeObjectRelease();
              v82._countAndFlagsBits = 0xD000000000000011;
              v82._object = v114;
              String.append(_:)(v82);
              v83._countAndFlagsBits = v77;
              v83._object = v80;
              String.append(_:)(v83);
              a2 = v78;
              swift_bridgeObjectRelease();
              v84._countAndFlagsBits = 32034;
              v84._object = (void *)0xE200000000000000;
              String.append(_:)(v84);
              static Prompt.+= infix(_:_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of Data?(v124, v75);
              v68 += 8;
              --v67;
            }
            while (v67);
            swift_bridgeObjectRelease();
            uint64_t v33 = v92;
            uint64_t v66 = v116;
            uint64_t v51 = v110;
            uint64_t v32 = v109;
          }
          uint64_t v34 = v115;
          static Prompt.SpecialToken.ToolUse.actionEnd.getter();
          static Prompt.+= infix(_:_:)();
          v117(v34, v66);
          uint64_t v65 = v111;
        }
        char v85 = (uint64_t *)&v65[v51[9]];
        uint64_t v86 = v85[1];
        unsigned int v87 = v117;
        uint64_t v12 = v66;
        if (v86)
        {
          uint64_t v88 = *v85;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MEMORY[0x2611FF300](v88, v86);
          static Prompt.+= infix(_:_:)();
          v87(v34, v116);
          static Prompt.+= infix(_:_:)();
          uint64_t v12 = v116;
          uint64_t v32 = v109;
          outlined consume of Prompt.ToolCallResult?(v88, v86);
        }
        static Prompt.SpecialToken.Chat.turnEnd(locale:)();
        static Prompt.+= infix(_:_:)();
        v87(v34, v12);
        v87(v106, v12);
        uint64_t v35 = v111;
        uint64_t v7 = v103;
      }
      ++v32;
      outlined destroy of Prompt.Turn.Segment((uint64_t)v35, type metadata accessor for Prompt.Turn);
    }
    while (v32 != v107);
    swift_bridgeObjectRelease();
    uint64_t v30 = v101;
    if (v100)
    {
      int v89 = v115;
      static Prompt.SpecialToken.Chat.response(locale:)();
      static Prompt.+= infix(_:_:)();
      v117(v89, v12);
    }
  }
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v30, &demangling cache variable for type metadata for Locale?);
}

uint64_t init(delimiter:) in TurnDelimiter #1 in Prompt.turns()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = &v30[-v10];
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v30[-v12];
  uint64_t v33 = Prompt.Delimiter.position.getter();
  uint64_t v32 = Prompt.Delimiter.priority.getter();
  Prompt.Delimiter.token.getter();
  static Prompt.SpecialToken.Chat.turnEnd.getter();
  int v31 = MEMORY[0x2611FF240](v13, v11);
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v14(v11, v4);
  v14(v13, v4);
  Prompt.Delimiter.token.getter();
  static Prompt.SpecialToken.Chat.defaultInstructions.getter();
  char v15 = MEMORY[0x2611FF240](v13, v11);
  v14(v11, v4);
  v14(v13, v4);
  Prompt.Delimiter.token.getter();
  static Prompt.SpecialToken.Chat.instructions.getter();
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, MEMORY[0x263F7FB28]);
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14(v13, v4);
  if ((v16 & 1) != 0
    || (static Prompt.SpecialToken.Chat.defaultInstructions.getter(),
        char v17 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v14(v13, v4),
        (v17 & 1) != 0))
  {
    uint64_t v18 = type metadata accessor for Prompt.Delimiter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
    uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v14)(v8, v4);
    uint64_t v20 = 0;
  }
  else
  {
    static Prompt.SpecialToken.Chat.user.getter();
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14(v13, v4);
    if (v24)
    {
      uint64_t v25 = type metadata accessor for Prompt.Delimiter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
      uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v14)(v8, v4);
      uint64_t v20 = 2;
    }
    else
    {
      static Prompt.SpecialToken.Chat.response.getter();
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v14(v13, v4);
      if (v26)
      {
        uint64_t v27 = type metadata accessor for Prompt.Delimiter();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a1, v27);
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v14)(v8, v4);
        uint64_t v20 = 1;
      }
      else
      {
        static Prompt.SpecialToken.Chat.tool.getter();
        char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v29 = type metadata accessor for Prompt.Delimiter();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(a1, v29);
        v14(v13, v4);
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v14)(v8, v4);
        uint64_t v20 = 3;
        if ((v28 & 1) == 0) {
          uint64_t v20 = 4;
        }
      }
    }
  }
  uint64_t v21 = 256;
  if ((v31 & 1) == 0) {
    uint64_t v21 = 0;
  }
  uint64_t v22 = 0x10000;
  if ((v15 & 1) == 0) {
    uint64_t v22 = 0;
  }
  *a2 = v22 | v21 | v20;
  uint64_t v23 = v32;
  a2[1] = v33;
  a2[2] = v23;
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentResourceIdentifier>, MEMORY[0x263F415B0], MEMORY[0x263F415B0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>, type metadata accessor for Prompt.Turn, type metadata accessor for Prompt.Turn);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Annotation>, type metadata accessor for PromptCompletion.Annotation, type metadata accessor for PromptCompletion.Annotation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, MEMORY[0x263F7FB20], MEMORY[0x263F7FB20]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptTemplateInfo.RichVariableBinding.Component>, MEMORY[0x263F7FC20], MEMORY[0x263F7FC20]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ChatMessagePrompt>, MEMORY[0x263F61F78], MEMORY[0x263F61F78]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>, MEMORY[0x263F62098], MEMORY[0x263F62098]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnyTooling>, (uint64_t (*)(void))type metadata accessor for AnyTooling, (uint64_t (*)(void))type metadata accessor for AnyTooling);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Attachment>, MEMORY[0x263F7FB40], MEMORY[0x263F7FB40]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>, MEMORY[0x263F7FB70], MEMORY[0x263F7FB70]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)>, type metadata accessor for PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:), type metadata accessor for PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)>, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:), type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentResource>, MEMORY[0x263F41560], MEMORY[0x263F41560]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if (a3)
  {
    uint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation)>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (char v15 = v11 == -1) : (char v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  char v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation))
                  - 8);
  char v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolDescription>, type metadata accessor for ToolDescription, type metadata accessor for ToolDescription);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.ToolCall>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TurnDelimiter #1 in Prompt.turns()>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.ToolCallResult>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Candidate>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Segment>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      void v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
      char v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[6 * v11 + 4]) {
          memmove(v15, a4 + 4, 48 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      char v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t type metadata accessor for Prompt.Turn.Segment(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.Turn.Segment);
}

uint64_t type metadata accessor for Prompt.Turn(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.Turn);
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Prompt.Attachment() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(0)
                 - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Prompt.Turn.Segment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of Prompt.ToolCallResult?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of Prompt.Turn.Segment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Prompt.Turn.Segment(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void outlined consume of Prompt.ToolCall?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(a7, a8);
  }
}

uint64_t outlined copy of Prompt.ToolCallResult?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Prompt.Attachment();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v139 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v152 = (char *)&v133 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unint64_t v147 = (char *)&v133 - v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v148 = (char *)&v133 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v13);
  if (result >= v13)
  {
    if (v13 < 0) {
      goto LABEL_142;
    }
    if (v13) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v13, 1, a1);
    }
    return result;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_150;
  }
  Swift::Int v135 = result;
  uint64_t v142 = v5;
  if (v13 < 2)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    unint64_t v141 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    if (v13 != 1)
    {
      unint64_t v23 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v22 = (char *)MEMORY[0x263F8EE78];
LABEL_106:
      uint64_t v134 = v20;
      if (v23 >= 2)
      {
        uint64_t v126 = *a1;
        do
        {
          unint64_t v127 = v23 - 2;
          if (v23 < 2) {
            goto LABEL_137;
          }
          if (!v126) {
            goto LABEL_149;
          }
          unint64_t v128 = v22;
          uint64_t v129 = *(void *)&v22[16 * v127 + 32];
          uint64_t v130 = *(void *)&v22[16 * v23 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v126 + *(void *)(v142 + 72) * v129, v126 + *(void *)(v142 + 72) * *(void *)&v22[16 * v23 + 16], v126 + *(void *)(v142 + 72) * v130, v141);
          if (v2) {
            break;
          }
          if (v130 < v129) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v128 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v22);
          }
          if (v127 >= *((void *)v128 + 2)) {
            goto LABEL_139;
          }
          uint64_t v131 = &v128[16 * v127 + 32];
          *(void *)uint64_t v131 = v129;
          *((void *)v131 + 1) = v130;
          unint64_t v132 = *((void *)v128 + 2);
          if (v23 > v132) {
            goto LABEL_140;
          }
          unint64_t v22 = v128;
          memmove(&v128[16 * v23 + 16], &v128[16 * v23 + 32], 16 * (v132 - v23));
          *((void *)v128 + 2) = v132 - 1;
          unint64_t v23 = v132 - 1;
        }
        while (v132 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(void *)(v134 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v16 = 1;
    uint64_t v134 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v16 = v13;
    uint64_t v17 = v15 >> 1;
    uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v18 + 16) = v17;
    uint64_t v5 = v142;
    unint64_t v19 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v134 = v18;
    unint64_t v141 = v18 + v19;
  }
  uint64_t v21 = 0;
  uint64_t v145 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v146 = v5 + 16;
  uint64_t v156 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  unint64_t v22 = (char *)MEMORY[0x263F8EE78];
  int v149 = a1;
  uint64_t v151 = v4;
  while (1)
  {
    char v24 = (char *)v21;
    uint64_t v25 = v21 + 1;
    uint64_t v137 = v22;
    uint64_t v26 = v16;
    if (v21 + 1 >= v16)
    {
      uint64_t v39 = v21 + 1;
      uint64_t v48 = v142;
    }
    else
    {
      uint64_t v143 = (char *)*a1;
      uint64_t v27 = v143;
      uint64_t v28 = v142;
      uint64_t v29 = *(void *)(v142 + 72);
      uint64_t v140 = v21;
      uint64_t v30 = v29;
      int v31 = *(void (**)(char *, char *, uint64_t))(v142 + 16);
      uint64_t v157 = v26;
      v31(v148, &v143[v29 * v25], v4);
      uint64_t v32 = &v27[v30 * v140];
      uint64_t v33 = v147;
      unint64_t v153 = v31;
      v31(v147, v32, v4);
      uint64_t v34 = v148;
      uint64_t v155 = Prompt.Attachment.priority.getter();
      uint64_t v154 = Prompt.Attachment.priority.getter();
      uint64_t v35 = v4;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v28 + 8);
      v36(v33, v35);
      uint64_t v37 = v35;
      uint64_t v26 = v157;
      v36(v34, v37);
      uint64_t v38 = v30;
      char v24 = (char *)v140;
      uint64_t v39 = v140 + 2;
      uint64_t v158 = v38;
      if (v140 + 2 >= v26)
      {
        uint64_t v48 = v142;
      }
      else
      {
        uint64_t v138 = v2;
        uint64_t v150 = v38 * v25;
        uint64_t v40 = v143;
        uint64_t v41 = (char *)(v140 + 2);
        uint64_t v144 = v38 * (v140 + 2);
        while (1)
        {
          int v42 = v155 < v154;
          uint64_t v43 = v148;
          uint64_t v44 = v151;
          uint64_t v45 = v153;
          v153(v148, &v40[v144], v151);
          uint64_t v46 = v147;
          v45(v147, &v40[v150], v44);
          uint64_t v47 = Prompt.Attachment.priority.getter();
          LODWORD(v47) = v47 >= Prompt.Attachment.priority.getter();
          v36(v46, v44);
          v36(v43, v44);
          if (v42 == v47) {
            break;
          }
          uint64_t v38 = v158;
          v40 += v158;
          ++v41;
          uint64_t v26 = v157;
          if ((char *)v157 == v41)
          {
            uint64_t v39 = v157;
            uint64_t v2 = v138;
            uint64_t v48 = v142;
            a1 = v149;
            char v24 = (char *)v140;
            goto LABEL_25;
          }
        }
        uint64_t v2 = v138;
        uint64_t v48 = v142;
        a1 = v149;
        uint64_t v39 = (uint64_t)v41;
        char v24 = (char *)v140;
        uint64_t v26 = v157;
        uint64_t v38 = v158;
      }
LABEL_25:
      uint64_t v4 = v151;
      if (v155 < v154)
      {
        if (v39 < (uint64_t)v24) {
          goto LABEL_143;
        }
        if ((uint64_t)v24 < v39)
        {
          uint64_t v49 = 0;
          uint64_t v50 = (uint64_t)v24;
          uint64_t v51 = v38 * (v39 - 1);
          uint64_t v52 = v39 * v38;
          uint64_t v53 = v50;
          uint64_t v54 = v39;
          uint64_t v55 = v50 * v38;
          uint64_t v150 = v54;
          do
          {
            if (v53 != v54 + v49 - 1)
            {
              if (!v143) {
                goto LABEL_148;
              }
              uint64_t v138 = v2;
              uint64_t v57 = &v143[v55];
              uint64_t v58 = &v143[v51];
              uint64_t v59 = v143;
              Swift::String v60 = *v156;
              (*v156)(v139, &v143[v55], v151);
              if (v55 < v51 || v57 >= &v59[v52])
              {
                uint64_t v56 = v151;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v56 = v151;
                if (v55 != v51) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              v60(v58, v139, v56);
              uint64_t v48 = v142;
              uint64_t v2 = v138;
              uint64_t v38 = v158;
            }
            ++v53;
            --v49;
            uint64_t v54 = v150;
            v51 -= v38;
            v52 -= v38;
            v55 += v38;
          }
          while (v53 < v150 + v49);
          a1 = v149;
          uint64_t v4 = v151;
          uint64_t v39 = v150;
          char v24 = (char *)v140;
          uint64_t v26 = v157;
        }
      }
    }
    if (v39 >= v26) {
      goto LABEL_57;
    }
    if (__OFSUB__(v39, v24)) {
      goto LABEL_141;
    }
    if (v39 - (uint64_t)v24 >= v135) {
      goto LABEL_57;
    }
    if (__OFADD__(v24, v135)) {
      goto LABEL_144;
    }
    uint64_t v61 = (uint64_t)&v24[v135] >= v26 ? v26 : (uint64_t)&v24[v135];
    if (v61 < (uint64_t)v24) {
      break;
    }
    if (v39 != v61)
    {
      uint64_t v140 = (uint64_t)v24;
      uint64_t v138 = v2;
      uint64_t v62 = *(void *)(v48 + 72);
      uint64_t v143 = *(char **)(v48 + 16);
      uint64_t v144 = v62;
      uint64_t v158 = v62 * (v39 - 1);
      uint64_t v157 = v39 * v62;
      uint64_t v136 = v61;
      do
      {
        uint64_t v64 = 0;
        uint64_t v65 = (void (*)(char *, char *, uint64_t))v140;
        uint64_t v150 = v39;
        while (1)
        {
          unint64_t v153 = v65;
          uint64_t v67 = v148;
          uint64_t v66 = v149;
          uint64_t v68 = *v149;
          uint64_t v69 = (void (*)(char *, uint64_t, uint64_t))v143;
          ((void (*)(char *, uint64_t, uint64_t))v143)(v148, v157 + v64 + *v149, v4);
          uint64_t v70 = v158 + v64 + v68;
          uint64_t v71 = v147;
          v69(v147, v70, v4);
          uint64_t v155 = Prompt.Attachment.priority.getter();
          uint64_t v154 = Prompt.Attachment.priority.getter();
          unint64_t v72 = *v145;
          (*v145)(v71, v4);
          v72(v67, v4);
          if (v155 >= v154) {
            break;
          }
          uint64_t v73 = *v66;
          if (!*v66) {
            goto LABEL_146;
          }
          uint64_t v74 = (char *)(v73 + v158 + v64);
          unint64_t v75 = *v156;
          uint64_t v4 = v151;
          (*v156)(v152, (char *)(v73 + v157 + v64), v151);
          unint64_t v63 = (char *)v150;
          swift_arrayInitWithTakeFrontToBack();
          v75(v74, v152, v4);
          v64 -= v144;
          uint64_t v65 = (void (*)(char *, char *, uint64_t))((char *)v153 + 1);
          if (v63 == (char *)v153 + 1) {
            goto LABEL_50;
          }
        }
        unint64_t v63 = (char *)v150;
        uint64_t v4 = v151;
LABEL_50:
        uint64_t v39 = (uint64_t)(v63 + 1);
        v158 += v144;
        v157 += v144;
      }
      while (v39 != v136);
      uint64_t v39 = v136;
      uint64_t v2 = v138;
      a1 = v149;
      char v24 = (char *)v140;
    }
LABEL_57:
    if (v39 < (uint64_t)v24) {
      goto LABEL_136;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      unint64_t v22 = v137;
    }
    else {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v137 + 2) + 1, 1, v137);
    }
    unint64_t v77 = *((void *)v22 + 2);
    unint64_t v76 = *((void *)v22 + 3);
    unint64_t v23 = v77 + 1;
    if (v77 >= v76 >> 1) {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v22);
    }
    *((void *)v22 + 2) = v23;
    uint64_t v78 = v22 + 32;
    uint64_t v79 = &v22[16 * v77 + 32];
    *(void *)uint64_t v79 = v24;
    *((void *)v79 + 1) = v39;
    uint64_t v150 = v39;
    if (v77)
    {
      while (1)
      {
        unint64_t v80 = v23 - 1;
        if (v23 >= 4)
        {
          char v85 = &v78[16 * v23];
          uint64_t v86 = *((void *)v85 - 8);
          uint64_t v87 = *((void *)v85 - 7);
          BOOL v91 = __OFSUB__(v87, v86);
          uint64_t v88 = v87 - v86;
          if (v91) {
            goto LABEL_125;
          }
          uint64_t v90 = *((void *)v85 - 6);
          uint64_t v89 = *((void *)v85 - 5);
          BOOL v91 = __OFSUB__(v89, v90);
          uint64_t v83 = v89 - v90;
          char v84 = v91;
          if (v91) {
            goto LABEL_126;
          }
          unint64_t v92 = v23 - 2;
          uint64_t v93 = &v78[16 * v23 - 32];
          uint64_t v95 = *(void *)v93;
          uint64_t v94 = *((void *)v93 + 1);
          BOOL v91 = __OFSUB__(v94, v95);
          uint64_t v96 = v94 - v95;
          if (v91) {
            goto LABEL_128;
          }
          BOOL v91 = __OFADD__(v83, v96);
          uint64_t v97 = v83 + v96;
          if (v91) {
            goto LABEL_131;
          }
          if (v97 >= v88)
          {
            uint64_t v115 = &v78[16 * v80];
            uint64_t v117 = *(void *)v115;
            uint64_t v116 = *((void *)v115 + 1);
            BOOL v91 = __OFSUB__(v116, v117);
            uint64_t v118 = v116 - v117;
            if (v91) {
              goto LABEL_135;
            }
            BOOL v108 = v83 < v118;
            goto LABEL_94;
          }
        }
        else
        {
          if (v23 != 3)
          {
            uint64_t v109 = *((void *)v22 + 4);
            uint64_t v110 = *((void *)v22 + 5);
            BOOL v91 = __OFSUB__(v110, v109);
            uint64_t v102 = v110 - v109;
            char v103 = v91;
            goto LABEL_88;
          }
          uint64_t v82 = *((void *)v22 + 4);
          uint64_t v81 = *((void *)v22 + 5);
          BOOL v91 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          char v84 = v91;
        }
        if (v84) {
          goto LABEL_127;
        }
        unint64_t v92 = v23 - 2;
        uint64_t v98 = &v78[16 * v23 - 32];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v101 = __OFSUB__(v99, v100);
        uint64_t v102 = v99 - v100;
        char v103 = v101;
        if (v101) {
          goto LABEL_130;
        }
        uint64_t v104 = &v78[16 * v80];
        uint64_t v106 = *(void *)v104;
        uint64_t v105 = *((void *)v104 + 1);
        BOOL v91 = __OFSUB__(v105, v106);
        uint64_t v107 = v105 - v106;
        if (v91) {
          goto LABEL_133;
        }
        if (__OFADD__(v102, v107)) {
          goto LABEL_134;
        }
        if (v102 + v107 >= v83)
        {
          BOOL v108 = v83 < v107;
LABEL_94:
          if (v108) {
            unint64_t v80 = v92;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v103) {
          goto LABEL_129;
        }
        unint64_t v111 = &v78[16 * v80];
        uint64_t v113 = *(void *)v111;
        uint64_t v112 = *((void *)v111 + 1);
        BOOL v91 = __OFSUB__(v112, v113);
        uint64_t v114 = v112 - v113;
        if (v91) {
          goto LABEL_132;
        }
        if (v114 < v102) {
          goto LABEL_15;
        }
LABEL_96:
        unint64_t v119 = v80 - 1;
        if (v80 - 1 >= v23)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v120 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v121 = &v78[16 * v119];
        uint64_t v122 = *(void *)v121;
        uint64_t v123 = &v78[16 * v80];
        uint64_t v124 = *((void *)v123 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v120 + *(void *)(v142 + 72) * *(void *)v121, v120 + *(void *)(v142 + 72) * *(void *)v123, v120 + *(void *)(v142 + 72) * v124, v141);
        if (v2) {
          goto LABEL_117;
        }
        if (v124 < v122) {
          goto LABEL_122;
        }
        if (v80 > *((void *)v22 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v121 = v122;
        *(void *)&v78[16 * v119 + 8] = v124;
        unint64_t v125 = *((void *)v22 + 2);
        if (v80 >= v125) {
          goto LABEL_124;
        }
        unint64_t v23 = v125 - 1;
        memmove(&v78[16 * v80], v123 + 16, 16 * (v125 - 1 - v80));
        *((void *)v22 + 2) = v125 - 1;
        a1 = v149;
        uint64_t v4 = v151;
        if (v125 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v23 = 1;
LABEL_15:
    uint64_t v16 = a1[1];
    uint64_t v21 = v150;
    if (v150 >= v16)
    {
      uint64_t v20 = v134;
      goto LABEL_106;
    }
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  char *v44;
  unint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (**v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  void (**v56)(char *, uint64_t);
  uint64_t v57;
  Swift::Int v58;
  Swift::Int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (**v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (**v71)(char *, uint64_t);
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  Swift::Int v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::Int v80;
  unint64_t v81;
  Swift::Int v82;
  uint64_t v83;
  Swift::Int v84;
  uint64_t v85;
  uint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (**v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  char v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  Swift::Int v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  uint64_t v167;
  Swift::Int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  Swift::Int v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  Swift::Int v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (**v189)(char *, uint64_t);
  void (**v190)(char *, char *, uint64_t);
  void (**v191)(char *, uint64_t);
  void (**v192)(char *, char *, uint64_t);
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;

  uint64_t v196 = type metadata accessor for Prompt.Attachment();
  uint64_t v2 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  unint64_t v195 = (char *)&v167 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v194 = type metadata accessor for Prompt.Delimiter();
  uint64_t v4 = *(void *)(v194 - 8);
  MEMORY[0x270FA5388](v194);
  v193 = (char *)&v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(0);
  uint64_t v181 = *(void *)(v201 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v201);
  uint64_t v174 = (uint64_t)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v197 = (uint64_t)&v167 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v186 = (uint64_t)&v167 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v185 = (uint64_t)&v167 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v202 = (uint64_t)&v167 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v198 = (uint64_t)&v167 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v175 = (uint64_t)&v167 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unint64_t v22 = (char *)&v167 - v21;
  unint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v183 = (uint64_t)&v167 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  unint64_t v179 = (uint64_t)&v167 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v167 - v28;
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  uint64_t v32 = (char *)&v167 - v31;
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  uint64_t v170 = (uint64_t)&v167 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v169 = (uint64_t)&v167 - v35;
  uint64_t v200 = a1;
  uint64_t v36 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v36);
  if (result >= v36)
  {
    if (v36 < 0) {
      goto LABEL_160;
    }
    if (v36) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v36, 1, v200);
    }
    return result;
  }
  if (v36 >= 0) {
    uint64_t v38 = v36;
  }
  else {
    uint64_t v38 = v36 + 1;
  }
  if (v36 < -1) {
    goto LABEL_168;
  }
  unint64_t v168 = result;
  if (v36 < 2)
  {
    int v42 = MEMORY[0x263F8EE78];
    unint64_t v180 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80));
    if (v36 != 1)
    {
      uint64_t v45 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v44 = (char *)MEMORY[0x263F8EE78];
LABEL_124:
      unint64_t v167 = v42;
      if (v45 >= 2)
      {
        os_log_type_t v159 = *v200;
        do
        {
          uint64_t v160 = v45 - 2;
          if (v45 < 2) {
            goto LABEL_155;
          }
          if (!v159) {
            goto LABEL_167;
          }
          uint64_t v161 = v44;
          uint64_t v162 = *(void *)&v44[16 * v160 + 32];
          unint64_t v163 = *(void *)&v44[16 * v45 + 24];
          uint64_t v164 = v184;
          specialized _merge<A>(low:mid:high:buffer:by:)(v159 + *(void *)(v181 + 72) * v162, v159 + *(void *)(v181 + 72) * *(void *)&v44[16 * v45 + 16], v159 + *(void *)(v181 + 72) * v163, v180);
          if (v164) {
            goto LABEL_122;
          }
          if (v163 < v162) {
            goto LABEL_156;
          }
          v184 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v161 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v161);
          }
          if (v160 >= *((void *)v161 + 2)) {
            goto LABEL_157;
          }
          uint64_t v165 = &v161[16 * v160 + 32];
          *(void *)uint64_t v165 = v162;
          *((void *)v165 + 1) = v163;
          uint64_t v166 = *((void *)v161 + 2);
          if (v45 > v166) {
            goto LABEL_158;
          }
          memmove(&v161[16 * v45 + 16], &v161[16 * v45 + 32], 16 * (v166 - v45));
          uint64_t v44 = v161;
          *((void *)v161 + 2) = v166 - 1;
          uint64_t v45 = v166 - 1;
        }
        while (v166 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v167 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v167 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v39 = v38 >> 1;
    uint64_t v40 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v40 + 16) = v39;
    uint64_t v41 = *(unsigned __int8 *)(v181 + 80);
    unint64_t v167 = v40;
    unint64_t v180 = v40 + ((v41 + 32) & ~v41);
  }
  uint64_t v43 = 0;
  uint64_t v191 = (void (**)(char *, uint64_t))(v4 + 8);
  v192 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v189 = (void (**)(char *, uint64_t))(v2 + 8);
  v190 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  uint64_t v44 = (char *)MEMORY[0x263F8EE78];
  uint64_t v182 = v22;
  v178 = v29;
  uint64_t v177 = v32;
  while (1)
  {
    uint64_t v46 = v43;
    uint64_t v47 = v43 + 1;
    uint64_t v173 = v44;
    uint64_t v176 = v43;
    if (v43 + 1 >= v36)
    {
      ++v43;
    }
    else
    {
      v199 = v36;
      uint64_t v48 = *v200;
      uint64_t v49 = *(void *)(v181 + 72);
      uint64_t v50 = v169;
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(*v200 + v49 * v47, v169, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      uint64_t v171 = v48;
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v48 + v49 * v46, v170, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v50, (uint64_t)v32, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v51 = v195;
        uint64_t v52 = v196;
        (*v190)(v195, v32, v196);
        uint64_t v188 = Prompt.Attachment.position.getter();
        uint64_t v53 = v189;
      }
      else
      {
        uint64_t v51 = v193;
        uint64_t v52 = v194;
        (*v192)(v193, v32, v194);
        uint64_t v188 = Prompt.Delimiter.position.getter();
        uint64_t v53 = v191;
      }
      (*v53)(v51, v52);
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v170, (uint64_t)v29, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v54 = v195;
        uint64_t v55 = v196;
        (*v190)(v195, v29, v196);
        v187 = Prompt.Attachment.position.getter();
        uint64_t v56 = v189;
      }
      else
      {
        uint64_t v54 = v193;
        uint64_t v55 = v194;
        (*v192)(v193, v29, v194);
        v187 = Prompt.Delimiter.position.getter();
        uint64_t v56 = v191;
      }
      (*v56)(v54, v55);
      outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v170, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v169, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      uint64_t v43 = v46 + 2;
      uint64_t v36 = v199;
      if (v46 + 2 < v199)
      {
        unint64_t v172 = v49 * v47;
        uint64_t v57 = v171;
        uint64_t v58 = v49 * v43;
        while (1)
        {
          uint64_t v59 = v43;
          Swift::String v60 = v179;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v57 + v58, v179, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v57 + v172, v183, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v60, (uint64_t)v22, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v61 = v195;
            uint64_t v62 = v22;
            unint64_t v63 = v196;
            (*v190)(v195, v62, v196);
            uint64_t v64 = Prompt.Attachment.position.getter();
            uint64_t v65 = v189;
          }
          else
          {
            uint64_t v61 = v193;
            uint64_t v66 = v22;
            unint64_t v63 = v194;
            (*v192)(v193, v66, v194);
            uint64_t v64 = Prompt.Delimiter.position.getter();
            uint64_t v65 = v191;
          }
          (*v65)(v61, v63);
          uint64_t v67 = v175;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v183, v175, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v69 = v195;
            uint64_t v68 = v196;
            (*v190)(v195, (char *)v67, v196);
            uint64_t v70 = Prompt.Attachment.position.getter();
            uint64_t v71 = v189;
          }
          else
          {
            uint64_t v69 = v193;
            uint64_t v68 = v194;
            (*v192)(v193, (char *)v67, v194);
            uint64_t v70 = Prompt.Delimiter.position.getter();
            uint64_t v71 = v191;
          }
          (*v71)(v69, v68);
          unint64_t v72 = v188 < v187;
          outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v183, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v179, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (v72 == v64 >= v70) {
            break;
          }
          uint64_t v43 = v59 + 1;
          v57 += v49;
          unint64_t v22 = v182;
          if (v199 == v59 + 1)
          {
            uint64_t v36 = v199;
            uint64_t v43 = v199;
            uint64_t v29 = v178;
            uint64_t v32 = v177;
            goto LABEL_36;
          }
        }
        unint64_t v22 = v182;
        uint64_t v29 = v178;
        uint64_t v32 = v177;
        uint64_t v43 = v59;
        uint64_t v36 = v199;
      }
LABEL_36:
      if (v188 < v187)
      {
        if (v43 < v46) {
          goto LABEL_161;
        }
        if (v46 < v43)
        {
          uint64_t v73 = 0;
          uint64_t v74 = v49 * (v43 - 1);
          unint64_t v75 = v43 * v49;
          unint64_t v76 = v46;
          unint64_t v77 = v46 * v49;
          do
          {
            if (v76 != v43 + v73 - 1)
            {
              uint64_t v79 = v171;
              if (!v171) {
                goto LABEL_166;
              }
              unint64_t v80 = v43;
              uint64_t v81 = v171 + v77;
              uint64_t v188 = v171 + v74;
              outlined init with take of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v171 + v77, v174, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              if (v77 < v74 || v81 >= v79 + v75)
              {
                uint64_t v78 = v188;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v78 = v188;
                if (v77 != v74) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              outlined init with take of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v174, v78, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              uint64_t v43 = v80;
              uint64_t v46 = v176;
            }
            ++v76;
            --v73;
            v74 -= v49;
            v75 -= v49;
            v77 += v49;
          }
          while (v76 < v43 + v73);
          unint64_t v22 = v182;
          uint64_t v29 = v178;
          uint64_t v32 = v177;
          uint64_t v36 = v199;
        }
      }
    }
    if (v43 >= v36) {
      goto LABEL_74;
    }
    if (__OFSUB__(v43, v46)) {
      goto LABEL_159;
    }
    if (v43 - v46 >= v168) {
      goto LABEL_74;
    }
    if (__OFADD__(v46, v168)) {
      goto LABEL_162;
    }
    uint64_t v82 = v46 + v168 >= v36 ? v36 : v46 + v168;
    if (v82 < v46) {
      break;
    }
    if (v43 != v82)
    {
      uint64_t v83 = *(void *)(v181 + 72);
      v199 = v83 * (v43 - 1);
      v187 = v83;
      char v84 = v43 * v83;
      unint64_t v172 = v82;
      do
      {
        uint64_t v86 = 0;
        uint64_t v87 = v46;
        uint64_t v188 = v43;
        while (1)
        {
          uint64_t v88 = *v200;
          uint64_t v89 = v84;
          uint64_t v90 = v84 + v86 + *v200;
          BOOL v91 = v198;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v90, v198, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v199 + v86 + v88, v202, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          unint64_t v92 = v91;
          uint64_t v93 = v185;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v92, v185, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v94 = v195;
            uint64_t v95 = v196;
            (*v190)(v195, (char *)v93, v196);
            uint64_t v96 = Prompt.Attachment.position.getter();
            (*v189)(v94, v95);
          }
          else
          {
            uint64_t v97 = v193;
            uint64_t v98 = v93;
            uint64_t v99 = v194;
            (*v192)(v193, (char *)v98, v194);
            uint64_t v96 = Prompt.Delimiter.position.getter();
            (*v191)(v97, v99);
          }
          uint64_t v100 = v186;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v202, v186, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            BOOL v101 = v195;
            uint64_t v102 = v196;
            (*v190)(v195, (char *)v100, v196);
            char v103 = Prompt.Attachment.position.getter();
            uint64_t v104 = v189;
          }
          else
          {
            BOOL v101 = v193;
            uint64_t v102 = v194;
            (*v192)(v193, (char *)v100, v194);
            char v103 = Prompt.Delimiter.position.getter();
            uint64_t v104 = v191;
          }
          (*v104)(v101, v102);
          outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v202, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v198, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (v96 >= v103) {
            break;
          }
          uint64_t v105 = *v200;
          if (!*v200) {
            goto LABEL_164;
          }
          char v84 = v89;
          uint64_t v106 = v105 + v199 + v86;
          outlined init with take of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v105 + v89 + v86, v197, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v197, v106, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          char v85 = v188;
          v86 -= v187;
          if (v188 == ++v87) {
            goto LABEL_61;
          }
        }
        char v85 = v188;
        char v84 = v89;
LABEL_61:
        uint64_t v43 = v85 + 1;
        v199 += v187;
        v84 += v187;
        uint64_t v46 = v176;
      }
      while (v43 != v172);
      uint64_t v43 = v172;
      unint64_t v22 = v182;
      uint64_t v29 = v178;
      uint64_t v32 = v177;
    }
LABEL_74:
    if (v43 < v46) {
      goto LABEL_154;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v44 = v173;
    }
    else {
      uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v173 + 2) + 1, 1, v173);
    }
    BOOL v108 = *((void *)v44 + 2);
    uint64_t v107 = *((void *)v44 + 3);
    uint64_t v45 = v108 + 1;
    if (v108 >= v107 >> 1) {
      uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v107 > 1), v108 + 1, 1, v44);
    }
    *((void *)v44 + 2) = v45;
    uint64_t v109 = v44 + 32;
    uint64_t v110 = &v44[16 * v108 + 32];
    *(void *)uint64_t v110 = v46;
    *((void *)v110 + 1) = v43;
    if (v108)
    {
      while (1)
      {
        unint64_t v111 = v45 - 1;
        if (v45 >= 4)
        {
          uint64_t v116 = &v109[16 * v45];
          uint64_t v117 = *((void *)v116 - 8);
          uint64_t v118 = *((void *)v116 - 7);
          uint64_t v122 = __OFSUB__(v118, v117);
          unint64_t v119 = v118 - v117;
          if (v122) {
            goto LABEL_143;
          }
          uint64_t v121 = *((void *)v116 - 6);
          uint64_t v120 = *((void *)v116 - 5);
          uint64_t v122 = __OFSUB__(v120, v121);
          uint64_t v114 = v120 - v121;
          uint64_t v115 = v122;
          if (v122) {
            goto LABEL_144;
          }
          uint64_t v123 = v45 - 2;
          uint64_t v124 = &v109[16 * v45 - 32];
          uint64_t v126 = *(void *)v124;
          unint64_t v125 = *((void *)v124 + 1);
          uint64_t v122 = __OFSUB__(v125, v126);
          unint64_t v127 = v125 - v126;
          if (v122) {
            goto LABEL_146;
          }
          uint64_t v122 = __OFADD__(v114, v127);
          unint64_t v128 = v114 + v127;
          if (v122) {
            goto LABEL_149;
          }
          if (v128 >= v119)
          {
            uint64_t v146 = &v109[16 * v111];
            unint64_t v148 = *(void *)v146;
            unint64_t v147 = *((void *)v146 + 1);
            uint64_t v122 = __OFSUB__(v147, v148);
            int v149 = v147 - v148;
            if (v122) {
              goto LABEL_153;
            }
            uint64_t v139 = v114 < v149;
            goto LABEL_111;
          }
        }
        else
        {
          if (v45 != 3)
          {
            uint64_t v140 = *((void *)v44 + 4);
            unint64_t v141 = *((void *)v44 + 5);
            uint64_t v122 = __OFSUB__(v141, v140);
            uint64_t v133 = v141 - v140;
            uint64_t v134 = v122;
            goto LABEL_105;
          }
          uint64_t v113 = *((void *)v44 + 4);
          uint64_t v112 = *((void *)v44 + 5);
          uint64_t v122 = __OFSUB__(v112, v113);
          uint64_t v114 = v112 - v113;
          uint64_t v115 = v122;
        }
        if (v115) {
          goto LABEL_145;
        }
        uint64_t v123 = v45 - 2;
        uint64_t v129 = &v109[16 * v45 - 32];
        uint64_t v131 = *(void *)v129;
        uint64_t v130 = *((void *)v129 + 1);
        unint64_t v132 = __OFSUB__(v130, v131);
        uint64_t v133 = v130 - v131;
        uint64_t v134 = v132;
        if (v132) {
          goto LABEL_148;
        }
        Swift::Int v135 = &v109[16 * v111];
        uint64_t v137 = *(void *)v135;
        uint64_t v136 = *((void *)v135 + 1);
        uint64_t v122 = __OFSUB__(v136, v137);
        uint64_t v138 = v136 - v137;
        if (v122) {
          goto LABEL_151;
        }
        if (__OFADD__(v133, v138)) {
          goto LABEL_152;
        }
        if (v133 + v138 >= v114)
        {
          uint64_t v139 = v114 < v138;
LABEL_111:
          if (v139) {
            unint64_t v111 = v123;
          }
          goto LABEL_113;
        }
LABEL_105:
        if (v134) {
          goto LABEL_147;
        }
        uint64_t v142 = &v109[16 * v111];
        uint64_t v144 = *(void *)v142;
        uint64_t v143 = *((void *)v142 + 1);
        uint64_t v122 = __OFSUB__(v143, v144);
        uint64_t v145 = v143 - v144;
        if (v122) {
          goto LABEL_150;
        }
        if (v145 < v133) {
          goto LABEL_15;
        }
LABEL_113:
        uint64_t v150 = v111 - 1;
        if (v111 - 1 >= v45)
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        if (!*v200) {
          goto LABEL_165;
        }
        uint64_t v151 = v43;
        uint64_t v152 = v44;
        unint64_t v153 = &v109[16 * v150];
        uint64_t v154 = *(void *)v153;
        uint64_t v155 = &v109[16 * v111];
        uint64_t v156 = *((void *)v155 + 1);
        uint64_t v157 = v184;
        specialized _merge<A>(low:mid:high:buffer:by:)(*v200 + *(void *)(v181 + 72) * *(void *)v153, *v200 + *(void *)(v181 + 72) * *(void *)v155, *v200 + *(void *)(v181 + 72) * v156, v180);
        if (v157)
        {
LABEL_122:
          swift_bridgeObjectRelease();
          *(void *)(v167 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v156 < v154) {
          goto LABEL_140;
        }
        if (v111 > *((void *)v152 + 2)) {
          goto LABEL_141;
        }
        *(void *)unint64_t v153 = v154;
        *(void *)&v109[16 * v150 + 8] = v156;
        uint64_t v158 = *((void *)v152 + 2);
        if (v111 >= v158) {
          goto LABEL_142;
        }
        v184 = 0;
        uint64_t v45 = v158 - 1;
        memmove(&v109[16 * v111], v155 + 16, 16 * (v158 - 1 - v111));
        uint64_t v44 = v152;
        *((void *)v152 + 2) = v158 - 1;
        uint64_t v139 = v158 > 2;
        unint64_t v22 = v182;
        uint64_t v29 = v178;
        uint64_t v32 = v177;
        uint64_t v43 = v151;
        if (!v139) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v45 = 1;
LABEL_15:
    uint64_t v36 = v200[1];
    if (v43 >= v36)
    {
      int v42 = v167;
      goto LABEL_124;
    }
  }
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for Prompt.Attachment();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v45 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v40 = (char *)&v33 - v11;
  uint64_t result = MEMORY[0x270FA5388](v10);
  uint64_t v39 = (char *)&v33 - v14;
  uint64_t v43 = a3;
  uint64_t v34 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void))(v13 + 16);
    uint64_t v15 = v13 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v15 - 8);
    uint64_t v37 = (void (*)(char *, uint64_t, uint64_t))v16;
    uint64_t v38 = v15;
    uint64_t v44 = (uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v49 = v17 * (v43 - 1);
    uint64_t v41 = v17;
    uint64_t v18 = v17 * v43;
    uint64_t v48 = a4;
LABEL_5:
    uint64_t v19 = 0;
    uint64_t v46 = v35;
    uint64_t v42 = v18;
    while (1)
    {
      uint64_t v20 = *v48;
      uint64_t v21 = v18 + v19 + *v48;
      unint64_t v22 = v39;
      unint64_t v23 = v37;
      v37(v39, v21, v7);
      uint64_t v24 = v7;
      uint64_t v25 = v40;
      v23(v40, v49 + v19 + v20, v24);
      uint64_t v47 = Prompt.Attachment.priority.getter();
      uint64_t v26 = Prompt.Attachment.priority.getter();
      uint64_t v27 = *v36;
      uint64_t v28 = v25;
      uint64_t v7 = v24;
      (*v36)(v28, v24);
      uint64_t v29 = v22;
      uint64_t v18 = v42;
      uint64_t result = v27(v29, v24);
      if (v47 >= v26)
      {
LABEL_4:
        v49 += v41;
        v18 += v41;
        if (++v43 == v34) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v30 = *v48;
      if (!*v48) {
        break;
      }
      int v31 = (char *)(v30 + v49 + v19);
      uint64_t v32 = *v44;
      (*v44)(v45, v30 + v18 + v19, v24);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = v32(v31, (uint64_t)v45, v24);
      v19 -= v41;
      if (v43 == ++v46) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)(char *, uint64_t);
  char *v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (**v52)(char *, uint64_t);
  void (**v53)(char *, char *, uint64_t);
  void (**v54)(char *, uint64_t);
  void (**v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  uint64_t v67 = a4;
  uint64_t v51 = a1;
  uint64_t v61 = type metadata accessor for Prompt.Attachment();
  uint64_t v6 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  Swift::String v60 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for Prompt.Delimiter();
  uint64_t v8 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v58 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v64 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v70 = (uint64_t)&v49 - v20;
  uint64_t result = MEMORY[0x270FA5388](v19);
  uint64_t v68 = (uint64_t)&v49 - v23;
  unint64_t v63 = a3;
  uint64_t v50 = a2;
  if (a3 != a2)
  {
    uint64_t v24 = *(void *)(v22 + 72);
    uint64_t v54 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v55 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v52 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v69 = v24 * (v63 - 1);
    uint64_t v62 = v24;
    uint64_t v25 = v24 * v63;
    uint64_t v56 = v18;
    uint64_t v57 = v15;
LABEL_5:
    uint64_t v26 = 0;
    uint64_t v27 = v51;
    while (1)
    {
      uint64_t v28 = *v67;
      uint64_t v29 = v25;
      uint64_t v66 = v25 + v26;
      uint64_t v30 = v25 + v26 + v28;
      int v31 = v68;
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v30, v68, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      uint64_t v65 = v69 + v26;
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v69 + v26 + v28, v70, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v31, (uint64_t)v18, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v32 = v60;
        uint64_t v33 = v18;
        uint64_t v34 = v61;
        (*v53)(v60, v33, v61);
        uint64_t v35 = Prompt.Attachment.position.getter();
        uint64_t v36 = v52;
      }
      else
      {
        uint64_t v32 = v58;
        uint64_t v37 = v18;
        uint64_t v34 = v59;
        (*v55)(v58, v37, v59);
        uint64_t v35 = Prompt.Delimiter.position.getter();
        uint64_t v36 = v54;
      }
      (*v36)(v32, v34);
      outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v70, (uint64_t)v15, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      uint64_t v38 = v15;
      uint64_t v39 = v10;
      uint64_t v25 = v29;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v40 = v60;
        uint64_t v41 = v38;
        uint64_t v42 = v61;
        (*v53)(v60, v41, v61);
        uint64_t v43 = Prompt.Attachment.position.getter();
        uint64_t v44 = v52;
      }
      else
      {
        uint64_t v40 = v58;
        uint64_t v45 = v38;
        uint64_t v42 = v59;
        (*v55)(v58, v45, v59);
        uint64_t v43 = Prompt.Delimiter.position.getter();
        uint64_t v44 = v54;
      }
      (*v44)(v40, v42);
      outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v70, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      uint64_t result = outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v68, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      uint64_t v46 = v35 < v43;
      uint64_t v10 = v39;
      uint64_t v18 = v56;
      uint64_t v15 = v57;
      if (!v46)
      {
LABEL_4:
        v69 += v62;
        uint64_t v25 = v29 + v62;
        if (++v63 == v50) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v47 = *v67;
      if (!*v67) {
        break;
      }
      uint64_t v48 = v47 + v69 + v26;
      outlined init with take of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v47 + v29 + v26, v64, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v64, v48, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      v26 -= v62;
      if (v63 == ++v27) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v65 = type metadata accessor for Prompt.Attachment();
  uint64_t v8 = *(void *)(v65 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v65);
  unint64_t v63 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v62 = (char *)&v54 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_72;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_73;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v68 = a1;
  unint64_t v67 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v37 = a4 + v18;
      unint64_t v66 = a4 + v18;
      unint64_t v68 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v39 = -v13;
        uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        uint64_t v61 = v8 + 16;
        uint64_t v57 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v58 = v40;
        unint64_t v59 = a4;
        unint64_t v55 = a1;
        uint64_t v56 = -v13;
        do
        {
          unint64_t v64 = a3;
          unint64_t v60 = a3 + v39;
          uint64_t v41 = v62;
          uint64_t v42 = v65;
          uint64_t v43 = v58;
          v58(v62, v37 + v39, v65);
          unint64_t v44 = a2 + v39;
          uint64_t v45 = v63;
          v43(v63, v44, v42);
          uint64_t v46 = Prompt.Attachment.priority.getter();
          uint64_t v47 = Prompt.Attachment.priority.getter();
          uint64_t v48 = *v57;
          (*v57)(v45, v42);
          v48(v41, v42);
          if (v46 >= v47)
          {
            unint64_t v51 = v66;
            v66 += v56;
            a3 = v60;
            BOOL v52 = v64 < v51 || v60 >= v51;
            uint64_t v39 = v56;
            if (v52)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v44 = a2;
              unint64_t v49 = v59;
            }
            else
            {
              unint64_t v49 = v59;
              if (v64 != v51) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v44 = a2;
            }
            unint64_t v50 = v55;
          }
          else
          {
            uint64_t v39 = v56;
            a3 = v60;
            if (v64 < a2 || v60 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v49 = v59;
              unint64_t v50 = v55;
            }
            else
            {
              unint64_t v49 = v59;
              unint64_t v50 = v55;
              if (v64 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v68 += v39;
          }
          unint64_t v37 = v66;
          if (v66 <= v49) {
            break;
          }
          a2 = v44;
        }
        while (v44 > v50);
      }
      goto LABEL_70;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v60 = a4 + v17;
    unint64_t v66 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v61 = v8 + 16;
      uint64_t v57 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v58 = v20;
      unint64_t v64 = a3;
      uint64_t v21 = v62;
      unint64_t v22 = (void (**)(char *, uint64_t))(v8 + 8);
      do
      {
        uint64_t v23 = v13;
        uint64_t v24 = v65;
        uint64_t v25 = v58;
        v58(v21, a2, v65);
        unint64_t v26 = a4;
        uint64_t v27 = v63;
        v25(v63, v26, v24);
        uint64_t v28 = Prompt.Attachment.priority.getter();
        uint64_t v29 = Prompt.Attachment.priority.getter();
        uint64_t v30 = *v22;
        (*v22)(v27, v24);
        v30(v21, v24);
        unint64_t v31 = v68;
        if (v28 >= v29)
        {
          uint64_t v13 = v23;
          unint64_t v35 = v67 + v23;
          if (v68 < v67 || v68 >= v35)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v34 = v64;
          }
          else
          {
            unint64_t v34 = v64;
            if (v68 != v67) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v67 = v35;
          unint64_t v32 = a2;
        }
        else
        {
          uint64_t v13 = v23;
          unint64_t v32 = a2 + v23;
          if (v68 < a2 || v68 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v34 = v64;
          }
          else
          {
            unint64_t v34 = v64;
            if (v68 == a2) {
              unint64_t v31 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        unint64_t v68 = v31 + v13;
        a4 = v67;
        if (v67 >= v60) {
          break;
        }
        a2 = v32;
      }
      while (v32 < v34);
    }
LABEL_70:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v68, &v67, (uint64_t *)&v66);
    return 1;
  }
LABEL_74:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (**v40)(char *, uint64_t);
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(char *, uint64_t);
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  void (**v52)(void, void, void);
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (**v57)(char *, uint64_t);
  void (**v58)(void, void, void);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (**v62)(char *, uint64_t);
  unint64_t v63;
  unint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(char *, uint64_t, uint64_t);
  void (**v69)(char *, uint64_t);
  unint64_t v70;
  uint64_t *v71;
  void (**v72)(char *, uint64_t);
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;

  unint64_t v77 = type metadata accessor for Prompt.Attachment();
  unint64_t v67 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  unint64_t v76 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v75 = type metadata accessor for Prompt.Delimiter();
  uint64_t v9 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v80 = type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(0);
  uint64_t v11 = MEMORY[0x270FA5388](v80);
  uint64_t v71 = (uint64_t *)((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v72 = (void (**)(char *, uint64_t))((char *)&v66 - v14);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v79 = (unint64_t)&v66 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v73 = (uint64_t *)((char *)&v66 - v18);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v70 = (unint64_t)&v66 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v66 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  unint64_t v26 = (char *)&v66 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v66 - v27;
  uint64_t v78 = *(void *)(v29 + 72);
  if (!v78)
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (a2 - a1 == 0x8000000000000000 && v78 == -1) {
    goto LABEL_74;
  }
  uint64_t v30 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v78 == -1) {
    goto LABEL_75;
  }
  unint64_t v31 = (uint64_t)(a2 - a1) / v78;
  uint64_t v83 = a1;
  uint64_t v82 = a4;
  unint64_t v32 = v30 / v78;
  if (v31 >= v30 / v78)
  {
    if ((v32 & 0x8000000000000000) == 0)
    {
      unint64_t v34 = v32 * v78;
      unint64_t v35 = (uint64_t)v72;
      if (a4 < a2 || a2 + v34 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v49 = a4 + v34;
      uint64_t v81 = a4 + v34;
      uint64_t v83 = a2;
      uint64_t v70 = a1;
      if (v34 >= 1 && a1 < a2)
      {
        unint64_t v51 = -v78;
        uint64_t v78 = v9 + 32;
        unint64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v67 + 32);
        uint64_t v69 = (void (**)(char *, uint64_t))(v9 + 8);
        v67 += 8;
        do
        {
          BOOL v52 = (void (**)(void, void, void))v73;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v49 + v51, (uint64_t)v73, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          uint64_t v53 = a2 + v51;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(a2 + v51, v79, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)((uint64_t)v52, v35, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v54 = v76;
            unint64_t v55 = v77;
            (*v68)(v76, v35, v77);
            uint64_t v56 = Prompt.Attachment.position.getter();
            uint64_t v57 = (void (**)(char *, uint64_t))v67;
          }
          else
          {
            uint64_t v54 = v74;
            unint64_t v55 = v75;
            (*(void (**)(char *, uint64_t, uint64_t))v78)(v74, v35, v75);
            uint64_t v56 = Prompt.Delimiter.position.getter();
            uint64_t v57 = v69;
          }
          (*v57)(v54, v55);
          uint64_t v58 = (void (**)(void, void, void))v71;
          outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v79, (uint64_t)v71, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            unint64_t v59 = v76;
            unint64_t v60 = v77;
            (*v68)(v76, (uint64_t)v58, v77);
            uint64_t v61 = Prompt.Attachment.position.getter();
            uint64_t v62 = (void (**)(char *, uint64_t))v67;
          }
          else
          {
            unint64_t v59 = v74;
            unint64_t v60 = v75;
            (*(void (**)(char *, void, uint64_t))v78)(v74, v58, v75);
            uint64_t v61 = Prompt.Delimiter.position.getter();
            uint64_t v62 = v69;
          }
          (*v62)(v59, v60);
          unint64_t v63 = a3 + v51;
          outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(v79, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)((uint64_t)v73, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (v56 >= v61)
          {
            unint64_t v64 = v81;
            v81 += v51;
            unint64_t v35 = (uint64_t)v72;
            if (a3 < v64 || v63 >= v64)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v64)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v53 = a2;
          }
          else
          {
            unint64_t v35 = (uint64_t)v72;
            if (a3 < a2 || v63 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v83 += v51;
          }
          unint64_t v49 = v81;
          if (v81 <= a4) {
            break;
          }
          a2 = v53;
          a3 += v51;
        }
        while (v53 > v70);
      }
      goto LABEL_72;
    }
  }
  else if ((v31 & 0x8000000000000000) == 0)
  {
    uint64_t v33 = v31 * v78;
    if (a4 < a1 || a1 + v33 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v79 = a4 + v33;
    uint64_t v81 = a4 + v33;
    if (v33 >= 1 && a2 < a3)
    {
      unint64_t v72 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v73 = (uint64_t *)(v9 + 32);
      uint64_t v71 = (uint64_t *)(v67 + 32);
      uint64_t v69 = (void (**)(char *, uint64_t))(v67 + 8);
      do
      {
        outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(a2, (uint64_t)v28, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
        outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(a4, (uint64_t)v26, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
        outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)((uint64_t)v28, (uint64_t)v23, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          unint64_t v37 = v76;
          uint64_t v38 = v77;
          ((void (*)(char *, char *, uint64_t))*v71)(v76, v23, v77);
          uint64_t v39 = Prompt.Attachment.position.getter();
          uint64_t v40 = v69;
        }
        else
        {
          unint64_t v37 = v74;
          uint64_t v38 = v75;
          ((void (*)(char *, char *, uint64_t))*v73)(v74, v23, v75);
          uint64_t v39 = Prompt.Delimiter.position.getter();
          uint64_t v40 = v72;
        }
        (*v40)(v37, v38);
        uint64_t v41 = v70;
        outlined init with copy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)((uint64_t)v26, v70, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v42 = v76;
          uint64_t v43 = v77;
          ((void (*)(char *, unint64_t, uint64_t))*v71)(v76, v41, v77);
          unint64_t v44 = Prompt.Attachment.position.getter();
          uint64_t v45 = v69;
        }
        else
        {
          uint64_t v42 = v74;
          uint64_t v43 = v75;
          ((void (*)(char *, unint64_t, uint64_t))*v73)(v74, v41, v75);
          unint64_t v44 = Prompt.Delimiter.position.getter();
          uint64_t v45 = v72;
        }
        (*v45)(v42, v43);
        outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)((uint64_t)v26, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
        outlined destroy of PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)((uint64_t)v28, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
        uint64_t v46 = v83;
        if (v39 >= v44)
        {
          uint64_t v48 = v82 + v78;
          if (v83 < v82 || v83 >= v48)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v83 != v82)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v82 = v48;
          uint64_t v47 = a2;
        }
        else
        {
          uint64_t v47 = a2 + v78;
          if (v83 < a2 || v83 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v83 == a2)
          {
            uint64_t v46 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        uint64_t v83 = v46 + v78;
        a4 = v82;
        if (v82 >= v79) {
          break;
        }
        a2 = v47;
      }
      while (v47 < a3);
    }
LABEL_72:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v83, &v82, (uint64_t *)&v81, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
    return 1;
  }
LABEL_76:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 48;
    do
    {
      uint64_t v5 = *(void *)(v4 + 32);
      unint64_t v6 = *(void *)(v4 + 40);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v5, v6);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        outlined copy of Data._Representation(v5, v6);
        Data.hash(into:)();
        outlined consume of Data?(v5, v6);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v5, v6);
      v4 += 64;
      --v3;
    }
    while (v3);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (**v17)(char *, uint64_t);
  void (**v18)(char *, char *, uint64_t);
  char *v19;
  uint64_t v20;

  uint64_t v20 = type metadata accessor for Prompt.ImageAttachment();
  Swift::UInt v3 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v19 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Prompt.Turn.Segment(0);
  unint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    int64_t v14 = *(void *)(v6 + 72);
    uint64_t v17 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v18 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v13, (uint64_t)v11, type metadata accessor for Prompt.Turn.Segment);
      outlined init with copy of Prompt.Turn.Segment((uint64_t)v11, (uint64_t)v9, type metadata accessor for Prompt.Turn.Segment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v15 = v19;
        uint64_t v16 = v20;
        (*v18)(v19, v9, v20);
        Hasher._combine(_:)(1uLL);
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment, MEMORY[0x263F7FB58]);
        dispatch thunk of Hashable.hash(into:)();
        (*v17)(v15, v16);
      }
      else
      {
        Hasher._combine(_:)(0);
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v11, type metadata accessor for Prompt.Turn.Segment);
      v13 += v14;
      --v12;
    }
    while (v12);
  }
}

{
  Swift::UInt v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (void *)(a2 + 40);
    do
    {
      uint64_t v5 = v4[2];
      unint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v6, v7);
      String.hash(into:)();
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      outlined copy of Data._Representation(v6, v7);
      Data.hash(into:)();
      outlined consume of Data._Representation(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v6, v7);
      v4 += 6;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (void *)(a2 + 40);
    do
    {
      uint64_t v5 = v4[2];
      unint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      outlined copy of Data._Representation(v6, v7);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      outlined copy of Data._Representation(v6, v7);
      Data.hash(into:)();
      outlined consume of Data._Representation(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v6, v7);
      v4 += 6;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt8 *v4;
  Swift::UInt8 v5;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 48);
    do
    {
      uint64_t v5 = *v4;
      v4 += 24;
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v5);
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt *v4;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt v8;
  Swift::UInt v9;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt *)(a2 + 64);
    do
    {
      uint64_t v5 = *((unsigned __int8 *)v4 - 32);
      unint64_t v6 = *(v4 - 3);
      uint64_t v7 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v9 = *v4;
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v5);
      outlined copy of Data._Representation(v6, v7);
      Data.hash(into:)();
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      outlined consume of Data._Representation(v6, v7);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::UInt v12;
  uint64_t v13;
  unsigned int (**v14)(char *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  void (**v17)(char *, uint64_t);
  void (**v18)(char *, char *, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;

  Swift::UInt v3 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v19 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  uint64_t v9 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v11 = (uint64_t *)((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v20 = *(void *)(v9 + 72);
    int64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v17 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v18 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v13, (uint64_t)v11, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v11[3])
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(v11[4]);
      Hasher._combine(_:)(v11[5]);
      outlined init with copy of Locale?((uint64_t)v11 + *(int *)(v21 + 32), (uint64_t)v8);
      if ((*v14)(v8, 1, v3) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v15 = v19;
        (*v18)(v19, v8, v3);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
        dispatch thunk of Hashable.hash(into:)();
        (*v17)(v15, v3);
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v11, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      v13 += v20;
      --v12;
    }
    while (v12);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)(char *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v19 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  Swift::UInt v3 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ToolDescriptionEnvelope(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    int64_t v14 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    uint64_t v16 = (uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v14, (uint64_t)v12, type metadata accessor for ToolDescriptionEnvelope);
      outlined init with copy of Prompt.Turn.Segment((uint64_t)v12, (uint64_t)v8, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      uint64_t v17 = (*v16)(v8, 2, v19);
      if (v17)
      {
        Hasher._combine(_:)(v17 != 1);
      }
      else
      {
        outlined init with take of Prompt.Turn.Segment((uint64_t)v8, (uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        Hasher._combine(_:)(2uLL);
        String.hash(into:)();
        String.hash(into:)();
        type metadata accessor for GenerationSchema();
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
        dispatch thunk of Hashable.hash(into:)();
        outlined destroy of Prompt.Turn.Segment((uint64_t)v5, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v12, type metadata accessor for ToolDescriptionEnvelope);
      v14 += v15;
      --v13;
    }
    while (v13);
  }
}

{
  Swift::UInt v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  uint64_t v20 = v4;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v19 = a2 + 32;
    do
    {
      uint64_t v7 = (uint64_t *)(v19 + 56 * v5);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v11 = v7[2];
      uint64_t v10 = v7[3];
      uint64_t v13 = v7[4];
      uint64_t v12 = v7[5];
      int64_t v14 = v7[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of FinishReason(v10, v13);
      outlined copy of Data._Representation(v12, v14);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v8);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(void *)(v9 + 16));
      uint64_t v15 = *(void *)(v9 + 16);
      if (v15)
      {
        uint64_t v21 = v10;
        unint64_t v22 = v12;
        swift_bridgeObjectRetain();
        uint64_t v16 = v9 + 48;
        do
        {
          uint64_t v17 = *(void *)(v16 + 32);
          uint64_t v18 = *(void *)(v16 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data?(v17, v18);
          String.hash(into:)();
          Hasher._combine(_:)(0);
          String.hash(into:)();
          String.hash(into:)();
          if (v18 >> 60 == 15)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            outlined copy of Data._Representation(v17, v18);
            Data.hash(into:)();
            outlined consume of Data?(v17, v18);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data?(v17, v18);
          v16 += 64;
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease();
        uint64_t v12 = v22;
        uint64_t v10 = v21;
      }
      if (v11)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v11);
        swift_bridgeObjectRelease();
        if (!v13) {
          goto LABEL_19;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (!v13)
        {
LABEL_19:
          unint64_t v6 = 0;
          goto LABEL_4;
        }
      }
      if (v13 == 1)
      {
        unint64_t v6 = 2;
      }
      else
      {
        if (v13 != 2)
        {
          Hasher._combine(_:)(1uLL);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of FinishReason(v10, v13);
          goto LABEL_5;
        }
        unint64_t v6 = 3;
      }
LABEL_4:
      Hasher._combine(_:)(v6);
LABEL_5:
      ++v5;
      outlined copy of Data._Representation(v12, v14);
      Data.hash(into:)();
      outlined consume of Data._Representation(v12, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v10, v13);
      outlined consume of Data._Representation(v12, v14);
    }
    while (v5 != v20);
  }
}

{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 48;
    do
    {
      uint64_t v5 = *(void *)(v4 + 32);
      unint64_t v6 = *(void *)(v4 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v5, v6);
      String.hash(into:)();
      Hasher._combine(_:)(0);
      String.hash(into:)();
      String.hash(into:)();
      if (v6 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        outlined copy of Data._Representation(v5, v6);
        Data.hash(into:)();
        outlined consume of Data?(v5, v6);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v5, v6);
      v4 += 64;
      --v3;
    }
    while (v3);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::UInt *v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  Swift::UInt v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  Swift::UInt v3 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v44 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v44);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  MEMORY[0x270FA5388](v46);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for AnnotationEnvelope(0);
  uint64_t v33 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v11 = (Swift::UInt *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = 0;
    int64_t v14 = a2 + 32;
    uint64_t v39 = v12;
    uint64_t v40 = a2 + 32;
    unint64_t v34 = v5;
    do
    {
      uint64_t v21 = v14 + 48 * v13;
      unint64_t v22 = *(void *)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      uint64_t v24 = *(void *)(v21 + 16);
      uint64_t v25 = *(void *)(v21 + 24);
      unint64_t v26 = *(void *)(v21 + 32);
      LODWORD(v21) = *(unsigned __int8 *)(v21 + 40);
      uint64_t v43 = v22;
      uint64_t v42 = v21;
      if (v21)
      {
        Hasher._combine(_:)(1uLL);
        uint64_t v15 = v43;
        outlined copy of Data._Representation(v43, v23);
        Data.hash(into:)();
        uint64_t v16 = v42;
        uint64_t v17 = v23;
        uint64_t v18 = v24;
        uint64_t v19 = v26;
        uint64_t v20 = v39;
      }
      else
      {
        unint64_t v37 = v13;
        Hasher._combine(_:)(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v35 = v25;
        uint64_t v38 = v26;
        outlined copy of Data?(v25, v26);
        uint64_t v36 = v23;
        String.hash(into:)();
        Hasher._combine(_:)(*(void *)(v24 + 16));
        uint64_t v41 = v24;
        uint64_t v27 = *(void *)(v24 + 16);
        uint64_t v28 = (uint64_t)v34;
        if (v27)
        {
          uint64_t v29 = v41 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
          uint64_t v30 = *(void *)(v33 + 72);
          do
          {
            outlined init with copy of Prompt.Turn.Segment(v29, (uint64_t)v11, type metadata accessor for AnnotationEnvelope);
            Hasher._combine(_:)(*v11);
            outlined init with copy of Prompt.Turn.Segment((uint64_t)v11 + *(int *)(v45 + 20), (uint64_t)v9, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              outlined init with take of Prompt.Turn.Segment((uint64_t)v9, v28, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
              Hasher._combine(_:)(1uLL);
              type metadata accessor for DocumentResourceIdentifier();
              lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
              dispatch thunk of Hashable.hash(into:)();
              unint64_t v31 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope;
              unint64_t v32 = v28;
            }
            else
            {
              outlined init with take of Prompt.Turn.Segment((uint64_t)v9, (uint64_t)v7, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
              Hasher._combine(_:)(0);
              String.hash(into:)();
              type metadata accessor for URL();
              lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
              dispatch thunk of Hashable.hash(into:)();
              unint64_t v31 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope;
              unint64_t v32 = (uint64_t)v7;
            }
            outlined destroy of Prompt.Turn.Segment(v32, v31);
            outlined destroy of Prompt.Turn.Segment((uint64_t)v11, type metadata accessor for AnnotationEnvelope);
            v29 += v30;
            --v27;
          }
          while (v27);
        }
        uint64_t v19 = v38;
        if (v38 >> 60 == 15)
        {
          Hasher._combine(_:)(0);
          uint64_t v20 = v39;
          uint64_t v17 = v36;
          uint64_t v13 = v37;
          uint64_t v15 = v43;
          uint64_t v18 = v41;
          uint64_t v25 = v35;
        }
        else
        {
          Hasher._combine(_:)(1u);
          uint64_t v25 = v35;
          outlined copy of Data._Representation(v35, v19);
          Data.hash(into:)();
          outlined consume of Data?(v25, v19);
          uint64_t v20 = v39;
          uint64_t v17 = v36;
          uint64_t v13 = v37;
          uint64_t v15 = v43;
          uint64_t v18 = v41;
        }
        uint64_t v16 = v42;
      }
      ++v13;
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v15, v17, v18, v25, v19, v16);
      int64_t v14 = v40;
    }
    while (v13 != v20);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  Swift::UInt v3 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  MEMORY[0x270FA5388](v21);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for AnnotationEnvelope(0);
  uint64_t v10 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v12 = (Swift::UInt *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    int64_t v14 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v14, (uint64_t)v12, type metadata accessor for AnnotationEnvelope);
      Hasher._combine(_:)(*v12);
      outlined init with copy of Prompt.Turn.Segment((uint64_t)v12 + *(int *)(v20 + 20), (uint64_t)v9, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of Prompt.Turn.Segment((uint64_t)v9, (uint64_t)v5, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
        Hasher._combine(_:)(1uLL);
        type metadata accessor for DocumentResourceIdentifier();
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v16 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope;
        uint64_t v17 = (uint64_t)v5;
      }
      else
      {
        outlined init with take of Prompt.Turn.Segment((uint64_t)v9, (uint64_t)v7, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
        Hasher._combine(_:)(0);
        String.hash(into:)();
        type metadata accessor for URL();
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v16 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope;
        uint64_t v17 = (uint64_t)v7;
      }
      outlined destroy of Prompt.Turn.Segment(v17, v16);
      outlined destroy of Prompt.Turn.Segment((uint64_t)v12, type metadata accessor for AnnotationEnvelope);
      v14 += v15;
      --v13;
    }
    while (v13);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v4 = type metadata accessor for DocumentResourceEnvelope(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    uint64_t v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v10 = *(void *)(v5 + 72);
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v9, (uint64_t)v7, type metadata accessor for DocumentResourceEnvelope);
      type metadata accessor for URL();
      lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      Hasher._combine(_:)(*(_DWORD *)&v7[*(int *)(v4 + 20)]);
      uint64_t v11 = *(void *)&v7[*(int *)(v4 + 24)];
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v11);
      swift_bridgeObjectRelease();
      outlined destroy of Prompt.Turn.Segment((uint64_t)v7, type metadata accessor for DocumentResourceEnvelope);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
}

{
  Swift::UInt v3;
  unsigned __int8 *v4;
  int v5;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)(a2 + 48);
    do
    {
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      if (v5 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v5 & 1);
      }
      v4 += 24;
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  uint64_t v20 = v4;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v19 = a2 + 32;
    do
    {
      uint64_t v7 = (uint64_t *)(v19 + 56 * v5);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v11 = v7[2];
      uint64_t v10 = v7[3];
      uint64_t v13 = v7[4];
      uint64_t v12 = v7[5];
      int64_t v14 = v7[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of FinishReason(v10, v13);
      outlined copy of Data._Representation(v12, v14);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v8);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(void *)(v9 + 16));
      uint64_t v15 = *(void *)(v9 + 16);
      if (v15)
      {
        uint64_t v21 = v10;
        unint64_t v22 = v12;
        swift_bridgeObjectRetain();
        uint64_t v16 = v9 + 48;
        do
        {
          uint64_t v17 = *(void *)(v16 + 32);
          uint64_t v18 = *(void *)(v16 + 40);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data?(v17, v18);
          String.hash(into:)();
          swift_bridgeObjectRelease();
          Hasher._combine(_:)(0);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v18 >> 60 == 15)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            outlined copy of Data._Representation(v17, v18);
            Data.hash(into:)();
            outlined consume of Data?(v17, v18);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data?(v17, v18);
          v16 += 64;
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease();
        uint64_t v12 = v22;
        uint64_t v10 = v21;
      }
      if (v11)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v11);
        swift_bridgeObjectRelease();
        if (!v13) {
          goto LABEL_19;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (!v13)
        {
LABEL_19:
          unint64_t v6 = 0;
          goto LABEL_4;
        }
      }
      if (v13 == 1)
      {
        unint64_t v6 = 2;
      }
      else
      {
        if (v13 != 2)
        {
          Hasher._combine(_:)(1uLL);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of FinishReason(v10, v13);
          goto LABEL_5;
        }
        unint64_t v6 = 3;
      }
LABEL_4:
      Hasher._combine(_:)(v6);
LABEL_5:
      ++v5;
      outlined copy of Data._Representation(v12, v14);
      Data.hash(into:)();
      outlined consume of Data._Representation(v12, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v10, v13);
      outlined consume of Data._Representation(v12, v14);
    }
    while (v5 != v20);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::UInt *v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  Swift::UInt v3 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v52 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v52);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  MEMORY[0x270FA5388](v54);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for PromptCompletion.Annotation(0);
  uint64_t v41 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v11 = (Swift::UInt *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v12);
  uint64_t v47 = v12;
  if (v12)
  {
    uint64_t v13 = 0;
    int64_t v14 = a2 + 32;
    uint64_t v46 = a2 + 32;
    uint64_t v42 = v5;
    do
    {
      uint64_t v25 = v14 + 48 * v13;
      unint64_t v26 = *(void *)v25;
      uint64_t v20 = *(void *)(v25 + 8);
      uint64_t v27 = *(void *)(v25 + 16);
      uint64_t v28 = *(void *)(v25 + 24);
      uint64_t v29 = *(void *)(v25 + 32);
      LODWORD(v25) = *(unsigned __int8 *)(v25 + 40);
      unint64_t v50 = v28;
      unint64_t v49 = v25;
      if (v25)
      {
        uint64_t v15 = v27;
        uint64_t v16 = v20;
        uint64_t v17 = v26;
        uint64_t v18 = v29;
        Hasher._combine(_:)(1uLL);
        uint64_t v19 = v17;
        uint64_t v20 = v16;
        uint64_t v21 = v15;
        unint64_t v22 = v50;
        outlined copy of PromptCompletion.Content(v19, v20, v21, v50, v18, 1);
        Data.hash(into:)();
        uint64_t v23 = v49;
        uint64_t v24 = v18;
      }
      else
      {
        uint64_t v30 = v26;
        unint64_t v31 = v29;
        uint64_t v48 = v27;
        Hasher._combine(_:)(0);
        unint64_t v32 = v48;
        unint64_t v51 = v31;
        outlined copy of PromptCompletion.Content(v30, v20, v48, v28, v31, 0);
        swift_bridgeObjectRetain();
        uint64_t v45 = v30;
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v33 = v32;
        Hasher._combine(_:)(*(void *)(v32 + 16));
        unint64_t v34 = *(void *)(v32 + 16);
        unint64_t v35 = (uint64_t)v42;
        if (v34)
        {
          uint64_t v43 = v20;
          unint64_t v44 = v13;
          uint64_t v36 = v41;
          unint64_t v37 = v33 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
          swift_bridgeObjectRetain();
          uint64_t v38 = *(void *)(v36 + 72);
          do
          {
            outlined init with copy of Prompt.Turn.Segment(v37, (uint64_t)v11, type metadata accessor for PromptCompletion.Annotation);
            Hasher._combine(_:)(*v11);
            outlined init with copy of Prompt.Turn.Segment((uint64_t)v11 + *(int *)(v53 + 20), (uint64_t)v9, type metadata accessor for PromptCompletion.Annotation.Type);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              outlined init with take of Prompt.Turn.Segment((uint64_t)v9, v35, type metadata accessor for PromptCompletion.DocumentCitation);
              Hasher._combine(_:)(1uLL);
              type metadata accessor for DocumentResourceIdentifier();
              lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
              dispatch thunk of Hashable.hash(into:)();
              uint64_t v39 = type metadata accessor for PromptCompletion.DocumentCitation;
              uint64_t v40 = v35;
            }
            else
            {
              outlined init with take of Prompt.Turn.Segment((uint64_t)v9, (uint64_t)v7, type metadata accessor for PromptCompletion.URLCitation);
              Hasher._combine(_:)(0);
              String.hash(into:)();
              type metadata accessor for URL();
              lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
              dispatch thunk of Hashable.hash(into:)();
              uint64_t v39 = type metadata accessor for PromptCompletion.URLCitation;
              uint64_t v40 = (uint64_t)v7;
            }
            outlined destroy of Prompt.Turn.Segment(v40, v39);
            outlined destroy of Prompt.Turn.Segment((uint64_t)v11, type metadata accessor for PromptCompletion.Annotation);
            v37 += v38;
            --v34;
          }
          while (v34);
          uint64_t v33 = v48;
          swift_bridgeObjectRelease();
          uint64_t v20 = v43;
          uint64_t v13 = v44;
        }
        uint64_t v21 = v33;
        if (v51 >> 60 == 15)
        {
          Hasher._combine(_:)(0);
          unint64_t v22 = v50;
          uint64_t v24 = v51;
        }
        else
        {
          Hasher._combine(_:)(1u);
          unint64_t v22 = v50;
          outlined copy of Data._Representation(v50, v51);
          Data.hash(into:)();
          outlined consume of Data?(v22, v51);
          uint64_t v24 = v51;
        }
        uint64_t v19 = v45;
        uint64_t v23 = v49;
      }
      ++v13;
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v19, v20, v21, v22, v24, v23);
      int64_t v14 = v46;
    }
    while (v13 != v47);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  Swift::UInt v3 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  MEMORY[0x270FA5388](v21);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PromptCompletion.Annotation(0);
  uint64_t v10 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v12 = (Swift::UInt *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    int64_t v14 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    do
    {
      outlined init with copy of Prompt.Turn.Segment(v14, (uint64_t)v12, type metadata accessor for PromptCompletion.Annotation);
      Hasher._combine(_:)(*v12);
      outlined init with copy of Prompt.Turn.Segment((uint64_t)v12 + *(int *)(v20 + 20), (uint64_t)v9, type metadata accessor for PromptCompletion.Annotation.Type);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of Prompt.Turn.Segment((uint64_t)v9, (uint64_t)v5, type metadata accessor for PromptCompletion.DocumentCitation);
        Hasher._combine(_:)(1uLL);
        type metadata accessor for DocumentResourceIdentifier();
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v16 = type metadata accessor for PromptCompletion.DocumentCitation;
        uint64_t v17 = (uint64_t)v5;
      }
      else
      {
        outlined init with take of Prompt.Turn.Segment((uint64_t)v9, (uint64_t)v7, type metadata accessor for PromptCompletion.URLCitation);
        Hasher._combine(_:)(0);
        String.hash(into:)();
        type metadata accessor for URL();
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v16 = type metadata accessor for PromptCompletion.URLCitation;
        uint64_t v17 = (uint64_t)v7;
      }
      outlined destroy of Prompt.Turn.Segment(v17, v16);
      outlined destroy of Prompt.Turn.Segment((uint64_t)v12, type metadata accessor for PromptCompletion.Annotation);
      v14 += v15;
      --v13;
    }
    while (v13);
  }
}

uint64_t specialized static Prompt.Turn.Segment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v27 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Prompt.Turn.Segment(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (uint64_t *)((char *)&v26 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v16[*(int *)(v14 + 56)];
  outlined init with copy of Prompt.Turn.Segment(a1, (uint64_t)v16, type metadata accessor for Prompt.Turn.Segment);
  outlined init with copy of Prompt.Turn.Segment(a2, (uint64_t)v17, type metadata accessor for Prompt.Turn.Segment);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of Prompt.Turn.Segment((uint64_t)v16, (uint64_t)v12, type metadata accessor for Prompt.Turn.Segment);
    uint64_t v22 = *v12;
    uint64_t v21 = v12[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      if (v22 == *(void *)v17 && v21 == *((void *)v17 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          outlined destroy of Prompt.Turn.Segment((uint64_t)v16, type metadata accessor for Prompt.Turn.Segment);
          goto LABEL_8;
        }
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v16, type metadata accessor for Prompt.Turn.Segment);
      char v19 = 1;
      return v19 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v16, &demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
LABEL_8:
    char v19 = 0;
    return v19 & 1;
  }
  uint64_t v18 = v27;
  outlined init with copy of Prompt.Turn.Segment((uint64_t)v16, (uint64_t)v10, type metadata accessor for Prompt.Turn.Segment);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v4);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v6, v17, v4);
  char v19 = MEMORY[0x2611FF3F0](v10, v6);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v18 + 8);
  v20(v6, v4);
  v20(v10, v4);
  outlined destroy of Prompt.Turn.Segment((uint64_t)v16, type metadata accessor for Prompt.Turn.Segment);
  return v19 & 1;
}

uint64_t lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL specialized static Prompt.ToolCall.Kind.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  BOOL result = 0;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    BOOL v7 = v2 == v4 && v3 == v5;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
  }
  return result;
}

BOOL specialized static Prompt.ToolCall.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v6 = a1[7];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  unint64_t v11 = a2[7];
  uint64_t v17 = a2[6];
  uint64_t v18 = a1[6];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v4 == v8 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v14 & 1) != 0))
    {
      if (v3 == v9 && v5 == v10 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v15 & 1) != 0))
      {
        if (v6 >> 60 == 15)
        {
          if (v11 >> 60 == 15) {
            return 1;
          }
        }
        else if (v11 >> 60 != 15)
        {
          outlined copy of Data?(v18, v6);
          outlined copy of Data?(v17, v11);
          char v16 = specialized static Data.== infix(_:_:)(v18, v6, v17, v11);
          outlined consume of Data?(v17, v11);
          outlined consume of Data?(v18, v6);
          return (v16 & 1) != 0;
        }
        outlined copy of Data?(v18, v6);
        outlined copy of Data?(v17, v11);
        outlined consume of Data?(v18, v6);
        outlined consume of Data?(v17, v11);
        return 0;
      }
    }
  }
  return result;
}

BOOL specialized static Prompt.Turn.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  char v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v44 - v16;
  MEMORY[0x270FA5388](v15);
  char v19 = (char *)&v44 - v18;
  if (*a1 != *a2) {
    return 0;
  }
  unint64_t v44 = v7;
  uint64_t v20 = v5;
  uint64_t v21 = type metadata accessor for Prompt.Turn(0);
  uint64_t v22 = *(int *)(v21 + 20);
  uint64_t v46 = a1;
  outlined init with copy of Locale?((uint64_t)&a1[v22], (uint64_t)v19);
  uint64_t v45 = (int *)v21;
  uint64_t v23 = *(int *)(v21 + 20);
  uint64_t v47 = a2;
  outlined init with copy of Locale?((uint64_t)&a2[v23], (uint64_t)v17);
  uint64_t v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of Locale?((uint64_t)v19, (uint64_t)v10);
  outlined init with copy of Locale?((uint64_t)v17, v24);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v25((uint64_t)v10, 1, v4) != 1)
  {
    outlined init with copy of Locale?((uint64_t)v10, (uint64_t)v14);
    if (v25(v24, 1, v4) != 1)
    {
      uint64_t v26 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v44, v24, v4);
      lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
      char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
      v28(v26, v4);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
      v28(v14, v4);
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
      if ((v27 & 1) == 0) {
        return 0;
      }
      goto LABEL_9;
    }
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v4);
LABEL_7:
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for (Locale?, Locale?));
    return 0;
  }
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
  if (v25(v24, 1, v4) != 1) {
    goto LABEL_7;
  }
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
LABEL_9:
  uint64_t v30 = v45;
  uint64_t v29 = v46;
  unint64_t v31 = v47;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)&v46[v45[6]], *(void *)&v47[v45[6]]) & 1) != 0
    && v29[v30[7]] == v31[v30[7]]
    && (specialized static Array<A>.== infix(_:_:)(*(void *)&v29[v30[8]], *(void *)&v31[v30[8]]) & 1) != 0)
  {
    uint64_t v32 = v30[9];
    uint64_t v33 = &v29[v32];
    uint64_t v34 = *(void *)&v29[v32];
    uint64_t v35 = *(void *)&v29[v32 + 8];
    uint64_t v36 = *(void *)&v29[v32 + 16];
    uint64_t v37 = *((void *)v33 + 3);
    uint64_t v38 = (uint64_t *)&v31[v32];
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = v38[2];
    uint64_t v42 = v38[3];
    if (v35)
    {
      if (v40) {
        return (v34 == v39 && v35 == v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
            && (v36 == v41 && v37 == v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (!v40)
    {
      return 1;
    }
    outlined copy of Prompt.ToolCallResult?(v39, v40);
    outlined consume of Prompt.ToolCallResult?(v34, v35);
    outlined consume of Prompt.ToolCallResult?(v39, v40);
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.Turn.Role and conformance Prompt.Turn.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.Turn.Role and conformance Prompt.Turn.Role;
  if (!lazy protocol witness table cache variable for type Prompt.Turn.Role and conformance Prompt.Turn.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Turn.Role and conformance Prompt.Turn.Role);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Prompt.Turn.Segment()
{
  return lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.Turn.Segment and conformance Prompt.Turn.Segment, (void (*)(uint64_t))type metadata accessor for Prompt.Turn.Segment);
}

uint64_t base witness table accessor for Equatable in Prompt.Turn()
{
  return lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.Turn and conformance Prompt.Turn, (void (*)(uint64_t))type metadata accessor for Prompt.Turn);
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall and conformance Prompt.ToolCall()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall and conformance Prompt.ToolCall;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall and conformance Prompt.ToolCall)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall and conformance Prompt.ToolCall);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult);
  }
  return result;
}

uint64_t sub_25F7D86C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Prompt.Turn.content.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Prompt.Turn(unsigned char *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Locale();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *((unsigned char *)v4 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = *(void *)((char *)a2 + v15 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18)
    {
      *uint64_t v16 = *v17;
      v16[1] = v18;
      uint64_t v19 = v17[3];
      v16[2] = v17[2];
      void v16[3] = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v20;
    }
  }
  return v4;
}

uint64_t destroy for Prompt.Turn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 36) + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *initializeWithCopy for Prompt.Turn(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *(void *)&a2[v13 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16)
  {
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = v15[3];
    v14[2] = v15[2];
    void v14[3] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
  }
  return a1;
}

unsigned char *assignWithCopy for Prompt.Turn(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)&a1[v15 + 8];
  uint64_t v19 = v17[1];
  if (v18)
  {
    if (v19)
    {
      *uint64_t v16 = *v17;
      v16[1] = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v16[2] = v17[2];
      void v16[3] = v17[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Prompt.ToolCallResult((uint64_t)v16);
      long long v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v20;
    }
  }
  else if (v19)
  {
    *uint64_t v16 = *v17;
    v16[1] = v17[1];
    v16[2] = v17[2];
    void v16[3] = v17[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v21;
  }
  return a1;
}

uint64_t outlined destroy of Prompt.ToolCallResult(uint64_t a1)
{
  return a1;
}

unsigned char *initializeWithTake for Prompt.Turn(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  return a1;
}

unsigned char *assignWithTake for Prompt.Turn(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  uint64_t v17 = (uint64_t)&a1[v16];
  uint64_t v18 = &a2[v16];
  if (!*(void *)&a1[v16 + 8])
  {
LABEL_11:
    long long v21 = *((_OWORD *)v18 + 1);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v21;
    return a1;
  }
  uint64_t v19 = *((void *)v18 + 1);
  if (!v19)
  {
    outlined destroy of Prompt.ToolCallResult(v17);
    goto LABEL_11;
  }
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *((void *)v18 + 3);
  *(void *)(v17 + 16) = *((void *)v18 + 2);
  *(void *)(v17 + 24) = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.Turn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7D918C);
}

uint64_t sub_25F7D918C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Prompt.Turn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7D9268);
}

uint64_t sub_25F7D9268(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for Prompt.Turn()
{
  type metadata accessor for Locale?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Locale?()
{
  if (!lazy cache variable for type metadata for Locale?)
  {
    type metadata accessor for Locale();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale?);
    }
  }
}

uint64_t getEnumTagSinglePayload for Prompt.Turn.Role(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Prompt.Turn.Role(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F7D959CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for Prompt.Turn.Role(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Prompt.Turn.Role()
{
  return &type metadata for Prompt.Turn.Role;
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.Turn.Segment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Prompt.ImageAttachment();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Prompt.Turn.Segment(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Prompt.ImageAttachment();
    int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for Prompt.Turn.Segment(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Prompt.ImageAttachment();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for Prompt.Turn.Segment(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Prompt.ImageAttachment();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for Prompt.Turn.Segment(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Prompt.ImageAttachment();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Prompt.Turn.Segment(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Prompt.ImageAttachment();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Prompt.Turn.Segment()
{
  uint64_t result = type metadata accessor for Prompt.ImageAttachment();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for Prompt.ToolCall(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    return outlined consume of Data._Representation(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for Prompt.ToolCall(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a2 + 6;
  unint64_t v7 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    outlined copy of Data._Representation(*v6, v7);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v7;
  }
  return a1;
}

void *assignWithCopy for Prompt.ToolCall(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 6;
  unint64_t v5 = a2[7];
  if (a1[7] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      uint64_t v8 = a1[6];
      unint64_t v9 = a1[7];
      a1[6] = v7;
      a1[7] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[6] = v6;
  a1[7] = v5;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for Prompt.ToolCall(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2 + 6;
  unint64_t v8 = a1[7];
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = a2[7];
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = a1[6];
      a1[6] = *v7;
      a1[7] = v9;
      outlined consume of Data._Representation(v10, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.ToolCall(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.ToolCall(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Prompt.ToolCall()
{
  return &type metadata for Prompt.ToolCall;
}

uint64_t getEnumTag for Prompt.ToolCall.Kind()
{
  return 0;
}

ValueMetadata *type metadata accessor for Prompt.ToolCall.Kind()
{
  return &type metadata for Prompt.ToolCall.Kind;
}

ValueMetadata *type metadata accessor for Prompt.ToolCall.Function()
{
  return &type metadata for Prompt.ToolCall.Function;
}

ValueMetadata *type metadata accessor for Prompt.ToolCallResult()
{
  return &type metadata for Prompt.ToolCallResult;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  __n128 result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 48 * a1 + 32);
    size_t v6 = 48 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  __n128 result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation))
                   - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    uint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Prompt.ToolCall.Function.Envelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D75677261 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Prompt.ToolCall.Function.Envelope.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Prompt.ToolCall.Function.Envelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t outlined copy of FinishReason(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of PromptCompletionEnvelope.SegmentEnvelope(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  if (a6)
  {
    return outlined consume of Data._Representation(a1, a2);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a4, a5);
  }
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope);
  }
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TurnSpan #1 in Prompt.turns()(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TurnSpan #1 in Prompt.turns()(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TurnSpan #1 in Prompt.turns()()
{
  return &unk_270BC41E0;
}

uint64_t getEnumTagSinglePayload for Prompt.ToolCall.Kind(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.ToolCall.Kind(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for Prompt.ToolCall.Function.Envelope()
{
  return &unk_270BC4420;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TurnDelimiter #1 in Prompt.turns()(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TurnDelimiter #1 in Prompt.turns()(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TurnDelimiter #1 in Prompt.turns()()
{
  return &unk_270BC4270;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Prompt.ToolCall.Function.Envelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F7DAFFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  return &unk_270BC4390;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS15TokenGeneration16PromptCompletionV10AggregatorV09CandidateI033_D174D4387BF6B304FA76AEBF3D593BFDLLV_G_AJ0J0Vs5NeverOTg504_s15e12Generation16gh3V10i15V6finishACyFAC9j10VAE0gE033_klmnopQ11BFDLLVXEfU_Tf1cn_n(uint64_t a1)
{
  v55[5] = *(id *)MEMORY[0x263EF8340];
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v4 = a1;
    uint64_t v54 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v54;
    unint64_t v5 = specialized Dictionary.startIndex.getter(v4);
    int v7 = v6;
    unint64_t v8 = v4 + 64;
    id v9 = self;
    id v44 = v9;
    uint64_t v10 = 0;
    char v11 = *(unsigned char *)(v4 + 32);
    uint64_t v39 = v4 + 80;
    uint64_t v43 = v4;
    int64_t v40 = v2;
    int v41 = v7;
    unint64_t v42 = v4 + 64;
    while ((v5 & 0x8000000000000000) == 0 && (uint64_t)v5 < 1 << v11)
    {
      unint64_t v14 = v5 >> 6;
      if ((*(void *)(v8 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_39;
      }
      if (*(_DWORD *)(v4 + 36) != v7) {
        goto LABEL_40;
      }
      uint64_t v53 = v3;
      uint64_t v15 = *(void *)(v4 + 56) + 56 * v5;
      uint64_t v17 = *(void *)v15;
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v1 = *(void *)(v15 + 24);
      unint64_t v8 = *(void *)(v15 + 32);
      uint64_t v45 = v10;
      uint64_t v46 = 1 << v5;
      uint64_t v52 = v5;
      if (*(unsigned char *)(v15 + 48) == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of FinishReason?(v1, v8);
        swift_bridgeObjectRetain();
        uint64_t v49 = MEMORY[0x263F8EE78];
        unint64_t v51 = (void *)MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v19 = *(void *)(v16 + 16);
        if (v19)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.ToolCall>);
          uint64_t v50 = v19;
          uint64_t v20 = (void *)swift_allocObject();
          int64_t v21 = _swift_stdlib_malloc_size(v20);
          uint64_t v22 = v21 - 32;
          if (v21 < 32) {
            uint64_t v22 = v21 + 31;
          }
          v20[2] = v50;
          v20[3] = 2 * (v22 >> 6);
          unint64_t v51 = v20;
          uint64_t v47 = specialized Sequence._copySequenceContents(initializing:)(v55, v20 + 4, v50, v16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          outlined copy of FinishReason?(v1, v8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v9 = (id)outlined consume of [String : Any].Iterator._Variant();
          if (v47 != (void *)v50) {
            goto LABEL_44;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of FinishReason?(v1, v8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v51 = (void *)MEMORY[0x263F8EE78];
        }
        uint64_t v49 = v17;
      }
      if (v8 == 3) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v1;
      }
      if (v8 == 3) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = v8;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of FinishReason?(v1, v8);
      uint64_t v25 = v18;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v55[0] = 0;
      id v27 = objc_msgSend(v44, sel_dataWithJSONObject_options_error_, isa, 0, v55);

      id v9 = v55[0];
      if (!v27) {
        goto LABEL_45;
      }
      uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      outlined consume of FinishReason?(v1, v8);
      id v9 = (id)swift_bridgeObjectRelease();
      uint64_t v3 = v53;
      unint64_t v8 = *(void *)(v53 + 16);
      unint64_t v30 = *(void *)(v53 + 24);
      if (v8 >= v30 >> 1)
      {
        id v9 = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v8 + 1, 1);
        uint64_t v3 = v53;
      }
      *(void *)(v3 + 16) = v8 + 1;
      unint64_t v31 = (void *)(v3 + 56 * v8);
      v31[4] = v49;
      v31[5] = v51;
      v31[6] = v25;
      v31[7] = v23;
      v31[8] = v24;
      v31[9] = v48;
      v31[10] = v29;
      uint64_t v4 = v43;
      char v11 = *(unsigned char *)(v43 + 32);
      unint64_t v5 = 1 << v11;
      if (v52 >= 1 << v11) {
        goto LABEL_41;
      }
      unint64_t v8 = v42;
      uint64_t v32 = *(void *)(v42 + 8 * v14);
      if ((v32 & v46) == 0) {
        goto LABEL_42;
      }
      int v7 = v41;
      if (*(_DWORD *)(v43 + 36) != v41) {
        goto LABEL_43;
      }
      unint64_t v33 = v32 & (-2 << (v52 & 0x3F));
      if (v33)
      {
        unint64_t v5 = __clz(__rbit64(v33)) | v52 & 0xFFFFFFFFFFFFFFC0;
        int64_t v12 = v40;
        uint64_t v13 = v45;
      }
      else
      {
        unint64_t v34 = v14 + 1;
        unint64_t v35 = (v5 + 63) >> 6;
        int64_t v12 = v40;
        uint64_t v13 = v45;
        if (v14 + 1 < v35)
        {
          unint64_t v36 = *(void *)(v42 + 8 * v34);
          if (v36)
          {
LABEL_36:
            unint64_t v5 = __clz(__rbit64(v36)) + (v34 << 6);
          }
          else
          {
            while (v35 - 2 != v14)
            {
              unint64_t v36 = *(void *)(v39 + 8 * v14++);
              if (v36)
              {
                unint64_t v34 = v14 + 1;
                goto LABEL_36;
              }
            }
          }
        }
      }
      uint64_t v10 = v13 + 1;
      if (v10 == v12) {
        return v3;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    uint64_t v38 = v9;
    outlined consume of FinishReason?(v1, v8);
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  return v3;
}

uint64_t PromptCompletion.modelInformation.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 PromptCompletion.modelInformation.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v4;
  *uint64_t v1 = v4;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*PromptCompletion.modelInformation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.promptModeration.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletion.promptModeration.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v2;
  return result;
}

uint64_t (*PromptCompletion.promptModeration.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.candidates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletion.candidates.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*PromptCompletion.candidates.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletion.usage.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  *a1 = result;
  return result;
}

__n128 PromptCompletion.usage.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 40) = *a1;
  return result;
}

uint64_t (*PromptCompletion.usage.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

id PromptCompletion.metadata.getter()
{
  v6[5] = *(id *)MEMORY[0x263EF8340];
  unint64_t v0 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, isa, 0, v6);

  id v3 = v6[0];
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_dynamicCast();
    return v6[0];
  }
  else
  {
    unint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t PromptCompletion.renderedPrompt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  return outlined init with copy of Prompt.Rendering?(v3, a1);
}

uint64_t PromptCompletion.renderedPrompt.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletion(0) + 36);
  return outlined assign with take of Prompt.Rendering?(a1, v3);
}

uint64_t (*PromptCompletion.renderedPrompt.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.init(modelInformation:candidates:usage:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v35 = a4;
  v39[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  int64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v32 - v13;
  uint64_t v15 = a1[1];
  uint64_t v16 = a1[2];
  uint64_t v36 = *a1;
  uint64_t v37 = v16;
  uint64_t v34 = *a3;
  uint64_t v17 = a3[1];
  uint64_t v32 = v15;
  uint64_t v33 = v17;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v18 = type metadata accessor for Prompt.Rendering();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v14, 1, 1, v18);
  uint64_t v20 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v39[0] = 0;
  id v22 = objc_msgSend(v20, sel_dataWithJSONObject_options_error_, isa, 0, v39);

  id v23 = v39[0];
  if (!v22)
  {
    unint64_t v31 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  outlined init with copy of Prompt.Rendering?((uint64_t)v14, (uint64_t)v12);
  uint64_t v27 = (uint64_t)v8 + *(int *)(v6 + 36);
  v19((char *)v27, 1, 1, v18);
  uint64_t v28 = v32;
  void *v8 = v36;
  v8[1] = v28;
  v8[2] = v37;
  v8[3] = 0;
  uint64_t v29 = v34;
  v8[4] = v38;
  v8[5] = v29;
  v8[6] = v33;
  v8[7] = v24;
  v8[8] = v26;
  outlined assign with take of Prompt.Rendering?((uint64_t)v12, v27);
  outlined init with take of PromptCompletion((uint64_t)v8, v35, type metadata accessor for PromptCompletion);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v14, &demangling cache variable for type metadata for Prompt.Rendering?);
}

uint64_t PromptCompletion.init(modelInformation:promptModeration:candidates:usage:metadata:renderedPrompt:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v34 = a6;
  uint64_t v35 = a5;
  uint64_t v39 = a3;
  v40[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  uint64_t v38 = a1[2];
  uint64_t v17 = *a2;
  uint64_t v36 = v15;
  uint64_t v37 = v17;
  uint64_t v18 = *a4;
  uint64_t v19 = a4[1];
  uint64_t v20 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v40[0] = 0;
  id v22 = objc_msgSend(v20, sel_dataWithJSONObject_options_error_, isa, 0, v40);

  id v23 = v40[0];
  if (!v22)
  {
    uint64_t v32 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  uint64_t v27 = v35;
  outlined init with copy of Prompt.Rendering?(v35, (uint64_t)v14);
  uint64_t v28 = (uint64_t)v11 + *(int *)(v9 + 36);
  uint64_t v29 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
  *uint64_t v11 = v36;
  v11[1] = v16;
  uint64_t v30 = v37;
  v11[2] = v38;
  v11[3] = v30;
  v11[4] = v39;
  v11[5] = v18;
  v11[6] = v19;
  v11[7] = v24;
  v11[8] = v26;
  outlined assign with take of Prompt.Rendering?((uint64_t)v14, v28);
  outlined init with take of PromptCompletion((uint64_t)v11, v34, type metadata accessor for PromptCompletion);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?(v27, &demangling cache variable for type metadata for Prompt.Rendering?);
}

uint64_t PromptCompletion.init(modelInformation:candidates:usage:renderedPrompt:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v32 = a5;
  v36[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  unint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v18 = *a1;
  uint64_t v17 = a1[1];
  uint64_t v34 = a1[2];
  uint64_t v19 = *a3;
  uint64_t v31 = a3[1];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v33 = a4;
  outlined init with copy of Prompt.Rendering?(a4, (uint64_t)v16);
  uint64_t v20 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v36[0] = 0;
  id v22 = objc_msgSend(v20, sel_dataWithJSONObject_options_error_, isa, 0, v36);

  id v23 = v36[0];
  if (!v22)
  {
    uint64_t v30 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  outlined init with copy of Prompt.Rendering?((uint64_t)v16, (uint64_t)v14);
  uint64_t v27 = (uint64_t)v10 + *(int *)(v8 + 36);
  uint64_t v28 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  *uint64_t v10 = v18;
  v10[1] = v17;
  v10[2] = v34;
  v10[3] = 0;
  v10[4] = v35;
  v10[5] = v19;
  v10[6] = v31;
  v10[7] = v24;
  v10[8] = v26;
  outlined assign with take of Prompt.Rendering?((uint64_t)v14, v27);
  outlined init with take of PromptCompletion((uint64_t)v10, v32, type metadata accessor for PromptCompletion);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v16, &demangling cache variable for type metadata for Prompt.Rendering?);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?(v33, &demangling cache variable for type metadata for Prompt.Rendering?);
}

uint64_t PromptCompletion.init(modelInformation:promptModeration:candidates:usage:renderedPrompt:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v36 = a6;
  v42[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = *a1;
  uint64_t v20 = a1[1];
  uint64_t v40 = a1[2];
  uint64_t v21 = *a2;
  uint64_t v38 = v19;
  uint64_t v39 = v21;
  uint64_t v22 = *a4;
  uint64_t v35 = a4[1];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v37 = a5;
  outlined init with copy of Prompt.Rendering?(a5, (uint64_t)v18);
  id v23 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v42[0] = 0;
  id v25 = objc_msgSend(v23, sel_dataWithJSONObject_options_error_, isa, 0, v42);

  id v26 = v42[0];
  if (!v25)
  {
    uint64_t v34 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  outlined init with copy of Prompt.Rendering?((uint64_t)v18, (uint64_t)v16);
  uint64_t v30 = (uint64_t)v12 + *(int *)(v10 + 36);
  uint64_t v31 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *uint64_t v12 = v38;
  v12[1] = v20;
  uint64_t v32 = v39;
  void v12[2] = v40;
  uint64_t v12[3] = v32;
  void v12[4] = v41;
  v12[5] = v22;
  v12[6] = v35;
  v12[7] = v27;
  v12[8] = v29;
  outlined assign with take of Prompt.Rendering?((uint64_t)v16, v30);
  outlined init with take of PromptCompletion((uint64_t)v12, v36, type metadata accessor for PromptCompletion);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v18, &demangling cache variable for type metadata for Prompt.Rendering?);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?(v37, &demangling cache variable for type metadata for Prompt.Rendering?);
}

uint64_t PromptCompletion.Candidate.segments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletion.Candidate.segments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PromptCompletion.Candidate.segments.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.Candidate.toolCalls.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletion.Candidate.toolCalls.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PromptCompletion.Candidate.toolCalls.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.Candidate.moderation.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletion.Candidate.moderation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*PromptCompletion.Candidate.moderation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.Candidate.finishReason.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  unint64_t v3 = *(void *)(v1 + 32);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of FinishReason(v2, v3);
}

uint64_t PromptCompletion.Candidate.finishReason.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = outlined consume of FinishReason(*(void *)(v1 + 24), *(void *)(v1 + 32));
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v3;
  return result;
}

uint64_t (*PromptCompletion.Candidate.finishReason.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

id PromptCompletion.Candidate.metadata.getter()
{
  v6[5] = *(id *)MEMORY[0x263EF8340];
  unint64_t v0 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, isa, 0, v6);

  id v3 = v6[0];
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_dynamicCast();
    return v6[0];
  }
  else
  {
    unint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void PromptCompletion.Candidate.init(segments:toolCalls:finishReason:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  v17[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = *a3;
  unint64_t v7 = a3[1];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v9 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v17[0] = 0;
  id v11 = objc_msgSend(v9, sel_dataWithJSONObject_options_error_, isa, 0, v17);

  id v12 = v17[0];
  if (!v11)
  {
    uint64_t v16 = v12;
    outlined consume of FinishReason(v8, v7);
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *a4 = a1;
  a4[1] = a2;
  a4[2] = 0;
  a4[3] = v8;
  a4[4] = v7;
  a4[5] = v13;
  a4[6] = v15;
}

void PromptCompletion.Candidate.init(segments:toolCalls:moderation:finishReason:metadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  v19[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = *a3;
  uint64_t v10 = *a4;
  unint64_t v9 = a4[1];
  id v11 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19[0] = 0;
  id v13 = objc_msgSend(v11, sel_dataWithJSONObject_options_error_, isa, 0, v19);

  id v14 = v19[0];
  if (!v13)
  {
    uint64_t v18 = v14;
    outlined consume of FinishReason(v10, v9);
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  *a5 = a1;
  a5[1] = a2;
  a5[2] = v8;
  a5[3] = v10;
  a5[4] = v9;
  a5[5] = v15;
  a5[6] = v17;
}

uint64_t PromptCompletion.Candidate.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  unint64_t v9 = v1[6];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v6);
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
LABEL_7:
    Swift::UInt v10 = 0;
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
  if (!v8) {
    goto LABEL_7;
  }
LABEL_3:
  if (v8 == 1)
  {
    Swift::UInt v10 = 2;
    goto LABEL_9;
  }
  if (v8 == 2)
  {
    Swift::UInt v10 = 3;
LABEL_9:
    Hasher._combine(_:)(v10);
    goto LABEL_11;
  }
  Hasher._combine(_:)(1uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of FinishReason(v5, v8);
LABEL_11:
  outlined copy of Data._Representation(v7, v9);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v7, v9);
}

Swift::Int PromptCompletion.Candidate.hashValue.getter()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  Hasher.init(_seed:)();
  PromptCompletion.Candidate.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Candidate()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  Hasher.init(_seed:)();
  PromptCompletion.Candidate.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Candidate()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  Hasher.init(_seed:)();
  PromptCompletion.Candidate.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t PromptCompletion.Segment.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  return outlined copy of PromptCompletion.Content(v2, v3, v4, v5, v6, v7);
}

__n128 PromptCompletion.Segment.content.setter(long long *a1)
{
  __n128 v5 = (__n128)a1[1];
  long long v6 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  char v3 = *((unsigned char *)a1 + 40);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  __n128 result = v5;
  *(_OWORD *)uint64_t v1 = v6;
  *(__n128 *)(v1 + 16) = v5;
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 40) = v3;
  return result;
}

uint64_t (*PromptCompletion.Segment.content.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletion.Segment.init(content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v2;
  *(unsigned char *)(a2 + 40) = v3;
  return result;
}

void PromptCompletion.Segment.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v7 = *(void *)(v1 + 32);
  if (*(unsigned char *)(v1 + 40))
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v4, v3);
    Data.hash(into:)();
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v4, v3, v6, v5, v7, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v6);
    swift_bridgeObjectRelease();
    if (v7 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v5, v7);
      Data.hash(into:)();
      outlined consume of Data?(v5, v7);
    }
  }
}

BOOL static PromptCompletion.Segment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = *(void *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  unint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 40);
  if (v7)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      uint64_t v14 = 1;
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = *(void *)(a2 + 16);
      unint64_t v25 = *(void *)(a2 + 32);
      unint64_t v17 = *(void *)(a1 + 8);
      outlined copy of PromptCompletion.Content(*(void *)a2, *(void *)(a2 + 8), v10, v11, v25, 1);
      outlined copy of PromptCompletion.Content(v3, v17, v5, v4, v6, 1);
      outlined copy of PromptCompletion.Content(v3, v17, v5, v4, v6, 1);
      outlined copy of PromptCompletion.Content(v15, v9, v16, v11, v25, 1);
      char v27 = specialized static Data.== infix(_:_:)(v3, v17, v15, v9);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v17, v5, v4, v6, 1);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v15, v9, v16, v11, v25, 1);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v15, v9, v16, v11, v25, 1);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v17, v5, v4, v6, 1);
      if (v27) {
        return v14;
      }
      return 0;
    }
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_6:
    uint64_t v18 = *(void *)a2;
    unint64_t v26 = *(void *)(a1 + 8);
    uint64_t v28 = *(void *)a1;
    uint64_t v19 = *(void *)(a2 + 16);
    outlined copy of PromptCompletion.Content(*(void *)a1, v2, v5, v4, v6, v7);
    outlined copy of PromptCompletion.Content(v18, v9, v19, v11, v12, v13);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v28, v26, v5, v4, v6, v7);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v18, v9, v19, v11, v12, v13);
    return 0;
  }
  v31[0] = *(void *)a1;
  v31[1] = v2;
  v31[2] = v5;
  v31[3] = v4;
  v31[4] = v6;
  v30[0] = v8;
  v30[1] = v9;
  uint64_t v20 = v10;
  v30[2] = v10;
  v30[3] = v11;
  v30[4] = v12;
  uint64_t v21 = v8;
  unint64_t v22 = v6;
  unint64_t v23 = v2;
  outlined copy of PromptCompletion.Content(v8, v9, v10, v11, v12, 0);
  outlined copy of PromptCompletion.Content(v3, v23, v5, v4, v22, 0);
  outlined copy of PromptCompletion.Content(v3, v23, v5, v4, v22, 0);
  outlined copy of PromptCompletion.Content(v21, v9, v20, v11, v12, 0);
  BOOL v29 = specialized static PromptCompletion.TextContent.== infix(_:_:)(v31, v30);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v23, v5, v4, v22, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v9, v20, v11, v12, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v9, v20, v11, v12, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v23, v5, v4, v22, 0);
  return v29;
}

Swift::Int PromptCompletion.Segment.hashValue.getter()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v6)
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v2, v1, v4, v3, v5, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v8, v4);
    swift_bridgeObjectRelease();
    if (v5 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v3, v5);
      Data.hash(into:)();
      outlined consume of Data?(v3, v5);
    }
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletion.Segment(uint64_t a1)
{
  uint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v7 = *(void *)(v1 + 32);
  if (*(unsigned char *)(v1 + 40))
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v4, v3);
    Data.hash(into:)();
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v4, v3, v6, v5, v7, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v6);
    swift_bridgeObjectRelease();
    if (v7 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v5, v7);
      Data.hash(into:)();
      outlined consume of Data?(v5, v7);
    }
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Segment()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v6)
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v2, v1, v4, v3, v5, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v8, v4);
    swift_bridgeObjectRelease();
    if (v5 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v3, v5);
      Data.hash(into:)();
      outlined consume of Data?(v3, v5);
    }
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletion.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  uint64_t v13 = v2;
  char v14 = v3;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  uint64_t v10 = v4;
  char v11 = v5;
  return specialized static PromptCompletion.Content.== infix(_:_:)((uint64_t)v12, (uint64_t)v9);
}

void PromptCompletion.Content.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v7 = *(void *)(v1 + 32);
  if (*(unsigned char *)(v1 + 40))
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v4, v3);
    Data.hash(into:)();
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v4, v3, v6, v5, v7, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v6);
    swift_bridgeObjectRelease();
    if (v7 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v5, v7);
      Data.hash(into:)();
      outlined consume of Data?(v5, v7);
    }
  }
}

uint64_t static PromptCompletion.ImageContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

Swift::Int PromptCompletion.Content.hashValue.getter()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v6)
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v2, v1, v4, v3, v5, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v8, v4);
    swift_bridgeObjectRelease();
    if (v5 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v3, v5);
      Data.hash(into:)();
      outlined consume of Data?(v3, v5);
    }
  }
  return Hasher._finalize()();
}

uint64_t PromptCompletion.TextContent.value.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletion.TextContent.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletion.TextContent.value.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.TextContent.annotations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletion.TextContent.annotations.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PromptCompletion.TextContent.annotations.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.TextContent._userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of Data?(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t PromptCompletion.TextContent._userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*PromptCompletion.TextContent._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

double PromptCompletion.TextContent.init(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = MEMORY[0x263F8EE78];
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = xmmword_25F91CC60;
  return result;
}

double PromptCompletion.TextContent.init(value:annotations:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  double result = 0.0;
  *(_OWORD *)(a4 + 24) = xmmword_25F91CC60;
  return result;
}

void PromptCompletion.TextContent.hash(into:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  unint64_t v5 = v1[4];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v3, v5);
    Data.hash(into:)();
    outlined consume of Data?(v3, v5);
  }
}

Swift::Int PromptCompletion.TextContent.hashValue.getter()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  unint64_t v3 = v0[4];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v3);
    Data.hash(into:)();
    outlined consume of Data?(v1, v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletion.TextContent(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  unint64_t v5 = v1[4];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v3, v5);
    Data.hash(into:)();
    outlined consume of Data?(v3, v5);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.TextContent()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  unint64_t v3 = v0[4];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v3);
    Data.hash(into:)();
    outlined consume of Data?(v1, v3);
  }
  return Hasher._finalize()();
}

uint64_t PromptCompletion.Annotation.index.getter()
{
  return *(void *)v0;
}

uint64_t PromptCompletion.Annotation.index.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PromptCompletion.Annotation.index.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.Annotation.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PromptCompletion.Annotation(0);
  return outlined init with copy of PromptCompletion.Annotation.Type(v1 + *(int *)(v3 + 20), a1, type metadata accessor for PromptCompletion.Annotation.Type);
}

uint64_t PromptCompletion.Annotation.type.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletion.Annotation(0) + 20);
  return outlined assign with take of PromptCompletion.Annotation.Type(a1, v3);
}

uint64_t (*PromptCompletion.Annotation.type.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.Annotation.Type.hash(into:)()
{
  uint64_t v1 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PromptCompletion.Annotation.Type(v0, (uint64_t)v9, type metadata accessor for PromptCompletion.Annotation.Type);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PromptCompletion((uint64_t)v9, (uint64_t)v3, type metadata accessor for PromptCompletion.DocumentCitation);
    Hasher._combine(_:)(1uLL);
    type metadata accessor for DocumentResourceIdentifier();
    lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v10 = type metadata accessor for PromptCompletion.DocumentCitation;
    uint64_t v11 = (uint64_t)v3;
  }
  else
  {
    outlined init with take of PromptCompletion((uint64_t)v9, (uint64_t)v6, type metadata accessor for PromptCompletion.URLCitation);
    Hasher._combine(_:)(0);
    String.hash(into:)();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v10 = type metadata accessor for PromptCompletion.URLCitation;
    uint64_t v11 = (uint64_t)v6;
  }
  return outlined destroy of PromptCompletion.DocumentCitation(v11, v10);
}

uint64_t static PromptCompletion.URLCitation.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for PromptCompletion.URLCitation(0);
    JUMPOUT(0x2611FEFF0);
  }
  return 0;
}

Swift::Int PromptCompletion.Annotation.Type.hashValue.getter()
{
  return PromptCompletion.Annotation.Type.hashValue.getter((void (*)(unsigned char *))PromptCompletion.Annotation.Type.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Annotation.Type(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Annotation.Type(a1, a2, (void (*)(unsigned char *))PromptCompletion.Annotation.Type.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Annotation.Type(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Annotation.Type(a1, a2, a3, (void (*)(unsigned char *))PromptCompletion.Annotation.Type.hash(into:));
}

uint64_t PromptCompletion.Annotation.init(index:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v5 = type metadata accessor for PromptCompletion.Annotation(0);
  return outlined init with take of PromptCompletion(a2, (uint64_t)a3 + *(int *)(v5 + 20), type metadata accessor for PromptCompletion.Annotation.Type);
}

uint64_t PromptCompletion.Annotation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  type metadata accessor for PromptCompletion.Annotation(0);
  return PromptCompletion.Annotation.Type.hash(into:)();
}

uint64_t static PromptCompletion.Annotation.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for PromptCompletion.Annotation(0) + 20);
  return specialized static PromptCompletion.Annotation.Type.== infix(_:_:)((uint64_t)a1 + v4, (uint64_t)a2 + v4);
}

Swift::Int PromptCompletion.Annotation.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for PromptCompletion.Annotation(0);
  PromptCompletion.Annotation.Type.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Annotation()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  PromptCompletion.Annotation.Type.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletion.Annotation()
{
  Hasher._combine(_:)(*v0);
  return PromptCompletion.Annotation.Type.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Annotation()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  PromptCompletion.Annotation.Type.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletion.Annotation(void *a1, void *a2, uint64_t a3)
{
  if (*a1 == *a2) {
    return specialized static PromptCompletion.Annotation.Type.== infix(_:_:)((uint64_t)a1 + *(int *)(a3 + 20), (uint64_t)a2 + *(int *)(a3 + 20));
  }
  else {
    return 0;
  }
}

uint64_t PromptCompletion.URLCitation.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletion.URLCitation.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *BOOL v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletion.URLCitation.title.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.URLCitation.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t PromptCompletion.URLCitation.url.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*PromptCompletion.URLCitation.url.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.URLCitation.init(title:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  return v7(v5, a3, v6);
}

uint64_t PromptCompletion.URLCitation.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int PromptCompletion.URLCitation.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.URLCitation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletion.URLCitation()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.URLCitation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletion.URLCitation(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    JUMPOUT(0x2611FEFF0);
  }
  return 0;
}

uint64_t PromptCompletion.DocumentCitation.documentIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t PromptCompletion.DocumentCitation.documentIdentifier.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*PromptCompletion.DocumentCitation.documentIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.DocumentCitation.init(documentIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  return v5(a2, a1, v4);
}

uint64_t PromptCompletion.DocumentCitation.hash(into:)()
{
  type metadata accessor for DocumentResourceIdentifier();
  lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int PromptCompletion.DocumentCitation.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.DocumentCitation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletion.DocumentCitation()
{
  type metadata accessor for DocumentResourceIdentifier();
  lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.DocumentCitation()
{
  return Hasher._finalize()();
}

uint64_t PromptCompletion.ImageContent.init(data:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t PromptCompletion.ImageContent.imageData()()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  return PromptCompletion.ImageContent.imageData()(v4, v1, v2, v3);
}

uint64_t PromptCompletion.ImageContent.hash(into:)()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v1);
}

Swift::Int PromptCompletion.ImageContent.hashValue.getter()
{
  return PromptCompletion.ImageContent.hashValue.getter(MEMORY[0x263F06F38]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.ImageContent(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.ImageContent(a1, a2, MEMORY[0x263F06F38]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletion.ImageContent()
{
  return Data.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.ImageContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.ImageContent(a1, a2, a3, MEMORY[0x263F06F38]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletion.ImageContent(uint64_t a1, uint64_t a2)
{
  return specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t PromptCompletion.Moderation.ratings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletion.Moderation.ratings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*PromptCompletion.Moderation.ratings.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

TokenGeneration::PromptCompletion::Moderation __swiftcall PromptCompletion.Moderation.init(ratings:)(TokenGeneration::PromptCompletion::Moderation ratings)
{
  v1->ratings._rawValue = ratings.ratings._rawValue;
  return ratings;
}

uint64_t PromptCompletion.Moderation.Category.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

TokenGeneration::PromptCompletion::Moderation::Category __swiftcall PromptCompletion.Moderation.Category.init(identifier:)(TokenGeneration::PromptCompletion::Moderation::Category identifier)
{
  *uint64_t v1 = identifier;
  return identifier;
}

uint64_t PromptCompletion.Moderation.Category.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static PromptCompletion.Moderation.Category.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int PromptCompletion.Moderation.Category.hashValue.getter()
{
  return PromptCompletion.ImageContent.hashValue.getter(MEMORY[0x263F8D2A8]);
}

Swift::Int PromptCompletion.ImageContent.hashValue.getter(void (*a1)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)();
  a1(v6, v4, v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Moderation.Category(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.ImageContent(a1, a2, MEMORY[0x263F8D2A8]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.ImageContent(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  Hasher.init(_seed:)();
  a3(v8, v6, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletion.Moderation.Category()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Moderation.Category(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.ImageContent(a1, a2, a3, MEMORY[0x263F8D2A8]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.ImageContent(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v7 = *v4;
  uint64_t v6 = v4[1];
  Hasher.init(_seed:)();
  a4(v9, v7, v6);
  return Hasher._finalize()();
}

BOOL static PromptCompletion.Moderation.Probability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PromptCompletion.Moderation.Probability.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PromptCompletion.Moderation.Probability.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PromptCompletion.Moderation.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static PromptCompletion.Moderation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    int v18 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v11);
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(unsigned __int8 *)(*(void *)(a2 + 56) + v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  void *v24;
  char v26;
  int64_t v27;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  char v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      int64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27) {
      return 1;
    }
    int64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      int64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        int64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    int64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    int v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    char v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  unint64_t v13 = v11 + 3;
  if (v13 >= v27) {
    return 1;
  }
  int64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    int64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v34 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *(void *)(result + 64);
  uint64_t v35 = (unint64_t)(v5 + 63) >> 6;
  while (v7)
  {
    unint64_t v8 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    int64_t v9 = v8 | (v4 << 6);
LABEL_23:
    unint64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    int64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      goto LABEL_50;
    }
    char v20 = *(void *)(*(void *)(a2 + 56) + 8 * v17);
    char v21 = *(void *)(v20 + 16);
    if (v21 != *(void *)(v16 + 16)) {
      goto LABEL_50;
    }
    if (v21) {
      unint64_t v22 = v20 == v16;
    }
    else {
      unint64_t v22 = 1;
    }
    if (!v22)
    {
      unint64_t v23 = *(unsigned __int8 *)(v20 + 48);
      uint64_t v24 = *(unsigned __int8 *)(v16 + 48);
      unint64_t v25 = *(void *)(v20 + 32) == *(void *)(v16 + 32) && *(void *)(v20 + 40) == *(void *)(v16 + 40);
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v23 != v24)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        return 0;
      }
      unint64_t v26 = v21 - 1;
      if (v26)
      {
        char v27 = *(unsigned __int8 *)(v20 + 72);
        uint64_t v28 = *(unsigned __int8 *)(v16 + 72);
        BOOL v29 = *(void *)(v20 + 56) == *(void *)(v16 + 56) && *(void *)(v20 + 64) == *(void *)(v16 + 64);
        if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v27 != v28) {
          goto LABEL_50;
        }
        uint64_t v30 = 0;
        while (--v26)
        {
          uint64_t v31 = *(unsigned __int8 *)(v20 + v30 + 96);
          uint64_t v32 = *(unsigned __int8 *)(v16 + v30 + 96);
          uint64_t v33 = *(void *)(v20 + v30 + 80) == *(void *)(v16 + v30 + 80)
             && *(void *)(v20 + v30 + 88) == *(void *)(v16 + v30 + 88);
          if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v30 += 24;
            if (v31 == v32) {
              continue;
            }
          }
          goto LABEL_50;
        }
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  unint64_t v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_54;
  }
  if (v10 >= v35) {
    return 1;
  }
  unint64_t v11 = *(void *)(v34 + 8 * v10);
  ++v4;
  if (v11) {
    goto LABEL_22;
  }
  int64_t v4 = v10 + 1;
  if (v10 + 1 >= v35) {
    return 1;
  }
  unint64_t v11 = *(void *)(v34 + 8 * v4);
  if (v11) {
    goto LABEL_22;
  }
  int64_t v4 = v10 + 2;
  if (v10 + 2 >= v35) {
    return 1;
  }
  unint64_t v11 = *(void *)(v34 + 8 * v4);
  if (v11)
  {
LABEL_22:
    uint64_t v7 = (v11 - 1) & v11;
    int64_t v9 = __clz(__rbit64(v11)) + (v4 << 6);
    goto LABEL_23;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v35) {
    return 1;
  }
  unint64_t v11 = *(void *)(v34 + 8 * v12);
  if (v11)
  {
    int64_t v4 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v4 >= v35) {
      return 1;
    }
    unint64_t v11 = *(void *)(v34 + 8 * v4);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_54:
  __break(1u);
  return result;
}

Swift::Int PromptCompletion.Moderation.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Moderation()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletion.Moderation(uint64_t a1)
{
  specialized Dictionary<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Moderation()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletion.Moderation(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t static PromptCompletion.collecting<A>(events:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  v4[18] = type metadata accessor for PromptCompletion(0);
  v4[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[22] = AssociatedTypeWitness;
  v4[23] = *(void *)(AssociatedTypeWitness - 8);
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  v4[26] = *(void *)(a3 - 8);
  v4[27] = swift_task_alloc();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  v4[28] = v7;
  v4[29] = *(void *)(v7 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = type metadata accessor for PromptCompletion.Aggregator(0);
  v4[32] = swift_task_alloc();
  return MEMORY[0x270FA2498](static PromptCompletion.collecting<A>(events:), 0, 0);
}

uint64_t static PromptCompletion.collecting<A>(events:)()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = MEMORY[0x263F8EE78];
  *uint64_t v2 = MEMORY[0x263F8EE78];
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = -1;
  v2[4] = -1;
  v2[5] = 0;
  v2[6] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  uint64_t v8 = *(int *)(v1 + 32);
  *(_DWORD *)(v0 + 312) = v8;
  uint64_t v9 = (char *)v2 + v8;
  uint64_t v10 = type metadata accessor for Prompt.Rendering();
  *(void *)(v0 + 264) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  *(void *)(v0 + 272) = v12;
  *(void *)(v0 + 280) = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v12(v9, 1, 1, v10);
  uint64_t v13 = *(int *)(v1 + 36);
  *(_DWORD *)(v0 + 316) = v13;
  *(void *)((char *)v2 + v13) = specialized Dictionary.init(dictionaryLiteral:)(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)(v0 + 288) = AssociatedConformanceWitness;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v15;
  *uint64_t v15 = v0;
  v15[1] = static PromptCompletion.collecting<A>(events:);
  uint64_t v16 = *(void *)(v0 + 224);
  uint64_t v17 = *(void *)(v0 + 200);
  return MEMORY[0x270FA1E88](v0 + 16, 0, 0, v17, v16, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = static PromptCompletion.collecting<A>(events:);
  }
  else {
    uint64_t v2 = static PromptCompletion.collecting<A>(events:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t AssociatedConformanceWitness;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Class isa;
  id v17;
  id v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (*(void *)(v0 + 40))
  {
    outlined init with take of AsyncIteratorProtocol((long long *)(v0 + 16), v0 + 56);
    PromptCompletion.Aggregator.receive(event:)((void *)(v0 + 56));
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(void *)(v0 + 288) = AssociatedConformanceWitness;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v2;
    *uint64_t v2 = v0;
    v2[1] = static PromptCompletion.collecting<A>(events:);
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v5 = v0 + 16;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = AssociatedConformanceWitness;
    return MEMORY[0x270FA1E88](v5, v6, v7, v4, v3, v8);
  }
  uint64_t v9 = *(uint64_t **)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v11 = (uint64_t)v9 + *(int *)(v0 + 312);
  (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
  int64_t v12 = *v9;
  uint64_t v36 = v9[1];
  uint64_t v13 = v9[2];
  int64_t v14 = v9[6];
  uint64_t v38 = v9[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v39 = v12;
  swift_bridgeObjectRetain();
  uint64_t v40 = v13;
  swift_bridgeObjectRetain();
  uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS15TokenGeneration16PromptCompletionV10AggregatorV09CandidateI033_D174D4387BF6B304FA76AEBF3D593BFDLLV_G_AJ0J0Vs5NeverOTg504_s15e12Generation16gh3V10i15V6finishACyFAC9j10VAE0gE033_klmnopQ11BFDLLVXEfU_Tf1cn_n(v14);
  swift_bridgeObjectRelease();
  uint64_t v34 = v9[4];
  uint64_t v35 = v9[3];
  outlined init with copy of Prompt.Rendering?(v11, v10);
  uint64_t v15 = self;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 104) = 0;
  uint64_t v17 = objc_msgSend(v15, sel_dataWithJSONObject_options_error_, isa, 0, v0 + 104);

  int v18 = *(id *)(v0 + 104);
  if (!v17)
  {
    uint64_t v31 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    uint64_t v5 = swift_willThrow();
    __break(1u);
    return MEMORY[0x270FA1E88](v5, v6, v7, v4, v3, v8);
  }
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 272);
  char v20 = *(void *)(v0 + 264);
  uint64_t v33 = *(void *)(v0 + 256);
  char v21 = *(void *)(v0 + 160);
  unint64_t v22 = *(void *)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 144);
  unint64_t v23 = *(void **)(v0 + 152);
  uint64_t v32 = *(void *)(v0 + 112);
  unint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  char v27 = v26;

  outlined init with copy of Prompt.Rendering?(v22, v21);
  uint64_t v28 = (uint64_t)v23 + *(int *)(v24 + 36);
  v19(v28, 1, 1, v20);
  *unint64_t v23 = v39;
  v23[1] = v36;
  v23[2] = v40;
  v23[3] = v38;
  v23[4] = v37;
  v23[5] = v35;
  v23[6] = v34;
  v23[7] = v25;
  v23[8] = v27;
  outlined assign with take of Prompt.Rendering?(v21, v28);
  outlined init with take of PromptCompletion((uint64_t)v23, v32, type metadata accessor for PromptCompletion);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v22, &demangling cache variable for type metadata for Prompt.Rendering?);
  outlined destroy of PromptCompletion.DocumentCitation(v33, type metadata accessor for PromptCompletion.Aggregator);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[23] + 32);
  v1(v0[24], v0[25], v0[22]);
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = _getErrorEmbeddedNSError<A>(_:)();
  uint64_t v3 = v0[24];
  if (v2)
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  }
  else
  {
    uint64_t v4 = v0[22];
    swift_allocError();
    v1(v5, v3, v4);
  }
  uint64_t v6 = v0[32];
  (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
  outlined destroy of PromptCompletion.DocumentCitation(v6, type metadata accessor for PromptCompletion.Aggregator);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

unint64_t PromptCompletion.Aggregator.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = -1;
  a1[4] = -1;
  a1[5] = 0;
  a1[6] = specialized Dictionary.init(dictionaryLiteral:)(v2);
  uint64_t v3 = type metadata accessor for PromptCompletion.Aggregator(0);
  uint64_t v4 = (char *)a1 + *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = *(int *)(v3 + 36);
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v2);
  *(void *)((char *)a1 + v6) = result;
  return result;
}

uint64_t PromptCompletion.Aggregator.receive(event:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v173 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for PromptCompletionEventCandidateAnnotation(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  *(void *)&long long v150 = (char *)v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (unint64_t)v147 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (unint64_t)v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t)v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v147 - v16;
  outlined init with copy of PromptCompletionEvent((uint64_t)a1, (uint64_t)v172);
  unint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if (swift_dynamicCast())
  {
    long long v150 = v164;
    uint64_t v19 = v165;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)uint64_t v2 = v150;
    *(void *)(v2 + 16) = v19;
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
  }
  if (swift_dynamicCast())
  {
    outlined init with take of PromptCompletion((uint64_t)v17, v15, type metadata accessor for PromptCompletionEventRenderedPrompt);
    uint64_t v20 = v15 + *(int *)(v12 + 20);
    uint64_t v21 = type metadata accessor for Prompt.Rendering();
    uint64_t v22 = *(void *)(v21 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 16))(v11, v20, v21);
    outlined destroy of PromptCompletion.DocumentCitation(v15, type metadata accessor for PromptCompletionEventRenderedPrompt);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v22 + 56))(v11, 0, 1, v21);
    uint64_t v23 = type metadata accessor for PromptCompletion.Aggregator(0);
    outlined assign with take of Prompt.Rendering?(v11, v2 + *(int *)(v23 + 32));
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
  }
  if (swift_dynamicCast())
  {
    long long v24 = v164;
    swift_bridgeObjectRelease();
    *(_OWORD *)(v2 + 24) = v24;
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
  }
  unint64_t v25 = v2;
  if (swift_dynamicCast())
  {
    uint64_t v26 = v164;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v2 + 40) = v26;
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
  }
  if (swift_dynamicCast())
  {
    uint64_t v2 = v163;
    uint64_t v4 = *((void *)&v164 + 1);
    unint64_t v18 = v164;
    unint64_t v8 = v165;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v152 = *(void *)(v25 + 48);
    uint64_t v28 = v152;
    *(void *)(v25 + 48) = 0x8000000000000000;
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v4);
    uint64_t v30 = *(void *)(v28 + 16);
    BOOL v31 = (v29 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (!__OFADD__(v30, v31))
    {
      uint64_t v15 = v29;
      if (*(void *)(v28 + 24) < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, isUniquelyReferenced_nonNull_native);
        uint64_t v28 = v152;
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v4);
        if ((v15 & 1) == (v34 & 1))
        {
          unint64_t v11 = v33;
LABEL_25:
          *(void *)(v25 + 48) = v28;
          swift_bridgeObjectRelease();
          unint64_t v51 = *(void **)(v25 + 48);
          if (v15)
          {
            uint64_t v52 = 56 * v11;
LABEL_29:
            uint64_t v59 = v51[7] + v52;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v59 + 16) = v8;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
          }
          v51[(v11 >> 6) + 8] |= 1 << v11;
          uint64_t v53 = (unint64_t *)(v51[6] + 16 * v11);
          *uint64_t v53 = v18;
          v53[1] = v4;
          uint64_t v52 = 56 * v11;
          uint64_t v54 = v51[7] + 56 * v11;
          uint64_t v55 = MEMORY[0x263F8EE80];
          *(void *)uint64_t v54 = MEMORY[0x263F8EE78];
          *(void *)(v54 + 8) = v55;
          *(void *)(v54 + 16) = 0;
          *(void *)(v54 + 24) = 0;
          *(void *)(v54 + 32) = 3;
          *(void *)(v54 + 40) = v55;
          *(unsigned char *)(v54 + 48) = 0;
          uint64_t v56 = v51[2];
          BOOL v57 = __OFADD__(v56, 1);
          uint64_t v58 = v56 + 1;
          if (!v57)
          {
            v51[2] = v58;
            swift_bridgeObjectRetain();
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_87;
        }
        goto LABEL_101;
      }
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_25;
      }
LABEL_85:
      specialized _NativeDictionary.copy()();
      uint64_t v28 = v152;
      goto LABEL_25;
    }
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (swift_dynamicCast())
  {
    unint64_t v18 = v163;
    unint64_t v8 = *((void *)&v164 + 1);
    uint64_t v15 = v164;
    unint64_t v11 = v166;
    uint64_t v152 = v162;
    unint64_t v153 = v163;
    long long v154 = v164;
    long long v155 = v165;
    unint64_t v156 = v166;
    unint64_t v157 = v167;
    unint64_t v149 = v168;
    *(void *)&long long v150 = v167;
    unint64_t v158 = v168;
    swift_bridgeObjectRetain();
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v151 = *(void **)(v2 + 48);
    uint64_t v36 = v151;
    *(void *)(v2 + 48) = 0x8000000000000000;
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v8);
    uint64_t v38 = v36[2];
    BOOL v39 = (v37 & 1) == 0;
    uint64_t v40 = v38 + v39;
    if (__OFADD__(v38, v39)) {
      goto LABEL_84;
    }
    LOBYTE(v4) = v37;
    if (v36[3] >= v40)
    {
      if ((v35 & 1) == 0)
      {
LABEL_88:
        specialized _NativeDictionary.copy()();
        uint64_t v36 = v151;
      }
LABEL_36:
      *(void *)(v2 + 48) = v36;
      swift_bridgeObjectRelease();
      unint64_t v68 = *(void **)(v2 + 48);
      if (v4)
      {
LABEL_39:
        PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(&v152);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_40:
        swift_bridgeObjectRelease_n();
        outlined consume of Data?(v150, v149);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
      }
      v68[(v25 >> 6) + 8] |= 1 << v25;
      uint64_t v69 = (uint64_t *)(v68[6] + 16 * v25);
      *uint64_t v69 = v15;
      v69[1] = v8;
      uint64_t v4 = 56 * v25;
      uint64_t v70 = v68[7] + 56 * v25;
      uint64_t v71 = MEMORY[0x263F8EE80];
      *(void *)uint64_t v70 = MEMORY[0x263F8EE78];
      *(void *)(v70 + 8) = v71;
      *(void *)(v70 + 16) = 0;
      *(void *)(v70 + 24) = 0;
      *(void *)(v70 + 32) = 3;
      *(void *)(v70 + 40) = v71;
      *(unsigned char *)(v70 + 48) = 0;
      uint64_t v72 = v68[2];
      BOOL v57 = __OFADD__(v72, 1);
      uint64_t v73 = v72 + 1;
      if (!v57)
      {
        v68[2] = v73;
        swift_bridgeObjectRetain();
        goto LABEL_39;
      }
      __break(1u);
      goto LABEL_90;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, v35);
    uint64_t v36 = v151;
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v8);
    if ((v4 & 1) == (v42 & 1))
    {
      unint64_t v25 = v41;
      goto LABEL_36;
    }
LABEL_101:
    uint64_t v142 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_102:
    uint64_t v145 = v142;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    unint64_t v111 = (void *)swift_unexpectedError();
    __break(1u);
    goto LABEL_103;
  }
  if (swift_dynamicCast())
  {
    uint64_t v4 = v150;
    outlined init with take of PromptCompletion(v8, v150, type metadata accessor for PromptCompletionEventCandidateAnnotation);
    unint64_t v8 = *(void *)(v4 + 16);
    uint64_t v2 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v162 = *(void *)(v25 + 48);
    uint64_t v44 = v162;
    *(void *)(v25 + 48) = 0x8000000000000000;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v2);
    uint64_t v46 = *(void *)(v44 + 16);
    BOOL v47 = (v45 & 1) == 0;
    uint64_t v48 = v46 + v47;
    if (__OFADD__(v46, v47))
    {
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    unint64_t v11 = v45;
    if (*(void *)(v44 + 24) >= v48)
    {
      if ((v43 & 1) == 0)
      {
LABEL_91:
        specialized _NativeDictionary.copy()();
        uint64_t v44 = v162;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, v43);
      uint64_t v44 = v162;
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v2);
      if ((v11 & 1) != (v50 & 1)) {
        goto LABEL_101;
      }
      unint64_t v18 = v49;
    }
    *(void *)(v25 + 48) = v44;
    swift_bridgeObjectRelease();
    char v84 = *(void **)(v25 + 48);
    if (v11)
    {
LABEL_50:
      PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(v4);
      swift_bridgeObjectRelease();
      outlined destroy of PromptCompletion.DocumentCitation(v4, type metadata accessor for PromptCompletionEventCandidateAnnotation);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
    }
    v84[(v18 >> 6) + 8] |= 1 << v18;
    char v85 = (unint64_t *)(v84[6] + 16 * v18);
    *char v85 = v8;
    v85[1] = v2;
    uint64_t v86 = v84[7] + 56 * v18;
    uint64_t v87 = MEMORY[0x263F8EE80];
    *(void *)uint64_t v86 = MEMORY[0x263F8EE78];
    *(void *)(v86 + 8) = v87;
    *(void *)(v86 + 16) = 0;
    *(void *)(v86 + 24) = 0;
    *(void *)(v86 + 32) = 3;
    *(void *)(v86 + 40) = v87;
    *(unsigned char *)(v86 + 48) = 0;
    uint64_t v88 = v84[2];
    BOOL v57 = __OFADD__(v88, 1);
    uint64_t v89 = v88 + 1;
    if (!v57)
    {
      v84[2] = v89;
      swift_bridgeObjectRetain();
      goto LABEL_50;
    }
    __break(1u);
    goto LABEL_93;
  }
  if (swift_dynamicCast())
  {
    uint64_t v4 = *((void *)&v164 + 1);
    unint64_t v11 = v164;
    unint64_t v25 = v169;
    uint64_t v152 = v162;
    unint64_t v153 = v163;
    v147[1] = *((void *)&v165 + 1);
    unint64_t v148 = v163;
    long long v154 = v164;
    long long v155 = v165;
    unint64_t v156 = v166;
    unint64_t v157 = v167;
    unint64_t v158 = v168;
    unint64_t v159 = v169;
    unint64_t v149 = v171;
    *(void *)&long long v150 = v170;
    uint64_t v160 = v170;
    unint64_t v161 = v171;
    swift_bridgeObjectRetain();
    char v60 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v151 = *(void **)(v2 + 48);
    uint64_t v61 = v151;
    *(void *)(v2 + 48) = 0x8000000000000000;
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v4);
    uint64_t v63 = v61[2];
    BOOL v64 = (v62 & 1) == 0;
    uint64_t v65 = v63 + v64;
    if (__OFADD__(v63, v64))
    {
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    LOBYTE(v18) = v62;
    if (v61[3] >= v65)
    {
      if ((v60 & 1) == 0)
      {
LABEL_94:
        specialized _NativeDictionary.copy()();
        uint64_t v61 = v151;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v65, v60);
      uint64_t v61 = v151;
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v4);
      if ((v18 & 1) != (v67 & 1)) {
        goto LABEL_101;
      }
      unint64_t v8 = v66;
    }
    *(void *)(v2 + 48) = v61;
    swift_bridgeObjectRelease();
    BOOL v101 = *(void **)(v2 + 48);
    if ((v18 & 1) == 0)
    {
      v101[(v8 >> 6) + 8] |= 1 << v8;
      uint64_t v102 = (unint64_t *)(v101[6] + 16 * v8);
      *uint64_t v102 = v11;
      v102[1] = v4;
      uint64_t v103 = v101[7] + 56 * v8;
      uint64_t v104 = MEMORY[0x263F8EE80];
      *(void *)uint64_t v103 = MEMORY[0x263F8EE78];
      *(void *)(v103 + 8) = v104;
      *(void *)(v103 + 16) = 0;
      *(void *)(v103 + 24) = 0;
      *(void *)(v103 + 32) = 3;
      *(void *)(v103 + 40) = v104;
      *(unsigned char *)(v103 + 48) = 0;
      uint64_t v105 = v101[2];
      BOOL v57 = __OFADD__(v105, 1);
      uint64_t v106 = v105 + 1;
      if (v57) {
        __break(1u);
      }
      v101[2] = v106;
      swift_bridgeObjectRetain();
    }
    PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(&v152);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  if (swift_dynamicCast())
  {
    LOBYTE(v18) = v163;
    unint64_t v8 = *((void *)&v164 + 1);
    unint64_t v11 = v164;
    uint64_t v4 = *((void *)&v165 + 1);
    uint64_t v152 = v162;
    unint64_t v153 = v163;
    long long v154 = v164;
    long long v155 = v165;
    *(void *)&long long v150 = v166;
    unint64_t v156 = v166;
    swift_bridgeObjectRetain();
    char v74 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v151 = *(void **)(v2 + 48);
    unint64_t v75 = v151;
    *(void *)(v2 + 48) = 0x8000000000000000;
    unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v8);
    uint64_t v78 = v75[2];
    BOOL v79 = (v76 & 1) == 0;
    uint64_t v80 = v78 + v79;
    if (__OFADD__(v78, v79))
    {
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    LOBYTE(v81) = v76;
    if (v75[3] < v80)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, v74);
      unint64_t v75 = v151;
      unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v8);
      if ((v81 & 1) != (v83 & 1)) {
        goto LABEL_101;
      }
      unint64_t v77 = v82;
      goto LABEL_66;
    }
    if (v74)
    {
LABEL_66:
      *(void *)(v2 + 48) = v75;
      swift_bridgeObjectRelease();
      a1 = *(void **)(v2 + 48);
      if (v81)
      {
LABEL_69:
        PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(&v152);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of Data._Representation(v4, v150);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
      }
      a1[(v77 >> 6) + 8] |= 1 << v77;
      uint64_t v115 = (unint64_t *)(a1[6] + 16 * v77);
      *uint64_t v115 = v11;
      v115[1] = v8;
      uint64_t v116 = a1[7] + 56 * v77;
      uint64_t v117 = MEMORY[0x263F8EE80];
      *(void *)uint64_t v116 = MEMORY[0x263F8EE78];
      *(void *)(v116 + 8) = v117;
      *(void *)(v116 + 16) = 0;
      *(void *)(v116 + 24) = 0;
      *(void *)(v116 + 32) = 3;
      *(void *)(v116 + 40) = v117;
      *(unsigned char *)(v116 + 48) = 0;
      uint64_t v118 = a1[2];
      BOOL v57 = __OFADD__(v118, 1);
      uint64_t v119 = v118 + 1;
      if (!v57)
      {
        a1[2] = v119;
        swift_bridgeObjectRetain();
        goto LABEL_69;
      }
      __break(1u);
      goto LABEL_99;
    }
LABEL_97:
    specialized _NativeDictionary.copy()();
    unint64_t v75 = v151;
    goto LABEL_66;
  }
  if (swift_dynamicCast())
  {
    unint64_t v77 = *((void *)&v164 + 1);
    uint64_t v4 = v164;
    unint64_t v11 = *((void *)&v165 + 1);
    uint64_t v91 = v165;
    *(void *)&long long v150 = v166;
    unint64_t v148 = v163;
    unint64_t v149 = v167;
    swift_bridgeObjectRetain();
    char v92 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v152 = *(void *)(v2 + 48);
    uint64_t v93 = v152;
    *(void *)(v2 + 48) = 0x8000000000000000;
    unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v77);
    uint64_t v95 = *(void *)(v93 + 16);
    BOOL v96 = (v94 & 1) == 0;
    uint64_t v97 = v95 + v96;
    if (!__OFADD__(v95, v96))
    {
      char v98 = v94;
      if (*(void *)(v93 + 24) >= v97)
      {
        if ((v92 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v93 = v152;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v97, v92);
        uint64_t v93 = v152;
        unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v77);
        if ((v98 & 1) != (v100 & 1)) {
          goto LABEL_101;
        }
        unint64_t v81 = v99;
      }
      *(void *)(v2 + 48) = v93;
      swift_bridgeObjectRelease();
      unint64_t v127 = *(void **)(v2 + 48);
      if (v98)
      {
        uint64_t v128 = 56 * v81;
      }
      else
      {
        v127[(v81 >> 6) + 8] |= 1 << v81;
        uint64_t v129 = (uint64_t *)(v127[6] + 16 * v81);
        uint64_t *v129 = v4;
        v129[1] = v77;
        uint64_t v128 = 56 * v81;
        uint64_t v130 = v127[7] + 56 * v81;
        uint64_t v131 = MEMORY[0x263F8EE80];
        *(void *)uint64_t v130 = MEMORY[0x263F8EE78];
        *(void *)(v130 + 8) = v131;
        *(void *)(v130 + 16) = 0;
        *(void *)(v130 + 24) = 0;
        *(void *)(v130 + 32) = 3;
        *(void *)(v130 + 40) = v131;
        *(unsigned char *)(v130 + 48) = 0;
        uint64_t v132 = v127[2];
        BOOL v57 = __OFADD__(v132, 1);
        uint64_t v133 = v132 + 1;
        if (v57)
        {
          __break(1u);
          goto LABEL_101;
        }
        v127[2] = v133;
        swift_bridgeObjectRetain();
      }
      unint64_t v135 = v149;
      uint64_t v134 = v150;
      uint64_t v136 = (void *)(v127[7] + v128);
      uint64_t v137 = v136[3];
      unint64_t v138 = v136[4];
      v136[3] = v91;
      v136[4] = v11;
      outlined copy of FinishReason(v91, v11);
      outlined consume of FinishReason?(v137, v138);
      uint64_t v139 = self;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of FinishReason(v91, v11);
      outlined copy of Data._Representation(v134, v135);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v151 = 0;
      id v141 = objc_msgSend(v139, sel_JSONObjectWithData_options_error_, isa, 0, &v151);

      uint64_t v142 = v151;
      if (v141)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        swift_dynamicCast();
        uint64_t v143 = (uint64_t)v151;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v91, v11);
        outlined consume of Data._Representation(v134, v135);
        char v144 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v152 = v136[5];
        v136[5] = 0x8000000000000000;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v143, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v144, (uint64_t)&v152);
        v136[5] = v152;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        outlined consume of FinishReason(v91, v11);
        outlined consume of Data._Representation(v134, v135);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
      }
      goto LABEL_102;
    }
    __break(1u);
    goto LABEL_97;
  }
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for generator == -1)
    {
LABEL_71:
      uint64_t v120 = type metadata accessor for Logger();
      __swift_project_value_buffer(v120, (uint64_t)static Log.generator);
      outlined init with copy of PromptCompletionEvent((uint64_t)a1, (uint64_t)&v162);
      uint64_t v121 = Logger.logObject.getter();
      os_log_type_t v122 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v121, v122))
      {
        uint64_t v123 = (uint8_t *)swift_slowAlloc();
        uint64_t v124 = swift_slowAlloc();
        uint64_t v152 = v124;
        *(_DWORD *)uint64_t v123 = 136315138;
        __swift_project_boxed_opaque_existential_1(&v162, *((uint64_t *)&v164 + 1));
        swift_getDynamicType();
        uint64_t v125 = _typeName(_:qualified:)();
        uint64_t v151 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, &v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v162);
        _os_log_impl(&dword_25F79F000, v121, v122, "Unhandled event: %s", v123, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261201C80](v124, -1, -1);
        MEMORY[0x261201C80](v123, -1, -1);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v162);
      }

      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
    }
LABEL_99:
    swift_once();
    goto LABEL_71;
  }
  long long v107 = v164;
  BOOL v108 = self;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v107, *((unint64_t *)&v107 + 1));
  Class v109 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v151 = 0;
  id v110 = objc_msgSend(v108, sel_JSONObjectWithData_options_error_, v109, 0, &v151);

  unint64_t v111 = v151;
  if (v110)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_dynamicCast();
    uint64_t v112 = (uint64_t)v151;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v107, *((unint64_t *)&v107 + 1));
    uint64_t v113 = *(int *)(type metadata accessor for PromptCompletion.Aggregator(0) + 36);
    char v114 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v152 = *(void *)(v2 + v113);
    *(void *)(v2 + v113) = 0x8000000000000000;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v112, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v114, (uint64_t)&v152);
    *(void *)(v2 + v113) = v152;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v107, *((unint64_t *)&v107 + 1));
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v172);
  }
LABEL_103:
  uint64_t v146 = v111;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_unexpectedError();
  __break(1u);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t PromptCompletion.Aggregator.finish()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  v36[3] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = *v1;
  uint64_t v33 = v1[1];
  uint64_t v12 = v1[2];
  uint64_t v14 = v1[5];
  uint64_t v13 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS15TokenGeneration16PromptCompletionV10AggregatorV09CandidateI033_D174D4387BF6B304FA76AEBF3D593BFDLLV_G_AJ0J0Vs5NeverOTg504_s15e12Generation16gh3V10i15V6finishACyFAC9j10VAE0gE033_klmnopQ11BFDLLVXEfU_Tf1cn_n(v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = v1[3];
  uint64_t v31 = v1[4];
  uint64_t v32 = v15;
  uint64_t v16 = type metadata accessor for PromptCompletion.Aggregator(0);
  outlined init with copy of Prompt.Rendering?((uint64_t)v1 + *(int *)(v16 + 32), (uint64_t)v10);
  uint64_t v17 = self;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v36[0] = 0;
  id v19 = objc_msgSend(v17, sel_dataWithJSONObject_options_error_, isa, 0, v36);

  id v20 = v36[0];
  if (!v19)
  {
    uint64_t v29 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  outlined init with copy of Prompt.Rendering?((uint64_t)v10, (uint64_t)v8);
  uint64_t v24 = (uint64_t)v4 + *(int *)(v2 + 36);
  uint64_t v25 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = v33;
  *uint64_t v4 = v11;
  v4[1] = v26;
  long long v4[2] = v12;
  v4[3] = v14;
  uint64_t v27 = v32;
  v4[4] = v35;
  v4[5] = v27;
  v4[6] = v31;
  v4[7] = v21;
  v4[8] = v23;
  outlined assign with take of Prompt.Rendering?((uint64_t)v8, v24);
  outlined init with take of PromptCompletion((uint64_t)v4, v34, type metadata accessor for PromptCompletion);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10, &demangling cache variable for type metadata for Prompt.Rendering?);
}

TokenGeneration::ModelInformation __swiftcall ModelInformation.init(assets:systemVersion:)(Swift::OpaquePointer assets, Swift::String_optional systemVersion)
{
  *(Swift::OpaquePointer *)uint64_t v2 = assets;
  *(Swift::String_optional *)(v2 + 8) = systemVersion;
  result.systemVersion = systemVersion;
  result.assets = assets;
  return result;
}

TokenGeneration::Usage __swiftcall Usage.init(promptTokenCount:completionTokenCount:)(Swift::Int promptTokenCount, Swift::Int completionTokenCount)
{
  *uint64_t v2 = promptTokenCount;
  v2[1] = completionTokenCount;
  result.completionTokenCount = completionTokenCount;
  result.promptTokenCount = promptTokenCount;
  return result;
}

void PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v3 = (void *)a1[6];
  BOOL v39 = v3;
  uint64_t v5 = a1[7];
  unint64_t v6 = a1[8];
  uint64_t v7 = *(void **)v1;
  unint64_t v8 = *(void *)(*(void *)v1 + 16);
  if ((uint64_t)v2 >= (uint64_t)v8)
  {
    if (v2 == v8)
    {
      os_log_t log = (os_log_t)a1[5];
      swift_bridgeObjectRetain();
      unint64_t v13 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      outlined copy of Data?(0, 0xF000000000000000);
      uint64_t v14 = v1;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        unint64_t v15 = v2;
        goto LABEL_11;
      }
      goto LABEL_34;
    }
    v1[48] = 1;
    if (one-time initialization token for generator != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.generator);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v5, v6);
    loga = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(loga, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v5, v6);
      *(_WORD *)(v33 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25F79F000, loga, v32, "Received an text segment with index %ld, but the next expected index was %ld. This indicates a bug in the inference provider.", (uint8_t *)v33, 0x16u);
      MEMORY[0x261201C80](v33, -1, -1);
      uint64_t v12 = loga;
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v5, v6);
    uint64_t v12 = loga;
LABEL_28:
    goto LABEL_25;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v2 >= v8) {
    goto LABEL_14;
  }
LABEL_4:
  os_log_t log = (os_log_t)v5;
  uint64_t v5 = 48 * v2;
  uint64_t v3 = &v7[6 * v2];
  if (v3[9])
  {
    v1[48] = 1;
    if (one-time initialization token for generator == -1)
    {
LABEL_6:
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.generator);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?((uint64_t)log, v6);
      osos_log_t log = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(oslog, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data?((uint64_t)log, v6);
        _os_log_impl(&dword_25F79F000, oslog, v10, "Segment %ld should have been a text segment, but wasn't! This indicates a bug in the inference provider.", v11, 0xCu);
        MEMORY[0x261201C80](v11, -1, -1);
        uint64_t v12 = oslog;
LABEL_25:

        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?((uint64_t)log, v6);
      uint64_t v12 = oslog;
      goto LABEL_28;
    }
LABEL_32:
    swift_once();
    goto LABEL_6;
  }
  while (1)
  {
    uint64_t v34 = v1;
    os_log_t osloga = (os_log_t)v2;
    unint64_t v13 = v6;
    unint64_t v6 = v3[4];
    unint64_t v2 = v3[5];
    uint64_t v19 = v3[6];
    uint64_t v20 = v3[7];
    uint64_t v14 = (void *)v3[8];
    swift_bridgeObjectRetain();
    outlined copy of PromptCompletion.Content(v6, v2, v19, v20, (unint64_t)v14, 0);
    v21._countAndFlagsBits = v4;
    v21._object = v39;
    String.append(_:)(v21);
    BOOL v39 = (void *)v2;
    uint64_t v22 = (uint64_t)log;
    unint64_t v23 = v13;
    if (v13 >> 60 == 15)
    {
      outlined copy of Data?(v20, (unint64_t)v14);
      uint64_t v22 = v20;
      unint64_t v13 = (unint64_t)v14;
    }
    outlined copy of PromptCompletion.Content(v6, v2, v19, v20, (unint64_t)v14, 0);
    swift_bridgeObjectRetain();
    outlined copy of Data?((uint64_t)log, v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v22, v13);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    }
    if ((unint64_t)osloga < v7[2]) {
      break;
    }
    __break(1u);
LABEL_34:
    unint64_t v15 = v2;
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, v7);
LABEL_11:
    unint64_t v17 = v7[2];
    unint64_t v16 = v7[3];
    if (v17 >= v16 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v7);
    }
    v7[2] = v17 + 1;
    unint64_t v18 = &v7[6 * v17];
    *((_OWORD *)v18 + 2) = xmmword_25F91D710;
    void v18[6] = v13;
    *(_OWORD *)(v18 + 7) = xmmword_25F91CC60;
    *((unsigned char *)v18 + 72) = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(0, 0xF000000000000000);
    uint64_t v1 = v14;
    *uint64_t v14 = v7;
    unint64_t v2 = v15;
    uint64_t v4 = (uint64_t)log;
    if (v2 < v7[2]) {
      goto LABEL_4;
    }
LABEL_14:
    __break(1u);
  }
  uint64_t v24 = (char *)v7 + v5;
  uint64_t v25 = *(void *)((char *)v7 + v5 + 32);
  unint64_t v26 = *(void *)((char *)v7 + v5 + 40);
  uint64_t v27 = *(void *)((char *)v7 + v5 + 48);
  uint64_t v28 = *(void *)((char *)v7 + v5 + 56);
  unint64_t v29 = *(void *)((char *)v7 + v5 + 64);
  char v30 = *((unsigned char *)v7 + v5 + 72);
  *((void *)v24 + 4) = v6;
  *((void *)v24 + 5) = v2;
  *((void *)v24 + 6) = v19;
  *((void *)v24 + 7) = v22;
  *((void *)v24 + 8) = v13;
  v24[72] = 0;
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v25, v26, v27, v28, v29, v30);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v6, v2, v19, v20, (unint64_t)v14, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v6, v2, v19, v20, (unint64_t)v14, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v22, v13);
  *uint64_t v34 = v7;
}

void PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PromptCompletionEventCandidateAnnotation(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = type metadata accessor for PromptCompletion.Annotation(0) - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void **)v1;
  unint64_t v14 = *(void *)(a1 + 32);
  if ((int64_t)v14 >= *(void *)(*(void *)v1 + 16))
  {
    v1[48] = 1;
    if (one-time initialization token for generator == -1)
    {
LABEL_9:
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Log.generator);
      outlined init with copy of PromptCompletion.Annotation.Type(a1, (uint64_t)v6, type metadata accessor for PromptCompletionEventCandidateAnnotation);
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v17, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 134217984;
        uint64_t v25 = *((void *)v6 + 4);
        outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v6, type metadata accessor for PromptCompletionEventCandidateAnnotation);
        uint64_t v50 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25F79F000, v17, v23, "Received an annotation for segment %ld, but there weren't that many segments! This indicates a bug in the inference provider.", v24, 0xCu);
        Swift::String v21 = v24;
        goto LABEL_11;
      }
      uint64_t v26 = (uint64_t)v6;
LABEL_22:
      outlined destroy of PromptCompletion.DocumentCitation(v26, type metadata accessor for PromptCompletionEventCandidateAnnotation);
      goto LABEL_23;
    }
LABEL_25:
    swift_once();
    goto LABEL_9;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v15 = &v13[6 * v14];
  if (v15[9])
  {
    v1[48] = 1;
    if (one-time initialization token for generator != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.generator);
    outlined init with copy of PromptCompletion.Annotation.Type(a1, (uint64_t)v8, type metadata accessor for PromptCompletionEventCandidateAnnotation);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 134217984;
      uint64_t v20 = *((void *)v8 + 4);
      outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v8, type metadata accessor for PromptCompletionEventCandidateAnnotation);
      uint64_t v50 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25F79F000, v17, v18, "Received an annotation for segment %ld, but that segment\nwas not a text segment! This indicates a bug in the inference provider.", v19, 0xCu);
      Swift::String v21 = v19;
LABEL_11:
      MEMORY[0x261201C80](v21, -1, -1);
LABEL_23:

      return;
    }
    uint64_t v26 = (uint64_t)v8;
    goto LABEL_22;
  }
  uint64_t v47 = v10;
  uint64_t v45 = 48 * v14;
  uint64_t v27 = v15[4];
  unint64_t v28 = v15[5];
  uint64_t v30 = v15[6];
  uint64_t v29 = v15[7];
  uint64_t v31 = a1 + *(int *)(v3 + 28);
  unint64_t v32 = v15[8];
  outlined init with copy of PromptCompletion.Annotation.Type(v31, (uint64_t)v12, type metadata accessor for PromptCompletion.Annotation);
  uint64_t v46 = v27;
  outlined copy of PromptCompletion.Content(v27, v28, v30, v29, v32, 0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v49 = v29;
  outlined copy of Data?(v29, v32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v48 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1, v48);
  }
  unint64_t v35 = *(void *)(v30 + 16);
  unint64_t v34 = *(void *)(v30 + 24);
  if (v35 >= v34 >> 1) {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v30);
  }
  *(void *)(v30 + 16) = v35 + 1;
  outlined init with take of PromptCompletion((uint64_t)v12, v30+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v35, type metadata accessor for PromptCompletion.Annotation);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v36 = v49;
  outlined copy of Data?(v49, v32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
  }
  if (v14 >= v13[2])
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = v46;
    uint64_t v38 = &v13[(unint64_t)v45 / 8];
    uint64_t v39 = v13[(unint64_t)v45 / 8 + 4];
    unint64_t v40 = v13[(unint64_t)v45 / 8 + 5];
    uint64_t v41 = v13[(unint64_t)v45 / 8 + 6];
    uint64_t v42 = v13[(unint64_t)v45 / 8 + 7];
    unint64_t v43 = v13[(unint64_t)v45 / 8 + 8];
    char v44 = v13[(unint64_t)v45 / 8 + 9];
    v38[4] = v46;
    v38[5] = v28;
    v38[6] = v30;
    v38[7] = v36;
    v38[8] = v32;
    *((unsigned char *)v38 + 72) = 0;
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v39, v40, v41, v42, v43, v44);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v37, v28, v48, v36, v32, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v36, v32);
    *(void *)uint64_t v1 = v13;
  }
}

uint64_t PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v8 = a1[8];
  uint64_t v7 = (void *)a1[9];
  unint64_t v9 = a1[11];
  uint64_t v31 = a1[10];
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  uint64_t v30 = v4;
  if (v11 && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3), (v13 & 1) != 0))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(v10 + 56) + (v12 << 6));
    uint64_t v15 = v14[1];
    uint64_t v5 = v14[3];
    uint64_t v28 = *v14;
    uint64_t v29 = v14[2];
    uint64_t v16 = v14[4];
    unint64_t v17 = v14[5];
    uint64_t v27 = v7;
    uint64_t v18 = v8;
    uint64_t v19 = v14[6];
    unint64_t v20 = v14[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v32 = v20;
    uint64_t v33 = v19;
    unint64_t v21 = v20;
    uint64_t v8 = v18;
    uint64_t v7 = v27;
    outlined copy of Data?(v19, v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = v6;
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    unint64_t v32 = 0xF000000000000000;
    uint64_t v33 = 0;
    unint64_t v17 = 0xE000000000000000;
    uint64_t v28 = v4;
    uint64_t v15 = v3;
  }
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v8;
  v22._object = v7;
  String.append(_:)(v22);
  if (v9 >> 60 == 15) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v31;
  }
  if (v9 >> 60 == 15) {
    unint64_t v24 = 0xF000000000000000;
  }
  else {
    unint64_t v24 = v9;
  }
  *(void *)&long long v35 = v28;
  *((void *)&v35 + 1) = v15;
  uint64_t v36 = v29;
  uint64_t v37 = v5;
  uint64_t v38 = v16;
  unint64_t v39 = v17;
  uint64_t v40 = v23;
  unint64_t v41 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v31, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v23, v24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v35, v30, v3, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 8) = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v33, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of Data?(v23, v24);
}

{
  unsigned char *v1;
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  void *v13;

  uint64_t v2 = (void **)v1;
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  if (a1[4] != *(void *)(*(void *)v1 + 16))
  {
    v1[48] = 1;
    if (one-time initialization token for generator != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.generator);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v3, v4);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v3, v4);
      *(_WORD *)(v8 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25F79F000, v6, v7, "Received an image segment with index %ld, but the next expected index was %ld. This indicates a bug in the inference provider.", (uint8_t *)v8, 0x16u);
      MEMORY[0x261201C80](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v3, v4);
    }
  }
  unint64_t v9 = *v2;
  outlined copy of Data._Representation(v3, v4);
  TokenGeneration::Usage result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    TokenGeneration::Usage result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    unint64_t v9 = (void *)result;
  }
  unint64_t v12 = v9[2];
  uint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    TokenGeneration::Usage result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    unint64_t v9 = (void *)result;
  }
  _OWORD v9[2] = v12 + 1;
  char v13 = &v9[6 * v12];
  v13[4] = v3;
  v13[5] = v4;
  v13[7] = 0;
  v13[8] = 0;
  v13[6] = 0;
  *((unsigned char *)v13 + 72) = 1;
  *uint64_t v2 = v9;
  return result;
}

void PromptCompletion.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Prompt.Rendering();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  uint64_t v12 = v2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v11);
  if (v12)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v13 = v2[3];
    if (v13)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v13);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v2[3];
    if (v13) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  uint64_t v14 = v2[4];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
  Swift::UInt v15 = v2[6];
  Hasher._combine(_:)(v2[5]);
  Hasher._combine(_:)(v15);
  uint64_t v16 = v2[7];
  unint64_t v17 = v2[8];
  outlined copy of Data._Representation(v16, v17);
  Data.hash(into:)();
  outlined consume of Data._Representation(v16, v17);
  uint64_t v18 = type metadata accessor for PromptCompletion(0);
  outlined init with copy of Prompt.Rendering?((uint64_t)v2 + *(int *)(v18 + 36), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering, MEMORY[0x263F7FB78]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

BOOL static Usage.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int PromptCompletion.hashValue.getter()
{
  return PromptCompletion.Annotation.Type.hashValue.getter((void (*)(unsigned char *))PromptCompletion.hash(into:));
}

Swift::Int PromptCompletion.Annotation.Type.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Annotation.Type(a1, a2, (void (*)(unsigned char *))PromptCompletion.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletion.Annotation.Type(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Annotation.Type(a1, a2, a3, (void (*)(unsigned char *))PromptCompletion.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Annotation.Type(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t ModelInformation.identifier.getter()
{
  if (!*(void *)(*(void *)v0 + 16)) {
    return 0;
  }
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*ModelInformation.identifier.modify(void *a1))()
{
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v3 = *(void *)(*(void *)v1 + 32);
    uint64_t v4 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0xE000000000000000;
  }
  *a1 = v3;
  a1[1] = v4;
  return ModelInformation.identifier.modify;
}

uint64_t ModelInformation.version.getter()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 16) && *(void *)(v1 + 56))
  {
    uint64_t v2 = *(void *)(v1 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

void key path setter for ModelInformation.identifier : ModelInformation()
{
  if (one-time initialization token for assets != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.assets);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_25F79F000, oslog, v1, "Using deprecated setter. No change made.", v2, 2u);
    MEMORY[0x261201C80](v2, -1, -1);
  }
}

void ModelInformation.identifier.setter()
{
  swift_bridgeObjectRelease();
  if (one-time initialization token for assets != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.assets);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_25F79F000, oslog, v1, "Using deprecated setter. No change made.", v2, 2u);
    MEMORY[0x261201C80](v2, -1, -1);
  }
}

uint64_t (*ModelInformation.version.modify(void *a1))()
{
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 16) && *(void *)(v3 + 56))
  {
    uint64_t v4 = *(void *)(v3 + 48);
    uint64_t v5 = swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    uint64_t v5 = 0xE000000000000000;
  }
  *a1 = v4;
  a1[1] = v5;
  return ModelInformation.identifier.modify;
}

void ModelInformation.identifier.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    if (one-time initialization token for assets != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.assets);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_25F79F000, v3, v4, "Using deprecated setter. No change made.", v5, 2u);
      MEMORY[0x261201C80](v5, -1, -1);
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for assets != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.assets);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_25F79F000, oslog, v7, "Using deprecated setter. No change made.", v8, 2u);
      MEMORY[0x261201C80](v8, -1, -1);
    }
  }
}

uint64_t ModelInformation.assets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelInformation.assets.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *os_log_type_t v1 = a1;
  return result;
}

uint64_t (*ModelInformation.assets.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t ModelInformation.systemVersion.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelInformation.systemVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*ModelInformation.systemVersion.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

TokenGeneration::ModelInformation __swiftcall ModelInformation.init(identifier:version:systemVersion:)(Swift::String identifier, Swift::String version, Swift::String_optional systemVersion)
{
  object = systemVersion.value._object;
  uint64_t countAndFlagsBits = systemVersion.value._countAndFlagsBits;
  uint64_t v5 = version._object;
  uint64_t v6 = version._countAndFlagsBits;
  os_log_type_t v7 = identifier._object;
  uint64_t v8 = identifier._countAndFlagsBits;
  uint64_t v9 = v3;
  v23[1] = *(id *)MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformation.Asset>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25F91CC30;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v11 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v23[0] = 0;
  id v13 = objc_msgSend(v11, sel_dataWithJSONObject_options_error_, isa, 0, v23);

  if (!v13)
  {
    id v21 = v23[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  id v14 = v23[0];
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v15, v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v18 = (void *)outlined consume of Data._Representation(v15, v17);
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = v7;
  *(void *)(v10 + 48) = v6;
  *(void *)(v10 + 56) = v5;
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 72) = v17;
  *uint64_t v9 = v10;
  v9[1] = countAndFlagsBits;
  _OWORD v9[2] = (uint64_t)object;
  result.systemVersion.value._object = v20;
  result.systemVersion.value._uint64_t countAndFlagsBits = v19;
  result.assets._rawValue = v18;
  return result;
}

uint64_t ModelInformation.Asset.init(identifier:version:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v19[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v10 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19[0] = 0;
  id v12 = objc_msgSend(v10, sel_dataWithJSONObject_options_error_, isa, 0, v19);

  id v13 = v19[0];
  if (!v12)
  {
    uint64_t v18 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v14, v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = outlined consume of Data._Representation(v14, v16);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = v14;
  a5[5] = v16;
  return result;
}

uint64_t ModelInformation.Asset.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelInformation.Asset.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelInformation.Asset.identifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t ModelInformation.Asset.version.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelInformation.Asset.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ModelInformation.Asset.version.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

id ModelInformation.Asset.metadata.getter()
{
  v6[5] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, isa, 0, v6);

  id v3 = v6[0];
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_dynamicCast();
    return v6[0];
  }
  else
  {
    uint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t ModelInformation.Asset.hash(into:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int ModelInformation.Asset.hashValue.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModelInformation.Asset()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformation.Asset()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

void ModelInformation.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[2];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int ModelInformation.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelInformation()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ModelInformation()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  Swift::UInt v3 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = v4[2];
      uint64_t v6 = v4[3];
      unint64_t v7 = v4[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      outlined copy of Data._Representation(v6, v7);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      outlined copy of Data._Representation(v6, v7);
      Data.hash(into:)();
      outlined consume of Data._Representation(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v6, v7);
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformation()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Usage.promptTokenCount.getter()
{
  return *(void *)v0;
}

uint64_t Usage.promptTokenCount.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Usage.promptTokenCount.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Usage.completionTokenCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Usage.completionTokenCount.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Usage.completionTokenCount.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Usage.totalTokenCount.getter()
{
  uint64_t v1 = v0[1];
  uint64_t result = *v0 + v1;
  if (__OFADD__(*v0, v1)) {
    __break(1u);
  }
  return result;
}

void Usage.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int Usage.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Usage()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Usage()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Usage()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Usage(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void FinishReason.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 1:
      Swift::UInt v2 = 2;
      goto LABEL_7;
    case 2:
      Swift::UInt v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
}

Swift::Int FinishReason.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 == 1)
    {
      Swift::UInt v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(1uLL);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v2 = 3;
    }
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FinishReason()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 == 1)
    {
      Swift::UInt v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(1uLL);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v2 = 3;
    }
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FinishReason()
{
  uint64_t v1 = *(void *)(v0 + 8);
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 1:
      Swift::UInt v2 = 2;
      goto LABEL_7;
    case 2:
      Swift::UInt v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FinishReason()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 == 1)
    {
      Swift::UInt v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(1uLL);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v2 = 3;
    }
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for PromptCompletion(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletion);
}

uint64_t outlined init with copy of Prompt.Rendering?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Prompt.Rendering?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  type metadata accessor for SpecialToken();
  lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type SpecialToken and conformance SpecialToken, MEMORY[0x263F620E0]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for SpecialToken();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    id v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type SpecialToken and conformance SpecialToken, MEMORY[0x263F620E0]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          Swift::UInt v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    long long v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::UInt v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModerationEnvelope.ProbabilityEnvelope>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  long long v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          Swift::UInt v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unint64_t v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::UInt v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  long long v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          Swift::UInt v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unint64_t v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::UInt v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Prompt.ToolCall>);
  uint64_t v45 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v43 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v41 = v3;
  char v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  char v44 = v5;
  while (1)
  {
    if (v10)
    {
      uint64_t v46 = (v10 - 1) & v10;
      uint64_t v47 = v13;
      uint64_t v20 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42) {
      break;
    }
    unint64_t v22 = v43;
    int64_t v23 = v43[v21];
    unint64_t v24 = v13 + 1;
    if (!v23)
    {
      unint64_t v24 = v13 + 2;
      if (v13 + 2 >= v42) {
        goto LABEL_33;
      }
      int64_t v23 = v43[v24];
      if (!v23)
      {
        unint64_t v25 = v13 + 3;
        if (v13 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          Swift::UInt v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            unint64_t v24 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v24 >= v42) {
              goto LABEL_33;
            }
            int64_t v23 = v43[v24];
            ++v25;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v24 = v13 + 3;
      }
    }
LABEL_30:
    uint64_t v46 = (v23 - 1) & v23;
    uint64_t v47 = v24;
    uint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(v5 + 56);
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    unint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = (uint64_t *)(v30 + (v20 << 6));
    long long v35 = v34[1];
    uint64_t v36 = v34[3];
    uint64_t v50 = v34[2];
    uint64_t v37 = v34[5];
    unint64_t v48 = *v34;
    uint64_t v49 = v34[4];
    unint64_t v39 = v34[6];
    uint64_t v38 = v34[7];
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v39, v38);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v33;
    uint64_t v19 = (void *)(*(void *)(v7 + 56) + (v17 << 6));
    int64_t v13 = v47;
    *uint64_t v19 = v48;
    v19[1] = v35;
    id v19[2] = v50;
    v19[3] = v36;
    v19[4] = v49;
    v19[5] = v37;
    v19[6] = v39;
    v19[7] = v38;
    ++*(void *)(v7 + 16);
    uint64_t v5 = v44;
    unint64_t v10 = v46;
  }
  swift_release();
  Swift::UInt v3 = v41;
  unint64_t v22 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        uint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        uint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          uint64_t v19 = v34[v13];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              Swift::UInt v3 = v2;
              if (a2)
              {
                unint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                uint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      int64_t v23 = *v21;
      unint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      int64_t v26 = result & ~v25;
      char v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        BOOL v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            char v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  char v48;
  uint64_t v49;

  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PromptCompletion.Aggregator.CandidateAggregator>);
  uint64_t v45 = a2;
  uint64_t v49 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v43 = (void *)(v5 + 64);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v5 + 64);
  uint64_t v41 = v2;
  char v42 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = v49 + 64;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  char v44 = v5;
  while (1)
  {
    if (v8)
    {
      uint64_t v46 = (v8 - 1) & v8;
      uint64_t v47 = v11;
      uint64_t v20 = __clz(__rbit64(v8)) | (v11 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42) {
      break;
    }
    unint64_t v22 = v43;
    int64_t v23 = v43[v21];
    unint64_t v24 = v11 + 1;
    if (!v23)
    {
      unint64_t v24 = v11 + 2;
      if (v11 + 2 >= v42) {
        goto LABEL_33;
      }
      int64_t v23 = v43[v24];
      if (!v23)
      {
        unint64_t v25 = v11 + 3;
        if (v11 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          Swift::UInt v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            unint64_t v24 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v24 >= v42) {
              goto LABEL_33;
            }
            int64_t v23 = v43[v24];
            ++v25;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v24 = v11 + 3;
      }
    }
LABEL_30:
    uint64_t v46 = (v23 - 1) & v23;
    uint64_t v47 = v24;
    uint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 56 * v20;
    uint64_t v34 = *(void *)v33;
    long long v35 = *(void *)(v33 + 8);
    uint64_t v36 = *(void *)(v33 + 16);
    uint64_t v37 = *(void *)(v33 + 24);
    unint64_t v39 = *(void *)(v33 + 32);
    uint64_t v38 = *(void *)(v33 + 40);
    unint64_t v48 = *(unsigned char *)(v33 + 48);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of FinishReason?(v37, v39);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v49 + 32);
    int64_t v13 = result & ~v12;
    uint64_t v14 = v13 >> 6;
    if (((-1 << v13) & ~*(void *)(v9 + 8 * (v13 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v9 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v16 = v39;
      unint64_t v17 = v34;
    }
    else
    {
      int64_t v26 = 0;
      char v27 = (unint64_t)(63 - v12) >> 6;
      unint64_t v16 = v39;
      unint64_t v17 = v34;
      do
      {
        if (++v14 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v14 == v27;
        if (v14 == v27) {
          uint64_t v14 = 0;
        }
        v26 |= v28;
        BOOL v29 = *(void *)(v9 + 8 * v14);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v14 << 6);
    }
    *(void *)(v9 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v18 = (void *)(*(void *)(v49 + 48) + 16 * v15);
    *uint64_t v18 = v31;
    v18[1] = v32;
    uint64_t v19 = *(void *)(v49 + 56) + 56 * v15;
    *(void *)uint64_t v19 = v17;
    *(void *)(v19 + 8) = v35;
    *(void *)(v19 + 16) = v36;
    *(void *)(v19 + 24) = v37;
    *(void *)(v19 + 32) = v16;
    *(void *)(v19 + 40) = v38;
    *(unsigned char *)(v19 + 48) = v48;
    ++*(void *)(v49 + 16);
    uint64_t v5 = v44;
    uint64_t v8 = v46;
    uint64_t v11 = v47;
  }
  swift_release();
  Swift::UInt v3 = v41;
  unint64_t v22 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v49;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OS_xpc_object>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  Swift::UInt v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  long long v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          Swift::UInt v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::UInt v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  Swift::UInt v3 = v2;
  uint64_t v49 = type metadata accessor for PromptTemplateInfo.RichVariableBinding();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  unint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, PromptTemplateInfo.RichVariableBinding>);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  char v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    int64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          Swift::UInt v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    unint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *uint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  Swift::UInt v3 = v42;
  int64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + (result << 6));
  long long v7 = a4[1];
  _OWORD *v6 = *a4;
  v6[1] = v7;
  long long v8 = a4[3];
  uint64_t v6[2] = a4[2];
  v6[3] = v8;
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModerationEnvelope.ProbabilityEnvelope>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    int64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    int64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Prompt.ToolCall>);
  uint64_t v33 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v33 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  unint64_t v34 = v1 + 64;
  unint64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & *(void *)(v1 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    uint64_t v30 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v11) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v34 + 8 * v30);
    ++v7;
    if (!v31)
    {
      unint64_t v7 = v30 + 1;
      if (v30 + 1 >= v11) {
        goto LABEL_26;
      }
      uint64_t v31 = *(void *)(v34 + 8 * v7);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    uint64_t v10 = (v31 - 1) & v31;
    int64_t v13 = __clz(__rbit64(v31)) + (v7 << 6);
LABEL_12:
    unint64_t v14 = 16 * v13;
    unint64_t v15 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v13);
    int64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = v13 << 6;
    uint64_t v19 = (uint64_t *)(*(void *)(v1 + 56) + v18);
    unint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = v19[2];
    int64_t v23 = v19[3];
    unint64_t v24 = v19[4];
    int64_t v25 = v19[5];
    unint64_t v26 = v19[6];
    int64_t v27 = v19[7];
    unint64_t v28 = (void *)(*(void *)(v3 + 48) + v14);
    *unint64_t v28 = v17;
    v28[1] = v16;
    uint64_t v29 = (void *)(*(void *)(v3 + 56) + v18);
    *uint64_t v29 = v20;
    v29[1] = v21;
    v29[2] = v22;
    v29[3] = v23;
    v29[4] = v24;
    v29[5] = v25;
    v29[6] = v26;
    v29[7] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined copy of Data?(v26, v27);
  }
  uint64_t v32 = v30 + 2;
  if (v32 >= v11) {
    goto LABEL_26;
  }
  uint64_t v31 = *(void *)(v34 + 8 * v32);
  if (v31)
  {
    unint64_t v7 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v7 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v7 >= v11) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v34 + 8 * v7);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    uint8_t *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  int64_t v31;
  uint64_t v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PromptCompletion.Aggregator.CandidateAggregator>);
  uint64_t v30 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v30 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v32 = v1 + 64;
  unint64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & *(void *)(v1 + 64);
  uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      uint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v31) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v32 + 8 * v27);
    ++v7;
    if (!v28)
    {
      unint64_t v7 = v27 + 1;
      if (v27 + 1 >= v31) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v32 + 8 * v7);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    uint64_t v10 = (v28 - 1) & v28;
    unint64_t v12 = __clz(__rbit64(v28)) + (v7 << 6);
LABEL_12:
    int64_t v13 = 16 * v12;
    unint64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v12);
    unint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    int64_t v17 = 56 * v12;
    uint64_t v18 = *(void *)(v1 + 56) + v17;
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    int64_t v23 = *(void *)(v18 + 32);
    unint64_t v24 = *(void *)(v18 + 40);
    LOBYTE(v18) = *(unsigned char *)(v18 + 48);
    int64_t v25 = (void *)(*(void *)(v3 + 48) + v13);
    *int64_t v25 = v15;
    v25[1] = v16;
    unint64_t v26 = *(void *)(v3 + 56) + v17;
    *(void *)unint64_t v26 = v19;
    *(void *)(v26 + 8) = v20;
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = v22;
    *(void *)(v26 + 32) = v23;
    *(void *)(v26 + 40) = v24;
    *(unsigned char *)(v26 + 48) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason?(v22, v23);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v29 = v27 + 2;
  if (v29 >= v31) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v32 + 8 * v29);
  if (v28)
  {
    unint64_t v7 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v7 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v7 >= v31) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v32 + 8 * v7);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  unint64_t v35 = type metadata accessor for PromptTemplateInfo.RichVariableBinding();
  uint64_t v1 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, PromptTemplateInfo.RichVariableBinding>);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  char v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    unint64_t v28 = v36;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }
  unint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    unint64_t v7 = v36;
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  uint64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  unint64_t v34 = v1 + 16;
  unint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      uint64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      int64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    int64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *int64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    int64_t v27 = v30;
    unint64_t v28 = v36;
    goto LABEL_25;
  }
  int64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    int64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OS_xpc_object>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    uint8_t *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  outlined init with take of Any(v49, v47);
  unint64_t v14 = *(void **)a5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    unint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    int64_t v25 = (uint64_t *)(v24[6] + 16 * v16);
    *int64_t v25 = v13;
    v25[1] = v12;
    outlined init with take of Any(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      outlined init with take of Any(v49, v47);
      uint64_t v32 = *(void **)a5;
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
        outlined init with take of Any(v46, v30);
      }
      else
      {
        uint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        char v42 = (uint64_t *)(v41[6] + 16 * v34);
        *char v42 = v31;
        v42[1] = i;
        outlined init with take of Any(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      specialized LazyMapSequence.Iterator.next()(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : Any].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    swift_bridgeObjectRelease();
    int64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    outlined init with take of Any(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v7) {
      goto LABEL_19;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v9);
      if (!v14) {
        break;
      }
    }
LABEL_18:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_5:
    Swift::UInt v12 = *(unsigned __int8 *)(*(void *)(a2 + 56) + v11);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v12);
    v8 ^= Hasher._finalize()();
  }
  int64_t v15 = v13 + 2;
  if (v15 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt8 *v14;
  Swift::UInt8 v15;
  uint64_t v16;
  int64_t v17;

  unint64_t v16 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  uint64_t v17 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      int64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      Swift::UInt v8 = v7 | (v6 << 6);
      goto LABEL_19;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v17) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v16 + 8 * v9);
    ++v6;
    if (!v10)
    {
      unint64_t v6 = v9 + 1;
      if (v9 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v10 = *(void *)(v16 + 8 * v6);
      if (!v10) {
        break;
      }
    }
LABEL_18:
    uint64_t v4 = (v10 - 1) & v10;
    Swift::UInt v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_19:
    Swift::UInt v12 = *(void *)(*(void *)(a2 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*(void *)(v12 + 16));
    int64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      unint64_t v14 = (Swift::UInt8 *)(v12 + 48);
      do
      {
        int64_t v15 = *v14;
        v14 += 24;
        Hasher._combine(_:)(0);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Hasher._combine(_:)(v15);
        swift_bridgeObjectRelease();
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease();
    v5 ^= Hasher._finalize()();
  }
  unint64_t v11 = v9 + 2;
  if (v11 >= v17)
  {
LABEL_23:
    swift_release();
    Hasher._combine(_:)(v5);
    return;
  }
  unint64_t v10 = *(void *)(v16 + 8 * v11);
  if (v10)
  {
    unint64_t v6 = v11;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v17) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v16 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  Swift::UInt v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;

  unint64_t v11 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  uint64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    Swift::UInt v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5) {
      goto LABEL_19;
    }
    int64_t v9 = *(void *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      int64_t v7 = v8 + 1;
      if (v8 + 1 >= v5) {
        goto LABEL_19;
      }
      int64_t v9 = *(void *)(v11 + 8 * v7);
      if (!v9) {
        break;
      }
    }
LABEL_18:
    uint64_t v4 = (v9 - 1) & v9;
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
  }
  unint64_t v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  int64_t v9 = *(void *)(v11 + 8 * v10);
  if (v9)
  {
    int64_t v7 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_19;
    }
    int64_t v9 = *(void *)(v11 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x25F7E8BD0);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized static FinishReason.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (!v3)
  {
    if (!v5)
    {
      unint64_t v3 = 0;
      char v6 = 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v3 == 1)
  {
    if (v5 == 1)
    {
      unint64_t v3 = 1;
      char v6 = 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v3 != 2)
  {
    if (v5 >= 3)
    {
      if (v2 == v4 && v3 == v5) {
        char v6 = 1;
      }
      else {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      goto LABEL_12;
    }
LABEL_11:
    char v6 = 0;
LABEL_12:
    outlined copy of FinishReason(v4, v5);
    outlined copy of FinishReason(v2, v3);
    goto LABEL_13;
  }
  if (v5 != 2) {
    goto LABEL_11;
  }
  char v6 = 1;
  unint64_t v3 = 2;
LABEL_13:
  outlined consume of FinishReason(v2, v3);
  outlined consume of FinishReason(v4, v5);
  return v6 & 1;
}

uint64_t specialized static ModelInformation.Asset.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  if ((*a1 != *a2 || a1[1] != a2[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  if (v4)
  {
    if (v6 && (v2 == v7 && v4 == v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v6) {
    return 0;
  }
LABEL_9:
  return specialized static Data.== infix(_:_:)(v3, v5, v8, v9);
}

uint64_t specialized static ModelInformation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    if (v3)
    {
      if (v5 && (v2 == v4 && v3 == v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v5)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized static PromptCompletion.Annotation.Type.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (uint64_t *)((char *)&v25 - v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PromptCompletion.Annotation.Type, PromptCompletion.Annotation.Type));
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of PromptCompletion.Annotation.Type(a1, (uint64_t)v18, type metadata accessor for PromptCompletion.Annotation.Type);
  outlined init with copy of PromptCompletion.Annotation.Type(v26, v19, type metadata accessor for PromptCompletion.Annotation.Type);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of PromptCompletion.Annotation.Type((uint64_t)v18, (uint64_t)v14, type metadata accessor for PromptCompletion.Annotation.Type);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of PromptCompletion(v19, (uint64_t)v8, type metadata accessor for PromptCompletion.URLCitation);
      BOOL v23 = *v14 == *v8 && v14[1] == v8[1];
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        && (MEMORY[0x2611FEFF0]((char *)v14 + *(int *)(v6 + 20), (char *)v8 + *(int *)(v6 + 20)) & 1) != 0)
      {
        outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v8, type metadata accessor for PromptCompletion.URLCitation);
        outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v14, type metadata accessor for PromptCompletion.URLCitation);
        outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v18, type metadata accessor for PromptCompletion.Annotation.Type);
        char v20 = 1;
        return v20 & 1;
      }
      outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v8, type metadata accessor for PromptCompletion.URLCitation);
      outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v14, type metadata accessor for PromptCompletion.URLCitation);
      outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v18, type metadata accessor for PromptCompletion.Annotation.Type);
LABEL_16:
      char v20 = 0;
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for PromptCompletion.URLCitation;
    uint64_t v22 = (uint64_t)v14;
LABEL_7:
    outlined destroy of PromptCompletion.DocumentCitation(v22, v21);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for (PromptCompletion.Annotation.Type, PromptCompletion.Annotation.Type));
    goto LABEL_16;
  }
  outlined init with copy of PromptCompletion.Annotation.Type((uint64_t)v18, (uint64_t)v12, type metadata accessor for PromptCompletion.Annotation.Type);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for PromptCompletion.DocumentCitation;
    uint64_t v22 = (uint64_t)v12;
    goto LABEL_7;
  }
  outlined init with take of PromptCompletion(v19, (uint64_t)v5, type metadata accessor for PromptCompletion.DocumentCitation);
  char v20 = static DocumentResourceIdentifier.== infix(_:_:)();
  outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v5, type metadata accessor for PromptCompletion.DocumentCitation);
  outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v12, type metadata accessor for PromptCompletion.DocumentCitation);
  outlined destroy of PromptCompletion.DocumentCitation((uint64_t)v18, type metadata accessor for PromptCompletion.Annotation.Type);
  return v20 & 1;
}

BOOL specialized static PromptCompletion.TextContent.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  unint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v9 & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(v2, v6))
    {
      if (v3 >> 60 == 15)
      {
        if (v7 >> 60 == 15) {
          return 1;
        }
      }
      else if (v7 >> 60 != 15)
      {
        outlined copy of Data?(v4, v3);
        outlined copy of Data?(v5, v7);
        char v11 = specialized static Data.== infix(_:_:)(v4, v3, v5, v7);
        outlined consume of Data?(v5, v7);
        outlined consume of Data?(v4, v3);
        return (v11 & 1) != 0;
      }
      outlined copy of Data?(v4, v3);
      outlined copy of Data?(v5, v7);
      outlined consume of Data?(v4, v3);
      outlined consume of Data?(v5, v7);
    }
    return 0;
  }
  return result;
}

BOOL specialized static PromptCompletion.Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = *(void *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  unint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 40);
  if (v7)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      uint64_t v14 = *(void *)a2;
      uint64_t v15 = *(void *)(a2 + 16);
      unint64_t v16 = *(void *)(a1 + 32);
      unint64_t v17 = *(void *)(a2 + 32);
      unint64_t v18 = *(void *)(a1 + 8);
      outlined copy of PromptCompletion.Content(*(void *)a2, *(void *)(a2 + 8), v10, v11, v17, 1);
      outlined copy of PromptCompletion.Content(v3, v18, v5, v4, v16, 1);
      outlined copy of PromptCompletion.Content(v3, v18, v5, v4, v16, 1);
      outlined copy of PromptCompletion.Content(v14, v9, v15, v11, v17, 1);
      char v32 = specialized static Data.== infix(_:_:)(v3, v18, v14, v9);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v18, v5, v4, v16, 1);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v14, v9, v15, v11, v17, 1);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v14, v9, v15, v11, v17, 1);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v18, v5, v4, v16, 1);
      return v32 & 1;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 1) == 0)
  {
    v37[0] = *(void *)a1;
    v37[1] = v2;
    v37[2] = v5;
    v37[3] = v4;
    v37[4] = v6;
    v36[0] = v8;
    v36[1] = v9;
    uint64_t v23 = v10;
    id v36[2] = v10;
    v36[3] = v11;
    id v36[4] = v12;
    uint64_t v30 = v8;
    uint64_t v24 = v5;
    uint64_t v25 = v4;
    unint64_t v26 = v6;
    unint64_t v27 = v12;
    unint64_t v28 = v2;
    unint64_t v35 = v2;
    outlined copy of PromptCompletion.Content(v8, v9, v10, v11, v12, 0);
    outlined copy of PromptCompletion.Content(v3, v28, v24, v25, v26, 0);
    uint64_t v29 = v24;
    uint64_t v31 = v24;
    outlined copy of PromptCompletion.Content(v3, v28, v24, v25, v26, 0);
    outlined copy of PromptCompletion.Content(v30, v9, v23, v11, v27, 0);
    BOOL v22 = specialized static PromptCompletion.TextContent.== infix(_:_:)(v37, v36);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v35, v29, v25, v26, 0);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v30, v9, v23, v11, v27, 0);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v30, v9, v23, v11, v27, 0);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v3, v35, v31, v25, v26, 0);
    return v22;
  }
  uint64_t v20 = *(void *)a2;
  uint64_t v33 = *(void *)a1;
  unint64_t v34 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a2 + 16);
  outlined copy of PromptCompletion.Content(*(void *)a1, v2, v5, v4, v6, v7);
  outlined copy of PromptCompletion.Content(v20, v9, v21, v11, v12, v13);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v33, v34, v5, v4, v6, v7);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v20, v9, v21, v11, v12, v13);
  return 0;
}

uint64_t specialized static PromptCompletion.Candidate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  unint64_t v14 = a1[6];
  uint64_t v15 = a1[5];
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  unint64_t v11 = a2[6];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v2, v6) & 1) == 0)
  {
    return 0;
  }
  if (!v3)
  {
    if (!v8) {
      goto LABEL_8;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v8)
  {
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  char v12 = specialized static Dictionary<>.== infix(_:_:)(v3, v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0) {
    return 0;
  }
LABEL_8:
  v17[0] = v4;
  v17[1] = v5;
  v16[0] = v7;
  v16[1] = v9;
  if ((specialized static FinishReason.== infix(_:_:)(v17, v16) & 1) == 0) {
    return 0;
  }
  return specialized static Data.== infix(_:_:)(v15, v14, v10, v11);
}

uint64_t type metadata accessor for PromptCompletion.Annotation(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, type metadata singleton initialization cache for PromptCompletion.Annotation);
}

uint64_t type metadata accessor for PromptCompletion.Annotation.Type(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletion.Annotation.Type);
}

uint64_t outlined assign with take of PromptCompletion.Annotation.Type(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PromptCompletion.DocumentCitation(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletion.DocumentCitation);
}

uint64_t type metadata accessor for PromptCompletion.URLCitation(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletion.URLCitation);
}

uint64_t outlined init with take of PromptCompletion(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of PromptCompletion.DocumentCitation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t PromptCompletion.ImageContent.imageData()(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t type metadata accessor for PromptCompletion.Aggregator(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, type metadata singleton initialization cache for PromptCompletion.Aggregator);
}

uint64_t outlined consume of FinishReason?(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return outlined consume of FinishReason(a1, a2);
  }
  return a1;
}

uint64_t specialized static PromptCompletion.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v38 = type metadata accessor for Prompt.Rendering();
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  unint64_t v35 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.Rendering?, Prompt.Rendering?));
  MEMORY[0x270FA5388](v5);
  uint64_t v37 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  char v13 = (char *)&v35 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v18 = a2[1];
  uint64_t v19 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  if (!v17)
  {
    if (v19) {
      return 0;
    }
    goto LABEL_9;
  }
  if (!v19) {
    return 0;
  }
  if (v16 == v18 && v17 == v19 || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v20 & 1) != 0))
  {
LABEL_9:
    uint64_t v22 = a1[3];
    uint64_t v23 = a2[3];
    if (v22)
    {
      if (v23)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        char v24 = specialized static Dictionary<>.== infix(_:_:)(v22, v23);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0) {
          return 0;
        }
        goto LABEL_14;
      }
      swift_bridgeObjectRetain();
    }
    else if (!v23)
    {
LABEL_14:
      if (specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]))
      {
        uint64_t result = 0;
        if (a1[5] != a2[5] || a1[6] != a2[6]) {
          return result;
        }
        if (specialized static Data.== infix(_:_:)(a1[7], a1[8], a2[7], a2[8]))
        {
          uint64_t v25 = type metadata accessor for PromptCompletion(0);
          outlined init with copy of Prompt.Rendering?((uint64_t)a1 + *(int *)(v25 + 36), (uint64_t)v15);
          outlined init with copy of Prompt.Rendering?((uint64_t)a2 + *(int *)(v25 + 36), (uint64_t)v13);
          uint64_t v26 = *(int *)(v5 + 48);
          uint64_t v27 = v37;
          uint64_t v28 = v37 + v26;
          outlined init with copy of Prompt.Rendering?((uint64_t)v15, v37);
          outlined init with copy of Prompt.Rendering?((uint64_t)v13, v28);
          uint64_t v29 = v36;
          uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
          uint64_t v31 = v38;
          if (v30(v27, 1, v38) == 1)
          {
            outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Prompt.Rendering?);
            outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, &demangling cache variable for type metadata for Prompt.Rendering?);
            if (v30(v28, 1, v31) == 1)
            {
              outlined destroy of GenerativeFunctionsInstrumentationEvent?(v27, &demangling cache variable for type metadata for Prompt.Rendering?);
              return 1;
            }
            goto LABEL_27;
          }
          outlined init with copy of Prompt.Rendering?(v27, (uint64_t)v10);
          if (v30(v28, 1, v31) == 1)
          {
            outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Prompt.Rendering?);
            outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, &demangling cache variable for type metadata for Prompt.Rendering?);
            (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v31);
LABEL_27:
            outlined destroy of GenerativeFunctionsInstrumentationEvent?(v27, &demangling cache variable for type metadata for (Prompt.Rendering?, Prompt.Rendering?));
            return 0;
          }
          char v32 = v35;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v35, v28, v31);
          lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering, MEMORY[0x263F7FB78]);
          char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
          v34(v32, v31);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v13, &demangling cache variable for type metadata for Prompt.Rendering?);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, &demangling cache variable for type metadata for Prompt.Rendering?);
          v34(v10, v31);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?(v27, &demangling cache variable for type metadata for Prompt.Rendering?);
          if (v33) {
            return 1;
          }
        }
      }
      return 0;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Segment and conformance PromptCompletion.Segment()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.Segment and conformance PromptCompletion.Segment;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Segment and conformance PromptCompletion.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Segment and conformance PromptCompletion.Segment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Content and conformance PromptCompletion.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.Content and conformance PromptCompletion.Content;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Content and conformance PromptCompletion.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Content and conformance PromptCompletion.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent;
  if (!lazy protocol witness table cache variable for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PromptCompletion.Annotation.Type()
{
  return lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type PromptCompletion.Annotation.Type and conformance PromptCompletion.Annotation.Type, (void (*)(uint64_t))type metadata accessor for PromptCompletion.Annotation.Type);
}

uint64_t base witness table accessor for Equatable in PromptCompletion.Annotation()
{
  return lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type PromptCompletion.Annotation and conformance PromptCompletion.Annotation, (void (*)(uint64_t))type metadata accessor for PromptCompletion.Annotation);
}

uint64_t base witness table accessor for Equatable in PromptCompletion.URLCitation()
{
  return lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type PromptCompletion.URLCitation and conformance PromptCompletion.URLCitation, (void (*)(uint64_t))type metadata accessor for PromptCompletion.URLCitation);
}

uint64_t base witness table accessor for Equatable in PromptCompletion.DocumentCitation()
{
  return lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type PromptCompletion.DocumentCitation and conformance PromptCompletion.DocumentCitation, (void (*)(uint64_t))type metadata accessor for PromptCompletion.DocumentCitation);
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.ImageContent and conformance PromptCompletion.ImageContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.ImageContent and conformance PromptCompletion.ImageContent;
  if (!lazy protocol witness table cache variable for type PromptCompletion.ImageContent and conformance PromptCompletion.ImageContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.ImageContent and conformance PromptCompletion.ImageContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Moderation.Category and conformance PromptCompletion.Moderation.Category()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.Moderation.Category and conformance PromptCompletion.Moderation.Category;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Moderation.Category and conformance PromptCompletion.Moderation.Category)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Moderation.Category and conformance PromptCompletion.Moderation.Category);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Moderation.Probability and conformance PromptCompletion.Moderation.Probability()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.Moderation.Probability and conformance PromptCompletion.Moderation.Probability;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Moderation.Probability and conformance PromptCompletion.Moderation.Probability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Moderation.Probability and conformance PromptCompletion.Moderation.Probability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Moderation and conformance PromptCompletion.Moderation()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletion.Moderation and conformance PromptCompletion.Moderation;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Moderation and conformance PromptCompletion.Moderation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Moderation and conformance PromptCompletion.Moderation);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PromptCompletion()
{
  return lazy protocol witness table accessor for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier(&lazy protocol witness table cache variable for type PromptCompletion and conformance PromptCompletion, (void (*)(uint64_t))type metadata accessor for PromptCompletion);
}

unint64_t lazy protocol witness table accessor for type ModelInformation.Asset and conformance ModelInformation.Asset()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelInformation.Asset and conformance ModelInformation.Asset;
  if (!lazy protocol witness table cache variable for type ModelInformation.Asset and conformance ModelInformation.Asset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformation.Asset and conformance ModelInformation.Asset);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformation and conformance ModelInformation()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelInformation and conformance ModelInformation;
  if (!lazy protocol witness table cache variable for type ModelInformation and conformance ModelInformation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformation and conformance ModelInformation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Usage and conformance Usage()
{
  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReason and conformance FinishReason()
{
  unint64_t result = lazy protocol witness table cache variable for type FinishReason and conformance FinishReason;
  if (!lazy protocol witness table cache variable for type FinishReason and conformance FinishReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReason and conformance FinishReason);
  }
  return result;
}

uint64_t sub_25F7EA4C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(*(void *)a1 + 16))
  {
    uint64_t v3 = *(void *)(*(void *)a1 + 32);
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t result = 0xE000000000000000;
  }
  *a2 = v3;
  a2[1] = result;
  return result;
}

void sub_25F7EA504()
{
}

uint64_t sub_25F7EA51C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ModelInformation.version.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_25F7EA560()
{
}

uint64_t initializeBufferWithCopyOfBuffer for PromptCompletion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    uint64_t v10 = a2[7];
    unint64_t v11 = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v10, v11);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = *(int *)(a3 + 36);
    char v13 = (void *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Prompt.Rendering();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for PromptCompletion(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Prompt.Rendering();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  unint64_t v9 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v8, v9);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  uint64_t v10 = *(int *)(a3 + 36);
  unint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Prompt.Rendering();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

void *assignWithCopy for PromptCompletion(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v6 = a2[7];
  unint64_t v7 = a2[8];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[7];
  unint64_t v9 = a1[8];
  a1[7] = v6;
  a1[8] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 36);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Prompt.Rendering();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v7) = v15(v11, 1, v13);
  int v16 = v15(v12, 1, v13);
  if (!v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t initializeWithTake for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = (void *)(a1 + v5);
  unint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Prompt.Rendering();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 56);
  unint64_t v8 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  outlined consume of Data._Representation(v7, v8);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (void *)(a1 + v9);
  unint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Prompt.Rendering();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7EAEA4);
}

uint64_t sub_25F7EAEA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7EAF6C);
}

void *sub_25F7EAF6C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for PromptCompletion()
{
  type metadata accessor for Prompt.Rendering?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Prompt.Rendering?()
{
  if (!lazy cache variable for type metadata for Prompt.Rendering?)
  {
    type metadata accessor for Prompt.Rendering();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Prompt.Rendering?);
    }
  }
}

uint64_t destroy for PromptCompletion.Candidate(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[4] >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  return outlined consume of Data._Representation(v2, v3);
}

void *initializeWithCopy for PromptCompletion.Candidate(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = a2 + 3;
  unint64_t v6 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >= 3)
  {
    a1[3] = *v5;
    a1[4] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v5;
  }
  uint64_t v8 = a2[5];
  unint64_t v7 = a2[6];
  outlined copy of Data._Representation(v8, v7);
  a1[5] = v8;
  a1[6] = v7;
  return a1;
}

void *assignWithCopy for PromptCompletion.Candidate(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[4];
  if (a1[4] >= 3uLL)
  {
    if (v4 >= 3)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String((uint64_t)(a1 + 3));
    goto LABEL_6;
  }
  if (v4 < 3)
  {
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    goto LABEL_8;
  }
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
LABEL_8:
  uint64_t v6 = a2[5];
  unint64_t v5 = a2[6];
  outlined copy of Data._Representation(v6, v5);
  uint64_t v7 = a1[5];
  unint64_t v8 = a1[6];
  a1[5] = v6;
  a1[6] = v5;
  outlined consume of Data._Representation(v7, v8);
  return a1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for PromptCompletion.Candidate(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = (void *)(a2 + 24);
  if (a1[4] >= 3uLL)
  {
    unint64_t v5 = *(void *)(a2 + 32);
    if (v5 >= 3)
    {
      a1[3] = *v4;
      a1[4] = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String((uint64_t)(a1 + 3));
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)v4;
LABEL_6:
  uint64_t v6 = a1[5];
  unint64_t v7 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.Candidate(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Candidate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletion.Candidate()
{
  return &type metadata for PromptCompletion.Candidate;
}

ValueMetadata *type metadata accessor for PromptCompletion.Segment()
{
  return &type metadata for PromptCompletion.Segment;
}

uint64_t destroy for PromptCompletion.Segment(uint64_t a1)
{
  return outlined consume of PromptCompletionEnvelope.SegmentEnvelope(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t initializeWithCopy for PromptCompletion.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PromptCompletion.Content(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PromptCompletion.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PromptCompletion.Content(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PromptCompletion.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.Segment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Segment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PromptCompletion.Content(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PromptCompletion.Content(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletion.Content()
{
  return &type metadata for PromptCompletion.Content;
}

uint64_t destroy for PromptCompletion.TextContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    return outlined consume of Data._Representation(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for PromptCompletion.TextContent(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v4 = a2 + 3;
  unint64_t v5 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    outlined copy of Data._Representation(*v4, v5);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v5;
  }
  return a1;
}

void *assignWithCopy for PromptCompletion.TextContent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 3;
  unint64_t v5 = a2[4];
  if (a1[4] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      uint64_t v8 = a1[3];
      unint64_t v9 = a1[4];
      a1[3] = v7;
      a1[4] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 3));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[3] = v6;
  a1[4] = v5;
  return a1;
}

void *assignWithTake for PromptCompletion.TextContent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  unint64_t v5 = a2 + 3;
  unint64_t v6 = a1[4];
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = a2[4];
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = a1[3];
      a1[3] = *v5;
      a1[4] = v7;
      outlined consume of Data._Representation(v8, v6);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 3));
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.TextContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.TextContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletion.TextContent()
{
  return &type metadata for PromptCompletion.TextContent;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletion.Annotation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unint64_t v6 = (uint64_t *)((char *)a1 + v5);
    unint64_t v7 = (uint64_t *)((char *)a2 + v5);
    type metadata accessor for PromptCompletion.Annotation.Type(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      uint64_t v10 = v7[1];
      void *v6 = *v7;
      v6[1] = v10;
      uint64_t v11 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v12 = (char *)v6 + v11;
      unint64_t v13 = (char *)v7 + v11;
      uint64_t v14 = type metadata accessor for URL();
      int v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for PromptCompletion.Annotation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  type metadata accessor for PromptCompletion.Annotation.Type(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for DocumentResourceIdentifier();
  }
  else
  {
    swift_bridgeObjectRelease();
    v2 += *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v3 = type metadata accessor for URL();
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

void *initializeWithCopy for PromptCompletion.Annotation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void *)((char *)a1 + v4);
  unint64_t v6 = (void *)((char *)a2 + v4);
  type metadata accessor for PromptCompletion.Annotation.Type(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  }
  else
  {
    uint64_t v8 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v10 = (char *)v5 + v9;
    uint64_t v11 = (char *)v6 + v9;
    uint64_t v12 = type metadata accessor for URL();
    unint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for PromptCompletion.Annotation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 20);
    uint64_t v5 = (void *)((char *)a1 + v4);
    unint64_t v6 = (void *)((char *)a2 + v4);
    outlined destroy of PromptCompletion.DocumentCitation((uint64_t)a1 + v4, type metadata accessor for PromptCompletion.Annotation.Type);
    type metadata accessor for PromptCompletion.Annotation.Type(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      *uint64_t v5 = *v6;
      v5[1] = v6[1];
      uint64_t v8 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v9 = (char *)v5 + v8;
      uint64_t v10 = (char *)v6 + v8;
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for PromptCompletion.Annotation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  unint64_t v6 = (_OWORD *)((char *)a2 + v4);
  type metadata accessor for PromptCompletion.Annotation.Type(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    *uint64_t v5 = *v6;
    uint64_t v8 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v9 = (char *)v5 + v8;
    uint64_t v10 = (char *)v6 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for PromptCompletion.Annotation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 20);
    uint64_t v5 = (_OWORD *)((char *)a1 + v4);
    unint64_t v6 = (_OWORD *)((char *)a2 + v4);
    outlined destroy of PromptCompletion.DocumentCitation((uint64_t)a1 + v4, type metadata accessor for PromptCompletion.Annotation.Type);
    type metadata accessor for PromptCompletion.Annotation.Type(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      *uint64_t v5 = *v6;
      uint64_t v8 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v9 = (char *)v5 + v8;
      uint64_t v10 = (char *)v6 + v8;
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.Annotation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7EC170);
}

uint64_t sub_25F7EC170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Annotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7EC1F4);
}

uint64_t sub_25F7EC1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for PromptCompletion.Annotation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PromptCompletion.Annotation(a1, a2, a3, MEMORY[0x263F8CF70] + 64, type metadata accessor for PromptCompletion.Annotation.Type);
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletion.Annotation.Type(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for URL();
      unint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PromptCompletion.Annotation.Type(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DocumentResourceIdentifier();
  }
  else
  {
    swift_bridgeObjectRelease();
    a1 += *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v2 = type metadata accessor for URL();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

void *initializeWithCopy for PromptCompletion.Annotation.Type(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for PromptCompletion.Annotation.Type(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of PromptCompletion.DocumentCitation((uint64_t)a1, type metadata accessor for PromptCompletion.Annotation.Type);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v5 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for URL();
      uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for PromptCompletion.Annotation.Type(_OWORD *a1, _OWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for PromptCompletion.Annotation.Type(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of PromptCompletion.DocumentCitation((uint64_t)a1, type metadata accessor for PromptCompletion.Annotation.Type);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for PromptCompletion.Annotation.Type()
{
  uint64_t result = type metadata accessor for PromptCompletion.URLCitation(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DocumentResourceIdentifier();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletion.URLCitation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PromptCompletion.URLCitation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for PromptCompletion.URLCitation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for PromptCompletion.URLCitation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PromptCompletion.URLCitation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PromptCompletion.URLCitation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.URLCitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7ECD64);
}

uint64_t sub_25F7ECD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.URLCitation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7ECE28);
}

uint64_t sub_25F7ECE28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PromptCompletion.URLCitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PromptCompletion.Annotation(a1, a2, a3, (uint64_t)&unk_25F91DF70, MEMORY[0x263F06EA8]);
}

uint64_t type metadata completion function for PromptCompletion.Annotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t result = a5(319);
  if (v6 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PromptCompletion.DocumentCitation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for PromptCompletion.DocumentCitation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for PromptCompletion.DocumentCitation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PromptCompletion.DocumentCitation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PromptCompletion.DocumentCitation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PromptCompletion.DocumentCitation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.DocumentCitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7ED1F8);
}

uint64_t sub_25F7ED1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.DocumentCitation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7ED278);
}

uint64_t sub_25F7ED278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PromptCompletion.DocumentCitation()
{
  uint64_t result = type metadata accessor for DocumentResourceIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletion.ImageContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for PromptCompletion.ImageContent(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for PromptCompletion.ImageContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for PromptCompletion.ImageContent(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.ImageContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.ImageContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletion.ImageContent()
{
  return &type metadata for PromptCompletion.ImageContent;
}

ValueMetadata *type metadata accessor for PromptCompletion.Moderation()
{
  return &type metadata for PromptCompletion.Moderation;
}

ValueMetadata *type metadata accessor for PromptCompletion.Moderation.Category()
{
  return &type metadata for PromptCompletion.Moderation.Category;
}

unsigned char *storeEnumTagSinglePayload for PromptCompletion.Moderation.Probability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25F7ED5E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletion.Moderation.Probability()
{
  return &type metadata for PromptCompletion.Moderation.Probability;
}

uint64_t initializeBufferWithCopyOfBuffer for PromptCompletion.Aggregator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v8 = a2[6];
    uint64_t v9 = *(int *)(a3 + 32);
    __dst = (void *)(a1 + v9);
    uint64_t v10 = (char *)a2 + v9;
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v8;
    uint64_t v11 = type metadata accessor for Prompt.Rendering();
    uint64_t v12 = *(void *)(v11 - 8);
    int v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v10, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
      memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    *(void *)(v6 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t destroy for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Prompt.Rendering();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 32);
  __dst = (void *)(a1 + v7);
  uint64_t v8 = (const void *)(a2 + v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v9 = type metadata accessor for Prompt.Rendering();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(__dst, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptCompletion.Aggregator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Prompt.Rendering();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 36)) = *(void *)((char *)a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Prompt.Rendering();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithTake for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Prompt.Rendering();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7EDFB0);
}

uint64_t sub_25F7EDFB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7EE078);
}

void *sub_25F7EE078(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for PromptCompletion.Aggregator()
{
  type metadata accessor for Prompt.Rendering?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for ModelInformation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for ModelInformation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelInformation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ModelInformation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelInformation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelInformation()
{
  return &type metadata for ModelInformation;
}

uint64_t destroy for ModelInformation.Asset(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  return outlined consume of Data._Representation(v2, v3);
}

void *initializeWithCopy for ModelInformation.Asset(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  unint64_t v6 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v5, v6);
  a1[4] = v5;
  a1[5] = v6;
  return a1;
}

void *assignWithCopy for ModelInformation.Asset(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  unint64_t v4 = a2[5];
  outlined copy of Data._Representation(v5, v4);
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  a1[4] = v5;
  a1[5] = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for ModelInformation.Asset(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelInformation.Asset(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelInformation.Asset(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelInformation.Asset()
{
  return &type metadata for ModelInformation.Asset;
}

uint64_t getEnumTagSinglePayload for Usage(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Usage(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Usage()
{
  return &type metadata for Usage;
}

unint64_t destroy for FinishReason(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FinishReason(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for FinishReason(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FinishReason(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FinishReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FinishReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for FinishReason(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for FinishReason(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FinishReason()
{
  return &type metadata for FinishReason;
}

uint64_t destroy for PromptCompletion.Aggregator.CandidateAggregator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32) >= 4uLL) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PromptCompletion.Aggregator.CandidateAggregator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unsigned int v5 = (_OWORD *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 < 4)
  {
    *(_OWORD *)(a1 + 24) = *v5;
  }
  else
  {
    *(void *)(a1 + 24) = *(void *)v5;
    *(void *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PromptCompletion.Aggregator.CandidateAggregator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v4 == 3)
  {
    if (v5 >= 4) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  if (v5 == 3)
  {
    outlined destroy of FinishReason(a1 + 24);
    goto LABEL_11;
  }
  if (v4 >= 3)
  {
    if (v5 >= 3)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    outlined destroy of String(a1 + 24);
    goto LABEL_11;
  }
  if (v5 < 3)
  {
LABEL_11:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_12;
  }
LABEL_8:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
LABEL_12:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t outlined destroy of FinishReason(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 0xFFFFFFFFuLL) {
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PromptCompletion.Aggregator.CandidateAggregator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = (void *)(a2 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v5 != 3)
  {
    if (v6 == 3)
    {
      outlined destroy of FinishReason(a1 + 24);
    }
    else if (v5 >= 3)
    {
      if (v6 >= 3)
      {
        *(void *)(a1 + 24) = *v4;
        *(void *)(a1 + 32) = v6;
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      outlined destroy of String(a1 + 24);
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.Aggregator.CandidateAggregator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Aggregator.CandidateAggregator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for PromptCompletion.Aggregator.CandidateAggregator()
{
  return &unk_270BC0598;
}

uint64_t outlined init with copy of PromptCompletion.Annotation.Type(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of FinishReason?(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return outlined copy of FinishReason(a1, a2);
  }
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

double PromptCompletionEventCandidateTextDelta.init(responseIdentifier:candidateIdentifier:segmentIndex:textDelta:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  double result = 0.0;
  *(_OWORD *)(a8 + 56) = xmmword_25F91CC60;
  return result;
}

id PromptCompletionEventResponseMetadata.metadata.getter()
{
  v6[5] = *(id *)MEMORY[0x263EF8340];
  unint64_t v0 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, isa, 0, v6);

  id v3 = v6[0];
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_dynamicCast();
    return v6[0];
  }
  else
  {
    uint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

id PromptCompletionEventCandidateFinished.metadata.getter()
{
  v6[5] = *(id *)MEMORY[0x263EF8340];
  unint64_t v0 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, isa, 0, v6);

  id v3 = v6[0];
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_dynamicCast();
    return v6[0];
  }
  else
  {
    uint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t PromptCompletionStream.init<A>(streamResponse:bufferResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  int v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a4);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  AsyncThrowingStream<>.init<A>(_:)((uint64_t)v13, v18, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v17, v14);
  uint64_t result = type metadata accessor for PromptCompletionStream(0);
  char v20 = (void *)(a6 + *(int *)(result + 20));
  uint64_t v21 = v23;
  *char v20 = a2;
  v20[1] = v21;
  return result;
}

void PromptCompletionStream.makeAsyncIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  JUMPOUT(0x261200F50);
}

uint64_t PromptCompletionStream.AsyncIterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](PromptCompletionStream.AsyncIterator.next(), 0, 0);
}

uint64_t PromptCompletionStream.AsyncIterator.next()()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  *uint64_t v1 = v0;
  v1[1] = PromptCompletionStream.AsyncIterator.next();
  uint64_t v3 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2100](v3, v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance PromptCompletionStream.AsyncIterator(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](PromptCompletionStream.AsyncIterator.next(), 0, 0);
}

uint64_t _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = v4;
  v5[7] = a4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return MEMORY[0x270FA2498](_s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_, 0, 0);
}

uint64_t _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  *uint64_t v1 = v0;
  v1[1] = _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  uint64_t v3 = *(void *)(v0 + 24);
  return MEMORY[0x270FA2100](v3, v2);
}

uint64_t _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(void *)(v2 + 72) = v0;
    if (*(void *)(v2 + 32))
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    return MEMORY[0x270FA2498](_s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_, v4, v6);
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(v3 + 8);
    return v7();
  }
}

uint64_t _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (void *)v0[7];
  v0[2] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  *uint64_t v2 = v1;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t PromptCompletionStream.collect()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](PromptCompletionStream.collect(), 0, 0);
}

uint64_t PromptCompletionStream.collect()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)(v1 + *(int *)(type metadata accessor for PromptCompletionStream(0) + 20));
  uint64_t v6 = (uint64_t (*)(uint64_t))(*v2 + *(int *)*v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  void *v3 = v0;
  v3[1] = PromptCompletionStream.AsyncIterator.next();
  uint64_t v4 = v0[2];
  return v6(v4);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance PromptCompletionStream()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  MEMORY[0x261200F50](v1);
  return outlined destroy of PromptCompletion.Annotation.Type(v0, type metadata accessor for PromptCompletionStream);
}

uint64_t PromptCompletionEventModelInformation.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventModelInformation.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventModelInformation.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventModelInformation.modelInformation.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 PromptCompletionEventModelInformation.modelInformation.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v4;
  v1[1] = v4;
  v1[2].n128_u64[0] = v2;
  return result;
}

uint64_t (*PromptCompletionEventModelInformation.modelInformation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void __swiftcall PromptCompletionEventModelInformation.init(responseIdentifier:modelInformation:)(TokenGeneration::PromptCompletionEventModelInformation *__return_ptr retstr, Swift::String responseIdentifier, TokenGeneration::ModelInformation modelInformation)
{
  uint64_t v3 = *(void **)modelInformation.assets._rawValue;
  retstr->responseIdentifier = responseIdentifier;
  retstr->modelInformation.assets._rawValue = v3;
  retstr->modelInformation.systemVersion = *(Swift::String_optional *)((char *)modelInformation.assets._rawValue + 8);
}

uint64_t PromptCompletionEventModelInformation.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

Swift::Int PromptCompletionEventModelInformation.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventModelInformation(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventModelInformation()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t PromptCompletionEventPromptModeration.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventPromptModeration.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventPromptModeration.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventPromptModeration.moderation.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletionEventPromptModeration.moderation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*PromptCompletionEventPromptModeration.moderation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

TokenGeneration::PromptCompletionEventPromptModeration __swiftcall PromptCompletionEventPromptModeration.init(responseIdentifier:moderation:)(Swift::String responseIdentifier, TokenGeneration::PromptCompletion::Moderation moderation)
{
  uint64_t v3 = *(void *)moderation.ratings._rawValue;
  *uint64_t v2 = responseIdentifier;
  v2[1]._uint64_t countAndFlagsBits = v3;
  result.responseIdentifier = responseIdentifier;
  result.moderation = moderation;
  return result;
}

uint64_t PromptCompletionEventPromptModeration.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int PromptCompletionEventPromptModeration.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEventPromptModeration()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventPromptModeration(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventPromptModeration()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t (*PromptCompletionEventCandidateModeration.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateModeration.candidateIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateModeration.candidateIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateModeration.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateModeration.moderation.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletionEventCandidateModeration.moderation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateModeration.moderation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void __swiftcall PromptCompletionEventCandidateModeration.init(responseIdentifier:candidateIdentifier:moderation:)(TokenGeneration::PromptCompletionEventCandidateModeration *__return_ptr retstr, Swift::String responseIdentifier, Swift::String candidateIdentifier, TokenGeneration::PromptCompletion::Moderation moderation)
{
  uint64_t v4 = *(void **)moderation.ratings._rawValue;
  retstr->responseIdentifier = responseIdentifier;
  retstr->candidateIdentifier = candidateIdentifier;
  retstr->moderation.ratings._rawValue = v4;
}

uint64_t PromptCompletionEventCandidateModeration.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int PromptCompletionEventCandidateModeration.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEventCandidateModeration()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventCandidateModeration(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateModeration()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PromptCompletionEventCandidateTextDelta.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateTextDelta.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateTextDelta.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateTextDelta.candidateIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateTextDelta.candidateIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateTextDelta.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateTextDelta.segmentIndex.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PromptCompletionEventCandidateTextDelta.segmentIndex.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*PromptCompletionEventCandidateTextDelta.segmentIndex.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateTextDelta.textDelta.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateTextDelta.textDelta.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateTextDelta.textDelta.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateTextDelta._userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  outlined copy of Data?(v1, *(void *)(v0 + 64));
  return v1;
}

uint64_t PromptCompletionEventCandidateTextDelta._userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 56), *(void *)(v2 + 64));
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateTextDelta._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateTextDelta.hash(into:)()
{
  Swift::UInt v1 = v0[4];
  uint64_t v3 = v0[7];
  unint64_t v2 = v0[8];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v3, v2);
    Data.hash(into:)();
    outlined consume of Data?(v3, v2);
  }
}

Swift::Int PromptCompletionEventCandidateTextDelta.hashValue.getter()
{
  Swift::UInt v1 = v0[4];
  uint64_t v2 = v0[7];
  unint64_t v3 = v0[8];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v3);
    Data.hash(into:)();
    outlined consume of Data?(v2, v3);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateTextDelta()
{
  Swift::UInt v1 = v0[4];
  uint64_t v2 = v0[7];
  unint64_t v3 = v0[8];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v3);
    Data.hash(into:)();
    outlined consume of Data?(v2, v3);
  }
  return Hasher._finalize()();
}

uint64_t (*PromptCompletionEventCandidateAnnotation.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateAnnotation.candidateIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateAnnotation.candidateIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateAnnotation.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateAnnotation.segmentIndex.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PromptCompletionEventCandidateAnnotation.segmentIndex.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*PromptCompletionEventCandidateAnnotation.segmentIndex.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateAnnotation.annotation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletionEventCandidateAnnotation(0) + 28);
  return outlined init with copy of PromptCompletion.Annotation(v3, a1);
}

uint64_t PromptCompletionEventCandidateAnnotation.annotation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletionEventCandidateAnnotation(0) + 28);
  return outlined assign with take of PromptCompletion.Annotation(a1, v3);
}

uint64_t (*PromptCompletionEventCandidateAnnotation.annotation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateAnnotation.init(responseIdentifier:candidateIdentifier:segmentIndex:annotation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  uint64_t v8 = (uint64_t)a7 + *(int *)(type metadata accessor for PromptCompletionEventCandidateAnnotation(0) + 28);
  return outlined init with take of PromptCompletion.Annotation(a6, v8);
}

uint64_t PromptCompletionEventCandidateAnnotation.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + 32));
  uint64_t v1 = type metadata accessor for PromptCompletionEventCandidateAnnotation(0);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 28)));
  type metadata accessor for PromptCompletion.Annotation(0);
  return PromptCompletion.Annotation.Type.hash(into:)();
}

Swift::Int PromptCompletionEventCandidateAnnotation.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + 32));
  uint64_t v1 = type metadata accessor for PromptCompletionEventCandidateAnnotation(0);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 28)));
  type metadata accessor for PromptCompletion.Annotation(0);
  PromptCompletion.Annotation.Type.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEventCandidateAnnotation(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v1 + 32));
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(a1 + 28)));
  type metadata accessor for PromptCompletion.Annotation(0);
  PromptCompletion.Annotation.Type.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventCandidateAnnotation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + 32));
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  type metadata accessor for PromptCompletion.Annotation(0);
  return PromptCompletion.Annotation.Type.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateAnnotation(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + 32));
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  type metadata accessor for PromptCompletion.Annotation(0);
  PromptCompletion.Annotation.Type.hash(into:)();
  return Hasher._finalize()();
}

uint64_t PromptCompletionEventCandidateToolCallDelta.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.candidateIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.candidateIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.toolCallIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.toolCallIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.toolCallIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.functionName.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.functionName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.functionName.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.argumentsDelta.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateToolCallDelta.argumentsDelta.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.argumentsDelta.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateToolCallDelta._userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  outlined copy of Data?(v1, *(void *)(v0 + 88));
  return v1;
}

uint64_t PromptCompletionEventCandidateToolCallDelta._userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)(v2 + 80), *(void *)(v2 + 88));
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

double PromptCompletionEventCandidateToolCallDelta.init(responseIdentifier:candidateIdentifier:toolCallIdentifier:functionName:argumentsDelta:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  double result = 0.0;
  *(_OWORD *)(a9 + 80) = xmmword_25F91CC60;
  return result;
}

void PromptCompletionEventCandidateToolCallDelta.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v3, v2);
    Data.hash(into:)();
    outlined consume of Data?(v3, v2);
  }
}

Swift::Int PromptCompletionEventCandidateToolCallDelta.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEventCandidateToolCallDelta()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateToolCallDelta()
{
  return Hasher._finalize()();
}

uint64_t PromptCompletionEventCandidateImageGeneration.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateImageGeneration.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateImageGeneration.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateImageGeneration.candidateIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateImageGeneration.candidateIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateImageGeneration.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateImageGeneration.segmentIndex.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PromptCompletionEventCandidateImageGeneration.segmentIndex.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*PromptCompletionEventCandidateImageGeneration.segmentIndex.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateImageGeneration.image.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of Data._Representation(v2, v3);
}

uint64_t PromptCompletionEventCandidateImageGeneration.image.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = outlined consume of Data._Representation(*(void *)(v1 + 40), *(void *)(v1 + 48));
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  return result;
}

uint64_t (*PromptCompletionEventCandidateImageGeneration.image.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletionEventCandidateImageGeneration.init(responseIdentifier:candidateIdentifier:segmentIndex:image:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __n128 *a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  __n128 result = *a6;
  *(__n128 *)(a7 + 40) = *a6;
  return result;
}

uint64_t PromptCompletionEventCandidateImageGeneration.hash(into:)()
{
  Swift::UInt v1 = v0[4];
  uint64_t v2 = v0[5];
  unint64_t v3 = v0[6];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int PromptCompletionEventCandidateImageGeneration.hashValue.getter()
{
  Swift::UInt v1 = v0[4];
  uint64_t v2 = v0[5];
  unint64_t v3 = v0[6];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventCandidateImageGeneration()
{
  Swift::UInt v1 = v0[4];
  uint64_t v2 = v0[5];
  unint64_t v3 = v0[6];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateImageGeneration()
{
  Swift::UInt v1 = v0[4];
  uint64_t v2 = v0[5];
  unint64_t v3 = v0[6];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t PromptCompletionEventCandidateFinished.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateFinished.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateFinished.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateFinished.candidateIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventCandidateFinished.candidateIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PromptCompletionEventCandidateFinished.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateFinished.finishReason.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 40);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of FinishReason(v2, v3);
}

uint64_t PromptCompletionEventCandidateFinished.finishReason.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = outlined consume of FinishReason(*(void *)(v1 + 32), *(void *)(v1 + 40));
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return result;
}

uint64_t (*PromptCompletionEventCandidateFinished.finishReason.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  v21[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v12 = *a5;
  unint64_t v11 = a5[1];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  int v13 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21[0] = 0;
  id v15 = objc_msgSend(v13, sel_dataWithJSONObject_options_error_, isa, 0, v21);

  id v16 = v21[0];
  if (!v15)
  {
    char v20 = v16;
    outlined consume of FinishReason(v12, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = v12;
  a6[5] = v11;
  a6[6] = v17;
  a6[7] = v19;
}

void PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:metadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  v21[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v12 = *a5;
  unint64_t v11 = a5[1];
  int v13 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21[0] = 0;
  id v15 = objc_msgSend(v13, sel_dataWithJSONObject_options_error_, isa, 0, v21);

  id v16 = v21[0];
  if (!v15)
  {
    char v20 = v16;
    outlined consume of FinishReason(v12, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = v12;
  a6[5] = v11;
  a6[6] = v17;
  a6[7] = v19;
}

uint64_t PromptCompletionEventCandidateFinished.hash(into:)()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  unint64_t v4 = v0[7];
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  switch(v2)
  {
    case 0uLL:
      Swift::UInt v5 = 0;
      goto LABEL_7;
    case 1uLL:
      Swift::UInt v5 = 2;
      goto LABEL_7;
    case 2uLL:
      Swift::UInt v5 = 3;
LABEL_7:
      Hasher._combine(_:)(v5);
      goto LABEL_9;
  }
  Hasher._combine(_:)(1uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of FinishReason(v1, v2);
LABEL_9:
  outlined copy of Data._Representation(v3, v4);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v3, v4);
}

Swift::Int PromptCompletionEventCandidateFinished.hashValue.getter()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  unint64_t v4 = v0[7];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (v2 == 1)
    {
      Swift::UInt v5 = 2;
    }
    else
    {
      if (v2 != 2)
      {
        Hasher._combine(_:)(1uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of FinishReason(v1, v2);
        goto LABEL_9;
      }
      Swift::UInt v5 = 3;
    }
  }
  else
  {
    Swift::UInt v5 = 0;
  }
  Hasher._combine(_:)(v5);
LABEL_9:
  outlined copy of Data._Representation(v3, v4);
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateFinished()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  unint64_t v4 = v0[7];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (v2 == 1)
    {
      Swift::UInt v5 = 2;
    }
    else
    {
      if (v2 != 2)
      {
        Hasher._combine(_:)(1uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of FinishReason(v1, v2);
        goto LABEL_9;
      }
      Swift::UInt v5 = 3;
    }
  }
  else
  {
    Swift::UInt v5 = 0;
  }
  Hasher._combine(_:)(v5);
LABEL_9:
  outlined copy of Data._Representation(v3, v4);
  Data.hash(into:)();
  outlined consume of Data._Representation(v3, v4);
  return Hasher._finalize()();
}

uint64_t PromptCompletionEventUsage.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventUsage.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventUsage.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletionEventUsage.usage.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

__n128 PromptCompletionEventUsage.usage.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*PromptCompletionEventUsage.usage.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

TokenGeneration::PromptCompletionEventUsage __swiftcall PromptCompletionEventUsage.init(responseIdentifier:usage:)(Swift::String responseIdentifier, TokenGeneration::Usage usage)
{
  *(Swift::String *)uint64_t v2 = responseIdentifier;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)usage.promptTokenCount;
  result.usage = usage;
  result.responseIdentifier = responseIdentifier;
  return result;
}

void PromptCompletionEventUsage.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int PromptCompletionEventUsage.hashValue.getter()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEventUsage()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventUsage()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventUsage()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t PromptCompletionEventRenderedPrompt.responseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptCompletionEventRenderedPrompt.responseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PromptCompletionEventRenderedPrompt.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventRenderedPrompt.renderedPrompt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletionEventRenderedPrompt(0) + 20);
  uint64_t v4 = type metadata accessor for Prompt.Rendering();
  Swift::UInt v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t PromptCompletionEventRenderedPrompt.renderedPrompt.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PromptCompletionEventRenderedPrompt(0) + 20);
  uint64_t v4 = type metadata accessor for Prompt.Rendering();
  Swift::UInt v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*PromptCompletionEventRenderedPrompt.renderedPrompt.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventRenderedPrompt.init(responseIdentifier:renderedPrompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  Swift::UInt v5 = (char *)a4 + *(int *)(type metadata accessor for PromptCompletionEventRenderedPrompt(0) + 20);
  uint64_t v6 = type metadata accessor for Prompt.Rendering();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  return v7(v5, a3, v6);
}

uint64_t PromptCompletionEventRenderedPrompt.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static PromptCompletionEventRenderedPrompt.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for PromptCompletionEventRenderedPrompt(0);
    JUMPOUT(0x2611FF5A0);
  }
  return 0;
}

Swift::Int PromptCompletionEventRenderedPrompt.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEventRenderedPrompt()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventRenderedPrompt()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventRenderedPrompt()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEventRenderedPrompt(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    JUMPOUT(0x2611FF5A0);
  }
  return 0;
}

uint64_t (*PromptCompletionEventResponseMetadata.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventResponseMetadata.init(responseIdentifier:metadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v14[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14[0] = 0;
  id v8 = objc_msgSend(v6, sel_dataWithJSONObject_options_error_, isa, 0, v14);

  id v9 = v14[0];
  if (!v8)
  {
    int v13 = v9;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *a3 = a1;
  a3[1] = a2;
  a3[2] = v10;
  a3[3] = v12;
}

uint64_t PromptCompletionEventResponseMetadata.hash(into:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v1);
}

uint64_t static PromptCompletionEventResponseMetadata.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  return specialized static Data.== infix(_:_:)(v2, v3, v4, v5);
}

Swift::Int PromptCompletionEventResponseMetadata.hashValue.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEventResponseMetadata()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEventResponseMetadata()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventResponseMetadata()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEventResponseMetadata(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  return specialized static Data.== infix(_:_:)(v2, v3, v4, v5);
}

uint64_t type metadata accessor for PromptCompletionStream(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionStream);
}

uint64_t specialized static PromptCompletionEventPromptModeration.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = specialized static Dictionary<>.== infix(_:_:)(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized static PromptCompletionEventCandidateImageGeneration.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v6 = a1[6];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  unint64_t v11 = a2[6];
  if ((*a1 != *a2 || a1[1] != a2[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (v2 != v7 || v3 != v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || v4 != v10)
  {
    return 0;
  }
  outlined copy of Data._Representation(v5, v6);
  outlined copy of Data._Representation(v9, v11);
  char v12 = specialized static Data.== infix(_:_:)(v5, v6, v9, v11);
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(v5, v6);
  return v12 & 1;
}

BOOL specialized static PromptCompletionEventUsage.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return v2 == v4 && v3 == v5;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v7) {
    return v2 == v4 && v3 == v5;
  }
  return result;
}

BOOL specialized static PromptCompletionEventModelInformation.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v9 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (specialized static Array<A>.== infix(_:_:)(v2, v5))
    {
      if (!v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v7) {
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      if (v7)
      {
        if (v4 == v6 && v3 == v7)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_16:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (v11 & 1) != 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t specialized static PromptCompletionEventCandidateFinished.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  unint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a1 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  if ((*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if ((v2 != v6 || v3 != v7) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  long long v13 = v11;
  long long v14 = v12;
  if ((specialized static FinishReason.== infix(_:_:)((uint64_t *)&v14, (uint64_t *)&v13) & 1) == 0) {
    return 0;
  }
  return specialized static Data.== infix(_:_:)(v4, v5, v8, v9);
}

BOOL specialized static PromptCompletionEventCandidateTextDelta.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v18 = a2[7];
  uint64_t v19 = a1[7];
  unint64_t v20 = a2[8];
  unint64_t v21 = a1[8];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v4 == v8)
    {
      if (v3 != v9) {
        return 0;
      }
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0;
      if ((v14 & 1) == 0 || v3 != v9) {
        return result;
      }
    }
    if (v5 == v10 && v6 == v11 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v15 & 1) != 0))
    {
      if (v21 >> 60 == 15)
      {
        unint64_t v16 = v20;
        if (v20 >> 60 == 15) {
          return 1;
        }
      }
      else
      {
        unint64_t v16 = v20;
        if (v20 >> 60 != 15)
        {
          outlined copy of Data?(v19, v21);
          outlined copy of Data?(v18, v20);
          char v17 = specialized static Data.== infix(_:_:)(v19, v21, v18, v20);
          outlined consume of Data?(v18, v20);
          outlined consume of Data?(v19, v21);
          return (v17 & 1) != 0;
        }
      }
      outlined copy of Data?(v19, v21);
      outlined copy of Data?(v18, v16);
      outlined consume of Data?(v19, v21);
      outlined consume of Data?(v18, v16);
      return 0;
    }
  }
  return result;
}

BOOL specialized static PromptCompletionEventCandidateAnnotation.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v8 & 1) != 0))
    {
      BOOL result = 0;
      if (a1[4] == a2[4])
      {
        uint64_t v9 = *(int *)(type metadata accessor for PromptCompletionEventCandidateAnnotation(0) + 28);
        uint64_t v10 = (void *)((char *)a1 + v9);
        uint64_t v11 = (void *)((char *)a2 + v9);
        if (*v10 == *v11)
        {
          uint64_t v12 = type metadata accessor for PromptCompletion.Annotation(0);
          if (specialized static PromptCompletion.Annotation.Type.== infix(_:_:)((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20)))return 1; {
        }
          }
      }
    }
  }
  return result;
}

uint64_t specialized static PromptCompletionEventCandidateModeration.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v9 = v2 == v5 && v4 == v6;
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v10 = specialized static Dictionary<>.== infix(_:_:)(v3, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t type metadata accessor for PromptCompletionEventCandidateAnnotation(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionEventCandidateAnnotation);
}

uint64_t outlined init with copy of PromptCompletion.Annotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletion.Annotation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of PromptCompletion.Annotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletion.Annotation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PromptCompletion.Annotation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptCompletion.Annotation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL specialized static PromptCompletionEventCandidateToolCallDelta.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v28 = a1[7];
  uint64_t v29 = a1[6];
  uint64_t v25 = a1[9];
  unint64_t v23 = a1[11];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v26 = a2[8];
  uint64_t v27 = a1[8];
  uint64_t v24 = a2[9];
  uint64_t v20 = a2[10];
  uint64_t v21 = a1[10];
  unint64_t v22 = a2[11];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v4 == v6 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v14 & 1) != 0))
    {
      if (v3 == v9 && v5 == v8 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v15 & 1) != 0))
      {
        if (v29 == v10 && v28 == v11
          || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v16 & 1) != 0))
        {
          if (v27 == v26 && v25 == v24
            || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v17 & 1) != 0))
          {
            if (v23 >> 60 == 15)
            {
              unint64_t v18 = v22;
              if (v22 >> 60 == 15) {
                return 1;
              }
            }
            else
            {
              unint64_t v18 = v22;
              if (v22 >> 60 != 15)
              {
                outlined copy of Data?(v21, v23);
                outlined copy of Data?(v20, v22);
                char v19 = specialized static Data.== infix(_:_:)(v21, v23, v20, v22);
                outlined consume of Data?(v20, v22);
                outlined consume of Data?(v21, v23);
                return (v19 & 1) != 0;
              }
            }
            outlined copy of Data?(v21, v23);
            outlined copy of Data?(v20, v18);
            outlined consume of Data?(v21, v23);
            outlined consume of Data?(v20, v18);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for PromptCompletionEventRenderedPrompt(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionEventRenderedPrompt);
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in PromptCompletionStream()
{
  return lazy protocol witness table accessor for type Prompt.Rendering and conformance Prompt.Rendering(&lazy protocol witness table cache variable for type PromptCompletionStream.AsyncIterator and conformance PromptCompletionStream.AsyncIterator, (void (*)(uint64_t))type metadata accessor for PromptCompletionStream.AsyncIterator);
}

uint64_t lazy protocol witness table accessor for type Prompt.Rendering and conformance Prompt.Rendering(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PromptCompletionStream.AsyncIterator(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionStream.AsyncIterator);
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventPromptModeration and conformance PromptCompletionEventPromptModeration()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventPromptModeration and conformance PromptCompletionEventPromptModeration;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventPromptModeration and conformance PromptCompletionEventPromptModeration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventPromptModeration and conformance PromptCompletionEventPromptModeration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateModeration and conformance PromptCompletionEventCandidateModeration()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateModeration and conformance PromptCompletionEventCandidateModeration;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateModeration and conformance PromptCompletionEventCandidateModeration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateModeration and conformance PromptCompletionEventCandidateModeration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PromptCompletionEventCandidateAnnotation()
{
  return lazy protocol witness table accessor for type Prompt.Rendering and conformance Prompt.Rendering(&lazy protocol witness table cache variable for type PromptCompletionEventCandidateAnnotation and conformance PromptCompletionEventCandidateAnnotation, (void (*)(uint64_t))type metadata accessor for PromptCompletionEventCandidateAnnotation);
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateImageGeneration and conformance PromptCompletionEventCandidateImageGeneration()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateImageGeneration and conformance PromptCompletionEventCandidateImageGeneration;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateImageGeneration and conformance PromptCompletionEventCandidateImageGeneration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateImageGeneration and conformance PromptCompletionEventCandidateImageGeneration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PromptCompletionEventRenderedPrompt()
{
  return lazy protocol witness table accessor for type Prompt.Rendering and conformance Prompt.Rendering(&lazy protocol witness table cache variable for type PromptCompletionEventRenderedPrompt and conformance PromptCompletionEventRenderedPrompt, (void (*)(uint64_t))type metadata accessor for PromptCompletionEventRenderedPrompt);
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventResponseMetadata and conformance PromptCompletionEventResponseMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptCompletionEventResponseMetadata and conformance PromptCompletionEventResponseMetadata;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventResponseMetadata and conformance PromptCompletionEventResponseMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventResponseMetadata and conformance PromptCompletionEventResponseMetadata);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletionStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for PromptCompletionStream(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7F47A8);
}

uint64_t sub_25F7F47A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7F4880);
}

uint64_t sub_25F7F4880(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for PromptCompletionStream()
{
  type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>(319, &lazy cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>, MEMORY[0x263F8F6B8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  int v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for PromptCompletionStream.AsyncIterator(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7F4C80);
}

uint64_t sub_25F7F4C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7F4D04);
}

uint64_t sub_25F7F4D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void type metadata completion function for PromptCompletionStream.AsyncIterator()
{
  type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>(319, (unint64_t *)&lazy cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator, MEMORY[0x263F8F6A8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptCompletionEvent);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v8 = a3(a1, v6, v7, MEMORY[0x263F8E4E0]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for PromptCompletionEventModelInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PromptCompletionEventModelInformation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptCompletionEventModelInformation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptCompletionEventModelInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PromptCompletionEventModelInformation()
{
  return &type metadata for PromptCompletionEventModelInformation;
}

uint64_t destroy for PromptCompletionEventPromptModeration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for PromptCompletionEventPromptModeration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptCompletionEventPromptModeration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptCompletionEventPromptModeration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventPromptModeration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventPromptModeration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletionEventPromptModeration()
{
  return &type metadata for PromptCompletionEventPromptModeration;
}

uint64_t destroy for PromptCompletionEventCandidateModeration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PromptCompletionEventCandidateModeration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptCompletionEventCandidateModeration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptCompletionEventCandidateModeration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PromptCompletionEventCandidateModeration()
{
  return &type metadata for PromptCompletionEventCandidateModeration;
}

uint64_t destroy for PromptCompletionEventCandidateTextDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    return outlined consume of Data._Representation(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for PromptCompletionEventCandidateTextDelta(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  int v5 = (uint64_t *)(a2 + 56);
  unint64_t v6 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    outlined copy of Data._Representation(*v5, v6);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = v6;
  }
  return a1;
}

void *assignWithCopy for PromptCompletionEventCandidateTextDelta(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 7;
  unint64_t v5 = a2[8];
  if (a1[8] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      uint64_t v8 = a1[7];
      unint64_t v9 = a1[8];
      a1[7] = v7;
      a1[8] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 7));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 7) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[7] = v6;
  a1[8] = v5;
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PromptCompletionEventCandidateTextDelta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(a2 + 56);
  unint64_t v7 = *(void *)(a1 + 64);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 64);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *v6;
      *(void *)(a1 + 64) = v8;
      outlined consume of Data._Representation(v9, v7);
      return a1;
    }
    outlined destroy of Data(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventCandidateTextDelta(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventCandidateTextDelta(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletionEventCandidateTextDelta()
{
  return &type metadata for PromptCompletionEventCandidateTextDelta;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletionEventCandidateAnnotation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    uint64_t *v3 = *a2;
    long long v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    a1[4] = a2[4];
    uint64_t v7 = *(int *)(a3 + 28);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(uint64_t *)((char *)a1 + v7) = *(uint64_t *)((char *)a2 + v7);
    uint64_t v10 = *(int *)(type metadata accessor for PromptCompletion.Annotation(0) + 20);
    uint64_t v11 = &v8[v10];
    uint64_t v12 = &v9[v10];
    type metadata accessor for PromptCompletion.Annotation.Type(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      uint64_t v15 = *((void *)v12 + 1);
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = v15;
      uint64_t v16 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      char v17 = &v11[v16];
      unint64_t v18 = &v12[v16];
      uint64_t v19 = type metadata accessor for URL();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v20(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for PromptCompletionEventCandidateAnnotation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for PromptCompletion.Annotation(0) + 20);
  type metadata accessor for PromptCompletion.Annotation.Type(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 += *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v6 = type metadata accessor for URL();
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void *initializeWithCopy for PromptCompletionEventCandidateAnnotation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = *(int *)(type metadata accessor for PromptCompletion.Annotation(0) + 20);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  type metadata accessor for PromptCompletion.Annotation.Type(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    uint64_t v13 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v13;
    uint64_t v14 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v15 = &v10[v14];
    uint64_t v16 = &v11[v14];
    uint64_t v17 = type metadata accessor for URL();
    unint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for PromptCompletionEventCandidateAnnotation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for PromptCompletion.Annotation(0);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = &v7[v10];
    uint64_t v12 = &v8[v10];
    outlined destroy of PromptCompletion.Annotation.Type((uint64_t)v11, type metadata accessor for PromptCompletion.Annotation.Type);
    type metadata accessor for PromptCompletion.Annotation.Type(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      uint64_t v14 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v15 = &v11[v14];
      uint64_t v16 = &v12[v14];
      uint64_t v17 = type metadata accessor for URL();
      unint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for PromptCompletionEventCandidateAnnotation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  uint64_t v8 = *(int *)(type metadata accessor for PromptCompletion.Annotation(0) + 20);
  uint64_t v9 = (_OWORD *)(v6 + v8);
  uint64_t v10 = (_OWORD *)(v7 + v8);
  type metadata accessor for PromptCompletion.Annotation.Type(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    uint64_t v12 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v13 = (char *)v9 + v12;
    uint64_t v14 = (char *)v10 + v12;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for PromptCompletionEventCandidateAnnotation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for PromptCompletion.Annotation(0);
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v13 = &v9[v12];
    uint64_t v14 = &v10[v12];
    outlined destroy of PromptCompletion.Annotation.Type((uint64_t)v13, type metadata accessor for PromptCompletion.Annotation.Type);
    type metadata accessor for PromptCompletion.Annotation.Type(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      uint64_t v16 = *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
      uint64_t v17 = &v13[v16];
      unint64_t v18 = &v14[v16];
      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventCandidateAnnotation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7F5FAC);
}

uint64_t sub_25F7F5FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for PromptCompletion.Annotation(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventCandidateAnnotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7F6070);
}

uint64_t sub_25F7F6070(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for PromptCompletion.Annotation(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PromptCompletionEventCandidateAnnotation()
{
  uint64_t result = type metadata accessor for PromptCompletion.Annotation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for PromptCompletionEventCandidateToolCallDelta(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    return outlined consume of Data._Representation(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for PromptCompletionEventCandidateToolCallDelta(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = a2 + 10;
  unint64_t v9 = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v9;
  }
  return a1;
}

void *assignWithCopy for PromptCompletionEventCandidateToolCallDelta(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 10;
  unint64_t v5 = a2[11];
  if (a1[11] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      uint64_t v8 = a1[10];
      unint64_t v9 = a1[11];
      a1[10] = v7;
      a1[11] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 10));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[10] = v6;
  a1[11] = v5;
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void *assignWithTake for PromptCompletionEventCandidateToolCallDelta(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  unint64_t v9 = a2 + 10;
  unint64_t v10 = a1[11];
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = a2[11];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = a1[10];
      a1[10] = *v9;
      a1[11] = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 10));
  }
  *((_OWORD *)a1 + 5) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventCandidateToolCallDelta(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventCandidateToolCallDelta(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletionEventCandidateToolCallDelta()
{
  return &type metadata for PromptCompletionEventCandidateToolCallDelta;
}

uint64_t destroy for PromptCompletionEventCandidateImageGeneration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  return outlined consume of Data._Representation(v2, v3);
}

void *initializeWithCopy for PromptCompletionEventCandidateImageGeneration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  unint64_t v6 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v5, v6);
  a1[5] = v5;
  a1[6] = v6;
  return a1;
}

void *assignWithCopy for PromptCompletionEventCandidateImageGeneration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v5 = a2[5];
  unint64_t v4 = a2[6];
  outlined copy of Data._Representation(v5, v4);
  uint64_t v6 = a1[5];
  unint64_t v7 = a1[6];
  a1[5] = v5;
  a1[6] = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t assignWithTake for PromptCompletionEventCandidateImageGeneration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v6;
  outlined consume of Data._Representation(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventCandidateImageGeneration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventCandidateImageGeneration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletionEventCandidateImageGeneration()
{
  return &type metadata for PromptCompletionEventCandidateImageGeneration;
}

uint64_t destroy for PromptCompletionEventCandidateFinished(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[5] >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  return outlined consume of Data._Representation(v2, v3);
}

void *initializeWithCopy for PromptCompletionEventCandidateFinished(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2 + 4;
  unint64_t v7 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >= 3)
  {
    a1[4] = *v6;
    a1[5] = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)v6;
  }
  uint64_t v9 = a2[6];
  unint64_t v8 = a2[7];
  outlined copy of Data._Representation(v9, v8);
  a1[6] = v9;
  a1[7] = v8;
  return a1;
}

void *assignWithCopy for PromptCompletionEventCandidateFinished(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[5];
  if (a1[5] >= 3uLL)
  {
    if (v4 >= 3)
    {
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String((uint64_t)(a1 + 4));
    goto LABEL_6;
  }
  if (v4 < 3)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    goto LABEL_8;
  }
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
LABEL_8:
  uint64_t v6 = a2[6];
  unint64_t v5 = a2[7];
  outlined copy of Data._Representation(v6, v5);
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[7];
  a1[6] = v6;
  a1[7] = v5;
  outlined consume of Data._Representation(v7, v8);
  return a1;
}

void *assignWithTake for PromptCompletionEventCandidateFinished(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(a2 + 32);
  if (a1[5] >= 3uLL)
  {
    unint64_t v7 = *(void *)(a2 + 40);
    if (v7 >= 3)
    {
      a1[4] = *v6;
      a1[5] = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String((uint64_t)(a1 + 4));
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v6;
LABEL_6:
  uint64_t v8 = a1[6];
  unint64_t v9 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for PromptCompletionEventCandidateFinished()
{
  return &type metadata for PromptCompletionEventCandidateFinished;
}

uint64_t initializeWithCopy for PromptCompletionEventUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptCompletionEventUsage(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for PromptCompletionEventUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PromptCompletionEventUsage()
{
  return &type metadata for PromptCompletionEventUsage;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletionEventRenderedPrompt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Prompt.Rendering();
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PromptCompletionEventRenderedPrompt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Prompt.Rendering();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for PromptCompletionEventRenderedPrompt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Prompt.Rendering();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for PromptCompletionEventRenderedPrompt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PromptCompletionEventRenderedPrompt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PromptCompletionEventRenderedPrompt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventRenderedPrompt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25F7F6F54);
}

uint64_t sub_25F7F6F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Prompt.Rendering();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventRenderedPrompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25F7F7018);
}

uint64_t sub_25F7F7018(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Prompt.Rendering();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PromptCompletionEventRenderedPrompt()
{
  uint64_t result = type metadata accessor for Prompt.Rendering();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for PromptCompletionEventResponseMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  return outlined consume of Data._Representation(v2, v3);
}

void *initializeWithCopy for PromptCompletionEventResponseMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  return a1;
}

void *assignWithCopy for PromptCompletionEventResponseMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[2];
  unint64_t v4 = a2[3];
  outlined copy of Data._Representation(v5, v4);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  a1[2] = v5;
  a1[3] = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

void *assignWithTake for PromptCompletionEventResponseMetadata(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PromptCompletionEventResponseMetadata()
{
  return &type metadata for PromptCompletionEventResponseMetadata;
}

uint64_t outlined destroy of PromptCompletion.Annotation.Type(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy15TokenGeneration16PromptCompletionV10ModerationV8CategoryVAJ11ProbabilityOG_SS_AF0H8Envelope33_FCE651B3B8F212418F5C81F0A4785E63LLV0jK0Ots5NeverOTg504_s15d12Generation16fg3V10h2V8i5VAE11j19OSSAA0E8Envelope33_lmnopqrst39LLV0gH0OIgnnod_AG3key_AI5valuetSS_ANts5U131OIegnrzr_TR04_s15a12Generation18e11Envelope33_ijklmnopq16LLV7sealingAdA16cd18V0C0V_tcfcSS_AD011g7D0OtAI8F14V_AI0Q0OtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v28;
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  int64_t v23 = v1;
  int v24 = v5;
  uint64_t v25 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v26 = v7;
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    char v27 = *(unsigned char *)(*(void *)(a1 + 56) + v6);
    unint64_t v15 = *(void *)(v28 + 16);
    unint64_t v16 = *(void *)(v28 + 24);
    uint64_t result = swift_bridgeObjectRetain();
    if (v15 >= v16 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
    }
    *(void *)(v28 + 16) = v15 + 1;
    uint64_t v17 = v28 + 24 * v15;
    *(void *)(v17 + 32) = v13;
    *(void *)(v17 + 40) = v14;
    *(unsigned char *)(v17 + 48) = v27;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v18 = *(void *)(v25 + 8 * v11);
    if ((v18 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v24;
    if (*(_DWORD *)(a1 + 36) != v24) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      int64_t v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v23;
    }
    else
    {
      unint64_t v20 = v11 + 1;
      unint64_t v21 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v23;
      if (v11 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            unint64_t v22 = *(void *)(a1 + 80 + 8 * v11++);
            if (v22)
            {
              unint64_t v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v26 + 1;
    uint64_t v6 = v9;
    if (v26 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS15TokenGeneration18ModerationEnvelope33_FCE651B3B8F212418F5C81F0A4785E63LLV011ProbabilityG0OG_AF16PromptCompletionV0F0V8CategoryV_AP0Q0Ots5NeverOTg506_sSS15d12Generation18f11Envelope33_hijklmnop6LLV011q7D0OAA16rs6V0C0V8t38VAJ0N0OIggyrr_SS3key_AF5valuetAL_ANts5u35OIegnrzr_TR04_s15a12Generation18c11Y79_efghijklm14LLV6unsealAA16op10V0C0VyFAI8q6V_AI11N18OtSS_AD0rD0OtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v28;
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  int64_t v23 = v1;
  int v24 = v5;
  uint64_t v25 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v26 = v7;
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    char v27 = *(unsigned char *)(*(void *)(a1 + 56) + v6);
    unint64_t v15 = *(void *)(v28 + 16);
    unint64_t v16 = *(void *)(v28 + 24);
    uint64_t result = swift_bridgeObjectRetain();
    if (v15 >= v16 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
    }
    *(void *)(v28 + 16) = v15 + 1;
    uint64_t v17 = v28 + 24 * v15;
    *(void *)(v17 + 32) = v13;
    *(void *)(v17 + 40) = v14;
    *(unsigned char *)(v17 + 48) = v27;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v18 = *(void *)(v25 + 8 * v11);
    if ((v18 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v24;
    if (*(_DWORD *)(a1 + 36) != v24) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      int64_t v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v23;
    }
    else
    {
      unint64_t v20 = v11 + 1;
      unint64_t v21 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v23;
      if (v11 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            unint64_t v22 = *(void *)(a1 + 80 + 8 * v11++);
            if (v22)
            {
              unint64_t v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v26 + 1;
    uint64_t v6 = v9;
    if (v26 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration0D0VG_SSs5NeverOTg504_s15D116Generation22CompletePromptResponseV6tokensACSayAA0A0VG_tcfcSSAFcfu_33_2c83176e6c929c34cc0288687e3e762dAFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = *(void *)(type metadata accessor for Token() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = Token.text.getter();
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t RegisterDocumentRequest.documents.getter()
{
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  unint64_t v21 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DocumentResourceEnvelope(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DocumentResource();
  uint64_t v7 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v0;
  int64_t v11 = *(void *)(*v0 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v19 = *(void *)(v4 + 72);
    uint64_t v14 = (void (**)(char *, char *, uint64_t))(v1 + 16);
    v18[1] = v10;
    v18[2] = v7 + 32;
    do
    {
      outlined init with copy of DocumentResourceEnvelope(v13, (uint64_t)v6, type metadata accessor for DocumentResourceEnvelope);
      (*v14)(v21, v6, v22);
      swift_bridgeObjectRetain();
      DocumentResource.init(_:_:_:)();
      outlined destroy of DocumentResourceEnvelope((uint64_t)v6, type metadata accessor for DocumentResourceEnvelope);
      uint64_t v12 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v23;
      }
      unint64_t v16 = *(void *)(v12 + 16);
      unint64_t v15 = *(void *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v12 = v23;
      }
      *(void *)(v12 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v16, v9, v20);
      uint64_t v23 = v12;
      v13 += v19;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t type metadata accessor for DocumentResourceEnvelope(uint64_t a1)
{
  return type metadata accessor for InferenceRequestInstrumentation(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentResourceEnvelope);
}

uint64_t RegisterDocumentRequest.metadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v8 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v7;
  a1[5] = v6;
  a1[6] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __swiftcall RegisterDocumentRequest.init(documents:metadata:)(TokenGeneration::RegisterDocumentRequest *__return_ptr retstr, Swift::OpaquePointer documents, TokenGeneration::RequestMetadata *metadata)
{
  uint64_t v56 = type metadata accessor for DocumentResource();
  uint64_t v6 = *(void *)(v56 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v56);
  uint64_t v53 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v55 = (char *)&v40 - v9;
  uint64_t v10 = type metadata accessor for DocumentResourceEnvelope(0);
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t countAndFlagsBits = metadata->invocationIdentifier._countAndFlagsBits;
  object = metadata->invocationIdentifier._object;
  uint64_t v47 = countAndFlagsBits;
  uint64_t v16 = metadata->functionIdentifier._countAndFlagsBits;
  uint64_t v44 = metadata->functionIdentifier._object;
  uint64_t v45 = v16;
  Swift::String_optional clientRequestIdentifier = metadata->clientRequestIdentifier;
  rawValue = metadata->userInfo._rawValue;
  int64_t v18 = *((void *)documents._rawValue + 2);
  if (v18)
  {
    uint64_t v41 = rawValue;
    uint64_t v43 = retstr;
    char v60 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v19 = v6 + 16;
    uint64_t v21 = *(unsigned __int8 *)(v19 + 64);
    char v42 = documents._rawValue;
    uint64_t v22 = (char *)documents._rawValue + ((v21 + 32) & ~v21);
    uint64_t v50 = *(void *)(v19 + 56);
    uint64_t v51 = v20;
    uint64_t v52 = v19;
    uint64_t v23 = (void (**)(char *, uint64_t))(v19 - 8);
    uint64_t v49 = v19 - 8;
    int v24 = v55;
    uint64_t v25 = v56;
    uint64_t v26 = v23;
    do
    {
      int64_t v59 = v18;
      char v27 = v51;
      v51(v24, v22, v25);
      uint64_t v28 = v53;
      v27(v53, v24, v25);
      uint64_t v29 = (uint64_t)v54;
      DocumentResource.url.getter();
      int v30 = DocumentResource.fileDescriptor.getter();
      uint64_t v31 = v58;
      *(_DWORD *)(v29 + *(int *)(v58 + 20)) = v30;
      uint64_t v32 = DocumentResource.metadata.getter();
      char v33 = *v26;
      (*v26)(v28, v25);
      *(void *)(v29 + *(int *)(v31 + 24)) = v32;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v29, (uint64_t)v14, type metadata accessor for DocumentResourceEnvelope);
      v33(v24, v25);
      unint64_t v34 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1);
        unint64_t v34 = v60;
      }
      unint64_t v36 = v34[2];
      unint64_t v35 = v34[3];
      int64_t v37 = v59;
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        unint64_t v34 = v60;
      }
      v34[2] = v36 + 1;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, (uint64_t)v34+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v36, type metadata accessor for DocumentResourceEnvelope);
      v22 += v50;
      int64_t v18 = v37 - 1;
    }
    while (v18);
    swift_bridgeObjectRelease();
    retstr = v43;
    rawValue = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v34 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v38 = v47;
  retstr->_documents._rawValue = v34;
  retstr->_metadata.invocationIdentifier._uint64_t countAndFlagsBits = v38;
  uint64_t v39 = v45;
  retstr->_metadata.invocationIdentifier._object = object;
  retstr->_metadata.functionIdentifier._uint64_t countAndFlagsBits = v39;
  retstr->_metadata.functionIdentifier._object = v44;
  retstr->_metadata.Swift::String_optional clientRequestIdentifier = clientRequestIdentifier;
  retstr->_metadata.userInfo._rawValue = rawValue;
}

uint64_t CompletePromptResponseElement.init(token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v2 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for PromptCompletionStreamElementEnvelope(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v34 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v33 - v12;
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.inference);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_25F79F000, v15, v16, "Metadata like candidateIdentifier will be bogus because a deprecated initializer is being used. Use init(element:) instead.", v17, 2u);
    MEMORY[0x261201C80](v17, -1, -1);
  }

  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v13, v7);
  UUID.init()();
  uint64_t v22 = UUID.uuidString.getter();
  uint64_t v24 = v23;
  v21(v11, v7);
  uint64_t v25 = v35;
  uint64_t v26 = Token.text.getter();
  uint64_t v28 = v27;
  v38[3] = &type metadata for PromptCompletionEventCandidateTextDelta;
  v38[4] = &protocol witness table for PromptCompletionEventCandidateTextDelta;
  uint64_t v29 = swift_allocObject();
  v38[0] = v29;
  *(void *)(v29 + 16) = v18;
  *(void *)(v29 + 24) = v20;
  *(void *)(v29 + 32) = v22;
  *(void *)(v29 + 40) = v24;
  *(void *)(v29 + 48) = 0;
  *(void *)(v29 + 56) = v26;
  *(void *)(v29 + 64) = v28;
  *(_OWORD *)(v29 + 72) = xmmword_25F91CC60;
  outlined init with copy of PromptCompletionEvent((uint64_t)v38, (uint64_t)v37);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(0, 0xF000000000000000);
  PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)((uint64_t)v37, v4);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
  uint64_t v30 = v34;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v4, v34, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(0, 0xF000000000000000);
  uint64_t v31 = type metadata accessor for Token();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v25, v31);
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v30, v36, type metadata accessor for PromptCompletionStreamElementEnvelope);
}

uint64_t CompletePromptResponseElement.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for PromptCompletionStreamElementEnvelope(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of PromptCompletionEvent(a1, (uint64_t)v12);
  outlined init with copy of PromptCompletionEvent((uint64_t)v12, (uint64_t)v11);
  PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)((uint64_t)v11, v6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v6, (uint64_t)v9, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, a2, type metadata accessor for PromptCompletionStreamElementEnvelope);
}

uint64_t CountTokensRequest.prompt.getter@<X0>(uint64_t a1@<X8>)
{
  return PromptEnvelope.unseal()(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t CompletePromptTemplateRequest.prompt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[1];
  if (v3)
  {
    PromptEnvelope.unseal()(*v1, v3, v1[2], v1[3], a1);
    uint64_t v4 = type metadata accessor for Prompt();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for Prompt();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a1;
    uint64_t v8 = 1;
  }
  return v5(v7, v8, 1, v6);
}

uint64_t CompletePromptRequest.prompt.getter@<X0>(uint64_t a1@<X8>)
{
  return PromptEnvelope.unseal()(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = type metadata accessor for Prompt.ImageAttachment();
  uint64_t v4 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  char v42 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
  MEMORY[0x270FA5388](v48);
  uint64_t v50 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Prompt.Turn.Segment(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v44 = (uint64_t *)((char *)&v39 - v10);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v39 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v49 = (uint64_t)&v39 - v16;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v17 || a1 == a2) {
    return 1;
  }
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v45 = *(void *)(v14 + 72);
  uint64_t v46 = v7;
  uint64_t v39 = (void (**)(char *, uint64_t *, uint64_t))(v4 + 32);
  uint64_t v40 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v41 = v15;
  uint64_t v47 = v13;
  while (1)
  {
    uint64_t v21 = v49;
    outlined init with copy of DocumentResourceEnvelope(a1 + v18, v49, type metadata accessor for Prompt.Turn.Segment);
    outlined init with copy of DocumentResourceEnvelope(a2 + v18, (uint64_t)v13, type metadata accessor for Prompt.Turn.Segment);
    uint64_t v22 = (uint64_t *)(v50 + *(int *)(v48 + 48));
    outlined init with copy of DocumentResourceEnvelope(v21, v50, type metadata accessor for Prompt.Turn.Segment);
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v13, (uint64_t)v22, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() != 1) {
      break;
    }
    uint64_t v23 = v41;
    outlined init with copy of DocumentResourceEnvelope(v50, v41, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*v40)(v23, v43);
      goto LABEL_21;
    }
    uint64_t v19 = a2;
    uint64_t v24 = v42;
    uint64_t v25 = v43;
    (*v39)(v42, v22, v43);
    char v26 = MEMORY[0x2611FF3F0](v23, v24);
    uint64_t v27 = *v40;
    (*v40)((uint64_t)v24, v25);
    v27(v23, v25);
    if ((v26 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_6:
    outlined destroy of DocumentResourceEnvelope(v50, type metadata accessor for Prompt.Turn.Segment);
    uint64_t v20 = (uint64_t)v47;
    outlined destroy of DocumentResourceEnvelope((uint64_t)v47, type metadata accessor for Prompt.Turn.Segment);
    outlined destroy of DocumentResourceEnvelope(v49, type metadata accessor for Prompt.Turn.Segment);
    v18 += v45;
    --v17;
    a2 = v19;
    uint64_t v13 = (char *)v20;
    if (!v17) {
      return 1;
    }
  }
  uint64_t v28 = a2;
  uint64_t v29 = a1;
  uint64_t v30 = v28;
  uint64_t v31 = v44;
  outlined init with copy of DocumentResourceEnvelope(v50, (uint64_t)v44, type metadata accessor for Prompt.Turn.Segment);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v34 = *v22;
    uint64_t v35 = v22[1];
    if (v32 == v34 && v33 == v35)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v19 = v30;
      a1 = v29;
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = v30;
      a1 = v29;
      if ((v37 & 1) == 0)
      {
LABEL_17:
        outlined destroy of DocumentResourceEnvelope(v50, type metadata accessor for Prompt.Turn.Segment);
        uint64_t v13 = v47;
        goto LABEL_22;
      }
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
LABEL_21:
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v50, &demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
LABEL_22:
  outlined destroy of DocumentResourceEnvelope((uint64_t)v13, type metadata accessor for Prompt.Turn.Segment);
  outlined destroy of DocumentResourceEnvelope(v49, type metadata accessor for Prompt.Turn.Segment);
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void __s1[4];

  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v39 = 0;
  while (2)
  {
    uint64_t v4 = *(void *)(a1 + v3 + 48);
    uint64_t v5 = *(void *)(a1 + v3 + 64);
    uint64_t v6 = *(void *)(a1 + v3 + 88);
    uint64_t v40 = *(void *)(a1 + v3 + 80);
    uint64_t v7 = *(void *)(a2 + v3 + 48);
    uint64_t v45 = *(void *)(a2 + v3 + 56);
    uint64_t v46 = *(void *)(a1 + v3 + 56);
    uint64_t v8 = *(void *)(a2 + v3 + 64);
    uint64_t v43 = *(void *)(a1 + v3 + 72);
    uint64_t v44 = *(void *)(a2 + v3 + 72);
    uint64_t v9 = *(void *)(a2 + v3 + 80);
    uint64_t v10 = *(void *)(a2 + v3 + 88);
    if ((*(void *)(a1 + v3 + 32) != *(void *)(a2 + v3 + 32)
       || *(void *)(a1 + v3 + 40) != *(void *)(a2 + v3 + 40))
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v4 != v7 || v46 != v45) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v5 != v8 || v43 != v44) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      return 0;
    }
    if (v6 >> 60 == 15)
    {
      if (v10 >> 60 != 15) {
        goto LABEL_52;
      }
      goto LABEL_6;
    }
    if (v10 >> 60 == 15)
    {
LABEL_52:
      outlined copy of Data?(v40, v6);
      outlined copy of Data?(v9, v10);
      outlined consume of Data?(v40, v6);
      uint64_t v36 = v9;
      char v37 = v10;
      goto LABEL_54;
    }
    uint64_t v11 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        uint64_t v12 = v40;
        if (__OFSUB__(HIDWORD(v40), v40))
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
        }
        uint64_t v11 = HIDWORD(v40) - (int)v40;
LABEL_23:
        outlined copy of Data._Representation(v12, v6);
        break;
      case 2uLL:
        uint64_t v12 = v40;
        uint64_t v14 = *(void *)(v40 + 16);
        uint64_t v13 = *(void *)(v40 + 24);
        uint64_t v11 = v13 - v14;
        if (!__OFSUB__(v13, v14)) {
          goto LABEL_23;
        }
        goto LABEL_56;
      case 3uLL:
        break;
      default:
        uint64_t v11 = BYTE6(v6);
        break;
    }
    switch(v10 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(v9) - v9;
        if (__OFSUB__(HIDWORD(v9), v9)) {
          goto LABEL_57;
        }
        uint64_t v15 = (int)v15;
LABEL_29:
        if (v11 == v15)
        {
          if (v11 < 1)
          {
LABEL_34:
            outlined consume of Data?(v40, v6);
          }
          else
          {
            switch(v6 >> 62)
            {
              case 1uLL:
                if (v40 >> 32 < (int)v40) {
                  goto LABEL_59;
                }
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_39;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v40, v24)) {
                  goto LABEL_61;
                }
                v23 += (int)v40 - v24;
LABEL_39:
                __DataStorage._length.getter();
                uint64_t v25 = v9;
                char v26 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)(v23, v26, v10, (char *)__s1);
                outlined consume of Data?(v40, v6);
                outlined consume of Data?(v25, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v25, v10);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v40, v6);
                if ((__s1[0] & 1) == 0) {
                  return 0;
                }
                goto LABEL_49;
              case 2uLL:
                uint64_t v27 = *(void *)(v40 + 16);
                uint64_t v38 = *(void *)(v40 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                swift_retain();
                swift_retain();
                uint64_t v28 = __DataStorage._bytes.getter();
                if (!v28) {
                  goto LABEL_44;
                }
                uint64_t v29 = __DataStorage._offset.getter();
                if (__OFSUB__(v27, v29)) {
                  goto LABEL_62;
                }
                v28 += v27 - v29;
LABEL_44:
                if (__OFSUB__(v38, v27)) {
                  goto LABEL_60;
                }
                __DataStorage._length.getter();
                uint64_t v30 = v28;
                uint64_t v31 = v9;
                uint64_t v32 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)(v30, v32, v10, (char *)__s1);
                swift_release();
                swift_release();
                outlined consume of Data?(v31, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v31, v10);
                LOBYTE(v31) = __s1[0];
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v40, v6);
                if ((v31 & 1) == 0) {
                  return 0;
                }
LABEL_49:
                uint64_t v39 = v21;
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v33 = v9;
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                uint64_t v34 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v34, v10, &v47);
                outlined consume of Data?(v33, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v33, v10);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v22 = v40;
                goto LABEL_48;
              default:
                __s1[0] = v40;
                LOWORD(__s1[1]) = v6;
                BYTE2(__s1[1]) = BYTE2(v6);
                BYTE3(__s1[1]) = BYTE3(v6);
                BYTE4(__s1[1]) = BYTE4(v6);
                BYTE5(__s1[1]) = BYTE5(v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v19 = v9;
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                uint64_t v20 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v20, v10, &v47);
                outlined consume of Data?(v19, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v19, v10);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v22 = v40;
LABEL_48:
                outlined consume of Data?(v22, v6);
                if (v47) {
                  goto LABEL_49;
                }
                return 0;
            }
          }
LABEL_6:
          v3 += 64;
          if (!--v2) {
            return 1;
          }
          continue;
        }
LABEL_53:
        uint64_t v36 = v40;
        char v37 = v6;
LABEL_54:
        outlined consume of Data?(v36, v37);
        return 0;
      case 2uLL:
        uint64_t v17 = *(void *)(v9 + 16);
        uint64_t v16 = *(void *)(v9 + 24);
        unint64_t v18 = __OFSUB__(v16, v17);
        uint64_t v15 = v16 - v17;
        if (!v18) {
          goto LABEL_29;
        }
        goto LABEL_58;
      case 3uLL:
        if (!v11) {
          goto LABEL_34;
        }
        goto LABEL_53;
      default:
        uint64_t v15 = BYTE6(v10);
        goto LABEL_29;
    }
  }
}

{
  uint64_t v2;
  int v5;
  int v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *i;
  int v13;
  int v14;
  char v16;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 48);
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40))
  {
    if (v5 == v6) {
      goto LABEL_13;
    }
    return 0;
  }
  uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v8 & 1) != 0 && ((v5 ^ v6) & 1) == 0)
  {
LABEL_13:
    uint64_t v10 = v2 - 1;
    if (v10)
    {
      uint64_t v11 = (unsigned __int8 *)(a2 + 72);
      for (uint64_t i = (unsigned __int8 *)(a1 + 72); ; i += 24)
      {
        uint64_t v13 = *i;
        uint64_t v14 = *v11;
        if (*((void *)i - 2) == *((void *)v11 - 2) && *((void *)i - 1) == *((void *)v11 - 1))
        {
          if (v13 != v14) {
            return 0;
          }
        }
        else
        {
          uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if (v16 & 1) == 0 || ((v13 ^ v14)) {
            return result;
          }
        }
        v11 += 24;
        uint64_t result = 1;
        if (!--v10) {
          return result;
        }
      }
    }
    return 1;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  size_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const void *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  size_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t result;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  size_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  size_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  int64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  size_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  int64_t v224;
  uint64_t v225;
  size_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  int64_t v246;
  uint64_t v247;
  size_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t (*v288)(uint64_t);
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  void *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  void *v323;
  uint64_t __s2;
  __int16 v325;
  char v326;
  char v327;
  char v328;
  char v329;
  void __s1[2];
  uint64_t v331;
  char v332;
  uint64_t v333;

  v331 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v310 = (uint64_t)&v295 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v309 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v309);
  uint64_t v7 = (char *)&v295 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v317 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  uint64_t v8 = MEMORY[0x270FA5388](v317);
  int64_t v311 = (uint64_t *)((char *)&v295 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  unint64_t v312 = (uint64_t *)((char *)&v295 - v10);
  v316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnnotationEnvelope.CitationTypeEnvelope, AnnotationEnvelope.CitationTypeEnvelope));
  MEMORY[0x270FA5388](v316);
  v320 = (uint64_t)&v295 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = type metadata accessor for AnnotationEnvelope(0);
  uint64_t v12 = MEMORY[0x270FA5388](v315);
  MEMORY[0x270FA5388](v12);
  v323 = (uint64_t *)((char *)&v295 - v15);
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v16 || a1 == a2) {
    return 1;
  }
  uint64_t v301 = v13;
  uint64_t v17 = 0;
  uint64_t v295 = 0;
  uint64_t v308 = v14;
  unint64_t v18 = a1 + 32;
  unint64_t v305 = a2 + 32;
  uint64_t v299 = v16;
  unint64_t v304 = a1 + 32;
  uint64_t v296 = v7;
  while (1)
  {
    uint64_t v19 = v18 + 48 * v17;
    uint64_t v21 = *(void *)v19;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    uint64_t v319 = *(void *)(v19 + 24);
    v321 = *(void *)(v19 + 32);
    v322 = v22;
    uint64_t v23 = *(unsigned __int8 *)(v19 + 40);
    uint64_t v24 = v305 + 48 * v17;
    char v26 = *(void *)v24;
    uint64_t v25 = *(void *)(v24 + 8);
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v28 = *(void *)(v24 + 24);
    uint64_t v29 = *(void *)(v24 + 32);
    uint64_t v30 = *(unsigned char *)(v24 + 40);
    uint64_t v318 = v20;
    uint64_t v313 = v26;
    long long v314 = v25;
    LODWORD(v307) = v23;
    if ((v23 & 1) == 0) {
      break;
    }
    if ((v30 & 1) == 0) {
      return 0;
    }
    uint64_t v31 = v20 >> 62;
    uint64_t v32 = 0;
    switch(v20 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v21), v21)) {
          goto LABEL_202;
        }
        uint64_t v32 = HIDWORD(v21) - (int)v21;
LABEL_42:
        outlined copy of Data._Representation(v21, v20);
        uint64_t v25 = v314;
LABEL_43:
        char v76 = v25 >> 62;
        switch(v25 >> 62)
        {
          case 1uLL:
            LODWORD(v77) = HIDWORD(v313) - v313;
            if (__OFSUB__(HIDWORD(v313), v313)) {
              goto LABEL_204;
            }
            unint64_t v77 = (int)v77;
LABEL_48:
            if (v32 != v77) {
              goto LABEL_197;
            }
            if (v32 < 1) {
              goto LABEL_96;
            }
            break;
          case 2uLL:
            BOOL v79 = *(void *)(v313 + 16);
            uint64_t v78 = *(void *)(v313 + 24);
            uint64_t v80 = __OFSUB__(v78, v79);
            unint64_t v77 = v78 - v79;
            if (!v80) {
              goto LABEL_48;
            }
            goto LABEL_205;
          case 3uLL:
            if (v32) {
              goto LABEL_197;
            }
            goto LABEL_96;
          default:
            unint64_t v77 = BYTE6(v25);
            goto LABEL_48;
        }
        break;
      case 2uLL:
        unint64_t v75 = *(void *)(v21 + 16);
        char v74 = *(void *)(v21 + 24);
        uint64_t v32 = v74 - v75;
        if (!__OFSUB__(v74, v75)) {
          goto LABEL_42;
        }
        goto LABEL_203;
      case 3uLL:
        goto LABEL_43;
      default:
        uint64_t v32 = BYTE6(v20);
        goto LABEL_43;
    }
    unint64_t v81 = v31;
    unint64_t v18 = v304;
    switch(v81)
    {
      case 1:
        v307 = v27;
        uint64_t v303 = v29;
        if ((int)v21 > v21 >> 32) {
          goto LABEL_206;
        }
        char v98 = v28;
        unint64_t v99 = v318;
        char v100 = v313;
        BOOL v101 = v314;
        outlined copy of Data._Representation(v313, v314);
        uint64_t v102 = v100;
        uint64_t v103 = v98;
        outlined copy of PromptCompletion.Content(v102, v101, v307, v98, v303, 1);
        outlined copy of PromptCompletion.Content(v21, v99, v322, v319, v321, 1);
        uint64_t v104 = __DataStorage._bytes.getter();
        if (v104)
        {
          uint64_t v105 = v104;
          uint64_t v106 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v21, v106)) {
            goto LABEL_212;
          }
          long long v107 = (const void *)(v105 + (int)v21 - v106);
        }
        else
        {
          long long v107 = 0;
        }
        long long v154 = v313;
        __DataStorage._length.getter();
        uint64_t v306 = v21;
        if (v76)
        {
          if (v76 == 1)
          {
            uint64_t v176 = (int)v154;
            uint64_t v80 = __OFSUB__(v154 >> 32, (int)v154);
            uint64_t v177 = (v154 >> 32) - (int)v154;
            if (v177 < 0 != v80) {
              goto LABEL_221;
            }
            swift_retain();
            v178 = (char *)__DataStorage._bytes.getter();
            if (v178)
            {
              unint64_t v179 = __DataStorage._offset.getter();
              if (__OFSUB__(v176, v179)) {
                goto LABEL_230;
              }
              v178 += v176 - v179;
            }
            unint64_t v180 = __DataStorage._length.getter();
            if (v180 >= v177) {
              uint64_t v181 = v177;
            }
            else {
              uint64_t v181 = v180;
            }
            if (!v107) {
              goto LABEL_237;
            }
            uint64_t v182 = v313;
            uint64_t v183 = v307;
            if (!v178) {
              goto LABEL_238;
            }
            LODWORD(v298) = memcmp(v107, v178, v181);
            v184 = v314;
            uint64_t v185 = v303;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v182, v314, v183, v103, v303, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v182, v184, v183, v103, v185, 1);
            v186 = v21;
            uint64_t v188 = v318;
            v187 = v319;
            uint64_t v189 = v322;
            v190 = v103;
            uint64_t v191 = v182;
            v192 = v321;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v186, v318, v322, v319, v321, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v191, v184, v183, v190, v185, 1);
            v193 = v306;
            unint64_t v194 = v188;
            unint64_t v195 = v189;
            uint64_t v196 = v187;
          }
          else
          {
            uint64_t v241 = v154;
            uint64_t v242 = *(void *)(v154 + 16);
            unint64_t v243 = *(void *)(v241 + 24);
            swift_retain();
            swift_retain();
            v244 = (char *)__DataStorage._bytes.getter();
            if (v244)
            {
              uint64_t v245 = __DataStorage._offset.getter();
              if (__OFSUB__(v242, v245)) {
                goto LABEL_229;
              }
              v244 += v242 - v245;
            }
            uint64_t v80 = __OFSUB__(v243, v242);
            uint64_t v246 = v243 - v242;
            if (v80) {
              goto LABEL_222;
            }
            v247 = __DataStorage._length.getter();
            if (v247 >= v246) {
              uint64_t v248 = v246;
            }
            else {
              uint64_t v248 = v247;
            }
            if (!v107) {
              goto LABEL_245;
            }
            uint64_t v249 = v313;
            if (!v244) {
              goto LABEL_246;
            }
            LODWORD(v298) = memcmp(v107, v244, v248);
            swift_release();
            swift_release();
            v250 = v314;
            v251 = v307;
            uint64_t v252 = v303;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v249, v314, v307, v103, v303, 1);
            uint64_t v253 = v21;
            v255 = v318;
            uint64_t v254 = v319;
            v256 = v322;
            uint64_t v257 = v103;
            uint64_t v258 = v249;
            v192 = v321;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v253, v318, v322, v319, v321, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v258, v250, v251, v257, v252, 1);
            v193 = v306;
            unint64_t v194 = v255;
            unint64_t v195 = v256;
            uint64_t v196 = v254;
          }
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v193, v194, v195, v196, v192, 1);
          uint64_t v16 = v299;
          unint64_t v18 = v304;
          uint64_t v214 = (uint64_t *)&v332;
LABEL_172:
          if (*((_DWORD *)v214 - 64)) {
            return 0;
          }
        }
        else
        {
          __s1[0] = v154;
          uint64_t v215 = v314;
          LODWORD(__s1[1]) = v314;
          WORD2(__s1[1]) = WORD2(v314);
          uint64_t v216 = v307;
          if (!v107) {
            goto LABEL_244;
          }
          LODWORD(v313) = memcmp(v107, __s1, BYTE6(v314));
          unint64_t v217 = v303;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v154, v215, v216, v103, v303, 1);
          uint64_t v218 = v21;
          char v114 = v103;
LABEL_159:
          uint64_t v236 = v318;
          uint64_t v235 = v319;
          unint64_t v237 = v216;
          v238 = v322;
          uint64_t v239 = v154;
          v240 = v321;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v218, v318, v322, v319, v321, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v239, v215, v237, v114, v217, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v306, v236, v238, v235, v240, 1);
          uint64_t v16 = v299;
          unint64_t v18 = v304;
          if (v313) {
            return 0;
          }
        }
        break;
      case 2:
        BOOL v108 = v318;
        v298 = v318 & 0x3FFFFFFFFFFFFFFFLL;
        v297 = *(void *)(v21 + 16);
        Class v109 = v25;
        id v110 = v27;
        unint64_t v111 = v28;
        uint64_t v112 = v313;
        outlined copy of Data._Representation(v313, v25);
        v307 = v110;
        uint64_t v113 = v110;
        char v114 = v111;
        uint64_t v303 = v29;
        outlined copy of PromptCompletion.Content(v112, v109, v113, v111, v29, 1);
        outlined copy of PromptCompletion.Content(v21, v108, v322, v319, v321, 1);
        swift_retain();
        swift_retain();
        uint64_t v115 = __DataStorage._bytes.getter();
        if (v115)
        {
          uint64_t v116 = v115;
          uint64_t v117 = __DataStorage._offset.getter();
          if (__OFSUB__(v297, v117)) {
            goto LABEL_211;
          }
          uint64_t v118 = (const void *)(v116 + v297 - v117);
        }
        else
        {
          uint64_t v118 = 0;
        }
        long long v154 = v313;
        __DataStorage._length.getter();
        uint64_t v306 = v21;
        if (!v76)
        {
          __s1[0] = v154;
          uint64_t v215 = v314;
          LODWORD(__s1[1]) = v314;
          WORD2(__s1[1]) = WORD2(v314);
          uint64_t v216 = v307;
          if (!v118) {
            goto LABEL_241;
          }
          LODWORD(v313) = memcmp(v118, __s1, BYTE6(v314));
          swift_release();
          swift_release();
          unint64_t v217 = v303;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v154, v215, v216, v114, v303, 1);
          uint64_t v218 = v21;
          goto LABEL_159;
        }
        if (v76 == 1)
        {
          long long v155 = (int)v154;
          uint64_t v80 = __OFSUB__(v154 >> 32, (int)v154);
          unint64_t v156 = (v154 >> 32) - (int)v154;
          if (v156 < 0 != v80) {
            goto LABEL_217;
          }
          swift_retain();
          unint64_t v157 = (char *)__DataStorage._bytes.getter();
          if (v157)
          {
            unint64_t v158 = __DataStorage._offset.getter();
            if (__OFSUB__(v155, v158)) {
              goto LABEL_228;
            }
            v157 += v155 - v158;
          }
          unint64_t v159 = __DataStorage._length.getter();
          if (v159 >= v156) {
            uint64_t v160 = v156;
          }
          else {
            uint64_t v160 = v159;
          }
          if (!v118) {
            goto LABEL_235;
          }
          unint64_t v161 = v313;
          uint64_t v162 = v307;
          if (!v157) {
            goto LABEL_236;
          }
          LODWORD(v297) = memcmp(v118, v157, v160);
          unint64_t v163 = v314;
          long long v164 = v303;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v161, v314, v162, v114, v303, 1);
          swift_release();
          swift_release();
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v161, v163, v162, v114, v164, 1);
          long long v165 = v21;
          unint64_t v167 = v318;
          unint64_t v166 = v319;
          unint64_t v168 = v162;
          unint64_t v169 = v322;
          uint64_t v170 = v161;
          unint64_t v171 = v321;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v165, v318, v322, v319, v321, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v170, v163, v168, v114, v164, 1);
          unint64_t v172 = v306;
          uint64_t v173 = v167;
          uint64_t v174 = v169;
          uint64_t v175 = v166;
        }
        else
        {
          v219 = v154;
          v220 = *(void *)(v154 + 16);
          unint64_t v221 = *(void *)(v219 + 24);
          swift_retain();
          swift_retain();
          unint64_t v222 = (char *)__DataStorage._bytes.getter();
          if (v222)
          {
            v223 = __DataStorage._offset.getter();
            if (__OFSUB__(v220, v223)) {
              goto LABEL_227;
            }
            v222 += v220 - v223;
          }
          uint64_t v80 = __OFSUB__(v221, v220);
          uint64_t v224 = v221 - v220;
          if (v80) {
            goto LABEL_220;
          }
          uint64_t v225 = __DataStorage._length.getter();
          if (v225 >= v224) {
            uint64_t v226 = v224;
          }
          else {
            uint64_t v226 = v225;
          }
          if (!v118) {
            goto LABEL_242;
          }
          unint64_t v227 = v313;
          if (!v222) {
            goto LABEL_243;
          }
          LODWORD(v297) = memcmp(v118, v222, v226);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v228 = v314;
          unint64_t v229 = v307;
          uint64_t v230 = v303;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v227, v314, v307, v111, v303, 1);
          uint64_t v231 = v21;
          uint64_t v233 = v318;
          uint64_t v232 = v319;
          unint64_t v171 = v321;
          uint64_t v234 = v322;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v231, v318, v322, v319, v321, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v227, v228, v229, v114, v230, 1);
          unint64_t v172 = v306;
          uint64_t v173 = v233;
          uint64_t v174 = v234;
          uint64_t v175 = v232;
        }
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v172, v173, v174, v175, v171, 1);
        uint64_t v16 = v299;
        unint64_t v18 = v304;
        uint64_t v214 = &v331;
        goto LABEL_172;
      case 3:
        memset(__s1, 0, 14);
        if (!v76) {
          goto LABEL_100;
        }
        if (v76 == 1)
        {
          uint64_t v119 = (int)v313;
          uint64_t v120 = (v313 >> 32) - (int)v313;
          if (v313 >> 32 < (int)v313) {
            goto LABEL_214;
          }
          uint64_t v121 = v27;
          outlined copy of PromptCompletion.Content(v313, v25, v27, v28, v29, 1);
          outlined copy of PromptCompletion.Content(v21, v318, v322, v319, v321, 1);
          os_log_type_t v122 = __DataStorage._bytes.getter();
          if (!v122) {
            goto LABEL_234;
          }
          uint64_t v123 = v122;
          uint64_t v124 = __DataStorage._offset.getter();
          uint64_t v80 = __OFSUB__(v119, v124);
          uint64_t v125 = v119 - v124;
          if (v80) {
            goto LABEL_216;
          }
          unint64_t v126 = __DataStorage._length.getter();
          if (v126 >= v120) {
            unint64_t v127 = v120;
          }
          else {
            unint64_t v127 = v126;
          }
          LODWORD(v307) = memcmp(__s1, (const void *)(v123 + v125), v127);
          uint64_t v128 = v318;
          uint64_t v129 = v319;
          uint64_t v130 = v321;
          uint64_t v131 = v322;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v322, v319, v321, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v121, v28, v29, 1);
          uint64_t v132 = v21;
          uint64_t v133 = v128;
          uint64_t v134 = v131;
          unint64_t v135 = v129;
        }
        else
        {
          char v204 = *(void *)(v313 + 16);
          unint64_t v205 = *(void *)(v313 + 24);
          v199 = v27;
          v302 = v28;
          outlined copy of PromptCompletion.Content(v313, v25, v27, v28, v29, 1);
          outlined copy of PromptCompletion.Content(v21, v318, v322, v319, v321, 1);
          swift_retain();
          swift_retain();
          uint64_t v200 = (char *)__DataStorage._bytes.getter();
          if (v200)
          {
            uint64_t v206 = __DataStorage._offset.getter();
            if (__OFSUB__(v204, v206)) {
              goto LABEL_226;
            }
            v200 += v204 - v206;
          }
          uint64_t v80 = __OFSUB__(v205, v204);
          v202 = v205 - v204;
          if (v80) {
            goto LABEL_219;
          }
          unint64_t v203 = __DataStorage._length.getter();
          if (!v200) {
            goto LABEL_240;
          }
LABEL_139:
          if (v203 >= v202) {
            uint64_t v207 = v202;
          }
          else {
            uint64_t v207 = v203;
          }
          LODWORD(v307) = memcmp(__s1, v200, v207);
          swift_release();
          uint64_t v208 = v313;
          swift_release();
          uint64_t v209 = v21;
          uint64_t v210 = v21;
          uint64_t v212 = v318;
          uint64_t v211 = v319;
          uint64_t v130 = v321;
          uint64_t v213 = v322;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v209, v318, v322, v319, v321, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v208, v314, v199, v302, v29, 1);
          uint64_t v132 = v210;
          uint64_t v133 = v212;
          uint64_t v134 = v213;
          unint64_t v135 = v211;
        }
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v132, v133, v134, v135, v130, 1);
        uint64_t v16 = v299;
        unint64_t v18 = v304;
        uint64_t v214 = &v333;
        goto LABEL_172;
      default:
        __s1[0] = v21;
        LODWORD(__s1[1]) = v318;
        WORD2(__s1[1]) = WORD2(v318);
        if (!v76)
        {
LABEL_100:
          __s2 = v313;
          v325 = v25;
          v326 = BYTE2(v25);
          v327 = BYTE3(v25);
          v328 = BYTE4(v25);
          v329 = BYTE5(v25);
          unint64_t v153 = memcmp(__s1, &__s2, BYTE6(v25));
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v322, v319, v321, 1);
          if (v153) {
            return 0;
          }
          break;
        }
        v302 = v28;
        unint64_t v82 = v313;
        if (v76 == 1)
        {
          char v83 = (v313 >> 32) - (int)v313;
          if (v313 >> 32 < (int)v313) {
            goto LABEL_213;
          }
          char v84 = v27;
          outlined copy of PromptCompletion.Content(v313, v25, v27, v302, v29, 1);
          outlined copy of PromptCompletion.Content(v21, v318, v322, v319, v321, 1);
          char v85 = __DataStorage._bytes.getter();
          if (!v85)
          {
            __DataStorage._length.getter();
            __break(1u);
LABEL_234:
            __DataStorage._length.getter();
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
            JUMPOUT(0x25F7FB368);
          }
          uint64_t v86 = v85;
          uint64_t v87 = __DataStorage._offset.getter();
          uint64_t v88 = (int)v82 - v87;
          if (__OFSUB__((int)v82, v87)) {
            goto LABEL_215;
          }
          uint64_t v89 = __DataStorage._length.getter();
          if (v89 >= v83) {
            uint64_t v90 = (v82 >> 32) - (int)v82;
          }
          else {
            uint64_t v90 = v89;
          }
          uint64_t v91 = memcmp(__s1, (const void *)(v86 + v88), v90);
          char v92 = v21;
          uint64_t v93 = v21;
          uint64_t v95 = v318;
          char v94 = v319;
          BOOL v96 = v321;
          uint64_t v97 = v322;
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v92, v318, v322, v319, v321, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v84, v302, v29, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v93, v95, v97, v94, v96, 1);
          uint64_t v16 = v299;
          unint64_t v18 = v304;
          if (v91) {
            return 0;
          }
          break;
        }
        v197 = *(void *)(v313 + 16);
        uint64_t v198 = *(void *)(v313 + 24);
        v199 = v27;
        outlined copy of PromptCompletion.Content(v313, v25, v27, v302, v29, 1);
        outlined copy of PromptCompletion.Content(v21, v318, v322, v319, v321, 1);
        swift_retain();
        swift_retain();
        uint64_t v200 = (char *)__DataStorage._bytes.getter();
        if (v200)
        {
          v201 = __DataStorage._offset.getter();
          if (__OFSUB__(v197, v201)) {
            goto LABEL_225;
          }
          v200 += v197 - v201;
        }
        uint64_t v80 = __OFSUB__(v198, v197);
        v202 = v198 - v197;
        if (v80) {
          goto LABEL_218;
        }
        unint64_t v203 = __DataStorage._length.getter();
        if (!v200) {
          goto LABEL_239;
        }
        goto LABEL_139;
    }
LABEL_98:
    ++v17;
    uint64_t result = 1;
    if (v17 == v16) {
      return result;
    }
  }
  if (v30) {
    return 0;
  }
  uint64_t v33 = v21 == v26 && v20 == v25;
  if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v306 = v21;
  uint64_t v34 = *(void *)(v322 + 16);
  if (v34 != *(void *)(v27 + 16)) {
    return 0;
  }
  v300 = v17;
  uint64_t v303 = v29;
  v302 = v28;
  if (!v34)
  {
    char v60 = v314;
    outlined copy of PromptCompletion.Content(v26, v314, v27, v28, v29, 0);
    uint64_t v61 = v29;
    char v62 = v306;
    uint64_t v63 = v20;
    BOOL v64 = v20;
    uint64_t v40 = v321;
    uint64_t v65 = v322;
    unint64_t v66 = v26;
    char v67 = v319;
    outlined copy of PromptCompletion.Content(v306, v63, v322, v319, v321, 0);
    outlined copy of PromptCompletion.Content(v66, v60, v27, v28, v61, 0);
    outlined copy of PromptCompletion.Content(v62, v64, v65, v67, v40, 0);
    goto LABEL_33;
  }
  v298 = v34;
  v297 = *(unsigned __int8 *)(v301 + 80);
  uint64_t v35 = v314;
  outlined copy of PromptCompletion.Content(v26, v314, v27, v28, v29, 0);
  uint64_t v36 = v27;
  char v37 = v306;
  uint64_t v38 = v20;
  uint64_t v40 = v321;
  uint64_t v39 = v322;
  uint64_t v41 = v20;
  char v42 = v319;
  outlined copy of PromptCompletion.Content(v306, v38, v322, v319, v321, 0);
  outlined copy of PromptCompletion.Content(v26, v35, v36, v28, v29, 0);
  uint64_t v43 = v37;
  uint64_t v27 = v36;
  outlined copy of PromptCompletion.Content(v43, v41, v39, v42, v40, 0);
  if (v39 == v36)
  {
LABEL_33:
    if (v40 >> 60 == 15)
    {
      unint64_t v68 = v303;
      uint64_t v69 = v299;
      uint64_t v17 = v300;
      uint64_t v70 = v318;
      uint64_t v21 = v306;
      uint64_t v71 = v302;
      if (v303 >> 60 != 15) {
        goto LABEL_199;
      }
LABEL_95:
      uint64_t v151 = v313;
      long long v150 = v314;
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v27, v71, v68, 0);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v70, v322, v319, v321, 0);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v151, v150, v27, v71, v68, 0);
      uint64_t v16 = v69;
LABEL_96:
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v322, v319, v321, v307);
    }
    else
    {
      unint64_t v68 = v303;
      uint64_t v69 = v299;
      uint64_t v17 = v300;
      uint64_t v70 = v318;
      uint64_t v21 = v306;
      uint64_t v71 = v302;
      if (v303 >> 60 == 15)
      {
LABEL_199:
        unint64_t v289 = v319;
        v293 = v321;
        outlined copy of Data?(v319, v321);
        outlined copy of Data?(v71, v68);
        outlined consume of Data?(v289, v293);
        uint64_t v294 = v71;
        uint64_t v40 = v293;
        outlined consume of Data?(v294, v68);
        goto LABEL_196;
      }
      uint64_t v72 = v321 >> 62;
      uint64_t v73 = 0;
      switch(v321 >> 62)
      {
        case 1uLL:
          uint64_t v136 = v319;
          if (__OFSUB__(HIDWORD(v319), v319)) {
            goto LABEL_207;
          }
          uint64_t v73 = HIDWORD(v319) - (int)v319;
LABEL_82:
          outlined copy of Data._Representation(v136, v321);
          break;
        case 2uLL:
          uint64_t v136 = v319;
          unint64_t v138 = *(void *)(v319 + 16);
          uint64_t v137 = *(void *)(v319 + 24);
          uint64_t v73 = v137 - v138;
          if (!__OFSUB__(v137, v138)) {
            goto LABEL_82;
          }
          goto LABEL_208;
        case 3uLL:
          break;
        default:
          uint64_t v73 = BYTE6(v321);
          break;
      }
      switch(v68 >> 62)
      {
        case 1uLL:
          LODWORD(v139) = HIDWORD(v71) - v71;
          if (__OFSUB__(HIDWORD(v71), v71)) {
            goto LABEL_209;
          }
          uint64_t v139 = (int)v139;
LABEL_88:
          if (v73 != v139)
          {
LABEL_200:
            unint64_t v289 = v319;
            uint64_t v40 = v321;
            outlined consume of Data?(v319, v321);
            uint64_t v70 = v318;
            goto LABEL_196;
          }
          if (v73 < 1)
          {
LABEL_94:
            outlined consume of Data?(v319, v321);
            uint64_t v70 = v318;
            goto LABEL_95;
          }
          switch((int)v72)
          {
            case 1:
              v307 = v27;
              uint64_t v259 = (int)v319;
              if (v319 >> 32 < (int)v319) {
                goto LABEL_223;
              }
              outlined copy of Data?(v319, v321);
              outlined copy of Data?(v71, v68);
              uint64_t v260 = __DataStorage._bytes.getter();
              if (!v260) {
                goto LABEL_178;
              }
              v261 = __DataStorage._offset.getter();
              if (__OFSUB__(v259, v261)) {
                goto LABEL_232;
              }
              v260 += v259 - v261;
LABEL_178:
              __DataStorage._length.getter();
              uint64_t v262 = v260;
              uint64_t v263 = v295;
              closure #1 in static Data.== infix(_:_:)(v262, v71, v68, (char *)__s1);
              uint64_t v295 = v263;
              v264 = v319;
              uint64_t v265 = v321;
              outlined consume of Data?(v319, v321);
              outlined consume of Data?(v71, v68);
              outlined consume of Data?(v264, v265);
              v266 = v313;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v307, v71, v68, 0);
              uint64_t v267 = v322;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v322, v264, v265, 0);
              LODWORD(v298) = LOBYTE(__s1[0]);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v266, v314, v307, v71, v68, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v267, v264, v265, 0);
              if ((v298 & 1) == 0) {
                return 0;
              }
              goto LABEL_187;
            case 2:
              v307 = v27;
              v268 = *(void *)(v319 + 16);
              uint64_t v269 = *(void *)(v319 + 24);
              outlined copy of Data?(v71, v68);
              swift_retain();
              swift_retain();
              unint64_t v270 = __DataStorage._bytes.getter();
              if (!v270) {
                goto LABEL_183;
              }
              v271 = __DataStorage._offset.getter();
              if (__OFSUB__(v268, v271)) {
                goto LABEL_231;
              }
              v270 += v268 - v271;
LABEL_183:
              if (__OFSUB__(v269, v268)) {
                goto LABEL_224;
              }
              __DataStorage._length.getter();
              uint64_t v272 = v270;
              v273 = v295;
              closure #1 in static Data.== infix(_:_:)(v272, v71, v68, (char *)__s1);
              uint64_t v295 = v273;
              swift_release();
              uint64_t v274 = v319;
              swift_release();
              outlined consume of Data?(v71, v68);
              outlined consume of Data?(v274, v321);
              v276 = v313;
              uint64_t v275 = v314;
              v277 = v307;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v307, v71, v68, 0);
              LODWORD(v298) = LOBYTE(__s1[0]);
              uint64_t v278 = v306;
              uint64_t v279 = v318;
              v280 = v322;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v306, v318, v322, v274, v321, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v276, v275, v277, v302, v68, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v278, v279, v280, v274, v321, 0);
              if ((v298 & 1) == 0) {
                return 0;
              }
LABEL_187:
              uint64_t v16 = v69;
              break;
            case 3:
              memset(__s1, 0, 14);
              outlined copy of Data._Representation(v71, v68);
              uint64_t v281 = v295;
              closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v71, v68, (char *)&__s2);
              uint64_t v295 = v281;
              outlined consume of Data?(v71, v68);
              uint64_t v282 = v319;
              outlined consume of Data?(v319, v321);
              os_log_type_t v284 = v313;
              v283 = v314;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v27, v71, v68, 0);
              v285 = v322;
              uint64_t v286 = v282;
              v287 = v321;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v322, v286, v321, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v284, v283, v27, v71, v68, 0);
              LOBYTE(v283) = __s2;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v285, v319, v287, 0);
              if (v283) {
                goto LABEL_187;
              }
              return 0;
            default:
              uint64_t v142 = v319;
              __s1[0] = v319;
              uint64_t v143 = v321;
              LODWORD(__s1[1]) = v321;
              WORD2(__s1[1]) = WORD2(v321);
              v307 = v27;
              outlined copy of Data._Representation(v71, v68);
              char v144 = v295;
              closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v71, v68, (char *)&__s2);
              uint64_t v295 = v144;
              outlined consume of Data?(v71, v68);
              outlined consume of Data?(v142, v143);
              uint64_t v146 = v313;
              uint64_t v145 = v314;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v307, v71, v68, 0);
              unint64_t v147 = v318;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v322, v142, v321, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v146, v145, v307, v71, v68, 0);
              unint64_t v148 = v21;
              unint64_t v149 = __s2;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v148, v147, v322, v142, v321, 0);
              if ((v149 & 1) == 0) {
                return 0;
              }
              goto LABEL_187;
          }
          break;
        case 2uLL:
          id v141 = *(void *)(v71 + 16);
          uint64_t v140 = *(void *)(v71 + 24);
          uint64_t v80 = __OFSUB__(v140, v141);
          uint64_t v139 = v140 - v141;
          if (!v80) {
            goto LABEL_88;
          }
          goto LABEL_210;
        case 3uLL:
          if (!v73) {
            goto LABEL_94;
          }
          goto LABEL_200;
        default:
          uint64_t v139 = BYTE6(v68);
          goto LABEL_88;
      }
    }
    unint64_t v18 = v304;
    goto LABEL_98;
  }
  uint64_t v44 = 0;
  uint64_t v45 = (v297 + 32) & ~v297;
  uint64_t v46 = *(void *)(v301 + 72);
  uint64_t v47 = v296;
  uint64_t v48 = v308;
  uint64_t v49 = v298;
  while (1)
  {
    outlined init with copy of DocumentResourceEnvelope(v322 + v45, (uint64_t)v323, type metadata accessor for AnnotationEnvelope);
    if (v44 >= *(void *)(v27 + 16))
    {
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
    }
    outlined init with copy of DocumentResourceEnvelope(v27 + v45, (uint64_t)v48, type metadata accessor for AnnotationEnvelope);
    if (*v323 != *v48) {
      goto LABEL_195;
    }
    uint64_t v50 = v47;
    uint64_t v51 = *(int *)(v315 + 20);
    uint64_t v52 = (uint64_t)v48 + v51;
    uint64_t v53 = v320;
    uint64_t v54 = v320 + *(int *)(v316 + 48);
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v323 + v51, v320, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    outlined init with copy of DocumentResourceEnvelope(v52, v54, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    if (swift_getEnumCaseMultiPayload() != 1) {
      break;
    }
    uint64_t v55 = v53;
    uint64_t v56 = v311;
    outlined init with copy of DocumentResourceEnvelope(v55, (uint64_t)v311, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      unint64_t v288 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope;
LABEL_193:
      outlined destroy of DocumentResourceEnvelope((uint64_t)v56, v288);
      uint64_t v48 = v308;
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v320, &demangling cache variable for type metadata for (AnnotationEnvelope.CitationTypeEnvelope, AnnotationEnvelope.CitationTypeEnvelope));
      goto LABEL_194;
    }
    uint64_t v57 = v310;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v54, v310, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    uint64_t v58 = static DocumentResourceIdentifier.== infix(_:_:)();
    outlined destroy of DocumentResourceEnvelope(v57, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v56, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    uint64_t v47 = v50;
    uint64_t v48 = v308;
    if ((v58 & 1) == 0) {
      goto LABEL_190;
    }
LABEL_19:
    ++v44;
    outlined destroy of DocumentResourceEnvelope(v320, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v48, type metadata accessor for AnnotationEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v323, type metadata accessor for AnnotationEnvelope);
    v45 += v46;
    uint64_t v40 = v321;
    if (v49 == v44) {
      goto LABEL_33;
    }
  }
  int64_t v59 = v53;
  uint64_t v56 = v312;
  outlined init with copy of DocumentResourceEnvelope(v59, (uint64_t)v312, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v288 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope;
    goto LABEL_193;
  }
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v54, (uint64_t)v47, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
  uint64_t v48 = v308;
  if (*v56 == *v47 && v56[1] == v47[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
    && (MEMORY[0x2611FEFF0]((char *)v56 + *(int *)(v309 + 20), (char *)v47 + *(int *)(v309 + 20)) & 1) != 0)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)v47, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v56, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
    goto LABEL_19;
  }
  outlined destroy of DocumentResourceEnvelope((uint64_t)v47, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
  outlined destroy of DocumentResourceEnvelope((uint64_t)v56, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
LABEL_190:
  outlined destroy of DocumentResourceEnvelope(v320, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
LABEL_194:
  uint64_t v40 = v321;
LABEL_195:
  outlined destroy of DocumentResourceEnvelope((uint64_t)v48, type metadata accessor for AnnotationEnvelope);
  outlined destroy of DocumentResourceEnvelope((uint64_t)v323, type metadata accessor for AnnotationEnvelope);
  uint64_t v70 = v318;
  unint64_t v289 = v319;
  uint64_t v21 = v306;
  unint64_t v68 = v303;
LABEL_196:
  uint64_t v291 = v313;
  unint64_t v290 = v314;
  v292 = v302;
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v313, v314, v27, v302, v68, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v70, v322, v289, v40, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v291, v290, v27, v292, v68, 0);
LABEL_197:
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v21, v318, v322, v319, v321, v307);
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void __s1[4];

  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v39 = 0;
  while (2)
  {
    uint64_t v4 = *(void *)(a1 + v3 + 48);
    uint64_t v5 = *(void *)(a1 + v3 + 64);
    uint64_t v6 = *(void *)(a1 + v3 + 88);
    uint64_t v40 = *(void *)(a1 + v3 + 80);
    uint64_t v7 = *(void *)(a2 + v3 + 48);
    uint64_t v45 = *(void *)(a2 + v3 + 56);
    uint64_t v46 = *(void *)(a1 + v3 + 56);
    uint64_t v8 = *(void *)(a2 + v3 + 64);
    uint64_t v43 = *(void *)(a1 + v3 + 72);
    uint64_t v44 = *(void *)(a2 + v3 + 72);
    uint64_t v9 = *(void *)(a2 + v3 + 80);
    uint64_t v10 = *(void *)(a2 + v3 + 88);
    if ((*(void *)(a1 + v3 + 32) != *(void *)(a2 + v3 + 32)
       || *(void *)(a1 + v3 + 40) != *(void *)(a2 + v3 + 40))
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v4 != v7 || v46 != v45) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v5 != v8 || v43 != v44) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      return 0;
    }
    if (v6 >> 60 == 15)
    {
      if (v10 >> 60 != 15) {
        goto LABEL_52;
      }
      goto LABEL_6;
    }
    if (v10 >> 60 == 15)
    {
LABEL_52:
      outlined copy of Data?(v40, v6);
      outlined copy of Data?(v9, v10);
      outlined consume of Data?(v40, v6);
      uint64_t v36 = v9;
      char v37 = v10;
      goto LABEL_54;
    }
    uint64_t v11 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        uint64_t v12 = v40;
        if (__OFSUB__(HIDWORD(v40), v40))
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
        }
        uint64_t v11 = HIDWORD(v40) - (int)v40;
LABEL_23:
        outlined copy of Data._Representation(v12, v6);
        break;
      case 2uLL:
        uint64_t v12 = v40;
        uint64_t v14 = *(void *)(v40 + 16);
        uint64_t v13 = *(void *)(v40 + 24);
        uint64_t v11 = v13 - v14;
        if (!__OFSUB__(v13, v14)) {
          goto LABEL_23;
        }
        goto LABEL_56;
      case 3uLL:
        break;
      default:
        uint64_t v11 = BYTE6(v6);
        break;
    }
    switch(v10 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(v9) - v9;
        if (__OFSUB__(HIDWORD(v9), v9)) {
          goto LABEL_57;
        }
        uint64_t v15 = (int)v15;
LABEL_29:
        if (v11 == v15)
        {
          if (v11 < 1)
          {
LABEL_34:
            outlined consume of Data?(v40, v6);
          }
          else
          {
            switch(v6 >> 62)
            {
              case 1uLL:
                if (v40 >> 32 < (int)v40) {
                  goto LABEL_59;
                }
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_39;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v40, v24)) {
                  goto LABEL_61;
                }
                v23 += (int)v40 - v24;
LABEL_39:
                __DataStorage._length.getter();
                uint64_t v25 = v9;
                char v26 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)(v23, v26, v10, (char *)__s1);
                outlined consume of Data?(v40, v6);
                outlined consume of Data?(v25, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v25, v10);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v40, v6);
                if ((__s1[0] & 1) == 0) {
                  return 0;
                }
                goto LABEL_49;
              case 2uLL:
                uint64_t v27 = *(void *)(v40 + 16);
                uint64_t v38 = *(void *)(v40 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                swift_retain();
                swift_retain();
                uint64_t v28 = __DataStorage._bytes.getter();
                if (!v28) {
                  goto LABEL_44;
                }
                uint64_t v29 = __DataStorage._offset.getter();
                if (__OFSUB__(v27, v29)) {
                  goto LABEL_62;
                }
                v28 += v27 - v29;
LABEL_44:
                if (__OFSUB__(v38, v27)) {
                  goto LABEL_60;
                }
                __DataStorage._length.getter();
                uint64_t v30 = v28;
                uint64_t v31 = v9;
                uint64_t v32 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)(v30, v32, v10, (char *)__s1);
                swift_release();
                swift_release();
                outlined consume of Data?(v31, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v31, v10);
                LOBYTE(v31) = __s1[0];
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v40, v6);
                if ((v31 & 1) == 0) {
                  return 0;
                }
LABEL_49:
                uint64_t v39 = v21;
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v33 = v9;
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                uint64_t v34 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v34, v10, &v47);
                outlined consume of Data?(v33, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v33, v10);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v22 = v40;
                goto LABEL_48;
              default:
                __s1[0] = v40;
                LOWORD(__s1[1]) = v6;
                BYTE2(__s1[1]) = BYTE2(v6);
                BYTE3(__s1[1]) = BYTE3(v6);
                BYTE4(__s1[1]) = BYTE4(v6);
                BYTE5(__s1[1]) = BYTE5(v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Data?(v40, v6);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v19 = v9;
                outlined copy of Data?(v9, v10);
                outlined copy of Data?(v9, v10);
                uint64_t v20 = v9;
                uint64_t v21 = v39;
                closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v20, v10, &v47);
                outlined consume of Data?(v19, v10);
                outlined consume of Data?(v40, v6);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of Data?(v19, v10);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v22 = v40;
LABEL_48:
                outlined consume of Data?(v22, v6);
                if (v47) {
                  goto LABEL_49;
                }
                return 0;
            }
          }
LABEL_6:
          v3 += 64;
          if (!--v2) {
            return 1;
          }
          continue;
        }
LABEL_53:
        uint64_t v36 = v40;
        char v37 = v6;
LABEL_54:
        outlined consume of Data?(v36, v37);
        return 0;
      case 2uLL:
        uint64_t v17 = *(void *)(v9 + 16);
        uint64_t v16 = *(void *)(v9 + 24);
        unint64_t v18 = __OFSUB__(v16, v17);
        uint64_t v15 = v16 - v17;
        if (!v18) {
          goto LABEL_29;
        }
        goto LABEL_58;
      case 3uLL:
        if (!v11) {
          goto LABEL_34;
        }
        goto LABEL_53;
      default:
        uint64_t v15 = BYTE6(v10);
        goto LABEL_29;
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v4 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v47 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v45);
  uint64_t v46 = (char **)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnnotationEnvelope.CitationTypeEnvelope, AnnotationEnvelope.CitationTypeEnvelope));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AnnotationEnvelope(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char **)((char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v23 = (char **)((char *)&v39 - v22);
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24 == *(void *)(a2 + 16))
  {
    uint64_t v39 = v10;
    uint64_t v40 = v13;
    uint64_t v48 = v7;
    if (!v24 || a1 == a2) {
      return 1;
    }
    uint64_t v43 = a2;
    uint64_t v44 = v20;
    uint64_t v25 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v41 = *(void *)(v21 + 72);
    char v42 = a1;
    char v26 = v12;
    uint64_t v27 = v40;
    while (1)
    {
      outlined init with copy of DocumentResourceEnvelope(a1 + v25, (uint64_t)v23, type metadata accessor for AnnotationEnvelope);
      outlined init with copy of DocumentResourceEnvelope(a2 + v25, (uint64_t)v19, type metadata accessor for AnnotationEnvelope);
      if (*v23 != *v19) {
        break;
      }
      uint64_t v28 = *(int *)(v44 + 20);
      uint64_t v29 = (uint64_t)v19 + v28;
      uint64_t v30 = (uint64_t)&v15[*(int *)(v27 + 48)];
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v23 + v28, (uint64_t)v15, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
      outlined init with copy of DocumentResourceEnvelope(v29, v30, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = (uint64_t)v39;
        outlined init with copy of DocumentResourceEnvelope((uint64_t)v15, (uint64_t)v39, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          char v37 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope;
          uint64_t v38 = v31;
LABEL_21:
          outlined destroy of DocumentResourceEnvelope(v38, v37);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, &demangling cache variable for type metadata for (AnnotationEnvelope.CitationTypeEnvelope, AnnotationEnvelope.CitationTypeEnvelope));
          break;
        }
        uint64_t v32 = v47;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v30, v47, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
        uint64_t v33 = static DocumentResourceIdentifier.== infix(_:_:)();
        outlined destroy of DocumentResourceEnvelope(v32, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
        uint64_t v34 = v31;
        uint64_t v27 = v40;
        outlined destroy of DocumentResourceEnvelope(v34, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
        a1 = v42;
        a2 = v43;
        if ((v33 & 1) == 0) {
          break;
        }
      }
      else
      {
        outlined init with copy of DocumentResourceEnvelope((uint64_t)v15, (uint64_t)v26, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          char v37 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope;
          uint64_t v38 = (uint64_t)v26;
          goto LABEL_21;
        }
        uint64_t v35 = v46;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v30, (uint64_t)v46, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
        if ((*v26 != *v35 || v26[1] != v35[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || (MEMORY[0x2611FEFF0]((char *)v26 + *(int *)(v45 + 20), (char *)v35 + *(int *)(v45 + 20)) & 1) == 0)
        {
          outlined destroy of DocumentResourceEnvelope((uint64_t)v35, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
          outlined destroy of DocumentResourceEnvelope((uint64_t)v26, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
          outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
          break;
        }
        outlined destroy of DocumentResourceEnvelope((uint64_t)v35, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v26, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
        a1 = v42;
        a2 = v43;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for AnnotationEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v23, type metadata accessor for AnnotationEnvelope);
      v25 += v41;
      if (!--v24) {
        return 1;
      }
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for AnnotationEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v23, type metadata accessor for AnnotationEnvelope);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (**v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  unsigned int v25;
  uint64_t v26;
  void *v27;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v30 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (void **)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ToolDescriptionEnvelope.ToolTypeEnvelope, ToolDescriptionEnvelope.ToolTypeEnvelope));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolDescriptionEnvelope(0) - 8;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20 != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v34 = v10;
  uint64_t v29 = v6;
  if (!v20 || a1 == a2) {
    return 1;
  }
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v31 = *(void *)(v17 + 72);
  uint64_t v22 = (uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  while (1)
  {
    outlined init with copy of DocumentResourceEnvelope(v33 + v21, (uint64_t)v19, type metadata accessor for ToolDescriptionEnvelope);
    outlined init with copy of DocumentResourceEnvelope(a2 + v21, (uint64_t)v16, type metadata accessor for ToolDescriptionEnvelope);
    uint64_t v23 = (uint64_t)&v12[*(int *)(v34 + 48)];
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v19, (uint64_t)v12, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v16, v23, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
    uint64_t v24 = *v22;
    uint64_t v25 = (*v22)(v12, 2, v4);
    if (!v25) {
      break;
    }
    if (v25 == 1)
    {
      if (v24((char *)v23, 2, v4) != 1) {
        goto LABEL_23;
      }
    }
    else if (v24((char *)v23, 2, v4) != 2)
    {
      goto LABEL_23;
    }
LABEL_6:
    outlined destroy of DocumentResourceEnvelope((uint64_t)v12, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v16, type metadata accessor for ToolDescriptionEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for ToolDescriptionEnvelope);
    a2 = v32;
    v21 += v31;
    if (!--v20) {
      return 1;
    }
  }
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v12, (uint64_t)v9, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  if (!v24((char *)v23, 2, v4))
  {
    char v26 = v23;
    uint64_t v27 = v29;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v26, (uint64_t)v29, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    if ((*v9 != *v27 || v9[1] != v27[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v9[2] != v27[2] || v9[3] != v27[3]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (static GenerationSchema.== infix(_:_:)() & 1) == 0)
    {
      outlined destroy of DocumentResourceEnvelope((uint64_t)v27, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v12, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      goto LABEL_24;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v27, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    goto LABEL_6;
  }
  outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
LABEL_23:
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for (ToolDescriptionEnvelope.ToolTypeEnvelope, ToolDescriptionEnvelope.ToolTypeEnvelope));
LABEL_24:
  outlined destroy of DocumentResourceEnvelope((uint64_t)v16, type metadata accessor for ToolDescriptionEnvelope);
  outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for ToolDescriptionEnvelope);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      uint64_t v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      uint64_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      uint64_t v30 = (void (**)(uint64_t, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        unint64_t v18 = a1;
        uint64_t v19 = v9;
        uint64_t v20 = v9;
        uint64_t v21 = v32;
        v32((uint64_t)v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
        uint64_t v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24((uint64_t)v20, v4);
        char v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  return v23 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int (**v21)(char *, uint64_t, uint64_t);
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  void (*v31)(uint64_t, uint64_t);
  void (**v33)(char *, uint64_t, uint64_t);
  unsigned int (**v34)(char *, uint64_t, uint64_t);
  char *v35;
  void (**v36)(uint64_t, uint64_t);
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x270FA5388](v44);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  uint64_t v13 = MEMORY[0x270FA5388](v43);
  uint64_t v15 = (void (***)(char *, uint64_t, uint64_t))((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  unint64_t v18 = (void (***)(char *, uint64_t, uint64_t))((char *)&v33 - v17);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 == *(void *)(a2 + 16))
  {
    if (!v19 || a1 == a2) {
      return 1;
    }
    char v37 = v10;
    uint64_t v41 = a2;
    char v42 = a1;
    uint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v40 = *(void *)(v16 + 72);
    uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v33 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v35 = v7;
    uint64_t v36 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    while (1)
    {
      outlined init with copy of DocumentResourceEnvelope(v42 + v20, (uint64_t)v18, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      outlined init with copy of DocumentResourceEnvelope(a2 + v20, (uint64_t)v15, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      uint64_t v22 = *v18 == *v15 && v18[1] == v15[1];
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v23 = v18[3];
      uint64_t v24 = v15[3];
      if (v23)
      {
        if (!v24 || (v18[2] != v15[2] || v23 != v24) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
      }
      else if (v24)
      {
        break;
      }
      if (v18[4] != v15[4] || v18[5] != v15[5]) {
        break;
      }
      uint64_t v25 = *(int *)(v43 + 32);
      char v26 = (uint64_t)v15 + v25;
      uint64_t v27 = (uint64_t)&v12[*(int *)(v44 + 48)];
      outlined init with copy of Prompt.Rendering?((uint64_t)v18 + v25, (uint64_t)v12, &demangling cache variable for type metadata for Locale?);
      outlined init with copy of Prompt.Rendering?(v26, v27, &demangling cache variable for type metadata for Locale?);
      uint64_t v28 = *v21;
      if ((*v21)(v12, 1, v4) == 1)
      {
        if (v28((char *)v27, 1, v4) != 1) {
          goto LABEL_28;
        }
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for Locale?);
      }
      else
      {
        uint64_t v39 = v19;
        uint64_t v29 = (uint64_t)v37;
        outlined init with copy of Prompt.Rendering?((uint64_t)v12, (uint64_t)v37, &demangling cache variable for type metadata for Locale?);
        if (v28((char *)v27, 1, v4) == 1)
        {
          (*v36)(v29, v4);
LABEL_28:
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for (Locale?, Locale?));
          break;
        }
        uint64_t v30 = v35;
        (*v33)(v35, v27, v4);
        lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
        uint64_t v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v31 = *v36;
        (*v36)((uint64_t)v30, v4);
        v31(v29, v4);
        outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v12, &demangling cache variable for type metadata for Locale?);
        uint64_t v21 = v34;
        uint64_t v19 = v39;
        if ((v38 & 1) == 0) {
          break;
        }
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      a2 = v41;
      v20 += v40;
      if (!--v19) {
        return 1;
      }
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
  }
  return 0;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  size_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  uint64_t result;
  char *v83;
  char *v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t __s2;
  __int16 v96;
  char v97;
  char v98;
  char v99;
  char v100;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (void *)(a2 + 64);
    uint64_t v4 = (void *)(a1 + 64);
    while (1)
    {
      if (*((unsigned __int8 *)v4 - 32) != *((unsigned __int8 *)v3 - 32)) {
        return 0;
      }
      uint64_t v7 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v9 = *v4;
      uint64_t v11 = *(v3 - 3);
      uint64_t v10 = *(v3 - 2);
      char v94 = *(v3 - 1);
      uint64_t v12 = *v3;
      v3 += 5;
      uint64_t v91 = v12;
      v4 += 5;
      uint64_t v13 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v7), v7))
          {
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
          }
          uint64_t v13 = HIDWORD(v7) - (int)v7;
LABEL_18:
          uint64_t v16 = v7;
          char v92 = v4;
          uint64_t v17 = v3;
          unint64_t v18 = v2;
          uint64_t v19 = v11;
          uint64_t v20 = v7;
          uint64_t v21 = v9;
          uint64_t v22 = v10;
          outlined copy of Data._Representation(v16, v6);
          uint64_t v10 = v22;
          uint64_t v9 = v21;
          uint64_t v7 = v20;
          uint64_t v11 = v19;
          uint64_t v2 = v18;
          uint64_t v3 = v17;
          uint64_t v4 = v92;
          break;
        case 2uLL:
          uint64_t v15 = *(void *)(v7 + 16);
          uint64_t v14 = *(void *)(v7 + 24);
          uint64_t v13 = v14 - v15;
          if (!__OFSUB__(v14, v15)) {
            goto LABEL_18;
          }
          goto LABEL_128;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v6);
          break;
      }
      uint64_t v93 = v8;
      uint64_t v23 = v10 >> 62;
      switch(v10 >> 62)
      {
        case 1uLL:
          LODWORD(v24) = HIDWORD(v11) - v11;
          if (__OFSUB__(HIDWORD(v11), v11)) {
            goto LABEL_129;
          }
          uint64_t v24 = (int)v24;
LABEL_24:
          if (v13 != v24)
          {
LABEL_124:
            outlined consume of Data._Representation(v7, v6);
            return 0;
          }
          if (v13 < 1)
          {
LABEL_6:
            outlined consume of Data._Representation(v7, v6);
            if (v93 != v94 || v9 != v91) {
              return 0;
            }
          }
          else
          {
            switch(v6 >> 62)
            {
              case 1uLL:
                uint64_t v89 = v9;
                if ((int)v7 > v7 >> 32) {
                  goto LABEL_131;
                }
                uint64_t v34 = v10;
                outlined copy of Data._Representation(v11, v10);
                outlined copy of Data._Representation(v7, v6);
                uint64_t v87 = v34;
                outlined copy of Data._Representation(v11, v34);
                uint64_t v35 = (char *)__DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_38;
                }
                uint64_t v36 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v7, v36)) {
                  goto LABEL_133;
                }
                v35 += (int)v7 - v36;
LABEL_38:
                __DataStorage._length.getter();
                if (v23)
                {
                  if (v23 == 1)
                  {
                    if (v11 >> 32 < (int)v11) {
                      goto LABEL_141;
                    }
                    swift_retain();
                    char v37 = (char *)__DataStorage._bytes.getter();
                    if (v37)
                    {
                      uint64_t v38 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v11, v38)) {
                        goto LABEL_149;
                      }
                      v37 += (int)v11 - v38;
                    }
                    uint64_t v39 = __DataStorage._length.getter();
                    if (v39 >= (v11 >> 32) - (int)v11) {
                      uint64_t v40 = (v11 >> 32) - (int)v11;
                    }
                    else {
                      uint64_t v40 = v39;
                    }
                    if (!v35) {
                      goto LABEL_151;
                    }
                    if (!v37) {
                      goto LABEL_152;
                    }
                    uint64_t v41 = memcmp(v35, v37, v40);
                    char v42 = v87;
                    outlined consume of Data._Representation(v11, v87);
                    uint64_t v43 = v11;
                  }
                  else
                  {
                    unint64_t v77 = *(void *)(v11 + 16);
                    char v85 = *(void **)(v11 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v78 = (char *)__DataStorage._bytes.getter();
                    if (v78)
                    {
                      BOOL v79 = __DataStorage._offset.getter();
                      if (__OFSUB__(v77, v79)) {
                        goto LABEL_148;
                      }
                      v78 += v77 - v79;
                    }
                    if (__OFSUB__(v85, v77)) {
                      goto LABEL_143;
                    }
                    uint64_t v80 = __DataStorage._length.getter();
                    if (v80 >= (uint64_t)v85 - v77) {
                      unint64_t v81 = (size_t)v85 - v77;
                    }
                    else {
                      unint64_t v81 = v80;
                    }
                    uint64_t v9 = v89;
                    if (!v35) {
                      goto LABEL_162;
                    }
                    if (!v78) {
                      goto LABEL_163;
                    }
                    uint64_t v41 = memcmp(v35, v78, v81);
LABEL_115:
                    swift_release();
                    swift_release();
                    uint64_t v43 = v11;
                    char v42 = v87;
                  }
                }
                else
                {
                  __s1[0] = v11;
                  char v42 = v87;
                  LODWORD(__s1[1]) = v87;
                  WORD2(__s1[1]) = WORD2(v87);
                  if (!v35) {
                    goto LABEL_161;
                  }
                  uint64_t v41 = memcmp(v35, __s1, BYTE6(v87));
                  uint64_t v43 = v11;
                }
LABEL_116:
                outlined consume of Data._Representation(v43, v42);
                outlined consume of Data._Representation(v7, v6);
                unint64_t v68 = v11;
                uint64_t v69 = v42;
LABEL_117:
                outlined consume of Data._Representation(v68, v69);
LABEL_118:
                outlined consume of Data._Representation(v7, v6);
LABEL_119:
                uint64_t result = 0;
                if (v41 || v93 != v94 || v9 != v91) {
                  return result;
                }
                break;
              case 2uLL:
                uint64_t v90 = v9;
                char v83 = *(char **)(v7 + 16);
                char v42 = v10;
                outlined copy of Data._Representation(v11, v10);
                outlined copy of Data._Representation(v7, v6);
                uint64_t v87 = v42;
                outlined copy of Data._Representation(v11, v42);
                swift_retain();
                swift_retain();
                uint64_t v44 = __DataStorage._bytes.getter();
                if (v44)
                {
                  uint64_t v45 = v44;
                  uint64_t v46 = __DataStorage._offset.getter();
                  if (__OFSUB__(v83, v46)) {
                    goto LABEL_132;
                  }
                  char v84 = &v83[v45 - v46];
                }
                else
                {
                  char v84 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v9 = v90;
                if (!v23)
                {
                  __s1[0] = v11;
                  LODWORD(__s1[1]) = v42;
                  WORD2(__s1[1]) = WORD2(v42);
                  if (!v84) {
                    goto LABEL_158;
                  }
                  uint64_t v41 = memcmp(v84, __s1, BYTE6(v42));
                  swift_release();
                  swift_release();
                  outlined consume of Data._Representation(v11, v42);
                  outlined consume of Data._Representation(v7, v6);
                  unint64_t v68 = v11;
                  uint64_t v69 = v42;
                  goto LABEL_117;
                }
                if (v23 == 1)
                {
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v52 = (char *)__DataStorage._bytes.getter();
                  if (v52)
                  {
                    uint64_t v53 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v11, v53)) {
                      goto LABEL_147;
                    }
                    v52 += (int)v11 - v53;
                  }
                  uint64_t v54 = __DataStorage._length.getter();
                  if (v54 >= (v11 >> 32) - (int)v11) {
                    uint64_t v55 = (v11 >> 32) - (int)v11;
                  }
                  else {
                    uint64_t v55 = v54;
                  }
                  if (!v84) {
                    goto LABEL_154;
                  }
                  uint64_t v9 = v90;
                  if (!v52) {
                    goto LABEL_155;
                  }
                  uint64_t v41 = memcmp(v84, v52, v55);
                  outlined consume of Data._Representation(v11, v42);
                  swift_release();
                  swift_release();
                  uint64_t v43 = v11;
                  goto LABEL_116;
                }
                uint64_t v70 = *(void *)(v11 + 16);
                uint64_t v71 = *(void *)(v11 + 24);
                swift_retain();
                swift_retain();
                uint64_t v72 = (char *)__DataStorage._bytes.getter();
                if (v72)
                {
                  uint64_t v73 = __DataStorage._offset.getter();
                  if (__OFSUB__(v70, v73)) {
                    goto LABEL_146;
                  }
                  v72 += v70 - v73;
                }
                uint64_t v27 = __OFSUB__(v71, v70);
                char v74 = v71 - v70;
                if (v27) {
                  goto LABEL_142;
                }
                unint64_t v75 = __DataStorage._length.getter();
                if (v75 >= v74) {
                  char v76 = v74;
                }
                else {
                  char v76 = v75;
                }
                uint64_t v9 = v90;
                if (!v84) {
                  goto LABEL_159;
                }
                if (!v72) {
                  goto LABEL_160;
                }
                uint64_t v41 = memcmp(v84, v72, v76);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v23) {
                  goto LABEL_62;
                }
                uint64_t v86 = v10;
                uint64_t v88 = v9;
                if (v23 == 1)
                {
                  uint64_t v28 = (v11 >> 32) - (int)v11;
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_135;
                  }
                  uint64_t v47 = v10;
                  outlined copy of Data._Representation(v7, v6);
                  outlined copy of Data._Representation(v11, v47);
                  uint64_t v48 = __DataStorage._bytes.getter();
                  if (!v48) {
                    goto LABEL_153;
                  }
                  uint64_t v31 = v48;
                  uint64_t v49 = __DataStorage._offset.getter();
                  uint64_t v33 = (int)v11 - v49;
                  if (__OFSUB__((int)v11, v49)) {
                    goto LABEL_140;
                  }
LABEL_58:
                  uint64_t v50 = __DataStorage._length.getter();
                  if (v50 >= v28) {
                    uint64_t v51 = v28;
                  }
                  else {
                    uint64_t v51 = v50;
                  }
                  uint64_t v41 = memcmp(__s1, (const void *)(v31 + v33), v51);
                  outlined consume of Data._Representation(v7, v6);
                  outlined consume of Data._Representation(v11, v86);
                  outlined consume of Data._Representation(v7, v6);
                  uint64_t v9 = v88;
                  goto LABEL_119;
                }
                uint64_t v63 = *(void *)(v11 + 16);
                BOOL v64 = *(void *)(v11 + 24);
                uint64_t v65 = v10;
                outlined copy of Data._Representation(v7, v6);
                outlined copy of Data._Representation(v11, v65);
                swift_retain();
                swift_retain();
                int64_t v59 = (char *)__DataStorage._bytes.getter();
                if (v59)
                {
                  unint64_t v66 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v66)) {
                    goto LABEL_145;
                  }
                  v59 += v63 - v66;
                }
                uint64_t v27 = __OFSUB__(v64, v63);
                uint64_t v61 = v64 - v63;
                if (v27) {
                  goto LABEL_138;
                }
                char v62 = __DataStorage._length.getter();
                uint64_t v9 = v88;
                if (!v59) {
                  goto LABEL_157;
                }
LABEL_87:
                if (v62 >= v61) {
                  char v67 = v61;
                }
                else {
                  char v67 = v62;
                }
                uint64_t v41 = memcmp(__s1, v59, v67);
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v7, v6);
                unint64_t v68 = v11;
                uint64_t v69 = v86;
                goto LABEL_117;
              default:
                __s1[0] = v7;
                LOWORD(__s1[1]) = v6;
                BYTE2(__s1[1]) = BYTE2(v6);
                BYTE3(__s1[1]) = BYTE3(v6);
                BYTE4(__s1[1]) = BYTE4(v6);
                BYTE5(__s1[1]) = BYTE5(v6);
                if (!v23)
                {
LABEL_62:
                  __s2 = v11;
                  BOOL v96 = v10;
                  uint64_t v97 = BYTE2(v10);
                  char v98 = BYTE3(v10);
                  unint64_t v99 = BYTE4(v10);
                  char v100 = BYTE5(v10);
                  uint64_t v41 = memcmp(__s1, &__s2, BYTE6(v10));
                  goto LABEL_118;
                }
                uint64_t v86 = v10;
                uint64_t v88 = v9;
                if (v23 == 1)
                {
                  uint64_t v28 = (v11 >> 32) - (int)v11;
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_134;
                  }
                  uint64_t v29 = v10;
                  outlined copy of Data._Representation(v7, v6);
                  outlined copy of Data._Representation(v11, v29);
                  uint64_t v30 = __DataStorage._bytes.getter();
                  if (!v30)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
LABEL_161:
                    __break(1u);
LABEL_162:
                    __break(1u);
LABEL_163:
                    __break(1u);
                    JUMPOUT(0x25F7FD8C4);
                  }
                  uint64_t v31 = v30;
                  uint64_t v32 = __DataStorage._offset.getter();
                  uint64_t v33 = (int)v11 - v32;
                  if (__OFSUB__((int)v11, v32)) {
                    goto LABEL_139;
                  }
                  goto LABEL_58;
                }
                uint64_t v56 = *(void *)(v11 + 16);
                uint64_t v57 = *(void *)(v11 + 24);
                uint64_t v58 = v10;
                outlined copy of Data._Representation(v7, v6);
                outlined copy of Data._Representation(v11, v58);
                swift_retain();
                swift_retain();
                int64_t v59 = (char *)__DataStorage._bytes.getter();
                if (v59)
                {
                  char v60 = __DataStorage._offset.getter();
                  if (__OFSUB__(v56, v60)) {
                    goto LABEL_144;
                  }
                  v59 += v56 - v60;
                }
                uint64_t v27 = __OFSUB__(v57, v56);
                uint64_t v61 = v57 - v56;
                if (v27) {
                  goto LABEL_137;
                }
                char v62 = __DataStorage._length.getter();
                uint64_t v9 = v88;
                if (!v59) {
                  goto LABEL_156;
                }
                goto LABEL_87;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          char v26 = *(void *)(v11 + 16);
          uint64_t v25 = *(void *)(v11 + 24);
          uint64_t v27 = __OFSUB__(v25, v26);
          uint64_t v24 = v25 - v26;
          if (!v27) {
            goto LABEL_24;
          }
          goto LABEL_130;
        case 3uLL:
          if (!v13) {
            goto LABEL_6;
          }
          goto LABEL_124;
        default:
          uint64_t v24 = BYTE6(v10);
          goto LABEL_24;
      }
    }
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for DocumentResourceEnvelope(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_15:
    uint64_t v15 = 0;
    return v15 & 1;
  }
  if (v11 && a1 != a2)
  {
    uint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = *(void *)(v8 + 72);
    uint64_t v14 = v11 - 1;
    while (1)
    {
      outlined init with copy of DocumentResourceEnvelope(a1 + v12, (uint64_t)v10, type metadata accessor for DocumentResourceEnvelope);
      outlined init with copy of DocumentResourceEnvelope(a2 + v12, (uint64_t)v7, type metadata accessor for DocumentResourceEnvelope);
      if ((MEMORY[0x2611FEFF0](v10, v7) & 1) == 0
        || *(_DWORD *)&v10[*(int *)(v4 + 20)] != *(_DWORD *)&v7[*(int *)(v4 + 20)])
      {
        break;
      }
      uint64_t v15 = specialized static Dictionary<>.== infix(_:_:)(*(void *)&v10[*(int *)(v4 + 24)], *(void *)&v7[*(int *)(v4 + 24)]);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for DocumentResourceEnvelope);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for DocumentResourceEnvelope);
      uint64_t v17 = v14-- != 0;
      if (v15)
      {
        v12 += v13;
        if (v17) {
          continue;
        }
      }
      return v15 & 1;
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for DocumentResourceEnvelope);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for DocumentResourceEnvelope);
    goto LABEL_15;
  }
  uint64_t v15 = 1;
  return v15 & 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  void __s1[5];

  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t v4 = (unint64_t *)(a2 + 80);
  while (1)
  {
    uint64_t v44 = v3;
    uint64_t v45 = v2;
    uint64_t v6 = *(v3 - 1);
    uint64_t v7 = *v3;
    uint64_t v8 = v3[2];
    uint64_t v9 = v4;
    uint64_t v10 = v3[3];
    uint64_t v11 = v3[4];
    uint64_t v12 = v3[5];
    uint64_t v13 = *(v9 - 5);
    uint64_t v53 = *(v9 - 6);
    uint64_t v54 = v3[1];
    uint64_t v15 = *(v9 - 4);
    uint64_t v14 = *(v9 - 3);
    uint64_t v55 = *(v9 - 2);
    uint64_t v16 = *v9;
    uint64_t v46 = *(v9 - 1);
    uint64_t v47 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v52 = v7;
    swift_bridgeObjectRetain();
    uint64_t v49 = v8;
    uint64_t v50 = v10;
    outlined copy of FinishReason(v8, v10);
    uint64_t v17 = v11;
    unint64_t v18 = v12;
    outlined copy of Data._Representation(v11, v12);
    uint64_t v51 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = v14;
    outlined copy of FinishReason(v14, v55);
    uint64_t v20 = v16;
    outlined copy of Data._Representation(v46, v16);
    if ((specialized static Array<A>.== infix(_:_:)(v6, v53) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(v52, v13) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v14, v55);
      outlined consume of Data._Representation(v46, v16);
      swift_bridgeObjectRelease();
      uint64_t v21 = v50;
      goto LABEL_67;
    }
    uint64_t v21 = v50;
    if (v54) {
      break;
    }
    uint64_t v22 = v47;
    char v26 = v17;
    if (v51)
    {
LABEL_65:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v19, v55);
      outlined consume of Data._Representation(v46, v20);
      swift_bridgeObjectRelease();
      unint64_t v18 = v12;
      goto LABEL_68;
    }
LABEL_16:
    if (v50)
    {
      unint64_t v18 = v12;
      if (v50 == 1)
      {
        if (v55 != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of FinishReason(v19, v55);
          outlined consume of Data._Representation(v46, v20);
          swift_bridgeObjectRelease();
          uint64_t v21 = 1;
          goto LABEL_68;
        }
      }
      else if (v50 == 2)
      {
        if (v55 != 2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of FinishReason(v19, v55);
          outlined consume of Data._Representation(v46, v20);
          swift_bridgeObjectRelease();
          uint64_t v21 = 2;
          goto LABEL_68;
        }
      }
      else if (v55 < 3 || (v49 != v19 || v50 != v55) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_62:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v19, v55);
        outlined consume of Data._Representation(v46, v20);
        swift_bridgeObjectRelease();
        goto LABEL_68;
      }
    }
    else
    {
      unint64_t v18 = v12;
      if (v55)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v19, v55);
        outlined consume of Data._Representation(v46, v20);
        swift_bridgeObjectRelease();
        uint64_t v21 = 0;
        goto LABEL_68;
      }
    }
    uint64_t v4 = v22 + 7;
    uint64_t v27 = 0;
    switch(v18 >> 62)
    {
      case 1uLL:
        LODWORD(v27) = HIDWORD(v26) - v26;
        if (__OFSUB__(HIDWORD(v26), v26))
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
        }
        uint64_t v27 = (int)v27;
LABEL_34:
        switch(v20 >> 62)
        {
          case 1uLL:
            LODWORD(v31) = HIDWORD(v46) - v46;
            if (__OFSUB__(HIDWORD(v46), v46)) {
              goto LABEL_74;
            }
            uint64_t v31 = (int)v31;
LABEL_41:
            if (v27 != v31) {
              goto LABEL_62;
            }
            if (v27 >= 1)
            {
              switch(v18 >> 62)
              {
                case 1uLL:
                  if (v26 >> 32 < (int)v26) {
                    goto LABEL_75;
                  }
                  outlined copy of Data._Representation(v26, v18);
                  uint64_t v39 = __DataStorage._bytes.getter();
                  if (v39)
                  {
                    uint64_t v40 = v39;
                    uint64_t v41 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v26, v41)) {
                      goto LABEL_78;
                    }
                    char v42 = v40 + (int)v26 - v41;
                  }
                  else
                  {
                    char v42 = 0;
                  }
                  __DataStorage._length.getter();
                  closure #1 in static Data.== infix(_:_:)(v42, v46, v20, (char *)__s1);
                  outlined consume of Data._Representation(v26, v12);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of FinishReason(v19, v55);
                  outlined consume of Data._Representation(v46, v20);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of FinishReason(v49, v50);
                  outlined consume of Data._Representation(v26, v12);
                  if ((__s1[0] & 1) == 0) {
                    return 0;
                  }
                  goto LABEL_8;
                case 2uLL:
                  uint64_t v34 = *(void *)(v26 + 16);
                  uint64_t v48 = *(void *)(v26 + 24);
                  uint64_t v43 = v26;
                  swift_retain();
                  swift_retain();
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (v35)
                  {
                    uint64_t v36 = v35;
                    char v37 = __DataStorage._offset.getter();
                    if (__OFSUB__(v34, v37)) {
                      goto LABEL_77;
                    }
                    uint64_t v38 = v36 + v34 - v37;
                  }
                  else
                  {
                    uint64_t v38 = 0;
                  }
                  if (__OFSUB__(v48, v34)) {
                    goto LABEL_76;
                  }
                  __DataStorage._length.getter();
                  closure #1 in static Data.== infix(_:_:)(v38, v46, v20, (char *)__s1);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  outlined consume of FinishReason(v19, v55);
                  outlined consume of Data._Representation(v46, v20);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of FinishReason(v49, v50);
                  outlined consume of Data._Representation(v43, v12);
                  if ((__s1[0] & 1) == 0) {
                    return 0;
                  }
                  goto LABEL_8;
                case 3uLL:
                  memset(__s1, 0, 14);
                  goto LABEL_49;
                default:
                  __s1[0] = v26;
                  LOWORD(__s1[1]) = v18;
                  BYTE2(__s1[1]) = BYTE2(v18);
                  BYTE3(__s1[1]) = BYTE3(v18);
                  BYTE4(__s1[1]) = BYTE4(v18);
                  BYTE5(__s1[1]) = BYTE5(v18);
LABEL_49:
                  closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v46, v20, &v56);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of FinishReason(v19, v55);
                  outlined consume of Data._Representation(v46, v20);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of FinishReason(v49, v50);
                  outlined consume of Data._Representation(v26, v18);
                  if ((v56 & 1) == 0) {
                    return 0;
                  }
                  goto LABEL_8;
              }
            }
LABEL_7:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of FinishReason(v19, v55);
            outlined consume of Data._Representation(v46, v20);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of FinishReason(v49, v50);
            outlined consume of Data._Representation(v26, v18);
LABEL_8:
            uint64_t v3 = v44 + 7;
            uint64_t result = 1;
            uint64_t v2 = v45 - 1;
            if (v45 == 1) {
              return result;
            }
            break;
          case 2uLL:
            uint64_t v33 = *(void *)(v46 + 16);
            uint64_t v32 = *(void *)(v46 + 24);
            uint64_t v30 = __OFSUB__(v32, v33);
            uint64_t v31 = v32 - v33;
            if (!v30) {
              goto LABEL_41;
            }
            goto LABEL_73;
          case 3uLL:
            if (!v27) {
              goto LABEL_7;
            }
            goto LABEL_62;
          default:
            uint64_t v31 = BYTE6(v20);
            goto LABEL_41;
        }
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v26 + 16);
        uint64_t v28 = *(void *)(v26 + 24);
        uint64_t v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          goto LABEL_34;
        }
        goto LABEL_72;
      case 3uLL:
        goto LABEL_34;
      default:
        uint64_t v27 = BYTE6(v18);
        goto LABEL_34;
    }
  }
  uint64_t v22 = v47;
  if (v51)
  {
    uint64_t v23 = v16;
    swift_bridgeObjectRetain();
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = specialized static Dictionary<>.== infix(_:_:)(v24, v51);
    swift_bridgeObjectRelease();
    uint64_t v20 = v23;
    swift_bridgeObjectRelease();
    char v26 = v17;
    if ((v25 & 1) == 0) {
      goto LABEL_65;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v14, v55);
  outlined consume of Data._Representation(v46, v16);
  swift_bridgeObjectRelease();
LABEL_67:
  char v26 = v17;
LABEL_68:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v49, v21);
  outlined consume of Data._Representation(v26, v18);
  return 0;
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *i;
  int v5;
  int v6;
  BOOL v7;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a2 + 48);
    for (uint64_t i = (unsigned __int8 *)(a1 + 48); ; i += 24)
    {
      uint64_t v5 = *i;
      uint64_t v6 = *v3;
      uint64_t v7 = *((void *)i - 2) == *((void *)v3 - 2) && *((void *)i - 1) == *((void *)v3 - 1);
      if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      if (v5 == 2)
      {
        if (v6 != 2) {
          return 0;
        }
      }
      else if (v6 == 2 || ((v6 ^ v5) & 1) != 0)
      {
        return 0;
      }
      v3 += 24;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void __s1[5];

  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a1 + 40);
  char v42 = (unint64_t *)(a2 + 80);
  while (1)
  {
    uint64_t v36 = v3;
    char v37 = v2;
    uint64_t v5 = *(v3 - 1);
    uint64_t v6 = *v3;
    uint64_t v7 = v3[2];
    uint64_t v8 = v3[3];
    uint64_t v9 = v3[4];
    uint64_t v39 = v3[1];
    uint64_t v40 = v3[5];
    uint64_t v10 = *(v42 - 6);
    uint64_t v43 = *(v42 - 5);
    uint64_t v11 = *(v42 - 4);
    uint64_t v44 = *(v42 - 3);
    uint64_t v13 = *(v42 - 2);
    uint64_t v12 = *(v42 - 1);
    uint64_t v14 = *v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = v8;
    outlined copy of FinishReason(v7, v8);
    uint64_t v38 = v9;
    outlined copy of Data._Representation(v9, v40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason(v44, v13);
    outlined copy of Data._Representation(v12, v14);
    if ((specialized static Array<A>.== infix(_:_:)(v5, v10) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v44, v13);
      outlined consume of Data._Representation(v12, v14);
      swift_bridgeObjectRelease();
      goto LABEL_72;
    }
    if ((specialized static Array<A>.== infix(_:_:)(v6, v43) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v44, v13);
      outlined consume of Data._Representation(v12, v14);
      goto LABEL_71;
    }
    uint64_t v15 = v14;
    if (!v39) {
      break;
    }
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_67;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized static Dictionary<>.== infix(_:_:)(v39, v11);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
LABEL_16:
    switch(v41)
    {
      case 0uLL:
        if (v13) {
          goto LABEL_68;
        }
        outlined consume of FinishReason(v7, 0);
        uint64_t v17 = v44;
        unint64_t v18 = 0;
        goto LABEL_25;
      case 1uLL:
        if (v13 != 1) {
          goto LABEL_68;
        }
        outlined consume of FinishReason(v7, 1uLL);
        uint64_t v17 = v44;
        unint64_t v18 = 1;
        goto LABEL_25;
      case 2uLL:
        if (v13 != 2) {
          goto LABEL_68;
        }
        outlined consume of FinishReason(v7, 2uLL);
        uint64_t v17 = v44;
        unint64_t v18 = 2;
LABEL_25:
        outlined consume of FinishReason(v17, v18);
        goto LABEL_26;
    }
    if (v13 < 3)
    {
LABEL_68:
      outlined copy of FinishReason(v44, v13);
      outlined copy of FinishReason(v7, v41);
      outlined consume of FinishReason(v7, v41);
      outlined consume of FinishReason(v44, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v44, v13);
      outlined consume of Data._Representation(v12, v14);
      swift_bridgeObjectRelease();
      goto LABEL_72;
    }
    if (v7 == v44 && v41 == v13)
    {
      outlined copy of FinishReason(v7, v41);
      outlined copy of FinishReason(v7, v41);
      outlined consume of FinishReason(v7, v41);
      outlined consume of FinishReason(v7, v41);
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of FinishReason(v44, v13);
      outlined copy of FinishReason(v7, v41);
      outlined consume of FinishReason(v7, v41);
      outlined consume of FinishReason(v44, v13);
      uint64_t v15 = v14;
      if ((v35 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of FinishReason(v44, v13);
        outlined consume of Data._Representation(v12, v14);
        swift_bridgeObjectRelease();
        uint64_t v19 = v9;
        goto LABEL_73;
      }
    }
LABEL_26:
    v42 += 7;
    uint64_t v19 = v9;
    uint64_t v20 = 0;
    switch(v40 >> 62)
    {
      case 1uLL:
        LODWORD(v20) = HIDWORD(v9) - v9;
        if (__OFSUB__(HIDWORD(v9), v9))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
        }
        uint64_t v20 = (int)v20;
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v9 + 16);
        uint64_t v21 = *(void *)(v9 + 24);
        uint64_t v23 = __OFSUB__(v21, v22);
        uint64_t v20 = v21 - v22;
        if (!v23) {
          break;
        }
        goto LABEL_77;
      case 3uLL:
        break;
      default:
        uint64_t v20 = BYTE6(v40);
        break;
    }
    switch(v15 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(v12) - v12;
        if (__OFSUB__(HIDWORD(v12), v12)) {
          goto LABEL_79;
        }
        uint64_t v24 = (int)v24;
LABEL_42:
        if (v20 != v24)
        {
LABEL_69:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of FinishReason(v44, v13);
          outlined consume of Data._Representation(v12, v15);
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
        if (v20 < 1)
        {
LABEL_7:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of FinishReason(v44, v13);
          outlined consume of Data._Representation(v12, v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of FinishReason(v7, v41);
          outlined consume of Data._Representation(v9, v40);
        }
        else
        {
          switch(v40 >> 62)
          {
            case 1uLL:
              if (v9 >> 32 < (int)v9) {
                goto LABEL_80;
              }
              outlined copy of Data._Representation(v9, v40);
              uint64_t v31 = __DataStorage._bytes.getter();
              if (!v31) {
                goto LABEL_60;
              }
              uint64_t v32 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v9, v32)) {
                goto LABEL_83;
              }
              v31 += (int)v9 - v32;
LABEL_60:
              __DataStorage._length.getter();
              closure #1 in static Data.== infix(_:_:)(v31, v12, v14, (char *)__s1);
              outlined consume of Data._Representation(v9, v40);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of FinishReason(v44, v13);
              outlined consume of Data._Representation(v12, v14);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of FinishReason(v7, v41);
              uint64_t v33 = v9;
              uint64_t v34 = v40;
              goto LABEL_63;
            case 2uLL:
              uint64_t v27 = *(void *)(v9 + 16);
              uint64_t v28 = *(void *)(v38 + 24);
              swift_retain();
              swift_retain();
              uint64_t v29 = __DataStorage._bytes.getter();
              if (v29)
              {
                uint64_t v30 = __DataStorage._offset.getter();
                if (__OFSUB__(v27, v30)) {
                  goto LABEL_82;
                }
                v29 += v27 - v30;
                if (__OFSUB__(v28, v27)) {
                  goto LABEL_81;
                }
              }
              else if (__OFSUB__(v28, v27))
              {
                goto LABEL_81;
              }
              __DataStorage._length.getter();
              closure #1 in static Data.== infix(_:_:)(v29, v12, v14, (char *)__s1);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              outlined consume of FinishReason(v44, v13);
              outlined consume of Data._Representation(v12, v14);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of FinishReason(v7, v41);
              uint64_t v33 = v38;
              uint64_t v34 = v40;
LABEL_63:
              outlined consume of Data._Representation(v33, v34);
              if ((__s1[0] & 1) == 0) {
                return 0;
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              goto LABEL_54;
            default:
              __s1[0] = v9;
              LODWORD(__s1[1]) = v40;
              WORD2(__s1[1]) = WORD2(v40);
LABEL_54:
              closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v12, v15, &v45);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of FinishReason(v44, v13);
              outlined consume of Data._Representation(v12, v15);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of FinishReason(v7, v41);
              outlined consume of Data._Representation(v9, v40);
              if ((v45 & 1) == 0) {
                return 0;
              }
              break;
          }
        }
        uint64_t v3 = v36 + 7;
        uint64_t result = 1;
        uint64_t v2 = v37 - 1;
        if (v37 == 1) {
          return result;
        }
        break;
      case 2uLL:
        char v26 = *(void *)(v12 + 16);
        uint64_t v25 = *(void *)(v12 + 24);
        uint64_t v23 = __OFSUB__(v25, v26);
        uint64_t v24 = v25 - v26;
        if (!v23) {
          goto LABEL_42;
        }
        goto LABEL_78;
      case 3uLL:
        if (!v20) {
          goto LABEL_7;
        }
        goto LABEL_69;
      default:
        uint64_t v24 = BYTE6(v15);
        goto LABEL_42;
    }
  }
  if (!v11) {
    goto LABEL_16;
  }
LABEL_67:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_70:
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v44, v13);
  outlined consume of Data._Representation(v12, v14);
LABEL_71:
  swift_bridgeObjectRelease();
LABEL_72:
  uint64_t v19 = v9;
LABEL_73:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v7, v41);
  outlined consume of Data._Representation(v19, v40);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  size_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  size_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  char *v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  int64_t v251;
  uint64_t v252;
  size_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  int64_t v271;
  uint64_t v272;
  size_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  size_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  size_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t result;
  unint64_t v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  char v335;
  uint64_t (*v336)(uint64_t);
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  char *v398;
  unint64_t v399;
  void *v400;
  void *v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t __s2;
  __int16 v405;
  char v406;
  char v407;
  char v408;
  char v409;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v375 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v7);
  v400 = (uint64_t *)((char *)&v375 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v395 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  uint64_t v9 = MEMORY[0x270FA5388](v395);
  v389 = (uint64_t *)((char *)&v375 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  v401 = (uint64_t *)((char *)&v375 - v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PromptCompletion.Annotation.Type, PromptCompletion.Annotation.Type));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v375 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v394 = type metadata accessor for PromptCompletion.Annotation(0);
  uint64_t v15 = MEMORY[0x270FA5388](v394);
  v397 = (char *)&v375 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v396 = (char *)&v375 - v18;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v19 || a1 == a2) {
    return 1;
  }
  unint64_t v378 = v17;
  v398 = v14;
  v379 = v7;
  v380 = v6;
  uint64_t v20 = 0;
  uint64_t v375 = 0;
  v383 = a1 + 32;
  v382 = a2 + 32;
  uint64_t v376 = v12;
  v381 = v19;
  while (1)
  {
    uint64_t v21 = v383 + 48 * v20;
    uint64_t v23 = *(void *)v21;
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v25 = *(void *)(v21 + 16);
    uint64_t v24 = *(void *)(v21 + 24);
    v402 = *(void *)(v21 + 32);
    char v26 = *(unsigned __int8 *)(v21 + 40);
    uint64_t v27 = v382 + 48 * v20;
    uint64_t v29 = *(void *)v27;
    uint64_t v28 = *(void *)(v27 + 8);
    uint64_t v30 = *(void *)(v27 + 16);
    uint64_t v31 = *(void *)(v27 + 24);
    uint64_t v32 = *(void *)(v27 + 32);
    uint64_t v33 = *(unsigned char *)(v27 + 40);
    v391 = v32;
    v392 = v28;
    v403 = v30;
    v393 = v25;
    v399 = v22;
    LODWORD(v385) = v26;
    if ((v26 & 1) == 0) {
      break;
    }
    if ((v33 & 1) == 0) {
      goto LABEL_188;
    }
    uint64_t v34 = v22 >> 62;
    uint64_t v35 = 0;
    switch(v34)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v23), v23)) {
          goto LABEL_207;
        }
        uint64_t v35 = HIDWORD(v23) - (int)v23;
LABEL_43:
        uint64_t v95 = v25;
        BOOL v96 = v24;
        outlined copy of PromptCompletion.Content(v23, v399, v95, v24, v402, 1);
        uint64_t v24 = v96;
        break;
      case 2uLL:
        char v94 = *(void *)(v23 + 16);
        uint64_t v93 = *(void *)(v23 + 24);
        uint64_t v35 = v93 - v94;
        if (!__OFSUB__(v93, v94)) {
          goto LABEL_43;
        }
        goto LABEL_208;
      case 3uLL:
        break;
      default:
        uint64_t v35 = BYTE6(v399);
        break;
    }
    uint64_t v97 = v28 >> 62;
    switch(v28 >> 62)
    {
      case 1uLL:
        LODWORD(v98) = HIDWORD(v29) - v29;
        if (__OFSUB__(HIDWORD(v29), v29)) {
          goto LABEL_209;
        }
        char v98 = (int)v98;
LABEL_49:
        if (v35 != v98)
        {
          uint64_t v348 = v31;
          v349 = v24;
          uint64_t v350 = v391;
          outlined copy of PromptCompletion.Content(v29, v28, v30, v348, v391, 1);
          v351 = v399;
          uint64_t v352 = v393;
          uint64_t v353 = v402;
          outlined copy of PromptCompletion.Content(v23, v399, v393, v349, v402, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v351, v352, v349, v353, 1);
          outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v28, v30, v348, v350, 1);
          v330 = v23;
          v331 = v351;
          BOOL v332 = v352;
          v333 = v349;
          v334 = v353;
          uint64_t v335 = 1;
          goto LABEL_198;
        }
        if (v35 < 1)
        {
LABEL_60:
          v386 = v20;
          v390 = v29;
          char v85 = v31;
          char v76 = v24;
          uint64_t v86 = v391;
          outlined copy of PromptCompletion.Content(v29, v28, v30, v85, v391, 1);
          uint64_t v80 = v399;
          unint64_t v77 = v393;
          unint64_t v81 = v402;
          outlined copy of PromptCompletion.Content(v23, v399, v393, v76, v402, 1);
          char v83 = v28;
          uint64_t v87 = v23;
          goto LABEL_93;
        }
        uint64_t v102 = v34;
        uint64_t v103 = v399;
        switch(v102)
        {
          case 1:
            v388 = v31;
            v386 = v20;
            uint64_t v117 = v402;
            uint64_t v377 = (int)v23;
            if ((int)v23 > v23 >> 32) {
              goto LABEL_211;
            }
            uint64_t v118 = v24;
            v385 = (char *)(v399 & 0x3FFFFFFFFFFFFFFFLL);
            uint64_t v119 = v29;
            uint64_t v120 = v29;
            uint64_t v121 = v392;
            os_log_type_t v122 = v388;
            uint64_t v123 = v399;
            uint64_t v124 = v391;
            outlined copy of PromptCompletion.Content(v119, v392, v30, v388, v391, 1);
            outlined copy of PromptCompletion.Content(v23, v123, v393, v118, v117, 1);
            outlined copy of PromptCompletion.Content(v120, v121, v30, v122, v124, 1);
            outlined copy of PromptCompletion.Content(v120, v121, v30, v122, v124, 1);
            outlined copy of PromptCompletion.Content(v23, v123, v393, v118, v117, 1);
            v390 = v120;
            outlined copy of PromptCompletion.Content(v120, v121, v30, v122, v124, 1);
            uint64_t v125 = v23;
            outlined copy of PromptCompletion.Content(v23, v123, v393, v118, v117, 1);
            unint64_t v126 = (char *)__DataStorage._bytes.getter();
            if (v126)
            {
              unint64_t v127 = v118;
              uint64_t v128 = __DataStorage._offset.getter();
              if (__OFSUB__(v377, v128)) {
                goto LABEL_217;
              }
              v126 += v377 - v128;
            }
            else
            {
              unint64_t v127 = v118;
            }
            uint64_t v207 = v390;
            uint64_t v206 = v391;
            __DataStorage._length.getter();
            if (!v97)
            {
              __s1[0] = v207;
              uint64_t v262 = v392;
              LODWORD(__s1[1]) = v392;
              WORD2(__s1[1]) = WORD2(v392);
              if (!v126) {
                goto LABEL_244;
              }
              LODWORD(v403) = memcmp(v126, __s1, BYTE6(v392));
              uint64_t v263 = v399;
              v264 = v393;
              uint64_t v265 = v402;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v399, v393, v127, v402, 1);
              v266 = v388;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v262, v30, v388, v206, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v262, v30, v266, v206, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v263, v264, v127, v265, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v262, v30, v266, v206, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v263, v264, v127, v265, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v262, v30, v266, v206, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v263, v264, v127, v265, 1);
              uint64_t v20 = v386;
              uint64_t v19 = v381;
              if (v403) {
                return 0;
              }
              goto LABEL_185;
            }
            if (v97 == 1)
            {
              if (v207 >> 32 < (int)v207) {
                goto LABEL_225;
              }
              swift_retain();
              uint64_t v208 = (char *)__DataStorage._bytes.getter();
              if (v208)
              {
                uint64_t v209 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v207, v209)) {
                  goto LABEL_235;
                }
                v208 += (int)v207 - v209;
              }
              uint64_t v210 = __DataStorage._length.getter();
              if (v210 >= (v207 >> 32) - (int)v207) {
                uint64_t v211 = (v207 >> 32) - (int)v207;
              }
              else {
                uint64_t v211 = v210;
              }
              uint64_t v212 = v388;
              if (!v126) {
                goto LABEL_251;
              }
              uint64_t v213 = v391;
              uint64_t v214 = v403;
              if (!v208) {
                goto LABEL_240;
              }
              LODWORD(v385) = memcmp(v126, v208, v211);
              uint64_t v215 = v392;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v392, v214, v212, v213, 1);
              uint64_t v216 = v399;
              unint64_t v217 = v393;
              uint64_t v218 = v402;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v399, v393, v127, v402, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v215, v214, v212, v213, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v215, v214, v212, v213, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v216, v217, v127, v218, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v215, v214, v212, v213, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v216, v217, v127, v218, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v215, v214, v212, v213, 1);
              v219 = v23;
            }
            else
            {
              uint64_t v267 = *(void *)(v207 + 16);
              v268 = *(void *)(v207 + 24);
              swift_retain();
              swift_retain();
              uint64_t v269 = (char *)__DataStorage._bytes.getter();
              if (v269)
              {
                unint64_t v270 = __DataStorage._offset.getter();
                if (__OFSUB__(v267, v270)) {
                  goto LABEL_234;
                }
                v269 += v267 - v270;
              }
              BOOL v101 = __OFSUB__(v268, v267);
              v271 = v268 - v267;
              if (v101) {
                goto LABEL_227;
              }
              uint64_t v272 = __DataStorage._length.getter();
              if (v272 >= v271) {
                v273 = v271;
              }
              else {
                v273 = v272;
              }
              if (!v126) {
                goto LABEL_245;
              }
              uint64_t v274 = v388;
              if (!v269) {
                goto LABEL_246;
              }
              uint64_t v275 = v125;
              LODWORD(v385) = memcmp(v126, v269, v273);
              swift_release();
              swift_release();
              v276 = v125;
              uint64_t v216 = v399;
              unint64_t v217 = v393;
              uint64_t v218 = v402;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v276, v399, v393, v127, v402, 1);
              v277 = v391;
              uint64_t v278 = v392;
              uint64_t v279 = v403;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v392, v403, v274, v391, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v278, v279, v274, v277, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v275, v216, v217, v127, v218, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v278, v279, v274, v277, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v275, v216, v217, v127, v218, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v207, v278, v279, v274, v277, 1);
              v219 = v275;
            }
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v219, v216, v217, v127, v218, 1);
            uint64_t v19 = v381;
            uint64_t v20 = v386;
            goto LABEL_178;
          case 2:
            v403 = v399 & 0x3FFFFFFFFFFFFFFFLL;
            v385 = *(char **)(v23 + 16);
            uint64_t v129 = v28;
            uint64_t v130 = v24;
            uint64_t v131 = v391;
            outlined copy of PromptCompletion.Content(v29, v129, v30, v31, v391, 1);
            uint64_t v132 = v103;
            uint64_t v133 = v393;
            uint64_t v134 = v31;
            outlined copy of PromptCompletion.Content(v23, v132, v393, v130, v402, 1);
            unint64_t v135 = v392;
            outlined copy of PromptCompletion.Content(v29, v392, v30, v134, v131, 1);
            outlined copy of PromptCompletion.Content(v29, v135, v30, v134, v131, 1);
            uint64_t v136 = v399;
            uint64_t v137 = v133;
            unint64_t v138 = v402;
            outlined copy of PromptCompletion.Content(v23, v399, v137, v130, v402, 1);
            v388 = v134;
            outlined copy of PromptCompletion.Content(v29, v392, v30, v134, v131, 1);
            v384 = v130;
            outlined copy of PromptCompletion.Content(v23, v136, v393, v130, v138, 1);
            swift_retain();
            swift_retain();
            uint64_t v139 = __DataStorage._bytes.getter();
            v387 = v23;
            if (v139)
            {
              uint64_t v140 = v139;
              id v141 = __DataStorage._offset.getter();
              if (__OFSUB__(v385, v141)) {
                goto LABEL_216;
              }
              uint64_t v142 = &v385[v140 - v141];
            }
            else
            {
              uint64_t v142 = 0;
            }
            __DataStorage._length.getter();
            v202 = v399;
            unint64_t v203 = v402;
            if (!v97)
            {
              __s1[0] = v29;
              uint64_t v241 = v392;
              LODWORD(__s1[1]) = v392;
              WORD2(__s1[1]) = WORD2(v392);
              if (!v142) {
                goto LABEL_241;
              }
              LODWORD(v385) = memcmp(v142, __s1, BYTE6(v392));
              swift_release();
              uint64_t v242 = v387;
              swift_release();
              unint64_t v243 = v202;
              v244 = v393;
              uint64_t v245 = v384;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v242, v243, v393, v384, v203, 1);
              uint64_t v246 = v29;
LABEL_134:
              uint64_t v257 = v241;
              uint64_t v258 = v30;
              uint64_t v259 = v388;
              uint64_t v260 = v388;
              v261 = v391;
              goto LABEL_176;
            }
            if (v97 != 1)
            {
              v247 = *(void *)(v29 + 16);
              uint64_t v248 = *(void *)(v29 + 24);
              swift_retain();
              swift_retain();
              uint64_t v249 = (char *)__DataStorage._bytes.getter();
              if (v249)
              {
                v250 = __DataStorage._offset.getter();
                if (__OFSUB__(v247, v250)) {
                  goto LABEL_232;
                }
                v249 += v247 - v250;
              }
              BOOL v101 = __OFSUB__(v248, v247);
              v251 = v248 - v247;
              if (v101) {
                goto LABEL_226;
              }
              uint64_t v252 = __DataStorage._length.getter();
              if (v252 >= v251) {
                uint64_t v253 = v251;
              }
              else {
                uint64_t v253 = v252;
              }
              uint64_t v254 = v402;
              if (!v142) {
                goto LABEL_242;
              }
              v255 = v399;
              if (!v249) {
                goto LABEL_243;
              }
              LODWORD(v385) = memcmp(v142, v249, v253);
              swift_release();
              uint64_t v242 = v387;
              swift_release();
              swift_release();
              swift_release();
              v256 = v255;
              v244 = v393;
              uint64_t v245 = v384;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v242, v256, v393, v384, v254, 1);
              uint64_t v246 = v29;
              uint64_t v241 = v392;
              goto LABEL_134;
            }
            if (v29 >> 32 < (int)v29) {
              goto LABEL_220;
            }
            v385 = v142;
            swift_retain();
            char v204 = (char *)__DataStorage._bytes.getter();
            if (v204)
            {
              unint64_t v205 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v29, v205)) {
                goto LABEL_233;
              }
              v204 += (int)v29 - v205;
            }
            int64_t v311 = v391;
            unint64_t v312 = v402;
            uint64_t v313 = __DataStorage._length.getter();
            if (v313 >= (v29 >> 32) - (int)v29) {
              long long v314 = (v29 >> 32) - (int)v29;
            }
            else {
              long long v314 = v313;
            }
            if (!v385) {
              goto LABEL_249;
            }
            uint64_t v241 = v392;
            v315 = v399;
            if (!v204) {
              goto LABEL_250;
            }
            LODWORD(v385) = memcmp(v385, v204, v314);
            uint64_t v259 = v388;
            v261 = v311;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v241, v30, v388, v311, 1);
            swift_release();
            uint64_t v242 = v387;
            swift_release();
            v316 = v315;
            v244 = v393;
            uint64_t v245 = v384;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v242, v316, v393, v384, v312, 1);
            uint64_t v246 = v29;
            uint64_t v257 = v241;
            uint64_t v258 = v30;
            uint64_t v260 = v259;
LABEL_176:
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v246, v257, v258, v260, v261, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v241, v30, v259, v261, 1);
            unint64_t v317 = v399;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v242, v399, v244, v245, v402, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v241, v30, v259, v261, 1);
            uint64_t v318 = v242;
            uint64_t v319 = v242;
            v320 = v244;
            v321 = v244;
            uint64_t v301 = v402;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v319, v317, v321, v245, v402, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v241, v30, v388, v261, 1);
            v307 = v318;
            uint64_t v308 = v317;
            unint64_t v309 = v320;
            uint64_t v310 = v245;
LABEL_177:
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v307, v308, v309, v310, v301, 1);
            uint64_t v19 = v381;
LABEL_178:
            if (v385) {
              return 0;
            }
            break;
          case 3:
            memset(__s1, 0, 14);
            if (!v97) {
              goto LABEL_94;
            }
            uint64_t v143 = v31;
            v386 = v20;
            if (v97 == 1)
            {
              v403 = (int)v29;
              uint64_t v377 = (v29 >> 32) - (int)v29;
              if (v29 >> 32 < (int)v29) {
                goto LABEL_219;
              }
              char v144 = v24;
              uint64_t v145 = v29;
              uint64_t v146 = v28;
              v385 = (char *)(v28 & 0x3FFFFFFFFFFFFFFFLL);
              unint64_t v147 = v391;
              outlined copy of PromptCompletion.Content(v145, v28, v30, v143, v391, 1);
              unint64_t v148 = v393;
              unint64_t v149 = v402;
              outlined copy of PromptCompletion.Content(v23, v103, v393, v144, v402, 1);
              outlined copy of PromptCompletion.Content(v145, v146, v30, v143, v147, 1);
              outlined copy of PromptCompletion.Content(v145, v146, v30, v143, v147, 1);
              outlined copy of PromptCompletion.Content(v23, v103, v148, v144, v149, 1);
              v390 = v145;
              v388 = v143;
              outlined copy of PromptCompletion.Content(v145, v146, v30, v143, v147, 1);
              unint64_t v111 = v144;
              uint64_t v112 = v149;
              outlined copy of PromptCompletion.Content(v23, v103, v393, v144, v149, 1);
              long long v150 = __DataStorage._bytes.getter();
              if (!v150) {
                goto LABEL_239;
              }
              char v114 = v150;
              uint64_t v151 = __DataStorage._offset.getter();
              uint64_t v116 = v403 - v151;
              if (__OFSUB__(v403, v151)) {
                goto LABEL_224;
              }
LABEL_73:
              uint64_t v152 = __DataStorage._length.getter();
              if (v152 >= v377) {
                unint64_t v153 = v377;
              }
              else {
                unint64_t v153 = v152;
              }
              LODWORD(v403) = memcmp(__s1, (const void *)(v114 + v116), v153);
              long long v154 = v399;
              long long v155 = v393;
              unint64_t v156 = v111;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v399, v393, v111, v112, 1);
              unint64_t v158 = v390;
              unint64_t v157 = v391;
              unint64_t v159 = v392;
              uint64_t v160 = v388;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v390, v392, v30, v388, v391, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v158, v159, v30, v160, v157, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v154, v155, v156, v112, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v158, v159, v30, v160, v157, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v154, v155, v156, v112, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v158, v159, v30, v160, v157, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v154, v155, v156, v112, 1);
              uint64_t v19 = v381;
              uint64_t v20 = v386;
              if (v403) {
                return 0;
              }
              goto LABEL_185;
            }
            v220 = v29;
            uint64_t v232 = v28;
            v403 = v28 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v233 = v399;
            v385 = *(char **)(v220 + 16);
            uint64_t v377 = *(void *)(v220 + 24);
            uint64_t v234 = v24;
            uint64_t v235 = v391;
            outlined copy of PromptCompletion.Content(v220, v232, v30, v143, v391, 1);
            uint64_t v236 = v393;
            unint64_t v237 = v402;
            outlined copy of PromptCompletion.Content(v23, v233, v393, v234, v402, 1);
            outlined copy of PromptCompletion.Content(v220, v232, v30, v143, v235, 1);
            outlined copy of PromptCompletion.Content(v220, v232, v30, v143, v235, 1);
            outlined copy of PromptCompletion.Content(v23, v233, v236, v234, v237, 1);
            v238 = v232;
            uint64_t v228 = v143;
            outlined copy of PromptCompletion.Content(v220, v238, v30, v143, v235, 1);
            v387 = v23;
            v384 = v234;
            outlined copy of PromptCompletion.Content(v23, v233, v236, v234, v237, 1);
            swift_retain();
            swift_retain();
            unint64_t v229 = (char *)__DataStorage._bytes.getter();
            if (v229)
            {
              uint64_t v239 = __DataStorage._offset.getter();
              v240 = v385;
              if (__OFSUB__(v385, v239)) {
                goto LABEL_231;
              }
              unint64_t v229 = &v385[(void)v229 - v239];
            }
            else
            {
              v240 = v385;
            }
            uint64_t v295 = v377 - (void)v240;
            if (__OFSUB__(v377, v240)) {
              goto LABEL_222;
            }
            uint64_t v296 = __DataStorage._length.getter();
            v297 = v391;
            uint64_t v20 = v386;
            v298 = v387;
            if (!v229) {
              goto LABEL_248;
            }
LABEL_166:
            if (v296 >= v295) {
              uint64_t v299 = v295;
            }
            else {
              uint64_t v299 = v296;
            }
            LODWORD(v385) = memcmp(__s1, v229, v299);
            swift_release();
            swift_release();
            v300 = v393;
            uint64_t v301 = v402;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v298, v399, v393, v384, v402, 1);
            v302 = v392;
            uint64_t v303 = v228;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v220, v392, v30, v228, v297, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v220, v302, v30, v228, v297, 1);
            unint64_t v304 = v298;
            unint64_t v305 = v399;
            uint64_t v306 = v384;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v304, v399, v300, v384, v301, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v220, v302, v30, v303, v297, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v387, v305, v300, v306, v301, 1);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v220, v302, v30, v303, v297, 1);
            v307 = v387;
            uint64_t v308 = v305;
            unint64_t v309 = v300;
            uint64_t v310 = v306;
            goto LABEL_177;
          default:
            __s1[0] = v23;
            LODWORD(__s1[1]) = v399;
            WORD2(__s1[1]) = WORD2(v399);
            if (!v97)
            {
LABEL_94:
              __s2 = v29;
              v405 = v28;
              v406 = BYTE2(v28);
              v407 = BYTE3(v28);
              v408 = BYTE4(v28);
              v403 = BYTE6(v28);
              v409 = BYTE5(v28);
              uint64_t v176 = v28;
              uint64_t v177 = v24;
              v384 = v24;
              v178 = v399;
              unint64_t v179 = v28;
              unint64_t v180 = v391;
              outlined copy of PromptCompletion.Content(v29, v176, v30, v31, v391, 1);
              uint64_t v181 = v178;
              uint64_t v182 = v393;
              outlined copy of PromptCompletion.Content(v23, v181, v393, v177, v402, 1);
              uint64_t v183 = v180;
              outlined copy of PromptCompletion.Content(v29, v179, v30, v31, v180, 1);
              v184 = v179;
              outlined copy of PromptCompletion.Content(v29, v179, v30, v31, v183, 1);
              uint64_t v185 = v399;
              v186 = v182;
              v187 = v384;
              uint64_t v188 = v402;
              outlined copy of PromptCompletion.Content(v23, v399, v186, v384, v402, 1);
              outlined copy of PromptCompletion.Content(v29, v184, v30, v31, v391, 1);
              uint64_t v189 = v185;
              v190 = v187;
              uint64_t v191 = v188;
              outlined copy of PromptCompletion.Content(v23, v189, v393, v187, v188, 1);
              LODWORD(v403) = memcmp(__s1, &__s2, v403);
              v192 = v399;
              v193 = v393;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v399, v393, v190, v191, 1);
              unint64_t v194 = v391;
              unint64_t v195 = v392;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v392, v30, v31, v391, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v195, v30, v31, v194, 1);
              uint64_t v196 = v192;
              v197 = v193;
              uint64_t v198 = v193;
              v199 = v384;
              uint64_t v200 = v402;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v196, v197, v384, v402, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v392, v30, v31, v194, 1);
              v201 = v399;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v399, v198, v199, v200, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v392, v30, v31, v391, 1);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v201, v198, v199, v200, 1);
              if (v403) {
                return 0;
              }
              goto LABEL_185;
            }
            uint64_t v104 = v31;
            v386 = v20;
            if (v97 == 1)
            {
              v403 = (int)v29;
              uint64_t v377 = (v29 >> 32) - (int)v29;
              if (v29 >> 32 < (int)v29) {
                goto LABEL_218;
              }
              uint64_t v105 = v24;
              uint64_t v106 = v29;
              long long v107 = v28;
              v385 = (char *)(v28 & 0x3FFFFFFFFFFFFFFFLL);
              BOOL v108 = v391;
              outlined copy of PromptCompletion.Content(v106, v28, v30, v104, v391, 1);
              Class v109 = v393;
              id v110 = v402;
              outlined copy of PromptCompletion.Content(v23, v103, v393, v105, v402, 1);
              outlined copy of PromptCompletion.Content(v106, v107, v30, v104, v108, 1);
              outlined copy of PromptCompletion.Content(v106, v107, v30, v104, v108, 1);
              outlined copy of PromptCompletion.Content(v23, v103, v109, v105, v110, 1);
              v390 = v106;
              v388 = v104;
              outlined copy of PromptCompletion.Content(v106, v107, v30, v104, v108, 1);
              unint64_t v111 = v105;
              uint64_t v112 = v110;
              outlined copy of PromptCompletion.Content(v23, v103, v393, v105, v110, 1);
              uint64_t v113 = __DataStorage._bytes.getter();
              if (!v113)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_239:
                __DataStorage._length.getter();
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
LABEL_243:
                __break(1u);
LABEL_244:
                __break(1u);
LABEL_245:
                __break(1u);
LABEL_246:
                __break(1u);
LABEL_247:
                __break(1u);
LABEL_248:
                __break(1u);
LABEL_249:
                __break(1u);
LABEL_250:
                __break(1u);
LABEL_251:
                __break(1u);
                JUMPOUT(0x25F802160);
              }
              char v114 = v113;
              uint64_t v115 = __DataStorage._offset.getter();
              uint64_t v116 = v403 - v115;
              if (__OFSUB__(v403, v115)) {
                goto LABEL_223;
              }
              goto LABEL_73;
            }
            v220 = v29;
            unint64_t v221 = v28;
            v403 = v28 & 0x3FFFFFFFFFFFFFFFLL;
            unint64_t v222 = v399;
            v385 = *(char **)(v220 + 16);
            uint64_t v377 = *(void *)(v220 + 24);
            v223 = v24;
            uint64_t v224 = v391;
            outlined copy of PromptCompletion.Content(v220, v221, v30, v104, v391, 1);
            uint64_t v225 = v393;
            uint64_t v226 = v402;
            outlined copy of PromptCompletion.Content(v23, v222, v393, v223, v402, 1);
            outlined copy of PromptCompletion.Content(v220, v221, v30, v104, v224, 1);
            outlined copy of PromptCompletion.Content(v220, v221, v30, v104, v224, 1);
            outlined copy of PromptCompletion.Content(v23, v222, v225, v223, v226, 1);
            unint64_t v227 = v221;
            uint64_t v228 = v104;
            outlined copy of PromptCompletion.Content(v220, v227, v30, v104, v224, 1);
            v387 = v23;
            v384 = v223;
            outlined copy of PromptCompletion.Content(v23, v222, v225, v223, v226, 1);
            swift_retain();
            swift_retain();
            unint64_t v229 = (char *)__DataStorage._bytes.getter();
            if (v229)
            {
              uint64_t v230 = __DataStorage._offset.getter();
              uint64_t v231 = v385;
              if (__OFSUB__(v385, v230)) {
                goto LABEL_230;
              }
              unint64_t v229 = &v385[(void)v229 - v230];
            }
            else
            {
              uint64_t v231 = v385;
            }
            uint64_t v295 = v377 - (void)v231;
            if (__OFSUB__(v377, v231)) {
              goto LABEL_221;
            }
            uint64_t v296 = __DataStorage._length.getter();
            v297 = v391;
            uint64_t v20 = v386;
            v298 = v387;
            if (!v229) {
              goto LABEL_247;
            }
            goto LABEL_166;
        }
        break;
      case 2uLL:
        char v100 = *(void *)(v29 + 16);
        unint64_t v99 = *(void *)(v29 + 24);
        BOOL v101 = __OFSUB__(v99, v100);
        char v98 = v99 - v100;
        if (!v101) {
          goto LABEL_49;
        }
        goto LABEL_210;
      case 3uLL:
        if (!v35) {
          goto LABEL_60;
        }
        uint64_t v367 = v29;
        uint64_t v368 = v29;
        long long v369 = v31;
        v370 = v24;
        unint64_t v371 = v391;
        outlined copy of PromptCompletion.Content(v367, v28, v30, v369, v391, 1);
        v372 = v399;
        long long v373 = v393;
        uint64_t v374 = v402;
        outlined copy of PromptCompletion.Content(v23, v399, v393, v370, v402, 1);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v372, v373, v370, v374, 1);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v368, v28, v30, v369, v371, 1);
        v330 = v23;
        v331 = v372;
        BOOL v332 = v373;
        v333 = v370;
        v334 = v374;
        uint64_t v335 = 1;
        goto LABEL_198;
      default:
        char v98 = BYTE6(v28);
        goto LABEL_49;
    }
LABEL_185:
    ++v20;
    uint64_t result = 1;
    if (v20 == v19) {
      return result;
    }
  }
  if (v33)
  {
LABEL_188:
    v325 = v22;
    v326 = v25;
    v327 = (char)v385;
    LODWORD(v403) = v385 ^ 1;
    v328 = v24;
    outlined copy of PromptCompletion.Content(v29, v28, v30, v31, v32, v385 ^ 1);
    v388 = v31;
    v329 = v402;
    outlined copy of PromptCompletion.Content(v23, v325, v326, v328, v402, v327);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v325, v326, v328, v329, v327);
    v330 = v29;
    v331 = v28;
    BOOL v332 = v30;
    v333 = v388;
    v334 = v32;
    uint64_t v335 = v403;
    goto LABEL_198;
  }
  uint64_t v36 = v24;
  char v37 = v23 == v29 && v22 == v28;
  v388 = v31;
  if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    outlined copy of PromptCompletion.Content(v29, v28, v30, v31, v32, 0);
    uint64_t v337 = v402;
    outlined copy of PromptCompletion.Content(v23, v22, v25, v36, v402, 0);
    outlined copy of PromptCompletion.Content(v23, v22, v25, v36, v337, 0);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v23, v22, v25, v36, v337, 0);
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v29, v28, v30, v388, v32, 0);
    v330 = v23;
    v331 = v22;
    BOOL v332 = v25;
    goto LABEL_196;
  }
  v387 = v23;
  uint64_t v38 = *(void *)(v25 + 16);
  uint64_t v39 = *(void *)(v30 + 16);
  v390 = v29;
  if (v38 != v39)
  {
    int v345 = v29;
    v346 = v29;
    uint64_t v347 = v392;
    v341 = v388;
    outlined copy of PromptCompletion.Content(v345, v392, v30, v388, v32, 0);
    unint64_t v338 = v25;
    v340 = v387;
    uint64_t v339 = v399;
    uint64_t v337 = v402;
    outlined copy of PromptCompletion.Content(v387, v399, v338, v36, v402, 0);
    outlined copy of PromptCompletion.Content(v340, v339, v338, v36, v337, 0);
    outlined copy of PromptCompletion.Content(v346, v347, v30, v341, v32, 0);
    outlined copy of PromptCompletion.Content(v346, v347, v30, v341, v32, 0);
    outlined copy of PromptCompletion.Content(v340, v339, v338, v36, v337, 0);
    outlined copy of PromptCompletion.Content(v346, v347, v30, v341, v32, 0);
    outlined copy of PromptCompletion.Content(v340, v339, v338, v36, v337, 0);
    goto LABEL_195;
  }
  v386 = v20;
  v384 = v36;
  if (!v38)
  {
    uint64_t v69 = v392;
    uint64_t v70 = v388;
    outlined copy of PromptCompletion.Content(v29, v392, v30, v388, v32, 0);
    uint64_t v71 = v387;
    uint64_t v72 = v399;
    uint64_t v73 = v393;
    char v74 = v402;
    outlined copy of PromptCompletion.Content(v387, v399, v393, v36, v402, 0);
    outlined copy of PromptCompletion.Content(v71, v72, v73, v36, v74, 0);
    outlined copy of PromptCompletion.Content(v29, v69, v30, v70, v32, 0);
    outlined copy of PromptCompletion.Content(v29, v69, v30, v70, v32, 0);
    outlined copy of PromptCompletion.Content(v71, v72, v73, v36, v74, 0);
    outlined copy of PromptCompletion.Content(v29, v69, v30, v70, v32, 0);
    uint64_t v49 = v73;
    outlined copy of PromptCompletion.Content(v71, v72, v73, v36, v74, 0);
LABEL_34:
    unint64_t v75 = v391;
    if (v402 >> 60 == 15)
    {
      char v76 = v384;
      unint64_t v77 = v49;
      uint64_t v78 = v387;
      BOOL v79 = v390;
      if (v391 >> 60 != 15) {
        goto LABEL_202;
      }
      uint64_t v80 = v399;
      unint64_t v81 = v402;
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v387, v399, v49, v384, v402, 0);
      unint64_t v82 = v79;
      char v83 = v392;
      char v84 = v79;
      char v85 = v388;
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v82, v392, v30, v388, v75, 0);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v84, v83, v30, v85, v75, 0);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v78, v80, v77, v76, v81, 0);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v84, v83, v30, v85, v75, 0);
      uint64_t v86 = v75;
      uint64_t v87 = v78;
LABEL_93:
      uint64_t v174 = v30;
      uint64_t v175 = (char)v385;
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v87, v80, v77, v76, v81, (char)v385);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v390, v83, v174, v85, v86, v175);
      outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v87, v80, v77, v76, v81, v175);
      uint64_t v20 = v386;
      uint64_t v19 = v381;
    }
    else
    {
      char v76 = v384;
      unint64_t v77 = v49;
      uint64_t v78 = v387;
      BOOL v79 = v390;
      if (v391 >> 60 == 15)
      {
LABEL_202:
        uint64_t v354 = v402;
        outlined copy of Data?(v76, v402);
        v355 = v75;
        uint64_t v356 = v388;
        outlined copy of Data?(v388, v355);
        outlined consume of Data?(v76, v354);
        outlined consume of Data?(v356, v355);
        uint64_t v357 = v77;
        unint64_t v358 = v399;
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v78, v399, v357, v76, v354, 0);
        uint64_t v359 = v392;
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v79, v392, v30, v356, v355, 0);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v79, v359, v30, v356, v355, 0);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v78, v358, v357, v76, v354, 0);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v79, v359, v30, v356, v355, 0);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v78, v358, v357, v76, v354, 0);
        outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v79, v359, v30, v356, v355, 0);
        v330 = v78;
        v331 = v358;
        BOOL v332 = v357;
        v333 = v76;
        v334 = v354;
        goto LABEL_197;
      }
      uint64_t v88 = v384;
      uint64_t v89 = v402;
      uint64_t v90 = v402 >> 62;
      uint64_t v91 = v388;
      uint64_t v86 = v391;
      char v92 = 0;
      switch(v402 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v384), v384)) {
            goto LABEL_212;
          }
          char v92 = HIDWORD(v384) - (int)v384;
LABEL_81:
          outlined copy of Data._Representation(v384, v402);
          break;
        case 2uLL:
          uint64_t v162 = *(void *)(v384 + 16);
          unint64_t v161 = *(void *)(v384 + 24);
          char v92 = v161 - v162;
          if (!__OFSUB__(v161, v162)) {
            goto LABEL_81;
          }
          goto LABEL_213;
        case 3uLL:
          break;
        default:
          char v92 = BYTE6(v402);
          break;
      }
      char v83 = v392;
      switch(v75 >> 62)
      {
        case 1uLL:
          LODWORD(v163) = HIDWORD(v91) - v91;
          if (__OFSUB__(HIDWORD(v91), v91)) {
            goto LABEL_214;
          }
          unint64_t v163 = (int)v163;
LABEL_87:
          if (v92 != v163)
          {
LABEL_204:
            outlined consume of Data?(v88, v89);
            v360 = v387;
            v361 = v399;
            v362 = v393;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v387, v399, v393, v88, v89, 0);
            uint64_t v363 = v390;
            v364 = v75;
            v365 = v83;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v390, v83, v30, v91, v364, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v363, v83, v30, v91, v364, 0);
            uint64_t v366 = v384;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v360, v361, v362, v384, v89, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v363, v365, v30, v91, v364, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v360, v361, v362, v366, v89, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v363, v365, v30, v91, v364, 0);
            v330 = v360;
            v331 = v361;
            BOOL v332 = v362;
            v333 = v366;
            v334 = v89;
            goto LABEL_197;
          }
          if (v92 < 1)
          {
LABEL_92:
            unint64_t v172 = v89;
            char v85 = v91;
            unint64_t v81 = v89;
            char v76 = v88;
            outlined consume of Data?(v88, v172);
            uint64_t v80 = v399;
            uint64_t v87 = v387;
            unint64_t v77 = v393;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v387, v399, v393, v88, v81, 0);
            uint64_t v173 = v390;
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v390, v83, v30, v85, v86, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v173, v83, v30, v85, v86, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v87, v80, v77, v76, v81, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v173, v83, v30, v85, v86, 0);
            goto LABEL_93;
          }
          unint64_t v166 = v89;
          unint64_t v167 = v91;
          unint64_t v168 = v392;
          switch((int)v90)
          {
            case 1:
              v280 = v390;
              if (v88 >> 32 < (int)v88) {
                goto LABEL_228;
              }
              outlined copy of Data?(v88, v402);
              outlined copy of Data?(v91, v391);
              uint64_t v281 = __DataStorage._bytes.getter();
              if (!v281) {
                goto LABEL_153;
              }
              uint64_t v282 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v88, v282)) {
                goto LABEL_237;
              }
              v281 += (int)v88 - v282;
LABEL_153:
              unint64_t v171 = v391;
              v283 = v402;
              __DataStorage._length.getter();
              os_log_type_t v284 = v375;
              closure #1 in static Data.== infix(_:_:)(v281, v167, v171, (char *)__s1);
              uint64_t v375 = v284;
              outlined consume of Data?(v88, v283);
              outlined consume of Data?(v167, v171);
              outlined consume of Data?(v88, v283);
              v285 = v399;
              uint64_t v286 = v393;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v387, v399, v393, v88, v283, 0);
              unint64_t v168 = v392;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v280, v392, v30, v167, v171, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v280, v168, v30, v167, v171, 0);
              unint64_t v169 = v167;
              v287 = v387;
              LODWORD(v403) = LOBYTE(__s1[0]);
              goto LABEL_183;
            case 2:
              unint64_t v288 = v86;
              unint64_t v289 = *(void *)(v88 + 16);
              unint64_t v290 = *(void *)(v88 + 24);
              outlined copy of Data?(v91, v288);
              swift_retain();
              swift_retain();
              uint64_t v291 = __DataStorage._bytes.getter();
              if (v291)
              {
                v292 = __DataStorage._offset.getter();
                v280 = v390;
                if (__OFSUB__(v289, v292)) {
                  goto LABEL_236;
                }
                v291 += v289 - v292;
              }
              else
              {
                v280 = v390;
              }
              if (__OFSUB__(v290, v289)) {
                goto LABEL_229;
              }
              __DataStorage._length.getter();
              v322 = v91;
              unint64_t v171 = v391;
              v323 = v375;
              closure #1 in static Data.== infix(_:_:)(v291, v322, v391, (char *)__s1);
              uint64_t v375 = v323;
              swift_release();
              swift_release();
              outlined consume of Data?(v167, v171);
              v283 = v402;
              outlined consume of Data?(v88, v402);
              v285 = v399;
              uint64_t v286 = v393;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v387, v399, v393, v88, v283, 0);
              unint64_t v168 = v392;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v280, v392, v30, v167, v171, 0);
              unint64_t v169 = v167;
              v287 = v387;
              LODWORD(v403) = LOBYTE(__s1[0]);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v280, v168, v30, v169, v171, 0);
LABEL_183:
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v287, v285, v286, v88, v283, 0);
LABEL_184:
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v280, v168, v30, v169, v171, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v287, v285, v286, v88, v283, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v280, v168, v30, v169, v171, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v287, v285, v286, v88, v283, 0);
              uint64_t v20 = v386;
              uint64_t v19 = v381;
              if ((v403 & 1) == 0) {
                return 0;
              }
              break;
            case 3:
              memset(__s1, 0, 14);
              unint64_t v169 = v91;
              v293 = v91;
              unint64_t v171 = v86;
              outlined copy of Data._Representation(v293, v86);
              goto LABEL_158;
            default:
              __s1[0] = v88;
              LOWORD(__s1[1]) = v166;
              BYTE2(__s1[1]) = BYTE2(v166);
              BYTE3(__s1[1]) = BYTE3(v166);
              BYTE4(__s1[1]) = BYTE4(v166);
              BYTE5(__s1[1]) = BYTE5(v166);
              unint64_t v169 = v91;
              uint64_t v170 = v91;
              unint64_t v171 = v86;
              outlined copy of Data._Representation(v170, v86);
LABEL_158:
              uint64_t v294 = v375;
              closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v167, v86, (char *)&__s2);
              uint64_t v375 = v294;
              outlined consume of Data?(v167, v86);
              outlined consume of Data?(v88, v166);
              v287 = v387;
              v283 = v166;
              v285 = v399;
              uint64_t v286 = v393;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v387, v399, v393, v88, v166, 0);
              v280 = v390;
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v390, v168, v30, v169, v171, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v280, v168, v30, v169, v171, 0);
              outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v287, v285, v286, v88, v283, 0);
              LODWORD(v403) = __s2;
              goto LABEL_184;
          }
          break;
        case 2uLL:
          long long v165 = *(void *)(v91 + 16);
          long long v164 = *(void *)(v91 + 24);
          BOOL v101 = __OFSUB__(v164, v165);
          unint64_t v163 = v164 - v165;
          if (!v101) {
            goto LABEL_87;
          }
          goto LABEL_215;
        case 3uLL:
          if (!v92) {
            goto LABEL_92;
          }
          goto LABEL_204;
        default:
          unint64_t v163 = BYTE6(v75);
          goto LABEL_87;
      }
    }
    goto LABEL_185;
  }
  uint64_t v377 = *(unsigned __int8 *)(v378 + 80);
  uint64_t v40 = v402;
  uint64_t v41 = v36;
  char v42 = v392;
  uint64_t v43 = v30;
  uint64_t v44 = v388;
  outlined copy of PromptCompletion.Content(v29, v392, v43, v388, v32, 0);
  uint64_t v45 = v387;
  uint64_t v46 = v399;
  uint64_t v47 = v393;
  outlined copy of PromptCompletion.Content(v387, v399, v393, v41, v40, 0);
  outlined copy of PromptCompletion.Content(v45, v46, v47, v41, v40, 0);
  outlined copy of PromptCompletion.Content(v29, v42, v403, v44, v32, 0);
  outlined copy of PromptCompletion.Content(v29, v42, v403, v44, v32, 0);
  outlined copy of PromptCompletion.Content(v45, v46, v47, v41, v40, 0);
  uint64_t v48 = v44;
  uint64_t v30 = v403;
  outlined copy of PromptCompletion.Content(v29, v42, v403, v48, v32, 0);
  outlined copy of PromptCompletion.Content(v45, v46, v47, v41, v40, 0);
  uint64_t v49 = v47;
  if (v47 == v30) {
    goto LABEL_34;
  }
  uint64_t v50 = 0;
  uint64_t v51 = (v377 + 32) & ~v377;
  uint64_t v52 = *(void *)(v378 + 72);
  uint64_t v54 = v396;
  uint64_t v53 = v397;
  uint64_t v55 = v376;
  while (1)
  {
    outlined init with copy of DocumentResourceEnvelope(v49 + v51, (uint64_t)v54, type metadata accessor for PromptCompletion.Annotation);
    if (v50 >= *(void *)(v30 + 16))
    {
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
    }
    outlined init with copy of DocumentResourceEnvelope(v30 + v51, (uint64_t)v53, type metadata accessor for PromptCompletion.Annotation);
    if (*v54 != *v53) {
      goto LABEL_194;
    }
    uint64_t v56 = *(int *)(v394 + 20);
    uint64_t v57 = (uint64_t)v54 + v56;
    uint64_t v58 = (uint64_t)v53 + v56;
    int64_t v59 = (uint64_t)v398;
    char v60 = (uint64_t)&v398[*(int *)(v55 + 48)];
    outlined init with copy of DocumentResourceEnvelope(v57, (uint64_t)v398, type metadata accessor for PromptCompletion.Annotation.Type);
    outlined init with copy of DocumentResourceEnvelope(v58, v60, type metadata accessor for PromptCompletion.Annotation.Type);
    if (swift_getEnumCaseMultiPayload() != 1) {
      break;
    }
    uint64_t v61 = v59;
    char v62 = v389;
    outlined init with copy of DocumentResourceEnvelope(v61, (uint64_t)v389, type metadata accessor for PromptCompletion.Annotation.Type);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v336 = type metadata accessor for PromptCompletion.DocumentCitation;
LABEL_193:
      outlined destroy of DocumentResourceEnvelope((uint64_t)v62, v336);
      uint64_t v30 = v403;
      uint64_t v54 = v396;
      uint64_t v53 = v397;
      outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v398, (uint64_t *)&demangling cache variable for type metadata for (PromptCompletion.Annotation.Type, PromptCompletion.Annotation.Type));
      goto LABEL_194;
    }
    uint64_t v63 = (uint64_t)v380;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v60, (uint64_t)v380, type metadata accessor for PromptCompletion.DocumentCitation);
    BOOL v64 = static DocumentResourceIdentifier.== infix(_:_:)();
    outlined destroy of DocumentResourceEnvelope(v63, type metadata accessor for PromptCompletion.DocumentCitation);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v62, type metadata accessor for PromptCompletion.DocumentCitation);
    uint64_t v30 = v403;
    uint64_t v54 = v396;
    uint64_t v53 = v397;
    if ((v64 & 1) == 0) {
      goto LABEL_190;
    }
LABEL_19:
    ++v50;
    outlined destroy of DocumentResourceEnvelope((uint64_t)v398, type metadata accessor for PromptCompletion.Annotation.Type);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v53, type metadata accessor for PromptCompletion.Annotation);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v54, type metadata accessor for PromptCompletion.Annotation);
    v51 += v52;
    if (v38 == v50) {
      goto LABEL_34;
    }
  }
  uint64_t v65 = v59;
  char v62 = v401;
  outlined init with copy of DocumentResourceEnvelope(v65, (uint64_t)v401, type metadata accessor for PromptCompletion.Annotation.Type);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v336 = type metadata accessor for PromptCompletion.URLCitation;
    goto LABEL_193;
  }
  unint64_t v66 = v60;
  char v67 = v400;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v66, (uint64_t)v400, type metadata accessor for PromptCompletion.URLCitation);
  unint64_t v68 = v62[1];
  char v37 = *v62 == *v67;
  uint64_t v30 = v403;
  uint64_t v54 = v396;
  uint64_t v53 = v397;
  if (v37 && v68 == v67[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
    && (MEMORY[0x2611FEFF0]((char *)v401 + *(int *)(v379 + 20), (char *)v400 + *(int *)(v379 + 20)) & 1) != 0)
  {
    outlined destroy of DocumentResourceEnvelope((uint64_t)v400, type metadata accessor for PromptCompletion.URLCitation);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v401, type metadata accessor for PromptCompletion.URLCitation);
    goto LABEL_19;
  }
  outlined destroy of DocumentResourceEnvelope((uint64_t)v400, type metadata accessor for PromptCompletion.URLCitation);
  outlined destroy of DocumentResourceEnvelope((uint64_t)v401, type metadata accessor for PromptCompletion.URLCitation);
LABEL_190:
  outlined destroy of DocumentResourceEnvelope((uint64_t)v398, type metadata accessor for PromptCompletion.Annotation.Type);
LABEL_194:
  outlined destroy of DocumentResourceEnvelope((uint64_t)v53, type metadata accessor for PromptCompletion.Annotation);
  outlined destroy of DocumentResourceEnvelope((uint64_t)v54, type metadata accessor for PromptCompletion.Annotation);
  uint64_t v337 = v402;
  uint64_t v36 = v384;
  unint64_t v338 = v49;
  uint64_t v339 = v399;
  v340 = v387;
  uint64_t v32 = v391;
  v341 = v388;
LABEL_195:
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v340, v339, v338, v36, v337, 0);
  uint64_t v342 = v390;
  v343 = v339;
  uint64_t v344 = v392;
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v390, v392, v30, v341, v32, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v342, v344, v30, v341, v32, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v340, v343, v338, v36, v337, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v342, v344, v30, v341, v32, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v340, v343, v338, v36, v337, 0);
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v342, v344, v30, v341, v32, 0);
  v330 = v340;
  v331 = v343;
  BOOL v332 = v338;
LABEL_196:
  v333 = v36;
  v334 = v337;
LABEL_197:
  uint64_t v335 = 0;
LABEL_198:
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v330, v331, v332, v333, v334, v335);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v4 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v47 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v45);
  uint64_t v46 = (char **)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PromptCompletion.Annotation.Type, PromptCompletion.Annotation.Type));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PromptCompletion.Annotation(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char **)((char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v23 = (char **)((char *)&v39 - v22);
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24 == *(void *)(a2 + 16))
  {
    uint64_t v39 = v10;
    uint64_t v40 = v13;
    uint64_t v48 = v7;
    if (!v24 || a1 == a2) {
      return 1;
    }
    uint64_t v43 = a2;
    uint64_t v44 = v20;
    uint64_t v25 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v41 = *(void *)(v21 + 72);
    char v42 = a1;
    char v26 = v12;
    uint64_t v27 = v40;
    while (1)
    {
      outlined init with copy of DocumentResourceEnvelope(a1 + v25, (uint64_t)v23, type metadata accessor for PromptCompletion.Annotation);
      outlined init with copy of DocumentResourceEnvelope(a2 + v25, (uint64_t)v19, type metadata accessor for PromptCompletion.Annotation);
      if (*v23 != *v19) {
        break;
      }
      uint64_t v28 = *(int *)(v44 + 20);
      uint64_t v29 = (uint64_t)v19 + v28;
      uint64_t v30 = (uint64_t)&v15[*(int *)(v27 + 48)];
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v23 + v28, (uint64_t)v15, type metadata accessor for PromptCompletion.Annotation.Type);
      outlined init with copy of DocumentResourceEnvelope(v29, v30, type metadata accessor for PromptCompletion.Annotation.Type);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = (uint64_t)v39;
        outlined init with copy of DocumentResourceEnvelope((uint64_t)v15, (uint64_t)v39, type metadata accessor for PromptCompletion.Annotation.Type);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          char v37 = type metadata accessor for PromptCompletion.DocumentCitation;
          uint64_t v38 = v31;
LABEL_21:
          outlined destroy of DocumentResourceEnvelope(v38, v37);
          outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (PromptCompletion.Annotation.Type, PromptCompletion.Annotation.Type));
          break;
        }
        uint64_t v32 = v47;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v30, v47, type metadata accessor for PromptCompletion.DocumentCitation);
        uint64_t v33 = static DocumentResourceIdentifier.== infix(_:_:)();
        outlined destroy of DocumentResourceEnvelope(v32, type metadata accessor for PromptCompletion.DocumentCitation);
        uint64_t v34 = v31;
        uint64_t v27 = v40;
        outlined destroy of DocumentResourceEnvelope(v34, type metadata accessor for PromptCompletion.DocumentCitation);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for PromptCompletion.Annotation.Type);
        a1 = v42;
        a2 = v43;
        if ((v33 & 1) == 0) {
          break;
        }
      }
      else
      {
        outlined init with copy of DocumentResourceEnvelope((uint64_t)v15, (uint64_t)v26, type metadata accessor for PromptCompletion.Annotation.Type);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          char v37 = type metadata accessor for PromptCompletion.URLCitation;
          uint64_t v38 = (uint64_t)v26;
          goto LABEL_21;
        }
        uint64_t v35 = v46;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v30, (uint64_t)v46, type metadata accessor for PromptCompletion.URLCitation);
        if ((*v26 != *v35 || v26[1] != v35[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || (MEMORY[0x2611FEFF0]((char *)v26 + *(int *)(v45 + 20), (char *)v35 + *(int *)(v45 + 20)) & 1) == 0)
        {
          outlined destroy of DocumentResourceEnvelope((uint64_t)v35, type metadata accessor for PromptCompletion.URLCitation);
          outlined destroy of DocumentResourceEnvelope((uint64_t)v26, type metadata accessor for PromptCompletion.URLCitation);
          outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for PromptCompletion.Annotation.Type);
          break;
        }
        outlined destroy of DocumentResourceEnvelope((uint64_t)v35, type metadata accessor for PromptCompletion.URLCitation);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v26, type metadata accessor for PromptCompletion.URLCitation);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v15, type metadata accessor for PromptCompletion.Annotation.Type);
        a1 = v42;
        a2 = v43;
      }
      outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for PromptCompletion.Annotation);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v23, type metadata accessor for PromptCompletion.Annotation);
      v25 += v41;
      if (!--v24) {
        return 1;
      }
    }
    outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for PromptCompletion.Annotation);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v23, type metadata accessor for PromptCompletion.Annotation);
  }
  return 0;
}

{
  uint64_t vars8;

  return specialized static Array<A>.== infix(_:_:)(a1, a2);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  int v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  size_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  size_t v95;
  int v96;
  uint64_t v97;
  size_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t __s2;
  __int16 v114;
  char v115;
  char v116;
  char v117;
  char v118;
  void __s1[3];

  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (void *)(a2 + 40);
    uint64_t v4 = (void *)(a1 + 40);
    while (1)
    {
      uint64_t v6 = v4[1];
      uint64_t v5 = v4[2];
      uint64_t v7 = v4[3];
      uint64_t v8 = v4[4];
      uint64_t v10 = v3[1];
      uint64_t v9 = v3[2];
      uint64_t v11 = v3[3];
      uint64_t v12 = v3[4];
      uint64_t v112 = v11;
      Class v109 = v2;
      id v110 = v12;
      if (*(v4 - 1) != *(v3 - 1) || *v4 != *v3)
      {
        uint64_t v13 = v4[2];
        uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v5 = v13;
        uint64_t v12 = v110;
        uint64_t v11 = v112;
        if ((v14 & 1) == 0) {
          return 0;
        }
      }
      if (v5)
      {
        if (!v9) {
          return 0;
        }
        if (v6 != v10 || v5 != v9)
        {
          uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v12 = v110;
          uint64_t v11 = v112;
          if ((v15 & 1) == 0) {
            return 0;
          }
        }
      }
      else if (v9)
      {
        return 0;
      }
      uint64_t v16 = 0;
      switch(v8 >> 62)
      {
        case 1uLL:
          LODWORD(v16) = HIDWORD(v7) - v7;
          if (__OFSUB__(HIDWORD(v7), v7))
          {
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
          }
          uint64_t v16 = (int)v16;
LABEL_22:
          uint64_t v20 = v12 >> 62;
          switch(v12 >> 62)
          {
            case 1uLL:
              LODWORD(v21) = HIDWORD(v11) - v11;
              if (__OFSUB__(HIDWORD(v11), v11)) {
                goto LABEL_136;
              }
              uint64_t v21 = (int)v21;
LABEL_27:
              if (v16 != v21) {
                return 0;
              }
              if (v16 < 1) {
                goto LABEL_6;
              }
              break;
            case 2uLL:
              uint64_t v23 = *(void *)(v11 + 16);
              uint64_t v22 = *(void *)(v11 + 24);
              uint64_t v19 = __OFSUB__(v22, v23);
              uint64_t v21 = v22 - v23;
              if (!v19) {
                goto LABEL_27;
              }
              goto LABEL_137;
            case 3uLL:
              if (!v16) {
                goto LABEL_6;
              }
              return 0;
            default:
              uint64_t v21 = BYTE6(v12);
              goto LABEL_27;
          }
          break;
        case 2uLL:
          unint64_t v18 = *(void *)(v7 + 16);
          uint64_t v17 = *(void *)(v7 + 24);
          uint64_t v19 = __OFSUB__(v17, v18);
          uint64_t v16 = v17 - v18;
          if (!v19) {
            goto LABEL_22;
          }
          goto LABEL_135;
        case 3uLL:
          goto LABEL_22;
        default:
          uint64_t v16 = BYTE6(v8);
          goto LABEL_22;
      }
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_138;
          }
          uint64_t v31 = v12;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v7, v8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v112, v12);
          uint64_t v105 = v7;
          BOOL v108 = v8;
          outlined copy of Data._Representation(v7, v8);
          uint64_t v32 = __DataStorage._bytes.getter();
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v7, v34)) {
              goto LABEL_140;
            }
            uint64_t v35 = (const void *)(v33 + (int)v7 - v34);
          }
          else
          {
            uint64_t v35 = 0;
          }
          __DataStorage._length.getter();
          uint64_t v49 = v108;
          if (!v20)
          {
            uint64_t v78 = v112;
            __s1[0] = v112;
            LOWORD(__s1[1]) = v31;
            BYTE2(__s1[1]) = BYTE2(v31);
            BYTE3(__s1[1]) = BYTE3(v31);
            BYTE4(__s1[1]) = BYTE4(v31);
            BYTE5(__s1[1]) = BYTE5(v31);
            if (!v35) {
              goto LABEL_161;
            }
            uint64_t v71 = memcmp(v35, __s1, BYTE6(v31));
            goto LABEL_130;
          }
          if (v20 == 1)
          {
            if (v112 >> 32 < (int)v112) {
              goto LABEL_149;
            }
            swift_retain();
            uint64_t v54 = __DataStorage._bytes.getter();
            if (v54)
            {
              uint64_t v55 = v54;
              uint64_t v56 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v112, v56)) {
                goto LABEL_156;
              }
              uint64_t v57 = (const void *)(v55 + (int)v112 - v56);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v97 = __DataStorage._length.getter();
            if (v97 >= (v112 >> 32) - (int)v112) {
              char v98 = (v112 >> 32) - (int)v112;
            }
            else {
              char v98 = v97;
            }
            uint64_t v49 = v108;
            if (!v35) {
              goto LABEL_169;
            }
            if (!v57) {
              goto LABEL_170;
            }
            uint64_t v71 = memcmp(v35, v57, v98);
            uint64_t v78 = v112;
            outlined consume of Data._Representation(v112, v31);
LABEL_130:
            char v92 = v105;
            outlined consume of Data._Representation(v105, v49);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v78, v31);
            swift_bridgeObjectRelease();
LABEL_131:
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v92, v49);
            if (v71) {
              return 0;
            }
            goto LABEL_6;
          }
          BOOL v79 = *(void *)(v112 + 16);
          unint64_t v111 = *(void *)(v112 + 24);
          swift_retain();
          swift_retain();
          uint64_t v80 = __DataStorage._bytes.getter();
          if (v80)
          {
            unint64_t v81 = v80;
            unint64_t v82 = __DataStorage._offset.getter();
            if (__OFSUB__(v79, v82)) {
              goto LABEL_155;
            }
            char v83 = (const void *)(v81 + v79 - v82);
          }
          else
          {
            char v83 = 0;
          }
          uint64_t v19 = __OFSUB__(v111, v79);
          uint64_t v93 = v111 - v79;
          if (v19) {
            goto LABEL_150;
          }
          char v94 = __DataStorage._length.getter();
          if (v94 >= v93) {
            uint64_t v95 = v93;
          }
          else {
            uint64_t v95 = v94;
          }
          if (!v35) {
            goto LABEL_167;
          }
          if (!v83) {
            goto LABEL_168;
          }
          BOOL v96 = memcmp(v35, v83, v95);
          swift_release();
          swift_release();
          outlined consume of Data._Representation(v105, v108);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v112, v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v105, v108);
          if (v96) {
            return 0;
          }
LABEL_6:
          v3 += 6;
          v4 += 6;
          uint64_t v2 = v109 - 1;
          if (v109 == 1) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v36 = v7;
          char v100 = *(void *)(v7 + 16);
          char v37 = v11;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          long long v107 = v8;
          outlined copy of Data._Representation(v36, v8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v37, v12);
          uint64_t v106 = v36;
          swift_retain();
          swift_retain();
          uint64_t v38 = __DataStorage._bytes.getter();
          if (v38)
          {
            uint64_t v39 = v38;
            uint64_t v40 = __DataStorage._offset.getter();
            if (__OFSUB__(v100, v40)) {
              goto LABEL_139;
            }
            uint64_t v41 = (const void *)(v39 + v100 - v40);
          }
          else
          {
            uint64_t v41 = 0;
          }
          __DataStorage._length.getter();
          uint64_t v49 = v107;
          if (!v20)
          {
            uint64_t v69 = v110;
            uint64_t v70 = v112;
            __s1[0] = v112;
            LODWORD(__s1[1]) = v110;
            WORD2(__s1[1]) = WORD2(v110);
            if (!v41) {
              goto LABEL_160;
            }
            uint64_t v71 = memcmp(v41, __s1, BYTE6(v110));
LABEL_113:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            char v92 = v106;
            swift_release();
            outlined consume of Data._Representation(v70, v69);
            swift_bridgeObjectRelease();
            goto LABEL_131;
          }
          if (v20 == 1)
          {
            if (v112 >> 32 < (int)v112) {
              goto LABEL_143;
            }
            swift_retain();
            uint64_t v50 = __DataStorage._bytes.getter();
            if (v50)
            {
              uint64_t v51 = v50;
              uint64_t v52 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v112, v52)) {
                goto LABEL_154;
              }
              uint64_t v53 = (const void *)(v51 + (int)v112 - v52);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v90 = __DataStorage._length.getter();
            if (v90 >= (v112 >> 32) - (int)v112) {
              uint64_t v91 = (v112 >> 32) - (int)v112;
            }
            else {
              uint64_t v91 = v90;
            }
            uint64_t v49 = v107;
            if (!v41) {
              goto LABEL_165;
            }
            if (!v53) {
              goto LABEL_166;
            }
            uint64_t v71 = memcmp(v41, v53, v91);
            uint64_t v69 = v110;
            uint64_t v70 = v112;
            outlined consume of Data._Representation(v112, v110);
            goto LABEL_113;
          }
          uint64_t v72 = *(void *)(v112 + 16);
          uint64_t v73 = *(void *)(v112 + 24);
          swift_retain();
          swift_retain();
          char v74 = __DataStorage._bytes.getter();
          if (v74)
          {
            unint64_t v75 = v74;
            char v76 = __DataStorage._offset.getter();
            if (__OFSUB__(v72, v76)) {
              goto LABEL_153;
            }
            unint64_t v77 = (const void *)(v75 + v72 - v76);
          }
          else
          {
            unint64_t v77 = 0;
          }
          uint64_t v19 = __OFSUB__(v73, v72);
          uint64_t v87 = v73 - v72;
          if (v19) {
            goto LABEL_148;
          }
          uint64_t v88 = __DataStorage._length.getter();
          if (v88 >= v87) {
            uint64_t v89 = v87;
          }
          else {
            uint64_t v89 = v88;
          }
          if (!v41) {
            goto LABEL_163;
          }
          if (!v77) {
            goto LABEL_164;
          }
          char v85 = memcmp(v41, v77, v89);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined consume of Data._Representation(v112, v110);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v86 = v36;
LABEL_104:
          outlined consume of Data._Representation(v86, v107);
          if (v85) {
            return 0;
          }
          goto LABEL_6;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v20) {
            goto LABEL_54;
          }
          long long v107 = v8;
          uint64_t v104 = v7;
          if (v20 == 1)
          {
            char v42 = (int)v11;
            uint64_t v25 = (v11 >> 32) - (int)v11;
            if (v11 >> 32 < (int)v11) {
              goto LABEL_142;
            }
            uint64_t v43 = v11;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v7, v107);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v43, v12);
            outlined copy of Data._Representation(v43, v12);
            uint64_t v44 = __DataStorage._bytes.getter();
            if (!v44) {
              goto LABEL_158;
            }
            uint64_t v28 = v44;
            uint64_t v45 = __DataStorage._offset.getter();
            uint64_t v30 = v42 - v45;
            if (__OFSUB__(v42, v45)) {
              goto LABEL_147;
            }
LABEL_49:
            uint64_t v46 = __DataStorage._length.getter();
            if (v46 >= v25) {
              uint64_t v47 = v25;
            }
            else {
              uint64_t v47 = v46;
            }
            uint64_t v48 = memcmp(__s1, (const void *)(v28 + v30), v47);
            outlined consume of Data._Representation(v112, v110);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v112, v110);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v104, v107);
            if (v48) {
              return 0;
            }
            goto LABEL_6;
          }
          BOOL v64 = *(void *)(v11 + 16);
          uint64_t v103 = *(void *)(v11 + 24);
          uint64_t v65 = v11;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v7, v107);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v65, v12);
          swift_retain();
          swift_retain();
          uint64_t v63 = (char *)__DataStorage._bytes.getter();
          if (v63)
          {
            unint64_t v66 = __DataStorage._offset.getter();
            if (__OFSUB__(v64, v66)) {
              goto LABEL_152;
            }
            v63 += v64 - v66;
          }
          char v67 = v103 - v64;
          if (__OFSUB__(v103, v64)) {
            goto LABEL_144;
          }
          unint64_t v68 = __DataStorage._length.getter();
          if (!v63) {
            goto LABEL_159;
          }
LABEL_92:
          if (v68 >= v67) {
            char v84 = v67;
          }
          else {
            char v84 = v68;
          }
          char v85 = memcmp(__s1, v63, v84);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          outlined consume of Data._Representation(v112, v110);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v86 = v104;
          goto LABEL_104;
        default:
          __s1[0] = v7;
          LOWORD(__s1[1]) = v8;
          BYTE2(__s1[1]) = BYTE2(v8);
          BYTE3(__s1[1]) = BYTE3(v8);
          BYTE4(__s1[1]) = BYTE4(v8);
          BYTE5(__s1[1]) = BYTE5(v8);
          if (!v20)
          {
LABEL_54:
            __s2 = v11;
            char v114 = v12;
            uint64_t v115 = BYTE2(v12);
            uint64_t v116 = BYTE3(v12);
            uint64_t v117 = BYTE4(v12);
            uint64_t v118 = BYTE5(v12);
            if (memcmp(__s1, &__s2, BYTE6(v12))) {
              return 0;
            }
            goto LABEL_6;
          }
          long long v107 = v8;
          uint64_t v104 = v7;
          if (v20 == 1)
          {
            uint64_t v24 = (int)v11;
            uint64_t v25 = (v11 >> 32) - (int)v11;
            if (v11 >> 32 < (int)v11) {
              goto LABEL_141;
            }
            char v26 = v11;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v7, v107);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v26, v12);
            outlined copy of Data._Representation(v26, v12);
            uint64_t v27 = __DataStorage._bytes.getter();
            if (!v27)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_158:
              __DataStorage._length.getter();
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
              JUMPOUT(0x25F803484);
            }
            uint64_t v28 = v27;
            uint64_t v29 = __DataStorage._offset.getter();
            uint64_t v30 = v24 - v29;
            if (__OFSUB__(v24, v29)) {
              goto LABEL_146;
            }
            goto LABEL_49;
          }
          BOOL v101 = *(void *)(v11 + 24);
          uint64_t v102 = *(void *)(v11 + 16);
          uint64_t v58 = v11;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v7, v8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v58, v12);
          swift_retain();
          swift_retain();
          int64_t v59 = __DataStorage._bytes.getter();
          if (v59)
          {
            char v60 = v59;
            uint64_t v61 = __DataStorage._offset.getter();
            char v62 = v102;
            if (__OFSUB__(v102, v61)) {
              goto LABEL_151;
            }
            uint64_t v63 = (char *)(v60 + v102 - v61);
          }
          else
          {
            uint64_t v63 = 0;
            char v62 = v102;
          }
          char v67 = v101 - v62;
          if (__OFSUB__(v101, v62)) {
            goto LABEL_145;
          }
          unint64_t v68 = __DataStorage._length.getter();
          if (!v63) {
            goto LABEL_162;
          }
          goto LABEL_92;
      }
    }
  }
  return 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t StreamingRequest.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StreamingRequest(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of DocumentResourceEnvelope(v2, (uint64_t)v12, type metadata accessor for StreamingRequest);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v6, type metadata accessor for CompletePromptTemplateRequest);
      Hasher._combine(_:)(1uLL);
      CompletePromptTemplateRequest.hash(into:)(a1);
      return outlined destroy of DocumentResourceEnvelope((uint64_t)v6, type metadata accessor for CompletePromptTemplateRequest);
    }
    else
    {
      uint64_t v15 = *v12;
      uint64_t v17 = v12[6];
      uint64_t v16 = v12[7];
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v17)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v9, type metadata accessor for CompletePromptRequest);
    Hasher._combine(_:)(0);
    CompletePromptRequest.hash(into:)(a1);
    return outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for CompletePromptRequest);
  }
}

uint64_t StreamingRequest.encode(to:)(void *a1)
{
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.RegisterDocumentCodingKeys>);
  uint64_t v32 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  char v42 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.CompletePromptTemplateCodingKeys>);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v39 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v37);
  uint64_t v38 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.CompletePromptCodingKeys>);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v34 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v33);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StreamingRequest(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope(v52, (uint64_t)v12, type metadata accessor for StreamingRequest);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v52 = v14;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = v38;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v38, type metadata accessor for CompletePromptTemplateRequest);
      LOBYTE(v44) = 1;
      lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys();
      uint64_t v19 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v20 = v41;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v20);
      outlined destroy of DocumentResourceEnvelope(v18, type metadata accessor for CompletePromptTemplateRequest);
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v16, v13);
    }
    else
    {
      uint64_t v24 = *v12;
      uint64_t v25 = v12[2];
      uint64_t v40 = v12[1];
      uint64_t v41 = v25;
      uint64_t v26 = v12[4];
      uint64_t v39 = (char *)v12[3];
      uint64_t v27 = v12[5];
      uint64_t v28 = v12[6];
      uint64_t v29 = v12[7];
      LOBYTE(v44) = 2;
      lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys();
      uint64_t v30 = v42;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v38 = v24;
      uint64_t v44 = v24;
      uint64_t v45 = v40;
      uint64_t v46 = v41;
      uint64_t v47 = v39;
      uint64_t v48 = v26;
      uint64_t v49 = v27;
      uint64_t v50 = v28;
      uint64_t v51 = v29;
      lazy protocol witness table accessor for type RegisterDocumentRequest and conformance RegisterDocumentRequest();
      uint64_t v31 = v43;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v9, type metadata accessor for CompletePromptRequest);
    LOBYTE(v44) = 0;
    lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
    uint64_t v22 = v34;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
    uint64_t v23 = v36;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v23);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for CompletePromptRequest);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t StreamingRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.RegisterDocumentCodingKeys>);
  uint64_t v59 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v65 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.CompletePromptTemplateCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v58 = v5;
  MEMORY[0x270FA5388](v4);
  BOOL v64 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.CompletePromptCodingKeys>);
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  MEMORY[0x270FA5388](v7);
  char v62 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.CodingKeys>);
  uint64_t v61 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for StreamingRequest(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v50 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v50 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = a1[3];
  unint64_t v66 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  uint64_t v24 = v72;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24) {
    goto LABEL_9;
  }
  uint64_t v51 = v20;
  uint64_t v52 = v17;
  uint64_t v50 = v14;
  uint64_t v25 = v62;
  uint64_t v27 = v64;
  uint64_t v26 = v65;
  uint64_t v53 = v22;
  uint64_t v72 = v11;
  uint64_t v28 = v63;
  uint64_t v29 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v29 + 16) != 1)
  {
    uint64_t v30 = v10;
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v33 = v72;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x263F8DCB0], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v28);
LABEL_9:
    uint64_t v39 = (uint64_t)v66;
    return __swift_destroy_boxed_opaque_existential_1Tm(v39);
  }
  if (*(unsigned char *)(v29 + 32))
  {
    if (*(unsigned char *)(v29 + 32) == 1)
    {
      LOBYTE(v67) = 1;
      lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for CompletePromptTemplateRequest(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v37 = (uint64_t)v52;
      uint64_t v38 = v57;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v28);
      uint64_t v39 = (uint64_t)v66;
      swift_storeEnumTagMultiPayload();
      uint64_t v40 = v37;
    }
    else
    {
      BOOL v64 = (char *)v29;
      LOBYTE(v67) = 2;
      lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v62 = v10;
      lazy protocol witness table accessor for type RegisterDocumentRequest and conformance RegisterDocumentRequest();
      uint64_t v43 = v54;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v39 = (uint64_t)v66;
      uint64_t v44 = v61;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v26, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v62, v28);
      long long v45 = v68;
      uint64_t v46 = v69;
      uint64_t v47 = v71;
      uint64_t v48 = v50;
      *uint64_t v50 = v67;
      v48[1] = v45;
      *((void *)v48 + 4) = v46;
      *(_OWORD *)((char *)v48 + 40) = v70;
      *((void *)v48 + 7) = v47;
      swift_storeEnumTagMultiPayload();
      uint64_t v40 = (uint64_t)v48;
    }
  }
  else
  {
    LOBYTE(v67) = 0;
    lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
    uint64_t v34 = v28;
    uint64_t v35 = v25;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for CompletePromptRequest(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
    uint64_t v41 = (uint64_t)v51;
    uint64_t v42 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v35, v42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v34);
    uint64_t v39 = (uint64_t)v66;
    swift_storeEnumTagMultiPayload();
    uint64_t v40 = v41;
  }
  uint64_t v49 = (uint64_t)v53;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v40, (uint64_t)v53, type metadata accessor for StreamingRequest);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v49, v60, type metadata accessor for StreamingRequest);
  return __swift_destroy_boxed_opaque_existential_1Tm(v39);
}

uint64_t OneShotRequest.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CompletePromptTemplateCodingKeys>);
  uint64_t v55 = *(char **)(v2 - 8);
  uint64_t v56 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v54 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v51);
  uint64_t v53 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CompletePromptCodingKeys>);
  uint64_t v50 = *(char **)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v49 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v47);
  uint64_t v48 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CountTokensPromptTemplateCodingKeys>);
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v44 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  MEMORY[0x270FA5388](v43);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CountTokensCodingKeys>);
  uint64_t v41 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OneShotRequest(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char **)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CodingKeys>);
  uint64_t v57 = *(void *)(v15 - 8);
  uint64_t v58 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys();
  uint64_t v18 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v70, (uint64_t)v14, type metadata accessor for OneShotRequest);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, (uint64_t)v9, type metadata accessor for CountTokensPromptTemplateRequest);
      LOBYTE(v59) = 1;
      lazy protocol witness table accessor for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys();
      uint64_t v38 = v44;
      uint64_t v31 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest and conformance CountTokensPromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CountTokensPromptTemplateRequest);
      uint64_t v39 = v46;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v39);
      uint64_t v36 = type metadata accessor for CountTokensPromptTemplateRequest;
      uint64_t v37 = (uint64_t)v9;
      goto LABEL_7;
    case 2u:
      uint64_t v29 = (uint64_t)v48;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, (uint64_t)v48, type metadata accessor for CompletePromptRequest);
      LOBYTE(v59) = 2;
      lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys();
      uint64_t v30 = v49;
      uint64_t v31 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
      uint64_t v32 = v52;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*((void (**)(char *, uint64_t))v50 + 1))(v30, v32);
      uint64_t v33 = type metadata accessor for CompletePromptRequest;
      goto LABEL_5;
    case 3u:
      uint64_t v29 = v53;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, v53, type metadata accessor for CompletePromptTemplateRequest);
      LOBYTE(v59) = 3;
      lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys();
      uint64_t v34 = v54;
      uint64_t v31 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v35 = v56;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*((void (**)(char *, uint64_t))v55 + 1))(v34, v35);
      uint64_t v33 = type metadata accessor for CompletePromptTemplateRequest;
LABEL_5:
      uint64_t v36 = v33;
      uint64_t v37 = v29;
LABEL_7:
      outlined destroy of DocumentResourceEnvelope(v37, v36);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, v31);
      break;
    default:
      uint64_t v19 = *v14;
      long long v70 = v14[1];
      uint64_t v20 = (uint64_t)v70;
      uint64_t v21 = v14[2];
      uint64_t v54 = v19;
      uint64_t v55 = v21;
      uint64_t v50 = v14[3];
      uint64_t v22 = (uint64_t)v14[4];
      uint64_t v23 = v14[5];
      uint64_t v52 = (uint64_t)v14[6];
      uint64_t v53 = v22;
      uint64_t v48 = v14[7];
      uint64_t v24 = (uint64_t)v14[9];
      uint64_t v51 = (uint64_t)v14[8];
      uint64_t v56 = v24;
      uint64_t v49 = v14[10];
      LOBYTE(v59) = 0;
      lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
      uint64_t v25 = v58;
      uint64_t v26 = v18;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v59 = v54;
      uint64_t v60 = v20;
      uint64_t v61 = v21;
      char v62 = v50;
      uint64_t v63 = v53;
      BOOL v64 = v23;
      uint64_t v65 = v52;
      uint64_t v66 = (uint64_t)v48;
      uint64_t v67 = v51;
      uint64_t v68 = v24;
      uint64_t v69 = v49;
      lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest();
      uint64_t v27 = v42;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v27);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v26, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t OneShotRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CompletePromptTemplateCodingKeys>);
  uint64_t v65 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v67 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CompletePromptCodingKeys>);
  uint64_t v64 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v72 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CountTokensPromptTemplateCodingKeys>);
  uint64_t v60 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v71 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CountTokensCodingKeys>);
  uint64_t v58 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v69 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CodingKeys>);
  uint64_t v68 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for OneShotRequest(0);
  uint64_t v9 = MEMORY[0x270FA5388](v73);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v55 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v55 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v55 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v23 = a1[3];
  char v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys();
  uint64_t v24 = (uint64_t)v82;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24) {
    goto LABEL_6;
  }
  uint64_t v55 = v20;
  uint64_t v56 = v17;
  uint64_t v25 = v14;
  uint64_t v57 = v11;
  uint64_t v27 = v69;
  uint64_t v26 = v70;
  uint64_t v28 = v71;
  uint64_t v29 = v72;
  unint64_t v82 = v22;
  uint64_t v30 = v73;
  uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v31 + 16) != 1)
  {
    uint64_t v32 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v34 = v30;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x263F8DCB0], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v8, v26);
LABEL_6:
    uint64_t v35 = (uint64_t)v74;
    return __swift_destroy_boxed_opaque_existential_1Tm(v35);
  }
  switch(*(unsigned char *)(v31 + 32))
  {
    case 1:
      LOBYTE(v75) = 1;
      lazy protocol witness table accessor for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for CountTokensPromptTemplateRequest(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CountTokensPromptTemplateRequest and conformance CountTokensPromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CountTokensPromptTemplateRequest);
      uint64_t v46 = (uint64_t)v56;
      uint64_t v47 = v61;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v28, v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v8, v26);
      uint64_t v35 = (uint64_t)v74;
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = (uint64_t)v82;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v46, (uint64_t)v82, type metadata accessor for OneShotRequest);
      goto LABEL_12;
    case 2:
      uint64_t v71 = (char *)v31;
      LOBYTE(v75) = 2;
      lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v49 = v26;
      type metadata accessor for CompletePromptRequest(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptRequest);
      uint64_t v50 = v62;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v51 = v68;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v29, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v49);
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = (uint64_t)v25;
      goto LABEL_11;
    case 3:
      LOBYTE(v75) = 3;
      lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys();
      uint64_t v37 = v67;
      uint64_t v38 = v26;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for CompletePromptTemplateRequest(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest, (void (*)(uint64_t))type metadata accessor for CompletePromptTemplateRequest);
      uint64_t v52 = (uint64_t)v57;
      uint64_t v53 = v63;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v54 = v68;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v38);
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = v52;
      goto LABEL_11;
    default:
      LOBYTE(v75) = 0;
      lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest();
      uint64_t v39 = v59;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v8, v26);
      long long v40 = v77;
      long long v41 = v78;
      uint64_t v42 = v79;
      uint64_t v43 = v81;
      uint64_t v44 = v55;
      *uint64_t v55 = v75;
      *(_OWORD *)(v44 + 1) = v76;
      *(_OWORD *)(v44 + 3) = v40;
      *(_OWORD *)(v44 + 5) = v41;
      v44[7] = v42;
      *((_OWORD *)v44 + 4) = v80;
      v44[10] = v43;
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = (uint64_t)v44;
LABEL_11:
      uint64_t v48 = (uint64_t)v82;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v45, (uint64_t)v82, type metadata accessor for OneShotRequest);
      uint64_t v35 = (uint64_t)v74;
LABEL_12:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v48, v66, type metadata accessor for OneShotRequest);
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v35);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StreamingRequest.CodingKeys()
{
  unint64_t v1 = 0xD000000000000016;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6574656C706D6F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StreamingRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized StreamingRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance StreamingRequest.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StreamingRequest.CompletePromptCodingKeys()
{
  return 12383;
}

void protocol witness for CodingKey.init(intValue:) in conformance StreamingRequest.CompletePromptCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.RegisterDocumentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.RegisterDocumentCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))StreamingRequest.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))StreamingRequest.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance StreamingRequest@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return StreamingRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StreamingRequest(void *a1)
{
  return StreamingRequest.encode(to:)(a1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance OneShotRequest.CodingKeys()
{
  unint64_t result = 0x6B6F54746E756F63;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x6574656C706D6F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance OneShotRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized OneShotRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance OneShotRequest.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CompletePromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CompletePromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CountTokensCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CountTokensCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CountTokensPromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CountTokensPromptTemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneShotRequest.CountTokensPromptTemplateCodingKeys and conformance OneShotRequest.CountTokensPromptTemplateCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OneShotRequest()
{
  Hasher.init(_seed:)();
  OneShotRequest.hash(into:)((uint64_t)v1, type metadata accessor for OneShotRequest, type metadata accessor for OneShotRequest);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OneShotRequest(uint64_t a1)
{
  return OneShotRequest.hash(into:)(a1, type metadata accessor for OneShotRequest, type metadata accessor for OneShotRequest);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OneShotRequest()
{
  Hasher.init(_seed:)();
  OneShotRequest.hash(into:)((uint64_t)v1, type metadata accessor for OneShotRequest, type metadata accessor for OneShotRequest);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance OneShotRequest@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return OneShotRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance OneShotRequest(void *a1)
{
  return OneShotRequest.encode(to:)(a1);
}

uint64_t RegisterDocumentRequest.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v5 = v1[6];
  uint64_t v4 = v1[7];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RegisterDocumentRequest.CodingKeys()
{
  if (*v0) {
    return 0x7461646174656D5FLL;
  }
  else {
    return 0x6E656D75636F645FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RegisterDocumentRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized RegisterDocumentRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegisterDocumentRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RegisterDocumentRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t RegisterDocumentRequest.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegisterDocumentRequest.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v18 = v1[2];
  uint64_t v19 = v8;
  uint64_t v10 = v1[3];
  uint64_t v16 = v1[4];
  uint64_t v17 = v10;
  uint64_t v11 = v1[5];
  uint64_t v14 = v1[6];
  uint64_t v15 = v11;
  uint64_t v13 = v1[7];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v20 = v9;
  char v27 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceEnvelope]);
  lazy protocol witness table accessor for type [DocumentResourceEnvelope] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    uint64_t v23 = v16;
    uint64_t v24 = v15;
    uint64_t v25 = v14;
    uint64_t v26 = v13;
    char v27 = 1;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int RegisterDocumentRequest.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t RegisterDocumentRequest.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RegisterDocumentRequest.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceEnvelope]);
  char v26 = 0;
  lazy protocol witness table accessor for type [DocumentResourceEnvelope] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v19;
  char v26 = 1;
  lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  uint64_t v14 = v23;
  uint64_t v15 = v24;
  uint64_t v16 = v25;
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v13;
  a2[5] = v14;
  a2[6] = v15;
  a2[7] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegisterDocumentRequest()
{
  uint64_t v1 = *v0;
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance RegisterDocumentRequest@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return RegisterDocumentRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RegisterDocumentRequest(void *a1)
{
  return RegisterDocumentRequest.encode(to:)(a1);
}

uint64_t RegisterDocumentResponseElement.registration.getter()
{
  uint64_t v1 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DocumentRegistration.Progress();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v0, (uint64_t)v11, type metadata accessor for DocumentRegistrationStatusEnvelope);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v11, v1);
      type metadata accessor for DocumentRegistrationEnvelope(0);
      static DocumentRegistration.finished(identifier:url:)();
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      type metadata accessor for DocumentRegistrationEnvelope(0);
      static DocumentRegistration.error(description:url:)();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    DocumentRegistration.Progress.init(progress:bytes:totalBytes:)();
    type metadata accessor for DocumentRegistrationEnvelope(0);
    static DocumentRegistration.registering(progress:url:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t DocumentRegistrationEnvelope.unseal()()
{
  uint64_t v1 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DocumentRegistration.Progress();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v0, (uint64_t)v11, type metadata accessor for DocumentRegistrationStatusEnvelope);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v11, v1);
      type metadata accessor for DocumentRegistrationEnvelope(0);
      static DocumentRegistration.finished(identifier:url:)();
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      type metadata accessor for DocumentRegistrationEnvelope(0);
      static DocumentRegistration.error(description:url:)();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    DocumentRegistration.Progress.init(progress:bytes:totalBytes:)();
    type metadata accessor for DocumentRegistrationEnvelope(0);
    static DocumentRegistration.registering(progress:url:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t DocumentRegistrationEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DocumentRegistration.InternalStatus();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  DocumentRegistration.internalStatus.getter();
  DocumentRegistrationStatusEnvelope.init(sealing:)((uint64_t)v10, a2);
  DocumentRegistration.url.getter();
  uint64_t v11 = type metadata accessor for DocumentRegistration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  uint64_t v12 = type metadata accessor for DocumentRegistrationEnvelope(0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + *(int *)(v12 + 20), v7, v4);
}

uint64_t RegisterDocumentResponseElement.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

BOOL static RegisterDocumentResponseElement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (specialized static DocumentRegistrationStatusEnvelope.== infix(_:_:)(a1, a2))
  {
    uint64_t v4 = type metadata accessor for DocumentRegistrationEnvelope(0);
    if (MEMORY[0x2611FEFF0](a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20))) {
      return 1;
    }
  }
  return result;
}

uint64_t static DocumentRegistrationEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (specialized static DocumentRegistrationStatusEnvelope.== infix(_:_:)(a1, a2))
  {
    type metadata accessor for DocumentRegistrationEnvelope(0);
    JUMPOUT(0x2611FEFF0);
  }
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RegisterDocumentResponseElement.CodingKeys()
{
  return 0x727473696765725FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RegisterDocumentResponseElement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x727473696765725FLL && a2 == 0xED00006E6F697461)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegisterDocumentResponseElement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RegisterDocumentResponseElement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t RegisterDocumentResponseElement.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegisterDocumentResponseElement.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for DocumentRegistrationEnvelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope and conformance DocumentRegistrationEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentRegistrationEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int RegisterDocumentResponseElement.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t RegisterDocumentResponseElement.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for DocumentRegistrationEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RegisterDocumentResponseElement.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RegisterDocumentResponseElement(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope and conformance DocumentRegistrationEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentRegistrationEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, (uint64_t)v11, type metadata accessor for DocumentRegistrationEnvelope);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, v13, type metadata accessor for RegisterDocumentResponseElement);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RegisterDocumentResponseElement()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RegisterDocumentResponseElement()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegisterDocumentResponseElement()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance RegisterDocumentResponseElement@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return RegisterDocumentResponseElement.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RegisterDocumentResponseElement(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegisterDocumentResponseElement.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for DocumentRegistrationEnvelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope and conformance DocumentRegistrationEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentRegistrationEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RegisterDocumentResponseElement(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (specialized static DocumentRegistrationStatusEnvelope.== infix(_:_:)(a1, a2))
  {
    uint64_t v4 = type metadata accessor for DocumentRegistrationEnvelope(0);
    if (MEMORY[0x2611FEFF0](a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20))) {
      return 1;
    }
  }
  return result;
}

uint64_t PromptEnvelope.unseal()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v44 = a5;
  uint64_t v45 = a1;
  uint64_t v59 = type metadata accessor for Prompt.ImageAttachment.Format();
  uint64_t v61 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v58 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Prompt.AttachmentContent();
  uint64_t v43 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  uint64_t v56 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for Prompt.Attachment();
  uint64_t v60 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for Prompt.SpecialToken();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v53 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  uint64_t v16 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = (void (**)(char *, void, uint64_t))type metadata accessor for Prompt.Delimiter();
  uint64_t v19 = (uint64_t)*(v51 - 1);
  MEMORY[0x270FA5388](v51);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v22 = *(void *)(a3 + 16);
  uint64_t v46 = a2;
  uint64_t v47 = a4;
  if (v22)
  {
    uint64_t v42 = v11;
    uint64_t v63 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    unint64_t v23 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v41 = a3;
    uint64_t v24 = a3 + v23;
    uint64_t v25 = *(void *)(v16 + 72);
    uint64_t v48 = v19 + 32;
    uint64_t v49 = v25;
    uint64_t v26 = v63;
    uint64_t v50 = v19;
    do
    {
      int64_t v62 = v22;
      outlined init with copy of DocumentResourceEnvelope(v24, (uint64_t)v18, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      outlined init with copy of Prompt.Rendering?((uint64_t)&v18[*(int *)(v52 + 32)], (uint64_t)v54, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Prompt.SpecialToken.init(identifier:instance:locale:)();
      Prompt.Delimiter.init(token:position:priority:)();
      outlined destroy of DocumentResourceEnvelope((uint64_t)v18, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1);
        uint64_t v26 = v63;
      }
      unint64_t v28 = *(void *)(v26 + 16);
      unint64_t v27 = *(void *)(v26 + 24);
      uint64_t v29 = v50;
      int64_t v30 = v62;
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        uint64_t v26 = v63;
      }
      *(void *)(v26 + 16) = v28 + 1;
      (*(void (**)(unint64_t, char *, void))(v29 + 32))(v26+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v28, v21, v51);
      uint64_t v63 = v26;
      v24 += v49;
      int64_t v22 = v30 - 1;
    }
    while (v22);
    swift_bridgeObjectRelease();
    a4 = v47;
    uint64_t v11 = v42;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = MEMORY[0x263F8EE78];
  }
  int64_t v31 = *(void *)(a4 + 16);
  if (v31)
  {
    uint64_t v49 = v26;
    uint64_t v63 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    uint64_t v32 = v63;
    LODWORD(v62) = *MEMORY[0x263F7FB50];
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 104);
    v61 += 104;
    LODWORD(v53) = *MEMORY[0x263F7FB48];
    LODWORD(v52) = *MEMORY[0x263F7FB68];
    uint64_t v50 = v60 + 32;
    uint64_t v51 = (void (**)(char *, void, uint64_t))(v43 + 104);
    uint64_t v33 = a4 + 64;
    uint64_t v34 = v56;
    do
    {
      uint64_t v35 = *(void *)(v33 - 24);
      unint64_t v36 = *(void *)(v33 - 16);
      if (*(unsigned char *)(v33 - 32)) {
        uint64_t v37 = v53;
      }
      else {
        uint64_t v37 = v62;
      }
      v54(v58, v37, v59);
      outlined copy of Data._Representation(v35, v36);
      outlined copy of Data._Representation(v35, v36);
      Prompt.ImageAttachment.init(format:data:)();
      (*v51)(v34, v52, v57);
      Prompt.Attachment.init(content:position:priority:)();
      outlined consume of Data._Representation(v35, v36);
      uint64_t v63 = v32;
      unint64_t v39 = *(void *)(v32 + 16);
      unint64_t v38 = *(void *)(v32 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        uint64_t v32 = v63;
      }
      v33 += 40;
      *(void *)(v32 + 16) = v39 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v32+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v39, v11, v55);
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  return Prompt.init(string:delimiters:attachments:)();
}

uint64_t CountTokensRequest.metadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v7 = v1[8];
  uint64_t v6 = v1[9];
  uint64_t v8 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v7;
  a1[5] = v6;
  a1[6] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t CountTokensRequest.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[9];
  uint64_t v6 = v1[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  specialized Array<A>.hash(into:)(a1, v3);
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CountTokensRequest.CodingKeys()
{
  if (*v0) {
    return 0x7461646174656D5FLL;
  }
  else {
    return 0x74706D6F72705FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CountTokensRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CountTokensRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CountTokensRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CountTokensRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CountTokensRequest.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CountTokensRequest.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  uint64_t v10 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v21 = v2[5];
  uint64_t v22 = v9;
  uint64_t v11 = v2[6];
  uint64_t v19 = v2[7];
  uint64_t v20 = v11;
  uint64_t v12 = v2[8];
  uint64_t v17 = v2[9];
  uint64_t v18 = v12;
  uint64_t v16 = v2[10];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v24 = v8;
  long long v25 = *(_OWORD *)(v2 + 1);
  uint64_t v26 = v10;
  char v30 = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  uint64_t v13 = v23;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v24 = v22;
    *(void *)&long long v25 = v21;
    *((void *)&v25 + 1) = v20;
    uint64_t v26 = v19;
    uint64_t v27 = v18;
    uint64_t v28 = v17;
    uint64_t v29 = v16;
    char v30 = 1;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int CountTokensRequest.hashValue.getter()
{
  long long v1 = *(_OWORD *)(v0 + 24);
  long long v2 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 80);
  v6[9] = *(void *)v0;
  long long v7 = *(_OWORD *)(v0 + 8);
  long long v8 = v1;
  long long v9 = v2;
  uint64_t v10 = v3;
  long long v11 = *(_OWORD *)(v0 + 64);
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  CountTokensRequest.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t CountTokensRequest.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CountTokensRequest.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v31 = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v25;
  uint64_t v22 = v24;
  uint64_t v11 = v26;
  uint64_t v10 = v27;
  char v31 = 1;
  lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
  uint64_t v23 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v24;
  uint64_t v12 = v25;
  uint64_t v14 = v26;
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  uint64_t v17 = v29;
  uint64_t v18 = v30;
  uint64_t v19 = v23;
  *a2 = v22;
  a2[1] = v19;
  a2[2] = v11;
  a2[3] = v10;
  a2[4] = v13;
  a2[5] = v12;
  a2[6] = v14;
  a2[7] = v15;
  a2[8] = v16;
  a2[9] = v17;
  a2[10] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CountTokensRequest()
{
  long long v1 = *(_OWORD *)(v0 + 24);
  long long v2 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 80);
  v6[9] = *(void *)v0;
  long long v7 = *(_OWORD *)(v0 + 8);
  long long v8 = v1;
  long long v9 = v2;
  uint64_t v10 = v3;
  long long v11 = *(_OWORD *)(v0 + 64);
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  CountTokensRequest.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CountTokensRequest()
{
  long long v1 = *(_OWORD *)(v0 + 24);
  long long v2 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 80);
  v6[9] = *(void *)v0;
  long long v7 = *(_OWORD *)(v0 + 8);
  long long v8 = v1;
  long long v9 = v2;
  uint64_t v10 = v3;
  long long v11 = *(_OWORD *)(v0 + 64);
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  CountTokensRequest.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CountTokensRequest@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return CountTokensRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CountTokensRequest(void *a1)
{
  return CountTokensRequest.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CountTokensRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  long long v8 = *((_OWORD *)a1 + 3);
  v19[0] = *((_OWORD *)a1 + 2);
  v19[1] = v8;
  id v19[2] = *((_OWORD *)a1 + 4);
  uint64_t v20 = a1[10];
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  long long v13 = *((_OWORD *)a2 + 2);
  long long v14 = *((_OWORD *)a2 + 3);
  long long v15 = *((_OWORD *)a2 + 4);
  uint64_t v22 = a2[10];
  v21[1] = v14;
  id v21[2] = v15;
  v21[0] = v13;
  if (v4 == v9 && v5 == v10 || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), v17 = 0, (v16 & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(v6, v12) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v7, v11) & 1) != 0)
    {
      char v17 = specialized static RequestMetadataEnvelope.== infix(_:_:)(v19, v21);
    }
    else
    {
      char v17 = 0;
    }
  }
  return v17 & 1;
}

uint64_t CountTokensResponse.count.getter()
{
  return *(void *)v0;
}

uint64_t CountTokensResponse.count.setter(uint64_t result)
{
  *long long v1 = result;
  return result;
}

uint64_t (*CountTokensResponse.count.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t CountTokensResponse.renderedPrompt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Prompt.Rendering.Source();
  MEMORY[0x270FA5388](v3 - 8);
  if (*(void *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Prompt.Rendering.Source.init(identifier:version:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:detokenizedString:)();
    uint64_t v4 = type metadata accessor for Prompt.Rendering();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
  }
  else
  {
    uint64_t v6 = type metadata accessor for Prompt.Rendering();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    return v7(a1, 1, 1, v6);
  }
}

uint64_t CountTokensResponse.init(count:renderedPrompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v5 = type metadata accessor for Prompt.Rendering();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  MEMORY[0x270FA5388](v12 - 8);
  long long v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a2;
  outlined init with copy of Prompt.Rendering?(a2, (uint64_t)v14, &demangling cache variable for type metadata for Prompt.Rendering?);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v15 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v14, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    specialized PromptRenderingEnvelope.init(sealing:)((uint64_t)v9, v38);
    uint64_t v36 = v38[1];
    uint64_t v37 = v38[0];
    uint64_t v34 = v38[3];
    uint64_t v35 = v38[2];
    uint64_t v32 = v38[5];
    uint64_t v33 = v38[4];
    uint64_t v30 = v38[7];
    uint64_t v31 = v38[6];
    uint64_t v16 = v38[9];
    uint64_t v29 = v38[8];
    uint64_t v17 = v38[10];
    uint64_t v18 = v38[11];
    uint64_t v19 = v38[12];
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t result = outlined destroy of GenerativeFunctionsInstrumentationEvent?(v27, &demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v21 = v37;
  *a3 = v28;
  a3[1] = v21;
  uint64_t v22 = v35;
  a3[2] = v36;
  a3[3] = v22;
  uint64_t v23 = v33;
  a3[4] = v34;
  a3[5] = v23;
  uint64_t v24 = v31;
  a3[6] = v32;
  a3[7] = v24;
  uint64_t v25 = v29;
  a3[8] = v30;
  a3[9] = v25;
  a3[10] = v16;
  a3[11] = v17;
  a3[12] = v18;
  a3[13] = v19;
  return result;
}

void CountTokensResponse.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  Hasher._combine(_:)(*v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)(a1);
    outlined consume of PromptRenderingEnvelope?(v2, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CountTokensResponse.CodingKeys()
{
  if (*v0) {
    return 0x657265646E65725FLL;
  }
  else {
    return 0x746E756F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CountTokensResponse.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CountTokensResponse.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CountTokensResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CountTokensResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CountTokensResponse.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CountTokensResponse.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1[1];
  uint64_t v25 = v1[2];
  uint64_t v26 = v8;
  uint64_t v9 = v1[3];
  uint64_t v23 = v1[4];
  uint64_t v24 = v9;
  uint64_t v10 = v1[5];
  uint64_t v21 = v1[6];
  uint64_t v22 = v10;
  uint64_t v11 = v1[7];
  uint64_t v19 = v1[8];
  uint64_t v20 = v11;
  uint64_t v18 = v1[9];
  uint64_t v17 = v1[10];
  uint64_t v16 = v1[11];
  uint64_t v15 = v1[12];
  uint64_t v14 = v1[13];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v27 = v26;
    uint64_t v28 = v25;
    uint64_t v29 = v24;
    uint64_t v30 = v23;
    uint64_t v31 = v22;
    uint64_t v32 = v21;
    uint64_t v33 = v20;
    uint64_t v34 = v19;
    uint64_t v35 = v18;
    uint64_t v36 = v17;
    uint64_t v37 = v16;
    uint64_t v38 = v15;
    uint64_t v39 = v14;
    char v40 = 1;
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int CountTokensResponse.hashValue.getter()
{
  Swift::UInt v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Swift::UInt v6 = v0[5];
  Swift::UInt v7 = v0[6];
  Swift::UInt v8 = v0[7];
  Swift::UInt v9 = v0[8];
  Swift::UInt v14 = v0[10];
  Swift::UInt v15 = v0[9];
  Swift::UInt v12 = v0[12];
  Swift::UInt v13 = v0[11];
  Swift::UInt v11 = v0[13];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v3)
  {
    uint64_t v17 = v1;
    uint64_t v18 = v3;
    Swift::UInt v19 = v4;
    Swift::UInt v20 = v5;
    Swift::UInt v21 = v6;
    Swift::UInt v22 = v7;
    Swift::UInt v23 = v8;
    Swift::UInt v24 = v9;
    Swift::UInt v25 = v15;
    Swift::UInt v26 = v14;
    Swift::UInt v27 = v13;
    Swift::UInt v28 = v12;
    Swift::UInt v29 = v11;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v16);
    outlined consume of PromptRenderingEnvelope?(v1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t CountTokensResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CountTokensResponse.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v18[0]) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v20 = 1;
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v10 = v19;
    long long v11 = v18[0];
    long long v12 = v18[1];
    long long v13 = v18[2];
    long long v14 = v18[3];
    long long v15 = v18[4];
    long long v16 = v18[5];
    *(void *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v11;
    *(_OWORD *)(a2 + 24) = v12;
    *(_OWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 56) = v14;
    *(_OWORD *)(a2 + 72) = v15;
    *(_OWORD *)(a2 + 88) = v16;
    *(void *)(a2 + 104) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CountTokensResponse()
{
  Swift::UInt v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Swift::UInt v6 = v0[5];
  Swift::UInt v7 = v0[6];
  Swift::UInt v8 = v0[7];
  Swift::UInt v9 = v0[8];
  Swift::UInt v14 = v0[10];
  Swift::UInt v15 = v0[9];
  Swift::UInt v12 = v0[12];
  Swift::UInt v13 = v0[11];
  Swift::UInt v11 = v0[13];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v3)
  {
    uint64_t v17 = v1;
    uint64_t v18 = v3;
    Swift::UInt v19 = v4;
    Swift::UInt v20 = v5;
    Swift::UInt v21 = v6;
    Swift::UInt v22 = v7;
    Swift::UInt v23 = v8;
    Swift::UInt v24 = v9;
    Swift::UInt v25 = v15;
    Swift::UInt v26 = v14;
    Swift::UInt v27 = v13;
    Swift::UInt v28 = v12;
    Swift::UInt v29 = v11;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v16);
    outlined consume of PromptRenderingEnvelope?(v1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CountTokensResponse(uint64_t a1)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  Hasher._combine(_:)(*v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)(a1);
    outlined consume of PromptRenderingEnvelope?(v2, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CountTokensResponse()
{
  Swift::UInt v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Swift::UInt v6 = v0[5];
  Swift::UInt v7 = v0[6];
  Swift::UInt v8 = v0[7];
  Swift::UInt v9 = v0[8];
  Swift::UInt v14 = v0[10];
  Swift::UInt v15 = v0[9];
  Swift::UInt v12 = v0[12];
  Swift::UInt v13 = v0[11];
  Swift::UInt v11 = v0[13];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v3)
  {
    uint64_t v17 = v1;
    uint64_t v18 = v3;
    Swift::UInt v19 = v4;
    Swift::UInt v20 = v5;
    Swift::UInt v21 = v6;
    Swift::UInt v22 = v7;
    Swift::UInt v23 = v8;
    Swift::UInt v24 = v9;
    Swift::UInt v25 = v15;
    Swift::UInt v26 = v14;
    Swift::UInt v27 = v13;
    Swift::UInt v28 = v12;
    Swift::UInt v29 = v11;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v16);
    outlined consume of PromptRenderingEnvelope?(v1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CountTokensResponse@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CountTokensResponse.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CountTokensResponse(void *a1)
{
  return CountTokensResponse.encode(to:)(a1);
}

uint64_t CountTokensPromptTemplateRequest.promptTemplateInfo.getter()
{
  return CountTokensPromptTemplateRequest.promptTemplateInfo.getter(type metadata accessor for CountTokensPromptTemplateRequest);
}

uint64_t CountTokensPromptTemplateRequest.metadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for CountTokensPromptTemplateRequest(0) + 24));
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v7 = v3[5];
  uint64_t v9 = v3[6];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  a1[6] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t CountTokensPromptTemplateRequest.init(prompt:promptTemplateInfo:metadata:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v67 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PromptTemplateInfo();
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v65 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  uint64_t v11 = MEMORY[0x270FA5388](v64);
  uint64_t v63 = (uint64_t *)((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v66 = (uint64_t)&v55 - v13;
  uint64_t v14 = type metadata accessor for Prompt();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  Swift::UInt v20 = (char *)&v55 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v21 - 8);
  Swift::UInt v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a3;
  uint64_t v61 = a3[1];
  uint64_t v62 = v24;
  uint64_t v25 = a3[2];
  uint64_t v59 = a3[3];
  uint64_t v60 = v25;
  uint64_t v26 = a3[4];
  uint64_t v57 = a3[5];
  uint64_t v58 = v26;
  uint64_t v56 = a3[6];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v71 = a1;
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)v23, &demangling cache variable for type metadata for Prompt?);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v23, 1, v14);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v27 != 1)
  {
    (*(void (**)(char *, char *, uint64_t, void))(v15 + 32))(v20, v23, v14, 0);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
    uint64_t v30 = specialized PromptEnvelope.init(sealing:)((uint64_t)v18);
    uint64_t v31 = v34;
    uint64_t v32 = v35;
    uint64_t v33 = v36;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    uint64_t v29 = *(void *)a4;
    uint64_t v28 = *(void *)(a4 + 8);
  }
  outlined consume of PromptEnvelope?(v29, v28);
  *(void *)a4 = v30;
  *(void *)(a4 + 8) = v31;
  *(void *)(a4 + 16) = v32;
  *(void *)(a4 + 24) = v33;
  uint64_t v37 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  uint64_t v38 = (void *)(a4 + *(int *)(v37 + 24));
  uint64_t v39 = v61;
  *uint64_t v38 = v62;
  v38[1] = v39;
  uint64_t v40 = v59;
  long long v38[2] = v60;
  v38[3] = v40;
  uint64_t v41 = v57;
  v38[4] = v58;
  void v38[5] = v41;
  v38[6] = v56;
  uint64_t v43 = v68;
  uint64_t v42 = v69;
  uint64_t v44 = v65;
  uint64_t v45 = v70;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v70, v69);
  uint64_t v46 = PromptTemplateInfo.templateID.getter();
  uint64_t v47 = (uint64_t)v63;
  *uint64_t v63 = v46;
  *(void *)(v47 + 8) = v48;
  uint64_t v49 = PromptTemplateInfo.richVariableBindings.getter();
  uint64_t v50 = specialized _NativeDictionary.mapValues<A>(_:)(v49);
  swift_bridgeObjectRelease();
  *(void *)(v47 + 16) = v50;
  uint64_t v51 = (uint64_t)v67;
  PromptTemplateInfo.locale.getter();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v43 + 8);
  v52(v44, v42);
  outlined init with take of Locale?(v51, v47 + *(int *)(v64 + 24), &demangling cache variable for type metadata for Locale?);
  uint64_t v53 = v66;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v47, v66, type metadata accessor for PromptTemplateInfoEnvelope);
  v52(v45, v42);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v71, &demangling cache variable for type metadata for Prompt?);
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v53, a4 + *(int *)(v37 + 20), type metadata accessor for PromptTemplateInfoEnvelope);
}

uint64_t CountTokensPromptTemplateRequest.hash(into:)(uint64_t a1)
{
  Swift::UInt v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1[1];
  if (v11)
  {
    Swift::UInt v23 = v7;
    uint64_t v13 = v1[2];
    uint64_t v12 = v1[3];
    uint64_t v14 = *v1;
    Hasher._combine(_:)(1u);
    outlined copy of PromptEnvelope?(v14, v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    specialized Array<A>.hash(into:)(a1, v13);
    specialized Array<A>.hash(into:)(a1, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v23;
    outlined consume of PromptEnvelope?(v14, v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v15 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  uint64_t v16 = (char *)v1 + *(int *)(v15 + 20);
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)(a1, *((void *)v16 + 2));
  uint64_t v17 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  outlined init with copy of Prompt.Rendering?((uint64_t)&v16[*(int *)(v17 + 24)], (uint64_t)v10, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v18 = (char *)v2 + *(int *)(v15 + 24);
  uint64_t v19 = *((void *)v18 + 5);
  uint64_t v20 = *((void *)v18 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v19)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CountTokensPromptTemplateRequest.CodingKeys()
{
  unint64_t v1 = 0xD000000000000013;
  if (*v0 != 1) {
    unint64_t v1 = 0x7461646174656D5FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74706D6F72705FLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CountTokensPromptTemplateRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CountTokensPromptTemplateRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CountTokensPromptTemplateRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CountTokensPromptTemplateRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CountTokensPromptTemplateRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CountTokensPromptTemplateRequest.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v16 = *v3;
  long long v17 = v9;
  char v20 = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for CountTokensPromptTemplateRequest(0);
    LOBYTE(v16) = 1;
    type metadata accessor for PromptTemplateInfoEnvelope(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope, (void (*)(uint64_t))type metadata accessor for PromptTemplateInfoEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = (char *)v3 + *(int *)(v10 + 24);
    uint64_t v12 = *((void *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 3);
    uint64_t v14 = *((void *)v11 + 6);
    long long v16 = *(_OWORD *)v11;
    *(void *)&long long v17 = v12;
    *((void *)&v17 + 1) = v13;
    long long v18 = *((_OWORD *)v11 + 2);
    uint64_t v19 = v14;
    char v20 = 2;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int CountTokensPromptTemplateRequest.hashValue.getter()
{
  return CountTokensPromptTemplateRequest.hashValue.getter((void (*)(unsigned char *))CountTokensPromptTemplateRequest.hash(into:));
}

uint64_t CountTokensPromptTemplateRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CountTokensPromptTemplateRequest.CodingKeys>);
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for CountTokensPromptTemplateRequest(0);
  MEMORY[0x270FA5388](v22);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CountTokensPromptTemplateRequest.CodingKeys and conformance CountTokensPromptTemplateRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return outlined consume of PromptEnvelope?(*(void *)v11, *((void *)v11 + 1));
  }
  else
  {
    char v27 = 0;
    lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
    uint64_t v12 = v21;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v13 = v24;
    *(_OWORD *)uint64_t v11 = v23;
    *((_OWORD *)v11 + 1) = v13;
    LOBYTE(v23) = 1;
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope, (void (*)(uint64_t))type metadata accessor for PromptTemplateInfoEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v22;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v6, (uint64_t)&v11[*(int *)(v22 + 20)], type metadata accessor for PromptTemplateInfoEnvelope);
    char v27 = 2;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v12);
    long long v16 = v24;
    uint64_t v17 = v26;
    long long v18 = &v11[*(int *)(v15 + 24)];
    *(_OWORD *)long long v18 = v23;
    *((_OWORD *)v18 + 1) = v16;
    *((_OWORD *)v18 + 2) = v25;
    *((void *)v18 + 6) = v17;
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v11, v19, type metadata accessor for CountTokensPromptTemplateRequest);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return outlined destroy of DocumentResourceEnvelope((uint64_t)v11, type metadata accessor for CountTokensPromptTemplateRequest);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CountTokensPromptTemplateRequest(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))CountTokensPromptTemplateRequest.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CountTokensPromptTemplateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))CountTokensPromptTemplateRequest.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CountTokensPromptTemplateRequest@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CountTokensPromptTemplateRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CountTokensPromptTemplateRequest(void *a1)
{
  return CountTokensPromptTemplateRequest.encode(to:)(a1);
}

uint64_t key path getter for CompletePromptTemplateRequest.prompt : CompletePromptTemplateRequest@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if (v3)
  {
    PromptEnvelope.unseal()(*a1, v3, a1[2], a1[3], a2);
    uint64_t v4 = type metadata accessor for Prompt();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a2;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for Prompt();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }
  return v5(v7, v8, 1, v6);
}

uint64_t key path setter for CompletePromptTemplateRequest.prompt : CompletePromptTemplateRequest(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Prompt?);
  return CompletePromptTemplateRequest.prompt.setter((uint64_t)v4);
}

uint64_t CompletePromptTemplateRequest.prompt.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Prompt();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a1;
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)v12, &demangling cache variable for type metadata for Prompt?);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v12, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v13 = specialized PromptEnvelope.init(sealing:)((uint64_t)v7);
    uint64_t v14 = v17;
    uint64_t v15 = v18;
    uint64_t v16 = v19;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  outlined destroy of GenerativeFunctionsInstrumentationEvent?(v22, &demangling cache variable for type metadata for Prompt?);
  uint64_t result = outlined consume of PromptEnvelope?(*v1, v1[1]);
  *unint64_t v1 = v13;
  v1[1] = v14;
  v1[2] = v15;
  v1[3] = v16;
  return result;
}

void (*CompletePromptTemplateRequest.prompt.modify(void *a1))(uint64_t ***a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = type metadata accessor for Prompt();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[2] = v5;
  size_t v7 = *(void *)(v5 + 64);
  v3[3] = malloc(v7);
  v3[4] = malloc(v7);
  size_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?)
                             - 8)
                 + 64);
  v3[5] = malloc(v8);
  v3[6] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[7] = v9;
  uint64_t v10 = v1[1];
  if (v10)
  {
    PromptEnvelope.unseal()(*v1, v10, v1[2], v1[3], (uint64_t)v9);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v9, v11, 1, v4);
  return CompletePromptTemplateRequest.prompt.modify;
}

void CompletePromptTemplateRequest.prompt.modify(uint64_t ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[6];
  uint64_t v4 = (*a1)[7];
  if (a2)
  {
    uint64_t v6 = v2[4];
    uint64_t v5 = v2[5];
    size_t v7 = v2[3];
    outlined init with copy of Prompt.Rendering?((uint64_t)(*a1)[7], (uint64_t)v5, &demangling cache variable for type metadata for Prompt?);
    CompletePromptTemplateRequest.prompt.setter((uint64_t)v5);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v4, &demangling cache variable for type metadata for Prompt?);
  }
  else
  {
    size_t v8 = v2[1];
    uint64_t v9 = v2[2];
    outlined init with copy of Prompt.Rendering?((uint64_t)(*a1)[7], (uint64_t)v3, &demangling cache variable for type metadata for Prompt?);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t *))v9[6])(v3, 1, v8) == 1)
    {
      uint64_t v21 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v13 = (uint64_t)v2[3];
      uint64_t v14 = v2[4];
      uint64_t v15 = v2[1];
      uint64_t v16 = v2[2];
      ((void (*)(uint64_t *, uint64_t *, uint64_t *))v16[4])(v14, v2[6], v15);
      ((void (*)(uint64_t, uint64_t *, uint64_t *))v16[2])(v13, v14, v15);
      uint64_t v21 = specialized PromptEnvelope.init(sealing:)(v13);
      uint64_t v10 = v17;
      uint64_t v11 = v18;
      uint64_t v12 = v19;
      ((void (*)(uint64_t *, uint64_t *))v16[1])(v14, v15);
    }
    uint64_t v3 = v2[6];
    uint64_t v4 = v2[7];
    uint64_t v6 = v2[4];
    uint64_t v5 = v2[5];
    size_t v7 = v2[3];
    uint64_t v20 = *v2;
    outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v4, &demangling cache variable for type metadata for Prompt?);
    outlined consume of PromptEnvelope?(*v20, v20[1]);
    *uint64_t v20 = v21;
    v20[1] = v10;
    v20[2] = v11;
    v20[3] = v12;
  }
  free(v4);
  free(v3);
  free(v5);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t CompletePromptTemplateRequest.promptTemplateInfo.getter()
{
  return CountTokensPromptTemplateRequest.promptTemplateInfo.getter(type metadata accessor for CompletePromptTemplateRequest);
}

uint64_t CountTokensPromptTemplateRequest.promptTemplateInfo.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + *(int *)(a1(0) + 20);
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.mapValues<A>(_:)(v7);
  uint64_t v8 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  outlined init with copy of Prompt.Rendering?(v6 + *(int *)(v8 + 24), (uint64_t)v5, &demangling cache variable for type metadata for Locale?);
  return PromptTemplateInfo.init(templateID:richVariableBindings:locale:)();
}

uint64_t key path getter for CompletePromptTemplateRequest.promptTemplateInfo : CompletePromptTemplateRequest(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for CompletePromptTemplateRequest(0) + 20);
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.mapValues<A>(_:)(v6);
  uint64_t v7 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  outlined init with copy of Prompt.Rendering?(v5 + *(int *)(v7 + 24), (uint64_t)v4, &demangling cache variable for type metadata for Locale?);
  return PromptTemplateInfo.init(templateID:richVariableBindings:locale:)();
}

uint64_t key path setter for CompletePromptTemplateRequest.promptTemplateInfo : CompletePromptTemplateRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromptTemplateInfo();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return CompletePromptTemplateRequest.promptTemplateInfo.setter(v4);
}

uint64_t CompletePromptTemplateRequest.promptTemplateInfo.setter(char *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PromptTemplateInfo();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  uint64_t v10 = v9 - 8;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (void *)((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v22 - v14;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, a1, v5);
  *uint64_t v13 = PromptTemplateInfo.templateID.getter();
  v13[1] = v16;
  uint64_t v17 = PromptTemplateInfo.richVariableBindings.getter();
  uint64_t v18 = specialized _NativeDictionary.mapValues<A>(_:)(v17);
  swift_bridgeObjectRelease();
  void v13[2] = v18;
  PromptTemplateInfo.locale.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v8, v5);
  outlined init with take of Locale?((uint64_t)v4, (uint64_t)v13 + *(int *)(v10 + 32), &demangling cache variable for type metadata for Locale?);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v13, (uint64_t)v15, type metadata accessor for PromptTemplateInfoEnvelope);
  v19(a1, v5);
  uint64_t v20 = type metadata accessor for CompletePromptTemplateRequest(0);
  return outlined assign with take of PromptTemplateInfoEnvelope((uint64_t)v15, v22[0] + *(int *)(v20 + 20), type metadata accessor for PromptTemplateInfoEnvelope);
}

void (*CompletePromptTemplateRequest.promptTemplateInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for PromptTemplateInfo();
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  v3[5] = malloc(v8);
  uint64_t v9 = v1 + *(int *)(type metadata accessor for CompletePromptTemplateRequest(0) + 20);
  uint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.mapValues<A>(_:)(v10);
  uint64_t v11 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  outlined init with copy of Prompt.Rendering?(v9 + *(int *)(v11 + 24), (uint64_t)v5, &demangling cache variable for type metadata for Locale?);
  PromptTemplateInfo.init(templateID:richVariableBindings:locale:)();
  return CompletePromptTemplateRequest.promptTemplateInfo.modify;
}

void CompletePromptTemplateRequest.promptTemplateInfo.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(char **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = (void *)v2[1];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    CompletePromptTemplateRequest.promptTemplateInfo.setter(v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v7 = (void *)v2[1];
    CompletePromptTemplateRequest.promptTemplateInfo.setter(*(char **)(*(void *)a1 + 40));
  }
  free(v4);
  free(v3);
  free(v7);
  free(v2);
}

uint64_t CompletePromptTemplateRequest.parameters.getter@<X0>(uint64_t a1@<X8>)
{
  return SamplingParametersEnvelope.unseal()(a1);
}

uint64_t SamplingParametersEnvelope.unseal()@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v3 = *(unsigned char *)(v1 + 8);
  uint64_t v21 = *(void *)(v1 + 16);
  char v20 = *(unsigned char *)(v1 + 24);
  uint64_t v19 = *(void *)(v1 + 32);
  char v18 = *(unsigned char *)(v1 + 40);
  uint64_t v17 = *(void *)(v1 + 48);
  char v16 = *(unsigned char *)(v1 + 56);
  uint64_t v15 = *(void *)(v1 + 64);
  char v4 = *(unsigned char *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  char v7 = *(unsigned char *)(v1 + 96);
  double v8 = *(double *)(v1 + 104);
  char v9 = *(unsigned char *)(v1 + 112);
  uint64_t v10 = *(void *)(v1 + 120);
  char v11 = *(unsigned char *)(v1 + 128);
  char v14 = *(unsigned char *)(v1 + 129);
  if (v3 > 1u) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)v1;
  }
  uint64_t v22 = v12;
  unsigned __int8 v23 = v3;
  swift_bridgeObjectRetain();
  uint64_t result = SamplingParameters.init(strategy:temperature:frequencyPenalty:lengthPenalty:maximumTokens:stopSequences:randomSeed:timeout:)(&v22, v21, v20, v19, v18, v17, v16, v15, a1, v4, v6, v5, v7, v8, v9);
  *(void *)(a1 + 120) = v10;
  *(unsigned char *)(a1 + 128) = v11;
  *(unsigned char *)(a1 + 129) = 2;
  *(unsigned char *)(a1 + 130) = v14;
  return result;
}

uint64_t CompletePromptTemplateRequest.tools.getter()
{
  return CompletePromptTemplateRequest.tools.getter(type metadata accessor for CompletePromptTemplateRequest);
}

uint64_t ToolDescriptionEnvelope.unseal()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for GenerationSchema();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v12 - 8);
  char v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of DocumentResourceEnvelope(v2, (uint64_t)v14, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 2, v8);
  if (v18)
  {
    if (v18 == 1)
    {
      uint64_t v19 = type metadata accessor for FunctionDescription(0);
      char v20 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
      uint64_t v21 = v17;
      uint64_t v22 = 1;
    }
    else
    {
      uint64_t v19 = type metadata accessor for FunctionDescription(0);
      char v20 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
      uint64_t v21 = v17;
      uint64_t v22 = 2;
    }
    v20(v21, v22, 2, v19);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v14, (uint64_t)v11, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    uint64_t v24 = *(void *)v11;
    uint64_t v23 = *((void *)v11 + 1);
    uint64_t v30 = a1;
    uint64_t v25 = *((void *)v11 + 2);
    uint64_t v26 = *((void *)v11 + 3);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v11[*(int *)(v8 + 24)], v4);
    uint64_t v27 = type metadata accessor for FunctionDescription(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Schema.init(type:)();
    *uint64_t v17 = v24;
    v17[1] = v23;
    uint64_t v17[2] = v25;
    v17[3] = v26;
    a1 = v30;
    outlined destroy of DocumentResourceEnvelope((uint64_t)v11, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v17, 0, 2, v27);
  }
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v17, a1, type metadata accessor for ToolType);
}

uint64_t CompletePromptTemplateRequest.toolChoice.getter@<X0>(uint64_t a1@<X8>)
{
  return CompletePromptTemplateRequest.toolChoice.getter(type metadata accessor for CompletePromptTemplateRequest, a1);
}

uint64_t ToolChoiceEnvelope.unseal()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  switch(v1)
  {
    case 0:
      return static ToolChoice.none.getter();
    case 1:
      return static ToolChoice.automatic.getter();
    case 2:
      return static ToolChoice.required.getter();
  }
  return static ToolChoice.function(name:)();
}

uint64_t CompletePromptTemplateRequest.documents.getter()
{
  return CompletePromptTemplateRequest.documents.getter((void (*)(void))type metadata accessor for CompletePromptTemplateRequest);
}

uint64_t CompletePromptTemplateRequest.constraints.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CompletePromptTemplateRequest(0);
  return outlined init with copy of Prompt.Rendering?(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for Constraints?);
}

uint64_t CompletePromptTemplateRequest.metadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for CompletePromptTemplateRequest(0) + 44));
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v7 = v3[5];
  uint64_t v9 = v3[6];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  a1[6] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t CompletePromptTemplateRequest.init(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:constraint:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v196 = a7;
  uint64_t v193 = a6;
  uint64_t v195 = a5;
  uint64_t v198 = a4;
  uint64_t v201 = a2;
  uint64_t v200 = a1;
  uint64_t v12 = type metadata accessor for TokenGenerationOverrides();
  MEMORY[0x270FA5388](v12 - 8);
  unint64_t v194 = (char *)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = type metadata accessor for ToolChoice();
  uint64_t v191 = *(void *)(v192 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v192);
  unint64_t v157 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v156 = (char *)&v154 - v16;
  uint64_t v211 = type metadata accessor for GenerationSchema();
  uint64_t v162 = *(void *)(v211 - 8);
  MEMORY[0x270FA5388](v211);
  uint64_t v210 = (char *)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for Schema();
  uint64_t v161 = *(void *)(v209 - 8);
  MEMORY[0x270FA5388](v209);
  uint64_t v208 = (char *)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SchemaEnvelope(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v207 = (char *)&v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v160 = *(void *)(v221 - 8);
  MEMORY[0x270FA5388](v221);
  uint64_t v206 = (uint64_t *)((char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v224 = type metadata accessor for FunctionDescription(0);
  uint64_t v159 = *(void *)(v224 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v224);
  unint64_t v205 = (char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v204 = (uint64_t)&v154 - v24;
  uint64_t v25 = type metadata accessor for ToolType(0);
  uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v213 = (char *)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v212 = (char *)&v154 - v28;
  uint64_t v29 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v203 = (uint64_t)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v215 = (uint64_t)&v154 - v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v214 = (char *)&v154 - v34;
  uint64_t v35 = type metadata accessor for ToolDescriptionEnvelope(0);
  uint64_t v220 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35 - 8);
  *(void *)&long long v227 = (char *)&v154 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  MEMORY[0x270FA5388](v37 - 8);
  uint64_t v190 = (uint64_t)&v154 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = (void (**)(void, void, void, void))type metadata accessor for ToolType();
  uint64_t v223 = (uint64_t)*(v219 - 1);
  uint64_t v39 = MEMORY[0x270FA5388](v219);
  uint64_t v218 = (void (**)(char *, char *, uint64_t))((char *)&v154 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v39);
  unint64_t v217 = (void (**)(char *, uint64_t))((char *)&v154 - v41);
  uint64_t v42 = type metadata accessor for ToolDescription(0);
  uint64_t v222 = *(void *)(v42 - 8);
  uint64_t v43 = MEMORY[0x270FA5388](v42 - 8);
  uint64_t v226 = (uint64_t)&v154 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  uint64_t v225 = (uint64_t)&v154 - v46;
  MEMORY[0x270FA5388](v45);
  unint64_t v158 = (char *)&v154 - v47;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v48 - 8);
  v178 = (char *)&v154 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  MEMORY[0x270FA5388](v216);
  long long v164 = (uint64_t *)((char *)&v154 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v199 = type metadata accessor for PromptTemplateInfo();
  uint64_t v202 = *(void *)(v199 - 8);
  MEMORY[0x270FA5388](v199);
  uint64_t v188 = (char *)&v154 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Prompt();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v56 = (char *)&v154 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v54);
  uint64_t v58 = (char *)&v154 - v57;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x270FA5388](v59 - 8);
  uint64_t v61 = (char *)&v154 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = *a3;
  int v163 = *((unsigned __int8 *)a3 + 8);
  uint64_t v177 = a3[2];
  int v176 = *((unsigned __int8 *)a3 + 24);
  uint64_t v175 = a3[4];
  int v174 = *((unsigned __int8 *)a3 + 40);
  uint64_t v173 = a3[6];
  int v172 = *((unsigned __int8 *)a3 + 56);
  uint64_t v171 = a3[8];
  int v170 = *((unsigned __int8 *)a3 + 72);
  uint64_t v169 = a3[10];
  uint64_t v168 = a3[11];
  int v167 = *((unsigned __int8 *)a3 + 96);
  uint64_t v179 = a3[13];
  int v166 = *((unsigned __int8 *)a3 + 112);
  uint64_t v180 = a3[15];
  int v165 = *((unsigned __int8 *)a3 + 128);
  LODWORD(v189) = *((unsigned __int8 *)a3 + 130);
  uint64_t v187 = *a8;
  uint64_t v186 = a8[1];
  uint64_t v185 = a8[2];
  uint64_t v184 = a8[3];
  uint64_t v183 = a8[4];
  uint64_t v182 = a8[5];
  uint64_t v181 = a8[6];
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  outlined init with copy of Prompt.Rendering?(v200, (uint64_t)v61, &demangling cache variable for type metadata for Prompt?);
  uint64_t v62 = v52;
  int v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48))(v61, 1, v52);
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  if (v63 != 1)
  {
    (*(void (**)(char *, char *, uint64_t, void))(v53 + 32))(v58, v61, v62, 0);
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v56, v58, v62);
    uint64_t v70 = specialized PromptEnvelope.init(sealing:)((uint64_t)v56);
    uint64_t v67 = v71;
    uint64_t v68 = v72;
    uint64_t v69 = v73;
    uint64_t v66 = v70;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v58, v62);
    uint64_t v65 = *(void *)a9;
    uint64_t v64 = *(void *)(a9 + 8);
  }
  outlined consume of PromptEnvelope?(v65, v64);
  *(void *)a9 = v66;
  *(void *)(a9 + 8) = v67;
  *(void *)(a9 + 16) = v68;
  *(void *)(a9 + 24) = v69;
  uint64_t v74 = v202;
  uint64_t v75 = v188;
  uint64_t v76 = v199;
  (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v188, v201, v199);
  long long v77 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
  uint64_t v78 = a9 + v77[5];
  uint64_t v79 = PromptTemplateInfo.templateID.getter();
  uint64_t v80 = (uint64_t)v164;
  uint64_t *v164 = v79;
  *(void *)(v80 + 8) = v81;
  uint64_t v82 = PromptTemplateInfo.richVariableBindings.getter();
  uint64_t v83 = specialized _NativeDictionary.mapValues<A>(_:)(v82);
  swift_bridgeObjectRelease();
  *(void *)(v80 + 16) = v83;
  uint64_t v84 = (uint64_t)v178;
  PromptTemplateInfo.locale.getter();
  char v85 = *(char **)(v74 + 8);
  uint64_t v202 = v74 + 8;
  uint64_t v188 = v85;
  ((void (*)(char *, uint64_t))v85)(v75, v76);
  outlined init with take of Locale?(v84, v80 + *(int *)(v216 + 24), &demangling cache variable for type metadata for Locale?);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v80, v78, type metadata accessor for PromptTemplateInfoEnvelope);
  char v86 = v163;
  uint64_t v87 = v198;
  if (v163 > 1) {
    uint64_t v88 = 0;
  }
  else {
    uint64_t v88 = v155;
  }
  char v89 = v176;
  char v235 = v176;
  char v90 = v174;
  char v234 = v174;
  char v91 = v172;
  char v233 = v172;
  char v92 = v170;
  char v232 = v170;
  char v231 = v167;
  char v230 = v166;
  char v229 = v165;
  uint64_t v93 = a9 + v77[6];
  *(void *)uint64_t v93 = v88;
  *(unsigned char *)(v93 + 8) = v86;
  *(void *)(v93 + 16) = v177;
  *(unsigned char *)(v93 + 24) = v89;
  *(void *)(v93 + 32) = v175;
  *(unsigned char *)(v93 + 40) = v90;
  *(void *)(v93 + 48) = v173;
  *(unsigned char *)(v93 + 56) = v91;
  *(void *)(v93 + 64) = v171;
  *(unsigned char *)(v93 + 72) = v92;
  uint64_t v94 = v168;
  *(void *)(v93 + 80) = v169;
  *(void *)(v93 + 88) = v94;
  *(unsigned char *)(v93 + 96) = v231;
  *(void *)(v93 + 104) = v179;
  *(unsigned char *)(v93 + 112) = v230;
  *(void *)(v93 + 120) = v180;
  *(unsigned char *)(v93 + 128) = v229;
  *(unsigned char *)(v93 + 129) = (_BYTE)v189;
  uint64_t v189 = v77;
  uint64_t v95 = (void *)(a9 + v77[11]);
  uint64_t v96 = v186;
  *uint64_t v95 = v187;
  v95[1] = v96;
  uint64_t v97 = v184;
  v95[2] = v185;
  v95[3] = v97;
  uint64_t v98 = v182;
  v95[4] = v183;
  v95[5] = v98;
  v95[6] = v181;
  int64_t v99 = *(void *)(v87 + 16);
  uint64_t v100 = MEMORY[0x263F8EE78];
  uint64_t v197 = a9;
  if (v99)
  {
    *(void *)&long long v228 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99, 0);
    BOOL v101 = *(void (**)(void, void, void))(v223 + 16);
    uint64_t v102 = v87 + ((*(unsigned __int8 *)(v223 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80));
    uint64_t v216 = *(void *)(v223 + 72);
    uint64_t v103 = (uint64_t)v158;
    v223 += 16;
    uint64_t v104 = (void (**)(void, void))(v223 - 8);
    do
    {
      uint64_t v105 = v217;
      uint64_t v106 = v219;
      v101(v217, v102, v219);
      uint64_t v107 = (uint64_t)v218;
      v101(v218, v105, v106);
      ToolDescription.init(toolType:)(v107, v103);
      (*v104)(v105, v106);
      uint64_t v108 = v228;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v108 + 16) + 1, 1);
        uint64_t v108 = v228;
      }
      unint64_t v110 = *(void *)(v108 + 16);
      unint64_t v109 = *(void *)(v108 + 24);
      if (v110 >= v109 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1);
        uint64_t v108 = v228;
      }
      *(void *)(v108 + 16) = v110 + 1;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v103, v108+ ((*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80))+ *(void *)(v222 + 72) * v110, type metadata accessor for ToolDescription);
      v102 += v216;
      --v99;
    }
    while (v99);
    swift_bridgeObjectRelease();
    a9 = v197;
    uint64_t v111 = v201;
    uint64_t v100 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v108 = MEMORY[0x263F8EE78];
    uint64_t v111 = v201;
  }
  int64_t v112 = *(void *)(v108 + 16);
  uint64_t v113 = v215;
  uint64_t v114 = (uint64_t)v214;
  if (v112)
  {
    *(void *)&long long v228 = v100;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v112, 0);
    uint64_t v115 = v108 + ((*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80));
    uint64_t v222 = *(void *)(v222 + 72);
    uint64_t v223 = v159 + 48;
    v219 = (void (**)(void, void, void, void))(v160 + 56);
    uint64_t v218 = (void (**)(char *, char *, uint64_t))(v161 + 16);
    unint64_t v217 = (void (**)(char *, uint64_t))(v161 + 8);
    uint64_t v216 = v162 + 32;
    uint64_t v116 = (uint64_t)v213;
    uint64_t v117 = (uint64_t)v212;
    do
    {
      uint64_t v118 = v225;
      outlined init with copy of DocumentResourceEnvelope(v115, v225, type metadata accessor for ToolDescription);
      uint64_t v119 = v118;
      uint64_t v120 = v226;
      outlined init with copy of DocumentResourceEnvelope(v119, v226, type metadata accessor for ToolDescription);
      outlined init with copy of DocumentResourceEnvelope(v120, v117, type metadata accessor for ToolType);
      outlined init with copy of DocumentResourceEnvelope(v117, v116, type metadata accessor for ToolType);
      int v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v223)(v116, 2, v224);
      if (v121)
      {
        if (v121 == 1)
        {
          outlined destroy of DocumentResourceEnvelope(v117, type metadata accessor for ToolType);
          (*v219)(v113, 1, 2, v221);
        }
        else
        {
          outlined destroy of DocumentResourceEnvelope(v117, type metadata accessor for ToolType);
          (*v219)(v113, 2, 2, v221);
        }
      }
      else
      {
        uint64_t v122 = v204;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v116, v204, type metadata accessor for FunctionDescription);
        uint64_t v123 = v205;
        outlined init with copy of DocumentResourceEnvelope(v122, (uint64_t)v205, type metadata accessor for FunctionDescription);
        uint64_t v124 = *((void *)v123 + 1);
        uint64_t v125 = v206;
        *uint64_t v206 = *(void *)v123;
        v125[1] = v124;
        uint64_t v126 = *((void *)v123 + 3);
        v125[2] = *((void *)v123 + 2);
        v125[3] = v126;
        unint64_t v127 = v208;
        uint64_t v128 = v209;
        (*v218)(v208, &v123[*(int *)(v224 + 24)], v209);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v129 = v210;
        Schema.type.getter();
        (*v217)(v127, v128);
        uint64_t v130 = (uint64_t)v207;
        (*(void (**)(char *, char *, uint64_t))v216)(v207, v129, v211);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v123, type metadata accessor for FunctionDescription);
        uint64_t v131 = v221;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v130, (uint64_t)v125 + *(int *)(v221 + 24), type metadata accessor for SchemaEnvelope);
        uint64_t v132 = (uint64_t)v125;
        uint64_t v117 = (uint64_t)v212;
        uint64_t v116 = (uint64_t)v213;
        uint64_t v133 = v203;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v132, v203, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        outlined destroy of DocumentResourceEnvelope(v117, type metadata accessor for ToolType);
        outlined destroy of DocumentResourceEnvelope(v122, type metadata accessor for FunctionDescription);
        (*v219)(v133, 0, 2, v131);
        uint64_t v134 = v133;
        uint64_t v114 = (uint64_t)v214;
        uint64_t v113 = v215;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v134, v215, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      }
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v113, v114, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      outlined destroy of DocumentResourceEnvelope(v226, type metadata accessor for ToolDescription);
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v114, v227, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      outlined destroy of DocumentResourceEnvelope(v225, type metadata accessor for ToolDescription);
      uint64_t v100 = v228;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v100 + 16) + 1, 1);
        uint64_t v100 = v228;
      }
      unint64_t v136 = *(void *)(v100 + 16);
      unint64_t v135 = *(void *)(v100 + 24);
      if (v136 >= v135 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1);
        uint64_t v100 = v228;
      }
      *(void *)(v100 + 16) = v136 + 1;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v227, v100+ ((*(unsigned __int8 *)(v220 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80))+ *(void *)(v220 + 72) * v136, type metadata accessor for ToolDescriptionEnvelope);
      v115 += v222;
      --v112;
    }
    while (v112);
    swift_bridgeObjectRelease();
    a9 = v197;
    uint64_t v111 = v201;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v137 = v189;
  *(void *)(a9 + v189[7]) = v100;
  uint64_t v138 = v195;
  uint64_t v139 = v190;
  outlined init with copy of Prompt.Rendering?(v195, v190, &demangling cache variable for type metadata for ToolChoice?);
  uint64_t v140 = v191;
  uint64_t v141 = v192;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v139, 1, v192) == 1)
  {
    long long v142 = xmmword_25F91E910;
  }
  else
  {
    uint64_t v143 = v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 32))(v156, v139, v141);
    uint64_t v144 = (uint64_t)v157;
    (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v157, v143, v141);
    ToolChoiceEnvelope.init(sealing:)(v144, (uint64_t *)&v228);
    long long v227 = v228;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v143, v141);
    long long v142 = v227;
  }
  *(_OWORD *)(a9 + v137[8]) = v142;
  *(void *)(a9 + v137[9]) = v193;
  uint64_t v145 = (uint64_t)v194;
  Overridable<A>.init(key:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  Overridable.wrappedValue.getter();
  char v146 = v228;
  outlined destroy of DocumentResourceEnvelope(v145, (uint64_t (*)(void))type metadata accessor for TokenGenerationOverrides);
  if (v146)
  {
    if (one-time initialization token for schema != -1) {
      swift_once();
    }
    uint64_t v148 = type metadata accessor for Logger();
    __swift_project_value_buffer(v148, (uint64_t)static Log.schema);
    unint64_t v149 = Logger.logObject.getter();
    os_log_type_t v150 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v149, v150))
    {
      uint64_t v151 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v151 = 0;
      _os_log_impl(&dword_25F79F000, v149, v150, "Disabled GuidedGeneration constraints because of user default", v151, 2u);
      MEMORY[0x261201C80](v151, -1, -1);
    }

    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v196, &demangling cache variable for type metadata for Constraints?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v138, &demangling cache variable for type metadata for ToolChoice?);
    ((void (*)(uint64_t, uint64_t))v188)(v111, v199);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v200, &demangling cache variable for type metadata for Prompt?);
    uint64_t v152 = a9 + v137[10];
    uint64_t v153 = type metadata accessor for Constraints(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 56))(v152, 1, 1, v153);
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v138, &demangling cache variable for type metadata for ToolChoice?);
    ((void (*)(uint64_t, uint64_t))v188)(v111, v199);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v200, &demangling cache variable for type metadata for Prompt?);
    return outlined init with take of Locale?(v196, a9 + v137[10], &demangling cache variable for type metadata for Constraints?);
  }
}

uint64_t SamplingParametersEnvelope.init(sealing:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = a1[2];
  char v4 = *((unsigned char *)a1 + 24);
  uint64_t v5 = a1[4];
  char v6 = *((unsigned char *)a1 + 40);
  uint64_t v7 = a1[6];
  char v8 = *((unsigned char *)a1 + 56);
  uint64_t v9 = a1[8];
  char v10 = *((unsigned char *)a1 + 72);
  uint64_t v11 = a1[10];
  uint64_t v12 = a1[11];
  char v13 = *((unsigned char *)a1 + 96);
  uint64_t v14 = a1[13];
  char v15 = *((unsigned char *)a1 + 112);
  uint64_t v16 = a1[15];
  char v17 = *((unsigned char *)a1 + 128);
  char v18 = *((unsigned char *)a1 + 130);
  if (v2 > 1u) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = *a1;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(unsigned char *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  *(unsigned char *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v9;
  *(unsigned char *)(a2 + 72) = v10;
  *(void *)(a2 + 80) = v11;
  *(void *)(a2 + 88) = v12;
  *(unsigned char *)(a2 + 96) = v13;
  *(void *)(a2 + 104) = v14;
  *(unsigned char *)(a2 + 112) = v15;
  *(void *)(a2 + 120) = v16;
  *(unsigned char *)(a2 + 128) = v17;
  *(unsigned char *)(a2 + 129) = v18;
  return result;
}

uint64_t ToolDescription.init(toolType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = type metadata accessor for ToolType();
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v50 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GenerationSchema();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Schema();
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for ToolType.Function();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ToolType.Type();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v49 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (long long *)((char *)&v48 - v21);
  uint64_t v23 = a1;
  ToolType.type.getter();
  int v24 = (*(uint64_t (**)(long long *, uint64_t))(v18 + 88))(v22, v17);
  if (v24 == *MEMORY[0x263F40E48])
  {
    (*(void (**)(long long *, uint64_t))(v18 + 96))(v22, v17);
    uint64_t v25 = (*(uint64_t (**)(char *, long long *, uint64_t))(v14 + 32))(v16, v22, v13);
    uint64_t v50 = (char *)MEMORY[0x261200360](v25);
    uint64_t v27 = v26;
    uint64_t v28 = MEMORY[0x261200350]();
    uint64_t v30 = v29;
    MEMORY[0x261200340]();
    uint64_t v31 = v51;
    Schema.init(type:)();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v23, v55);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    *uint64_t v12 = (uint64_t)v50;
    v12[1] = v27;
    _OWORD v12[2] = v28;
    uint64_t v12[3] = v30;
    uint64_t v32 = type metadata accessor for FunctionDescription(0);
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v12 + *(int *)(v32 + 24), v31, v53);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v12, 0, 2, v32);
    return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v56, type metadata accessor for ToolType);
  }
  else
  {
    uint64_t v48 = v7;
    uint64_t v34 = v54;
    if (v24 == *MEMORY[0x263F40E40])
    {
      (*(void (**)(long long *, uint64_t))(v18 + 96))(v22, v17);
      outlined init with take of AsyncIteratorProtocol(v22, (uint64_t)v57);
      __swift_project_boxed_opaque_existential_1(v57, v58);
      uint64_t v35 = dispatch thunk of Tooling.name.getter();
      uint64_t v37 = v36;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      uint64_t v38 = dispatch thunk of Tooling.usageDescription.getter();
      uint64_t v40 = v39;
      __swift_project_boxed_opaque_existential_1(v57, v58);
      swift_getDynamicType();
      static Tooling.argumentsSchema.getter();
      uint64_t v41 = v51;
      Schema.init(type:)();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v23, v55);
      *uint64_t v12 = v35;
      v12[1] = v37;
      _OWORD v12[2] = v38;
      uint64_t v12[3] = v40;
      uint64_t v42 = type metadata accessor for FunctionDescription(0);
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v12 + *(int *)(v42 + 24), v41, v53);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v12, 0, 2, v42);
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v56, type metadata accessor for ToolType);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
    }
    else
    {
      uint64_t v43 = v56;
      if (v24 == *MEMORY[0x263F40E38])
      {
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(a1, v55);
        uint64_t v44 = type metadata accessor for FunctionDescription(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 2, v44);
      }
      else if (v24 == *MEMORY[0x263F40E30])
      {
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(a1, v55);
        uint64_t v45 = type metadata accessor for FunctionDescription(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v43, 2, 2, v45);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v50, a1, v55);
        v57[0] = 0;
        v57[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(21);
        v46._object = (void *)0x800000025F92CC30;
        v46._uint64_t countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v46);
        uint64_t v47 = v49;
        ToolType.type.getter();
        _print_unlocked<A, B>(_:_:)();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v47, v17);
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t ToolDescriptionEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v6, type metadata accessor for ToolType);
  ToolDescriptionEnvelope.ToolTypeEnvelope.init(sealing:)((uint64_t)v6, (uint64_t)v9);
  outlined destroy of DocumentResourceEnvelope(a1, type metadata accessor for ToolDescription);
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, a2, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

uint64_t ToolChoiceEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for ToolChoice();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v21 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolChoice.FunctionChoice();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ToolChoice.Value();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ToolChoice.value.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x263F40BB8])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    uint64_t v15 = ToolChoice.FunctionChoice.name.getter();
    uint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_9:
    uint64_t v19 = v22;
    *uint64_t v22 = v15;
    v19[1] = v17;
    return result;
  }
  if (v14 == *MEMORY[0x263F40BB0])
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    goto LABEL_9;
  }
  if (v14 == *MEMORY[0x263F40BC8])
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    uint64_t v15 = 0;
    uint64_t v17 = 1;
    goto LABEL_9;
  }
  if (v14 == *MEMORY[0x263F40BC0])
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    uint64_t v15 = 0;
    uint64_t v17 = 2;
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v21, a1, v3);
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v20._object = (void *)0x800000025F92CC50;
  v20._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v20);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CompletePromptTemplateRequest.hash(into:)(uint64_t a1)
{
  unsigned __int8 v2 = v1;
  uint64_t v4 = type metadata accessor for Constraints(0);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v43 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v44 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v12 - 8);
  int v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1[1];
  if (v15)
  {
    uint64_t v42 = v11;
    uint64_t v16 = v1[2];
    uint64_t v17 = v1[3];
    uint64_t v18 = *v1;
    Hasher._combine(_:)(1u);
    outlined copy of PromptEnvelope?(v18, v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    specialized Array<A>.hash(into:)(a1, v16);
    specialized Array<A>.hash(into:)(a1, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v42;
    outlined consume of PromptEnvelope?(v18, v15);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v19 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
  Swift::String v20 = (char *)v1 + v19[5];
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)(a1, *((void *)v20 + 2));
  uint64_t v21 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  outlined init with copy of Prompt.Rendering?((uint64_t)&v20[*(int *)(v21 + 24)], (uint64_t)v14, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v22 = (char *)v2 + v19[6];
  long long v23 = *((_OWORD *)v22 + 7);
  long long v53 = *((_OWORD *)v22 + 6);
  long long v54 = v23;
  __int16 v55 = *((_WORD *)v22 + 64);
  long long v24 = *((_OWORD *)v22 + 3);
  long long v49 = *((_OWORD *)v22 + 2);
  long long v50 = v24;
  long long v25 = *((_OWORD *)v22 + 5);
  long long v51 = *((_OWORD *)v22 + 4);
  long long v52 = v25;
  long long v26 = *((_OWORD *)v22 + 1);
  long long v47 = *(_OWORD *)v22;
  long long v48 = v26;
  SamplingParametersEnvelope.hash(into:)(a1);
  uint64_t v27 = *(uint64_t *)((char *)v2 + v19[7]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = *(uint64_t *)((char *)v2 + v19[8] + 8);
  if (v28 == 3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_17;
  }
  Hasher._combine(_:)(1u);
  switch(v28)
  {
    case 0:
      Swift::UInt v29 = 0;
      goto LABEL_15;
    case 1:
      Swift::UInt v29 = 1;
      goto LABEL_15;
    case 2:
      Swift::UInt v29 = 2;
LABEL_15:
      Hasher._combine(_:)(v29);
      goto LABEL_17;
  }
  Hasher._combine(_:)(3uLL);
  String.hash(into:)();
LABEL_17:
  uint64_t v30 = *(uint64_t *)((char *)v2 + v19[9]);
  Swift::UInt v31 = *(void *)(v30 + 16);
  Hasher._combine(_:)(v31);
  if (v31)
  {
    uint64_t v32 = *(void *)(type metadata accessor for DocumentResourceIdentifier() - 8);
    uint64_t v33 = v30 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
    uint64_t v34 = *(void *)(v32 + 72);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v33 += v34;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  uint64_t v35 = v44;
  outlined init with copy of Prompt.Rendering?((uint64_t)v2 + v19[10], v44, &demangling cache variable for type metadata for Constraints?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v35, 1, v46) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v43;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v35, v43, type metadata accessor for Constraints);
    Hasher._combine(_:)(1u);
    Constraints.hash(into:)();
    outlined destroy of DocumentResourceEnvelope(v36, type metadata accessor for Constraints);
  }
  uint64_t v37 = (char *)v2 + v19[11];
  uint64_t v38 = *((void *)v37 + 5);
  uint64_t v39 = *((void *)v37 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

unint64_t CompletePromptTemplateRequest.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x74706D6F72705FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x74656D617261705FLL;
      break;
    case 3:
      unint64_t result = 0x736C6F6F745FLL;
      break;
    case 4:
      unint64_t result = 0x6F68436C6F6F745FLL;
      break;
    case 5:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 6:
      unint64_t result = 0x69617274736E6F63;
      break;
    case 7:
      unint64_t result = 0x7461646174656D5FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance CompletePromptTemplateRequest.CodingKeys()
{
  return CompletePromptTemplateRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptTemplateRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CompletePromptTemplateRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CompletePromptTemplateRequest.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptTemplateRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptTemplateRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CompletePromptTemplateRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptTemplateRequest.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v23 = *v3;
  long long v24 = v9;
  char v32 = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    char v32 = 1;
    type metadata accessor for PromptTemplateInfoEnvelope(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope, (void (*)(uint64_t))type metadata accessor for PromptTemplateInfoEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = (char *)v3 + v10[6];
    long long v12 = *((_OWORD *)v11 + 7);
    long long v29 = *((_OWORD *)v11 + 6);
    long long v30 = v12;
    __int16 v31 = *((_WORD *)v11 + 64);
    long long v13 = *((_OWORD *)v11 + 3);
    long long v25 = *((_OWORD *)v11 + 2);
    long long v26 = v13;
    long long v14 = *((_OWORD *)v11 + 5);
    long long v27 = *((_OWORD *)v11 + 4);
    long long v28 = v14;
    long long v15 = *((_OWORD *)v11 + 1);
    long long v23 = *(_OWORD *)v11;
    long long v24 = v15;
    char v22 = 2;
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v23 = *(void *)((char *)v3 + v10[7]);
    char v22 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v23 = *(long long *)((char *)v3 + v10[8]);
    char v22 = 4;
    lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v23 = *(void *)((char *)v3 + v10[9]);
    char v22 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v23) = 6;
    type metadata accessor for Constraints(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Constraints and conformance Constraints, (void (*)(uint64_t))type metadata accessor for Constraints);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v16 = (char *)v3 + v10[11];
    uint64_t v17 = *((void *)v16 + 2);
    uint64_t v18 = *((void *)v16 + 3);
    uint64_t v19 = *((void *)v16 + 6);
    long long v23 = *(_OWORD *)v16;
    *(void *)&long long v24 = v17;
    *((void *)&v24 + 1) = v18;
    long long v25 = *((_OWORD *)v16 + 2);
    *(void *)&long long v26 = v19;
    char v22 = 7;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int CompletePromptTemplateRequest.hashValue.getter()
{
  return CountTokensPromptTemplateRequest.hashValue.getter((void (*)(unsigned char *))CompletePromptTemplateRequest.hash(into:));
}

Swift::Int CountTokensPromptTemplateRequest.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

uint64_t CompletePromptTemplateRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptTemplateRequest.CodingKeys>);
  uint64_t v9 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for CompletePromptTemplateRequest(0);
  MEMORY[0x270FA5388](v33);
  long long v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)long long v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  uint64_t v14 = a1[3];
  uint64_t v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  char v32 = v11;
  uint64_t v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    return outlined consume of PromptEnvelope?(*(void *)v13, *((void *)v13 + 1));
  }
  else
  {
    uint64_t v16 = v9;
    LOBYTE(v36) = 0;
    lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
    uint64_t v17 = v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v18 = v42;
    *(_OWORD *)long long v13 = v41;
    *((_OWORD *)v13 + 1) = v18;
    LOBYTE(v41) = 1;
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope, (void (*)(uint64_t))type metadata accessor for PromptTemplateInfoEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v19 = (int *)v33;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)&v13[*(int *)(v33 + 20)], type metadata accessor for PromptTemplateInfoEnvelope);
    char v51 = 2;
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    Swift::String v20 = &v13[v19[6]];
    long long v21 = v48;
    *((_OWORD *)v20 + 6) = v47;
    *((_OWORD *)v20 + 7) = v21;
    *((_WORD *)v20 + 64) = v49;
    long long v22 = v44;
    *((_OWORD *)v20 + 2) = v43;
    *((_OWORD *)v20 + 3) = v22;
    long long v23 = v46;
    *((_OWORD *)v20 + 4) = v45;
    *((_OWORD *)v20 + 5) = v23;
    long long v24 = v42;
    *(_OWORD *)Swift::String v20 = v41;
    *((_OWORD *)v20 + 1) = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    char v50 = 3;
    lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v13[v19[7]] = v36;
    char v50 = 4;
    lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v13[v19[8]] = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    char v50 = 5;
    lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v13[v19[9]] = v36;
    type metadata accessor for Constraints(0);
    LOBYTE(v36) = 6;
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Constraints and conformance Constraints, (void (*)(uint64_t))type metadata accessor for Constraints);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of Locale?((uint64_t)v5, (uint64_t)&v13[v19[10]], &demangling cache variable for type metadata for Constraints?);
    char v50 = 7;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v17);
    uint64_t v25 = v37;
    uint64_t v26 = v38;
    uint64_t v27 = v40;
    long long v28 = &v13[v19[11]];
    *(_OWORD *)long long v28 = v36;
    *((void *)v28 + 2) = v25;
    *((void *)v28 + 3) = v26;
    *((_OWORD *)v28 + 2) = v39;
    *((void *)v28 + 6) = v27;
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v13, v30, type metadata accessor for CompletePromptTemplateRequest);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    return outlined destroy of DocumentResourceEnvelope((uint64_t)v13, type metadata accessor for CompletePromptTemplateRequest);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CompletePromptTemplateRequest(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))CompletePromptTemplateRequest.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptTemplateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))CompletePromptTemplateRequest.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompletePromptTemplateRequest@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CompletePromptTemplateRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompletePromptTemplateRequest(void *a1)
{
  return CompletePromptTemplateRequest.encode(to:)(a1);
}

uint64_t key path setter for CompletePromptRequest.prompt : CompletePromptRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Prompt();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v20 - v9, a1, v4);
  v11(v8, (uint64_t)v10, v4);
  uint64_t v12 = specialized PromptEnvelope.init(sealing:)((uint64_t)v8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v18;
  return result;
}

uint64_t CompletePromptRequest.prompt.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Prompt();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v7 = specialized PromptEnvelope.init(sealing:)((uint64_t)v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v7;
  v1[1] = v9;
  v1[2] = v11;
  v1[3] = v13;
  return result;
}

void (*CompletePromptRequest.prompt.modify(void *a1))(uint64_t ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = type metadata accessor for Prompt();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[5] = v7;
  PromptEnvelope.unseal()(*v1, v1[1], v1[2], v1[3], (uint64_t)v7);
  return CompletePromptRequest.prompt.modify;
}

void CompletePromptRequest.prompt.modify(uint64_t ***a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void (*)(uint64_t *, uint64_t *, uint64_t *))(*a1)[2][2];
  v4((*a1)[4], v3[5], v3[1]);
  uint64_t v5 = v3[4];
  size_t v6 = v3[5];
  uint64_t v8 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v10 = *v3;
  uint64_t v9 = v3[1];
  if (a2)
  {
    v4(v3[3], v3[4], v3[1]);
    uint64_t v11 = specialized PromptEnvelope.init(sealing:)((uint64_t)v7);
    uint64_t v24 = v12;
    uint64_t v25 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v17 = (void (*)(uint64_t *, uint64_t *))v8[1];
    v17(v5, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v10 = v25;
    v10[1] = v24;
    v10[2] = v14;
    v10[3] = v16;
    v17(v6, v9);
  }
  else
  {
    uint64_t v18 = specialized PromptEnvelope.init(sealing:)((uint64_t)v3[4]);
    uint64_t v26 = v19;
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    ((void (*)(uint64_t *, uint64_t *))v8[1])(v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v10 = v18;
    v10[1] = v26;
    v10[2] = v21;
    v10[3] = v23;
  }
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t CompletePromptRequest.parameters.getter@<X0>(uint64_t a1@<X8>)
{
  return SamplingParametersEnvelope.unseal()(a1);
}

uint64_t CompletePromptRequest.constraints.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CompletePromptRequest(0);
  return outlined init with copy of Prompt.Rendering?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Constraints?);
}

uint64_t CompletePromptRequest.tools.getter()
{
  return CompletePromptTemplateRequest.tools.getter(type metadata accessor for CompletePromptRequest);
}

uint64_t CompletePromptTemplateRequest.tools.getter(uint64_t (*a1)(void))
{
  uint64_t v48 = type metadata accessor for GenerationSchema();
  uint64_t v50 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  long long v47 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for ToolDescriptionEnvelope(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ToolDescription(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v53 = (uint64_t)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v1 + *(int *)(a1(0) + 28));
  int64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = MEMORY[0x263F8EE78];
  if (v21)
  {
    uint64_t v54 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    unint64_t v23 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v41 = v20;
    uint64_t v24 = v20 + v23;
    uint64_t v25 = *(void *)(v14 + 72);
    char v51 = (uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v52 = v25;
    long long v42 = (void (**)(char *, char *, uint64_t))(v50 + 16);
    uint64_t v43 = v4;
    long long v44 = v16;
    long long v45 = v9;
    do
    {
      outlined init with copy of DocumentResourceEnvelope(v24, (uint64_t)v16, type metadata accessor for ToolDescriptionEnvelope);
      outlined init with copy of DocumentResourceEnvelope((uint64_t)v16, (uint64_t)v9, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      int v26 = (*v51)(v9, 2, v4);
      if (v26)
      {
        if (v26 == 1)
        {
          uint64_t v27 = type metadata accessor for FunctionDescription(0);
          long long v28 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
          long long v29 = v12;
          uint64_t v30 = 1;
        }
        else
        {
          uint64_t v27 = type metadata accessor for FunctionDescription(0);
          long long v28 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
          long long v29 = v12;
          uint64_t v30 = 2;
        }
        v28(v29, v30, 2, v27);
      }
      else
      {
        uint64_t v31 = (uint64_t)v9;
        char v32 = v46;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v31, (uint64_t)v46, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        uint64_t v33 = *(void *)v32;
        uint64_t v34 = *((void *)v32 + 1);
        uint64_t v35 = *((void *)v32 + 3);
        uint64_t v49 = *((void *)v32 + 2);
        uint64_t v50 = v33;
        (*v42)(v47, &v32[*(int *)(v4 + 24)], v48);
        uint64_t v36 = type metadata accessor for FunctionDescription(0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v4 = v43;
        uint64_t v16 = v44;
        Schema.init(type:)();
        *uint64_t v12 = v50;
        v12[1] = v34;
        _OWORD v12[2] = v49;
        uint64_t v12[3] = v35;
        uint64_t v37 = (uint64_t)v32;
        uint64_t v9 = v45;
        outlined destroy of DocumentResourceEnvelope(v37, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v12, 0, 2, v36);
      }
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v53, type metadata accessor for ToolType);
      outlined destroy of DocumentResourceEnvelope((uint64_t)v16, type metadata accessor for ToolDescriptionEnvelope);
      uint64_t v22 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
        uint64_t v22 = v54;
      }
      unint64_t v39 = *(void *)(v22 + 16);
      unint64_t v38 = *(void *)(v22 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        uint64_t v22 = v54;
      }
      *(void *)(v22 + 16) = v39 + 1;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v53, v22+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v39, type metadata accessor for ToolDescription);
      v24 += v52;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  return v22;
}

uint64_t CompletePromptRequest.toolChoice.getter@<X0>(uint64_t a1@<X8>)
{
  return CompletePromptTemplateRequest.toolChoice.getter(type metadata accessor for CompletePromptRequest, a1);
}

uint64_t CompletePromptTemplateRequest.toolChoice.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 32);
  uint64_t v5 = *(void *)v4;
  unint64_t v6 = *(void *)(v4 + 8);
  switch(v6)
  {
    case 0uLL:
      static ToolChoice.none.getter();
      unint64_t v6 = 0;
      goto LABEL_6;
    case 1uLL:
      static ToolChoice.automatic.getter();
      unint64_t v6 = 1;
      goto LABEL_6;
    case 2uLL:
      static ToolChoice.required.getter();
      unint64_t v6 = 2;
      goto LABEL_6;
    case 3uLL:
      uint64_t v12 = type metadata accessor for ToolChoice();
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
      uint64_t v9 = v12;
      uint64_t v10 = a2;
      uint64_t v11 = 1;
      goto LABEL_8;
    default:
      outlined copy of FinishReason(*(void *)v4, *(void *)(v4 + 8));
      static ToolChoice.function(name:)();
LABEL_6:
      outlined consume of FinishReason?(v5, v6);
      uint64_t v7 = type metadata accessor for ToolChoice();
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
      uint64_t v9 = v7;
      uint64_t v10 = a2;
      uint64_t v11 = 0;
LABEL_8:
      return v8(v10, v11, 1, v9);
  }
}

uint64_t CompletePromptRequest.documents.getter()
{
  return CompletePromptTemplateRequest.documents.getter((void (*)(void))type metadata accessor for CompletePromptRequest);
}

uint64_t CompletePromptTemplateRequest.documents.getter(void (*a1)(void))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t CompletePromptRequest.metadata.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for CompletePromptRequest(0) + 40));
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v7 = v3[5];
  uint64_t v9 = v3[6];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  a1[6] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t CompletePromptRequest.init(prompt:parameters:constraint:tools:toolChoice:documents:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (**a7)(char *, char *, uint64_t)@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v175 = a7;
  uint64_t v158 = a6;
  uint64_t v156 = a5;
  uint64_t v162 = a4;
  uint64_t v157 = a3;
  uint64_t v159 = a1;
  uint64_t v160 = a8;
  uint64_t v9 = type metadata accessor for TokenGenerationOverrides();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v155 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for ToolChoice();
  uint64_t v153 = *(void *)(v154 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v154);
  uint64_t v128 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v127 = (char *)&v126 - v13;
  uint64_t v171 = type metadata accessor for GenerationSchema();
  uint64_t v133 = *(void *)(v171 - 8);
  MEMORY[0x270FA5388](v171);
  int v170 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for Schema();
  uint64_t v132 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  uint64_t v168 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SchemaEnvelope(0);
  MEMORY[0x270FA5388](v16 - 8);
  int v167 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v131 = *(void *)(v174 - 8);
  MEMORY[0x270FA5388](v174);
  int v166 = (uint64_t *)((char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v182 = type metadata accessor for FunctionDescription(0);
  uint64_t v130 = *(void *)(v182 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v182);
  int v165 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v164 = (uint64_t)&v126 - v21;
  uint64_t v22 = type metadata accessor for ToolType(0);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v173 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  int v172 = (char *)&v126 - v25;
  uint64_t v26 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v163 = (uint64_t)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v179 = (uint64_t)&v126 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v178 = (uint64_t)&v126 - v31;
  uint64_t v32 = type metadata accessor for ToolDescriptionEnvelope(0);
  uint64_t v177 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32 - 8);
  *(void *)&long long v185 = (char *)&v126 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v150 = (uint64_t)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for ToolType();
  uint64_t v129 = *(void *)(v36 - 8);
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  int v176 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v126 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v37);
  uint64_t v40 = (char *)&v126 - v39;
  uint64_t v41 = type metadata accessor for ToolDescription(0);
  uint64_t v180 = *(void *)(v41 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](v41 - 8);
  uint64_t v184 = (uint64_t)&v126 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v183 = (uint64_t)&v126 - v45;
  MEMORY[0x270FA5388](v44);
  uint64_t v181 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v126 - v46);
  uint64_t v47 = type metadata accessor for Prompt();
  MEMORY[0x270FA5388](v47);
  uint64_t v49 = (char *)&v126 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = *a2;
  int v50 = *((unsigned __int8 *)a2 + 8);
  uint64_t v142 = a2[2];
  char v51 = *((unsigned char *)a2 + 24);
  uint64_t v141 = a2[4];
  char v52 = *((unsigned char *)a2 + 40);
  uint64_t v140 = a2[6];
  char v53 = *((unsigned char *)a2 + 56);
  uint64_t v139 = a2[8];
  char v54 = *((unsigned char *)a2 + 72);
  uint64_t v138 = a2[10];
  uint64_t v137 = a2[11];
  char v55 = *((unsigned char *)a2 + 96);
  uint64_t v136 = a2[13];
  int v135 = *((unsigned __int8 *)a2 + 112);
  uint64_t v161 = (void (**)(char *, char *, uint64_t))a2[15];
  int v134 = *((unsigned __int8 *)a2 + 128);
  char v56 = *((unsigned char *)a2 + 130);
  unint64_t v149 = *v175;
  uint64_t v148 = v175[1];
  unint64_t v147 = v175[2];
  char v146 = v175[3];
  uint64_t v145 = v175[4];
  uint64_t v144 = v175[5];
  uint64_t v143 = v175[6];
  uint64_t v151 = v57;
  uint64_t v58 = *(void (**)(char *, uint64_t))(v57 + 16);
  uint64_t v152 = v59;
  v58(v49, v159);
  uint64_t v60 = specialized PromptEnvelope.init(sealing:)((uint64_t)v49);
  uint64_t v61 = v160;
  *uint64_t v160 = v60;
  v61[1] = v62;
  v61[2] = v63;
  v61[3] = v64;
  if (v50 > 1)
  {
    uint64_t v66 = 0;
    uint64_t v65 = v181;
  }
  else
  {
    uint64_t v65 = v181;
    uint64_t v66 = v126;
  }
  char v193 = v51;
  char v192 = v52;
  char v191 = v53;
  char v190 = v54;
  char v189 = v55;
  char v188 = v135;
  char v187 = v134;
  uint64_t v67 = v160;
  v160[4] = v66;
  *((unsigned char *)v67 + 40) = v50;
  v67[6] = v142;
  *((unsigned char *)v67 + 56) = v51;
  v67[8] = v141;
  *((unsigned char *)v67 + 72) = v52;
  v67[10] = v140;
  *((unsigned char *)v67 + 88) = v53;
  v67[12] = v139;
  *((unsigned char *)v67 + 104) = v54;
  uint64_t v68 = v137;
  v67[14] = v138;
  v67[15] = v68;
  *((unsigned char *)v67 + 128) = v55;
  v67[17] = v136;
  *((unsigned char *)v67 + 144) = v188;
  v67[19] = (uint64_t)v161;
  *((unsigned char *)v67 + 160) = v187;
  *((unsigned char *)v67 + 161) = v56;
  uint64_t v69 = v162;
  int64_t v70 = *(void *)(v162 + 16);
  uint64_t v71 = MEMORY[0x263F8EE78];
  if (v70)
  {
    *(void *)&long long v186 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70, 0);
    uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 16);
    uint64_t v73 = v69 + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    uint64_t v175 = *(void (***)(char *, char *, uint64_t))(v129 + 72);
    uint64_t v74 = (void (**)(char *, uint64_t))(v129 + 8);
    do
    {
      v72(v40, v73, v36);
      uint64_t v75 = (uint64_t)v176;
      v72((char *)v176, (uint64_t)v40, v36);
      ToolDescription.init(toolType:)(v75, (uint64_t)v65);
      (*v74)(v40, v36);
      uint64_t v76 = v186;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v76 + 16) + 1, 1);
        uint64_t v76 = v186;
      }
      unint64_t v78 = *(void *)(v76 + 16);
      unint64_t v77 = *(void *)(v76 + 24);
      if (v78 >= v77 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1);
        uint64_t v76 = v186;
      }
      *(void *)(v76 + 16) = v78 + 1;
      uint64_t v65 = v181;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v181, v76+ ((*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80))+ *(void *)(v180 + 72) * v78, type metadata accessor for ToolDescription);
      v73 += (uint64_t)v175;
      --v70;
    }
    while (v70);
    swift_bridgeObjectRelease();
    uint64_t v71 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v76 = MEMORY[0x263F8EE78];
  }
  int64_t v79 = *(void *)(v76 + 16);
  uint64_t v80 = v174;
  uint64_t v81 = (uint64_t)v173;
  uint64_t v82 = (uint64_t)v172;
  if (v79)
  {
    *(void *)&long long v186 = v71;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79, 0);
    uint64_t v83 = v76 + ((*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80));
    uint64_t v180 = *(void *)(v180 + 72);
    uint64_t v181 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
    int v176 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56);
    uint64_t v175 = (void (**)(char *, char *, uint64_t))(v132 + 16);
    uint64_t v162 = v132 + 8;
    uint64_t v161 = (void (**)(char *, char *, uint64_t))(v133 + 32);
    do
    {
      uint64_t v84 = v183;
      outlined init with copy of DocumentResourceEnvelope(v83, v183, type metadata accessor for ToolDescription);
      uint64_t v85 = v84;
      uint64_t v86 = v184;
      outlined init with copy of DocumentResourceEnvelope(v85, v184, type metadata accessor for ToolDescription);
      outlined init with copy of DocumentResourceEnvelope(v86, v82, type metadata accessor for ToolType);
      outlined init with copy of DocumentResourceEnvelope(v82, v81, type metadata accessor for ToolType);
      int v87 = (*v181)(v81, 2, v182);
      if (v87)
      {
        if (v87 == 1)
        {
          outlined destroy of DocumentResourceEnvelope(v82, type metadata accessor for ToolType);
          uint64_t v88 = v179;
          (*v176)(v179, 1, 2, v80);
        }
        else
        {
          outlined destroy of DocumentResourceEnvelope(v82, type metadata accessor for ToolType);
          uint64_t v88 = v179;
          (*v176)(v179, 2, 2, v80);
        }
      }
      else
      {
        uint64_t v89 = v164;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v81, v164, type metadata accessor for FunctionDescription);
        char v90 = v165;
        outlined init with copy of DocumentResourceEnvelope(v89, (uint64_t)v165, type metadata accessor for FunctionDescription);
        uint64_t v91 = *((void *)v90 + 1);
        char v92 = v166;
        *int v166 = *(void *)v90;
        v92[1] = v91;
        uint64_t v93 = *((void *)v90 + 3);
        v92[2] = *((void *)v90 + 2);
        v92[3] = v93;
        uint64_t v94 = v168;
        uint64_t v95 = v169;
        (*v175)(v168, &v90[*(int *)(v182 + 24)], v169);
        swift_bridgeObjectRetain();
        uint64_t v80 = v174;
        swift_bridgeObjectRetain();
        uint64_t v96 = v170;
        Schema.type.getter();
        (*(void (**)(char *, uint64_t))v162)(v94, v95);
        uint64_t v97 = (uint64_t)v167;
        (*v161)(v167, v96, v171);
        outlined destroy of DocumentResourceEnvelope((uint64_t)v90, type metadata accessor for FunctionDescription);
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v97, (uint64_t)v92 + *(int *)(v80 + 24), type metadata accessor for SchemaEnvelope);
        uint64_t v98 = (uint64_t)v92;
        uint64_t v82 = (uint64_t)v172;
        uint64_t v81 = (uint64_t)v173;
        uint64_t v99 = v163;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v98, v163, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        outlined destroy of DocumentResourceEnvelope(v82, type metadata accessor for ToolType);
        outlined destroy of DocumentResourceEnvelope(v89, type metadata accessor for FunctionDescription);
        (*v176)(v99, 0, 2, v80);
        uint64_t v100 = v99;
        uint64_t v88 = v179;
        outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v100, v179, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      }
      uint64_t v101 = v178;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v88, v178, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      outlined destroy of DocumentResourceEnvelope(v184, type metadata accessor for ToolDescription);
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v101, v185, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      outlined destroy of DocumentResourceEnvelope(v183, type metadata accessor for ToolDescription);
      uint64_t v71 = v186;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v71 + 16) + 1, 1);
        uint64_t v71 = v186;
      }
      unint64_t v103 = *(void *)(v71 + 16);
      unint64_t v102 = *(void *)(v71 + 24);
      if (v103 >= v102 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
        uint64_t v71 = v186;
      }
      *(void *)(v71 + 16) = v103 + 1;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v185, v71+ ((*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80))+ *(void *)(v177 + 72) * v103, type metadata accessor for ToolDescriptionEnvelope);
      v83 += v180;
      --v79;
    }
    while (v79);
  }
  swift_bridgeObjectRelease();
  uint64_t v104 = (int *)type metadata accessor for CompletePromptRequest(0);
  uint64_t v105 = v160;
  *(uint64_t *)((char *)v160 + v104[7]) = v71;
  uint64_t v106 = v156;
  uint64_t v107 = v150;
  outlined init with copy of Prompt.Rendering?(v156, v150, &demangling cache variable for type metadata for ToolChoice?);
  uint64_t v108 = v153;
  uint64_t v109 = v154;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v107, 1, v154) == 1)
  {
    long long v110 = xmmword_25F91E910;
  }
  else
  {
    uint64_t v111 = v127;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 32))(v127, v107, v109);
    uint64_t v112 = (uint64_t)v128;
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v128, v111, v109);
    ToolChoiceEnvelope.init(sealing:)(v112, (uint64_t *)&v186);
    long long v185 = v186;
    (*(void (**)(char *, uint64_t))(v108 + 8))(v111, v109);
    long long v110 = v185;
  }
  *(_OWORD *)((char *)v105 + v104[8]) = v110;
  uint64_t v113 = (void (**)(char *, char *, uint64_t))((char *)v105 + v104[10]);
  uint64_t v114 = v148;
  *uint64_t v113 = v149;
  v113[1] = v114;
  uint64_t v115 = v146;
  v113[2] = v147;
  v113[3] = v115;
  uint64_t v116 = v144;
  v113[4] = v145;
  v113[5] = v116;
  v113[6] = v143;
  uint64_t v117 = (uint64_t)v155;
  Overridable<A>.init(key:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  Overridable.wrappedValue.getter();
  char v118 = v186;
  outlined destroy of DocumentResourceEnvelope(v117, (uint64_t (*)(void))type metadata accessor for TokenGenerationOverrides);
  if (v118)
  {
    if (one-time initialization token for schema != -1) {
      swift_once();
    }
    uint64_t v120 = type metadata accessor for Logger();
    __swift_project_value_buffer(v120, (uint64_t)static Log.schema);
    int v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v123 = 0;
      _os_log_impl(&dword_25F79F000, v121, v122, "Disabled GuidedGeneration constraints because of user default", v123, 2u);
      MEMORY[0x261201C80](v123, -1, -1);
    }

    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v106, &demangling cache variable for type metadata for ToolChoice?);
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v157, &demangling cache variable for type metadata for Constraints?);
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v159, v152);
    uint64_t v105 = v160;
    uint64_t v124 = (char *)v160 + v104[6];
    uint64_t v125 = type metadata accessor for Constraints(0);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 56))(v124, 1, 1, v125);
  }
  else
  {
    outlined destroy of GenerativeFunctionsInstrumentationEvent?(v106, &demangling cache variable for type metadata for ToolChoice?);
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v159, v152);
    uint64_t result = outlined init with take of Locale?(v157, (uint64_t)v105 + v104[6], &demangling cache variable for type metadata for Constraints?);
  }
  *(uint64_t *)((char *)v105 + v104[9]) = v158;
  return result;
}

uint64_t CompletePromptRequest.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Constraints(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  specialized Array<A>.hash(into:)(a1, v11);
  specialized Array<A>.hash(into:)(a1, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v13 = *(_OWORD *)(v1 + 144);
  v30[6] = *(_OWORD *)(v1 + 128);
  v30[7] = v13;
  __int16 v31 = *(_WORD *)(v1 + 160);
  long long v14 = *(_OWORD *)(v1 + 80);
  v30[2] = *(_OWORD *)(v1 + 64);
  v30[3] = v14;
  long long v15 = *(_OWORD *)(v1 + 112);
  v30[4] = *(_OWORD *)(v1 + 96);
  void v30[5] = v15;
  long long v16 = *(_OWORD *)(v1 + 48);
  v30[0] = *(_OWORD *)(v1 + 32);
  v30[1] = v16;
  SamplingParametersEnvelope.hash(into:)(a1);
  uint64_t v17 = (int *)type metadata accessor for CompletePromptRequest(0);
  outlined init with copy of Prompt.Rendering?(v1 + v17[6], (uint64_t)v10, &demangling cache variable for type metadata for Constraints?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v10, (uint64_t)v7, type metadata accessor for Constraints);
    Hasher._combine(_:)(1u);
    Constraints.hash(into:)();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v7, type metadata accessor for Constraints);
  }
  uint64_t v18 = *(void *)(v1 + v17[7]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v2 + v17[8] + 8);
  if (v19 == 3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_14;
  }
  Hasher._combine(_:)(1u);
  switch(v19)
  {
    case 0:
      Swift::UInt v20 = 0;
      goto LABEL_12;
    case 1:
      Swift::UInt v20 = 1;
      goto LABEL_12;
    case 2:
      Swift::UInt v20 = 2;
LABEL_12:
      Hasher._combine(_:)(v20);
      goto LABEL_14;
  }
  Hasher._combine(_:)(3uLL);
  String.hash(into:)();
LABEL_14:
  uint64_t v21 = *(void *)(v2 + v17[9]);
  Swift::UInt v22 = *(void *)(v21 + 16);
  Hasher._combine(_:)(v22);
  if (v22)
  {
    uint64_t v23 = *(void *)(type metadata accessor for DocumentResourceIdentifier() - 8);
    uint64_t v24 = v21 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    uint64_t v25 = *(void *)(v23 + 72);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v24 += v25;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = v2 + v17[10];
  uint64_t v27 = *(void *)(v26 + 40);
  uint64_t v28 = *(void *)(v26 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompletePromptRequest.CodingKeys()
{
  uint64_t result = 0x74706D6F72705FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x74656D617261705FLL;
      break;
    case 2:
      uint64_t result = 0x69617274736E6F63;
      break;
    case 3:
      uint64_t result = 0x736C6F6F745FLL;
      break;
    case 4:
      uint64_t result = 0x6F68436C6F6F745FLL;
      break;
    case 5:
      uint64_t result = 0x746E656D75636F64;
      break;
    case 6:
      uint64_t result = 0x7461646174656D5FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CompletePromptRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CompletePromptRequest.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CompletePromptRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptRequest.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = v3[3];
  uint64_t v32 = *v3;
  long long v33 = *(_OWORD *)(v3 + 1);
  uint64_t v34 = v9;
  char v31 = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v10 = *((_OWORD *)v3 + 9);
    long long v28 = *((_OWORD *)v3 + 8);
    long long v29 = v10;
    __int16 v30 = *((_WORD *)v3 + 80);
    long long v11 = *((_OWORD *)v3 + 5);
    long long v24 = *((_OWORD *)v3 + 4);
    long long v25 = v11;
    long long v12 = *((_OWORD *)v3 + 7);
    long long v26 = *((_OWORD *)v3 + 6);
    long long v27 = v12;
    long long v13 = *((_OWORD *)v3 + 2);
    long long v23 = *((_OWORD *)v3 + 3);
    long long v22 = v13;
    char v21 = 1;
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v14 = (int *)type metadata accessor for CompletePromptRequest(0);
    LOBYTE(v22) = 2;
    type metadata accessor for Constraints(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Constraints and conformance Constraints, (void (*)(uint64_t))type metadata accessor for Constraints);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v22 = *(uint64_t *)((char *)v3 + v14[7]);
    char v21 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v22 = *(_OWORD *)((char *)v3 + v14[8]);
    char v21 = 4;
    lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v22 = *(uint64_t *)((char *)v3 + v14[9]);
    char v21 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v15 = (long long *)((char *)v3 + v14[10]);
    uint64_t v16 = *((void *)v15 + 2);
    uint64_t v17 = *((void *)v15 + 3);
    uint64_t v18 = *((void *)v15 + 6);
    long long v22 = *v15;
    *(void *)&long long v23 = v16;
    *((void *)&v23 + 1) = v17;
    long long v24 = v15[2];
    *(void *)&long long v25 = v18;
    char v21 = 6;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int CompletePromptRequest.hashValue.getter()
{
  return CountTokensPromptTemplateRequest.hashValue.getter((void (*)(unsigned char *))CompletePromptRequest.hash(into:));
}

uint64_t CompletePromptRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptRequest.CodingKeys>);
  uint64_t v29 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for CompletePromptRequest(0);
  MEMORY[0x270FA5388](v9);
  long long v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys();
  char v31 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  long long v27 = v6;
  uint64_t v12 = (uint64_t)v11;
  LOBYTE(v32) = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  uint64_t v13 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = *(void *)&v37[24];
  *(void *)uint64_t v12 = *(void *)v37;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)&v37[8];
  *(void *)(v12 + 24) = v14;
  char v46 = 1;
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = 0;
  long long v15 = v43;
  *(_OWORD *)(v12 + 128) = v42;
  *(_OWORD *)(v12 + 144) = v15;
  *(_WORD *)(v12 + 160) = v44;
  long long v16 = v39;
  *(_OWORD *)(v12 + 64) = v38;
  *(_OWORD *)(v12 + 80) = v16;
  long long v17 = v41;
  *(_OWORD *)(v12 + 96) = v40;
  *(_OWORD *)(v12 + 112) = v17;
  long long v18 = *(_OWORD *)&v37[16];
  *(_OWORD *)(v12 + 32) = *(_OWORD *)v37;
  *(_OWORD *)(v12 + 48) = v18;
  type metadata accessor for Constraints(0);
  LOBYTE(v32) = 2;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Constraints and conformance Constraints, (void (*)(uint64_t))type metadata accessor for Constraints);
  uint64_t v19 = (uint64_t)v27;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  outlined init with take of Locale?(v19, v12 + v9[6], &demangling cache variable for type metadata for Constraints?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
  char v45 = 3;
  lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v12 + v9[7]) = v32;
  char v45 = 4;
  lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(_OWORD *)(v12 + v9[8]) = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
  char v45 = 5;
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = v29;
  *(void *)(v12 + v9[9]) = v32;
  char v45 = 6;
  lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v31, v13);
  uint64_t v21 = v33;
  uint64_t v22 = v34;
  uint64_t v23 = v36;
  uint64_t v24 = v12 + v9[10];
  *(_OWORD *)uint64_t v24 = v32;
  *(void *)(v24 + 16) = v21;
  *(void *)(v24 + 24) = v22;
  *(_OWORD *)(v24 + 32) = v35;
  *(void *)(v24 + 48) = v23;
  outlined init with copy of DocumentResourceEnvelope(v12, v28, type metadata accessor for CompletePromptRequest);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of DocumentResourceEnvelope(v12, type metadata accessor for CompletePromptRequest);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CompletePromptRequest(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))CompletePromptRequest.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))CompletePromptRequest.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompletePromptRequest@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CompletePromptRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompletePromptRequest(void *a1)
{
  return CompletePromptRequest.encode(to:)(a1);
}

uint64_t ToolDescription.type.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DocumentResourceEnvelope(v1, a1, type metadata accessor for ToolType);
}

uint64_t ToolDescription.type.setter(uint64_t a1)
{
  return outlined assign with take of PromptTemplateInfoEnvelope(a1, v1, type metadata accessor for ToolType);
}

uint64_t (*ToolDescription.type.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t ToolDescription.init(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(a1, a2, type metadata accessor for ToolType);
}

uint64_t FunctionDescription.init(name:usageDescription:argumentsSchema:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  uint64_t v7 = (char *)a6 + *(int *)(type metadata accessor for FunctionDescription(0) + 24);
  uint64_t v8 = type metadata accessor for Schema();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
  return v9(v7, a5, v8);
}

uint64_t ToolDescription.toolType.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FunctionDescription(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v1, (uint64_t)v8, type metadata accessor for ToolType);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 2, v2);
  if (v9)
  {
    if (v9 == 1) {
      return static ToolType.browser.getter();
    }
    else {
      return static ToolType.imageGenerator.getter();
    }
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)v5, type metadata accessor for FunctionDescription);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static ToolType.function(name:description:parameters:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for FunctionDescription);
  }
}

void ToolDescription.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FunctionDescription(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v1, (uint64_t)v8, type metadata accessor for ToolType);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 2, v2);
  if (v9)
  {
    Hasher._combine(_:)(v9 != 1);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)v5, type metadata accessor for FunctionDescription);
    Hasher._combine(_:)(2uLL);
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for Schema();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Schema and conformance Schema, MEMORY[0x263F40DE8]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for FunctionDescription);
  }
}

Swift::Int ToolDescription.hashValue.getter()
{
  return CountTokensPromptTemplateRequest.hashValue.getter((void (*)(unsigned char *))ToolDescription.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolDescription(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))ToolDescription.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))ToolDescription.hash(into:));
}

void ToolType.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FunctionDescription(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v1, (uint64_t)v8, type metadata accessor for ToolType);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 2, v2);
  if (v9)
  {
    Hasher._combine(_:)(v9 != 1);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, (uint64_t)v5, type metadata accessor for FunctionDescription);
    Hasher._combine(_:)(2uLL);
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for Schema();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Schema and conformance Schema, MEMORY[0x263F40DE8]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for FunctionDescription);
  }
}

Swift::Int ToolType.hashValue.getter()
{
  return CountTokensPromptTemplateRequest.hashValue.getter((void (*)(unsigned char *))ToolType.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))ToolType.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))ToolType.hash(into:));
}

uint64_t FunctionDescription.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FunctionDescription.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FunctionDescription.name.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t FunctionDescription.usageDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FunctionDescription.usageDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FunctionDescription.usageDescription.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t FunctionDescription.argumentsSchema.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FunctionDescription(0) + 24);
  uint64_t v4 = type metadata accessor for Schema();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t FunctionDescription.argumentsSchema.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FunctionDescription(0) + 24);
  uint64_t v4 = type metadata accessor for Schema();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*FunctionDescription.argumentsSchema.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t FunctionDescription.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int FunctionDescription.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FunctionDescription()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FunctionDescription()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FunctionDescription()
{
  return Hasher._finalize()();
}

uint64_t PromptCompletionEnvelope.unseal()@<X0>(void *a1@<X8>)
{
  uint64_t v142 = a1;
  uint64_t v2 = type metadata accessor for Prompt.Rendering.Source();
  MEMORY[0x270FA5388](v2 - 8);
  v132[13] = (char *)v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v167 = (uint64_t)v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v166);
  int v165 = (void *)((char *)v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v173 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  MEMORY[0x270FA5388](v173);
  uint64_t v8 = (char *)v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  MEMORY[0x270FA5388](v172);
  uint64_t v10 = (char *)v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for AnnotationEnvelope(0);
  uint64_t v154 = *(void *)(v171 - 8);
  MEMORY[0x270FA5388](v171);
  int v176 = (void *)((char *)v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for PromptCompletion.Annotation(0);
  uint64_t v169 = *(void *)(v12 - 8);
  uint64_t v170 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v175 = (void *)((char *)v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v143 = (char *)v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v1;
  uint64_t v17 = v1[1];
  uint64_t v18 = v1[2];
  uint64_t v19 = v1[3];
  uint64_t v141 = v1[4];
  uint64_t v140 = v1[5];
  uint64_t v144 = v1[6];
  uint64_t v139 = v1[7];
  unint64_t v138 = v1[8];
  v132[3] = v1[9];
  uint64_t v133 = v1[10];
  v132[2] = v1[11];
  v132[1] = v1[12];
  v132[12] = v1[13];
  v132[11] = v1[14];
  v132[10] = v1[15];
  v132[9] = v1[16];
  v132[8] = v1[17];
  v132[7] = v1[18];
  v132[6] = v1[19];
  v132[5] = v1[20];
  v132[4] = v1[21];
  ModelInformationEnvelope.unseal()(v16, v17, v18, v183);
  uint64_t v137 = v183[0];
  uint64_t v136 = v183[1];
  uint64_t v135 = v183[2];
  if (v19)
  {
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS15TokenGeneration18ModerationEnvelope33_FCE651B3B8F212418F5C81F0A4785E63LLV011ProbabilityG0OG_AF16PromptCompletionV0F0V8CategoryV_AP0Q0Ots5NeverOTg506_sSS15d12Generation18f11Envelope33_hijklmnop6LLV011q7D0OAA16rs6V0C0V8t38VAJ0N0OIggyrr_SS3key_AF5valuetAL_ANts5u35OIegnrzr_TR04_s15a12Generation18c11Y79_efghijklm14LLV6unsealAA16op10V0C0VyFAI8q6V_AI11N18OtSS_AD0rD0OtXEfU_Tf3nnnpf_nTf1cn_n(v20);
    swift_bridgeObjectRelease();
    if (*(void *)(v21 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability>);
      uint64_t v22 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v22 = MEMORY[0x263F8EE80];
    }
    v180[0] = v22;
    uint64_t v23 = swift_bridgeObjectRetain();
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v23, 1, v180);
    uint64_t v147 = 0;
    swift_bridgeObjectRelease();
    uint64_t v134 = v180[0];
  }
  else
  {
    uint64_t v134 = 0;
    uint64_t v147 = 0;
  }
  int64_t v24 = *(void *)(v144 + 16);
  uint64_t v25 = MEMORY[0x263F8EE78];
  if (v24)
  {
    uint64_t v182 = MEMORY[0x263F8EE78];
    uint64_t v26 = v144;
    swift_bridgeObjectRetain();
    int64_t v145 = v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    uint64_t v27 = 0;
    uint64_t v146 = v26 + 32;
    uint64_t v168 = v8;
    uint64_t v174 = v10;
    while (1)
    {
      uint64_t v148 = v27;
      uint64_t v28 = (void *)(v146 + 56 * v27);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = v28[2];
      uint64_t v32 = v28[3];
      unint64_t v34 = v28[4];
      uint64_t v33 = v28[5];
      unint64_t v35 = v28[6];
      int64_t v36 = *(void *)(*v28 + 16);
      unint64_t v149 = v34;
      uint64_t v151 = v33;
      unint64_t v150 = v35;
      uint64_t v157 = v29;
      uint64_t v155 = v32;
      uint64_t v153 = v30;
      uint64_t v152 = v31;
      if (v36)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of FinishReason(v32, v34);
        outlined copy of Data._Representation(v33, v35);
        v180[0] = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
        uint64_t v37 = 0;
        uint64_t v158 = v29 + 32;
        int64_t v159 = v36;
        do
        {
          uint64_t v38 = v158 + 48 * v37;
          uint64_t v39 = *(void *)v38;
          unint64_t v40 = *(void *)(v38 + 8);
          int v160 = *(unsigned __int8 *)(v38 + 40);
          uint64_t v164 = v39;
          unint64_t v163 = v40;
          if (v160)
          {
            outlined copy of Data._Representation(v39, v40);
            uint64_t v41 = 0;
            uint64_t v162 = 0;
            unint64_t v161 = 0;
          }
          else
          {
            uint64_t v42 = *(void *)(v38 + 16);
            uint64_t v43 = *(void *)(v38 + 24);
            unint64_t v44 = *(void *)(v38 + 32);
            int64_t v45 = *(void *)(v42 + 16);
            uint64_t v162 = v43;
            unint64_t v161 = v44;
            if (v45)
            {
              outlined copy of PromptCompletion.Content(v39, v40, v42, v43, v44, 0);
              outlined copy of PromptCompletion.Content(v39, v40, v42, v43, v44, 0);
              uint64_t v177 = MEMORY[0x263F8EE78];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
              unint64_t v46 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
              uint64_t v156 = v42;
              uint64_t v47 = v42 + v46;
              uint64_t v48 = *(void *)(v154 + 72);
              do
              {
                uint64_t v49 = v176;
                outlined init with copy of DocumentResourceEnvelope(v47, (uint64_t)v176, type metadata accessor for AnnotationEnvelope);
                uint64_t v50 = *v49;
                outlined init with copy of DocumentResourceEnvelope((uint64_t)v49 + *(int *)(v171 + 20), (uint64_t)v8, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
                if (swift_getEnumCaseMultiPayload() == 1)
                {
                  uint64_t v51 = v167;
                  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v8, v167, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
                  uint64_t v52 = type metadata accessor for DocumentResourceIdentifier();
                  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v10, v51, v52);
                  outlined destroy of DocumentResourceEnvelope(v51, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
                }
                else
                {
                  uint64_t v53 = (uint64_t)v8;
                  char v54 = v165;
                  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v53, (uint64_t)v165, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
                  uint64_t v56 = *v54;
                  uint64_t v55 = v54[1];
                  uint64_t v57 = (char *)v54 + *(int *)(v166 + 20);
                  uint64_t v58 = &v174[*(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20)];
                  uint64_t v59 = type metadata accessor for URL();
                  (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v58, v57, v59);
                  *(void *)uint64_t v174 = v56;
                  uint64_t v10 = v174;
                  *((void *)v174 + 1) = v55;
                  swift_bridgeObjectRetain();
                  uint64_t v60 = (uint64_t)v54;
                  uint64_t v8 = v168;
                  outlined destroy of DocumentResourceEnvelope(v60, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
                }
                swift_storeEnumTagMultiPayload();
                uint64_t v61 = v175;
                void *v175 = v50;
                outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v10, (uint64_t)v61 + *(int *)(v170 + 20), type metadata accessor for PromptCompletion.Annotation.Type);
                outlined destroy of DocumentResourceEnvelope((uint64_t)v176, type metadata accessor for AnnotationEnvelope);
                uint64_t v41 = v177;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1);
                  uint64_t v41 = v177;
                }
                unint64_t v63 = *(void *)(v41 + 16);
                unint64_t v62 = *(void *)(v41 + 24);
                if (v63 >= v62 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
                  uint64_t v41 = v177;
                }
                *(void *)(v41 + 16) = v63 + 1;
                outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v175, v41+ ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80))+ *(void *)(v169 + 72) * v63, type metadata accessor for PromptCompletion.Annotation);
                v47 += v48;
                --v45;
              }
              while (v45);
              uint64_t v42 = v156;
              swift_bridgeObjectRelease();
              uint64_t v39 = v164;
              unint64_t v40 = v163;
              uint64_t v43 = v162;
              unint64_t v64 = v161;
            }
            else
            {
              outlined copy of PromptCompletion.Content(v39, v40, v42, v43, v44, 0);
              outlined copy of PromptCompletion.Content(v39, v40, v42, v43, v44, 0);
              swift_bridgeObjectRetain();
              unint64_t v64 = v44;
              uint64_t v41 = MEMORY[0x263F8EE78];
            }
            outlined copy of Data?(v43, v64);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v39, v40, v42, v43, v64, 0);
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v39, v40, v42, v43, v64, 0);
          }
          unint64_t v65 = v180[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v65 + 16) + 1, 1);
            unint64_t v65 = v180[0];
          }
          unint64_t v67 = *(void *)(v65 + 16);
          unint64_t v66 = *(void *)(v65 + 24);
          if (v67 >= v66 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
            unint64_t v65 = v180[0];
          }
          ++v37;
          *(void *)(v65 + 16) = v67 + 1;
          unint64_t v68 = v65 + 48 * v67;
          unint64_t v69 = v163;
          *(void *)(v68 + 32) = v164;
          *(void *)(v68 + 40) = v69;
          uint64_t v70 = v162;
          *(void *)(v68 + 48) = v41;
          *(void *)(v68 + 56) = v70;
          *(void *)(v68 + 64) = v161;
          *(unsigned char *)(v68 + 72) = v160;
        }
        while (v37 != v159);
        swift_bridgeObjectRelease();
        unint64_t v34 = v149;
        uint64_t v30 = v153;
        int64_t v71 = *(void *)(v153 + 16);
        if (v71)
        {
LABEL_32:
          unint64_t v161 = v65;
          v180[0] = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
          uint64_t v72 = v180[0];
          uint64_t v73 = (unint64_t *)(v30 + 48);
          do
          {
            uint64_t v74 = *(v73 - 1);
            uint64_t v164 = *(v73 - 2);
            unint64_t v75 = v73[1];
            unint64_t v163 = *v73;
            unint64_t v76 = v73[3];
            uint64_t v162 = v73[2];
            uint64_t v78 = v73[4];
            unint64_t v77 = v73[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data?(v78, v77);
            v180[0] = v72;
            unint64_t v80 = *(void *)(v72 + 16);
            unint64_t v79 = *(void *)(v72 + 24);
            if (v80 >= v79 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
              uint64_t v72 = v180[0];
            }
            *(void *)(v72 + 16) = v80 + 1;
            uint64_t v81 = (void *)(v72 + (v80 << 6));
            v81[4] = v164;
            v81[5] = v74;
            v81[6] = v163;
            v81[7] = v75;
            v81[8] = v162;
            v81[9] = v76;
            v73 += 8;
            v81[10] = v78;
            v81[11] = v77;
            --v71;
          }
          while (v71);
          swift_bridgeObjectRelease();
          uint64_t v8 = v168;
          uint64_t v10 = v174;
          unint64_t v34 = v149;
          unint64_t v65 = v161;
          goto LABEL_39;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of FinishReason(v32, v34);
        outlined copy of Data._Representation(v33, v35);
        unint64_t v65 = MEMORY[0x263F8EE78];
        int64_t v71 = *(void *)(v30 + 16);
        if (v71) {
          goto LABEL_32;
        }
      }
      uint64_t v72 = MEMORY[0x263F8EE78];
LABEL_39:
      uint64_t v162 = v72;
      if (v152)
      {
        uint64_t v82 = swift_bridgeObjectRetain();
        uint64_t v83 = v147;
        uint64_t v84 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS15TokenGeneration18ModerationEnvelope33_FCE651B3B8F212418F5C81F0A4785E63LLV011ProbabilityG0OG_AF16PromptCompletionV0F0V8CategoryV_AP0Q0Ots5NeverOTg506_sSS15d12Generation18f11Envelope33_hijklmnop6LLV011q7D0OAA16rs6V0C0V8t38VAJ0N0OIggyrr_SS3key_AF5valuetAL_ANts5u35OIegnrzr_TR04_s15a12Generation18c11Y79_efghijklm14LLV6unsealAA16op10V0C0VyFAI8q6V_AI11N18OtSS_AD0rD0OtXEfU_Tf3nnnpf_nTf1cn_n(v82);
        uint64_t v147 = v83;
        swift_bridgeObjectRelease();
        if (*(void *)(v84 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability>);
          uint64_t v85 = (void *)static _DictionaryStorage.allocate(capacity:)();
          uint64_t v86 = *(void *)(v84 + 16);
        }
        else
        {
          uint64_t v86 = 0;
          uint64_t v85 = (void *)MEMORY[0x263F8EE80];
        }
        uint64_t v89 = v84;
        uint64_t v181 = v85;
        swift_bridgeObjectRetain_n();
        uint64_t v88 = v155;
        if (v86)
        {
          unint64_t v90 = 0;
          uint64_t v91 = (unsigned char *)(v89 + 48);
          unint64_t v163 = v89;
          uint64_t v164 = v86;
          while (1)
          {
            if (v90 >= *(void *)(v89 + 16))
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              uint64_t v129 = (void *)swift_allocError();
              swift_willThrow();
              id v179 = v129;
              MEMORY[0x261201A80](v129);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
              if (swift_dynamicCast())
              {
                uint64_t v177 = 0;
                unint64_t v178 = 0xE000000000000000;
                _StringGuts.grow(_:)(30);
                v130._object = (void *)0x800000025F92CCB0;
                v130._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
                String.append(_:)(v130);
                _print_unlocked<A, B>(_:_:)();
                v131._uint64_t countAndFlagsBits = 39;
                v131._object = (void *)0xE100000000000000;
                String.append(_:)(v131);
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_76:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              while (1)
              {
                swift_unexpectedError();
                __break(1u);
              }
            }
            char v92 = *v91;
            uint64_t v93 = *((void *)v91 - 2);
            uint64_t v94 = *((void *)v91 - 1);
            swift_bridgeObjectRetain();
            if (!v94) {
              break;
            }
            v180[0] = v93;
            v180[1] = v94;
            unint64_t v95 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v94);
            uint64_t v97 = v85[2];
            BOOL v98 = (v96 & 1) == 0;
            BOOL v99 = __OFADD__(v97, v98);
            uint64_t v100 = v97 + v98;
            if (v99) {
              goto LABEL_72;
            }
            char v101 = v96;
            if (v85[3] < v100)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v100, 1);
              unint64_t v102 = v181;
              unint64_t v95 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v94);
              if ((v101 & 1) != (v103 & 1)) {
                goto LABEL_76;
              }
              uint64_t v85 = v102;
              uint64_t v89 = v163;
            }
            if (v101) {
              goto LABEL_74;
            }
            v85[(v95 >> 6) + 8] |= 1 << v95;
            uint64_t v104 = (uint64_t *)(v85[6] + 16 * v95);
            uint64_t *v104 = v93;
            v104[1] = v94;
            *(unsigned char *)(v85[7] + v95) = v92;
            uint64_t v105 = v85[2];
            BOOL v99 = __OFADD__(v105, 1);
            uint64_t v106 = v105 + 1;
            if (v99) {
              goto LABEL_73;
            }
            ++v90;
            v85[2] = v106;
            v91 += 24;
            uint64_t v10 = v174;
            uint64_t v88 = v155;
            if (v164 == v90) {
              goto LABEL_57;
            }
          }
          uint64_t v10 = v174;
          uint64_t v88 = v155;
        }
LABEL_57:
        int v87 = v85;
        swift_bridgeObjectRelease_n();
        unint64_t v34 = v149;
      }
      else
      {
        int v87 = 0;
        uint64_t v88 = v155;
      }
      if (v34 >= 3) {
        uint64_t v107 = v88;
      }
      else {
        uint64_t v107 = 0;
      }
      outlined copy of FinishReason(v88, v34);
      uint64_t v108 = v151;
      unint64_t v109 = v150;
      outlined copy of Data._Representation(v151, v150);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v88, v34);
      outlined consume of Data._Representation(v108, v109);
      uint64_t v25 = v182;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
        uint64_t v25 = v182;
      }
      uint64_t v110 = v148;
      unint64_t v112 = *(void *)(v25 + 16);
      unint64_t v111 = *(void *)(v25 + 24);
      uint64_t v113 = v151;
      unint64_t v114 = v150;
      if (v112 >= v111 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
        unint64_t v114 = v150;
        uint64_t v113 = v151;
        uint64_t v110 = v148;
        uint64_t v25 = v182;
      }
      uint64_t v27 = v110 + 1;
      *(void *)(v25 + 16) = v112 + 1;
      uint64_t v115 = (void *)(v25 + 56 * v112);
      uint64_t v116 = v162;
      v115[4] = v65;
      v115[5] = v116;
      v115[6] = v87;
      v115[7] = v107;
      v115[8] = v34;
      v115[9] = v113;
      v115[10] = v114;
      if (v27 == v145)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v117 = v139;
  unint64_t v118 = v138;
  uint64_t v119 = (uint64_t)v143;
  if (v133)
  {
    uint64_t v120 = v139;
    outlined copy of Data._Representation(v139, v138);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Prompt.Rendering.Source.init(identifier:version:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v117 = v120;
    uint64_t v119 = (uint64_t)v143;
    Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:detokenizedString:)();
    uint64_t v121 = type metadata accessor for Prompt.Rendering();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v119, 0, 1, v121);
  }
  else
  {
    uint64_t v121 = type metadata accessor for Prompt.Rendering();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v119, 1, 1, v121);
    outlined copy of Data._Representation(v117, v118);
  }
  uint64_t v122 = type metadata accessor for PromptCompletion(0);
  uint64_t v123 = v142;
  uint64_t v124 = (uint64_t)v142 + *(int *)(v122 + 36);
  type metadata accessor for Prompt.Rendering();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v124, 1, 1, v121);
  uint64_t v125 = v136;
  *uint64_t v123 = v137;
  v123[1] = v125;
  uint64_t v126 = v134;
  v123[2] = v135;
  v123[3] = v126;
  uint64_t v127 = v141;
  v123[4] = v25;
  v123[5] = v127;
  v123[6] = v140;
  v123[7] = v117;
  v123[8] = v118;
  return outlined assign with take of Prompt.Rendering?(v119, v124);
}

__n128 CompletePromptResponse.init(completion:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v6, type metadata accessor for PromptCompletion);
  PromptCompletionEnvelope.init(sealing:)(v6, (uint64_t *)v12);
  outlined destroy of DocumentResourceEnvelope(a1, type metadata accessor for PromptCompletion);
  long long v7 = v12[9];
  *(_OWORD *)(a2 + 128) = v12[8];
  *(_OWORD *)(a2 + 144) = v7;
  *(_OWORD *)(a2 + 160) = v12[10];
  long long v8 = v12[5];
  *(_OWORD *)(a2 + 64) = v12[4];
  *(_OWORD *)(a2 + 80) = v8;
  long long v9 = v12[7];
  *(_OWORD *)(a2 + 96) = v12[6];
  *(_OWORD *)(a2 + 112) = v9;
  long long v10 = v12[1];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v10;
  __n128 result = (__n128)v12[3];
  *(_OWORD *)(a2 + 32) = v12[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t PromptCompletionEnvelope.init(sealing:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v147 = a2;
  uint64_t v3 = type metadata accessor for Prompt.Rendering();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v139 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v140 = (char *)&v136 - v7;
  uint64_t v8 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v171 = (uint64_t)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v170);
  uint64_t v169 = (uint64_t *)((char *)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v177 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  MEMORY[0x270FA5388](v177);
  uint64_t v12 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for PromptCompletion.Annotation(0);
  uint64_t v160 = *(void *)(v176 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v176);
  uint64_t v175 = (uint64_t *)((char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v180 = (uint64_t)&v136 - v15;
  uint64_t v174 = type metadata accessor for AnnotationEnvelope(0);
  uint64_t v173 = *(void *)(v174 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v174);
  id v179 = (uint64_t *)((char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  uint64_t v178 = (uint64_t)&v136 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (void *)a1[1];
  uint64_t v23 = a1[2];
  uint64_t v183 = *a1;
  uint64_t v184 = v22;
  uint64_t v185 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v146 = specialized ModelInformationEnvelope.init(sealing:)(&v183);
  uint64_t v145 = v24;
  uint64_t v144 = v25;
  uint64_t v148 = a1;
  uint64_t v26 = a1[3];
  uint64_t v172 = v12;
  if (v26)
  {
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy15TokenGeneration16PromptCompletionV10ModerationV8CategoryVAJ11ProbabilityOG_SS_AF0H8Envelope33_FCE651B3B8F212418F5C81F0A4785E63LLV0jK0Ots5NeverOTg504_s15d12Generation16fg3V10h2V8i5VAE11j19OSSAA0E8Envelope33_lmnopqrst39LLV0gH0OIgnnod_AG3key_AI5valuetSS_ANts5U131OIegnrzr_TR04_s15a12Generation18e11Envelope33_ijklmnopq16LLV7sealingAdA16cd18V0C0V_tcfcSS_AD011g7D0OtAI8F14V_AI0Q0OtXEfU_Tf3nnnpf_nTf1cn_n(v27);
    swift_bridgeObjectRelease();
    if (*(void *)(v28 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModerationEnvelope.ProbabilityEnvelope>);
      uint64_t v29 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v29 = MEMORY[0x263F8EE80];
    }
    uint64_t v183 = v29;
    uint64_t v30 = swift_bridgeObjectRetain();
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v30, 1, &v183);
    uint64_t v151 = 0;
    swift_bridgeObjectRelease();
    uint64_t v143 = v183;
    uint64_t v12 = v172;
  }
  else
  {
    uint64_t v143 = 0;
    uint64_t v151 = 0;
  }
  uint64_t v142 = v148[6];
  uint64_t v31 = v148[4];
  uint64_t v141 = v148[5];
  int64_t v32 = *(void *)(v31 + 16);
  uint64_t v33 = MEMORY[0x263F8EE78];
  if (v32)
  {
    uint64_t v138 = v3;
    uint64_t v183 = MEMORY[0x263F8EE78];
    uint64_t v34 = v31;
    swift_bridgeObjectRetain();
    int64_t v150 = v32;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
    uint64_t v35 = 0;
    uint64_t v136 = v34;
    uint64_t v149 = v34 + 32;
    uint64_t v137 = v4;
    uint64_t v162 = v21;
    while (1)
    {
      uint64_t v154 = v35;
      int64_t v36 = (void *)(v149 + 56 * v35);
      uint64_t v37 = *v36;
      uint64_t v38 = v36[1];
      uint64_t v39 = v36[2];
      uint64_t v40 = v36[3];
      unint64_t v42 = v36[4];
      uint64_t v41 = v36[5];
      unint64_t v43 = v36[6];
      int64_t v44 = *(void *)(*v36 + 16);
      unint64_t v159 = v42;
      uint64_t v157 = v41;
      unint64_t v156 = v43;
      uint64_t v155 = v37;
      uint64_t v158 = v38;
      uint64_t v153 = v40;
      uint64_t v152 = v39;
      if (v44)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of FinishReason(v40, v42);
        outlined copy of Data._Representation(v41, v43);
        uint64_t v182 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
        uint64_t v45 = 0;
        uint64_t v165 = v37 + 32;
        int64_t v46 = v44;
        uint64_t v21 = v162;
        int64_t v161 = v46;
        do
        {
          uint64_t v47 = v165 + 48 * v45;
          uint64_t v49 = *(void *)v47;
          unint64_t v48 = *(void *)(v47 + 8);
          uint64_t v51 = *(void *)(v47 + 16);
          uint64_t v50 = *(void *)(v47 + 24);
          unint64_t v52 = *(void *)(v47 + 32);
          LODWORD(v47) = *(unsigned __int8 *)(v47 + 40);
          unint64_t v168 = v48;
          LODWORD(v166) = v47;
          if (v47)
          {
            outlined copy of PromptCompletion.Content(v49, v48, v51, v50, v52, 1);
            uint64_t v53 = 0;
            uint64_t v50 = 0;
            unint64_t v167 = 0;
          }
          else
          {
            int64_t v54 = *(void *)(v51 + 16);
            unint64_t v167 = v52;
            if (v54)
            {
              swift_bridgeObjectRetain_n();
              uint64_t v164 = v49;
              uint64_t v163 = v50;
              outlined copy of PromptCompletion.Content(v49, v48, v51, v50, v52, 0);
              uint64_t v181 = MEMORY[0x263F8EE78];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 0);
              uint64_t v55 = v51;
              uint64_t v56 = v51
                  + ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80));
              uint64_t v57 = *(void *)(v160 + 72);
              do
              {
                uint64_t v58 = v180;
                outlined init with copy of DocumentResourceEnvelope(v56, v180, type metadata accessor for PromptCompletion.Annotation);
                uint64_t v59 = v58;
                uint64_t v60 = v175;
                outlined init with copy of DocumentResourceEnvelope(v59, (uint64_t)v175, type metadata accessor for PromptCompletion.Annotation);
                uint64_t v61 = v179;
                *id v179 = *v60;
                outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v60 + *(int *)(v176 + 20), (uint64_t)v12, type metadata accessor for PromptCompletion.Annotation.Type);
                int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
                unint64_t v63 = (void *)((char *)v61 + *(int *)(v174 + 20));
                if (EnumCaseMultiPayload == 1)
                {
                  uint64_t v64 = v171;
                  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v171, type metadata accessor for PromptCompletion.DocumentCitation);
                  uint64_t v65 = type metadata accessor for DocumentResourceIdentifier();
                  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v65 - 8) + 32))(v63, v64, v65);
                }
                else
                {
                  unint64_t v66 = v169;
                  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v169, type metadata accessor for PromptCompletion.URLCitation);
                  uint64_t v67 = v66[1];
                  *unint64_t v63 = *v66;
                  v63[1] = v67;
                  unint64_t v68 = (char *)v66 + *(int *)(v170 + 20);
                  unint64_t v69 = (char *)v63
                      + *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
                  uint64_t v70 = type metadata accessor for URL();
                  int64_t v71 = v69;
                  uint64_t v12 = v172;
                  (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32))(v71, v68, v70);
                }
                type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
                swift_storeEnumTagMultiPayload();
                outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v179, v178, type metadata accessor for AnnotationEnvelope);
                outlined destroy of DocumentResourceEnvelope(v180, type metadata accessor for PromptCompletion.Annotation);
                uint64_t v53 = v181;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v53 + 16) + 1, 1);
                  uint64_t v53 = v181;
                }
                unint64_t v73 = *(void *)(v53 + 16);
                unint64_t v72 = *(void *)(v53 + 24);
                if (v73 >= v72 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
                  uint64_t v53 = v181;
                }
                *(void *)(v53 + 16) = v73 + 1;
                outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v178, v53+ ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ *(void *)(v173 + 72) * v73, type metadata accessor for AnnotationEnvelope);
                v56 += v57;
                --v54;
              }
              while (v54);
              uint64_t v74 = v55;
              swift_bridgeObjectRelease();
              uint64_t v21 = v162;
              uint64_t v49 = v164;
              int64_t v46 = v161;
              unint64_t v48 = v168;
              uint64_t v50 = v163;
              unint64_t v52 = v167;
            }
            else
            {
              swift_bridgeObjectRetain_n();
              outlined copy of PromptCompletion.Content(v49, v48, v51, v50, v52, 0);
              uint64_t v74 = v51;
              uint64_t v53 = MEMORY[0x263F8EE78];
            }
            outlined copy of Data?(v50, v52);
            outlined copy of Data?(v50, v52);
            swift_bridgeObjectRetain();
            outlined consume of Data?(0, 0xF000000000000000);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data?(v50, v52);
            outlined consume of Data?(v50, v52);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v49, v48, v74, v50, v52, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data?(v50, v52);
          }
          uint64_t v75 = v182;
          uint64_t v76 = v50;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v77 = v75;
          }
          else
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v75 + 16) + 1, 1);
            uint64_t v77 = v182;
          }
          unint64_t v79 = *(void *)(v77 + 16);
          unint64_t v78 = *(void *)(v77 + 24);
          if (v79 >= v78 >> 1)
          {
            uint64_t v164 = v49;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1);
            uint64_t v49 = v164;
            uint64_t v77 = v182;
          }
          ++v45;
          *(void *)(v77 + 16) = v79 + 1;
          unint64_t v80 = v77 + 48 * v79;
          unint64_t v81 = v168;
          *(void *)(v80 + 32) = v49;
          *(void *)(v80 + 40) = v81;
          *(void *)(v80 + 48) = v53;
          *(void *)(v80 + 56) = v76;
          *(void *)(v80 + 64) = v167;
          *(unsigned char *)(v80 + 72) = v166;
        }
        while (v45 != v46);
        uint64_t v165 = v77;
        swift_bridgeObjectRelease();
        uint64_t v82 = MEMORY[0x263F8EE78];
        unint64_t v42 = v159;
        uint64_t v38 = v158;
        int64_t v83 = *(void *)(v158 + 16);
        if (v83)
        {
LABEL_33:
          uint64_t v182 = v82;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
          uint64_t v84 = v182;
          uint64_t v85 = (unint64_t *)(v38 + 48);
          do
          {
            uint64_t v86 = *(v85 - 1);
            unint64_t v168 = *(v85 - 2);
            unint64_t v87 = v85[1];
            unint64_t v167 = *v85;
            unint64_t v88 = v85[3];
            unint64_t v166 = v85[2];
            uint64_t v90 = v85[4];
            unint64_t v89 = v85[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data?(v90, v89);
            uint64_t v182 = v84;
            unint64_t v92 = *(void *)(v84 + 16);
            unint64_t v91 = *(void *)(v84 + 24);
            if (v92 >= v91 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
              uint64_t v84 = v182;
            }
            *(void *)(v84 + 16) = v92 + 1;
            uint64_t v93 = (void *)(v84 + (v92 << 6));
            v93[4] = v168;
            v93[5] = v86;
            v93[6] = v167;
            v93[7] = v87;
            v93[8] = v166;
            v93[9] = v88;
            v85 += 8;
            v93[10] = v90;
            v93[11] = v89;
            --v83;
          }
          while (v83);
          uint64_t v94 = v84;
          swift_bridgeObjectRelease();
          uint64_t v21 = v162;
          unint64_t v42 = v159;
          goto LABEL_40;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of FinishReason(v40, v42);
        outlined copy of Data._Representation(v41, v43);
        uint64_t v82 = MEMORY[0x263F8EE78];
        uint64_t v165 = MEMORY[0x263F8EE78];
        uint64_t v21 = v162;
        int64_t v83 = *(void *)(v38 + 16);
        if (v83) {
          goto LABEL_33;
        }
      }
      uint64_t v94 = v82;
LABEL_40:
      if (v152)
      {
        uint64_t v95 = swift_bridgeObjectRetain();
        uint64_t v96 = v151;
        uint64_t v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy15TokenGeneration16PromptCompletionV10ModerationV8CategoryVAJ11ProbabilityOG_SS_AF0H8Envelope33_FCE651B3B8F212418F5C81F0A4785E63LLV0jK0Ots5NeverOTg504_s15d12Generation16fg3V10h2V8i5VAE11j19OSSAA0E8Envelope33_lmnopqrst39LLV0gH0OIgnnod_AG3key_AI5valuetSS_ANts5U131OIegnrzr_TR04_s15a12Generation18e11Envelope33_ijklmnopq16LLV7sealingAdA16cd18V0C0V_tcfcSS_AD011g7D0OtAI8F14V_AI0Q0OtXEfU_Tf3nnnpf_nTf1cn_n(v95);
        swift_bridgeObjectRelease();
        if (*(void *)(v97 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModerationEnvelope.ProbabilityEnvelope>);
          uint64_t v98 = static _DictionaryStorage.allocate(capacity:)();
          unint64_t v42 = v159;
        }
        else
        {
          uint64_t v98 = MEMORY[0x263F8EE80];
        }
        uint64_t v182 = v98;
        uint64_t v101 = swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v101, 1, &v182);
        uint64_t v151 = v96;
        uint64_t v100 = v153;
        if (v96)
        {
          while (1)
          {
            swift_unexpectedError();
            __break(1u);
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v99 = v182;
      }
      else
      {
        uint64_t v99 = 0;
        uint64_t v100 = v153;
      }
      if (v42 >= 3) {
        uint64_t v102 = v100;
      }
      else {
        uint64_t v102 = 0;
      }
      outlined copy of FinishReason(v100, v42);
      uint64_t v103 = v157;
      unint64_t v104 = v156;
      outlined copy of Data._Representation(v157, v156);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v100, v42);
      outlined consume of Data._Representation(v103, v104);
      uint64_t v33 = v183;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1);
        uint64_t v33 = v183;
      }
      uint64_t v105 = v154;
      unint64_t v107 = *(void *)(v33 + 16);
      unint64_t v106 = *(void *)(v33 + 24);
      uint64_t v108 = v157;
      unint64_t v109 = v156;
      if (v107 >= v106 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v106 > 1, v107 + 1, 1);
        unint64_t v109 = v156;
        uint64_t v108 = v157;
        uint64_t v105 = v154;
        uint64_t v33 = v183;
      }
      uint64_t v35 = v105 + 1;
      *(void *)(v33 + 16) = v107 + 1;
      uint64_t v110 = (void *)(v33 + 56 * v107);
      v110[4] = v165;
      v110[5] = v94;
      v110[6] = v99;
      v110[7] = v102;
      v110[8] = v159;
      v110[9] = v108;
      v110[10] = v109;
      uint64_t v12 = v172;
      if (v35 == v150)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v138;
        uint64_t v4 = v137;
        break;
      }
    }
  }
  uint64_t v111 = type metadata accessor for PromptCompletion(0);
  outlined init with copy of Prompt.Rendering?((uint64_t)v148 + *(int *)(v111 + 36), (uint64_t)v21, &demangling cache variable for type metadata for Prompt.Rendering?);
  int v112 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v21, 1, v3);
  id v179 = 0;
  uint64_t v180 = 0;
  uint64_t v178 = 0;
  uint64_t v177 = 0;
  uint64_t v176 = 0;
  uint64_t v175 = 0;
  uint64_t v174 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = v4;
  uint64_t v116 = 0;
  uint64_t v117 = v3;
  uint64_t v118 = 0;
  uint64_t v119 = v21;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  if (v112 != 1)
  {
    uint64_t v122 = v140;
    (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v140, v119, v117);
    uint64_t v123 = (uint64_t)v139;
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v139, v122, v117);
    specialized PromptRenderingEnvelope.init(sealing:)(v123, &v183);
    id v179 = v184;
    uint64_t v180 = v183;
    uint64_t v178 = v185;
    uint64_t v177 = v186;
    uint64_t v176 = v187;
    uint64_t v175 = (void *)v188;
    uint64_t v113 = v190;
    uint64_t v174 = v189;
    uint64_t v114 = v191;
    uint64_t v116 = v192;
    uint64_t v118 = v193;
    uint64_t v120 = v194;
    uint64_t v121 = v195;
    (*(void (**)(char *, uint64_t))(v115 + 8))(v122, v117);
  }
  uint64_t v124 = (uint64_t)v148;
  uint64_t v125 = v148[7];
  unint64_t v126 = v148[8];
  outlined copy of Data._Representation(v125, v126);
  uint64_t result = outlined destroy of DocumentResourceEnvelope(v124, type metadata accessor for PromptCompletion);
  uint64_t v128 = v147;
  uint64_t v129 = v145;
  *uint64_t v147 = v146;
  v128[1] = v129;
  uint64_t v130 = v143;
  v128[2] = v144;
  v128[3] = v130;
  uint64_t v131 = v142;
  v128[4] = v141;
  v128[5] = v131;
  v128[6] = v33;
  v128[7] = v125;
  uint64_t v132 = v180;
  v128[8] = v126;
  v128[9] = v132;
  uint64_t v133 = v178;
  v128[10] = (uint64_t)v179;
  v128[11] = v133;
  uint64_t v134 = v176;
  v128[12] = v177;
  v128[13] = v134;
  uint64_t v135 = v174;
  v128[14] = (uint64_t)v175;
  v128[15] = v135;
  v128[16] = v113;
  v128[17] = v114;
  v128[18] = v116;
  v128[19] = v118;
  v128[20] = v120;
  v128[21] = v121;
  return result;
}

__n128 CompletePromptResponse.init(tokens:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v68 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v60 - v7;
  uint64_t v65 = type metadata accessor for PromptCompletion(0);
  uint64_t v9 = MEMORY[0x270FA5388](v65);
  unint64_t v66 = (uint64_t *)((char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v67 = (uint64_t *)((char *)&v60 - v11);
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.inference);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_25F79F000, v13, v14, "Metadata like usage and finish reason will be bogus because a deprecated initializer is being used. Use init(completion:) instead.", v15, 2u);
    MEMORY[0x261201C80](v15, -1, -1);
  }

  uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration0D0VG_SSs5NeverOTg504_s15D116Generation22CompletePromptResponseV6tokensACSayAA0A0VG_tcfcSSAFcfu_33_2c83176e6c929c34cc0288687e3e762dAFSSTf3nnnpk_nTf1cn_n(a1);
  swift_bridgeObjectRelease();
  *(void *)&v71[0] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Segment>);
  uint64_t v20 = swift_allocObject();
  long long v70 = xmmword_25F91CC30;
  *(_OWORD *)(v20 + 16) = xmmword_25F91CC30;
  uint64_t v21 = MEMORY[0x263F8EE78];
  *(void *)(v20 + 32) = v17;
  *(void *)(v20 + 40) = v19;
  *(void *)(v20 + 48) = v21;
  *(_OWORD *)(v20 + 56) = xmmword_25F91CC60;
  *(unsigned char *)(v20 + 72) = 0;
  uint64_t v64 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(0, 0xF000000000000000);
  specialized Dictionary.init(dictionaryLiteral:)(v21);
  uint64_t v22 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&v71[0] = 0;
  id v24 = objc_msgSend(v22, sel_dataWithJSONObject_options_error_, isa, 0, v71);

  id v25 = *(id *)&v71[0];
  if (!v24)
  {
    uint64_t v57 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v63 = a2;
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v69 = v27;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformation.Asset>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v70;
  uint64_t v29 = MEMORY[0x263F8EE78];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  Class v30 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&v71[0] = 0;
  id v31 = objc_msgSend(v22, sel_dataWithJSONObject_options_error_, v30, 0, v71);

  id v24 = *(id *)&v71[0];
  if (!v31)
  {
LABEL_10:
    id v58 = v24;
    _convertNSErrorToError(_:)();

    id v42 = (id)swift_willThrow();
    __break(1u);
LABEL_11:
    uint64_t v59 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  id v32 = *(id *)&v71[0];
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  *(void *)(v28 + 32) = 0;
  *(void *)(v28 + 40) = 0xE000000000000000;
  *(_OWORD *)(v28 + 48) = xmmword_25F91D710;
  *(void *)(v28 + 64) = v33;
  *(void *)(v28 + 72) = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Candidate>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v70;
  *(void *)(v36 + 32) = v20;
  *(void *)(v36 + 40) = v29;
  *(void *)(v36 + 48) = 0;
  *(void *)(v36 + 56) = 0;
  *(void *)(v36 + 64) = 0;
  *(void *)(v36 + 72) = v26;
  unint64_t v37 = v69;
  *(void *)(v36 + 80) = v69;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of FinishReason(0, 0);
  *(void *)&long long v70 = v26;
  outlined copy of Data._Representation(v26, v37);
  specialized Dictionary.init(dictionaryLiteral:)(v29);
  uint64_t v38 = type metadata accessor for Prompt.Rendering();
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
  uint64_t v62 = v20;
  uint64_t v61 = v39;
  v39((uint64_t)v8, 1, 1, v38);
  Class v40 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&v71[0] = 0;
  id v41 = objc_msgSend(v22, sel_dataWithJSONObject_options_error_, v40, 0, v71);

  id v42 = *(id *)&v71[0];
  if (!v41) {
    goto LABEL_11;
  }
  uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  uint64_t v46 = v68;
  outlined init with copy of Prompt.Rendering?((uint64_t)v8, v68, &demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v47 = v66;
  uint64_t v48 = (uint64_t)v66 + *(int *)(v65 + 36);
  v61(v48, 1, 1, v38);
  *uint64_t v47 = v28;
  v47[1] = 0;
  _OWORD v47[2] = 0;
  v47[3] = 0;
  v47[4] = v36;
  v47[5] = 0;
  v47[6] = 0;
  v47[7] = v43;
  v47[8] = v45;
  outlined assign with take of Prompt.Rendering?(v46, v48);
  uint64_t v49 = (uint64_t)v47;
  uint64_t v50 = v67;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v49, (uint64_t)v67, type metadata accessor for PromptCompletion);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v8, &demangling cache variable for type metadata for Prompt.Rendering?);
  PromptCompletionEnvelope.init(sealing:)(v50, (uint64_t *)v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(0, 0);
  outlined consume of Data._Representation(v70, v69);
  long long v51 = v71[9];
  uint64_t v52 = v63;
  *(_OWORD *)(v63 + 128) = v71[8];
  *(_OWORD *)(v52 + 144) = v51;
  *(_OWORD *)(v52 + 160) = v71[10];
  long long v53 = v71[5];
  *(_OWORD *)(v52 + 64) = v71[4];
  *(_OWORD *)(v52 + 80) = v53;
  long long v54 = v71[7];
  *(_OWORD *)(v52 + 96) = v71[6];
  *(_OWORD *)(v52 + 112) = v54;
  long long v55 = v71[1];
  *(_OWORD *)uint64_t v52 = v71[0];
  *(_OWORD *)(v52 + 16) = v55;
  __n128 result = (__n128)v71[3];
  *(_OWORD *)(v52 + 32) = v71[2];
  *(__n128 *)(v52 + 48) = result;
  return result;
}

__n128 CompletePromptResponse.init(toolCalls:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v50 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v44 - v6;
  uint64_t v48 = type metadata accessor for PromptCompletion(0);
  uint64_t v8 = MEMORY[0x270FA5388](v48);
  uint64_t v10 = (uint64_t *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t *)((char *)&v44 - v11);
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.inference);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_25F79F000, v13, v14, "Metadata like usage and finish reason will be bogus because a deprecated initializer is being used. Use init(completion:) instead.", v15, 2u);
    MEMORY[0x261201C80](v15, -1, -1);
  }

  uint64_t v16 = MEMORY[0x263F8EE78];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v17 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&v53[0] = 0;
  id v51 = v17;
  id v19 = objc_msgSend(v17, sel_dataWithJSONObject_options_error_, isa, 0, v53);

  id v20 = *(id *)&v53[0];
  if (!v19)
  {
    id v42 = v20;
    uint64_t v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
LABEL_9:
    id v43 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Candidate>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_25F91CC30;
  uint64_t v25 = v52;
  *(void *)(v24 + 32) = v16;
  *(void *)(v24 + 40) = v25;
  *(void *)(v24 + 48) = 0;
  *(void *)(v24 + 56) = 0;
  *(void *)(v24 + 64) = 0;
  *(void *)(v24 + 72) = v21;
  *(void *)(v24 + 80) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of FinishReason(0, 0);
  uint64_t v47 = v21;
  unint64_t v46 = v23;
  outlined copy of Data._Representation(v21, v23);
  specialized Dictionary.init(dictionaryLiteral:)(v16);
  uint64_t v26 = type metadata accessor for Prompt.Rendering();
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  v45(v7, 1, 1, v26);
  Class v27 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&v53[0] = 0;
  id v28 = objc_msgSend(v51, sel_dataWithJSONObject_options_error_, v27, 0, v53);

  uint64_t v29 = *(void **)&v53[0];
  if (!v28) {
    goto LABEL_9;
  }
  id v30 = *(id *)&v53[0];
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  uint64_t v34 = v50;
  outlined init with copy of Prompt.Rendering?((uint64_t)v7, v50, &demangling cache variable for type metadata for Prompt.Rendering?);
  uint64_t v35 = (uint64_t)v10 + *(int *)(v48 + 36);
  v45((char *)v35, 1, 1, v26);
  *uint64_t v10 = MEMORY[0x263F8EE78];
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v24;
  v10[5] = 0;
  v10[6] = 0;
  v10[7] = v31;
  v10[8] = v33;
  outlined assign with take of Prompt.Rendering?(v34, v35);
  uint64_t v36 = v49;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v10, (uint64_t)v49, type metadata accessor for PromptCompletion);
  outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v7, &demangling cache variable for type metadata for Prompt.Rendering?);
  PromptCompletionEnvelope.init(sealing:)(v36, (uint64_t *)v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(0, 0);
  outlined consume of Data._Representation(v47, v46);
  long long v37 = v53[9];
  *(_OWORD *)(a2 + 128) = v53[8];
  *(_OWORD *)(a2 + 144) = v37;
  *(_OWORD *)(a2 + 160) = v53[10];
  long long v38 = v53[5];
  *(_OWORD *)(a2 + 64) = v53[4];
  *(_OWORD *)(a2 + 80) = v38;
  long long v39 = v53[7];
  *(_OWORD *)(a2 + 96) = v53[6];
  *(_OWORD *)(a2 + 112) = v39;
  long long v40 = v53[1];
  *(_OWORD *)a2 = v53[0];
  *(_OWORD *)(a2 + 16) = v40;
  __n128 result = (__n128)v53[3];
  *(_OWORD *)(a2 + 32) = v53[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

unint64_t CompletePromptResponse.tokens.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for Token();
  uint64_t v49 = *(void *)(v53 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v53);
  uint64_t v52 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v48 = (char *)&v47 - v6;
  uint64_t v7 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v10 = v0[9];
  long long v65 = v0[8];
  long long v66 = v10;
  long long v67 = v0[10];
  long long v11 = v0[5];
  long long v61 = v0[4];
  long long v62 = v11;
  long long v12 = v0[7];
  long long v63 = v0[6];
  long long v64 = v12;
  long long v13 = v0[1];
  long long v57 = *v0;
  long long v14 = v0[2];
  long long v60 = v0[3];
  long long v58 = v13;
  long long v59 = v14;
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.inference);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v54 = v3;
  if (v18)
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)id v19 = 136315138;
    uint64_t v56 = v20;
    long long v55 = &type metadata for CompletePromptResponse;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptResponse.Type);
    uint64_t v21 = String.init<A>(describing:)();
    long long v55 = (ValueMetadata *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25F79F000, v16, v17, "Accessing tokens on %s is deprecated.", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v20, -1, -1);
    MEMORY[0x261201C80](v19, -1, -1);
  }

  PromptCompletionEnvelope.unseal()(v9);
  unint64_t v23 = (void *)v9[4];
  swift_bridgeObjectRetain();
  outlined destroy of DocumentResourceEnvelope((uint64_t)v9, type metadata accessor for PromptCompletion);
  if (!v23[2])
  {
    unint64_t v32 = MEMORY[0x263F8EE78];
    goto LABEL_21;
  }
  uint64_t v24 = v23[4];
  uint64_t v25 = v23[7];
  unint64_t v26 = v23[8];
  uint64_t v27 = v23[9];
  unint64_t v28 = v23[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of FinishReason(v25, v26);
  outlined copy of Data._Representation(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FinishReason(v25, v26);
  outlined consume of Data._Representation(v27, v28);
  uint64_t v29 = *(void *)(v24 + 16);
  if (!v29)
  {
    unint64_t v32 = MEMORY[0x263F8EE78];
    goto LABEL_21;
  }
  id v30 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
  id v51 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v49 + 32);
  swift_bridgeObjectRetain();
  uint64_t v47 = v24;
  uint64_t v31 = v24 + 40;
  unint64_t v32 = MEMORY[0x263F8EE78];
  uint64_t v33 = (uint64_t)v54;
  do
  {
    if (*(unsigned char *)(v31 + 32))
    {
      (*v30)(v33, 1, 1, v53);
LABEL_9:
      outlined destroy of GenerativeFunctionsInstrumentationEvent?(v33, &demangling cache variable for type metadata for Token?);
      goto LABEL_10;
    }
    uint64_t v35 = *(void *)(v31 + 16);
    unint64_t v34 = *(void *)(v31 + 24);
    unint64_t v37 = *(void *)v31;
    uint64_t v36 = *(void *)(v31 + 8);
    uint64_t v38 = *(void *)(v31 - 8);
    outlined copy of PromptCompletion.Content(v38, *(void *)v31, v36, v35, v34, 0);
    swift_bridgeObjectRetain();
    Token.init(text:)();
    uint64_t v39 = v53;
    (*v30)((uint64_t)v54, 0, 1, v53);
    uint64_t v40 = v36;
    uint64_t v33 = (uint64_t)v54;
    outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v38, v37, v40, v35, v34, 0);
    if ((*v51)(v33, 1, v39) == 1) {
      goto LABEL_9;
    }
    id v41 = *v50;
    id v42 = v48;
    uint64_t v43 = v53;
    (*v50)(v48, v33, v53);
    v41(v52, (uint64_t)v42, v43);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1, v32);
    }
    unint64_t v45 = *(void *)(v32 + 16);
    unint64_t v44 = *(void *)(v32 + 24);
    if (v45 >= v44 >> 1) {
      unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v32);
    }
    *(void *)(v32 + 16) = v45 + 1;
    v41((char *)(v32+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v45), (uint64_t)v52, v53);
LABEL_10:
    v31 += 48;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t CompletePromptResponse.toolCalls.getter()
{
  uint64_t v1 = type metadata accessor for PromptCompletion(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (ValueMetadata **)((char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v4 = v0[9];
  long long v33 = v0[8];
  long long v34 = v4;
  long long v35 = v0[10];
  long long v5 = v0[5];
  long long v29 = v0[4];
  long long v30 = v5;
  long long v6 = v0[7];
  long long v31 = v0[6];
  long long v32 = v6;
  long long v7 = v0[1];
  long long v25 = *v0;
  long long v26 = v7;
  long long v8 = v0[3];
  long long v27 = v0[2];
  long long v28 = v8;
  if (one-time initialization token for inference != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.inference);
  long long v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    long long v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)long long v12 = 136315138;
    uint64_t v24 = v13;
    unint64_t v23 = &type metadata for CompletePromptResponse;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptResponse.Type);
    uint64_t v14 = String.init<A>(describing:)();
    unint64_t v23 = (ValueMetadata *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25F79F000, v10, v11, "Accessing tool calls on %s is deprecated.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261201C80](v13, -1, -1);
    MEMORY[0x261201C80](v12, -1, -1);
  }

  PromptCompletionEnvelope.unseal()(v3);
  uint64_t v16 = (void *)v3[4];
  swift_bridgeObjectRetain();
  outlined destroy of DocumentResourceEnvelope((uint64_t)v3, type metadata accessor for PromptCompletion);
  if (v16[2])
  {
    uint64_t v17 = v16[5];
    uint64_t v18 = v16[7];
    unint64_t v19 = v16[8];
    uint64_t v20 = v16[9];
    unint64_t v21 = v16[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason(v18, v19);
    outlined copy of Data._Representation(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FinishReason(v18, v19);
    outlined consume of Data._Representation(v20, v21);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v17;
}

BOOL static CompletePromptResponse.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  v14[8] = a1[8];
  v14[9] = v2;
  v14[10] = a1[10];
  long long v3 = a1[5];
  v14[4] = a1[4];
  v14[5] = v3;
  long long v4 = a1[7];
  v14[6] = a1[6];
  v14[7] = v4;
  long long v5 = a1[1];
  v14[0] = *a1;
  v14[1] = v5;
  long long v6 = a1[3];
  id v14[2] = a1[2];
  void v14[3] = v6;
  long long v7 = a2[9];
  v13[8] = a2[8];
  v13[9] = v7;
  v13[10] = a2[10];
  long long v8 = a2[5];
  v13[4] = a2[4];
  v13[5] = v8;
  long long v9 = a2[7];
  v13[6] = a2[6];
  v13[7] = v9;
  long long v10 = a2[1];
  v13[0] = *a2;
  v13[1] = v10;
  long long v11 = a2[3];
  void v13[2] = a2[2];
  v13[3] = v11;
  return specialized static PromptCompletionEnvelope.== infix(_:_:)((uint64_t *)v14, (uint64_t *)v13);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompletePromptResponse.CodingKeys()
{
  return 0x74656C706D6F635FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptResponse.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x74656C706D6F635FLL && a2 == 0xEB000000006E6F69)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CompletePromptResponse.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptResponse.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v8 = v2[9];
  v14[8] = v2[8];
  v14[9] = v8;
  v14[10] = v2[10];
  long long v9 = v2[5];
  v14[4] = v2[4];
  v14[5] = v9;
  long long v10 = v2[7];
  v14[6] = v2[6];
  v14[7] = v10;
  long long v11 = v2[1];
  v14[0] = *v2;
  v14[1] = v11;
  long long v12 = v2[3];
  id v14[2] = v2[2];
  void v14[3] = v12;
  lazy protocol witness table accessor for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int CompletePromptResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  PromptCompletionEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t CompletePromptResponse.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptResponse.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    long long v9 = v23;
    a2[8] = v22;
    a2[9] = v9;
    a2[10] = v24;
    long long v10 = v19;
    a2[4] = v18;
    a2[5] = v10;
    long long v11 = v21;
    a2[6] = v20;
    a2[7] = v11;
    long long v12 = *(_OWORD *)&v15[24];
    *a2 = *(_OWORD *)&v15[8];
    a2[1] = v12;
    long long v13 = v17;
    a2[2] = v16;
    a2[3] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CompletePromptResponse()
{
  Hasher.init(_seed:)();
  PromptCompletionEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptResponse()
{
  Hasher.init(_seed:)();
  PromptCompletionEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompletePromptResponse@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return CompletePromptResponse.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompletePromptResponse(void *a1)
{
  return CompletePromptResponse.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CompletePromptResponse(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  v14[8] = a1[8];
  v14[9] = v2;
  v14[10] = a1[10];
  long long v3 = a1[5];
  v14[4] = a1[4];
  v14[5] = v3;
  long long v4 = a1[7];
  v14[6] = a1[6];
  v14[7] = v4;
  long long v5 = a1[1];
  v14[0] = *a1;
  v14[1] = v5;
  long long v6 = a1[3];
  id v14[2] = a1[2];
  void v14[3] = v6;
  long long v7 = a2[9];
  v13[8] = a2[8];
  v13[9] = v7;
  v13[10] = a2[10];
  long long v8 = a2[5];
  v13[4] = a2[4];
  v13[5] = v8;
  long long v9 = a2[7];
  v13[6] = a2[6];
  v13[7] = v9;
  long long v10 = a2[1];
  v13[0] = *a2;
  v13[1] = v10;
  long long v11 = a2[3];
  void v13[2] = a2[2];
  v13[3] = v11;
  return specialized static PromptCompletionEnvelope.== infix(_:_:)((uint64_t *)v14, (uint64_t *)v13);
}

uint64_t PromptCompletionStreamElementEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  MEMORY[0x270FA5388](v4 - 8);
  long long v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of PromptCompletionEvent(a1, (uint64_t)v9);
  PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)((uint64_t)v9, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v6, a2, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
}

void CompletePromptResponseElement.token.getter()
{
  PromptCompletionStreamElementEnvelope.Envelope.unseal()(v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if (swift_dynamicCast())
  {
    uint64_t v0 = v9;
    uint64_t v1 = v10;
    uint64_t v2 = v11;
    uint64_t v3 = v12;
    uint64_t v5 = v13;
    uint64_t v4 = v14;
    uint64_t v6 = v16;
    unint64_t v7 = v17;
    swift_bridgeObjectRetain();
    uint64_t v8 = v15;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v0 = 0;
    uint64_t v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  Token.init(text:)();
  outlined consume of PromptCompletionEventCandidateTextDelta?(v0, v1, v2, v3, v5, v4, v8, v6, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompletePromptResponseElement.CodingKeys()
{
  return 0x746E6576655FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptResponseElement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E6576655FLL && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptResponseElement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptResponseElement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CompletePromptResponseElement.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptResponseElement.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for PromptCompletionStreamElementEnvelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int CompletePromptResponseElement.hashValue.getter()
{
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t CompletePromptResponseElement.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptResponseElement.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CompletePromptResponseElement(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, (uint64_t)v11, type metadata accessor for PromptCompletionStreamElementEnvelope);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, v13, type metadata accessor for CompletePromptResponseElement);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CompletePromptResponseElement()
{
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptResponseElement()
{
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompletePromptResponseElement@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CompletePromptResponseElement.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompletePromptResponseElement(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptResponseElement.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for PromptCompletionStreamElementEnvelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Constraints.hash(into:)()
{
  uint64_t v1 = type metadata accessor for GenerationSchema();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Constraints(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v0, (uint64_t)v7, type metadata accessor for Constraints);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      Swift::UInt v9 = 1;
    }
    else {
      Swift::UInt v9 = 2;
    }
    Hasher._combine(_:)(v9);
    String.hash(into:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    dispatch thunk of Hashable.hash(into:)();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Constraints.CodingKeys()
{
  uint64_t v1 = 0x72616D6D617267;
  if (*v0 != 1) {
    uint64_t v1 = 0x476C616974726170;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x616D65686373;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Constraints.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Constraints.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.GrammarCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.GrammarCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.PartialGrammarCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.PartialGrammarCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Hashable.hash(into:) in conformance Constraints.SchemaCodingKeys()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.SchemaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.SchemaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Constraints.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.PartialGrammarCodingKeys>);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.GrammarCodingKeys>);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.SchemaCodingKeys>);
  uint64_t v32 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for GenerationSchema();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Constraints(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.CodingKeys>);
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope(v41, (uint64_t)v14, type metadata accessor for Constraints);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      char v45 = 1;
      lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys();
      uint64_t v19 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v19);
    }
    else
    {
      char v46 = 2;
      lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys();
      long long v28 = v38;
      uint64_t v29 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v30 = v40;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v29);
    }
  }
  else
  {
    uint64_t v22 = v32;
    uint64_t v23 = v33;
    long long v24 = v14;
    uint64_t v25 = v34;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v11, v24, v34);
    char v44 = 0;
    lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
    uint64_t v26 = v43;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    uint64_t v27 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v27);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v26);
  }
}

Swift::Int Constraints.hashValue.getter()
{
  return CountTokensPromptTemplateRequest.hashValue.getter((void (*)(unsigned char *))Constraints.hash(into:));
}

uint64_t Constraints.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.PartialGrammarCodingKeys>);
  uint64_t v60 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  long long v66 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.GrammarCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v59 = v5;
  MEMORY[0x270FA5388](v4);
  long long v65 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.SchemaCodingKeys>);
  uint64_t v55 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  long long v63 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.CodingKeys>);
  uint64_t v62 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Constraints(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v51 - v18;
  MEMORY[0x270FA5388](v17);
  long long v21 = (char *)&v51 - v20;
  uint64_t v22 = a1[3];
  long long v67 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  uint64_t v23 = (uint64_t)v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    uint64_t v24 = (uint64_t)v67;
  }
  else
  {
    id v51 = (uint64_t *)v16;
    uint64_t v52 = (uint64_t *)v13;
    uint64_t v53 = v19;
    uint64_t v54 = v10;
    uint64_t v25 = v63;
    uint64_t v26 = v64;
    uint64_t v27 = v65;
    long long v28 = v66;
    uint64_t v68 = v21;
    uint64_t v29 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v29 + 16) == 1)
    {
      if (*(unsigned char *)(v29 + 32))
      {
        if (*(unsigned char *)(v29 + 32) == 1)
        {
          char v70 = 1;
          lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys();
          uint64_t v30 = v27;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v31 = v58;
          uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v33 = v62;
          uint64_t v44 = v32;
          uint64_t v46 = v45;
          (*(void (**)(char *, uint64_t))(v59 + 8))(v30, v31);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v26);
          uint64_t v47 = (uint64_t)v51;
          *id v51 = v44;
        }
        else
        {
          char v71 = 2;
          lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys();
          uint64_t v39 = v28;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v41 = v9;
          uint64_t v42 = v56;
          uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
          long long v65 = 0;
          uint64_t v48 = v43;
          uint64_t v46 = v49;
          (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v62 + 8))(v41, v26);
          uint64_t v47 = (uint64_t)v52;
          *uint64_t v52 = v48;
        }
        *(void *)(v47 + 8) = v46;
        swift_storeEnumTagMultiPayload();
        uint64_t v24 = (uint64_t)v67;
      }
      else
      {
        char v69 = 0;
        lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        type metadata accessor for GenerationSchema();
        lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
        uint64_t v47 = (uint64_t)v53;
        uint64_t v38 = v57;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v38);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v62 + 8))(v9, v26);
        uint64_t v24 = (uint64_t)v67;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v50 = (uint64_t)v68;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v47, (uint64_t)v68, type metadata accessor for Constraints);
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v50, v61, type metadata accessor for Constraints);
    }
    else
    {
      uint64_t v34 = v9;
      uint64_t v35 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v37 = v36;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v37 = v54;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x263F8DCB0], v35);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v26);
      uint64_t v24 = (uint64_t)v67;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v24);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Constraints(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))Constraints.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Constraints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))Constraints.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance Constraints@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Constraints.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Constraints(void *a1)
{
  return Constraints.encode(to:)(a1);
}

unint64_t static RequestMetadata.userInfoKeyShouldDetokenizeRenderedPrompt.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t RequestMetadata.invocationIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestMetadata.invocationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*RequestMetadata.invocationIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t RequestMetadata.functionIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestMetadata.functionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*RequestMetadata.functionIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t RequestMetadata.clientRequestIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestMetadata.clientRequestIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*RequestMetadata.clientRequestIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t RequestMetadata.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RequestMetadata.userInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*RequestMetadata.userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void __swiftcall RequestMetadata.init(invocationIdentifier:functionIdentifier:clientRequestIdentifier:userInfo:)(TokenGeneration::RequestMetadata *__return_ptr retstr, Swift::String invocationIdentifier, Swift::String functionIdentifier, Swift::String_optional clientRequestIdentifier, Swift::OpaquePointer userInfo)
{
  retstr->invocationIdentifier = invocationIdentifier;
  retstr->functionIdentifier = functionIdentifier;
  retstr->Swift::String_optional clientRequestIdentifier = clientRequestIdentifier;
  retstr->userInfo = userInfo;
}

uint64_t RequestMetadata.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int RequestMetadata.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t ModelInformationEnvelope.unseal()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v17 = a4;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    uint64_t v21 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v21;
    uint64_t v7 = (unint64_t *)(a1 + 72);
    do
    {
      uint64_t v8 = *(v7 - 5);
      uint64_t v9 = *(v7 - 4);
      uint64_t v10 = *(v7 - 2);
      uint64_t v20 = *(v7 - 3);
      uint64_t v11 = *(v7 - 1);
      unint64_t v12 = *v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v11, v12);
      unint64_t v14 = *(void *)(v21 + 16);
      unint64_t v13 = *(void *)(v21 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      v7 += 6;
      *(void *)(v21 + 16) = v14 + 1;
      uint64_t v15 = (void *)(v21 + 48 * v14);
      v15[4] = v8;
      v15[5] = v9;
      v15[6] = v20;
      v15[7] = v10;
      v15[8] = v11;
      v15[9] = v12;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a2 = v18;
    a3 = v19;
    a4 = v17;
  }
  *a4 = v5;
  a4[1] = a2;
  a4[2] = a3;
  return swift_bridgeObjectRetain();
}

uint64_t PromptCompletionEnvelope.CandidateEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = v2[1];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v2[2];
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v6);
    swift_bridgeObjectRelease();
    unint64_t v7 = v2[4];
    if (v7) {
      goto LABEL_3;
    }
LABEL_7:
    Swift::UInt v8 = 0;
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
  unint64_t v7 = v2[4];
  if (!v7) {
    goto LABEL_7;
  }
LABEL_3:
  if (v7 == 1)
  {
    Swift::UInt v8 = 2;
    goto LABEL_9;
  }
  if (v7 == 2)
  {
    Swift::UInt v8 = 3;
LABEL_9:
    Hasher._combine(_:)(v8);
    goto LABEL_11;
  }
  uint64_t v9 = v2[3];
  Hasher._combine(_:)(1uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of FinishReason(v9, v7);
LABEL_11:
  uint64_t v11 = v2[5];
  unint64_t v10 = v2[6];
  outlined copy of Data._Representation(v11, v10);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v11, v10);
}

uint64_t PromptCompletionEnvelope.CandidateEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.CandidateEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v10 = *(void *)v3;
  char v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptCompletionEnvelope.SegmentEnvelope]);
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.SegmentEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptCompletionEnvelope.SegmentEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v10 = *(void *)(v3 + 8);
    char v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolCallEnvelope]);
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [ToolCallEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [ToolCallEnvelope], (void (*)(void))lazy protocol witness table accessor for type ToolCallEnvelope and conformance ToolCallEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined init with take of Locale?(v3 + 16, (uint64_t)v13, &demangling cache variable for type metadata for ModerationEnvelope?);
    outlined init with take of Locale?((uint64_t)v13, (uint64_t)&v10, &demangling cache variable for type metadata for ModerationEnvelope?);
    char v11 = 2;
    lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of FinishReasonEnvelope((_OWORD *)(v3 + 24), &v12);
    outlined init with take of FinishReasonEnvelope(&v12, &v10);
    char v11 = 3;
    lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 40);
    char v11 = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  uint64_t result = 0x73746E656D676573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C6C61436C6F6F74;
      break;
    case 2:
      uint64_t result = 0x6974617265646F6DLL;
      break;
    case 3:
      uint64_t result = 0x65526873696E6966;
      break;
    case 4:
      uint64_t result = 0x617461646174656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionEnvelope.CandidateEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEnvelope.CandidateEnvelope()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  long long v6 = v0[2];
  uint64_t v7 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  PromptCompletionEnvelope.CandidateEnvelope.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEnvelope.CandidateEnvelope(uint64_t a1)
{
  return PromptCompletionEnvelope.CandidateEnvelope.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.CandidateEnvelope()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  long long v6 = v0[2];
  uint64_t v7 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  PromptCompletionEnvelope.CandidateEnvelope.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionEnvelope.CandidateEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptCompletionEnvelope.CandidateEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionEnvelope.CandidateEnvelope(void *a1)
{
  return PromptCompletionEnvelope.CandidateEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static PromptCompletionEnvelope.CandidateEnvelope.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t PromptCompletionEnvelope.SegmentEnvelope.hash(into:)(uint64_t a1)
{
  long long v2 = v1;
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v2, &v8);
  long long v4 = v8;
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v2, v9);
  if (v11)
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v4, *((unint64_t *)&v4 + 1));
    Data.hash(into:)();
  }
  else
  {
    long long v12 = v9[0];
    long long v13 = v9[1];
    unint64_t v14 = v10;
    Hasher._combine(_:)(0);
    outlined retain of TextContentEnvelope((uint64_t)&v12);
    String.hash(into:)();
    specialized Array<A>.hash(into:)(a1, v13);
    unint64_t v5 = v14;
    if (v14 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v6 = *((void *)&v13 + 1);
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v6, v5);
      Data.hash(into:)();
      outlined consume of Data?(v6, v5);
    }
  }
  return outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)v2, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
}

uint64_t PromptCompletionEnvelope.SegmentEnvelope.encode(to:)(void *a1)
{
  long long v2 = v1;
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v2, &v29);
  unint64_t v25 = *((void *)&v29 + 1);
  uint64_t v17 = v29;
  uint64_t v18 = v30;
  uint64_t v20 = v31;
  unint64_t v19 = v32;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys>);
  uint64_t v23 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys>);
  uint64_t v21 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  long long v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.SegmentEnvelope.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  uint64_t v12 = (uint64_t)v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v2, v33);
  if (v35)
  {
    long long v39 = v33[0];
    LOBYTE(v26) = 1;
    outlined copy of Data._Representation(v17, v25);
    lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v26 = v39;
    lazy protocol witness table accessor for type ImageContentEnvelope and conformance ImageContentEnvelope();
    uint64_t v13 = v24;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v13);
  }
  else
  {
    long long v36 = v33[0];
    long long v37 = v33[1];
    uint64_t v38 = v34;
    LOBYTE(v26) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v20, v19);
    lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v26 = v36;
    long long v27 = v37;
    uint64_t v28 = v38;
    lazy protocol witness table accessor for type TextContentEnvelope and conformance TextContentEnvelope();
    uint64_t v14 = v22;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v14);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return outlined release of PromptCompletionEnvelope.SegmentEnvelope(v12, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
}

Swift::Int PromptCompletionEnvelope.SegmentEnvelope.hashValue.getter()
{
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v0, &v6);
  long long v1 = v6;
  Hasher.init(_seed:)();
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v0, v7);
  if (v9)
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v1, *((unint64_t *)&v1 + 1));
    Data.hash(into:)();
  }
  else
  {
    long long v10 = v7[0];
    long long v11 = v7[1];
    unint64_t v12 = v8;
    Hasher._combine(_:)(0);
    outlined retain of TextContentEnvelope((uint64_t)&v10);
    String.hash(into:)();
    specialized Array<A>.hash(into:)((uint64_t)v5, v11);
    unint64_t v2 = v12;
    if (v12 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v3 = *((void *)&v11 + 1);
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v3, v2);
      Data.hash(into:)();
      outlined consume of Data?(v3, v2);
    }
  }
  outlined release of PromptCompletionEnvelope.SegmentEnvelope((uint64_t)v0, (void (*)(void, void, void, void, void, void))outlined consume of PromptCompletionEnvelope.SegmentEnvelope);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x6567616D69;
  }
  else {
    return 1954047348;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionEnvelope.SegmentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.ImageCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEnvelope.SegmentEnvelope()
{
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v0, v2);
  return PromptCompletionEnvelope.SegmentEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEnvelope.SegmentEnvelope(uint64_t a1)
{
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v1, v4);
  return PromptCompletionEnvelope.SegmentEnvelope.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.SegmentEnvelope()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  unint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v6)
  {
    Hasher._combine(_:)(1uLL);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v4, v5);
    String.hash(into:)();
    specialized Array<A>.hash(into:)((uint64_t)v8, v3);
    if (v5 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v4, v5);
      Data.hash(into:)();
      outlined consume of Data?(v4, v5);
    }
  }
  outlined consume of PromptCompletionEnvelope.SegmentEnvelope(v1, v2, v3, v4, v5, v6);
  return Hasher._finalize()();
}

_OWORD *protocol witness for Decodable.init(from:) in conformance PromptCompletionEnvelope.SegmentEnvelope@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = (_OWORD *)specialized PromptCompletionEnvelope.SegmentEnvelope.init(from:)(a1, v5);
  if (!v2) {
    return outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionEnvelope.SegmentEnvelope(void *a1)
{
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(v1, v4);
  return PromptCompletionEnvelope.SegmentEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.SegmentEnvelope(long long *a1, long long *a2)
{
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(a1, v4);
  outlined init with take of PromptCompletionEnvelope.SegmentEnvelope(a2, v5);
  return specialized static PromptCompletionEnvelope.SegmentEnvelope.== infix(_:_:)(v4, v5) & 1;
}

void PromptCompletionEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  Swift::UInt v10 = v1[4];
  Swift::UInt v11 = v1[5];
  uint64_t v7 = v1[7];
  unint64_t v8 = v1[8];
  uint64_t v9 = v1[10];
  uint64_t v12 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v5)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v5);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v6);
  swift_bridgeObjectRelease();
  outlined copy of Data._Representation(v7, v8);
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v8);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)(a1);
    outlined consume of PromptRenderingEnvelope?(v12, v9);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionEnvelope.CodingKeys()
{
  uint64_t result = 0x666E496C65646F6DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6974617265646F6DLL;
      break;
    case 2:
      uint64_t result = 0x6567617375;
      break;
    case 3:
      uint64_t result = 0x74616469646E6163;
      break;
    case 4:
      uint64_t result = 0x617461646174656DLL;
      break;
    case 5:
      uint64_t result = 0x64657265646E6572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PromptCompletionEnvelope.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PromptCompletionEnvelope.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v34 = *v1;
  uint64_t v9 = *((void *)v1 + 2);
  uint64_t v8 = *((void *)v1 + 3);
  uint64_t v32 = *((void *)v1 + 4);
  uint64_t v33 = v8;
  uint64_t v10 = *((void *)v1 + 5);
  uint64_t v30 = *((void *)v1 + 6);
  uint64_t v31 = v10;
  uint64_t v11 = *((void *)v1 + 8);
  *(void *)&long long v29 = *((void *)v1 + 7);
  *((void *)&v29 + 1) = v11;
  long long v17 = *(long long *)((char *)v1 + 72);
  uint64_t v18 = *((void *)v1 + 11);
  uint64_t v28 = *((void *)v1 + 12);
  uint64_t v27 = *((void *)v1 + 13);
  uint64_t v26 = *((void *)v1 + 14);
  uint64_t v25 = *((void *)v1 + 15);
  uint64_t v24 = *((void *)v1 + 16);
  uint64_t v23 = *((void *)v1 + 17);
  uint64_t v22 = *((void *)v1 + 18);
  uint64_t v21 = *((void *)v1 + 19);
  uint64_t v20 = *((void *)v1 + 20);
  uint64_t v19 = *((void *)v1 + 21);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v35 = v34;
  uint64_t v36 = v9;
  char v47 = 0;
  lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v14 = v31;
    uint64_t v13 = v32;
    uint64_t v15 = v30;
    *(void *)&long long v35 = v33;
    char v47 = 1;
    lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v35 = v13;
    *((void *)&v35 + 1) = v14;
    char v47 = 2;
    lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v35 = v15;
    char v47 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptCompletionEnvelope.CandidateEnvelope]);
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptCompletionEnvelope.CandidateEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v35 = v29;
    char v47 = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v35 = v17;
    uint64_t v36 = v18;
    uint64_t v37 = v28;
    uint64_t v38 = v27;
    uint64_t v39 = v26;
    uint64_t v40 = v25;
    uint64_t v41 = v24;
    uint64_t v42 = v23;
    uint64_t v43 = v22;
    uint64_t v44 = v21;
    uint64_t v45 = v20;
    uint64_t v46 = v19;
    char v47 = 5;
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int PromptCompletionEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  PromptCompletionEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void *PromptCompletionEnvelope.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  }
  uint64_t v47 = v6;
  LOBYTE(v49) = 0;
  lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v60;
  unint64_t v10 = v61;
  uint64_t v12 = v62;
  LOBYTE(v49) = 1;
  lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v45 = v11;
  uint64_t v13 = v60;
  LOBYTE(v49) = 2;
  lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
  swift_bridgeObjectRetain();
  uint64_t v44 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v46 = v13;
  unint64_t v41 = v61;
  uint64_t v42 = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptCompletionEnvelope.CandidateEnvelope]);
  LOBYTE(v49) = 3;
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptCompletionEnvelope.CandidateEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v60;
  LOBYTE(v49) = 4;
  lazy protocol witness table accessor for type Data and conformance Data();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v89 = 5;
  uint64_t v43 = v60;
  unint64_t v40 = v61;
  outlined copy of Data._Representation(v60, v61);
  lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v5);
  uint64_t v47 = v82;
  uint64_t v44 = v83;
  uint64_t v38 = v84;
  uint64_t v39 = *((void *)&v83 + 1);
  uint64_t v36 = v85;
  uint64_t v37 = *((void *)&v84 + 1);
  uint64_t v34 = v86;
  uint64_t v35 = *((void *)&v85 + 1);
  uint64_t v32 = v87;
  uint64_t v33 = *((void *)&v86 + 1);
  uint64_t v30 = v88;
  uint64_t v31 = *((void *)&v87 + 1);
  uint64_t v28 = v12;
  uint64_t v29 = *((void *)&v88 + 1);
  uint64_t v15 = v45;
  *(void *)&long long v49 = v45;
  *((void *)&v49 + 1) = v10;
  uint64_t v16 = v14;
  *(void *)&long long v50 = v12;
  uint64_t v17 = v46;
  uint64_t v18 = v43;
  *((void *)&v50 + 1) = v46;
  *(void *)&long long v51 = v42;
  *((void *)&v51 + 1) = v41;
  *(void *)&long long v52 = v14;
  unint64_t v19 = v40;
  *((void *)&v52 + 1) = v43;
  *(void *)&long long v53 = v40;
  *((void *)&v53 + 1) = v82;
  long long v54 = v83;
  long long v55 = v84;
  long long v56 = v85;
  long long v57 = v86;
  long long v58 = v87;
  long long v59 = v88;
  outlined retain of PromptCompletionEnvelope(&v49);
  outlined consume of Data._Representation(v18, v19);
  uint64_t v20 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v21 = v58;
  a2[8] = v57;
  a2[9] = v21;
  a2[10] = v59;
  long long v22 = v54;
  a2[4] = v53;
  a2[5] = v22;
  long long v23 = v56;
  a2[6] = v55;
  a2[7] = v23;
  long long v24 = v50;
  *a2 = v49;
  a2[1] = v24;
  long long v25 = v52;
  a2[2] = v51;
  a2[3] = v25;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  uint64_t v60 = v15;
  unint64_t v61 = v10;
  uint64_t v62 = v20;
  uint64_t v63 = v17;
  uint64_t v64 = v42;
  unint64_t v65 = v41;
  uint64_t v66 = v16;
  uint64_t v67 = v43;
  unint64_t v68 = v19;
  uint64_t v69 = v47;
  uint64_t v70 = v44;
  uint64_t v71 = v39;
  uint64_t v72 = v38;
  uint64_t v73 = v37;
  uint64_t v74 = v36;
  uint64_t v75 = v35;
  uint64_t v76 = v34;
  uint64_t v77 = v33;
  uint64_t v78 = v32;
  uint64_t v79 = v31;
  uint64_t v80 = v30;
  uint64_t v81 = v29;
  return outlined release of CompletePromptResponse(&v60);
}

void *protocol witness for Decodable.init(from:) in conformance PromptCompletionEnvelope@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return PromptCompletionEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionEnvelope(void *a1)
{
  return PromptCompletionEnvelope.encode(to:)(a1);
}

uint64_t TextContentEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TextContentEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + 16);
    char v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotationEnvelope]);
    lazy protocol witness table accessor for type [AnnotationEnvelope] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined init with take of Locale?(v3 + 24, (uint64_t)v13, &demangling cache variable for type metadata for Data?);
    outlined init with take of Locale?((uint64_t)v13, (uint64_t)&v11, &demangling cache variable for type metadata for Data?);
    char v12 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TextContentEnvelope.CodingKeys()
{
  uint64_t v1 = 0x697461746F6E6E61;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F666E4972657375;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TextContentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TextContentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TextContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TextContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TextContentEnvelope.CodingKeys and conformance TextContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextContentEnvelope()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  unint64_t v3 = v0[4];
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v3);
    Data.hash(into:)();
    outlined consume of Data?(v1, v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextContentEnvelope(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  unint64_t v5 = v1[4];
  String.hash(into:)();
  specialized Array<A>.hash(into:)(a1, v4);
  if (v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v3, v5);
    Data.hash(into:)();
    outlined consume of Data?(v3, v5);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextContentEnvelope()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  unint64_t v3 = v0[4];
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v3);
    Data.hash(into:)();
    outlined consume of Data?(v1, v3);
  }
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance TextContentEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized TextContentEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TextContentEnvelope(void *a1)
{
  return TextContentEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextContentEnvelope(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized static TextContentEnvelope.== infix(_:_:)(v5, v7);
}

uint64_t AnnotationEnvelope.CitationTypeEnvelope.hash(into:)()
{
  uint64_t v1 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v1 - 8);
  long long v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v0, (uint64_t)v9, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, (uint64_t)v3, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    Hasher._combine(_:)(1uLL);
    type metadata accessor for DocumentResourceIdentifier();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v10 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope;
    uint64_t v11 = (uint64_t)v3;
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, (uint64_t)v6, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
    Hasher._combine(_:)(0);
    String.hash(into:)();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v10 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope;
    uint64_t v11 = (uint64_t)v6;
  }
  return outlined destroy of DocumentResourceEnvelope(v11, v10);
}

uint64_t AnnotationEnvelope.CitationTypeEnvelope.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys>);
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v31 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys>);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnotationEnvelope.CitationTypeEnvelope.CodingKeys>);
  uint64_t v13 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope(v35, (uint64_t)v12, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = v30;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v30, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    char v37 = 1;
    lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys();
    uint64_t v18 = v31;
    uint64_t v19 = v34;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope and conformance AnnotationEnvelope.DocumentCitationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    uint64_t v20 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v20);
    long long v21 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope;
    uint64_t v22 = v17;
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, (uint64_t)v9, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
    char v36 = 0;
    lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys();
    uint64_t v19 = v34;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope and conformance AnnotationEnvelope.URLCitationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
    uint64_t v23 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v23);
    long long v21 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope;
    uint64_t v22 = (uint64_t)v9;
  }
  outlined destroy of DocumentResourceEnvelope(v22, v21);
  return (*v16)(v15, v19);
}

uint64_t AnnotationEnvelope.CitationTypeEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys>);
  uint64_t v41 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v44 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnotationEnvelope.CitationTypeEnvelope.CodingKeys>);
  uint64_t v42 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v35 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = a1[3];
  uint64_t v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys();
  uint64_t v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_7;
  }
  uint64_t v35 = v18;
  char v36 = v13;
  long long v21 = v16;
  uint64_t v22 = v43;
  uint64_t v23 = v44;
  uint64_t v46 = v10;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v25 = v9;
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v29 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v31 = v46;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *MEMORY[0x263F8DCB0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
LABEL_7:
    uint64_t v27 = (uint64_t)v45;
    return __swift_destroy_boxed_opaque_existential_1Tm(v27);
  }
  if (*(unsigned char *)(v24 + 32))
  {
    char v48 = 1;
    lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.DocumentCitationEnvelope and conformance AnnotationEnvelope.DocumentCitationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    uint64_t v26 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
    uint64_t v27 = (uint64_t)v45;
    uint64_t v28 = (uint64_t)v36;
  }
  else
  {
    char v47 = 0;
    lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.URLCitationEnvelope and conformance AnnotationEnvelope.URLCitationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
    uint64_t v28 = (uint64_t)v21;
    uint64_t v33 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v7);
    uint64_t v27 = (uint64_t)v45;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (uint64_t)v35;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v28, (uint64_t)v35, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v34, v37, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  return __swift_destroy_boxed_opaque_existential_1Tm(v27);
}

uint64_t AnnotationEnvelope.URLCitationEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnotationEnvelope.URLCitationEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
    v8[14] = 1;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AnnotationEnvelope.URLCitationEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnotationEnvelope.URLCitationEnvelope.CodingKeys>);
  uint64_t v19 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v16 = v8;
  uint64_t v12 = v19;
  uint64_t v11 = v20;
  char v23 = 0;
  uint64_t v13 = v21;
  *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[1] = v14;
  char v22 = 1;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v13);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)v10 + *(int *)(v16 + 20), v5, v11);
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v10, v18, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of DocumentResourceEnvelope((uint64_t)v10, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
}

uint64_t AnnotationEnvelope.DocumentCitationEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, v15, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t AnnotationEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnotationEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AnnotationEnvelope(0);
    v8[14] = 1;
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope and conformance AnnotationEnvelope.CitationTypeEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AnnotationEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v21 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  MEMORY[0x270FA5388](v21);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnotationEnvelope.CodingKeys>);
  uint64_t v20 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnnotationEnvelope(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v18 = v8;
    uint64_t v11 = v20;
    char v24 = 0;
    uint64_t v12 = v22;
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v10;
    *uint64_t v10 = v13;
    char v23 = 1;
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope.CitationTypeEnvelope and conformance AnnotationEnvelope.CitationTypeEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    uint64_t v14 = v19;
    uint64_t v15 = (uint64_t)v17;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v5, (uint64_t)v17 + *(int *)(v18 + 20), type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, v14, type metadata accessor for AnnotationEnvelope);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t ImageContentEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageContentEnvelope.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x74617469436C7275;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AnnotationEnvelope.CitationTypeEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.CodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.DocumentCitationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys and conformance AnnotationEnvelope.CitationTypeEnvelope.UrlCitationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnotationEnvelope.CitationTypeEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))AnnotationEnvelope.CitationTypeEnvelope.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnotationEnvelope.CitationTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))AnnotationEnvelope.CitationTypeEnvelope.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnnotationEnvelope.CitationTypeEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AnnotationEnvelope.CitationTypeEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnnotationEnvelope.CitationTypeEnvelope(void *a1)
{
  return AnnotationEnvelope.CitationTypeEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys()
{
  if (*v0) {
    return 7107189;
  }
  else {
    return 0x656C746974;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AnnotationEnvelope.URLCitationEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.URLCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.URLCitationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnotationEnvelope.URLCitationEnvelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnotationEnvelope.URLCitationEnvelope()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnotationEnvelope.URLCitationEnvelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnnotationEnvelope.URLCitationEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AnnotationEnvelope.URLCitationEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnnotationEnvelope.URLCitationEnvelope(void *a1)
{
  return AnnotationEnvelope.URLCitationEnvelope.encode(to:)(a1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, MEMORY[0x263F415B0], (unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F415B0], (unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F415B0], (unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnnotationEnvelope.DocumentCitationEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AnnotationEnvelope.DocumentCitationEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys and conformance AnnotationEnvelope.DocumentCitationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for DocumentResourceIdentifier();
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnnotationEnvelope.CodingKeys()
{
  if (*v0) {
    return 1701869940;
  }
  else {
    return 0x7865646E69;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnnotationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AnnotationEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnotationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnotationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnotationEnvelope.CodingKeys and conformance AnnotationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnotationEnvelope()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  AnnotationEnvelope.CitationTypeEnvelope.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnotationEnvelope()
{
  Hasher._combine(_:)(*v0);
  return AnnotationEnvelope.CitationTypeEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnotationEnvelope()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  AnnotationEnvelope.CitationTypeEnvelope.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnnotationEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AnnotationEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnnotationEnvelope(void *a1)
{
  return AnnotationEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnotationEnvelope(void *a1, void *a2, uint64_t a3)
{
  if (*a1 == *a2) {
    return specialized static AnnotationEnvelope.CitationTypeEnvelope.== infix(_:_:)((uint64_t)a1 + *(int *)(a3 + 20), (uint64_t)a2 + *(int *)(a3 + 20));
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImageContentEnvelope.CodingKeys()
{
  return 1635017060;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImageContentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageContentEnvelope.CodingKeys and conformance ImageContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImageContentEnvelope()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  outlined copy of Data._Representation(v1, v2);
  Data.hash(into:)();
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageContentEnvelope()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImageContentEnvelope()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  outlined copy of Data._Representation(v1, v2);
  Data.hash(into:)();
  outlined consume of Data._Representation(v1, v2);
  return Hasher._finalize()();
}

void *protocol witness for Decodable.init(from:) in conformance ImageContentEnvelope@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized ImageContentEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImageContentEnvelope(void *a1)
{
  return ImageContentEnvelope.encode(to:)(a1, *v1, v1[1]);
}

uint64_t ModelInformationEnvelope.AssetEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModelInformationEnvelope.AssetEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 32);
    v10[15] = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ModelInformationEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModelInformationEnvelope.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ModelInformationEnvelope.AssetEnvelope]);
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [ModelInformationEnvelope.AssetEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [ModelInformationEnvelope.AssetEnvelope], (void (*)(void))lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  uint64_t v1 = 0x6E6F6973726576;
  if (*v0 != 1) {
    uint64_t v1 = 0x617461646174656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ModelInformationEnvelope.AssetEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelInformationEnvelope.AssetEnvelope()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModelInformationEnvelope.AssetEnvelope()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformationEnvelope.AssetEnvelope()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance ModelInformationEnvelope.AssetEnvelope@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized ModelInformationEnvelope.AssetEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ModelInformationEnvelope.AssetEnvelope(void *a1)
{
  return ModelInformationEnvelope.AssetEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModelInformationEnvelope.AssetEnvelope(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static ModelInformationEnvelope.AssetEnvelope.== infix(_:_:)(v7, v8) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModelInformationEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x65566D6574737973;
  }
  else {
    return 0x737465737361;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModelInformationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ModelInformationEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelInformationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModelInformationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelInformationEnvelope()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ModelInformationEnvelope()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  Swift::UInt v3 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    long long v4 = (void *)(v1 + 40);
    do
    {
      uint64_t v5 = v4[2];
      uint64_t v6 = v4[3];
      unint64_t v7 = v4[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v6, v7);
      String.hash(into:)();
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      outlined copy of Data._Representation(v6, v7);
      Data.hash(into:)();
      outlined consume of Data._Representation(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v6, v7);
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformationEnvelope()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ModelInformationEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized ModelInformationEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ModelInformationEnvelope(void *a1)
{
  return ModelInformationEnvelope.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModelInformationEnvelope(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    if (v3)
    {
      if (v5 && (v2 == v4 && v3 == v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v5)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v138 = a2;
  uint64_t v3 = type metadata accessor for PromptCompletion.DocumentCitation(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v123 = (uint64_t)v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for PromptCompletion.URLCitation(0);
  MEMORY[0x270FA5388](v122);
  uint64_t v121 = (void *)((char *)v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v129 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  MEMORY[0x270FA5388](v129);
  uint64_t v130 = (uint64_t)v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for PromptCompletion.Annotation(0);
  MEMORY[0x270FA5388](v127);
  unint64_t v126 = (void *)((char *)v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v125 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
  MEMORY[0x270FA5388](v125);
  uint64_t v132 = (void *)((char *)v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v134 = type metadata accessor for PromptCompletionEventCandidateAnnotation(0);
  uint64_t v9 = MEMORY[0x270FA5388](v134);
  uint64_t v124 = (void *)((char *)v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v131 = (uint64_t)v118 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v133 = (char *)v118 - v13;
  *(void *)&long long v137 = type metadata accessor for Prompt.Rendering();
  *(void *)&long long v136 = *(void *)(v137 - 8);
  MEMORY[0x270FA5388](v137);
  uint64_t v15 = (char *)v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)v118 - v21;
  MEMORY[0x270FA5388](v20);
  char v24 = (char *)v118 - v23;
  uint64_t v25 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v120 = (_OWORD *)((char *)v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v128 = (uint64_t)v118 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  *(void *)&long long v135 = (char *)v118 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)v118 - v33;
  MEMORY[0x270FA5388](v32);
  char v36 = (char *)v118 - v35;
  outlined init with copy of PromptCompletionEvent(a1, (uint64_t)v141);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if (swift_dynamicCast())
  {
    long long v37 = v142;
    long long v139 = *(_OWORD *)v143;
    uint64_t v140 = *(void *)&v143[16];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v38 = specialized ModelInformationEnvelope.init(sealing:)((uint64_t *)&v139);
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    *(_OWORD *)char v36 = v37;
    *((void *)v36 + 2) = v38;
    *((void *)v36 + 3) = v40;
    *((void *)v36 + 4) = v42;
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = (uint64_t)v36;
LABEL_17:
    uint64_t v69 = (uint64_t)v138;
LABEL_18:
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v43, v69, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v141);
  }
  v118[0] = v36;
  v118[1] = v25;
  uint64_t v119 = a1;
  if (swift_dynamicCast())
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v24, (uint64_t)v22, type metadata accessor for PromptCompletionEventRenderedPrompt);
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v22, (uint64_t)v19, type metadata accessor for PromptCompletionEventRenderedPrompt);
    uint64_t v45 = *(void *)v19;
    uint64_t v44 = *((void *)v19 + 1);
    (*(void (**)(char *, char *, void))(v136 + 16))(v15, &v19[*(int *)(v16 + 20)], v137);
    swift_bridgeObjectRetain();
    specialized PromptRenderingEnvelope.init(sealing:)((uint64_t)v15, (uint64_t *)&v142);
    long long v135 = v142;
    long long v136 = v144;
    uint64_t v46 = *(void *)v143;
    unint64_t v47 = v145;
    long long v137 = v147;
    uint64_t v48 = v148;
    outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for PromptCompletionEventRenderedPrompt);
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v22, type metadata accessor for PromptCompletionEventRenderedPrompt);
    uint64_t v49 = v118[0];
    *(void *)v118[0] = v45;
    *(void *)(v49 + 8) = v44;
    *(_OWORD *)(v49 + 16) = v135;
    *(void *)(v49 + 32) = v46;
    *(_OWORD *)(v49 + 40) = *(_OWORD *)&v143[8];
    *(_OWORD *)(v49 + 56) = v136;
    *(void *)(v49 + 72) = v47;
    long long v50 = v137;
    *(_OWORD *)(v49 + 80) = v146;
    *(_OWORD *)(v49 + 96) = v50;
    *(void *)(v49 + 112) = v48;
LABEL_5:
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = v49;
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    long long v51 = v142;
    swift_bridgeObjectRetain();
    uint64_t v52 = swift_bridgeObjectRetain();
    uint64_t v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy15TokenGeneration16PromptCompletionV10ModerationV8CategoryVAJ11ProbabilityOG_SS_AF0H8Envelope33_FCE651B3B8F212418F5C81F0A4785E63LLV0jK0Ots5NeverOTg504_s15d12Generation16fg3V10h2V8i5VAE11j19OSSAA0E8Envelope33_lmnopqrst39LLV0gH0OIgnnod_AG3key_AI5valuetSS_ANts5U131OIegnrzr_TR04_s15a12Generation18e11Envelope33_ijklmnopq16LLV7sealingAdA16cd18V0C0V_tcfcSS_AD011g7D0OtAI8F14V_AI0Q0OtXEfU_Tf3nnnpf_nTf1cn_n(v52);
    swift_bridgeObjectRelease();
    if (*(void *)(v53 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModerationEnvelope.ProbabilityEnvelope>);
      uint64_t v54 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v54 = MEMORY[0x263F8EE80];
    }
    *(void *)&long long v139 = v54;
    uint64_t v67 = swift_bridgeObjectRetain();
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v67, 1, &v139);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v68 = v139;
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    *(_OWORD *)uint64_t v34 = v51;
    *((void *)v34 + 2) = v68;
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = (uint64_t)v34;
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    long long v55 = v142;
    long long v56 = *(_OWORD *)v143;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v57 = swift_bridgeObjectRetain();
    uint64_t v58 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy15TokenGeneration16PromptCompletionV10ModerationV8CategoryVAJ11ProbabilityOG_SS_AF0H8Envelope33_FCE651B3B8F212418F5C81F0A4785E63LLV0jK0Ots5NeverOTg504_s15d12Generation16fg3V10h2V8i5VAE11j19OSSAA0E8Envelope33_lmnopqrst39LLV0gH0OIgnnod_AG3key_AI5valuetSS_ANts5U131OIegnrzr_TR04_s15a12Generation18e11Envelope33_ijklmnopq16LLV7sealingAdA16cd18V0C0V_tcfcSS_AD011g7D0OtAI8F14V_AI0Q0OtXEfU_Tf3nnnpf_nTf1cn_n(v57);
    swift_bridgeObjectRelease();
    if (*(void *)(v58 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModerationEnvelope.ProbabilityEnvelope>);
      uint64_t v59 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v59 = MEMORY[0x263F8EE80];
    }
    *(void *)&long long v139 = v59;
    uint64_t v85 = swift_bridgeObjectRetain();
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v85, 1, &v139);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v86 = v139;
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    uint64_t v49 = v135;
    *(_OWORD *)long long v135 = v55;
    *(_OWORD *)(v49 + 16) = v56;
    *(void *)(v49 + 32) = v86;
    goto LABEL_5;
  }
  if (swift_dynamicCast())
  {
    long long v60 = v142;
    long long v61 = *(_OWORD *)v143;
    uint64_t v62 = *(void *)&v143[16];
    long long v64 = v144;
    uint64_t v63 = v145;
    unint64_t v65 = v146;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v63, v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v63, v65);
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    uint64_t v66 = v118[0];
    *(_OWORD *)v118[0] = v60;
    *(_OWORD *)(v66 + 16) = v61;
    *(void *)(v66 + 32) = v62;
    *(_OWORD *)(v66 + 40) = v64;
    *(void *)(v66 + 56) = v63;
    *(void *)(v66 + 64) = v65;
LABEL_14:
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = v66;
    goto LABEL_17;
  }
  uint64_t v71 = (uint64_t)v133;
  uint64_t v72 = v134;
  if (swift_dynamicCast())
  {
    uint64_t v73 = v131;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v71, v131, type metadata accessor for PromptCompletionEventCandidateAnnotation);
    uint64_t v74 = v124;
    outlined init with copy of DocumentResourceEnvelope(v73, (uint64_t)v124, type metadata accessor for PromptCompletionEventCandidateAnnotation);
    uint64_t v75 = v74[1];
    uint64_t v76 = v132;
    *uint64_t v132 = *v74;
    v76[1] = v75;
    uint64_t v77 = v74[3];
    v76[2] = v74[2];
    v76[3] = v77;
    v76[4] = v74[4];
    uint64_t v78 = v126;
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v74 + *(int *)(v72 + 28), (uint64_t)v126, type metadata accessor for PromptCompletion.Annotation);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v74, type metadata accessor for PromptCompletionEventCandidateAnnotation);
    uint64_t v79 = (void *)((char *)v76 + *(int *)(v125 + 28));
    void *v79 = *v78;
    uint64_t v80 = (uint64_t)v78 + *(int *)(v127 + 20);
    uint64_t v81 = v130;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v80, v130, type metadata accessor for PromptCompletion.Annotation.Type);
    LODWORD(v77) = swift_getEnumCaseMultiPayload();
    uint64_t v82 = (void *)((char *)v79 + *(int *)(type metadata accessor for AnnotationEnvelope(0) + 20));
    if (v77 == 1)
    {
      uint64_t v83 = v123;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v81, v123, type metadata accessor for PromptCompletion.DocumentCitation);
      uint64_t v84 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 32))(v82, v83, v84);
    }
    else
    {
      uint64_t v93 = v121;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v81, (uint64_t)v121, type metadata accessor for PromptCompletion.URLCitation);
      uint64_t v94 = v93[1];
      *uint64_t v82 = *v93;
      v82[1] = v94;
      uint64_t v95 = (char *)v93 + *(int *)(v122 + 20);
      uint64_t v96 = (char *)v82 + *(int *)(type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0) + 20);
      uint64_t v97 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 32))(v96, v95, v97);
    }
    uint64_t v98 = v138;
    uint64_t v99 = v119;
    type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v100 = v128;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v76, v128, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
    __swift_destroy_boxed_opaque_existential_1Tm(v99);
    outlined destroy of DocumentResourceEnvelope(v73, type metadata accessor for PromptCompletionEventCandidateAnnotation);
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = v100;
    uint64_t v69 = (uint64_t)v98;
    goto LABEL_18;
  }
  if (swift_dynamicCast())
  {
    long long v87 = v142;
    long long v88 = *(_OWORD *)v143;
    uint64_t v89 = v144;
    *(void *)&long long v137 = *(void *)&v143[16];
    unint64_t v90 = v145;
    *(void *)&long long v136 = *((void *)&v144 + 1);
    uint64_t v91 = *((void *)&v146 + 1);
    *(void *)&long long v135 = v146;
    long long v92 = v147;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v92, *((unint64_t *)&v92 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v92, *((unint64_t *)&v92 + 1));
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    uint64_t v66 = v118[0];
    *(_OWORD *)v118[0] = v87;
    *(_OWORD *)(v66 + 16) = v88;
    *(void *)(v66 + 32) = v137;
    *(void *)(v66 + 40) = v89;
    *(void *)(v66 + 48) = v136;
    *(void *)(v66 + 56) = v90;
    *(void *)(v66 + 64) = v135;
    *(void *)(v66 + 72) = v91;
    *(_OWORD *)(v66 + 80) = v92;
    goto LABEL_14;
  }
  if (swift_dynamicCast())
  {
    long long v101 = v142;
    long long v102 = *(_OWORD *)v143;
    uint64_t v103 = *(void *)&v143[16];
    long long v104 = v144;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v104, *((unint64_t *)&v104 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v104, *((unint64_t *)&v104 + 1));
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    uint64_t v66 = v118[0];
    *(_OWORD *)v118[0] = v101;
    *(_OWORD *)(v66 + 16) = v102;
    *(void *)(v66 + 32) = v103;
    *(_OWORD *)(v66 + 40) = v104;
    goto LABEL_14;
  }
  int v105 = swift_dynamicCast();
  uint64_t v66 = v118[0];
  if (v105)
  {
    long long v106 = v142;
    long long v107 = *(_OWORD *)v143;
    uint64_t v108 = *(void *)&v143[16];
    long long v110 = v144;
    unint64_t v109 = v145;
    if ((unint64_t)v144 >= 3) {
      uint64_t v111 = *(void *)&v143[16];
    }
    else {
      uint64_t v111 = 0;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason(v108, v110);
    outlined copy of Data._Representation(*((uint64_t *)&v110 + 1), v109);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FinishReason(v108, v110);
    outlined consume of Data._Representation(*((uint64_t *)&v110 + 1), v109);
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    int v112 = v120;
    *uint64_t v120 = v106;
    v112[1] = v107;
    *((void *)v112 + 4) = v111;
    *(_OWORD *)((char *)v112 + 40) = v110;
    *((void *)v112 + 7) = v109;
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = (uint64_t)v112;
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    uint64_t v113 = *((void *)&v142 + 1);
    uint64_t v114 = v138;
    *uint64_t v138 = v142;
    v114[1] = v113;
    *((_OWORD *)v114 + 1) = *(_OWORD *)v143;
    swift_storeEnumTagMultiPayload();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v141);
  }
  if (swift_dynamicCast())
  {
    long long v115 = v142;
    long long v116 = *(_OWORD *)v143;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v116, *((unint64_t *)&v116 + 1));
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v116, *((unint64_t *)&v116 + 1));
    __swift_destroy_boxed_opaque_existential_1Tm(v119);
    *(_OWORD *)uint64_t v66 = v115;
    *(_OWORD *)(v66 + 16) = v116;
    goto LABEL_14;
  }
  outlined init with copy of PromptCompletionEvent(v119, (uint64_t)&v142);
  *(void *)&long long v139 = 0;
  *((void *)&v139 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  *(void *)&long long v139 = 0xD00000000000002FLL;
  *((void *)&v139 + 1) = 0x800000025F92CE20;
  __swift_project_boxed_opaque_existential_1(&v142, *(uint64_t *)&v143[8]);
  swift_getDynamicType();
  v117._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v117);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.unseal()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Prompt.Rendering.Source();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (void *)((char *)v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of DocumentResourceEnvelope(v2, (uint64_t)v10, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v19 = *v10;
      uint64_t v82 = v10[1];
      *(void *)&long long v83 = v19;
      uint64_t v20 = v10[3];
      v79[2] = v10[2];
      v79[1] = v10[4];
      uint64_t v21 = v10[7];
      uint64_t v22 = v10[8];
      v79[3] = v10[6];
      v79[4] = v22;
      uint64_t v80 = v10[9];
      uint64_t v81 = v21;
      v79[5] = v10[13];
      a1[3] = type metadata accessor for PromptCompletionEventRenderedPrompt(0);
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventRenderedPrompt;
      boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(a1);
      swift_bridgeObjectRetain();
      v79[6] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Prompt.Rendering.Source.init(identifier:version:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:detokenizedString:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = v82;
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t *boxed_opaque_existential_1Tm = v83;
      boxed_opaque_existential_1Tm[1] = v24;
      return result;
    case 2u:
      uint64_t v25 = *v10;
      uint64_t v26 = v10[1];
      uint64_t v27 = v10[2];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventPromptModeration;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventPromptModeration;
      PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.unseal()(v25, v26, v27, a1);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3u:
      long long v28 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v84 = *(_OWORD *)v10;
      *(_OWORD *)&v84[16] = v28;
      uint64_t v85 = v10[4];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventCandidateModeration;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventCandidateModeration;
      uint64_t v29 = swift_allocObject();
      *a1 = v29;
      PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.unseal()((void *)(v29 + 16));
      long long v86 = *(_OWORD *)v84;
      outlined release of String((uint64_t)&v86);
      long long v87 = *(_OWORD *)&v84[16];
      outlined release of String((uint64_t)&v87);
      uint64_t v88 = v85;
      return outlined release of ModerationEnvelope((uint64_t)&v88);
    case 4u:
      uint64_t v31 = *v10;
      uint64_t v30 = v10[1];
      uint64_t v33 = v10[2];
      uint64_t v32 = v10[3];
      uint64_t v34 = v10[4];
      *(void *)&long long v83 = v10[5];
      uint64_t v35 = v10[6];
      uint64_t v36 = v10[7];
      unint64_t v37 = v10[8];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventCandidateTextDelta;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventCandidateTextDelta;
      uint64_t v38 = (void *)swift_allocObject();
      *a1 = (uint64_t)v38;
      long long v38[2] = v31;
      v38[3] = v30;
      v38[4] = v33;
      void v38[5] = v32;
      uint64_t v39 = v83;
      v38[6] = v34;
      v38[7] = v39;
      v38[8] = v35;
      v38[9] = v36;
      v38[10] = v37;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v36, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of Data?(v36, v37);
    case 5u:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v10, (uint64_t)v6, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      a1[3] = type metadata accessor for PromptCompletionEventCandidateAnnotation(0);
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventCandidateAnnotation;
      uint64_t v40 = __swift_allocate_boxed_opaque_existential_1Tm(a1);
      PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.unseal()(v40);
      return outlined destroy of DocumentResourceEnvelope((uint64_t)v6, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
    case 6u:
      uint64_t v42 = *v10;
      uint64_t v41 = v10[1];
      uint64_t v43 = v10[2];
      uint64_t v44 = v10[3];
      uint64_t v45 = v10[5];
      uint64_t v82 = v10[4];
      *(void *)&long long v83 = v43;
      uint64_t v46 = v10[6];
      uint64_t v47 = v10[7];
      uint64_t v48 = v10[9];
      uint64_t v80 = v10[8];
      uint64_t v81 = v46;
      uint64_t v49 = v10[10];
      unint64_t v50 = v10[11];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventCandidateToolCallDelta;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventCandidateToolCallDelta;
      long long v51 = (void *)swift_allocObject();
      *a1 = (uint64_t)v51;
      v51[2] = v42;
      v51[3] = v41;
      v51[4] = v83;
      v51[5] = v44;
      v51[6] = v82;
      v51[7] = v45;
      v51[8] = v81;
      v51[9] = v47;
      v51[10] = v80;
      v51[11] = v48;
      v51[12] = v49;
      v51[13] = v50;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v49, v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of Data?(v49, v50);
    case 7u:
      uint64_t v53 = *v10;
      uint64_t v52 = v10[1];
      uint64_t v55 = v10[2];
      uint64_t v54 = v10[3];
      uint64_t v57 = v10[4];
      uint64_t v56 = v10[5];
      unint64_t v58 = v10[6];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventCandidateImageGeneration;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventCandidateImageGeneration;
      uint64_t v59 = (void *)swift_allocObject();
      *a1 = (uint64_t)v59;
      v59[2] = v53;
      v59[3] = v52;
      v59[4] = v55;
      v59[5] = v54;
      v59[6] = v57;
      v59[7] = v56;
      v59[8] = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v56, v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v60 = v56;
      unint64_t v61 = v58;
      goto LABEL_16;
    case 8u:
      uint64_t v70 = *v10;
      uint64_t v69 = v10[1];
      uint64_t v72 = v10[2];
      uint64_t v71 = v10[3];
      uint64_t v73 = v10[4];
      unint64_t v74 = v10[5];
      uint64_t v75 = v10[6];
      unint64_t v76 = v10[7];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventCandidateFinished;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventCandidateFinished;
      uint64_t v77 = (void *)swift_allocObject();
      *a1 = (uint64_t)v77;
      if (v74 >= 3) {
        uint64_t v78 = v73;
      }
      else {
        uint64_t v78 = 0;
      }
      v77[2] = v70;
      v77[3] = v69;
      v77[4] = v72;
      v77[5] = v71;
      v77[6] = v78;
      v77[7] = v74;
      v77[8] = v75;
      v77[9] = v76;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of FinishReason(v73, v74);
      outlined copy of Data._Representation(v75, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v73, v74);
      uint64_t v60 = v75;
      unint64_t v61 = v76;
      goto LABEL_16;
    case 9u:
      long long v83 = *(_OWORD *)v10;
      uint64_t v62 = v10[2];
      uint64_t v63 = v10[3];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventUsage;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventUsage;
      uint64_t result = swift_allocObject();
      *a1 = result;
      *(_OWORD *)(result + 16) = v83;
      *(void *)(result + 32) = v62;
      *(void *)(result + 40) = v63;
      return result;
    case 0xAu:
      uint64_t v65 = *v10;
      uint64_t v64 = v10[1];
      uint64_t v66 = v10[2];
      unint64_t v67 = v10[3];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventResponseMetadata;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventResponseMetadata;
      uint64_t v68 = (void *)swift_allocObject();
      *a1 = (uint64_t)v68;
      v68[2] = v65;
      v68[3] = v64;
      v68[4] = v66;
      v68[5] = v67;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v66, v67);
      swift_bridgeObjectRelease();
      uint64_t v60 = v66;
      unint64_t v61 = v67;
LABEL_16:
      uint64_t result = outlined consume of Data._Representation(v60, v61);
      break;
    default:
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      uint64_t v13 = v10[2];
      uint64_t v14 = v10[3];
      uint64_t v15 = v10[4];
      a1[3] = (uint64_t)&type metadata for PromptCompletionEventModelInformation;
      a1[4] = (uint64_t)&protocol witness table for PromptCompletionEventModelInformation;
      uint64_t v16 = swift_allocObject();
      *a1 = v16;
      swift_bridgeObjectRetain();
      ModelInformationEnvelope.unseal()(v13, v14, v15, v84);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)v84;
      *(void *)(v16 + 16) = v12;
      *(void *)(v16 + 24) = v11;
      *(void *)(v16 + 32) = v17;
      *(_OWORD *)(v16 + 40) = *(_OWORD *)&v84[8];
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.unseal()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS15TokenGeneration18ModerationEnvelope33_FCE651B3B8F212418F5C81F0A4785E63LLV011ProbabilityG0OG_AF16PromptCompletionV0F0V8CategoryV_AP0Q0Ots5NeverOTg506_sSS15d12Generation18f11Envelope33_hijklmnop6LLV011q7D0OAA16rs6V0C0V8t38VAJ0N0OIggyrr_SS3key_AF5valuetAL_ANts5u35OIegnrzr_TR04_s15a12Generation18c11Y79_efghijklm14LLV6unsealAA16op10V0C0VyFAI8q6V_AI11N18OtSS_AD0rD0OtXEfU_Tf3nnnpf_nTf1cn_n(a3);
  swift_bridgeObjectRelease();
  if (*(void *)(v8 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability>);
    uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE80];
  }
  uint64_t v13 = v9;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v10, 1, &v13);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = v13;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v12;
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.unseal()@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v14 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of ModerationEnvelope((uint64_t)&v14);
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS15TokenGeneration18ModerationEnvelope33_FCE651B3B8F212418F5C81F0A4785E63LLV011ProbabilityG0OG_AF16PromptCompletionV0F0V8CategoryV_AP0Q0Ots5NeverOTg506_sSS15d12Generation18f11Envelope33_hijklmnop6LLV011q7D0OAA16rs6V0C0V8t38VAJ0N0OIggyrr_SS3key_AF5valuetAL_ANts5u35OIegnrzr_TR04_s15a12Generation18c11Y79_efghijklm14LLV6unsealAA16op10V0C0VyFAI8q6V_AI11N18OtSS_AD0rD0OtXEfU_Tf3nnnpf_nTf1cn_n(v7);
  outlined release of ModerationEnvelope((uint64_t)&v14);
  if (*(void *)(v8 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PromptCompletion.Moderation.Category, PromptCompletion.Moderation.Probability>);
    uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE80];
  }
  uint64_t v13 = v9;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v10, 1, &v13);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = v13;
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v12;
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.unseal()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnnotationEnvelope.URLCitationEnvelope(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for PromptCompletion.Annotation.Type(0);
  MEMORY[0x270FA5388](v37);
  uint64_t v13 = (uint64_t *)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = type metadata accessor for PromptCompletion.Annotation(0);
  MEMORY[0x270FA5388](v36);
  uint64_t v15 = (uint64_t *)((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *v1;
  uint64_t v34 = v1[1];
  uint64_t v35 = v16;
  uint64_t v17 = v1[2];
  uint64_t v18 = v1[3];
  uint64_t v32 = v1[4];
  uint64_t v33 = v17;
  uint64_t v19 = (uint64_t *)((char *)v1
                  + *(int *)(type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0)
                           + 28));
  uint64_t v31 = *v19;
  uint64_t v20 = type metadata accessor for AnnotationEnvelope(0);
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v19 + *(int *)(v20 + 20), (uint64_t)v11, type metadata accessor for AnnotationEnvelope.CitationTypeEnvelope);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, (uint64_t)v5, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
    uint64_t v21 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v13, v5, v21);
    uint64_t v22 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v5, type metadata accessor for AnnotationEnvelope.DocumentCitationEnvelope);
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, (uint64_t)v8, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
    uint64_t v24 = *v8;
    uint64_t v23 = v8[1];
    uint64_t v25 = (char *)v8 + *(int *)(v6 + 20);
    uint64_t v26 = (char *)v13 + *(int *)(type metadata accessor for PromptCompletion.URLCitation(0) + 20);
    uint64_t v27 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v26, v25, v27);
    *uint64_t v13 = v24;
    v13[1] = v23;
    uint64_t v22 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of DocumentResourceEnvelope((uint64_t)v8, type metadata accessor for AnnotationEnvelope.URLCitationEnvelope);
  }
  swift_storeEnumTagMultiPayload();
  *uint64_t v15 = v31;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v13, (uint64_t)v15 + *(int *)(v36 + 20), type metadata accessor for PromptCompletion.Annotation.Type);
  *a1 = v35;
  a1[1] = v22;
  a1[2] = v33;
  a1[3] = v18;
  a1[4] = v32;
  uint64_t v28 = type metadata accessor for PromptCompletionEventCandidateAnnotation(0);
  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v15, (uint64_t)a1 + *(int *)(v28 + 28), type metadata accessor for PromptCompletion.Annotation);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + 16);
    uint64_t v12 = *(void *)(v3 + 32);
    v10[15] = 1;
    lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 96);
    long long v18 = *(_OWORD *)(v3 + 80);
    long long v19 = v9;
    uint64_t v20 = *(void *)(v3 + 112);
    long long v10 = *(_OWORD *)(v3 + 32);
    long long v14 = *(_OWORD *)(v3 + 16);
    long long v15 = v10;
    long long v11 = *(_OWORD *)(v3 + 64);
    long long v16 = *(_OWORD *)(v3 + 48);
    long long v17 = v11;
    v13[15] = 1;
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 32);
    v10[15] = 2;
    lazy protocol witness table accessor for type ModerationEnvelope and conformance ModerationEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  String.hash(into:)();
  specialized Array<A>.hash(into:)(a1, v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v9 & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(v2, v6))
    {
      if (v3)
      {
        if (v7 && (v4 == v5 && v3 == v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v7)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x6E697265646E6572;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  long long v1 = *(_OWORD *)(v0 + 96);
  long long v10 = *(_OWORD *)(v0 + 80);
  long long v11 = v1;
  uint64_t v12 = *(void *)(v0 + 112);
  long long v2 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = v2;
  long long v3 = *(_OWORD *)(v0 + 64);
  long long v8 = *(_OWORD *)(v0 + 48);
  long long v9 = v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  PromptRenderingEnvelope.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  long long v1 = *(_OWORD *)(v0 + 96);
  long long v10 = *(_OWORD *)(v0 + 80);
  long long v11 = v1;
  uint64_t v12 = *(void *)(v0 + 112);
  long long v2 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = v2;
  long long v3 = *(_OWORD *)(v0 + 64);
  long long v8 = *(_OWORD *)(v0 + 48);
  long long v9 = v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  PromptRenderingEnvelope.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.init(from:)(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(void *)(a2 + 112) = v14;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    double result = *(double *)&v9;
    long long v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  long long v6 = *((_OWORD *)a1 + 6);
  v17[4] = *((_OWORD *)a1 + 5);
  v17[5] = v6;
  uint64_t v18 = a1[14];
  long long v7 = *((_OWORD *)a1 + 2);
  v17[0] = *((_OWORD *)a1 + 1);
  v17[1] = v7;
  long long v8 = *((_OWORD *)a1 + 4);
  uint64_t v17[2] = *((_OWORD *)a1 + 3);
  v17[3] = v8;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  long long v11 = *((_OWORD *)a2 + 2);
  v19[0] = *((_OWORD *)a2 + 1);
  v19[1] = v11;
  uint64_t v20 = a2[14];
  long long v12 = *((_OWORD *)a2 + 6);
  v19[4] = *((_OWORD *)a2 + 5);
  v19[5] = v12;
  long long v13 = *((_OWORD *)a2 + 4);
  id v19[2] = *((_OWORD *)a2 + 3);
  _OWORD v19[3] = v13;
  if (v4 == v9 && v5 == v10 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v15 = 0, (v14 & 1) != 0)) {
    char v15 = specialized static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)v17, (uint64_t)v19);
  }
  return v15 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x6974617265646F6DLL;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)(a1, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  return specialized static Dictionary<>.== infix(_:_:)(v2, v3);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys()
{
  unint64_t v1 = 0x6974617265646F6DLL;
  if (*v0 == 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  String.hash(into:)();
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)(a1, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v9 = v2 == v5 && v4 == v6;
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  return specialized static Dictionary<>.== infix(_:_:)(v3, v7);
}

void PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v0[4]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v1 = v0[8];
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = v0[7];
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of Data?(v2, v1);
  }
}

unint64_t PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x49746E656D676573;
      break;
    case 3:
      unint64_t result = 0x746C654474786574;
      break;
    case 4:
      unint64_t result = 0x6F666E4972657375;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of Locale?(v3 + 56, (uint64_t)v12, &demangling cache variable for type metadata for Data?);
    outlined init with take of Locale?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for Data?);
    v10[15] = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v0[4]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v1 = v0[8];
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = v0[7];
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of Data?(v2, v1);
  }
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
    v8[12] = 3;
    type metadata accessor for AnnotationEnvelope(0);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope and conformance AnnotationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for AnnotationEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys>);
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  MEMORY[0x270FA5388](v7);
  BOOL v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
  MEMORY[0x270FA5388](v10);
  long long v12 = (void *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  uint64_t v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  }
  v20[1] = v4;
  uint64_t v14 = v22;
  uint64_t v15 = v23;
  char v28 = 0;
  *long long v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v16;
  char v27 = 1;
  _OWORD v12[2] = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12[3] = v17;
  char v26 = 2;
  v20[0] = 0;
  void v12[4] = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 3;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type AnnotationEnvelope and conformance AnnotationEnvelope, (void (*)(uint64_t))type metadata accessor for AnnotationEnvelope);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  uint64_t v18 = (uint64_t)v24;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 28), type metadata accessor for AnnotationEnvelope);
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v12, v21, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
  __swift_destroy_boxed_opaque_existential_1Tm(v18);
  return outlined destroy of DocumentResourceEnvelope((uint64_t)v12, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  return PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  return PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
}

__n128 protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  _OWORD v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return specialized static PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.== infix(_:_:)(v7, v9);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x49746E656D676573;
      break;
    case 3:
      unint64_t result = 0x697461746F6E6E61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v1 + 32));
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(a1 + 28)));
  type metadata accessor for AnnotationEnvelope(0);
  AnnotationEnvelope.CitationTypeEnvelope.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1, uint64_t a2)
{
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + 32));
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  type metadata accessor for AnnotationEnvelope(0);
  return AnnotationEnvelope.CitationTypeEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + 32));
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  type metadata accessor for AnnotationEnvelope(0);
  AnnotationEnvelope.CitationTypeEnvelope.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope.encode(to:)(a1);
}

void PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 88);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 80);
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of Data?(v2, v1);
  }
}

unint64_t PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x6E6F6974636E7566;
      break;
    case 4:
      unint64_t result = 0x746E656D75677261;
      break;
    case 5:
      unint64_t result = 0x6F666E4972657375;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of Locale?(v3 + 80, (uint64_t)v12, &demangling cache variable for type metadata for Data?);
    outlined init with take of Locale?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for Data?);
    v10[15] = 5;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 40);
    v10[15] = 3;
    lazy protocol witness table accessor for type ImageContentEnvelope and conformance ImageContentEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v1 = v0[5];
  switch(v1)
  {
    case 0uLL:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 1uLL:
      Swift::UInt v2 = 2;
      goto LABEL_7;
    case 2uLL:
      Swift::UInt v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      goto LABEL_9;
  }
  uint64_t v3 = v0[4];
  Hasher._combine(_:)(1uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of FinishReason(v3, v1);
LABEL_9:
  uint64_t v5 = v0[6];
  unint64_t v4 = v0[7];
  outlined copy of Data._Representation(v5, v4);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v5, v4);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of FinishReasonEnvelope((_OWORD *)(v3 + 32), &v13);
    outlined init with take of FinishReasonEnvelope(&v13, &v12);
    char v11 = 2;
    lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 48);
    char v11 = 3;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    char v16 = 1;
    lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    char v16 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void *PromptCompletionStreamElementEnvelope.Envelope.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of DocumentResourceEnvelope(v2, (uint64_t)v9, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = *v9;
      uint64_t v14 = v9[3];
      uint64_t v49 = v9[2];
      uint64_t v50 = v13;
      uint64_t v51 = v14;
      uint64_t v15 = v9[4];
      uint64_t v16 = v9[5];
      uint64_t v17 = v9[6];
      uint64_t v18 = v9[8];
      uint64_t v47 = v9[7];
      uint64_t v48 = v15;
      uint64_t v19 = v9[10];
      uint64_t v46 = v9[9];
      uint64_t v20 = v9[11];
      uint64_t v21 = v9[12];
      uint64_t v22 = v9[13];
      uint64_t v23 = v9[14];
      uint64_t v44 = v17;
      uint64_t v45 = v22;
      Hasher._combine(_:)(1uLL);
      *(void *)&long long v52 = v49;
      *((void *)&v52 + 1) = v14;
      *(void *)&long long v53 = v48;
      *((void *)&v53 + 1) = v16;
      *(void *)&long long v54 = v44;
      *((void *)&v54 + 1) = v47;
      *(void *)&long long v55 = v18;
      *((void *)&v55 + 1) = v46;
      *(void *)&long long v56 = v19;
      *((void *)&v56 + 1) = v20;
      *(void *)&long long v57 = v21;
      *((void *)&v57 + 1) = v45;
      uint64_t v58 = v23;
      String.hash(into:)();
      PromptRenderingEnvelope.hash(into:)(a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 2u:
      uint64_t v24 = v9[2];
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      specialized Dictionary<>.hash(into:)(a1, v24);
      goto LABEL_7;
    case 3u:
      uint64_t v25 = v9[4];
      Hasher._combine(_:)(3uLL);
      String.hash(into:)();
      String.hash(into:)();
      specialized Dictionary<>.hash(into:)(a1, v25);
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 4u:
      Swift::UInt v26 = v9[4];
      uint64_t v51 = v9[7];
      unint64_t v27 = v9[8];
      Hasher._combine(_:)(4uLL);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v26);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v27 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v28 = v51;
      }
      else
      {
        Hasher._combine(_:)(1u);
        uint64_t v43 = v51;
        outlined copy of Data._Representation(v51, v27);
        Data.hash(into:)();
        outlined consume of Data?(v43, v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v28 = v43;
      }
      return (void *)outlined consume of Data?(v28, v27);
    case 5u:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v9, (uint64_t)v6, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      Hasher._combine(_:)(5uLL);
      String.hash(into:)();
      String.hash(into:)();
      Hasher._combine(_:)(*((void *)v6 + 4));
      Hasher._combine(_:)(*(void *)&v6[*(int *)(v4 + 28)]);
      type metadata accessor for AnnotationEnvelope(0);
      AnnotationEnvelope.CitationTypeEnvelope.hash(into:)();
      return (void *)outlined destroy of DocumentResourceEnvelope((uint64_t)v6, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
    case 6u:
      long long v29 = *((_OWORD *)v9 + 3);
      long long v54 = *((_OWORD *)v9 + 2);
      long long v55 = v29;
      long long v30 = *((_OWORD *)v9 + 5);
      long long v56 = *((_OWORD *)v9 + 4);
      long long v57 = v30;
      long long v31 = *((_OWORD *)v9 + 1);
      long long v52 = *(_OWORD *)v9;
      long long v53 = v31;
      Hasher._combine(_:)(6uLL);
      PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hash(into:)();
      return (void *)outlined release of PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope((uint64_t)&v52);
    case 7u:
      Swift::UInt v33 = v9[4];
      uint64_t v32 = v9[5];
      unint64_t v34 = v9[6];
      Hasher._combine(_:)(7uLL);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v33);
      outlined copy of Data._Representation(v32, v34);
      Data.hash(into:)();
      outlined consume of Data._Representation(v32, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = v32;
      unint64_t v36 = v34;
      goto LABEL_17;
    case 8u:
      long long v37 = *((_OWORD *)v9 + 1);
      long long v52 = *(_OWORD *)v9;
      long long v53 = v37;
      long long v38 = *((_OWORD *)v9 + 3);
      long long v54 = *((_OWORD *)v9 + 2);
      long long v55 = v38;
      Hasher._combine(_:)(8uLL);
      PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.hash(into:)();
      return outlined release of PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope(&v52);
    case 9u:
      Swift::UInt v39 = v9[2];
      Swift::UInt v40 = v9[3];
      Hasher._combine(_:)(9uLL);
      String.hash(into:)();
      Hasher._combine(_:)(v39);
      Hasher._combine(_:)(v40);
      goto LABEL_15;
    case 0xAu:
      uint64_t v41 = v9[2];
      unint64_t v42 = v9[3];
      Hasher._combine(_:)(0xAuLL);
      String.hash(into:)();
      outlined copy of Data._Representation(v41, v42);
      Data.hash(into:)();
      outlined consume of Data._Representation(v41, v42);
      swift_bridgeObjectRelease();
      uint64_t v35 = v41;
      unint64_t v36 = v42;
LABEL_17:
      unint64_t result = (void *)outlined consume of Data._Representation(v35, v36);
      break;
    default:
      uint64_t v10 = v9[2];
      uint64_t v11 = v9[4];
      Hasher._combine(_:)(0);
      String.hash(into:)();
      specialized Array<A>.hash(into:)(a1, v10);
      if (v11)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = (void *)swift_bridgeObjectRelease_n();
      }
      else
      {
        Hasher._combine(_:)(0);
        swift_bridgeObjectRelease();
LABEL_15:
        unint64_t result = (void *)swift_bridgeObjectRelease();
      }
      break;
  }
  return result;
}

unint64_t PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64657265646E6572;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x746C654474786574;
      break;
    case 5:
      unint64_t result = 0x697461746F6E6E61;
      break;
    case 6:
      unint64_t result = 0x6C6C61436C6F6F74;
      break;
    case 7:
      unint64_t result = 0x6E65476567616D69;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0x6567617375;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys>);
  uint64_t v148 = *(void *)(v2 - 8);
  uint64_t v149 = v2;
  MEMORY[0x270FA5388](v2);
  long long v147 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys>);
  uint64_t v145 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  long long v142 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys>);
  uint64_t v143 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  uint64_t v141 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys>);
  uint64_t v139 = *(void *)(v140 - 8);
  MEMORY[0x270FA5388](v140);
  long long v136 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys>);
  uint64_t v137 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  long long v135 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys>);
  uint64_t v133 = *(void *)(v134 - 8);
  MEMORY[0x270FA5388](v134);
  uint64_t v132 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
  MEMORY[0x270FA5388](v128);
  uint64_t v131 = (uint64_t)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys>);
  uint64_t v129 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  uint64_t v127 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys>);
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v124 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys>);
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v13 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys>);
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v119 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys>);
  uint64_t v118 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (uint64_t *)((char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CodingKeys>);
  uint64_t v151 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  uint64_t v22 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  int64_t v150 = v22;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope(v152, (uint64_t)v20, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v29 = v20[1];
      uint64_t v152 = *v20;
      uint64_t v149 = v20[2];
      uint64_t v146 = v20[3];
      uint64_t v30 = v20[5];
      uint64_t v148 = v20[4];
      uint64_t v31 = v20[6];
      long long v147 = (char *)v20[7];
      uint64_t v144 = v20[8];
      uint64_t v32 = (char *)v20[10];
      uint64_t v145 = v20[9];
      uint64_t v33 = v20[12];
      uint64_t v143 = v20[11];
      unint64_t v34 = (char *)v20[13];
      uint64_t v35 = v20[14];
      long long v142 = v34;
      LOBYTE(v153) = 1;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys();
      unint64_t v36 = v119;
      long long v37 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v38 = v152;
      uint64_t v152 = v29;
      uint64_t v153 = v38;
      uint64_t v154 = v29;
      uint64_t v155 = v149;
      unint64_t v156 = v146;
      uint64_t v157 = v148;
      unint64_t v158 = v30;
      uint64_t v148 = v31;
      uint64_t v149 = v30;
      unint64_t v159 = (char *)v31;
      uint64_t v160 = v147;
      unint64_t v161 = v144;
      uint64_t v162 = v145;
      uint64_t v163 = (uint64_t)v32;
      long long v147 = v32;
      unint64_t v164 = v143;
      uint64_t v165 = v33;
      unint64_t v166 = v142;
      uint64_t v167 = v35;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope();
      uint64_t v39 = v123;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v122 + 8))(v36, v39);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v37, v168);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 2u:
      uint64_t v41 = *v20;
      uint64_t v40 = v20[1];
      uint64_t v42 = v20[2];
      LOBYTE(v153) = 2;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys();
      uint64_t v43 = v168;
      uint64_t v44 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v153 = v41;
      uint64_t v154 = v40;
      uint64_t v155 = v42;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope();
      uint64_t v45 = v121;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v13, v45);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v44, v43);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3u:
      uint64_t v47 = *v20;
      uint64_t v46 = v20[1];
      uint64_t v49 = v20[2];
      uint64_t v48 = v20[3];
      uint64_t v50 = v20[4];
      LOBYTE(v153) = 3;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys();
      uint64_t v51 = v124;
      uint64_t v52 = v168;
      long long v53 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v153 = v47;
      uint64_t v154 = v46;
      uint64_t v155 = v49;
      unint64_t v156 = v48;
      uint64_t v157 = v50;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope();
      uint64_t v54 = v126;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v125 + 8))(v51, v54);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v53, v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 4u:
      uint64_t v55 = *v20;
      uint64_t v152 = v20[1];
      uint64_t v56 = v20[3];
      uint64_t v148 = v20[2];
      uint64_t v149 = v55;
      uint64_t v57 = v20[5];
      long long v147 = (char *)v20[4];
      uint64_t v59 = v20[6];
      uint64_t v58 = v20[7];
      unint64_t v60 = v20[8];
      LOBYTE(v153) = 4;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys();
      unint64_t v61 = v127;
      uint64_t v62 = v168;
      uint64_t v63 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v153 = v149;
      uint64_t v154 = v152;
      uint64_t v155 = v148;
      unint64_t v156 = v56;
      uint64_t v149 = v56;
      uint64_t v157 = (uint64_t)v147;
      unint64_t v158 = v57;
      unint64_t v159 = (char *)v59;
      uint64_t v160 = (char *)v58;
      unint64_t v161 = v60;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope();
      uint64_t v64 = v130;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v129 + 8))(v61, v64);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v63, v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of Data?(v58, v60);
    case 5u:
      uint64_t v66 = v131;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v20, v131, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      LOBYTE(v153) = 5;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys();
      unint64_t v67 = v132;
      uint64_t v68 = v168;
      uint64_t v69 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      uint64_t v70 = v134;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v67, v70);
      outlined destroy of DocumentResourceEnvelope(v66, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      return (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v69, v68);
    case 6u:
      uint64_t v71 = v20[1];
      uint64_t v152 = *v20;
      uint64_t v72 = v20[2];
      uint64_t v73 = v20[3];
      uint64_t v148 = v20[4];
      uint64_t v149 = v72;
      uint64_t v146 = v20[5];
      uint64_t v74 = v20[7];
      long long v147 = (char *)v20[6];
      uint64_t v75 = v20[9];
      uint64_t v145 = v20[8];
      uint64_t v77 = v20[10];
      unint64_t v76 = v20[11];
      LOBYTE(v153) = 6;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys();
      uint64_t v78 = v135;
      uint64_t v79 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v80 = v152;
      uint64_t v152 = v71;
      uint64_t v153 = v80;
      uint64_t v154 = v71;
      uint64_t v155 = v149;
      uint64_t v149 = v73;
      unint64_t v156 = v73;
      uint64_t v157 = v148;
      unint64_t v158 = v146;
      unint64_t v159 = v147;
      uint64_t v160 = (char *)v74;
      unint64_t v161 = v145;
      uint64_t v162 = v75;
      uint64_t v148 = v77;
      uint64_t v163 = v77;
      unint64_t v164 = v76;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope();
      uint64_t v81 = v138;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v137 + 8))(v78, v81);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v79, v168);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of Data?(v148, v76);
    case 7u:
      uint64_t v82 = v20[1];
      uint64_t v152 = *v20;
      uint64_t v83 = v20[3];
      uint64_t v149 = v20[2];
      uint64_t v85 = v20[4];
      uint64_t v84 = v20[5];
      unint64_t v86 = v20[6];
      LOBYTE(v153) = 7;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys();
      long long v87 = v136;
      uint64_t v88 = v168;
      uint64_t v89 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v90 = v152;
      uint64_t v152 = v82;
      uint64_t v153 = v90;
      uint64_t v154 = v82;
      uint64_t v155 = v149;
      unint64_t v156 = v83;
      uint64_t v157 = v85;
      unint64_t v158 = v84;
      unint64_t v159 = (char *)v86;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope();
      uint64_t v91 = v140;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v139 + 8))(v87, v91);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v89, v88);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of Data._Representation(v84, v86);
    case 8u:
      uint64_t v108 = v20[1];
      uint64_t v152 = *v20;
      uint64_t v109 = v20[3];
      uint64_t v149 = v20[2];
      uint64_t v110 = v20[4];
      unint64_t v111 = v20[5];
      uint64_t v112 = v20[6];
      unint64_t v113 = v20[7];
      LOBYTE(v153) = 8;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys();
      uint64_t v114 = v141;
      long long v115 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v116 = v152;
      uint64_t v152 = v108;
      uint64_t v153 = v116;
      uint64_t v154 = v108;
      uint64_t v155 = v149;
      uint64_t v149 = v109;
      unint64_t v156 = v109;
      uint64_t v157 = v110;
      unint64_t v158 = v111;
      unint64_t v159 = (char *)v112;
      uint64_t v160 = (char *)v113;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope();
      uint64_t v117 = v144;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v143 + 8))(v114, v117);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v115, v168);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(v110, v111);
      return outlined consume of Data._Representation(v112, v113);
    case 9u:
      uint64_t v93 = *v20;
      uint64_t v92 = v20[1];
      uint64_t v94 = v20[2];
      uint64_t v95 = v20[3];
      LOBYTE(v153) = 9;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys();
      uint64_t v96 = v142;
      uint64_t v97 = v168;
      uint64_t v98 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v153 = v93;
      uint64_t v154 = v92;
      uint64_t v155 = v94;
      unint64_t v156 = v95;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope();
      uint64_t v99 = v146;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v145 + 8))(v96, v99);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v98, v97);
      return swift_bridgeObjectRelease();
    case 0xAu:
      uint64_t v101 = *v20;
      uint64_t v100 = v20[1];
      uint64_t v102 = v20[2];
      unint64_t v103 = v20[3];
      LOBYTE(v153) = 10;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys();
      long long v104 = v147;
      uint64_t v105 = v168;
      long long v106 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v153 = v101;
      uint64_t v154 = v100;
      uint64_t v155 = v102;
      unint64_t v156 = v103;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope();
      uint64_t v107 = v149;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v148 + 8))(v104, v107);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v106, v105);
      swift_bridgeObjectRelease();
      return outlined consume of Data._Representation(v102, v103);
    default:
      uint64_t v23 = v20[1];
      uint64_t v152 = *v20;
      uint64_t v24 = v20[2];
      uint64_t v25 = v20[3];
      uint64_t v26 = v20[4];
      LOBYTE(v153) = 0;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys();
      uint64_t v27 = v168;
      uint64_t v28 = v150;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v153 = v152;
      uint64_t v154 = v23;
      uint64_t v155 = v24;
      unint64_t v156 = v25;
      uint64_t v157 = v26;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v17, v15);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v28, v27);
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
  }
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v166 = a2;
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys>);
  uint64_t v157 = *(void *)(v148 - 8);
  MEMORY[0x270FA5388](v148);
  uint64_t v165 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys>);
  uint64_t v156 = *(void *)(v147 - 8);
  MEMORY[0x270FA5388](v147);
  uint64_t v172 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys>);
  uint64_t v135 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  unint64_t v164 = (char *)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys>);
  uint64_t v155 = *(void *)(v145 - 8);
  MEMORY[0x270FA5388](v145);
  uint64_t v163 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys>);
  uint64_t v154 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  uint64_t v162 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys>);
  uint64_t v153 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  unint64_t v161 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys>);
  uint64_t v152 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  uint64_t v160 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys>);
  uint64_t v151 = *(void *)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  uint64_t v171 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys>);
  uint64_t v150 = *(void *)(v140 - 8);
  MEMORY[0x270FA5388](v140);
  uint64_t v170 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys>);
  uint64_t v149 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  unint64_t v159 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys>);
  uint64_t v137 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  unint64_t v158 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CodingKeys>);
  uint64_t v167 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  uint64_t v15 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  uint64_t v16 = MEMORY[0x270FA5388](v168);
  uint64_t v134 = (uint64_t *)((char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v133 = (uint64_t *)((char *)&v123 - v19);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v129 = (_OWORD *)((char *)&v123 - v21);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v132 = (_OWORD *)((char *)&v123 - v23);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v131 = (_OWORD *)((char *)&v123 - v25);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  long long v136 = (char *)&v123 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v130 = (_OWORD *)((char *)&v123 - v29);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v123 - v31;
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  uint64_t v35 = (char *)&v123 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  uint64_t v38 = (char *)&v123 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  uint64_t v41 = (char *)&v123 - v40;
  MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v123 - v42;
  uint64_t v44 = a1[3];
  uint64_t v174 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v44);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  uint64_t v173 = v15;
  uint64_t v45 = v180;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v45) {
    goto LABEL_29;
  }
  uint64_t v124 = v41;
  uint64_t v125 = v35;
  uint64_t v126 = v38;
  uint64_t v127 = v32;
  uint64_t v47 = v170;
  uint64_t v46 = v171;
  uint64_t v48 = v172;
  uint64_t v180 = 0;
  uint64_t v49 = v168;
  uint64_t v128 = v43;
  uint64_t v50 = v169;
  uint64_t v51 = v173;
  uint64_t v52 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v52 + 16) != 1)
  {
    uint64_t v57 = v51;
    uint64_t v58 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v60 = v59;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *unint64_t v60 = v49;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v58 - 8) + 104))(v60, *MEMORY[0x263F8DCB0], v58);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v167 + 8))(v57, v50);
LABEL_29:
    uint64_t v113 = (uint64_t)v174;
    return __swift_destroy_boxed_opaque_existential_1Tm(v113);
  }
  switch(*(unsigned char *)(v52 + 32))
  {
    case 1:
      v175[0] = 1;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys();
      unint64_t v61 = v159;
      uint64_t v62 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v62) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope();
      uint64_t v63 = v139;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v64 = v167;
      (*(void (**)(char *, uint64_t))(v149 + 8))(v61, v63);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v51, v50);
      long long v65 = *(_OWORD *)&v175[16];
      uint64_t v66 = *(void *)&v175[32];
      long long v67 = *(_OWORD *)&v175[56];
      uint64_t v68 = v176;
      uint64_t v69 = v178;
      uint64_t v56 = (uint64_t)v126;
      _OWORD *v126 = *(_OWORD *)v175;
      *(_OWORD *)(v56 + 16) = v65;
      *(void *)(v56 + 32) = v66;
      *(_OWORD *)(v56 + 40) = *(_OWORD *)&v175[40];
      *(_OWORD *)(v56 + 56) = v67;
      *(void *)(v56 + 72) = v68;
      *(_OWORD *)(v56 + 80) = v177;
      *(void *)(v56 + 96) = v69;
      *(_OWORD *)(v56 + 104) = v179;
      goto LABEL_31;
    case 2:
      v175[0] = 2;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys();
      uint64_t v70 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v70) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationElementEnvelope();
      uint64_t v71 = v140;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v72 = v167;
      (*(void (**)(char *, uint64_t))(v150 + 8))(v47, v71);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v50);
      uint64_t v56 = (uint64_t)v125;
      void *v125 = *(void *)v175;
      *(_OWORD *)(v56 + 8) = *(_OWORD *)&v175[8];
      goto LABEL_31;
    case 3:
      v175[0] = 3;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys();
      uint64_t v73 = v46;
      uint64_t v74 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v74) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationElementEnvelope();
      uint64_t v75 = v141;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v76 = v167;
      (*(void (**)(char *, uint64_t))(v151 + 8))(v73, v75);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v51, v50);
      uint64_t v77 = *(void *)&v175[16];
      uint64_t v56 = (uint64_t)v127;
      *uint64_t v127 = *(_OWORD *)v175;
      *(void *)(v56 + 16) = v77;
      *(_OWORD *)(v56 + 24) = *(_OWORD *)&v175[24];
      goto LABEL_31;
    case 4:
      v175[0] = 4;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys();
      uint64_t v78 = v160;
      uint64_t v79 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v79) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope();
      uint64_t v80 = v142;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v152 + 8))(v78, v80);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v51, v50);
      long long v117 = *(_OWORD *)&v175[16];
      uint64_t v118 = *(void *)&v175[48];
      uint64_t v56 = (uint64_t)v130;
      _OWORD *v130 = *(_OWORD *)v175;
      *(_OWORD *)(v56 + 16) = v117;
      *(_OWORD *)(v56 + 32) = *(_OWORD *)&v175[32];
      *(void *)(v56 + 48) = v118;
      *(_OWORD *)(v56 + 56) = *(_OWORD *)&v175[56];
      goto LABEL_31;
    case 5:
      v175[0] = 5;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys();
      uint64_t v81 = v161;
      uint64_t v82 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v82)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v167 + 8))(v51, v50);
        uint64_t v113 = (uint64_t)v174;
        return __swift_destroy_boxed_opaque_existential_1Tm(v113);
      }
      type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope(0);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.AnnotationElementEnvelope);
      uint64_t v111 = (uint64_t)v136;
      uint64_t v112 = v143;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v153 + 8))(v81, v112);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v173, v50);
      swift_storeEnumTagMultiPayload();
      uint64_t v119 = (uint64_t)v128;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v111, (uint64_t)v128, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v120 = (uint64_t)v174;
      uint64_t v121 = v166;
      goto LABEL_32;
    case 6:
      v175[0] = 6;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys();
      uint64_t v83 = v162;
      uint64_t v84 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v84) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope();
      uint64_t v85 = v144;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v86 = v167;
      (*(void (**)(char *, uint64_t))(v154 + 8))(v83, v85);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v50);
      long long v87 = *(_OWORD *)&v175[16];
      long long v88 = *(_OWORD *)&v175[32];
      long long v89 = *(_OWORD *)&v175[48];
      uint64_t v90 = *(void *)&v175[64];
      uint64_t v91 = v176;
      uint64_t v56 = (uint64_t)v131;
      *uint64_t v131 = *(_OWORD *)v175;
      *(_OWORD *)(v56 + 16) = v87;
      *(_OWORD *)(v56 + 32) = v88;
      *(_OWORD *)(v56 + 48) = v89;
      *(void *)(v56 + 64) = v90;
      *(void *)(v56 + 72) = v91;
      *(_OWORD *)(v56 + 80) = v177;
      goto LABEL_31;
    case 7:
      v175[0] = 7;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys();
      uint64_t v92 = v163;
      uint64_t v93 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v93) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope();
      uint64_t v94 = v145;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v95 = v167;
      (*(void (**)(char *, uint64_t))(v155 + 8))(v92, v94);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v51, v50);
      long long v96 = *(_OWORD *)&v175[16];
      uint64_t v97 = *(void *)&v175[48];
      uint64_t v56 = (uint64_t)v132;
      *uint64_t v132 = *(_OWORD *)v175;
      *(_OWORD *)(v56 + 16) = v96;
      *(_OWORD *)(v56 + 32) = *(_OWORD *)&v175[32];
      *(void *)(v56 + 48) = v97;
      goto LABEL_31;
    case 8:
      v175[0] = 8;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys();
      uint64_t v98 = v164;
      uint64_t v99 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v99) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope();
      uint64_t v100 = v146;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v101 = v167;
      (*(void (**)(char *, uint64_t))(v135 + 8))(v98, v100);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v51, v50);
      long long v102 = *(_OWORD *)&v175[16];
      uint64_t v56 = (uint64_t)v129;
      _OWORD *v129 = *(_OWORD *)v175;
      *(_OWORD *)(v56 + 16) = v102;
      long long v103 = *(_OWORD *)&v175[48];
      *(_OWORD *)(v56 + 32) = *(_OWORD *)&v175[32];
      *(_OWORD *)(v56 + 48) = v103;
      goto LABEL_31;
    case 9:
      v175[0] = 9;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys();
      long long v104 = v48;
      uint64_t v105 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v105) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope();
      uint64_t v106 = v147;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v107 = v167;
      (*(void (**)(char *, uint64_t))(v156 + 8))(v104, v106);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v51, v50);
      uint64_t v108 = *(void *)&v175[8];
      uint64_t v56 = (uint64_t)v133;
      *uint64_t v133 = *(void *)v175;
      *(void *)(v56 + 8) = v108;
      *(_OWORD *)(v56 + 16) = *(_OWORD *)&v175[16];
      goto LABEL_31;
    case 0xA:
      v175[0] = 10;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys();
      uint64_t v109 = v165;
      uint64_t v110 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v110) {
        goto LABEL_26;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope();
      uint64_t v114 = v148;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v115 = v167;
      (*(void (**)(char *, uint64_t))(v157 + 8))(v109, v114);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v51, v50);
      uint64_t v122 = *(void *)&v175[8];
      uint64_t v56 = (uint64_t)v134;
      void *v134 = *(void *)v175;
      *(void *)(v56 + 8) = v122;
      *(_OWORD *)(v56 + 16) = *(_OWORD *)&v175[16];
      goto LABEL_31;
    default:
      v175[0] = 0;
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys();
      long long v53 = v158;
      uint64_t v54 = v180;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v54)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v167 + 8))(v51, v50);
        goto LABEL_29;
      }
      lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope();
      uint64_t v55 = v138;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v137 + 8))(v53, v55);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v51, v50);
      uint64_t v56 = (uint64_t)v124;
      *uint64_t v124 = *(void *)v175;
      *(_OWORD *)(v56 + 8) = *(_OWORD *)&v175[8];
      *(_OWORD *)(v56 + 24) = *(_OWORD *)&v175[24];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      uint64_t v119 = (uint64_t)v128;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v56, (uint64_t)v128, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v120 = (uint64_t)v174;
      uint64_t v121 = v166;
LABEL_32:
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v119, v121, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
      uint64_t v113 = v120;
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v113);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  return PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.init(from:)(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  _OWORD v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  _OWORD v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return specialized static PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.== infix(_:_:)(v9, v10);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x49746E656D676573;
      break;
    case 3:
      unint64_t result = 0x6567616D69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope()
{
  Swift::UInt v1 = v0[4];
  uint64_t v2 = v0[5];
  unint64_t v3 = v0[6];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationElementEnvelope.== infix(_:_:)(v5, v7) & 1;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x65526873696E6966;
      break;
    case 3:
      unint64_t result = 0x617461646174656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  return PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  _OWORD v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  _OWORD v8[2] = a2[2];
  _OWORD v8[3] = v5;
  return specialized static PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.== infix(_:_:)((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x6567617375;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x617461646174656DLL;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  String.hash(into:)();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  outlined copy of Data._Representation(v2, v1);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataElementEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.AnnotationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateModerationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  return PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ImageGenerationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptModerationCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ResponseMetadataCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PromptCompletionStreamElementEnvelope.Envelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope(void *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))PromptCompletionStreamElementEnvelope.Envelope.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))PromptCompletionStreamElementEnvelope.Envelope.hash(into:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.CodingKeys()
{
  return 0x65706F6C65766E65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65706F6C65766E65 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PromptCompletionStreamElementEnvelope.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int PromptCompletionStreamElementEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PromptCompletionStreamElementEnvelope(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, (uint64_t)v11, type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, v13, type metadata accessor for PromptCompletionStreamElementEnvelope);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PromptCompletionStreamElementEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope, (void (*)(uint64_t))type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void ToolChoiceEnvelope.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 1:
      Swift::UInt v2 = 1;
      goto LABEL_7;
    case 2:
      Swift::UInt v2 = 2;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  Hasher._combine(_:)(3uLL);
  String.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolChoiceEnvelope.AutomaticCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolChoiceEnvelope.CodingKeys()
{
  uint64_t result = 1701736302;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6974616D6F747561;
      break;
    case 2:
      uint64_t result = 0x6465726975716572;
      break;
    case 3:
      uint64_t result = 0x6E6F6974636E7566;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolChoiceEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ToolChoiceEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.FunctionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.FunctionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.NoneCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.NoneCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.RequiredCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.RequiredCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ToolChoiceEnvelope.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.FunctionCodingKeys>);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v30 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.RequiredCodingKeys>);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v27 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.AutomaticCodingKeys>);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.NoneCodingKeys>);
  uint64_t v24 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.CodingKeys>);
  uint64_t v33 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v2;
  uint64_t v18 = v2[1];
  uint64_t v23 = v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v18)
  {
    case 0:
      char v34 = 0;
      lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v14);
    case 1:
      char v35 = 1;
      lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v14);
    case 2:
      char v36 = 2;
      lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys();
      uint64_t v19 = v27;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v14);
  }
  char v37 = 3;
  lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys();
  uint64_t v21 = v30;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v22 = v32;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v14);
}

Swift::Int ToolChoiceEnvelope.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 == 1)
    {
      Swift::UInt v2 = 1;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(3uLL);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v2 = 2;
    }
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t ToolChoiceEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.FunctionCodingKeys>);
  uint64_t v44 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v46 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.RequiredCodingKeys>);
  uint64_t v38 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.AutomaticCodingKeys>);
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.NoneCodingKeys>);
  uint64_t v39 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  uint64_t v15 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  }
  uint64_t v16 = v9;
  uint64_t v36 = v7;
  uint64_t v37 = 0;
  uint64_t v17 = v6;
  uint64_t v19 = v45;
  uint64_t v18 = v46;
  uint64_t v49 = v11;
  uint64_t v20 = v47;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v27 = &type metadata for ToolChoiceEnvelope;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x263F8DCB0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  }
  switch(*(unsigned char *)(v21 + 32))
  {
    case 1:
      char v51 = 1;
      lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys();
      uint64_t v28 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v28) {
        goto LABEL_12;
      }
      uint64_t v37 = 0;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
      uint64_t v24 = 0;
      uint64_t v23 = 1;
      goto LABEL_16;
    case 2:
      char v52 = 2;
      lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys();
      uint64_t v29 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v29) {
        goto LABEL_12;
      }
      uint64_t v37 = 0;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
      uint64_t v24 = 0;
      uint64_t v23 = 2;
      goto LABEL_16;
    case 3:
      char v53 = 3;
      lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys();
      uint64_t v30 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v30) {
        goto LABEL_12;
      }
      uint64_t v32 = v41;
      uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v34 = v49;
      uint64_t v37 = 0;
      uint64_t v24 = v33;
      uint64_t v23 = v35;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v10);
      goto LABEL_16;
    default:
      char v50 = 0;
      lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys();
      uint64_t v22 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v23 = v22;
      if (v22)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
      }
      uint64_t v37 = 0;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
      uint64_t v24 = 0;
LABEL_16:
      *uint64_t v20 = v24;
      v20[1] = v23;
      uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
      break;
  }
  return result;
}

uint64_t UsageEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UsageEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolChoiceEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ToolChoiceEnvelope(a1, a2, 3uLL, 1uLL, 2uLL);
}

void protocol witness for Hashable.hash(into:) in conformance ToolChoiceEnvelope()
{
  uint64_t v1 = *(void *)(v0 + 8);
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 1:
      Swift::UInt v2 = 1;
      goto LABEL_7;
    case 2:
      Swift::UInt v2 = 2;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  Hasher._combine(_:)(3uLL);
  String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(a1, a2, a3, 3uLL, 1uLL, 2uLL);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolChoiceEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ToolChoiceEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolChoiceEnvelope(void *a1)
{
  return ToolChoiceEnvelope.encode(to:)(a1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance UsageEnvelope.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance UsageEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized UsageEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UsageEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UsageEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UsageEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized UsageEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UsageEnvelope(void *a1)
{
  return UsageEnvelope.encode(to:)(a1);
}

uint64_t ModerationEnvelope.ProbabilityEnvelope.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys>);
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v28 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys>);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v25 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys>);
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys>);
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModerationEnvelope.ProbabilityEnvelope.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v31)
  {
    case 1:
      char v33 = 1;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
      break;
    case 2:
      char v34 = 2;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys();
      uint64_t v17 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v26;
      uint64_t v18 = v27;
      goto LABEL_5;
    case 3:
      char v35 = 3;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys();
      uint64_t v17 = v28;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v29;
      uint64_t v18 = v30;
LABEL_5:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      break;
    default:
      char v32 = 0;
      lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v10);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t ModerationEnvelope.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModerationEnvelope.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : ModerationEnvelope.ProbabilityEnvelope]);
  lazy protocol witness table accessor for type [String : ModerationEnvelope.ProbabilityEnvelope] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : ModerationEnvelope.ProbabilityEnvelope] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope and conformance ModerationEnvelope.ProbabilityEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t FinishReasonEnvelope.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 3:
      unint64_t result = 0x5464656B6F766E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FinishReasonEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v32 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.InvokedToolCodingKeys>);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v29 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys>);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.EncounteredStopSequenceCodingKeys>);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.ProducedStopTokenCodingKeys>);
  uint64_t v23 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.CodingKeys>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  uint64_t v18 = v33;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v18)
  {
    if (v18 == 1)
    {
      char v36 = 2;
      lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
      uint64_t v20 = v24;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v28);
    }
    else if (v18 == 2)
    {
      char v37 = 3;
      lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys();
      uint64_t v19 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v31);
    }
    else
    {
      char v35 = 1;
      lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v26;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v21);
    }
  }
  else
  {
    char v34 = 0;
    lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys()
{
  uint64_t result = 0x626967696C67656ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7827308;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 1751607656;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ModerationEnvelope.ProbabilityEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.CodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.HighCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.LowCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.MediumCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys and conformance ModerationEnvelope.ProbabilityEnvelope.NegligibleCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

char *protocol witness for Decodable.init(from:) in conformance ModerationEnvelope.ProbabilityEnvelope@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized ModerationEnvelope.ProbabilityEnvelope.init(from:)(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ModerationEnvelope.ProbabilityEnvelope(void *a1)
{
  return ModerationEnvelope.ProbabilityEnvelope.encode(to:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModerationEnvelope.CodingKeys()
{
  return 0x73676E69746172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModerationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73676E69746172 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModerationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModerationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModerationEnvelope.CodingKeys and conformance ModerationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModerationEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ModerationEnvelope(a1, a2, (void (*)(unsigned char *, uint64_t))specialized Dictionary<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModerationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ModerationEnvelope(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized Dictionary<>.hash(into:));
}

void *protocol witness for Decodable.init(from:) in conformance ModerationEnvelope@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized ModerationEnvelope.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ModerationEnvelope(void *a1)
{
  return ModerationEnvelope.encode(to:)(a1, *v1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FinishReasonEnvelope.CodingKeys()
{
  return FinishReasonEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FinishReasonEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized FinishReasonEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.InvokedToolCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.InvokedToolCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FinishReasonEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ToolChoiceEnvelope(a1, a2, 1uLL, 2uLL, 3uLL);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolChoiceEnvelope(uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4, Swift::UInt a5)
{
  uint64_t v9 = *(void *)(v5 + 8);
  Hasher.init(_seed:)();
  if (v9)
  {
    if (v9 == 1)
    {
      Swift::UInt v10 = a4;
    }
    else
    {
      if (v9 != 2)
      {
        Hasher._combine(_:)(a3);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v10 = a5;
    }
  }
  else
  {
    Swift::UInt v10 = 0;
  }
  Hasher._combine(_:)(v10);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FinishReasonEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(a1, a2, a3, 1uLL, 2uLL, 3uLL);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, Swift::UInt a5, Swift::UInt a6)
{
  uint64_t v10 = *(void *)(v6 + 8);
  Hasher.init(_seed:)();
  if (v10)
  {
    if (v10 == 1)
    {
      Swift::UInt v11 = a5;
    }
    else
    {
      if (v10 != 2)
      {
        Hasher._combine(_:)(a4);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      Swift::UInt v11 = a6;
    }
  }
  else
  {
    Swift::UInt v11 = 0;
  }
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FinishReasonEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized FinishReasonEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FinishReasonEnvelope(void *a1)
{
  return FinishReasonEnvelope.encode(to:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FinishReasonEnvelope(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  switch(v3)
  {
    case 0:
      return !v4;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t RequestMetadataEnvelope.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x6F666E4972657375;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RequestMetadataEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestMetadataEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 48);
    v10[15] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int RequestMetadataEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance RequestMetadataEnvelope.CodingKeys()
{
  return RequestMetadataEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RequestMetadataEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized RequestMetadataEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestMetadataEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestMetadataEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RequestMetadataEnvelope()
{
  return RequestMetadataEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RequestMetadataEnvelope(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RequestMetadata()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance RequestMetadataEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized RequestMetadataEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RequestMetadataEnvelope(void *a1)
{
  return RequestMetadataEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RequestMetadataEnvelope(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static RequestMetadataEnvelope.== infix(_:_:)(v5, v7) & 1;
}

void PromptEnvelope.DelimiterEnvelope.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v5 - 8);
  long long v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v0[3])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v0[5]);
  uint64_t v8 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  outlined init with copy of Prompt.Rendering?((uint64_t)v0 + *(int *)(v8 + 32), (uint64_t)v7, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t PromptEnvelope.DelimiterEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.DelimiterEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
    v8[11] = 4;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PromptEnvelope.DelimiterEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.DelimiterEnvelope.CodingKeys>);
  uint64_t v7 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  MEMORY[0x270FA5388](v10);
  char v12 = (uint64_t *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  uint64_t v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  }
  uint64_t v14 = (uint64_t)v6;
  char v28 = 0;
  uint64_t v15 = v22;
  *char v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v16;
  char v27 = 1;
  _OWORD v12[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v12[3] = v17;
  char v26 = 2;
  void v12[4] = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 3;
  v12[5] = KeyedDecodingContainer.decode(_:forKey:)();
  type metadata accessor for Locale();
  char v24 = 4;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  uint64_t v20 = v14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
  uint64_t v18 = (uint64_t)v23;
  outlined init with take of Locale?(v20, (uint64_t)v12 + *(int *)(v10 + 32), &demangling cache variable for type metadata for Locale?);
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v12, v21, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
  __swift_destroy_boxed_opaque_existential_1Tm(v18);
  return outlined destroy of DocumentResourceEnvelope((uint64_t)v12, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65636E6174736E69;
      break;
    case 2:
      uint64_t result = 0x6E6F697469736F70;
      break;
    case 3:
      uint64_t result = 0x797469726F697270;
      break;
    case 4:
      uint64_t result = 0x656C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptEnvelope.DelimiterEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))PromptEnvelope.DelimiterEnvelope.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))PromptEnvelope.DelimiterEnvelope.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptEnvelope.DelimiterEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PromptEnvelope.DelimiterEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope.DelimiterEnvelope(void *a1)
{
  return PromptEnvelope.DelimiterEnvelope.encode(to:)(a1);
}

uint64_t PromptEnvelope.AttachmentEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.AttachmentEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of PromptEnvelope.AttachmentContentEnvelope(v3, (uint64_t)&v12);
  outlined init with take of PromptEnvelope.AttachmentContentEnvelope(&v12, (uint64_t)v11);
  v10[15] = 0;
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  uint64_t v1 = 0x6E6F697469736F70;
  if (*v0 != 1) {
    uint64_t v1 = 0x797469726F697270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746E65746E6F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptEnvelope.AttachmentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope.AttachmentEnvelope()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptEnvelope.AttachmentEnvelope()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope.AttachmentEnvelope()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptEnvelope.AttachmentEnvelope@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptEnvelope.AttachmentEnvelope.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope.AttachmentEnvelope(void *a1)
{
  return PromptEnvelope.AttachmentEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized static PromptEnvelope.AttachmentEnvelope.== infix(_:_:)(v5, v7);
}

uint64_t PromptEnvelope.AttachmentContentEnvelope.encode(to:)(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v16 = a3;
  unint64_t v17 = a4;
  int v18 = a2 & 1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.AttachmentContentEnvelope.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = v16;
  unint64_t v13 = v17;
  outlined copy of Data._Representation(v16, v17);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v19 = v18;
  uint64_t v20 = v14;
  unint64_t v21 = v13;
  lazy protocol witness table accessor for type ImageDataEnvelope and conformance ImageDataEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return outlined consume of Data._Representation(v14, v13);
}

uint64_t PromptEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v11 = v14;
    uint64_t v17 = v15;
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    lazy protocol witness table accessor for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v11;
    char v16 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.AttachmentEnvelope]);
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptEnvelope.AttachmentEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptEnvelope.AttachmentEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys()
{
  return 0x6567616D69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope.AttachmentContentEnvelope()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptEnvelope.AttachmentContentEnvelope()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope.AttachmentContentEnvelope()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

unint64_t protocol witness for Decodable.init(from:) in conformance PromptEnvelope.AttachmentContentEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized PromptEnvelope.AttachmentContentEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope.AttachmentContentEnvelope(void *a1)
{
  return PromptEnvelope.AttachmentContentEnvelope.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope.AttachmentContentEnvelope(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  uint64_t v5 = *((void *)a1 + 1);
  unint64_t v4 = *((void *)a1 + 2);
  outlined copy of Data._Representation(v5, v4);
  outlined copy of Data._Representation(v3, v2);
  char v6 = specialized static Data.== infix(_:_:)(v5, v4, v3, v2);
  outlined consume of Data._Representation(v3, v2);
  outlined consume of Data._Representation(v5, v4);
  return (v6 & 1) != 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptEnvelope.CodingKeys()
{
  uint64_t v1 = 0x6574696D696C6564;
  if (*v0 != 1) {
    uint64_t v1 = 0x656D686361747461;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x676E69727473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptEnvelope(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  String.hash(into:)();
  specialized Array<A>.hash(into:)(a1, v4);
  Swift::UInt v6 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    char v7 = (Swift::UInt *)(v5 + 64);
    do
    {
      Swift::UInt v8 = *((unsigned __int8 *)v7 - 32);
      uint64_t v9 = *(v7 - 3);
      unint64_t v10 = *(v7 - 2);
      Swift::UInt v11 = *(v7 - 1);
      Swift::UInt v12 = *v7;
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v8);
      outlined copy of Data._Representation(v9, v10);
      Data.hash(into:)();
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      outlined consume of Data._Representation(v9, v10);
      v7 += 5;
      --v6;
    }
    while (v6);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized PromptEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope(void *a1)
{
  return PromptEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v2, v5) & 1) == 0)
  {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v3, v4);
}

void PromptRenderingEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[4];
  uint64_t v12 = v4;
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v6 += 16;
      --v5;
    }
    while (v5);
    outlined release of ModerationEnvelope((uint64_t)&v12);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = v2[9];
  Swift::UInt v8 = *(void *)(v7 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    uint64_t v9 = (Swift::UInt *)(v7 + 32);
    do
    {
      Swift::UInt v10 = *v9++;
      Hasher._combine(_:)(v10);
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = v2[10];
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v11);
  swift_bridgeObjectRelease();
  if (v2[12])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

unint64_t PromptRenderingEnvelope.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x656372756F73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73746E656D676573;
      break;
    case 2:
      unint64_t result = 0x64657265646E6572;
      break;
    case 3:
      unint64_t result = 0x6C616E696769726FLL;
      break;
    case 4:
      unint64_t result = 0x7344496E656B6F74;
      break;
    case 5:
      unint64_t result = 0x6F666E4972657375;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PromptRenderingEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptRenderingEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v13 = *v3;
  long long v14 = v9;
  char v12 = 0;
  lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v13 = *((void *)v3 + 4);
    char v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v13 = *((void *)v3 + 9);
    char v12 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *((void *)v3 + 10);
    char v12 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x6E6F6973726576;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptRenderingEnvelope.SourceEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope.SourceEnvelope@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope.SourceEnvelope(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<PromptRenderingEnvelope.SourceEnvelope.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptRenderingEnvelope.SourceEnvelope(void *a1)
{
  return PromptRenderingEnvelope.SourceEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3], &demangling cache variable for type metadata for KeyedEncodingContainer<PromptRenderingEnvelope.SourceEnvelope.CodingKeys>, (void (*)(void *, uint64_t, uint64_t))lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptRenderingEnvelope.CodingKeys()
{
  return PromptRenderingEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptRenderingEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptRenderingEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptRenderingEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptRenderingEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptRenderingEnvelope()
{
  long long v1 = v0[5];
  long long v10 = v0[4];
  long long v11 = v1;
  uint64_t v12 = *((void *)v0 + 12);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  Hasher.init(_seed:)();
  PromptRenderingEnvelope.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptRenderingEnvelope(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptRenderingEnvelope()
{
  long long v1 = v0[5];
  long long v10 = v0[4];
  long long v11 = v1;
  uint64_t v12 = *((void *)v0 + 12);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  Hasher.init(_seed:)();
  PromptRenderingEnvelope.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

__n128 protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized PromptRenderingEnvelope.init(from:)(a1, v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptRenderingEnvelope(void *a1)
{
  return PromptRenderingEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptRenderingEnvelope(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  uint64_t v12 = *(void *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  void v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  void v13[2] = v6;
  v13[3] = v7;
  return specialized static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)v11, (uint64_t)v13) & 1;
}

uint64_t ImageDataEnvelope.encode(to:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  char v7 = a2 & 1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageDataEnvelope.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  long long v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v7;
  char v17 = 0;
  lazy protocol witness table accessor for type ImageFormatEnvelope and conformance ImageFormatEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImageDataEnvelope.CodingKeys()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x74616D726F66;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImageDataEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ImageDataEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageDataEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageDataEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImageDataEnvelope()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageDataEnvelope()
{
  uint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Hasher._combine(_:)(*v0);
  outlined copy of Data._Representation(v1, v2);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImageDataEnvelope()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ImageDataEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized ImageDataEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImageDataEnvelope(void *a1)
{
  return ImageDataEnvelope.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImageDataEnvelope(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return specialized static Data.== infix(_:_:)(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

uint64_t ImageFormatEnvelope.encode(to:)(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageFormatEnvelope.JpgCodingKeys>);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageFormatEnvelope.PngCodingKeys>);
  uint64_t v6 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageFormatEnvelope.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImageFormatEnvelope.CodingKeys()
{
  if (*v0) {
    return 6778986;
  }
  else {
    return 6778480;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImageFormatEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ImageFormatEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageFormatEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageFormatEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageFormatEnvelope.JpgCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageFormatEnvelope.JpgCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageFormatEnvelope.PngCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageFormatEnvelope.PngCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ImageFormatEnvelope@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized ImageFormatEnvelope.init(from:)(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImageFormatEnvelope(void *a1)
{
  return ImageFormatEnvelope.encode(to:)(a1, *v1);
}

uint64_t PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys()
{
  if (*v0) {
    return 0x7441666C65537369;
  }
  else {
    return 0x676E69727473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope(void *a1)
{
  return PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 ^ v3 ^ 1u;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v5) {
    return v2 ^ v3 ^ 1u;
  }
  return result;
}

uint64_t PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v17 = v14;
  uint64_t v18 = v15;
  char v19 = v16;
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys()
{
  return 1954047348;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.TextCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher._combine(_:)(0);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *protocol witness for Decodable.init(from:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope(void *a1)
{
  return PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.encode(to:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[1] = a2;
  void v13[2] = a3;
  char v14 = a4;
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys()
{
  return 0x746E65746E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope(void *a1)
{
  return PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope.ContentEnvelope(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 == v3) {
      return 1;
    }
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v2 ^ v3) & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope]);
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](&lazy protocol witness table cache variable for type [PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope] and conformance <A> [A], &demangling cache variable for type metadata for [PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope], (void (*)(void))lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.ComponentEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys()
{
  return 0x6E656E6F706D6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ModerationEnvelope(a1, a2, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModerationEnvelope(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    int v3 = (Swift::UInt8 *)(v1 + 48);
    do
    {
      Swift::UInt8 v4 = *v3;
      v3 += 24;
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v4);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ModerationEnvelope(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModerationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

void *protocol witness for Decodable.init(from:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope(void *a1)
{
  return PromptTemplateInfoEnvelope.RichVariableBindingEnvelope.encode(to:)(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t PromptTemplateInfoEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptTemplateInfoEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + 16);
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : PromptTemplateInfoEnvelope.RichVariableBindingEnvelope]);
    lazy protocol witness table accessor for type [String : PromptTemplateInfoEnvelope.RichVariableBindingEnvelope] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : PromptTemplateInfoEnvelope.RichVariableBindingEnvelope] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for PromptTemplateInfoEnvelope(0);
    v10[14] = 2;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptTemplateInfoEnvelope.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  Swift::UInt8 v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v11, *(void *)(v0 + 16));
  uint64_t v8 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  outlined init with copy of Prompt.Rendering?(v0 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return Hasher._finalize()();
}

uint64_t PromptTemplateInfoEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptTemplateInfoEnvelope.CodingKeys>);
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  MEMORY[0x270FA5388](v10);
  char v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v18 = v10;
  uint64_t v13 = v20;
  uint64_t v14 = v21;
  char v25 = 0;
  *char v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : PromptTemplateInfoEnvelope.RichVariableBindingEnvelope]);
  char v24 = 1;
  lazy protocol witness table accessor for type [String : PromptTemplateInfoEnvelope.RichVariableBindingEnvelope] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : PromptTemplateInfoEnvelope.RichVariableBindingEnvelope] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.RichVariableBindingEnvelope and conformance PromptTemplateInfoEnvelope.RichVariableBindingEnvelope);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  _OWORD v12[2] = v22;
  type metadata accessor for Locale();
  char v23 = 2;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v14);
  outlined init with take of Locale?((uint64_t)v6, (uint64_t)v12 + *(int *)(v18 + 24), &demangling cache variable for type metadata for Locale?);
  outlined init with copy of DocumentResourceEnvelope((uint64_t)v12, v19, type metadata accessor for PromptTemplateInfoEnvelope);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of DocumentResourceEnvelope((uint64_t)v12, type metadata accessor for PromptTemplateInfoEnvelope);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptTemplateInfoEnvelope.CodingKeys()
{
  unint64_t v1 = 0xD000000000000014;
  if (*v0 != 1) {
    unint64_t v1 = 0x656C61636F6CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6574616C706D6574;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptTemplateInfoEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PromptTemplateInfoEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptTemplateInfoEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptTemplateInfoEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Hashable.hash(into:) in conformance PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)(a1, *(void *)(v2 + 16));
  outlined init with copy of Prompt.Rendering?(v2 + *(int *)(a2 + 24), (uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  String.hash(into:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v13, *(void *)(v2 + 16));
  outlined init with copy of Prompt.Rendering?(v2 + *(int *)(a2 + 24), (uint64_t)v10, &demangling cache variable for type metadata for Locale?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptTemplateInfoEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PromptTemplateInfoEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptTemplateInfoEnvelope(void *a1)
{
  return PromptTemplateInfoEnvelope.encode(to:)(a1);
}

uint64_t DocumentResourceEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentResourceEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for DocumentResourceEnvelope(0);
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t DocumentResourceEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v19 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentResourceEnvelope.CodingKeys>);
  uint64_t v16 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DocumentResourceEnvelope(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v17;
  char v23 = 0;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  uint64_t v13 = v18;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v19, v4);
  char v22 = 1;
  *(_DWORD *)(v11 + *(int *)(v8 + 20)) = KeyedDecodingContainer.decode(_:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  char v21 = 2;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v13);
  *(void *)(v11 + *(int *)(v8 + 24)) = v20;
  outlined init with copy of DocumentResourceEnvelope(v11, v15, type metadata accessor for DocumentResourceEnvelope);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of DocumentResourceEnvelope(v11, type metadata accessor for DocumentResourceEnvelope);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DocumentResourceEnvelope.CodingKeys()
{
  uint64_t v1 = 0x63736544656C6966;
  if (*v0 != 1) {
    uint64_t v1 = 0x617461646174656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7107189;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DocumentResourceEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DocumentResourceEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentResourceEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentResourceEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentResourceEnvelope.CodingKeys and conformance DocumentResourceEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DocumentResourceEnvelope(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_DWORD *)(v1 + *(int *)(a1 + 20)));
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentResourceEnvelope(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_DWORD *)(v2 + *(int *)(a2 + 20)));
  uint64_t v5 = *(void *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v5);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentResourceEnvelope(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_DWORD *)(v2 + *(int *)(a2 + 20)));
  uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v6, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DocumentResourceEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentResourceEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DocumentResourceEnvelope(void *a1)
{
  return DocumentResourceEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DocumentResourceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0x2611FEFF0]() & 1) == 0 || *(_DWORD *)(a1 + *(int *)(a3 + 20)) != *(_DWORD *)(a2 + *(int *)(a3 + 20))) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a2 + v6);
  return specialized static Dictionary<>.== infix(_:_:)(v7, v8);
}

uint64_t DocumentRegistrationStatusEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v35 = (void *)a2;
  uint64_t v34 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x270FA5388](v34);
  uint64_t v32 = (_DWORD *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for DocumentRegistration.Progress();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = type metadata accessor for DocumentRegistration.InternalStatus();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v31 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v30 - v15);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v33 = a1;
  v17((char *)&v30 - v15, a1, v11);
  int v18 = (*(uint64_t (**)(void *, uint64_t))(v12 + 88))(v16, v11);
  if (v18 == *MEMORY[0x263F41568])
  {
    (*(void (**)(void *, uint64_t))(v12 + 96))(v16, v11);
    (*(void (**)(char *, void *, uint64_t))(v5 + 32))(v10, v16, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    DocumentRegistration.Progress.progress.getter();
    int v20 = v19;
    uint64_t v21 = DocumentRegistration.Progress.bytes.getter();
    uint64_t v22 = DocumentRegistration.Progress.totalBytes.getter();
    char v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v4);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v33, v11);
    v23(v10, v4);
    uint64_t v24 = (uint64_t)v32;
    *uint64_t v32 = v20;
    *(void *)(v24 + 8) = v21;
    *(void *)(v24 + 16) = v22;
    swift_storeEnumTagMultiPayload();
    return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v24, (uint64_t)v35, type metadata accessor for DocumentRegistrationStatusEnvelope);
  }
  char v26 = v35;
  if (v18 == *MEMORY[0x263F41578])
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v33, v11);
    (*(void (**)(void *, uint64_t))(v12 + 96))(v16, v11);
    uint64_t v27 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 32))(v26, v16, v27);
    return swift_storeEnumTagMultiPayload();
  }
  if (v18 == *MEMORY[0x263F41570])
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v33, v11);
    (*(void (**)(void *, uint64_t))(v12 + 96))(v16, v11);
    uint64_t v28 = v16[1];
    *char v26 = *v16;
    v26[1] = v28;
    return swift_storeEnumTagMultiPayload();
  }
  v17(v31, v33, v11);
  uint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v29._object = (void *)0x800000025F92CDF0;
  v29._uint64_t countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DocumentRegistrationEnvelope.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DocumentRegistrationEnvelope.CodingKeys()
{
  if (*v0) {
    return 7107189;
  }
  else {
    return 0x737574617473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DocumentRegistrationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DocumentRegistrationEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t DocumentRegistrationEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope and conformance DocumentRegistrationStatusEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentRegistrationStatusEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for DocumentRegistrationEnvelope(0);
    v8[14] = 1;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int DocumentRegistrationEnvelope.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t DocumentRegistrationEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x270FA5388](v25);
  char v26 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationEnvelope.CodingKeys>);
  uint64_t v23 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentRegistrationEnvelope(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  int v20 = a1;
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  char v29 = 0;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope and conformance DocumentRegistrationStatusEnvelope, (void (*)(uint64_t))type metadata accessor for DocumentRegistrationStatusEnvelope);
  uint64_t v15 = (uint64_t)v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v15, v12, type metadata accessor for DocumentRegistrationStatusEnvelope);
  char v28 = 1;
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  uint64_t v16 = v5;
  uint64_t v17 = v14;
  uint64_t v18 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v12 + *(int *)(v9 + 20), v16, v17);
  outlined init with copy of DocumentResourceEnvelope(v12, v22, type metadata accessor for DocumentRegistrationEnvelope);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  return outlined destroy of DocumentResourceEnvelope(v12, type metadata accessor for DocumentRegistrationEnvelope);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DocumentRegistrationEnvelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentRegistrationEnvelope()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentRegistrationEnvelope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DocumentRegistrationEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentRegistrationEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DocumentRegistrationEnvelope(void *a1)
{
  return DocumentRegistrationEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DocumentRegistrationEnvelope(uint64_t a1, uint64_t a2)
{
  if (specialized static DocumentRegistrationStatusEnvelope.== infix(_:_:)(a1, a2))
  {
    JUMPOUT(0x2611FEFF0);
  }
  return 0;
}

void DocumentRegistrationStatusEnvelope.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentResourceEnvelope(v0, (uint64_t)v7, type metadata accessor for DocumentRegistrationStatusEnvelope);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
      Hasher._combine(_:)(1uLL);
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope((unint64_t *)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    Swift::UInt32 v9 = *(_DWORD *)v7;
    Swift::UInt v10 = *((void *)v7 + 1);
    Swift::UInt v11 = *((void *)v7 + 2);
    Hasher._combine(_:)(0);
    if ((v9 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v12 = v9;
    }
    else {
      Swift::UInt32 v12 = 0;
    }
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v10);
    Hasher._combine(_:)(v11);
  }
}

uint64_t DocumentRegistrationStatusEnvelope.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.ErrorCodingKeys>);
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v33 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.FinishedCodingKeys>);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v34 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DocumentResourceIdentifier();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.RegisteringCodingKeys>);
  uint64_t v32 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  Swift::UInt v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.CodingKeys>);
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentResourceEnvelope(v41, (uint64_t)v14, type metadata accessor for DocumentRegistrationStatusEnvelope);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = v35;
      uint64_t v19 = v36;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v8, v14, v36);
      LOBYTE(v44) = 1;
      lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
      uint64_t v21 = v34;
      uint64_t v22 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
      uint64_t v23 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v23);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v22);
    }
    else
    {
      LOBYTE(v44) = 2;
      lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
      char v29 = v33;
      uint64_t v30 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v31 = v38;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v30);
    }
  }
  else
  {
    int v25 = *(_DWORD *)v14;
    uint64_t v26 = *((void *)v14 + 1);
    uint64_t v27 = *((void *)v14 + 2);
    LOBYTE(v44) = 0;
    lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
    uint64_t v28 = v43;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    int v44 = v25;
    uint64_t v45 = v26;
    uint64_t v46 = v27;
    lazy protocol witness table accessor for type ProgressEnvelope and conformance ProgressEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v17, v28);
  }
}

uint64_t DocumentRegistrationStatusEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.ErrorCodingKeys>);
  uint64_t v55 = *(void *)(v3 - 8);
  uint64_t v56 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v64 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.FinishedCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  uint64_t v58 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v63 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.RegisteringCodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v8);
  unint64_t v61 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.CodingKeys>);
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v48 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v48 - v23;
  uint64_t v25 = a1[3];
  long long v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  uint64_t v26 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    uint64_t v49 = v22;
    char v50 = v16;
    char v51 = v19;
    char v52 = v24;
    uint64_t v27 = v61;
    uint64_t v28 = v62;
    char v29 = v63;
    uint64_t v30 = v64;
    uint64_t v68 = v13;
    uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v31 + 16) == 1)
    {
      if (*(unsigned char *)(v31 + 32))
      {
        if (*(unsigned char *)(v31 + 32) == 1)
        {
          LOBYTE(v66) = 1;
          lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          type metadata accessor for DocumentResourceIdentifier();
          lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier, MEMORY[0x263F415B0]);
          uint64_t v32 = (uint64_t)v51;
          uint64_t v33 = v57;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v58 + 8))(v29, v33);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v28);
          uint64_t v34 = (uint64_t)v65;
          swift_storeEnumTagMultiPayload();
          uint64_t v35 = (uint64_t)v52;
          outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v32, (uint64_t)v52, type metadata accessor for DocumentRegistrationStatusEnvelope);
LABEL_12:
          outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v35, v59, type metadata accessor for DocumentRegistrationStatusEnvelope);
          return __swift_destroy_boxed_opaque_existential_1Tm(v34);
        }
        LOBYTE(v66) = 2;
        lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v43 = v56;
        uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v45 = v60;
        uint64_t v47 = v46;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v43);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v28);
        uint64_t v41 = (uint64_t)v50;
        *char v50 = v44;
        *(void *)(v41 + 8) = v47;
      }
      else
      {
        LOBYTE(v66) = 0;
        lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type ProgressEnvelope and conformance ProgressEnvelope();
        uint64_t v40 = v53;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v54 + 8))(v27, v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v28);
        uint64_t v41 = (uint64_t)v49;
        *uint64_t v49 = v66;
        *(_OWORD *)(v41 + 8) = v67;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = (uint64_t)v52;
      outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v41, (uint64_t)v52, type metadata accessor for DocumentRegistrationStatusEnvelope);
      uint64_t v34 = (uint64_t)v65;
      goto LABEL_12;
    }
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v37 = v12;
    uint64_t v39 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v39 = v68;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v39, *MEMORY[0x263F8DCB0], v36);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v28);
  }
  uint64_t v34 = (uint64_t)v65;
  return __swift_destroy_boxed_opaque_existential_1Tm(v34);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DocumentRegistrationStatusEnvelope.CodingKeys()
{
  uint64_t v1 = 0x64656873696E6966;
  if (*v0 != 1) {
    uint64_t v1 = 0x726F727265;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7265747369676572;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DocumentRegistrationStatusEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DocumentRegistrationStatusEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DocumentRegistrationStatusEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance StreamingRequest(a1, a2, (void (*)(unsigned char *))DocumentRegistrationStatusEnvelope.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentRegistrationStatusEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest(a1, a2, a3, (void (*)(unsigned char *))DocumentRegistrationStatusEnvelope.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance DocumentRegistrationStatusEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentRegistrationStatusEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DocumentRegistrationStatusEnvelope(void *a1)
{
  return DocumentRegistrationStatusEnvelope.encode(to:)(a1);
}

uint64_t ProgressEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ProgressEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int ProgressEnvelope.hashValue.getter(Swift::UInt a1, Swift::UInt a2, float a3)
{
  Hasher.init(_seed:)();
  if ((LODWORD(a3) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = LODWORD(a3);
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressEnvelope.CodingKeys()
{
  uint64_t v1 = 0x7365747962;
  if (*v0 != 1) {
    uint64_t v1 = 0x7479426C61746F74;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73736572676F7270;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ProgressEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ProgressEnvelope()
{
  return ProgressEnvelope.hashValue.getter(*(void *)(v0 + 8), *(void *)(v0 + 16), *(float *)v0);
}

void protocol witness for Hashable.hash(into:) in conformance ProgressEnvelope()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v0 + 16);
  if ((*(_DWORD *)v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = *(_DWORD *)v0;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ProgressEnvelope()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = v1;
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProgressEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized ProgressEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v6;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProgressEnvelope(void *a1)
{
  return ProgressEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ProgressEnvelope(uint64_t a1, uint64_t a2)
{
  return *(float *)a1 == *(float *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void SamplingParametersEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  int v4 = *(unsigned __int8 *)(v2 + 8);
  Swift::UInt64 v5 = *(void *)(v2 + 16);
  int v6 = *(unsigned __int8 *)(v2 + 24);
  Swift::UInt64 v7 = *(void *)(v2 + 32);
  int v8 = *(unsigned __int8 *)(v2 + 40);
  Swift::UInt64 v24 = *(void *)(v2 + 48);
  Swift::UInt v25 = *(void *)(v2 + 64);
  int v28 = *(unsigned __int8 *)(v2 + 56);
  int v29 = *(unsigned __int8 *)(v2 + 72);
  uint64_t v9 = *(void *)(v2 + 80);
  Swift::UInt v26 = *(void *)(v2 + 88);
  Swift::UInt64 v27 = *(void *)(v2 + 104);
  int v30 = *(unsigned __int8 *)(v2 + 96);
  int v31 = *(unsigned __int8 *)(v2 + 112);
  Swift::UInt v10 = *(void *)(v2 + 120);
  int v11 = *(unsigned __int8 *)(v2 + 128);
  int v12 = *(unsigned __int8 *)(v2 + 129);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
    if (!v6) {
      goto LABEL_3;
    }
LABEL_26:
    Hasher._combine(_:)(0);
    if (!v8) {
      goto LABEL_7;
    }
LABEL_27:
    Hasher._combine(_:)(0);
    if (!v28) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
  int v23 = *(unsigned __int8 *)(v2 + 128);
  Swift::UInt v16 = *(void *)(v2 + 120);
  int v17 = *(unsigned __int8 *)(v2 + 129);
  Swift::UInt v18 = *(void *)v2;
  Hasher._combine(_:)(1u);
  if (v4)
  {
    if (v4 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v19 = v18;
    }
    else
    {
      Swift::UInt v19 = 0;
    }
    Hasher._combine(_:)(v19);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v20 = v18;
    }
    else {
      Swift::UInt64 v20 = 0;
    }
    Hasher._combine(_:)(v20);
  }
  int v12 = v17;
  Swift::UInt v10 = v16;
  int v11 = v23;
  if (v6) {
    goto LABEL_26;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v5;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if (v8) {
    goto LABEL_27;
  }
LABEL_7:
  Hasher._combine(_:)(1u);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v7;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if (!v28)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v15 = v24;
    }
    else {
      Swift::UInt64 v15 = 0;
    }
    Hasher._combine(_:)(v15);
    if (!v29) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
LABEL_30:
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v9);
  swift_bridgeObjectRelease();
  if (v30)
  {
    Hasher._combine(_:)(0);
    if (!v31) {
      goto LABEL_32;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    if (!v11) {
      goto LABEL_36;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v12 != 2) {
      goto LABEL_37;
    }
LABEL_41:
    Swift::UInt8 v22 = 0;
    goto LABEL_42;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v26);
  if (v31) {
    goto LABEL_39;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v27;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  if (v11) {
    goto LABEL_40;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v10);
  if (v12 == 2) {
    goto LABEL_41;
  }
LABEL_37:
  Swift::UInt8 v22 = v12 & 1;
  Hasher._combine(_:)(1u);
LABEL_42:
  Hasher._combine(_:)(v22);
}

unint64_t SamplingParametersEnvelope.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x7967657461727473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x74617265706D6574;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x65506874676E656CLL;
      break;
    case 4:
      unint64_t result = 0x546D756D6978616DLL;
      break;
    case 5:
      unint64_t result = 0x75716553706F7473;
      break;
    case 6:
      unint64_t result = 0x65536D6F646E6172;
      break;
    case 7:
      unint64_t result = 0x74756F656D6974;
      break;
    case 8:
      unint64_t result = 0xD000000000000016;
      break;
    case 9:
      unint64_t result = 0x6165486E656B6F74;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SamplingParametersEnvelope.CodingKeys()
{
  return SamplingParametersEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SamplingParametersEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SamplingParametersEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SamplingParametersEnvelope.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingParametersEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingParametersEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SamplingParametersEnvelope.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingParametersEnvelope.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  char v8 = *((unsigned char *)v1 + 8);
  uint64_t v9 = v1[2];
  int v30 = *((unsigned __int8 *)v1 + 24);
  uint64_t v25 = v1[4];
  uint64_t v26 = v9;
  int v24 = *((unsigned __int8 *)v1 + 40);
  uint64_t v23 = v1[6];
  int v22 = *((unsigned __int8 *)v1 + 56);
  uint64_t v21 = v1[8];
  int v20 = *((unsigned __int8 *)v1 + 72);
  uint64_t v19 = v1[10];
  uint64_t v17 = v1[11];
  int v18 = *((unsigned __int8 *)v1 + 96);
  uint64_t v15 = v1[13];
  int v16 = *((unsigned __int8 *)v1 + 112);
  uint64_t v13 = v1[15];
  int v14 = *((unsigned __int8 *)v1 + 128);
  v12[1] = *((unsigned __int8 *)v1 + 129);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v28 = v7;
  char v29 = v8;
  char v31 = 0;
  lazy protocol witness table accessor for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope();
  uint64_t v10 = v27;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v10)
  {
    LOBYTE(v28) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v28 = v19;
    char v31 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, &demangling cache variable for type metadata for Set<String>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v28) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int SamplingParametersEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  SamplingParametersEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t SamplingParametersEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingParametersEnvelope.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v83 = 0;
  lazy protocol witness table accessor for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v9 = v58;
  int v10 = v59;
  LOBYTE(v58) = 1;
  uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v50 = v10;
  uint64_t v98 = v9;
  char v96 = v11 & 1;
  LOBYTE(v58) = 2;
  LODWORD(v9) = v11;
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v48 = v9;
  char v94 = v12 & 1;
  LOBYTE(v58) = 3;
  int v13 = v12;
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v46 = v13;
  char v92 = v15 & 1;
  LOBYTE(v58) = 4;
  int v16 = v15;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v43 = v16;
  uint64_t v45 = v17;
  char v90 = v18 & 1;
  int v44 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  char v83 = 5;
  lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, &demangling cache variable for type metadata for Set<String>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v42 = v14;
  uint64_t v19 = v58;
  LOBYTE(v58) = 6;
  swift_bridgeObjectRetain();
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v40 = v20;
  char v88 = v20 & 1;
  LOBYTE(v58) = 7;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v38 = v22;
  char v86 = v22 & 1;
  LOBYTE(v58) = 8;
  uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v37 = v21;
  LOBYTE(v21) = v23 & 1;
  char v84 = v23 & 1;
  char v83 = 9;
  HIDWORD(v36) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v24 = v48 & 1;
  char v57 = v48 & 1;
  char v25 = v46 & 1;
  char v56 = v46 & 1;
  char v26 = v43 & 1;
  char v55 = v43 & 1;
  char v27 = v44 & 1;
  char v54 = v44 & 1;
  char v28 = v40 & 1;
  char v53 = v40 & 1;
  char v52 = v38 & 1;
  char v51 = v21;
  uint64_t v29 = v98;
  *(void *)a2 = v98;
  unsigned __int8 v30 = v50;
  *(unsigned char *)(a2 + 8) = v50;
  uint64_t v31 = v49;
  *(void *)(a2 + 16) = v49;
  *(unsigned char *)(a2 + 24) = v24;
  uint64_t v32 = v47;
  *(void *)(a2 + 32) = v47;
  *(unsigned char *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v42;
  *(unsigned char *)(a2 + 56) = v26;
  *(void *)(a2 + 64) = v45;
  *(unsigned char *)(a2 + 72) = v27;
  uint64_t v33 = v41;
  *(void *)(a2 + 80) = v19;
  *(void *)(a2 + 88) = v33;
  *(unsigned char *)(a2 + 96) = v28;
  *(void *)(a2 + 104) = v37;
  *(unsigned char *)(a2 + 112) = v52;
  *(void *)(a2 + 120) = v39;
  *(unsigned char *)(a2 + 128) = v51;
  LOBYTE(v33) = BYTE4(v36);
  *(unsigned char *)(a2 + 129) = BYTE4(v36);
  char v34 = v33;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  uint64_t v58 = v29;
  unsigned __int8 v59 = v30;
  *(_DWORD *)uint64_t v60 = v97[0];
  *(_DWORD *)&v60[3] = *(_DWORD *)((char *)v97 + 3);
  uint64_t v61 = v31;
  char v62 = v96;
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v95;
  *(_DWORD *)&v63[3] = *(_DWORD *)&v95[3];
  uint64_t v64 = v32;
  char v65 = v94;
  *(_DWORD *)int v66 = *(_DWORD *)v93;
  *(_DWORD *)&v66[3] = *(_DWORD *)&v93[3];
  uint64_t v67 = v42;
  char v68 = v92;
  *(_DWORD *)uint64_t v69 = *(_DWORD *)v91;
  *(_DWORD *)&v69[3] = *(_DWORD *)&v91[3];
  uint64_t v70 = v45;
  char v71 = v90;
  *(_DWORD *)uint64_t v72 = *(_DWORD *)v89;
  *(_DWORD *)&v72[3] = *(_DWORD *)&v89[3];
  uint64_t v73 = v19;
  uint64_t v74 = v41;
  char v75 = v88;
  *(_DWORD *)&v76[3] = *(_DWORD *)&v87[3];
  *(_DWORD *)uint64_t v76 = *(_DWORD *)v87;
  uint64_t v77 = v37;
  char v78 = v86;
  *(_DWORD *)&v79[3] = *(_DWORD *)&v85[3];
  *(_DWORD *)uint64_t v79 = *(_DWORD *)v85;
  uint64_t v80 = v39;
  char v81 = v84;
  char v82 = v34;
  return outlined release of SamplingParametersEnvelope((uint64_t)&v58);
}

void SamplingStrategyEnvelope.hash(into:)(uint64_t a1, Swift::UInt a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v4 = a2;
    }
    else
    {
      Swift::UInt v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = a2;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
}

uint64_t SamplingStrategyEnvelope.encode(to:)(void *a1, uint64_t a2, int a3)
{
  int v26 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.TopKCodingKeys>);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x270FA5388](v4);
  int v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.NucleusSamplingCodingKeys>);
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.ArgmaxCodingKeys>);
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!(_BYTE)v26)
  {
    char v28 = 1;
    lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v21;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v20;
    goto LABEL_5;
  }
  if (v26 == 1)
  {
    char v29 = 2;
    lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
    char v8 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v24;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v23;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  char v27 = 0;
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

Swift::Int SamplingStrategyEnvelope.hashValue.getter(Swift::UInt a1, char a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    if (a2 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v4 = a1;
    }
    else
    {
      Swift::UInt v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = a1;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SamplingParametersEnvelope()
{
  Hasher.init(_seed:)();
  SamplingParametersEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SamplingParametersEnvelope()
{
  Hasher.init(_seed:)();
  SamplingParametersEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SamplingParametersEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SamplingParametersEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SamplingParametersEnvelope(void *a1)
{
  return SamplingParametersEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.ArgmaxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.ArgmaxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SamplingStrategyEnvelope.CodingKeys()
{
  uint64_t v1 = 0x537375656C63756ELL;
  if (*v0 != 1) {
    uint64_t v1 = 1265659764;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x78616D677261;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SamplingStrategyEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SamplingStrategyEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys()
{
  return 0x6C6F687365726874;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.TopKCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.TopKCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SamplingStrategyEnvelope()
{
  return SamplingStrategyEnvelope.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance SamplingStrategyEnvelope(uint64_t a1)
{
  SamplingStrategyEnvelope.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SamplingStrategyEnvelope()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v3 = v1;
    }
    else
    {
      Swift::UInt v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SamplingStrategyEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized SamplingStrategyEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SamplingStrategyEnvelope(void *a1)
{
  return SamplingStrategyEnvelope.encode(to:)(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SamplingStrategyEnvelope(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v4 == 1) {
      return *(void *)&v2 == *(void *)&v3;
    }
    return 0;
  }
  return v4 == 2 && *(void *)&v3 == 0;
}

uint64_t SchemaEnvelope.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for GenerationSchema();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SchemaEnvelope.CodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SchemaEnvelope(0);
  MEMORY[0x270FA5388](v9 - 8);
  int v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v11, v15, type metadata accessor for SchemaEnvelope);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SchemaEnvelope.CodingKeys()
{
  return 0x616D65686373;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SchemaEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x616D65686373 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SchemaEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SchemaEnvelope.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SchemaEnvelope(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, MEMORY[0x263F40C58], &lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F40C58], &lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  a4(0);
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(a5, a6);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(a1, a2, a3, MEMORY[0x263F40C58], &lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnotationEnvelope.DocumentCitationEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SchemaEnvelope@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SchemaEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SchemaEnvelope(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SchemaEnvelope.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for GenerationSchema();
  lazy protocol witness table accessor for type DocumentResourceEnvelope and conformance DocumentResourceEnvelope(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, MEMORY[0x263F40C58]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ToolDescriptionEnvelope.ToolTypeEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = type metadata accessor for GenerationSchema();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  MEMORY[0x270FA5388](v3);
  int v38 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Schema();
  uint64_t v5 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SchemaEnvelope(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  uint64_t v10 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FunctionDescription(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v22 = type metadata accessor for ToolType(0);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a1;
  outlined init with copy of DocumentResourceEnvelope(a1, (uint64_t)v24, type metadata accessor for ToolType);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v24, 2, v15);
  if (v25)
  {
    if (v25 == 1)
    {
      outlined destroy of DocumentResourceEnvelope(v42, type metadata accessor for ToolType);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v43, 1, 2, v41);
    }
    else
    {
      outlined destroy of DocumentResourceEnvelope(v42, type metadata accessor for ToolType);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v43, 2, 2, v41);
    }
  }
  else
  {
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v24, (uint64_t)v21, type metadata accessor for FunctionDescription);
    outlined init with copy of DocumentResourceEnvelope((uint64_t)v21, (uint64_t)v19, type metadata accessor for FunctionDescription);
    uint64_t v27 = *((void *)v19 + 1);
    *uint64_t v12 = *(void *)v19;
    v12[1] = v27;
    uint64_t v28 = *((void *)v19 + 3);
    _DWORD v12[2] = *((void *)v19 + 2);
    uint64_t v12[3] = v28;
    uint64_t v29 = v37;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v19[*(int *)(v15 + 24)], v37);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned __int8 v30 = v38;
    Schema.type.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v29);
    uint64_t v31 = (uint64_t)v36;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v30, v40);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v19, type metadata accessor for FunctionDescription);
    uint64_t v32 = v41;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v31, (uint64_t)v12 + *(int *)(v41 + 24), type metadata accessor for SchemaEnvelope);
    uint64_t v33 = v35;
    outlined init with take of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v12, v35, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    outlined destroy of DocumentResourceEnvelope(v42, type metadata accessor for ToolType);
    outlined destroy of DocumentResourceEnvelope((uint64_t)v21, type metadata accessor for FunctionDescription);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v33, 0, 2, v32);
    return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v33, v43, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  }
}