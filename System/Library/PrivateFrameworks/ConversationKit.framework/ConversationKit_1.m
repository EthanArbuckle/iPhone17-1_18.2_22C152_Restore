uint64_t dispatch thunk of BaseButton.cnkContentAlpha.modify()
{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of BaseButton.__allocating_init(title:symbol:shape:stateConfiguration:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of BaseButton.computedState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t method lookup function for BrickButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BrickButton);
}

uint64_t dispatch thunk of BrickButton.__allocating_init(title:symbol:stateConfiguration:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t method lookup function for PillButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PillButton);
}

uint64_t dispatch thunk of PillButton.__allocating_init(title:symbol:stateConfiguration:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t method lookup function for CircularButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CircularButton);
}

uint64_t dispatch thunk of CircularButton.__allocating_init(symbol:stateConfiguration:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

id static NSItemProvider.unknownError.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  id v3 = objc_allocWithZone(MEMORY[0x1E4F28C50]);
  return @nonobjc NSError.init(domain:code:userInfo:)(v0, v2, -1, 0);
}

uint64_t specialized NSItemProvider.loadObject<A>(ofClass:)()
{
  v1[3] = v0;
  v1[4] = swift_getObjectType();
  v1[5] = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CKContainerSetupInfo);
  return MEMORY[0x1F4188298](specialized NSItemProvider.loadObject<A>(ofClass:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = swift_task_alloc();
  OUTLINED_FUNCTION_9_10(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized NSItemProvider.loadObject<A>(ofClass:);
  uint64_t v3 = OUTLINED_FUNCTION_4_29();
  return MEMORY[0x1F4188160](v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *v4 = v3;
  v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  v1[3] = v0;
  v1[4] = swift_getObjectType();
  v1[5] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for _SWPendingCollaboration);
  return MEMORY[0x1F4188298](specialized NSItemProvider.loadObject<A>(ofClass:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = swift_task_alloc();
  OUTLINED_FUNCTION_9_10(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized NSItemProvider.loadObject<A>(ofClass:);
  uint64_t v3 = OUTLINED_FUNCTION_4_29();
  return MEMORY[0x1F4188160](v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *v4 = v3;
  v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t NSItemProvider.loadObject<A>(ofClass:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  v1[6] = swift_getObjectType();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = NSItemProvider.loadObject<A>(ofClass:);
  uint64_t v5 = OUTLINED_FUNCTION_4_29();
  return MEMORY[0x1F4188160](v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void specialized closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v21 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  *(void *)(v17 + ((v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = a7;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ();
  aBlock[3] = a8;
  v18 = _Block_copy(aBlock);
  swift_release();
  id v19 = objc_msgSend(v21, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v18);
  _Block_release(v18);
}

void closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v9 = type metadata accessor for CheckedContinuation();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)aBlock - v12;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, v13, v9);
  *(void *)(v16 + ((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = partial apply for closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_32;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  id v18 = objc_msgSend(a2, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v17);
  _Block_release(v17);
}

uint64_t specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (a1 && (self, swift_dynamicCastObjCClass()))
  {
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(a6);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (!a2) {
      static NSItemProvider.unknownError.getter();
    }
    id v9 = a2;
    __swift_instantiateConcreteTypeFromMangledName(a6);
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1, id a2)
{
  if (a1
    && (swift_unknownObjectRetain(),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSItemProviderReading),
        (swift_dynamicCast() & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
    type metadata accessor for CheckedContinuation();
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (!a2) {
      static NSItemProvider.unknownError.getter();
    }
    id v4 = a2;
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
    type metadata accessor for CheckedContinuation();
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  v1[6] = swift_getObjectType();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  long long v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v7 = *(_OWORD *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v7;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  type metadata accessor for URL();
  *uint64_t v4 = v0;
  v4[1] = NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:);
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188160](v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_5_8();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v10();
  }
}

void closure #1 in NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)MEMORY[0x1C87730B0](a3, a4);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<URL, Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(void *)(v13 + ((v11 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a5;
  aBlock[4] = partial apply for closure #1 in closure #1 in NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_26_0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  id v15 = objc_msgSend(a2, sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_, v8, v14);
  _Block_release(v14);
}

uint64_t closure #1 in closure #1 in NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v11);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11, v6);
    uint64_t v13 = URL.isFileURL.getter();
    if (v13 & 1) != 0 && (a2)
    {
      MEMORY[0x1F4188790](v13);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<URL, Error>);
      CheckedContinuation.resume(returning:)();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))((char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))((char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    if (a3) {
      goto LABEL_3;
    }
LABEL_8:
    id v12 = static NSItemProvider.unknownError.getter();
    goto LABEL_9;
  }
  outlined destroy of URL?((uint64_t)v11);
  if (!a3) {
    goto LABEL_8;
  }
LABEL_3:
  id v12 = a3;
LABEL_9:
  v16[1] = v12;
  id v15 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<URL, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(char *, uint64_t, void *))(a1 + 32);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v10, v12, 1, v11);
  swift_retain();
  id v13 = a4;
  v7(v10, a3, a4);
  swift_release();

  return outlined destroy of URL?((uint64_t)v10);
}

uint64_t NSItemProvider.collaborationInitiator.getter()
{
  *(void *)(v1 + 16) = v0;
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)();
  void *v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(void);
  uint64_t v20;

  uint64_t v1 = *(void **)(v0 + 16);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CKContainerSetupInfo);
  if (objc_msgSend(v1, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata()))
  {
    uint64_t v2 = (void *)OUTLINED_FUNCTION_14_8();
    *(void *)(v0 + 24) = v2;
    *uint64_t v2 = v0;
    uint64_t v3 = NSItemProvider.collaborationInitiator.getter;
LABEL_5:
    v2[1] = v3;
    return v19();
  }
  uint64_t v4 = *(void **)(v0 + 16);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for _SWPendingCollaboration);
  if (objc_msgSend(v4, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata()))
  {
    uint64_t v2 = (void *)OUTLINED_FUNCTION_14_8();
    *(void *)(v0 + 64) = v2;
    *uint64_t v2 = v0;
    uint64_t v3 = NSItemProvider.collaborationInitiator.getter;
    goto LABEL_5;
  }
  uint64_t v6 = objc_msgSend(*(id *)(v0 + 16), sel_registeredTypeIdentifiersWithFileOptions_, 1);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v7 + 16))
  {
    *(void *)(v0 + 80) = *(void *)(v7 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for URL();
    *(void *)(v0 + 88) = v8;
    OUTLINED_FUNCTION_1(v8);
    *(void *)(v0 + 96) = v9;
    *(void *)(v0 + 104) = swift_task_alloc();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v10;
    *uint64_t v10 = v0;
    v10[1] = NSItemProvider.collaborationInitiator.getter;
    return NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
    uint64_t v11 = swift_task_alloc();
    uint64_t v12 = type metadata accessor for PersonNameComponents();
    __swift_storeEnumTagSinglePayload(v11, 1, 1, v12);
    id v13 = objc_allocWithZone(MEMORY[0x1E4FADAF0]);
    OUTLINED_FUNCTION_5_8();
    @nonobjc TUCollaborationInitiator.init(nameComponents:handle:)(v14, v15, v16);
    swift_task_dealloc();
    uint64_t v17 = OUTLINED_FUNCTION_13_2();
    return v18(v17);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  void *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v8 = v7;
  *(void *)(v5 + 32) = v3;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v5 + 40) = v11;
    *uint64_t v11 = v7;
    v11[1] = NSItemProvider.collaborationInitiator.getter;
    return CKContainerSetupInfo.collaborationInitiator.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_28_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 56) = v3;
  }
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();

  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_28_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 72) = v3;
    OUTLINED_FUNCTION_5_8();
    return MEMORY[0x1F4188298](v11, v12, v13);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t (*v3)(id);
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = _SWPendingCollaboration.collaborationInitiator.getter();

  uint64_t v3 = *(uint64_t (**)(id))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    OUTLINED_FUNCTION_5_8();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v3 + 128) = v10;
    *uint64_t v10 = v5;
    v10[1] = NSItemProvider.collaborationInitiator.getter;
    return URL.userNameAndEmail.getter();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v7 = v0[11];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v8 = swift_task_alloc();
  PersonNameComponents.init(formattedName:)(v2, v1, v8);
  uint64_t v9 = objc_allocWithZone(MEMORY[0x1E4FADAF0]);
  @nonobjc TUCollaborationInitiator.init(nameComponents:handle:)(v8, v3, v4);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  uint64_t v10 = OUTLINED_FUNCTION_13_2();
  return v11(v10);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();

  OUTLINED_FUNCTION_6();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t NSItemProvider.collaborationInitiator.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_0_5();
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v12 = v11;
  uint64_t v13 = *v5;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v14 = v13;
  v11[17] = v4;
  swift_task_dealloc();
  if (v4)
  {
    (*(void (**)(void, void))(v11[12] + 8))(v11[13], v11[11]);
  }
  else
  {
    v11[18] = a4;
    v11[19] = a3;
    v11[20] = a2;
    v11[21] = a1;
  }
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v15, v16, v17);
}

id @nonobjc NSError.init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.isa = 0;
  }
  id v9 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v7, a3, v8.super.isa);

  return v9;
}

void partial apply for closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1)
{
  closure #1 in NSItemProvider.loadObject<A>(ofClass:)(a1, *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

void partial apply for closure #1 in NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)(uint64_t a1)
{
  closure #1 in NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

id @nonobjc TUCollaborationInitiator.init(nameComponents:handle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for PersonNameComponents();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(a1, 1, v8) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  }
  if (a3)
  {
    uint64_t v10 = (void *)MEMORY[0x1C87730B0](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend(v4, sel_initWithNameComponents_handle_, isa, v10);

  return v11;
}

void partial apply for specialized closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1)
{
  specialized closure #1 in NSItemProvider.loadObject<A>(ofClass:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), &demangling cache variable for type metadata for CheckedContinuation<CKContainerSetupInfo, Error>, (uint64_t)&unk_1F1E95D38, (uint64_t)partial apply for specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:), (uint64_t)&block_descriptor_5);
}

{
  uint64_t v1;

  specialized closure #1 in NSItemProvider.loadObject<A>(ofClass:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), &demangling cache variable for type metadata for CheckedContinuation<_SWPendingCollaboration, Error>, (uint64_t)&unk_1F1E95D88, (uint64_t)partial apply for specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:), (uint64_t)&block_descriptor_20);
}

uint64_t sub_1C2FFEBDC()
{
  return objectdestroyTm(&demangling cache variable for type metadata for CheckedContinuation<CKContainerSetupInfo, Error>);
}

uint64_t partial apply for specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1, void *a2)
{
  return partial apply for specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(a1, a2, &demangling cache variable for type metadata for CheckedContinuation<CKContainerSetupInfo, Error>, 0x1E4F19EF0);
}

{
  return partial apply for specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(a1, a2, &demangling cache variable for type metadata for CheckedContinuation<_SWPendingCollaboration, Error>, 0x1E4F3BE08);
}

uint64_t sub_1C2FFEC48()
{
  return objectdestroyTm(&demangling cache variable for type metadata for CheckedContinuation<_SWPendingCollaboration, Error>);
}

uint64_t partial apply for specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1(v9);
  OUTLINED_FUNCTION_10_11();
  return specialized closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(a1, a2, v4 + v10, *(void *)(v4 + v11), a4, a3);
}

uint64_t sub_1C2FFECF4()
{
  return objectdestroyTm(&demangling cache variable for type metadata for CheckedContinuation<URL, Error>);
}

uint64_t objectdestroyTm(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_12_0();
  uint64_t v1 = OUTLINED_FUNCTION_7_11();
  v2(v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<URL, Error>);
  OUTLINED_FUNCTION_1(v6);
  OUTLINED_FUNCTION_10_11();
  return closure #1 in closure #1 in NSItemProvider.loadInPlaceFileRepresentation(forTypeIdentifier:)(a1, a2, a3);
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C2FFEE64()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  OUTLINED_FUNCTION_12_0();
  uint64_t v0 = OUTLINED_FUNCTION_7_11();
  v1(v0);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v4 = type metadata accessor for CheckedContinuation();
  OUTLINED_FUNCTION_1(v4);
  OUTLINED_FUNCTION_10_11();
  return closure #1 in closure #1 in NSItemProvider.loadObject<A>(ofClass:)(a1, a2);
}

id one-time initialization function for systemApertureDurationTextColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.22745098, 1.0, 0.42745098, 1.0);
  static UIColor.systemApertureDurationTextColor = (uint64_t)result;
  return result;
}

uint64_t *UIColor.systemApertureDurationTextColor.unsafeMutableAddressor()
{
  if (one-time initialization token for systemApertureDurationTextColor != -1) {
    swift_once();
  }
  return &static UIColor.systemApertureDurationTextColor;
}

id static UIColor.systemApertureDurationTextColor.getter()
{
  if (one-time initialization token for systemApertureDurationTextColor != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static UIColor.systemApertureDurationTextColor;
  return v0;
}

void one-time initialization function for sensorRegionHeight()
{
  static SystemApertureConstants.sensorRegionHeight = 0x4043000000000000;
}

uint64_t *SystemApertureConstants.sensorRegionHeight.unsafeMutableAddressor()
{
  if (one-time initialization token for sensorRegionHeight != -1) {
    swift_once();
  }
  return &static SystemApertureConstants.sensorRegionHeight;
}

double static SystemApertureConstants.sensorRegionHeight.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for sensorRegionHeight, (uint64_t)&static SystemApertureConstants.sensorRegionHeight);
}

void one-time initialization function for avatarDiameter()
{
  static SystemApertureOngoingTelephonyControlsView.Constants.avatarDiameter = 0x4049000000000000;
}

{
  static OngoingTelephonyControlsView.Constants.avatarDiameter = 0x4049000000000000;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.avatarDiameter.unsafeMutableAddressor()
{
  if (one-time initialization token for avatarDiameter != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.avatarDiameter;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.avatarDiameter.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for avatarDiameter, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.avatarDiameter);
}

int64x2_t one-time initialization function for leadingViewSize()
{
  int64x2_t result = vdupq_n_s64(0x4049000000000000uLL);
  static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize = (__int128)result;
  return result;
}

{
  int64x2_t result;

  int64x2_t result = vdupq_n_s64(0x4049000000000000uLL);
  static SystemApertureIncomingCallControlsView.Constants.leadingViewSize = (__int128)result;
  return result;
}

long long *SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize.unsafeMutableAddressor()
{
  if (one-time initialization token for leadingViewSize != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize.getter()
{
  if (one-time initialization token for leadingViewSize != -1) {
    swift_once();
  }
  return *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize;
}

double one-time initialization function for avatarMargins()
{
  double result = 14.0;
  static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins = xmmword_1C3769AE0;
  xmmword_1EA37DB10 = xmmword_1C3769AF0;
  return result;
}

{
  double result;

  double result = 14.0;
  static OngoingTelephonyControlsView.Constants.avatarMargins = xmmword_1C3769AE0;
  *(_OWORD *)&qword_1EA37E080 = xmmword_1C3769AF0;
  return result;
}

{
  double result;

  double result = 14.0;
  static SystemApertureIncomingCallControlsView.Constants.avatarMargins = xmmword_1C3769AE0;
  xmmword_1EA37E960 = xmmword_1C3769AF0;
  return result;
}

long long *SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins.unsafeMutableAddressor()
{
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins.getter()
{
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  return *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins;
}

double one-time initialization function for brandedCallMargins()
{
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  static SystemApertureOngoingTelephonyControlsView.Constants.brandedCallMargins = static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins;
  qword_1EA37DB28 = 0x4037000000000000;
  double result = *(double *)&xmmword_1EA37DB10;
  xmmword_1EA37DB30 = xmmword_1EA37DB10;
  return result;
}

{
  double result;

  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  static SystemApertureIncomingCallControlsView.Constants.brandedCallMargins = static SystemApertureIncomingCallControlsView.Constants.avatarMargins;
  qword_1EA37E978 = 0x4037000000000000;
  double result = *(double *)&xmmword_1EA37E960;
  xmmword_1EA37E980 = xmmword_1EA37E960;
  return result;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.brandedCallMargins.unsafeMutableAddressor()
{
  if (one-time initialization token for brandedCallMargins != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.brandedCallMargins;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.brandedCallMargins.getter()
{
  if (one-time initialization token for brandedCallMargins != -1) {
    swift_once();
  }
  return *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.brandedCallMargins;
}

void one-time initialization function for brandedIconTrailingSpacer()
{
  static SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer = 0x4010000000000000;
}

{
  static OngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer = 0x4010000000000000;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer.unsafeMutableAddressor()
{
  if (one-time initialization token for brandedIconTrailingSpacer != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for brandedIconTrailingSpacer, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer);
}

void *SystemApertureOngoingTelephonyControlsView.Constants.brandedCallImageCornerRadius.unsafeMutableAddressor()
{
  return &static SystemApertureOngoingTelephonyControlsView.Constants.brandedCallImageCornerRadius;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.brandedCallImageCornerRadius.getter()
{
  return 12.0;
}

double one-time initialization function for textTopInset()
{
  if (one-time initialization token for sensorRegionHeight != -1) {
    swift_once();
  }
  double result = *(double *)&static SystemApertureConstants.sensorRegionHeight;
  static SystemApertureOngoingTelephonyControlsView.Constants.textTopInset = static SystemApertureConstants.sensorRegionHeight;
  return result;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.textTopInset.unsafeMutableAddressor()
{
  if (one-time initialization token for textTopInset != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.textTopInset;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.textTopInset.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for textTopInset, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.textTopInset);
}

void one-time initialization function for textBottomInset()
{
  static SystemApertureOngoingTelephonyControlsView.Constants.textBottomInset = 0x4031000000000000;
}

{
  static OngoingTelephonyControlsView.Constants.textBottomInset = 0x4031000000000000;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.textBottomInset.unsafeMutableAddressor()
{
  if (one-time initialization token for textBottomInset != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.textBottomInset;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.textBottomInset.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for textBottomInset, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.textBottomInset);
}

void one-time initialization function for minimumTextWidth()
{
  static SystemApertureOngoingTelephonyControlsView.Constants.minimumTextWidth = 0x4063800000000000;
}

{
  static OngoingTelephonyControlsView.Constants.minimumTextWidth = 0x4063800000000000;
}

{
  static SystemApertureIncomingCallControlsView.Constants.minimumTextWidth = 0x4063800000000000;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.minimumTextWidth.unsafeMutableAddressor()
{
  if (one-time initialization token for minimumTextWidth != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.minimumTextWidth;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.minimumTextWidth.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for minimumTextWidth, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.minimumTextWidth);
}

void one-time initialization function for secondaryShortTextWidthThreshold()
{
  static SystemApertureOngoingTelephonyControlsView.Constants.secondaryShortTextWidthThreshold = 0x404C000000000000;
}

{
  static SystemApertureIncomingCallControlsView.Constants.secondaryShortTextWidthThreshold = 0x404A800000000000;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.secondaryShortTextWidthThreshold.unsafeMutableAddressor()
{
  if (one-time initialization token for secondaryShortTextWidthThreshold != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.secondaryShortTextWidthThreshold;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.secondaryShortTextWidthThreshold.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for secondaryShortTextWidthThreshold, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.secondaryShortTextWidthThreshold);
}

id one-time initialization function for statusTextColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 1.0, 0.4);
  static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor = (uint64_t)result;
  return result;
}

{
  id result;

  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 1.0, 0.4);
  static OngoingTelephonyControlsView.Constants.statusTextColor = (uint64_t)result;
  return result;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor.unsafeMutableAddressor()
{
  if (one-time initialization token for statusTextColor != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor;
}

id static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for statusTextColor, (void **)&static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor);
}

id one-time initialization function for durationTextColor()
{
  if (one-time initialization token for systemApertureDurationTextColor != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static UIColor.systemApertureDurationTextColor;
  static SystemApertureOngoingTelephonyControlsView.Constants.durationTextColor = static UIColor.systemApertureDurationTextColor;
  return v0;
}

{
  id result;

  id result = objc_msgSend(self, sel_systemGreenColor);
  static OngoingTelephonyControlsView.Constants.durationTextColor = (uint64_t)result;
  return result;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.durationTextColor.unsafeMutableAddressor()
{
  if (one-time initialization token for durationTextColor != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.durationTextColor;
}

id static SystemApertureOngoingTelephonyControlsView.Constants.durationTextColor.getter()
{
  return default argument 0 of ScreenSharingInteraction.init(interactionController:)(&one-time initialization token for durationTextColor, (void **)&static SystemApertureOngoingTelephonyControlsView.Constants.durationTextColor);
}

void one-time initialization function for actionDiameter()
{
  static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter = 0x4049000000000000;
}

{
  static OngoingTelephonyControlsView.Constants.actionDiameter = 0x4049000000000000;
}

{
  static SystemApertureIncomingCallControlsView.Constants.actionDiameter = 0x4049000000000000;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter.unsafeMutableAddressor()
{
  if (one-time initialization token for actionDiameter != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for actionDiameter, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter);
}

double one-time initialization function for actionMargins()
{
  double result = 17.0;
  static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins = xmmword_1C3769B00;
  *(_OWORD *)&qword_1EA37DB90 = xmmword_1C3769B10;
  return result;
}

{
  double result;

  double result = 17.0;
  static OngoingTelephonyControlsView.Constants.actionMargins = xmmword_1C3769B00;
  *(_OWORD *)&qword_1EA37E0E0 = xmmword_1C3769B10;
  return result;
}

{
  double result;

  double result = 17.0;
  static SystemApertureIncomingCallControlsView.Constants.actionMargins = xmmword_1C3769B00;
  *(_OWORD *)&qword_1EA37E9F0 = xmmword_1C3769B10;
  return result;
}

long long *SystemApertureOngoingTelephonyControlsView.Constants.actionMargins.unsafeMutableAddressor()
{
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins.getter()
{
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  return *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins;
}

void one-time initialization function for interActionPadding()
{
  static SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding = 0x4024000000000000;
}

{
  static OngoingTelephonyControlsView.Constants.interActionPadding = 0x4024000000000000;
}

{
  static SystemApertureIncomingCallControlsView.Constants.interActionPadding = 0x4024000000000000;
}

uint64_t *SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for interActionPadding != -1) {
    swift_once();
  }
  return &static SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding;
}

double static SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for interActionPadding, (uint64_t)&static SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding);
}

double static SystemApertureConstants.sensorRegionHeight.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

void SystemApertureOngoingTelephonyControlsView.leadingView.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView) = a1;
}

char *SystemApertureOngoingTelephonyControlsView.__allocating_init(recipe:controlsManager:menuHostViewController:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return SystemApertureOngoingTelephonyControlsView.init(recipe:controlsManager:menuHostViewController:)(a1, a2, a3);
}

char *SystemApertureOngoingTelephonyControlsView.init(recipe:controlsManager:menuHostViewController:)(uint64_t a1, void *a2, void *a3)
{
  type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = (unsigned char *)(v8 - v7);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView] = 0;
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel;
  type metadata accessor for UILabel();
  uint64_t v11 = self;
  double v12 = *MEMORY[0x1E4FB09D0];
  uint64_t v13 = v3;
  id v14 = objc_msgSend(v11, sel_systemFontOfSize_weight_, 16.67, v12);
  v75.value.super.Class isa = (Class)objc_msgSend(self, sel_whiteColor);
  UILabel.init(font:textColor:)(v15, (UIFont)v14, v75);
  v70 = v3;
  *(void *)&v3[v10] = v16;
  uint64_t v17 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_secondaryLabel;
  id v18 = objc_msgSend(v11, sel_monospacedDigitSystemFontOfSize_weight_, 14.0, *MEMORY[0x1E4FB09E0]);
  if (one-time initialization token for statusTextColor != -1) {
    swift_once();
  }
  uint64_t v19 = (objc_class *)static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor;
  id v20 = (id)static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor;
  v76.value.super.Class isa = v19;
  UILabel.init(font:textColor:)(v21, (UIFont)v18, v76);
  *(void *)&v13[v17] = v22;
  v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_context] = 0;
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_cnkContentAlpha] = 0x3FF0000000000000;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_recipe]);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_controlsManager] = a2;
  swift_storeEnumTagMultiPayload();
  uint64_t v69 = a1;
  uint64_t v23 = one-time initialization token for conversationKit;
  v24 = a2;
  uint64_t v68 = v17;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = unk_1EA37DFA0;
  v26 = (void *)qword_1EA37DFA8;
  id v27 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v77._object = (void *)0xE000000000000000;
  v28._object = (void *)0x80000001C3792C70;
  v28._countAndFlagsBits = 0xD000000000000015;
  v29.value._countAndFlagsBits = v25;
  v29.value._object = v26;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v77._countAndFlagsBits = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v77);
  swift_bridgeObjectRelease();

  ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
  id v33 = v32;
  outlined bridged method (mbgnn) of @objc NSObject.accessibilityLabel.setter(v31._countAndFlagsBits, (uint64_t)v31._object, v33);
  swift_bridgeObjectRelease();

  outlined destroy of ConversationControlsAction((uint64_t)v9, (void (*)(void))type metadata accessor for ConversationControlsAction);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_changeRouteButton] = v33;
  static ConversationControlsAction.rejectCall(controlsManager:)(v24, v9);
  uint64_t v34 = unk_1EA37DFA0;
  v35 = (void *)qword_1EA37DFA8;
  id v36 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v78._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0x5F474E41485F5841;
  v37._object = (void *)0xEA00000000005055;
  v38.value._countAndFlagsBits = v34;
  v38.value._object = v35;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v78._countAndFlagsBits = 0;
  Swift::String v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, (NSBundle)v36, v39, v78);
  swift_bridgeObjectRelease();

  ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
  id v42 = v41;
  outlined bridged method (mbgnn) of @objc NSObject.accessibilityLabel.setter(v40._countAndFlagsBits, (uint64_t)v40._object, v42);
  swift_bridgeObjectRelease();

  outlined destroy of ConversationControlsAction((uint64_t)v9, (void (*)(void))type metadata accessor for ConversationControlsAction);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_hangUpButton] = v42;
  objc_msgSend(*(id *)&v70[v10], sel_setAttributedText_, *(void *)(v69 + 80));
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_brandedIconView] = 0;
  uint64_t v43 = type metadata accessor for DurationLabelController();
  uint64_t v44 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v24) + 0x270))();
  uint64_t v46 = v45;
  uint64_t ObjectType = swift_getObjectType();
  v74[3] = ObjectType;
  uint64_t v48 = *(void *)(v46 + 8);
  v74[4] = v48;
  v74[0] = v44;
  uint64_t v49 = one-time initialization token for durationTextColor;
  id v50 = *(id *)&v13[v68];
  if (v49 != -1) {
    swift_once();
  }
  v51 = (void *)static SystemApertureOngoingTelephonyControlsView.Constants.durationTextColor;
  uint64_t v73 = v44;
  swift_unknownObjectRetain();
  id v52 = v51;
  uint64_t v53 = specialized DurationLabelController.__allocating_init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)(&v73, v50, v51, 0, 0, 0, v43, ObjectType, v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  *(void *)&v13[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_durationController] = v53;
  v54 = *(void (**)(uint64_t))(*(void *)v53 + 248);
  uint64_t v55 = swift_retain();
  v54(v55);
  swift_release();

  v72.receiver = v13;
  v72.super_class = (Class)type metadata accessor for SystemApertureOngoingTelephonyControlsView();
  v56 = (char *)objc_msgSendSuper2(&v72, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  SystemApertureOngoingTelephonyControlsView.updateLeadingView()();
  uint64_t v57 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_secondaryLabel;
  id v58 = objc_msgSend(*(id *)&v56[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_secondaryLabel], sel_layer);
  uint64_t v59 = *(unsigned __int8 *)(v69 + *(int *)(type metadata accessor for ConversationControlsRecipe() + 64));
  objc_msgSend(v58, sel_setAllowsHitTesting_, v59);

  uint64_t v60 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel;
  id v61 = objc_msgSend(*(id *)&v56[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel], sel_layer);
  objc_msgSend(v61, sel_setAllowsHitTesting_, v59);

  v62 = *(void **)&v56[v57];
  objc_msgSend(v62, sel_setUserInteractionEnabled_, v59);
  v63 = *(void **)&v56[v60];
  objc_msgSend(v63, sel_setUserInteractionEnabled_, v59);
  objc_msgSend(v56, sel_addSubview_, v62);
  objc_msgSend(v56, sel_addSubview_, v63);
  objc_msgSend(v56, sel_addSubview_, *(void *)&v56[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_changeRouteButton]);
  objc_msgSend(v56, sel_addSubview_, *(void *)&v56[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_hangUpButton]);
  v64 = *(void **)&v56[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_brandedIconView];
  if (v64)
  {
    v65 = v56;
    id v66 = v64;
    objc_msgSend(v65, sel_addSubview_, v66);
  }
  outlined destroy of ConversationControlsAction(v69, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  return v56;
}

unint64_t type metadata accessor for UILabel()
{
  unint64_t result = lazy cache variable for type metadata for UILabel;
  if (!lazy cache variable for type metadata for UILabel)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UILabel);
  }
  return result;
}

uint64_t outlined init with copy of ConversationControlsRecipe(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id SystemApertureOngoingTelephonyControlsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureOngoingTelephonyControlsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel;
  type metadata accessor for UILabel();
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_systemFontOfSize_weight_, 16.67, *MEMORY[0x1E4FB09D0]);
  v12.value.super.Class isa = (Class)objc_msgSend(self, sel_whiteColor);
  UILabel.init(font:textColor:)(v4, (UIFont)v3, v12);
  *(void *)&v0[v1] = v5;
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_secondaryLabel;
  id v7 = objc_msgSend(v2, sel_monospacedDigitSystemFontOfSize_weight_, 14.0, *MEMORY[0x1E4FB09E0]);
  if (one-time initialization token for statusTextColor != -1) {
    swift_once();
  }
  uint64_t v8 = (objc_class *)static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor;
  id v9 = (id)static SystemApertureOngoingTelephonyControlsView.Constants.statusTextColor;
  v13.value.super.Class isa = v8;
  UILabel.init(font:textColor:)(v10, (UIFont)v7, v13);
  *(void *)&v0[v6] = v11;
  v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_context] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_cnkContentAlpha] = 0x3FF0000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id SystemApertureOngoingTelephonyControlsView.controlsManager.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_controlsManager));
}

uint64_t SystemApertureOngoingTelephonyControlsView.context.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_context);
}

void key path getter for SystemApertureOngoingTelephonyControlsView.cnkContentAlpha : SystemApertureOngoingTelephonyControlsView(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
}

uint64_t key path setter for SystemApertureOngoingTelephonyControlsView.cnkContentAlpha : SystemApertureOngoingTelephonyControlsView(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

id SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.didset()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView];
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v0, sel_alpha);
    objc_msgSend(v2, sel_setAlpha_);
  }
  id v3 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_secondaryLabel];
  objc_msgSend(v0, sel_alpha);
  objc_msgSend(v3, sel_setAlpha_);
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel];
  objc_msgSend(v0, sel_alpha);
  objc_msgSend(v4, sel_setAlpha_);
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_changeRouteButton];
  objc_msgSend(v0, sel_alpha);
  objc_msgSend(v5, sel_setAlpha_);
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_hangUpButton];
  objc_msgSend(v0, sel_alpha);
  return objc_msgSend(v6, sel_setAlpha_);
}

double SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_cnkContentAlpha;
  swift_beginAccess();
  return *(double *)v1;
}

id SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.setter(double a1)
{
  id v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_cnkContentAlpha);
  swift_beginAccess();
  *id v3 = a1;
  return SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.didset();
}

uint64_t (*SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.modify;
}

uint64_t SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.modify(uint64_t a1, char a2)
{
  return SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.modify(a1, a2, (uint64_t (*)(uint64_t))SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.didset);
}

uint64_t key path getter for SystemApertureOngoingTelephonyControlsView.recipe : SystemApertureOngoingTelephonyControlsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
}

uint64_t key path setter for SystemApertureOngoingTelephonyControlsView.recipe : SystemApertureOngoingTelephonyControlsView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8))(v6);
}

id SystemApertureOngoingTelephonyControlsView.recipe.didset()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v41[0] = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = _typeName(_:qualified:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "[%{public}s.recipe.didSet] Updating recipe on existing instance may not result in the expected experience.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v6, -1, -1);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  uint64_t v9 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_recipe];
  swift_beginAccess();
  outlined init with copy of ConversationControlsType(v9, (uint64_t)v41);
  uint64_t v37 = 7;
  long long v38 = 0u;
  long long v39 = 0u;
  char v40 = 6;
  char v10 = static ConversationControlsType.== infix(_:_:)((uint64_t)v41);
  outlined destroy of ConversationControlsType((uint64_t)&v37);
  outlined destroy of ConversationControlsType((uint64_t)v41);
  if ((v10 & 1) == 0)
  {
    outlined init with copy of ConversationControlsType(v9, (uint64_t)v41);
    uint64_t v37 = 9;
    long long v38 = 0u;
    long long v39 = 0u;
    char v40 = 6;
    char v11 = static ConversationControlsType.== infix(_:_:)((uint64_t)v41);
    outlined destroy of ConversationControlsType((uint64_t)&v37);
    outlined destroy of ConversationControlsType((uint64_t)v41);
    if ((v11 & 1) == 0)
    {
      UIColor_optional v12 = v0;
      UIColor_optional v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v37 = v36;
        *(_DWORD *)uint64_t v15 = 136446466;
        uint64_t v16 = _typeName(_:qualified:)();
        v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        outlined init with copy of ConversationControlsType(v9, (uint64_t)v41);
        uint64_t v18 = specialized >> prefix<A>(_:)((uint64_t)v41);
        unint64_t v20 = v19;
        outlined destroy of ConversationControlsType?((uint64_t)v41);
        v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v13, v14, "[%{public}s.recipe.didSet] Applied invalid recipe type %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v36, -1, -1);
        MEMORY[0x1C87760E0](v15, -1, -1);
      }
      else
      {
      }
    }
  }
  unint64_t v21 = *(void *)(v9 + 88);
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v35) {
      goto LABEL_15;
    }
  }
  else if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_15;
  }
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v41[0] = v25;
    *(_DWORD *)v24 = 136446210;
    uint64_t v26 = _typeName(_:qualified:)();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v22, v23, "[%{public}s.recipe.didSet] Ignoring recipe subtitles which is currently unsupported per design.", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v25, -1, -1);
    MEMORY[0x1C87760E0](v24, -1, -1);
  }

LABEL_15:
  if (*(void *)(v9 + *(int *)(type metadata accessor for ConversationControlsRecipe() + 40)))
  {
    Swift::String v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Swift::String v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v41[0] = v31;
      *(_DWORD *)Swift::String v30 = 136446210;
      uint64_t v32 = _typeName(_:qualified:)();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v28, v29, "[%{public}s.recipe.didSet] Ignoring recipe subtitleLeadingBadge which is unsupported per design", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v31, -1, -1);
      MEMORY[0x1C87760E0](v30, -1, -1);
    }
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel], sel_setAttributedText_, *(void *)(v9 + 80));
  SystemApertureOngoingTelephonyControlsView.updateLeadingView()();
  return objc_msgSend(v1, sel_setNeedsLayout);
}

uint64_t SystemApertureOngoingTelephonyControlsView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_recipe;
  swift_beginAccess();
  return outlined init with copy of ConversationControlsRecipe(v3, a1);
}

uint64_t SystemApertureOngoingTelephonyControlsView.recipe.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_recipe;
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v3);
  swift_endAccess();
  SystemApertureOngoingTelephonyControlsView.recipe.didset();
  return outlined destroy of ConversationControlsAction(a1, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
}

uint64_t (*SystemApertureOngoingTelephonyControlsView.recipe.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return SystemApertureOngoingTelephonyControlsView.recipe.modify;
}

uint64_t SystemApertureOngoingTelephonyControlsView.recipe.modify(uint64_t a1, char a2)
{
  return SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.modify(a1, a2, (uint64_t (*)(uint64_t))SystemApertureOngoingTelephonyControlsView.recipe.didset);
}

uint64_t SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t SystemApertureOngoingTelephonyControlsView.systemAperturePreferredContentSize.getter()
{
  id v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    uint64_t v2 = v1;
    objc_msgSend(v1, sel_frame);
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    CGFloat v10 = v9;

    v14.origin.x = v4;
    v14.origin.y = v6;
    v14.size.width = v8;
    v14.size.height = v10;
    CGFloat Width = CGRectGetWidth(v14);
  }
  else
  {
    CGFloat Width = 1.79769313e308;
  }
  id v12 = objc_msgSend(v0, sel_SBUISA_systemApertureLeadingConcentricContentLayoutGuide);
  objc_msgSend(v12, sel_layoutFrame);

  return *(void *)&Width;
}

Swift::Void __swiftcall SystemApertureOngoingTelephonyControlsView.layoutSubviews()()
{
  OUTLINED_FUNCTION_18_1();
  id v1 = v0;
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  v155.receiver = v0;
  v155.super_class = (Class)type metadata accessor for SystemApertureOngoingTelephonyControlsView();
  objc_msgSendSuper2(&v155, sel_layoutSubviews);
  if (one-time initialization token for leadingViewSize != -1) {
    swift_once();
  }
  double v7 = *((double *)&static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize + 1);
  double v8 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize;
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0xE0))();
  uint64_t v9 = v6 + *(int *)(v2 + 68);
  id v10 = *(id *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  int v12 = *(unsigned __int8 *)(v9 + 16);
  outlined copy of LeadingViewType?(*(id *)v9, v11, *(unsigned char *)(v9 + 16));
  outlined destroy of ConversationControlsAction(v6, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  if (v12 != 255 && (outlined consume of LeadingViewType?(v10, v11, v12), (v12 & 1) != 0))
  {
    if (one-time initialization token for brandedCallMargins != -1) {
      swift_once();
    }
    double v13 = *(double *)&qword_1EA37DB28;
    uint64_t v66 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView;
    v67 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView];
    if (v67)
    {
      id v68 = objc_msgSend(v67, sel_layer);
      objc_msgSend(v68, sel_setCornerRadius_, 12.0);

      uint64_t v69 = *(void **)&v1[v66];
      if (v69)
      {
        id v70 = objc_msgSend(v69, sel_layer);
        objc_msgSend(v70, sel_setMasksToBounds_, 1);
      }
    }
  }
  else
  {
    if (one-time initialization token for avatarMargins != -1) {
      swift_once();
    }
    double v13 = *((double *)&static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins + 1);
  }
  objc_msgSend(v1, sel_bounds);
  double v14 = (CGRectGetHeight(v156) - v7) * 0.5;
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView], sel_setFrame_, v13, v14, v8, v7);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  uint64_t v139 = v15;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = OUTLINED_FUNCTION_15_1();
    uint64_t v20 = OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_25_4(v20);
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v154);
    OUTLINED_FUNCTION_5_23(v23);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    type metadata accessor for CGRect(0);
    uint64_t v24 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v17, v18, "[%{public}s][layout] leadingFrame is %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (one-time initialization token for actionDiameter != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_17_10();
  CGRectGetWidth(v157);
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_17_10();
  CGRectGetHeight(v158);
  uint64_t v26 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_hangUpButton];
  OUTLINED_FUNCTION_16_8();
  OUTLINED_FUNCTION_35_2();
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  v145 = v26;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = OUTLINED_FUNCTION_15_1();
    uint64_t v30 = OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_25_4(v30);
    *(_DWORD *)uint64_t v29 = 136446466;
    uint64_t v31 = OUTLINED_FUNCTION_8_12();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v154);
    OUTLINED_FUNCTION_5_23(v33);
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    OUTLINED_FUNCTION_22_5();
    uint64_t v34 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v27, v28, "[%{public}s][layout] hangUpCenter is %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (one-time initialization token for interActionPadding != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_17_10();
  CGRectGetHeight(v159);
  uint64_t v36 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_changeRouteButton];
  OUTLINED_FUNCTION_16_8();
  OUTLINED_FUNCTION_35_2();
  uint64_t v37 = (void *)Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  v143 = v36;
  if (OUTLINED_FUNCTION_6_0(v38))
  {
    uint64_t v39 = OUTLINED_FUNCTION_15_1();
    uint64_t v40 = OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_25_4(v40);
    *(_DWORD *)uint64_t v39 = 136446466;
    uint64_t v41 = OUTLINED_FUNCTION_8_12();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v154);
    OUTLINED_FUNCTION_5_23(v43);
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2080;
    OUTLINED_FUNCTION_22_5();
    uint64_t v44 = String.init<A>(reflecting:)();
    LOBYTE(v27) = v45;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_6(&dword_1C2F90000, v46, v47, "[%{public}s][layout] changeRouteCenter is %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  CGFloat v146 = v13;
  v160.origin.x = v13;
  CGFloat v144 = v14;
  v160.origin.y = v14;
  v160.size.width = v8;
  CGFloat v147 = v7;
  v160.size.height = v7;
  double MaxX = CGRectGetMaxX(v160);
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  double v49 = *((double *)&xmmword_1EA37DB10 + 1);
  double v50 = *((double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins + 1);
  double v51 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter;
  double v52 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding;
  double v53 = *(double *)&qword_1EA37DB98;
  OUTLINED_FUNCTION_17_10();
  double Width = CGRectGetWidth(v161);
  uint64_t v55 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel];
  id v56 = objc_msgSend(v55, sel_font);
  if (v56)
  {
    uint64_t v57 = v56;
    double v58 = MaxX + v49;
    double v59 = Width - (v53 + v51 + v50 + v51 + v52) - v58;
    objc_msgSend(v56, sel_lineHeight);
    double v61 = v60;

    v62 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_brandedIconView];
    double v63 = 0.0;
    CGFloat v141 = v8;
    if (v62)
    {
      if (one-time initialization token for iconSize != -1) {
        swift_once();
      }
      long long v64 = static BrandedIconView.Constants.iconSize;
      double v140 = *((double *)&static BrandedIconView.Constants.iconSize + 1);
      if (*(double *)&static BrandedIconView.Constants.iconSize <= 0.0)
      {
        double v65 = *(double *)&static BrandedIconView.Constants.iconSize;
      }
      else
      {
        if (one-time initialization token for brandedIconTrailingSpacer != -1) {
          swift_once();
        }
        double v65 = *(double *)&v64;
        double v63 = *(double *)&v64
            + *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer;
      }
    }
    else
    {
      double v65 = 0.0;
      double v140 = 0.0;
    }
    v149 = v62;
    v150 = v55;
    OUTLINED_FUNCTION_17_10();
    CGFloat Height = CGRectGetHeight(v162);
    double v72 = (*(double (**)(double, double))(**(void **)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_durationController]
                                                   + 224))(v59 - v63, Height - v61);
    double v148 = v73;
    if (one-time initialization token for secondaryShortTextWidthThreshold != -1) {
      swift_once();
    }
    double v74 = v63 + v72;
    double v75 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.secondaryShortTextWidthThreshold;
    UIColor_optional v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_19_11(v77))
    {
      uint64_t v78 = swift_slowAlloc();
      uint64_t v79 = OUTLINED_FUNCTION_9_0();
      OUTLINED_FUNCTION_20_3(v79);
      *(_DWORD *)uint64_t v78 = 136446722;
      uint64_t v80 = OUTLINED_FUNCTION_8_12();
      uint64_t v82 = OUTLINED_FUNCTION_37_5(v80, v81);
      OUTLINED_FUNCTION_25_4(v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 12) = 1024;
      LODWORD(v154[0]) = v74 < v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v78 + 18) = 2048;
      OUTLINED_FUNCTION_33_7();
      _os_log_impl(&dword_1C2F90000, v76, (os_log_type_t)v27, "[%{public}s][layout] secondaryNextToSensor: %{BOOL}d, textWidth: %f", (uint8_t *)v78, 0x1Cu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    double v142 = v63 + v72;
    if (v74 >= v75)
    {
      if (one-time initialization token for textTopInset != -1) {
        swift_once();
      }
      double v83 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.textTopInset;
    }
    else
    {
      OUTLINED_FUNCTION_17_10();
      double v83 = (CGRectGetHeight(v163) - v148 - v61) * 0.5;
    }
    CGFloat v151 = v83;
    double v84 = v58 + v63;
    v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_19_11(v86))
    {
      uint64_t v87 = OUTLINED_FUNCTION_15_1();
      uint64_t v88 = OUTLINED_FUNCTION_14_3();
      OUTLINED_FUNCTION_20_3(v88);
      *(_DWORD *)uint64_t v87 = 136446466;
      uint64_t v89 = OUTLINED_FUNCTION_8_12();
      uint64_t v91 = OUTLINED_FUNCTION_37_5(v89, v90);
      OUTLINED_FUNCTION_12_11(v91);
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      uint64_t v92 = CGRect.description.getter();
      uint64_t v94 = OUTLINED_FUNCTION_37_5(v92, v93);
      OUTLINED_FUNCTION_25_4(v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v85, (os_log_type_t)v27, "[%{public}s][layout] secondaryFrame: %s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    v95 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_secondaryLabel];
    double v96 = OUTLINED_FUNCTION_13_3();
    objc_msgSend(v97, v98, v96);
    if (v149)
    {
      id v99 = v149;
      objc_msgSend(v99, sel_setBounds_, 0.0, 0.0, v65, v140);
      id v100 = v99;
      v164.origin.x = OUTLINED_FUNCTION_13_3();
      double MinX = CGRectGetMinX(v164);
      if (one-time initialization token for brandedIconTrailingSpacer != -1) {
        swift_once();
      }
      double v102 = MinX
           - *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer
           + v65 * -0.5;
      objc_msgSend(v95, sel_center, v139);
      objc_msgSend(v100, sel_setCenter_, v102);
    }
    v165.origin.x = OUTLINED_FUNCTION_13_3();
    CGRectGetMaxY(v165);
    if (v149)
    {
      objc_msgSend(v149, sel_frame);
      CGRectGetMaxY(v166);
    }
    double v103 = OUTLINED_FUNCTION_30_3();
    objc_msgSend(v104, v105, v103);
    v167.origin.x = v146;
    v167.origin.y = v144;
    v167.size.width = v141;
    v167.size.height = v147;
    double MaxY = CGRectGetMaxY(v167);
    double v107 = *(double *)&xmmword_1EA37DB10;
    v168.origin.x = OUTLINED_FUNCTION_30_3();
    CGRectGetMaxY(v168);
    if (v142 >= v75)
    {
      if (one-time initialization token for textBottomInset != -1) {
        swift_once();
      }
    }
    else
    {
      v169.origin.x = v84;
      v169.origin.y = v151;
      v169.size.width = v72;
      v169.size.height = v148;
      CGRectGetMinY(v169);
    }
    double v108 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins;
    double v109 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter;
    double v110 = *(double *)&qword_1EA37DB90;
    v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_19_11(v112))
    {
      uint64_t v113 = swift_slowAlloc();
      uint64_t v114 = OUTLINED_FUNCTION_9_0();
      OUTLINED_FUNCTION_20_3(v114);
      *(_DWORD *)uint64_t v113 = 136446978;
      uint64_t v115 = OUTLINED_FUNCTION_8_12();
      uint64_t v117 = OUTLINED_FUNCTION_37_5(v115, v116);
      OUTLINED_FUNCTION_12_11(v117);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 12) = 2048;
      *(double *)v154 = MaxY + v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v113 + 22) = 2048;
      OUTLINED_FUNCTION_33_7();
      *(_WORD *)(v113 + 32) = 2048;
      *(double *)v154 = v108 + v109 + v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v111, (os_log_type_t)v27, "[%{public}s][layout] avatarMaxY: %f, textMaxY: %f, %f", (uint8_t *)v113, 0x2Au);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    if (objc_msgSend(v1, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIView?>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C3769B20;
      v119 = *(void **)&v1[v139];
      *(void *)(inited + 32) = v119;
      *(void *)(inited + 40) = v95;
      *(void *)(inited + 48) = v150;
      *(void *)(inited + 56) = v143;
      *(void *)(inited + 64) = v145;
      *(void *)(inited + 72) = v149;
      v152 = (void *)inited;
      specialized Array._endMutation()();
      v120 = v152;
      unint64_t v153 = MEMORY[0x1E4FBC860];
      v121 = (void *)v120[4];
      if (v121)
      {
        v121;
        id v122 = v149;
        id v123 = v119;
        id v124 = v95;
        id v125 = v150;
        id v126 = v143;
        MEMORY[0x1C87733A0](v145);
        if (*(void *)((v153 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v153 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        id v127 = v119;
        id v128 = v95;
        id v129 = v150;
        id v130 = v143;
        id v131 = v145;
        id v132 = v149;
      }
      v133 = (void *)v120[5];
      if (v133)
      {
        v133;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_28();
        if (v134) {
          OUTLINED_FUNCTION_4_30();
        }
        OUTLINED_FUNCTION_27_2();
        specialized Array._endMutation()();
      }
      v135 = (void *)v120[6];
      if (v135)
      {
        v135;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_28();
        if (v134) {
          OUTLINED_FUNCTION_4_30();
        }
        OUTLINED_FUNCTION_27_2();
        specialized Array._endMutation()();
      }
      v136 = (void *)v120[7];
      if (v136)
      {
        v136;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_28();
        if (v134) {
          OUTLINED_FUNCTION_4_30();
        }
        OUTLINED_FUNCTION_27_2();
        specialized Array._endMutation()();
      }
      v137 = (void *)v120[8];
      if (v137)
      {
        v137;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_28();
        if (v134) {
          OUTLINED_FUNCTION_4_30();
        }
        OUTLINED_FUNCTION_27_2();
        specialized Array._endMutation()();
      }
      v138 = (void *)v120[9];
      if (v138)
      {
        v138;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_1_28();
        if (v134) {
          OUTLINED_FUNCTION_4_30();
        }
        OUTLINED_FUNCTION_27_2();
        specialized Array._endMutation()();
      }
      swift_bridgeObjectRelease();
      specialized Sequence.forEach(_:)(v153, v1);
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_28_1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized Sequence.forEach(_:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      double v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      objc_msgSend(a2, sel_bounds);
      double Width = CGRectGetWidth(v13);
      objc_msgSend(v7, sel_center);
      double v11 = Width - v10;
      objc_msgSend(v7, sel_center);
      objc_msgSend(v7, sel_setCenter_, v11);

      ++v5;
      if (v8 == v4) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
LABEL_9:

  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v11;

  *(void *)(swift_allocObject() + 16) = a2;
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = a2;
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v6 = 4;
    while (1)
    {
      double v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      objc_msgSend(a2, sel_addSublayer_, v7);

      ++v6;
      if (v9 == v4) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    double v11 = a2;
    swift_bridgeObjectRetain();
  }
LABEL_9:
  swift_bridgeObjectRelease();

  return swift_release();
}

{
  char **v2;
  char **v3;
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  objc_super v13;
  char **v14;

  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (a1 >> 62) {
    goto LABEL_11;
  }
  double v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; double v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    double v14 = v3;
    uint64_t v8 = 4;
    uint64_t v3 = &selRef_ringButton;
    while (1)
    {
      uint64_t v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      double v10 = v9;
      double v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      v13.receiver = a2;
      v13.super_class = ObjectType;
      objc_msgSendSuper2(&v13, sel_bounds);
      objc_msgSend(v10, sel_setBounds_);

      ++v8;
      if (v11 == v7) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
LABEL_12:

  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  double Width;
  double v10;
  double v11;
  double v12;
  double MinY;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      double v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      objc_msgSend(a2, sel_bounds);
      double Width = CGRectGetWidth(v15);
      objc_msgSend(v7, sel_frame);
      double v11 = Width - v10;
      objc_msgSend(v7, sel_frame);
      int v12 = v11 - CGRectGetMinX(v16);
      objc_msgSend(v7, sel_frame);
      MinY = CGRectGetMinY(v17);
      objc_msgSend(v7, sel_frame);
      objc_msgSend(v7, sel_setFrame_, v12, MinY);

      ++v5;
      if (v8 == v4) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
LABEL_9:

  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  void *v8;

  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](i - 4, a1) : *(id *)(a1 + 8 * i);
      double v7 = v6;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      self;
      uint64_t v8 = (void *)swift_dynamicCastObjCClass();
      if (v8) {
        objc_msgSend(v8, sel_setEnabled_, ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x2E8))() & 1) == 0);
      }

      if (i - 3 == v4) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:

  return swift_bridgeObjectRelease();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  BOOL v10;
  uint64_t (*v12)(void);
  unint64_t v13;

  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    CGRect v13 = v3 & 0xC000000000000001;
    int v12 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x1C8);
    uint64_t v5 = 4;
    id v6 = v3;
    while (1)
    {
      double v7 = v13 ? (id)MEMORY[0x1C87744F0](v5 - 4, v3) : *(id *)(v3 + 8 * v5);
      uint64_t v8 = v7;
      uint64_t v3 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      uint64_t v9 = (void *)v12();
      objc_msgSend(v9, sel_center);

      objc_msgSend(v8, sel_center);
      objc_msgSend(v8, sel_setCenter_);

      ++v5;
      double v10 = v3 == v4;
      uint64_t v3 = v6;
      if (v10) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
LABEL_10:

  return swift_bridgeObjectRelease();
}

CGSize __swiftcall SystemApertureOngoingTelephonyControlsView.sizeThatFits(_:)(CGSize a1)
{
  OUTLINED_FUNCTION_18_1();
  uint64_t v2 = v1;
  double v4 = v3;
  double v6 = v5;
  swift_getObjectType();
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  if (v4 <= 2.22507386e-308) {
    double v4 = 1.79769313e308;
  }
  double v80 = v6;
  double v81 = v4;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationControls);
  CGRect v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_6_0(v14))
  {
    uint64_t v15 = OUTLINED_FUNCTION_15_1();
    uint64_t v77 = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v16 = _typeName(_:qualified:)();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v77);
    OUTLINED_FUNCTION_26_5(v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    double v78 = v6;
    double v79 = v4;
    type metadata accessor for CGSize(0);
    uint64_t v19 = String.init<A>(reflecting:)();
    double v78 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v77));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_6(&dword_1C2F90000, v21, v22, "[%{public}s][sizing] sizingThatFits %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  if (one-time initialization token for actionDiameter != -1) {
    swift_once();
  }
  double v23 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter;
  double v24 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter;
  if (one-time initialization token for interActionPadding != -1)
  {
    swift_once();
    double v24 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter;
  }
  double v25 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding;
  uint64_t v26 = (void *)Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_6_0(v27))
  {
    uint64_t v28 = OUTLINED_FUNCTION_15_1();
    uint64_t v77 = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v29 = _typeName(_:qualified:)();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v77);
    OUTLINED_FUNCTION_26_5(v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    double v78 = v23 + v25 + v24;
    double v79 = v24;
    type metadata accessor for CGSize(0);
    uint64_t v32 = String.init<A>(reflecting:)();
    double v78 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v77));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_6(&dword_1C2F90000, v34, v35, "[%{public}s][sizing] actionsSize is  %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xE0))();
  uint64_t v36 = v11 + *(int *)(v7 + 68);
  id v37 = *(id *)v36;
  uint64_t v38 = *(void *)(v36 + 8);
  int v39 = *(unsigned __int8 *)(v36 + 16);
  outlined copy of LeadingViewType?(*(id *)v36, v38, *(unsigned char *)(v36 + 16));
  outlined destroy of ConversationControlsAction(v11, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  if (v39 != 255 && (outlined consume of LeadingViewType?(v37, v38, v39), (v39 & 1) != 0))
  {
    if (one-time initialization token for brandedCallMargins != -1) {
      swift_once();
    }
    uint64_t v40 = (double *)&qword_1EA37DB28;
  }
  else
  {
    if (one-time initialization token for avatarMargins != -1) {
      swift_once();
    }
    uint64_t v40 = (double *)&static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins + 1;
  }
  double v41 = *v40;
  if (one-time initialization token for leadingViewSize != -1) {
    swift_once();
  }
  double v42 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize;
  if (one-time initialization token for avatarMargins != -1) {
    swift_once();
  }
  double v43 = v41 + v42;
  double v44 = *((double *)&xmmword_1EA37DB10 + 1);
  if (one-time initialization token for actionMargins != -1) {
    swift_once();
  }
  double v45 = v43 + v44;
  double v46 = *(double *)&qword_1EA37DB98
      + *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter
      + *((double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins + 1)
      + *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter
      + *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.interActionPadding;
  double v47 = 0.0;
  if (*(void *)((char *)v2
                 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_brandedIconView))
  {
    if (one-time initialization token for iconSize != -1) {
      swift_once();
    }
    double v49 = *((double *)&static BrandedIconView.Constants.iconSize + 1);
    double v48 = *(double *)&static BrandedIconView.Constants.iconSize;
    if (*(double *)&static BrandedIconView.Constants.iconSize > 0.0)
    {
      if (one-time initialization token for brandedIconTrailingSpacer != -1) {
        swift_once();
      }
      double v47 = v48 + *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.brandedIconTrailingSpacer;
    }
  }
  else
  {
    double v49 = 0.0;
  }
  double v50 = v6 - v46 - v45;
  swift_beginAccess();
  double v51 = v81;
  objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_primaryLabel), sel_sizeThatFits_, v50, v81);
  double v53 = v52;
  objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_secondaryLabel), sel_sizeThatFits_, v50 - v47, v51 - v52);
  if (v54 > v49) {
    double v55 = v54;
  }
  else {
    double v55 = v49;
  }
  double v56 = v53 + v55;
  double v57 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.avatarMargins;
  double v58 = *((double *)&static SystemApertureOngoingTelephonyControlsView.Constants.leadingViewSize + 1);
  double v59 = *(double *)&xmmword_1EA37DB10;
  double v60 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionMargins;
  double v61 = *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.actionDiameter;
  double v62 = *(double *)&qword_1EA37DB90;
  if (one-time initialization token for textTopInset != -1) {
    swift_once();
  }
  double v63 = v57 + v58;
  double v64 = v60 + v61;
  double v65 = v56 + *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.textTopInset;
  if (one-time initialization token for textBottomInset != -1) {
    swift_once();
  }
  double v66 = v63 + v59;
  double v67 = v64 + v62;
  double v68 = v65 + *(double *)&static SystemApertureOngoingTelephonyControlsView.Constants.textBottomInset;
  if (one-time initialization token for minimumTextWidth != -1) {
    swift_once();
  }
  specialized max<A>(_:_:_:_:)(MEMORY[0x1E4FBC860], v66, v68, v67);
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = OUTLINED_FUNCTION_9_0();
    uint64_t v77 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v71 = 136446722;
    uint64_t v72 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v71 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v69, v70, "[%{public}s][sizing] measuredWidth: %f, measuredHeight: %f", (uint8_t *)v71, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_28_1();
  result.height = v75;
  result.width = v74;
  return result;
}

uint64_t specialized max<A>(_:_:_:_:)(uint64_t result, double a2, double a3, double a4)
{
  if (a2 <= a3) {
    a2 = a3;
  }
  if (a2 <= a4) {
    a2 = a4;
  }
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    double v5 = (double *)(result + 32);
    do
    {
      double v6 = *v5++;
      double v7 = v6;
      if (a2 <= v6) {
        a2 = v7;
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

CGSize __swiftcall SystemApertureOngoingTelephonyControlsView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(CGSize _, __C::UILayoutPriority withHorizontalFittingPriority, __C::UILayoutPriority verticalFittingPriority)
{
  objc_msgSend(v3, sel_sizeThatFits_, _.width, _.height, *(double *)&withHorizontalFittingPriority.rawValue, *(double *)&verticalFittingPriority.rawValue);
  result.height = v5;
  result.width = v4;
  return result;
}

id SystemApertureOngoingTelephonyControlsView.intrinsicContentSize.getter()
{
  return objc_msgSend(v0, sel_sizeThatFits_, 1.79769313e308, 1.79769313e308);
}

void SystemApertureOngoingTelephonyControlsView.updateLeadingView()()
{
  uint64_t v2 = v0;
  swift_getObjectType();
  uint64_t v3 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  double v6 = (void *)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = (void *)&protocol conformance descriptor for RejectedRemoteControlRequesetContext;
  if (OUTLINED_FUNCTION_6_0(v7))
  {
    uint64_t v9 = (_DWORD *)swift_slowAlloc();
    uint64_t v25 = OUTLINED_FUNCTION_9_0();
    *uint64_t v9 = 136446210;
    uint64_t v10 = _typeName(_:qualified:)();
    uint64_t v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v25);
    OUTLINED_FUNCTION_32_4(v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_12(&dword_1C2F90000, v13, v14, "[%{public}s] updateLeadingView");
    swift_arrayDestroy();
    uint64_t v8 = &protocol conformance descriptor for RejectedRemoteControlRequesetContext;
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit42SystemApertureOngoingTelephonyControlsView_leadingView), sel_removeFromSuperview);
  SystemApertureOngoingTelephonyControlsView.leadingView.setter(0);
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xE0))();
  uint64_t v15 = v1 + *(int *)(v3 + 68);
  id v17 = *(id *)v15;
  uint64_t v16 = *(void *)(v15 + 8);
  int v18 = *(unsigned __int8 *)(v15 + 16);
  outlined copy of LeadingViewType?(*(id *)v15, v16, *(unsigned char *)(v15 + 16));
  outlined destroy of ConversationControlsAction(v1, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  if (v18 == 255)
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v21 = v8[264];
      uint64_t v22 = _typeName(_:qualified:)();
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
      OUTLINED_FUNCTION_23_2(v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v19, v20, "[%{public}s] omitting leading view", v21, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    if (v18) {
      SystemApertureOngoingTelephonyControlsView.updateBrandedImageIcon(using:)((uint64_t)v17);
    }
    else {
      SystemApertureOngoingTelephonyControlsView.updateAvatarView(using:)(v17);
    }
    outlined consume of LeadingViewType?(v17, v16, v18);
  }
}

id SystemApertureOngoingTelephonyControlsView.updateAvatarView(using:)(void *a1)
{
  uint64_t v3 = v1;
  swift_getObjectType();
  uint64_t v5 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationControls);
  uint64_t v8 = (void *)Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_6_0(v9))
  {
    uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_29_7();
    uint64_t v22 = OUTLINED_FUNCTION_9_0();
    *uint64_t v10 = 136446210;
    uint64_t v11 = _typeName(_:qualified:)();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v22);
    OUTLINED_FUNCTION_23_2(v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v21;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_12(&dword_1C2F90000, v14, v15, "[%{public}s] showing avatar");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  id v16 = a1;
  SystemApertureOngoingTelephonyControlsView.leadingView.setter((uint64_t)a1);
  id v17 = objc_msgSend(v16, sel_layer);
  int v18 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xE0);
  v18();
  uint64_t v19 = *(unsigned __int8 *)(v2 + *(int *)(v5 + 64));
  outlined destroy of ConversationControlsAction(v2, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  objc_msgSend(v17, sel_setAllowsHitTesting_, v19);

  OUTLINED_FUNCTION_31_3();
  v18();
  OUTLINED_FUNCTION_36_2();
  objc_msgSend(v16, sel_setUserInteractionEnabled_, v19);
  objc_msgSend(v3, sel_addSubview_, v16);
  return objc_msgSend(v3, sel_setNeedsLayout);
}

void SystemApertureOngoingTelephonyControlsView.updateBrandedImageIcon(using:)(uint64_t a1)
{
  uint64_t v3 = v1;
  swift_getObjectType();
  uint64_t v5 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationControls);
  uint64_t v8 = (void *)Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_6_0(v9))
  {
    uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_29_7();
    uint64_t v22 = OUTLINED_FUNCTION_9_0();
    *uint64_t v10 = 136446210;
    uint64_t v11 = _typeName(_:qualified:)();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v22);
    OUTLINED_FUNCTION_32_4(v13);
    a1 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_12(&dword_1C2F90000, v14, v15, "[%{public}s] showing branded calling image");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, a1);
  id v17 = v16;
  SystemApertureOngoingTelephonyControlsView.leadingView.setter((uint64_t)v16);
  id v18 = objc_msgSend(v17, sel_layer);
  uint64_t v19 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xE0);
  v19();
  uint64_t v20 = *(unsigned __int8 *)(v2 + *(int *)(v5 + 64));
  outlined destroy of ConversationControlsAction(v2, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  objc_msgSend(v18, sel_setAllowsHitTesting_, v20);

  OUTLINED_FUNCTION_31_3();
  v19();
  OUTLINED_FUNCTION_36_2();
  objc_msgSend(v17, sel_setUserInteractionEnabled_, v20);
  objc_msgSend(v3, sel_addSubview_, v17);
  objc_msgSend(v3, sel_setNeedsLayout);
}

id SystemApertureOngoingTelephonyControlsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SystemApertureOngoingTelephonyControlsView.init(frame:)()
{
}

id SystemApertureOngoingTelephonyControlsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemApertureOngoingTelephonyControlsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.getter in conformance SystemApertureOngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.setter in conformance SystemApertureOngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t (*protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for ControlsView.recipe.getter in conformance SystemApertureOngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t protocol witness for ControlsView.recipe.setter in conformance SystemApertureOngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t (*protocol witness for ControlsView.recipe.modify in conformance SystemApertureOngoingTelephonyControlsView(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for SystemAperturePreferredContentSizeProvider.systemAperturePreferredContentSize.getter in conformance SystemApertureOngoingTelephonyControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xF8))();
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    CGSize result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

void outlined bridged method (mbgnn) of @objc NSObject.accessibilityLabel.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  objc_msgSend(a3, sel_setAccessibilityLabel_, v4);
}

uint64_t type metadata accessor for SystemApertureOngoingTelephonyControlsView()
{
  uint64_t result = type metadata singleton initialization cache for SystemApertureOngoingTelephonyControlsView;
  if (!type metadata singleton initialization cache for SystemApertureOngoingTelephonyControlsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined assign with copy of ConversationControlsRecipe(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

id outlined copy of LeadingViewType?(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of PreCallControlsContext(result);
  }
  return result;
}

void outlined consume of LeadingViewType?(id a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    outlined consume of PreCallControlsContext(a1);
  }
}

ValueMetadata *type metadata accessor for SystemApertureConstants()
{
  return &type metadata for SystemApertureConstants;
}

uint64_t ObjC metadata update function for SystemApertureOngoingTelephonyControlsView()
{
  return type metadata accessor for SystemApertureOngoingTelephonyControlsView();
}

uint64_t type metadata completion function for SystemApertureOngoingTelephonyControlsView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SystemApertureOngoingTelephonyControlsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureOngoingTelephonyControlsView);
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.__allocating_init(recipe:controlsManager:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.cnkContentAlpha.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SystemApertureOngoingTelephonyControlsView.systemAperturePreferredContentSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

ValueMetadata *type metadata accessor for SystemApertureOngoingTelephonyControlsView.Constants()
{
  return &type metadata for SystemApertureOngoingTelephonyControlsView.Constants;
}

uint64_t outlined destroy of ConversationControlsType?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationControlsType?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id ShareCardStatusHeaderView.controlsManager.getter()
{
  return *v0;
}

void ShareCardStatusHeaderView.controlsManager.setter(void *a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*ShareCardStatusHeaderView.controlsManager.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ShareCardStatusHeaderView.shouldHideDefaultStatusView.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ShareCardStatusHeaderView.shouldHideDefaultStatusView.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*ShareCardStatusHeaderView.shouldHideDefaultStatusView.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ShareCardStatusHeaderView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v2 = type metadata accessor for ShareCardStatusHeaderView(0);
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v41 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = (uint64_t *)(v7 - v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>);
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>);
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v18 = v17 - v16;
  *uint64_t v8 = static Alignment.center.getter();
  v8[1] = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, ModifiedContent<ConversationStatusView, _PaddingLayout>?>);
  closure #1 in ShareCardStatusHeaderView.body.getter(v1, (uint64_t)v8 + *(int *)(v20 + 44));
  char v21 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  outlined init with copy of FeatureEligibility?((uint64_t)v8, v13, &demangling cache variable for type metadata for ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>);
  uint64_t v30 = v13 + *(int *)(v10 + 44);
  *(unsigned char *)uint64_t v30 = v21;
  *(void *)(v30 + 8) = v23;
  *(void *)(v30 + 16) = v25;
  *(void *)(v30 + 24) = v27;
  *(void *)(v30 + 32) = v29;
  *(unsigned char *)(v30 + 40) = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>);
  uint64_t v40 = v1;
  uint64_t v31 = *(void *)((char *)*v1
                  + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_conversationDidChangePublisher);
  int v39 = type metadata accessor for ShareCardStatusHeaderView;
  outlined init with copy of ShareCardStatusHeaderView((uint64_t)v1, (uint64_t)v4, (void (*)(void))type metadata accessor for ShareCardStatusHeaderView);
  unint64_t v32 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v33 = swift_allocObject();
  outlined init with take of ShareCardStatusHeaderView((uint64_t)v4, v33 + v32, (void (*)(void))type metadata accessor for ShareCardStatusHeaderView);
  outlined init with copy of FeatureEligibility?(v13, v18, &demangling cache variable for type metadata for ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>);
  *(void *)(v18 + *(int *)(v15 + 60)) = v31;
  uint64_t v34 = (uint64_t (**)())(v18 + *(int *)(v15 + 64));
  *uint64_t v34 = partial apply for closure #2 in ShareCardStatusHeaderView.body.getter;
  v34[1] = (uint64_t (*)())v33;
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v13, &demangling cache variable for type metadata for ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>);
  outlined init with copy of ShareCardStatusHeaderView((uint64_t)v40, (uint64_t)v4, (void (*)(void))v39);
  uint64_t v35 = swift_allocObject();
  outlined init with take of ShareCardStatusHeaderView((uint64_t)v4, v35 + v32, (void (*)(void))type metadata accessor for ShareCardStatusHeaderView);
  uint64_t v36 = v42;
  outlined init with copy of FeatureEligibility?(v18, v42, &demangling cache variable for type metadata for SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>);
  id v37 = (uint64_t (**)())(v36
                       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>, _AppearanceActionModifier>)
                                + 36));
  *id v37 = partial apply for closure #2 in ShareCardStatusHeaderView.body.getter;
  v37[1] = (uint64_t (*)())v35;
  v37[2] = 0;
  v37[3] = 0;
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v18, &demangling cache variable for type metadata for SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>);
}

uint64_t type metadata accessor for ShareCardStatusHeaderView(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ShareCardStatusHeaderView);
}

uint64_t closure #1 in ShareCardStatusHeaderView.body.getter@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ConversationStatusView(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ConversationStatusView, _PaddingLayout>);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ShareCardStatusHeaderView(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  State.wrappedValue.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v16 = 1;
  }
  else
  {
    outlined init with take of ShareCardStatusHeaderView((uint64_t)v12, (uint64_t)v15, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    uint64_t v17 = *a1;
    outlined init with copy of ShareCardStatusHeaderView((uint64_t)v15, (uint64_t)v6 + *(int *)(v4 + 20), (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    *uint64_t v6 = v17;
    id v18 = v17;
    LOBYTE(v17) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    outlined init with copy of ShareCardStatusHeaderView((uint64_t)v6, (uint64_t)v9, (void (*)(void))type metadata accessor for ConversationStatusView);
    uint64_t v27 = &v9[*(int *)(v7 + 36)];
    *uint64_t v27 = (char)v17;
    *((void *)v27 + 1) = v20;
    *((void *)v27 + 2) = v22;
    *((void *)v27 + 3) = v24;
    *((void *)v27 + 4) = v26;
    v27[40] = 0;
    outlined destroy of ConversationControlsRecipe((uint64_t)v6, (void (*)(void))type metadata accessor for ConversationStatusView);
    outlined destroy of ConversationControlsRecipe((uint64_t)v15, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    outlined init with take of ModifiedContent<ConversationStatusView, _PaddingLayout>((uint64_t)v9, a2);
    uint64_t v16 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a2, v16, 1, v7);
}

uint64_t partial apply for closure #2 in ShareCardStatusHeaderView.body.getter()
{
  uint64_t v0 = type metadata accessor for ShareCardStatusHeaderView(0);
  OUTLINED_FUNCTION_1_1(v0);
  return ShareCardStatusHeaderView.updateRecipe()();
}

uint64_t ShareCardStatusHeaderView.updateRecipe()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ShareCardStatusHeaderView(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = &v18[-v10];
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v18[-v12];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)id v18 = 12;
  memset(&v18[8], 0, 32);
  char v19 = 6;
  (*(void (**)(void, unsigned char *, void))(*(void *)static ConversationControlsRecipeGenerator.shared + 96))(0, v18, *v0);
  outlined destroy of ConversationControlsType((uint64_t)v18);
  outlined init with copy of FeatureEligibility?((uint64_t)v13, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  State.wrappedValue.setter();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  State.wrappedValue.getter();
  uint64_t v14 = type metadata accessor for ConversationControlsRecipe();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v14);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  outlined init with copy of ShareCardStatusHeaderView((uint64_t)v1, (uint64_t)v4, (void (*)(void))type metadata accessor for ShareCardStatusHeaderView);
  if (EnumTagSinglePayload != 1) {
    return outlined destroy of ConversationControlsRecipe((uint64_t)v4, (void (*)(void))type metadata accessor for ShareCardStatusHeaderView);
  }
  char v16 = v4[8];
  uint64_t result = outlined destroy of ConversationControlsRecipe((uint64_t)v4, (void (*)(void))type metadata accessor for ShareCardStatusHeaderView);
  if ((v16 & 1) == 0)
  {
    memset(v18, 0, sizeof(v18));
    char v19 = 6;
    (*(void (**)(void, unsigned char *, void))(*(void *)static ConversationControlsRecipeGenerator.shared + 96))(0, v18, *v1);
    outlined destroy of ConversationControlsType((uint64_t)v18);
    outlined init with copy of FeatureEligibility?((uint64_t)v13, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    State.wrappedValue.setter();
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = (int *)(type metadata accessor for ShareCardStatusHeaderView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);

  uint64_t v3 = v0 + v2 + v1[8];
  uint64_t v4 = (int *)type metadata accessor for ConversationControlsRecipe();
  if (!__swift_getEnumTagSinglePayload(v3, 1, (uint64_t)v4))
  {
    switch(*(unsigned char *)(v3 + 40))
    {
      case 0:
        __swift_destroy_boxed_opaque_existential_1(v3);
        break;
      case 1:
      case 3:
        swift_bridgeObjectRelease();
        break;
      case 2:

        break;
      case 5:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }

    uint64_t v5 = *(void **)(v3 + 56);
    if (v5)
    {
    }
    swift_bridgeObjectRelease();
    uint64_t v6 = v3 + v4[9];
    uint64_t v7 = type metadata accessor for AttributedString();
    if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
    uint64_t v8 = (id *)(v3 + v4[10]);
    if (*v8)
    {
    }
    uint64_t v9 = v3 + v4[15];
    uint64_t v10 = *(unsigned __int8 *)(v9 + 40);
    if (v10 <= 0xFD) {
      outlined consume of ConversationControlsRecipe.Actions(*(void *)v9, *(void *)(v9 + 8), *(void *)(v9 + 16), *(void *)(v9 + 24), *(void *)(v9 + 32), v10);
    }
    uint64_t v11 = v3 + v4[17];
    if (*(unsigned __int8 *)(v11 + 16) != 255) {
      outlined consume of PreCallControlsContext(*(id *)v11);
    }
    uint64_t v12 = (id *)(v3 + v4[18]);
    if (*v12 != (id)1)
    {
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  swift_release();
  return swift_deallocObject();
}

uint64_t ShareCardStatusHeaderView.init(controlsManager:shouldHideDefaultStatusView:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v14 - v10;
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + 8) = a2;
  type metadata accessor for ShareCardStatusHeaderView(0);
  uint64_t v12 = type metadata accessor for ConversationControlsRecipe();
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v12);
  outlined init with copy of FeatureEligibility?((uint64_t)v11, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  State.init(wrappedValue:)();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
}

uint64_t associated type witness table accessor for View.Body : View in ShareCardStatusHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ShareCardStatusHeaderView()
{
  return MEMORY[0x1F40FB5D0]();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ShareCardStatusHeaderView()
{
  return MEMORY[0x1F40FB5D8]();
}

char *initializeBufferWithCopyOfBuffer for ShareCardStatusHeaderView(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    uint64_t v5 = a1;
    a1[8] = *((unsigned char *)a2 + 8);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = (char **)((char *)a2 + v6);
    uint64_t v9 = (int *)type metadata accessor for ConversationControlsRecipe();
    uint64_t v10 = v4;
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      switch(*((unsigned char *)v8 + 40))
      {
        case 0:
          long long v12 = *(_OWORD *)(v8 + 3);
          *(_OWORD *)(v7 + 24) = v12;
          (**(void (***)(char *, void *))(v12 - 8))(v7, v8);
          v7[40] = 0;
          break;
        case 1:
          uint64_t v13 = v8[1];
          *(void *)uint64_t v7 = *v8;
          *((void *)v7 + 1) = v13;
          char v14 = 1;
          goto LABEL_10;
        case 2:
          uint64_t v15 = (void *)*v8;
          *(void *)uint64_t v7 = *v8;
          v7[40] = 2;
          id v16 = v15;
          break;
        case 3:
          uint64_t v17 = v8[1];
          *(void *)uint64_t v7 = *v8;
          *((void *)v7 + 1) = v17;
          char v14 = 3;
LABEL_10:
          v7[40] = v14;
          swift_bridgeObjectRetain();
          break;
        case 5:
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
          v7[40] = 5;
          swift_unknownObjectRetain();
          break;
        default:
          long long v18 = *((_OWORD *)v8 + 1);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
          *((_OWORD *)v7 + 1) = v18;
          *(_OWORD *)(v7 + 25) = *(_OWORD *)((char *)v8 + 25);
          break;
      }
      char v19 = (void *)v8[7];
      uint64_t v20 = (void *)v8[6];
      *((void *)v7 + 6) = v20;
      id v21 = v20;
      if (v19)
      {
        uint64_t v23 = (void *)v8[8];
        uint64_t v22 = v8[9];
        *((void *)v7 + 7) = v19;
        *((void *)v7 + 8) = v23;
        *((void *)v7 + 9) = v22;
        id v24 = v19;
        id v25 = v23;
      }
      else
      {
        *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 7);
        *((void *)v7 + 9) = v8[9];
      }
      uint64_t v27 = (void *)v8[10];
      uint64_t v26 = v8[11];
      *((void *)v7 + 10) = v27;
      *((void *)v7 + 11) = v26;
      uint64_t v28 = v9[9];
      uint64_t v29 = &v7[v28];
      uint64_t v30 = (char *)v8 + v28;
      uint64_t v31 = type metadata accessor for AttributedString();
      id v32 = v27;
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
        __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v31);
      }
      uint64_t v34 = v9[10];
      uint64_t v35 = &v7[v34];
      uint64_t v36 = (char *)v8 + v34;
      id v37 = *(void **)v36;
      if (*(void *)v36)
      {
        int v39 = (void *)*((void *)v36 + 1);
        uint64_t v38 = *((void *)v36 + 2);
        *(void *)uint64_t v35 = v37;
        *((void *)v35 + 1) = v39;
        *((void *)v35 + 2) = v38;
        id v40 = v37;
        id v41 = v39;
      }
      else
      {
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        *((void *)v35 + 2) = *((void *)v36 + 2);
      }
      v7[v9[11]] = *((unsigned char *)v8 + v9[11]);
      v7[v9[12]] = *((unsigned char *)v8 + v9[12]);
      *(void *)&v7[v9[13]] = *(void *)((char *)v8 + v9[13]);
      *(void *)&v7[v9[14]] = *(void *)((char *)v8 + v9[14]);
      uint64_t v42 = v9[15];
      double v43 = &v7[v42];
      double v44 = (char *)v8 + v42;
      uint64_t v45 = v44[40];
      if (v45 <= 0xFD)
      {
        uint64_t v47 = *((void *)v44 + 1);
        uint64_t v71 = *(void *)v44;
        uint64_t v48 = *((void *)v44 + 2);
        uint64_t v49 = *((void *)v44 + 3);
        uint64_t v50 = *((void *)v44 + 4);
        outlined copy of ConversationControlsRecipe.Actions(*(void *)v44, v47, v48, v49, v50, v45);
        *(void *)double v43 = v71;
        *((void *)v43 + 1) = v47;
        *((void *)v43 + 2) = v48;
        *((void *)v43 + 3) = v49;
        *((void *)v43 + 4) = v50;
        v43[40] = v45;
      }
      else
      {
        long long v46 = *((_OWORD *)v44 + 1);
        *(_OWORD *)double v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v46;
        *(_OWORD *)(v43 + 25) = *(_OWORD *)(v44 + 25);
      }
      v7[v9[16]] = *((unsigned char *)v8 + v9[16]);
      uint64_t v51 = v9[17];
      double v52 = &v7[v51];
      double v53 = (char *)v8 + v51;
      int v54 = v53[16];
      if (v54 == 255)
      {
        *(_OWORD *)double v52 = *(_OWORD *)v53;
        v52[16] = v53[16];
      }
      else
      {
        char v55 = v54 & 1;
        uint64_t v56 = *(void *)v53;
        uint64_t v57 = *((void *)v53 + 1);
        outlined copy of PreCallControlsContext(*(id *)v53);
        *(void *)double v52 = v56;
        *((void *)v52 + 1) = v57;
        v52[16] = v55;
      }
      uint64_t v58 = v9[18];
      double v59 = &v7[v58];
      double v60 = (char *)v8 + v58;
      double v61 = *(void **)((char *)v8 + v58);
      if (v61 == (void *)1)
      {
        memcpy(v59, v60, 0x49uLL);
      }
      else
      {
        uint64_t v62 = *((void *)v60 + 1);
        *(void *)double v59 = v61;
        *((void *)v59 + 1) = v62;
        long long v69 = *((_OWORD *)v60 + 1);
        long long v70 = *((_OWORD *)v60 + 2);
        *((_OWORD *)v59 + 1) = v69;
        *((_OWORD *)v59 + 2) = v70;
        long long v72 = *((_OWORD *)v60 + 3);
        *((_OWORD *)v59 + 3) = v72;
        *((void *)v59 + 8) = *((void *)v60 + 8);
        v59[72] = v60[72];
        id v63 = v61;
        id v64 = (id)v69;
        id v65 = (id)v70;
        id v66 = (id)v72;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
    }
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
    *(void *)&v7[*(int *)(v67 + 28)] = *(void *)((char *)v8 + *(int *)(v67 + 28));
  }
  swift_retain();
  return v5;
}

uint64_t destroy for ShareCardStatusHeaderView(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 24);
  uint64_t v5 = (int *)type metadata accessor for ConversationControlsRecipe();
  if (!__swift_getEnumTagSinglePayload(v4, 1, (uint64_t)v5))
  {
    switch(*(unsigned char *)(v4 + 40))
    {
      case 0:
        __swift_destroy_boxed_opaque_existential_1(v4);
        break;
      case 1:
      case 3:
        swift_bridgeObjectRelease();
        break;
      case 2:

        break;
      case 5:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }

    uint64_t v6 = *(void **)(v4 + 56);
    if (v6)
    {
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v4 + v5[9];
    uint64_t v8 = type metadata accessor for AttributedString();
    if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    }
    uint64_t v9 = (id *)(v4 + v5[10]);
    if (*v9)
    {
    }
    uint64_t v10 = v4 + v5[15];
    uint64_t v11 = *(unsigned __int8 *)(v10 + 40);
    if (v11 <= 0xFD) {
      outlined consume of ConversationControlsRecipe.Actions(*(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), *(void *)(v10 + 24), *(void *)(v10 + 32), v11);
    }
    uint64_t v12 = v4 + v5[17];
    if (*(unsigned __int8 *)(v12 + 16) != 255) {
      outlined consume of PreCallControlsContext(*(id *)v12);
    }
    uint64_t v13 = (id *)(v4 + v5[18]);
    if (*v13 != (id)1)
    {
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  return swift_release();
}

uint64_t initializeWithCopy for ShareCardStatusHeaderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for ConversationControlsRecipe();
  id v9 = v4;
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    switch(*((unsigned char *)v7 + 40))
    {
      case 0:
        long long v11 = *(_OWORD *)(v7 + 3);
        *(_OWORD *)(v6 + 3) = v11;
        (**(void (***)(void *, void *))(v11 - 8))(v6, v7);
        *((unsigned char *)v6 + 40) = 0;
        break;
      case 1:
        uint64_t v12 = v7[1];
        *uint64_t v6 = *v7;
        v6[1] = v12;
        char v13 = 1;
        goto LABEL_8;
      case 2:
        char v14 = (void *)*v7;
        *uint64_t v6 = *v7;
        *((unsigned char *)v6 + 40) = 2;
        id v15 = v14;
        break;
      case 3:
        uint64_t v16 = v7[1];
        *uint64_t v6 = *v7;
        v6[1] = v16;
        char v13 = 3;
LABEL_8:
        *((unsigned char *)v6 + 40) = v13;
        swift_bridgeObjectRetain();
        break;
      case 5:
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
        *((unsigned char *)v6 + 40) = 5;
        swift_unknownObjectRetain();
        break;
      default:
        long long v17 = *((_OWORD *)v7 + 1);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
        *((_OWORD *)v6 + 1) = v17;
        *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
        break;
    }
    long long v18 = (void *)v7[7];
    char v19 = (void *)v7[6];
    v6[6] = v19;
    id v20 = v19;
    if (v18)
    {
      uint64_t v22 = (void *)v7[8];
      uint64_t v21 = v7[9];
      v6[7] = v18;
      v6[8] = v22;
      v6[9] = v21;
      id v23 = v18;
      id v24 = v22;
    }
    else
    {
      *(_OWORD *)(v6 + 7) = *(_OWORD *)(v7 + 7);
      v6[9] = v7[9];
    }
    id v25 = (void *)v7[10];
    uint64_t v26 = v7[11];
    v6[10] = v25;
    v6[11] = v26;
    uint64_t v27 = v8[9];
    uint64_t v28 = (char *)v6 + v27;
    uint64_t v29 = (char *)v7 + v27;
    uint64_t v30 = type metadata accessor for AttributedString();
    id v31 = v25;
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
    }
    uint64_t v33 = v8[10];
    uint64_t v34 = (void *)((char *)v6 + v33);
    uint64_t v35 = (char *)v7 + v33;
    uint64_t v36 = *(void **)v35;
    if (*(void *)v35)
    {
      uint64_t v38 = (void *)*((void *)v35 + 1);
      uint64_t v37 = *((void *)v35 + 2);
      *uint64_t v34 = v36;
      v34[1] = v38;
      v34[2] = v37;
      id v39 = v36;
      id v40 = v38;
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      v34[2] = *((void *)v35 + 2);
    }
    *((unsigned char *)v6 + v8[11]) = *((unsigned char *)v7 + v8[11]);
    *((unsigned char *)v6 + v8[12]) = *((unsigned char *)v7 + v8[12]);
    *(void *)((char *)v6 + v8[13]) = *(void *)((char *)v7 + v8[13]);
    *(void *)((char *)v6 + v8[14]) = *(void *)((char *)v7 + v8[14]);
    uint64_t v41 = v8[15];
    uint64_t v42 = (char *)v6 + v41;
    double v43 = (char *)v7 + v41;
    uint64_t v44 = v43[40];
    if (v44 <= 0xFD)
    {
      uint64_t v46 = *(void *)v43;
      uint64_t v47 = *((void *)v43 + 1);
      uint64_t v71 = v3;
      uint64_t v48 = *((void *)v43 + 2);
      uint64_t v49 = *((void *)v43 + 3);
      uint64_t v50 = *((void *)v43 + 4);
      outlined copy of ConversationControlsRecipe.Actions(*(void *)v43, v47, v48, v49, v50, v44);
      *(void *)uint64_t v42 = v46;
      *((void *)v42 + 1) = v47;
      *((void *)v42 + 2) = v48;
      *((void *)v42 + 3) = v49;
      uint64_t v3 = v71;
      *((void *)v42 + 4) = v50;
      v42[40] = v44;
    }
    else
    {
      long long v45 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v45;
      *(_OWORD *)(v42 + 25) = *(_OWORD *)(v43 + 25);
    }
    *((unsigned char *)v6 + v8[16]) = *((unsigned char *)v7 + v8[16]);
    uint64_t v51 = v8[17];
    double v52 = (char *)v6 + v51;
    double v53 = (char *)v7 + v51;
    int v54 = v53[16];
    if (v54 == 255)
    {
      *(_OWORD *)double v52 = *(_OWORD *)v53;
      v52[16] = v53[16];
    }
    else
    {
      char v55 = v54 & 1;
      uint64_t v56 = *(void *)v53;
      uint64_t v57 = *((void *)v53 + 1);
      outlined copy of PreCallControlsContext(*(id *)v53);
      *(void *)double v52 = v56;
      *((void *)v52 + 1) = v57;
      v52[16] = v55;
    }
    uint64_t v58 = v8[18];
    double v59 = (void *)((char *)v6 + v58);
    double v60 = (char *)v7 + v58;
    double v61 = *(void **)((char *)v7 + v58);
    if (v61 == (void *)1)
    {
      memcpy(v59, v60, 0x49uLL);
    }
    else
    {
      uint64_t v62 = *((void *)v60 + 1);
      *double v59 = v61;
      v59[1] = v62;
      long long v69 = *((_OWORD *)v60 + 1);
      long long v70 = *((_OWORD *)v60 + 2);
      *((_OWORD *)v59 + 1) = v69;
      *((_OWORD *)v59 + 2) = v70;
      long long v72 = *((_OWORD *)v60 + 3);
      *((_OWORD *)v59 + 3) = v72;
      v59[8] = *((void *)v60 + 8);
      *((unsigned char *)v59 + 72) = v60[72];
      id v63 = v61;
      id v64 = (id)v69;
      id v65 = (id)v70;
      id v66 = (id)v72;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
  }
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  *(void *)((char *)v6 + *(int *)(v67 + 28)) = *(void *)((char *)v7 + *(int *)(v67 + 28));
  swift_retain();
  return v3;
}

void **assignWithCopy for ShareCardStatusHeaderView(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *a1;
  *a1 = *(void **)a2;
  id v8 = v6;

  *((unsigned char *)v5 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (uint64_t)v5 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for ConversationControlsRecipe();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v10, 1, (uint64_t)v12);
  int v14 = __swift_getEnumTagSinglePayload(v11, 1, (uint64_t)v12);
  if (!EnumTagSinglePayload)
  {
    if (v14)
    {
      outlined destroy of ConversationControlsRecipe(v10, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      goto LABEL_7;
    }
    if (v5 != (void **)a2)
    {
      outlined destroy of ConversationControlsType(v10);
      switch(*(unsigned char *)(v11 + 40))
      {
        case 0:
          uint64_t v19 = *(void *)(v11 + 24);
          *(void *)(v10 + 24) = v19;
          *(void *)(v10 + 32) = *(void *)(v11 + 32);
          (**(void (***)(uint64_t, uint64_t))(v19 - 8))(v10, v11);
          *(unsigned char *)(v10 + 40) = 0;
          break;
        case 1:
          *(void *)uint64_t v10 = *(void *)v11;
          *(void *)(v10 + 8) = *(void *)(v11 + 8);
          char v77 = 1;
          goto LABEL_41;
        case 2:
          double v78 = *(void **)v11;
          *(void *)uint64_t v10 = *(void *)v11;
          *(unsigned char *)(v10 + 40) = 2;
          id v79 = v78;
          break;
        case 3:
          *(void *)uint64_t v10 = *(void *)v11;
          *(void *)(v10 + 8) = *(void *)(v11 + 8);
          char v77 = 3;
LABEL_41:
          *(unsigned char *)(v10 + 40) = v77;
          swift_bridgeObjectRetain();
          break;
        case 5:
          *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
          *(unsigned char *)(v10 + 40) = 5;
          swift_unknownObjectRetain();
          break;
        default:
          long long v80 = *(_OWORD *)v11;
          long long v81 = *(_OWORD *)(v11 + 16);
          *(_OWORD *)(v10 + 25) = *(_OWORD *)(v11 + 25);
          *(_OWORD *)uint64_t v10 = v80;
          *(_OWORD *)(v10 + 16) = v81;
          break;
      }
    }
    uint64_t v82 = *(void **)(v10 + 48);
    double v83 = *(void **)(v11 + 48);
    *(void *)(v10 + 48) = v83;
    id v84 = v83;

    v85 = (_OWORD *)(v10 + 56);
    os_log_type_t v86 = *(void **)(v10 + 56);
    uint64_t v88 = (_OWORD *)(v11 + 56);
    uint64_t v87 = *(void **)(v11 + 56);
    if (v86)
    {
      if (v87)
      {
        *(void *)(v10 + 56) = v87;
        id v89 = v87;

        unint64_t v90 = *(void **)(v10 + 64);
        uint64_t v91 = *(void **)(v11 + 64);
        *(void *)(v10 + 64) = v91;
        id v92 = v91;

        *(void *)(v10 + 72) = *(void *)(v11 + 72);
      }
      else
      {
        outlined destroy of ConversationControlsRecipe.View(v10 + 56);
        uint64_t v96 = *(void *)(v11 + 72);
        _OWORD *v85 = *v88;
        *(void *)(v10 + 72) = v96;
      }
    }
    else if (v87)
    {
      *(void *)(v10 + 56) = v87;
      unint64_t v93 = *(void **)(v11 + 64);
      *(void *)(v10 + 64) = v93;
      *(void *)(v10 + 72) = *(void *)(v11 + 72);
      id v94 = v87;
      id v95 = v93;
    }
    else
    {
      long long v97 = *v88;
      *(void *)(v10 + 72) = *(void *)(v11 + 72);
      _OWORD *v85 = v97;
    }
    SEL v98 = *(void **)(v11 + 80);
    id v99 = *(void **)(v10 + 80);
    *(void *)(v10 + 80) = v98;
    id v100 = v98;

    *(void *)(v10 + 88) = *(void *)(v11 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v101 = v12[9];
    double v102 = (void *)(v10 + v101);
    double v103 = (const void *)(v11 + v101);
    uint64_t v104 = type metadata accessor for AttributedString();
    int v105 = __swift_getEnumTagSinglePayload((uint64_t)v102, 1, v104);
    int v106 = __swift_getEnumTagSinglePayload((uint64_t)v103, 1, v104);
    if (v105)
    {
      if (!v106)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
        __swift_storeEnumTagSinglePayload((uint64_t)v102, 0, 1, v104);
LABEL_57:
        uint64_t v109 = v12[10];
        double v110 = (void *)(v10 + v109);
        v111 = (long long *)(v11 + v109);
        os_log_type_t v112 = *(void **)(v10 + v109);
        uint64_t v113 = *(void **)(v11 + v109);
        if (v112)
        {
          if (v113)
          {
            *double v110 = v113;
            id v114 = v113;

            uint64_t v115 = (void *)v110[1];
            unint64_t v116 = (void *)*((void *)v111 + 1);
            v110[1] = v116;
            id v117 = v116;

            uint64_t v118 = *((void *)v111 + 2);
          }
          else
          {
            outlined destroy of ConversationControlsRecipe.View((uint64_t)v110);
            uint64_t v118 = *((void *)v111 + 2);
            *(_OWORD *)double v110 = *v111;
          }
          v110[2] = v118;
        }
        else if (v113)
        {
          *double v110 = v113;
          v119 = (void *)*((void *)v111 + 1);
          v110[1] = v119;
          v110[2] = *((void *)v111 + 2);
          id v120 = v113;
          id v121 = v119;
        }
        else
        {
          long long v184 = *v111;
          v110[2] = *((void *)v111 + 2);
          *(_OWORD *)double v110 = v184;
        }
        *(unsigned char *)(v10 + v12[11]) = *(unsigned char *)(v11 + v12[11]);
        *(unsigned char *)(v10 + v12[12]) = *(unsigned char *)(v11 + v12[12]);
        *(void *)(v10 + v12[13]) = *(void *)(v11 + v12[13]);
        *(void *)(v10 + v12[14]) = *(void *)(v11 + v12[14]);
        uint64_t v122 = v12[15];
        uint64_t v123 = v10 + v122;
        id v124 = (uint64_t *)(v11 + v122);
        uint64_t v125 = *(unsigned __int8 *)(v11 + v122 + 40);
        if (*(unsigned __int8 *)(v10 + v122 + 40) <= 0xFDu)
        {
          if (v125 <= 0xFD)
          {
            uint64_t v135 = v124[1];
            v192 = v5;
            uint64_t v136 = v124[2];
            uint64_t v137 = v124[3];
            uint64_t v138 = v124[4];
            uint64_t v139 = *v124;
            outlined copy of ConversationControlsRecipe.Actions(v139, v135, v136, v137, v138, v125);
            uint64_t v140 = *(void *)v123;
            uint64_t v141 = *(void *)(v123 + 8);
            uint64_t v142 = *(void *)(v123 + 16);
            uint64_t v143 = *(void *)(v123 + 24);
            uint64_t v144 = *(void *)(v123 + 32);
            *(void *)uint64_t v123 = v139;
            *(void *)(v123 + 8) = v135;
            *(void *)(v123 + 16) = v136;
            *(void *)(v123 + 24) = v137;
            uint64_t v5 = v192;
            *(void *)(v123 + 32) = v138;
            uint64_t v145 = *(unsigned __int8 *)(v123 + 40);
            *(unsigned char *)(v123 + 40) = v125;
            outlined consume of ConversationControlsRecipe.Actions(v140, v141, v142, v143, v144, v145);
          }
          else
          {
            outlined destroy of ConversationControlsRecipe.Actions(v123);
            long long v128 = *(_OWORD *)((char *)v124 + 25);
            long long v129 = *((_OWORD *)v124 + 1);
            *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
            *(_OWORD *)(v123 + 16) = v129;
            *(_OWORD *)(v123 + 25) = v128;
          }
        }
        else if (v125 <= 0xFD)
        {
          uint64_t v130 = v124[1];
          v191 = v5;
          uint64_t v131 = v124[2];
          uint64_t v132 = v124[3];
          uint64_t v133 = v124[4];
          uint64_t v134 = *v124;
          outlined copy of ConversationControlsRecipe.Actions(v134, v130, v131, v132, v133, v125);
          *(void *)uint64_t v123 = v134;
          *(void *)(v123 + 8) = v130;
          *(void *)(v123 + 16) = v131;
          *(void *)(v123 + 24) = v132;
          uint64_t v5 = v191;
          *(void *)(v123 + 32) = v133;
          *(unsigned char *)(v123 + 40) = v125;
        }
        else
        {
          long long v126 = *(_OWORD *)v124;
          long long v127 = *((_OWORD *)v124 + 1);
          *(_OWORD *)(v123 + 25) = *(_OWORD *)((char *)v124 + 25);
          *(_OWORD *)uint64_t v123 = v126;
          *(_OWORD *)(v123 + 16) = v127;
        }
        *(unsigned char *)(v10 + v12[16]) = *(unsigned char *)(v11 + v12[16]);
        uint64_t v146 = v12[17];
        uint64_t v147 = v10 + v146;
        double v148 = (long long *)(v11 + v146);
        int v149 = *(unsigned __int8 *)(v10 + v146 + 16);
        int v150 = *(unsigned __int8 *)(v11 + v146 + 16);
        if (v149 == 255)
        {
          if (v150 == 255)
          {
            long long v152 = *v148;
            *(unsigned char *)(v147 + 16) = *((unsigned char *)v148 + 16);
            *(_OWORD *)uint64_t v147 = v152;
          }
          else
          {
            char v157 = v150 & 1;
            uint64_t v158 = *(void *)v148;
            uint64_t v159 = *((void *)v148 + 1);
            outlined copy of PreCallControlsContext(*(id *)v148);
            *(void *)uint64_t v147 = v158;
            *(void *)(v147 + 8) = v159;
            *(unsigned char *)(v147 + 16) = v157;
          }
        }
        else if (v150 == 255)
        {
          outlined destroy of LeadingViewType(v147);
          char v151 = *((unsigned char *)v148 + 16);
          *(_OWORD *)uint64_t v147 = *v148;
          *(unsigned char *)(v147 + 16) = v151;
        }
        else
        {
          char v153 = v150 & 1;
          id v154 = *(id *)v148;
          uint64_t v155 = *((void *)v148 + 1);
          outlined copy of PreCallControlsContext(*(id *)v148);
          CGRect v156 = *(void **)v147;
          *(void *)uint64_t v147 = v154;
          *(void *)(v147 + 8) = v155;
          *(unsigned char *)(v147 + 16) = v153;
          outlined consume of PreCallControlsContext(v156);
        }
        uint64_t v160 = v12[18];
        uint64_t v161 = v10 + v160;
        uint64_t v162 = v11 + v160;
        CGRect v163 = *(void **)(v10 + v160);
        CGRect v164 = *(void **)(v11 + v160);
        if (v163 == (void *)1)
        {
          if (v164 != (void *)1)
          {
            uint64_t v165 = *(void *)(v162 + 8);
            *(void *)uint64_t v161 = v164;
            *(void *)(v161 + 8) = v165;
            long long v186 = *(_OWORD *)(v162 + 16);
            *(_OWORD *)(v161 + 16) = v186;
            long long v188 = *(_OWORD *)(v162 + 32);
            *(_OWORD *)(v161 + 32) = v188;
            long long v193 = *(_OWORD *)(v162 + 48);
            *(_OWORD *)(v161 + 48) = v193;
            *(void *)(v161 + 64) = *(void *)(v162 + 64);
            *(unsigned char *)(v161 + 72) = *(unsigned char *)(v162 + 72);
            id v166 = v164;
            id v167 = (id)v186;
            id v168 = (id)v188;
            id v169 = (id)v193;
            goto LABEL_37;
          }
        }
        else
        {
          if (v164 != (void *)1)
          {
            uint64_t v170 = *(void *)(v162 + 8);
            *(void *)uint64_t v161 = v164;
            id v171 = v164;

            *(void *)(v161 + 8) = v170;
            v172 = *(void **)(v162 + 16);
            uint64_t v173 = *(void *)(v162 + 24);
            v174 = *(void **)(v161 + 16);
            *(void *)(v161 + 16) = v172;
            id v175 = v172;

            *(void *)(v161 + 24) = v173;
            v176 = *(void **)(v162 + 32);
            uint64_t v177 = *(void *)(v162 + 40);
            v178 = *(void **)(v161 + 32);
            *(void *)(v161 + 32) = v176;
            id v179 = v176;

            *(void *)(v161 + 40) = v177;
            v180 = *(void **)(v162 + 48);
            uint64_t v181 = *(void *)(v162 + 56);
            v182 = *(void **)(v161 + 48);
            *(void *)(v161 + 48) = v180;
            id v183 = v180;

            *(void *)(v161 + 56) = v181;
            *(void *)(v161 + 64) = *(void *)(v162 + 64);
            *(unsigned char *)(v161 + 72) = *(unsigned char *)(v162 + 72);
            goto LABEL_37;
          }
          outlined destroy of SystemApertureElement(v161);
        }
        long long v17 = (void *)v161;
        long long v18 = (const void *)v162;
        size_t v16 = 73;
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v107 = *(void *)(v104 - 8);
      if (!v106)
      {
        (*(void (**)(void *, const void *, uint64_t))(v107 + 24))(v102, v103, v104);
        goto LABEL_57;
      }
      (*(void (**)(void *, uint64_t))(v107 + 8))(v102, v104);
    }
    uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v102, v103, *(void *)(*(void *)(v108 - 8) + 64));
    goto LABEL_57;
  }
  if (v14)
  {
LABEL_7:
    size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?)
                                - 8)
                    + 64);
    long long v17 = (void *)v10;
    long long v18 = (const void *)v11;
LABEL_8:
    memcpy(v17, v18, v16);
    goto LABEL_37;
  }
  switch(*(unsigned char *)(v11 + 40))
  {
    case 0:
      uint64_t v15 = *(void *)(v11 + 24);
      *(void *)(v10 + 24) = v15;
      *(void *)(v10 + 32) = *(void *)(v11 + 32);
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v10, v11);
      *(unsigned char *)(v10 + 40) = 0;
      break;
    case 1:
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *(void *)(v11 + 8);
      char v20 = 1;
      goto LABEL_15;
    case 2:
      uint64_t v21 = *(void **)v11;
      *(void *)uint64_t v10 = *(void *)v11;
      *(unsigned char *)(v10 + 40) = 2;
      id v22 = v21;
      break;
    case 3:
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *(void *)(v11 + 8);
      char v20 = 3;
LABEL_15:
      *(unsigned char *)(v10 + 40) = v20;
      swift_bridgeObjectRetain();
      break;
    case 5:
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *(unsigned char *)(v10 + 40) = 5;
      swift_unknownObjectRetain();
      break;
    default:
      long long v23 = *(_OWORD *)v11;
      long long v24 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 25) = *(_OWORD *)(v11 + 25);
      *(_OWORD *)uint64_t v10 = v23;
      *(_OWORD *)(v10 + 16) = v24;
      break;
  }
  id v25 = *(void **)(v11 + 48);
  *(void *)(v10 + 48) = v25;
  uint64_t v26 = *(void **)(v11 + 56);
  id v27 = v25;
  if (v26)
  {
    *(void *)(v10 + 56) = v26;
    uint64_t v28 = *(void **)(v11 + 64);
    *(void *)(v10 + 64) = v28;
    *(void *)(v10 + 72) = *(void *)(v11 + 72);
    id v29 = v26;
    id v30 = v28;
  }
  else
  {
    long long v31 = *(_OWORD *)(v11 + 56);
    *(void *)(v10 + 72) = *(void *)(v11 + 72);
    *(_OWORD *)(v10 + 56) = v31;
  }
  uint64_t v32 = *(void **)(v11 + 80);
  *(void *)(v10 + 80) = v32;
  *(void *)(v10 + 88) = *(void *)(v11 + 88);
  uint64_t v33 = v12[9];
  uint64_t v34 = (void *)(v10 + v33);
  uint64_t v35 = (const void *)(v11 + v33);
  uint64_t v36 = type metadata accessor for AttributedString();
  id v37 = v32;
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v36);
  }
  uint64_t v39 = v12[10];
  id v40 = (void *)(v10 + v39);
  uint64_t v41 = (long long *)(v11 + v39);
  uint64_t v42 = *(void **)v41;
  if (*(void *)v41)
  {
    *id v40 = v42;
    double v43 = (void *)*((void *)v41 + 1);
    v40[1] = v43;
    v40[2] = *((void *)v41 + 2);
    id v44 = v42;
    id v45 = v43;
  }
  else
  {
    long long v46 = *v41;
    v40[2] = *((void *)v41 + 2);
    *(_OWORD *)id v40 = v46;
  }
  *(unsigned char *)(v10 + v12[11]) = *(unsigned char *)(v11 + v12[11]);
  *(unsigned char *)(v10 + v12[12]) = *(unsigned char *)(v11 + v12[12]);
  *(void *)(v10 + v12[13]) = *(void *)(v11 + v12[13]);
  *(void *)(v10 + v12[14]) = *(void *)(v11 + v12[14]);
  uint64_t v47 = v12[15];
  uint64_t v48 = v10 + v47;
  uint64_t v49 = (uint64_t *)(v11 + v47);
  uint64_t v50 = *((unsigned __int8 *)v49 + 40);
  if (v50 <= 0xFD)
  {
    uint64_t v53 = *v49;
    uint64_t v54 = v49[1];
    v189 = v5;
    uint64_t v55 = v49[2];
    uint64_t v56 = v49[3];
    uint64_t v57 = v49[4];
    outlined copy of ConversationControlsRecipe.Actions(*v49, v54, v55, v56, v57, v50);
    *(void *)uint64_t v48 = v53;
    *(void *)(v48 + 8) = v54;
    *(void *)(v48 + 16) = v55;
    *(void *)(v48 + 24) = v56;
    uint64_t v5 = v189;
    *(void *)(v48 + 32) = v57;
    *(unsigned char *)(v48 + 40) = v50;
  }
  else
  {
    long long v51 = *(_OWORD *)v49;
    long long v52 = *((_OWORD *)v49 + 1);
    *(_OWORD *)(v48 + 25) = *(_OWORD *)((char *)v49 + 25);
    *(_OWORD *)uint64_t v48 = v51;
    *(_OWORD *)(v48 + 16) = v52;
  }
  *(unsigned char *)(v10 + v12[16]) = *(unsigned char *)(v11 + v12[16]);
  uint64_t v58 = v12[17];
  uint64_t v59 = v10 + v58;
  double v60 = (long long *)(v11 + v58);
  int v61 = *((unsigned __int8 *)v60 + 16);
  if (v61 == 255)
  {
    long long v62 = *v60;
    *(unsigned char *)(v59 + 16) = *((unsigned char *)v60 + 16);
    *(_OWORD *)uint64_t v59 = v62;
  }
  else
  {
    char v63 = v61 & 1;
    uint64_t v64 = *(void *)v60;
    uint64_t v65 = *((void *)v60 + 1);
    outlined copy of PreCallControlsContext(*(id *)v60);
    *(void *)uint64_t v59 = v64;
    *(void *)(v59 + 8) = v65;
    *(unsigned char *)(v59 + 16) = v63;
  }
  uint64_t v66 = v12[18];
  uint64_t v67 = (void *)(v10 + v66);
  uint64_t v68 = v11 + v66;
  long long v69 = *(void **)(v11 + v66);
  if (v69 == (void *)1)
  {
    memcpy(v67, (const void *)v68, 0x49uLL);
  }
  else
  {
    uint64_t v70 = *(void *)(v68 + 8);
    void *v67 = v69;
    v67[1] = v70;
    long long v185 = *(_OWORD *)(v68 + 16);
    *((_OWORD *)v67 + 1) = v185;
    long long v187 = *(_OWORD *)(v68 + 32);
    *((_OWORD *)v67 + 2) = v187;
    long long v190 = *(_OWORD *)(v68 + 48);
    *((_OWORD *)v67 + 3) = v190;
    v67[8] = *(void *)(v68 + 64);
    *((unsigned char *)v67 + 72) = *(unsigned char *)(v68 + 72);
    id v71 = v69;
    id v72 = (id)v185;
    id v73 = (id)v187;
    id v74 = (id)v190;
  }
  __swift_storeEnumTagSinglePayload(v10, 0, 1, (uint64_t)v12);
LABEL_37:
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  *(void *)(v10 + *(int *)(v75 + 28)) = *(void *)(v11 + *(int *)(v75 + 28));
  swift_retain();
  swift_release();
  return v5;
}

uint64_t outlined destroy of ConversationControlsRecipe.View(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ConversationControlsRecipe.Actions(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of LeadingViewType(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of SystemApertureElement(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for ShareCardStatusHeaderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (_OWORD *)(a1 + v4);
  uint64_t v6 = (_OWORD *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for ConversationControlsRecipe();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    long long v9 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v9;
    *(_OWORD *)((char *)v5 + 25) = *(_OWORD *)((char *)v6 + 25);
    *((void *)v5 + 6) = *((void *)v6 + 6);
    *(_OWORD *)((char *)v5 + 56) = *(_OWORD *)((char *)v6 + 56);
    *(_OWORD *)((char *)v5 + 72) = *(_OWORD *)((char *)v6 + 72);
    *((void *)v5 + 11) = *((void *)v6 + 11);
    uint64_t v10 = v7[9];
    uint64_t v11 = (char *)v5 + v10;
    uint64_t v12 = (char *)v6 + v10;
    uint64_t v13 = type metadata accessor for AttributedString();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    uint64_t v15 = v7[10];
    size_t v16 = (char *)v5 + v15;
    long long v17 = (char *)v6 + v15;
    *(_OWORD *)size_t v16 = *(_OWORD *)v17;
    *((void *)v16 + 2) = *((void *)v17 + 2);
    *((unsigned char *)v5 + v7[11]) = *((unsigned char *)v6 + v7[11]);
    *((unsigned char *)v5 + v7[12]) = *((unsigned char *)v6 + v7[12]);
    *(void *)((char *)v5 + v7[13]) = *(void *)((char *)v6 + v7[13]);
    *(void *)((char *)v5 + v7[14]) = *(void *)((char *)v6 + v7[14]);
    uint64_t v18 = v7[15];
    uint64_t v19 = (_OWORD *)((char *)v5 + v18);
    char v20 = (_OWORD *)((char *)v6 + v18);
    long long v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    *(_OWORD *)((char *)v19 + 25) = *(_OWORD *)((char *)v20 + 25);
    *((unsigned char *)v5 + v7[16]) = *((unsigned char *)v6 + v7[16]);
    uint64_t v22 = v7[17];
    long long v23 = (char *)v5 + v22;
    long long v24 = (char *)v6 + v22;
    v23[16] = v24[16];
    *(_OWORD *)long long v23 = *(_OWORD *)v24;
    memcpy((char *)v5 + v7[18], (char *)v6 + v7[18], 0x49uLL);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  *(void *)((char *)v5 + *(int *)(v25 + 28)) = *(void *)((char *)v6 + *(int *)(v25 + 28));
  return a1;
}

uint64_t assignWithTake for ShareCardStatusHeaderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for ConversationControlsRecipe();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v8, 1, (uint64_t)v10);
  int v12 = __swift_getEnumTagSinglePayload(v9, 1, (uint64_t)v10);
  if (!EnumTagSinglePayload)
  {
    if (v12)
    {
      outlined destroy of ConversationControlsRecipe(v8, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
      goto LABEL_7;
    }
    if (a1 != a2)
    {
      outlined destroy of ConversationControlsType(v8);
      long long v22 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v22;
      *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
    }
    long long v23 = *(void **)(v8 + 48);
    *(void *)(v8 + 48) = *(void *)(v9 + 48);

    long long v24 = *(void **)(v8 + 56);
    uint64_t v25 = *(void *)(v9 + 56);
    if (v24)
    {
      if (v25)
      {
        *(void *)(v8 + 56) = v25;

        uint64_t v26 = *(void **)(v8 + 64);
        *(void *)(v8 + 64) = *(void *)(v9 + 64);

        *(void *)(v8 + 72) = *(void *)(v9 + 72);
        goto LABEL_19;
      }
      outlined destroy of ConversationControlsRecipe.View(v8 + 56);
    }
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
    *(void *)(v8 + 72) = *(void *)(v9 + 72);
LABEL_19:
    uint64_t v39 = *(void **)(v8 + 80);
    *(void *)(v8 + 80) = *(void *)(v9 + 80);

    *(void *)(v8 + 88) = *(void *)(v9 + 88);
    swift_bridgeObjectRelease();
    uint64_t v40 = v10[9];
    uint64_t v41 = (void *)(v8 + v40);
    uint64_t v42 = (const void *)(v9 + v40);
    uint64_t v43 = type metadata accessor for AttributedString();
    int v44 = __swift_getEnumTagSinglePayload((uint64_t)v41, 1, v43);
    int v45 = __swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43);
    if (v44)
    {
      if (!v45)
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
        __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v46 = *(void *)(v43 - 8);
      if (!v45)
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 40))(v41, v42, v43);
LABEL_25:
        uint64_t v48 = v10[10];
        uint64_t v49 = (void *)(v8 + v48);
        uint64_t v50 = (void *)(v9 + v48);
        long long v51 = *(void **)(v8 + v48);
        if (v51)
        {
          if (*v50)
          {
            *uint64_t v49 = *v50;

            long long v52 = (void *)v49[1];
            v49[1] = v50[1];

            goto LABEL_30;
          }
          outlined destroy of ConversationControlsRecipe.View((uint64_t)v49);
        }
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
LABEL_30:
        v49[2] = v50[2];
        *(unsigned char *)(v8 + v10[11]) = *(unsigned char *)(v9 + v10[11]);
        *(unsigned char *)(v8 + v10[12]) = *(unsigned char *)(v9 + v10[12]);
        *(void *)(v8 + v10[13]) = *(void *)(v9 + v10[13]);
        *(void *)(v8 + v10[14]) = *(void *)(v9 + v10[14]);
        uint64_t v53 = v10[15];
        uint64_t v54 = v8 + v53;
        uint64_t v55 = v9 + v53;
        uint64_t v56 = *(unsigned __int8 *)(v8 + v53 + 40);
        if (v56 <= 0xFD)
        {
          unsigned int v57 = *(unsigned __int8 *)(v55 + 40);
          if (v57 <= 0xFD)
          {
            uint64_t v59 = *(void *)(v55 + 32);
            uint64_t v60 = *(void *)v54;
            uint64_t v61 = *(void *)(v54 + 8);
            uint64_t v62 = *(void *)(v54 + 16);
            uint64_t v63 = *(void *)(v54 + 24);
            uint64_t v64 = *(void *)(v54 + 32);
            long long v65 = *(_OWORD *)(v55 + 16);
            *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
            *(_OWORD *)(v54 + 16) = v65;
            *(void *)(v54 + 32) = v59;
            *(unsigned char *)(v54 + 40) = v57;
            outlined consume of ConversationControlsRecipe.Actions(v60, v61, v62, v63, v64, v56);
LABEL_35:
            *(unsigned char *)(v8 + v10[16]) = *(unsigned char *)(v9 + v10[16]);
            uint64_t v66 = v10[17];
            uint64_t v67 = v8 + v66;
            uint64_t v68 = v9 + v66;
            if (*(unsigned __int8 *)(v8 + v66 + 16) != 255)
            {
              int v69 = *(unsigned __int8 *)(v68 + 16);
              if (v69 != 255)
              {
                uint64_t v70 = *(void **)v67;
                *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
                *(unsigned char *)(v67 + 16) = v69 & 1;
                outlined consume of PreCallControlsContext(v70);
                goto LABEL_40;
              }
              outlined destroy of LeadingViewType(v67);
            }
            *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
            *(unsigned char *)(v67 + 16) = *(unsigned char *)(v68 + 16);
LABEL_40:
            uint64_t v71 = v10[18];
            uint64_t v72 = v8 + v71;
            id v73 = (void *)(v9 + v71);
            id v74 = *(void **)(v8 + v71);
            if (v74 != (void *)1)
            {
              if (*v73 != 1)
              {
                uint64_t v75 = v73[1];
                *(void *)uint64_t v72 = *v73;

                uint64_t v76 = v73[2];
                uint64_t v77 = v73[3];
                double v78 = *(void **)(v72 + 16);
                *(void *)(v72 + 8) = v75;
                *(void *)(v72 + 16) = v76;

                uint64_t v79 = v73[4];
                uint64_t v80 = v73[5];
                long long v81 = *(void **)(v72 + 32);
                *(void *)(v72 + 24) = v77;
                *(void *)(v72 + 32) = v79;

                uint64_t v82 = v73[6];
                uint64_t v83 = v73[7];
                id v84 = *(void **)(v72 + 48);
                *(void *)(v72 + 40) = v80;
                *(void *)(v72 + 48) = v82;

                uint64_t v85 = v73[8];
                *(void *)(v72 + 56) = v83;
                *(void *)(v72 + 64) = v85;
                *(unsigned char *)(v72 + 72) = *((unsigned char *)v73 + 72);
                goto LABEL_16;
              }
              outlined destroy of SystemApertureElement(v72);
            }
            char v20 = (void *)v72;
            long long v21 = v73;
            size_t v19 = 73;
            goto LABEL_8;
          }
          outlined destroy of ConversationControlsRecipe.Actions(v54);
        }
        long long v58 = *(_OWORD *)(v55 + 16);
        *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
        *(_OWORD *)(v54 + 16) = v58;
        *(_OWORD *)(v54 + 25) = *(_OWORD *)(v55 + 25);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v46 + 8))(v41, v43);
    }
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v41, v42, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_25;
  }
  if (v12)
  {
LABEL_7:
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?)
                                - 8)
                    + 64);
    char v20 = (void *)v8;
    long long v21 = (const void *)v9;
LABEL_8:
    memcpy(v20, v21, v19);
    goto LABEL_16;
  }
  long long v13 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v13;
  *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
  *(void *)(v8 + 88) = *(void *)(v9 + 88);
  uint64_t v14 = v10[9];
  uint64_t v15 = (void *)(v8 + v14);
  size_t v16 = (const void *)(v9 + v14);
  uint64_t v17 = type metadata accessor for AttributedString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  uint64_t v27 = v10[10];
  uint64_t v28 = v8 + v27;
  uint64_t v29 = v9 + v27;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(void *)(v28 + 16) = *(void *)(v29 + 16);
  *(unsigned char *)(v8 + v10[11]) = *(unsigned char *)(v9 + v10[11]);
  *(unsigned char *)(v8 + v10[12]) = *(unsigned char *)(v9 + v10[12]);
  *(void *)(v8 + v10[13]) = *(void *)(v9 + v10[13]);
  *(void *)(v8 + v10[14]) = *(void *)(v9 + v10[14]);
  uint64_t v30 = v10[15];
  long long v31 = (_OWORD *)(v8 + v30);
  uint64_t v32 = (_OWORD *)(v9 + v30);
  long long v33 = v32[1];
  *long long v31 = *v32;
  v31[1] = v33;
  *(_OWORD *)((char *)v31 + 25) = *(_OWORD *)((char *)v32 + 25);
  *(unsigned char *)(v8 + v10[16]) = *(unsigned char *)(v9 + v10[16]);
  uint64_t v34 = v10[17];
  uint64_t v35 = v8 + v34;
  uint64_t v36 = v9 + v34;
  *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  memcpy((void *)(v8 + v10[18]), (const void *)(v9 + v10[18]), 0x49uLL);
  __swift_storeEnumTagSinglePayload(v8, 0, 1, (uint64_t)v10);
LABEL_16:
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  *(void *)(v8 + *(int *)(v37 + 28)) = *(void *)(v9 + *(int *)(v37 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareCardStatusHeaderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3006F5C);
}

uint64_t sub_1C3006F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_2_15();
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
  uint64_t v8 = a1 + *(int *)(a3 + 24);
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for ShareCardStatusHeaderView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3006FEC);
}

void sub_1C3006FEC()
{
  OUTLINED_FUNCTION_5();
  if (v3)
  {
    *uint64_t v1 = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ConversationControlsRecipe?>);
    uint64_t v6 = (uint64_t)v1 + *(int *)(v4 + 24);
    __swift_storeEnumTagSinglePayload(v6, v0, v0, v5);
  }
}

void type metadata completion function for ShareCardStatusHeaderView()
{
  type metadata accessor for State<ConversationControlsRecipe?>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for State<ConversationControlsRecipe?>()
{
  if (!lazy cache variable for type metadata for State<ConversationControlsRecipe?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<ConversationControlsRecipe?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>, _AppearanceActionModifier>);
    lazy protocol witness table accessor for type SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>> and conformance SubscriptionView<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>> and conformance SubscriptionView<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>> and conformance SubscriptionView<A, B>;
  if (!lazy protocol witness table cache variable for type SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>> and conformance SubscriptionView<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubscriptionView<PassthroughSubject<(), Never>, ModifiedContent<ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>, _PaddingLayout>> and conformance SubscriptionView<A, B>);
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for ConversationStatusView(void **a1, void **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = (char *)*a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void **)&v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    int v9 = *((unsigned __int8 *)a2 + v6 + 40);
    uint64_t v10 = v5;
    switch(v9)
    {
      case 0:
        long long v11 = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v7 + 24) = v11;
        (**(void (***)(char *, char *))(v11 - 8))(v7, v8);
        v7[40] = 0;
        break;
      case 1:
        uint64_t v12 = *((void *)v8 + 1);
        *(void *)uint64_t v7 = *(void *)v8;
        *((void *)v7 + 1) = v12;
        char v13 = 1;
        goto LABEL_8;
      case 2:
        uint64_t v14 = *(void **)v8;
        *(void *)uint64_t v7 = *(void *)v8;
        v7[40] = 2;
        id v15 = v14;
        break;
      case 3:
        uint64_t v16 = *((void *)v8 + 1);
        *(void *)uint64_t v7 = *(void *)v8;
        *((void *)v7 + 1) = v16;
        char v13 = 3;
LABEL_8:
        v7[40] = v13;
        swift_bridgeObjectRetain();
        break;
      case 5:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        v7[40] = 5;
        swift_unknownObjectRetain();
        break;
      default:
        long long v17 = *((_OWORD *)v8 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        *((_OWORD *)v7 + 1) = v17;
        *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
        break;
    }
    uint64_t v18 = (void *)*((void *)v8 + 7);
    size_t v19 = (void *)*((void *)v8 + 6);
    *((void *)v7 + 6) = v19;
    id v20 = v19;
    if (v18)
    {
      long long v22 = (void *)*((void *)v8 + 8);
      uint64_t v21 = *((void *)v8 + 9);
      *((void *)v7 + 7) = v18;
      *((void *)v7 + 8) = v22;
      *((void *)v7 + 9) = v21;
      id v23 = v18;
      id v24 = v22;
    }
    else
    {
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *((void *)v7 + 9) = *((void *)v8 + 9);
    }
    uint64_t v25 = (void *)*((void *)v8 + 10);
    uint64_t v26 = *((void *)v8 + 11);
    *((void *)v7 + 10) = v25;
    *((void *)v7 + 11) = v26;
    uint64_t v27 = (int *)type metadata accessor for ConversationControlsRecipe();
    uint64_t v28 = v27[9];
    uint64_t v29 = &v7[v28];
    uint64_t v30 = &v8[v28];
    uint64_t v31 = type metadata accessor for AttributedString();
    id v32 = v25;
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
      __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v31);
    }
    uint64_t v34 = v27[10];
    uint64_t v35 = &v7[v34];
    uint64_t v36 = &v8[v34];
    uint64_t v37 = *(void **)v36;
    if (*(void *)v36)
    {
      uint64_t v39 = (void *)*((void *)v36 + 1);
      uint64_t v38 = *((void *)v36 + 2);
      *(void *)uint64_t v35 = v37;
      *((void *)v35 + 1) = v39;
      *((void *)v35 + 2) = v38;
      id v40 = v37;
      id v41 = v39;
    }
    else
    {
      *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
      *((void *)v35 + 2) = *((void *)v36 + 2);
    }
    v7[v27[11]] = v8[v27[11]];
    v7[v27[12]] = v8[v27[12]];
    *(void *)&v7[v27[13]] = *(void *)&v8[v27[13]];
    *(void *)&v7[v27[14]] = *(void *)&v8[v27[14]];
    uint64_t v42 = v27[15];
    uint64_t v43 = &v7[v42];
    int v44 = &v8[v42];
    uint64_t v45 = v44[40];
    if (v45 <= 0xFD)
    {
      uint64_t v47 = *(void *)v44;
      uint64_t v48 = *((void *)v44 + 1);
      uint64_t v71 = a1;
      uint64_t v49 = *((void *)v44 + 2);
      uint64_t v50 = *((void *)v44 + 3);
      uint64_t v51 = *((void *)v44 + 4);
      outlined copy of ConversationControlsRecipe.Actions(*(void *)v44, v48, v49, v50, v51, v45);
      *(void *)uint64_t v43 = v47;
      *((void *)v43 + 1) = v48;
      *((void *)v43 + 2) = v49;
      *((void *)v43 + 3) = v50;
      a1 = v71;
      *((void *)v43 + 4) = v51;
      v43[40] = v45;
    }
    else
    {
      long long v46 = *((_OWORD *)v44 + 1);
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
      *((_OWORD *)v43 + 1) = v46;
      *(_OWORD *)(v43 + 25) = *(_OWORD *)(v44 + 25);
    }
    v7[v27[16]] = v8[v27[16]];
    uint64_t v52 = v27[17];
    uint64_t v53 = &v7[v52];
    uint64_t v54 = &v8[v52];
    int v55 = v54[16];
    if (v55 == 255)
    {
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      v53[16] = v54[16];
    }
    else
    {
      char v56 = v55 & 1;
      uint64_t v57 = *(void *)v54;
      uint64_t v58 = *((void *)v54 + 1);
      outlined copy of PreCallControlsContext(*(id *)v54);
      *(void *)uint64_t v53 = v57;
      *((void *)v53 + 1) = v58;
      v53[16] = v56;
    }
    uint64_t v59 = v27[18];
    uint64_t v60 = &v7[v59];
    uint64_t v61 = &v8[v59];
    uint64_t v62 = *(void **)&v8[v59];
    if (v62 == (void *)1)
    {
      memcpy(v60, v61, 0x49uLL);
    }
    else
    {
      uint64_t v63 = *((void *)v61 + 1);
      *(void *)uint64_t v60 = v62;
      *((void *)v60 + 1) = v63;
      long long v69 = *((_OWORD *)v61 + 1);
      long long v70 = *((_OWORD *)v61 + 2);
      *((_OWORD *)v60 + 1) = v69;
      *((_OWORD *)v60 + 2) = v70;
      long long v72 = *((_OWORD *)v61 + 3);
      *((_OWORD *)v60 + 3) = v72;
      *((void *)v60 + 8) = *((void *)v61 + 8);
      v60[72] = v61[72];
      id v64 = v62;
      id v65 = (id)v69;
      id v66 = (id)v70;
      id v67 = (id)v72;
    }
  }
  return a1;
}

void destroy for ConversationStatusView(id *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 20);
  uint64_t v5 = (id *)((char *)a1 + v4);
  switch(*((unsigned char *)a1 + v4 + 40))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + v4);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }

  id v6 = v5[7];
  if (v6)
  {
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for ConversationControlsRecipe();
  uint64_t v8 = (uint64_t)v5 + v7[9];
  uint64_t v9 = type metadata accessor for AttributedString();
  if (!__swift_getEnumTagSinglePayload(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = (id *)((char *)v5 + v7[10]);
  if (*v10)
  {
  }
  long long v11 = (char *)v5 + v7[15];
  uint64_t v12 = v11[40];
  if (v12 <= 0xFD) {
    outlined consume of ConversationControlsRecipe.Actions(*(void *)v11, *((void *)v11 + 1), *((void *)v11 + 2), *((void *)v11 + 3), *((void *)v11 + 4), v12);
  }
  char v13 = (char *)v5 + v7[17];
  if (v13[16] != 255) {
    outlined consume of PreCallControlsContext(*(id *)v13);
  }
  uint64_t v14 = (char *)v5 + v7[18];
  if (*(void *)v14 != 1)
  {

    id v15 = (void *)*((void *)v14 + 6);
  }
}

void **initializeWithCopy for ConversationStatusView(void **a1, void **a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  id v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  int v8 = *((unsigned __int8 *)a2 + v5 + 40);
  id v9 = v4;
  switch(v8)
  {
    case 0:
      long long v10 = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v6 + 24) = v10;
      (**(void (***)(char *, char *))(v10 - 8))(v6, v7);
      v6[40] = 0;
      break;
    case 1:
      uint64_t v11 = *((void *)v7 + 1);
      *(void *)id v6 = *(void *)v7;
      *((void *)v6 + 1) = v11;
      char v12 = 1;
      goto LABEL_6;
    case 2:
      char v13 = *(void **)v7;
      *(void *)id v6 = *(void *)v7;
      v6[40] = 2;
      id v14 = v13;
      break;
    case 3:
      uint64_t v15 = *((void *)v7 + 1);
      *(void *)id v6 = *(void *)v7;
      *((void *)v6 + 1) = v15;
      char v12 = 3;
LABEL_6:
      v6[40] = v12;
      swift_bridgeObjectRetain();
      break;
    case 5:
      *(_OWORD *)id v6 = *(_OWORD *)v7;
      v6[40] = 5;
      swift_unknownObjectRetain();
      break;
    default:
      long long v16 = *((_OWORD *)v7 + 1);
      *(_OWORD *)id v6 = *(_OWORD *)v7;
      *((_OWORD *)v6 + 1) = v16;
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
      break;
  }
  long long v17 = (void *)*((void *)v7 + 7);
  uint64_t v18 = (void *)*((void *)v7 + 6);
  *((void *)v6 + 6) = v18;
  id v19 = v18;
  if (v17)
  {
    uint64_t v21 = (void *)*((void *)v7 + 8);
    uint64_t v20 = *((void *)v7 + 9);
    *((void *)v6 + 7) = v17;
    *((void *)v6 + 8) = v21;
    *((void *)v6 + 9) = v20;
    id v22 = v17;
    id v23 = v21;
  }
  else
  {
    *(_OWORD *)(v6 + 56) = *(_OWORD *)(v7 + 56);
    *((void *)v6 + 9) = *((void *)v7 + 9);
  }
  id v24 = (void *)*((void *)v7 + 10);
  uint64_t v25 = *((void *)v7 + 11);
  *((void *)v6 + 10) = v24;
  *((void *)v6 + 11) = v25;
  uint64_t v26 = (int *)type metadata accessor for ConversationControlsRecipe();
  uint64_t v27 = v26[9];
  uint64_t v28 = &v6[v27];
  uint64_t v29 = &v7[v27];
  uint64_t v30 = type metadata accessor for AttributedString();
  id v31 = v24;
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  uint64_t v33 = v26[10];
  uint64_t v34 = &v6[v33];
  uint64_t v35 = &v7[v33];
  uint64_t v36 = *(void **)v35;
  if (*(void *)v35)
  {
    uint64_t v38 = (void *)*((void *)v35 + 1);
    uint64_t v37 = *((void *)v35 + 2);
    *(void *)uint64_t v34 = v36;
    *((void *)v34 + 1) = v38;
    *((void *)v34 + 2) = v37;
    id v39 = v36;
    id v40 = v38;
  }
  else
  {
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    *((void *)v34 + 2) = *((void *)v35 + 2);
  }
  v6[v26[11]] = v7[v26[11]];
  v6[v26[12]] = v7[v26[12]];
  *(void *)&v6[v26[13]] = *(void *)&v7[v26[13]];
  *(void *)&v6[v26[14]] = *(void *)&v7[v26[14]];
  uint64_t v41 = v26[15];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  uint64_t v44 = v43[40];
  if (v44 <= 0xFD)
  {
    uint64_t v46 = *(void *)v43;
    uint64_t v47 = *((void *)v43 + 1);
    long long v70 = v3;
    uint64_t v48 = *((void *)v43 + 2);
    uint64_t v49 = *((void *)v43 + 3);
    uint64_t v50 = *((void *)v43 + 4);
    outlined copy of ConversationControlsRecipe.Actions(*(void *)v43, v47, v48, v49, v50, v44);
    *(void *)uint64_t v42 = v46;
    *((void *)v42 + 1) = v47;
    *((void *)v42 + 2) = v48;
    *((void *)v42 + 3) = v49;
    char v3 = v70;
    *((void *)v42 + 4) = v50;
    v42[40] = v44;
  }
  else
  {
    long long v45 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v45;
    *(_OWORD *)(v42 + 25) = *(_OWORD *)(v43 + 25);
  }
  v6[v26[16]] = v7[v26[16]];
  uint64_t v51 = v26[17];
  uint64_t v52 = &v6[v51];
  uint64_t v53 = &v7[v51];
  int v54 = v53[16];
  if (v54 == 255)
  {
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
    v52[16] = v53[16];
  }
  else
  {
    char v55 = v54 & 1;
    uint64_t v56 = *(void *)v53;
    uint64_t v57 = *((void *)v53 + 1);
    outlined copy of PreCallControlsContext(*(id *)v53);
    *(void *)uint64_t v52 = v56;
    *((void *)v52 + 1) = v57;
    v52[16] = v55;
  }
  uint64_t v58 = v26[18];
  uint64_t v59 = &v6[v58];
  uint64_t v60 = &v7[v58];
  uint64_t v61 = *(void **)&v7[v58];
  if (v61 == (void *)1)
  {
    memcpy(v59, v60, 0x49uLL);
  }
  else
  {
    uint64_t v62 = *((void *)v60 + 1);
    *(void *)uint64_t v59 = v61;
    *((void *)v59 + 1) = v62;
    long long v68 = *((_OWORD *)v60 + 1);
    long long v69 = *((_OWORD *)v60 + 2);
    *((_OWORD *)v59 + 1) = v68;
    *((_OWORD *)v59 + 2) = v69;
    long long v71 = *((_OWORD *)v60 + 3);
    *((_OWORD *)v59 + 3) = v71;
    *((void *)v59 + 8) = *((void *)v60 + 8);
    v59[72] = v60[72];
    id v63 = v61;
    id v64 = (id)v68;
    id v65 = (id)v69;
    id v66 = (id)v71;
  }
  return v3;
}

void **assignWithCopy for ConversationStatusView(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = a1;
  id v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  long long v10 = (char *)v5 + v9;
  uint64_t v11 = (char *)a2 + v9;
  if (v5 != a2)
  {
    outlined destroy of ConversationControlsType((uint64_t)v5 + v9);
    switch(v11[40])
    {
      case 0:
        uint64_t v12 = *((void *)v11 + 3);
        *((void *)v10 + 3) = v12;
        *((void *)v10 + 4) = *((void *)v11 + 4);
        (**(void (***)(char *, char *))(v12 - 8))(v10, v11);
        v10[40] = 0;
        break;
      case 1:
        *(void *)long long v10 = *(void *)v11;
        *((void *)v10 + 1) = *((void *)v11 + 1);
        char v13 = 1;
        goto LABEL_7;
      case 2:
        id v14 = *(void **)v11;
        *(void *)long long v10 = *(void *)v11;
        v10[40] = 2;
        id v15 = v14;
        break;
      case 3:
        *(void *)long long v10 = *(void *)v11;
        *((void *)v10 + 1) = *((void *)v11 + 1);
        char v13 = 3;
LABEL_7:
        v10[40] = v13;
        swift_bridgeObjectRetain();
        break;
      case 5:
        *(_OWORD *)long long v10 = *(_OWORD *)v11;
        v10[40] = 5;
        swift_unknownObjectRetain();
        break;
      default:
        long long v16 = *(_OWORD *)v11;
        long long v17 = *((_OWORD *)v11 + 1);
        *(_OWORD *)(v10 + 25) = *(_OWORD *)(v11 + 25);
        *(_OWORD *)long long v10 = v16;
        *((_OWORD *)v10 + 1) = v17;
        break;
    }
  }
  uint64_t v18 = (void *)*((void *)v10 + 6);
  id v19 = (void *)*((void *)v11 + 6);
  *((void *)v10 + 6) = v19;
  id v20 = v19;

  uint64_t v21 = v10 + 56;
  id v22 = (void *)*((void *)v10 + 7);
  id v24 = v11 + 56;
  id v23 = (void *)*((void *)v11 + 7);
  if (v22)
  {
    if (v23)
    {
      *((void *)v10 + 7) = v23;
      id v25 = v23;

      uint64_t v26 = (void *)*((void *)v10 + 8);
      uint64_t v27 = (void *)*((void *)v11 + 8);
      *((void *)v10 + 8) = v27;
      id v28 = v27;

      *((void *)v10 + 9) = *((void *)v11 + 9);
    }
    else
    {
      outlined destroy of ConversationControlsRecipe.View((uint64_t)(v10 + 56));
      uint64_t v32 = *((void *)v11 + 9);
      *uint64_t v21 = *v24;
      *((void *)v10 + 9) = v32;
    }
  }
  else if (v23)
  {
    *((void *)v10 + 7) = v23;
    uint64_t v29 = (void *)*((void *)v11 + 8);
    *((void *)v10 + 8) = v29;
    *((void *)v10 + 9) = *((void *)v11 + 9);
    id v30 = v23;
    id v31 = v29;
  }
  else
  {
    long long v33 = *v24;
    *((void *)v10 + 9) = *((void *)v11 + 9);
    *uint64_t v21 = v33;
  }
  uint64_t v34 = (void *)*((void *)v11 + 10);
  uint64_t v35 = (void *)*((void *)v10 + 10);
  *((void *)v10 + 10) = v34;
  id v36 = v34;

  *((void *)v10 + 11) = *((void *)v11 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = (int *)type metadata accessor for ConversationControlsRecipe();
  uint64_t v38 = v37[9];
  id v39 = &v10[v38];
  id v40 = &v11[v38];
  uint64_t v41 = type metadata accessor for AttributedString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v39, 1, v41);
  int v43 = __swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41);
  if (EnumTagSinglePayload)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
      __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v41);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v44 = *(void *)(v41 - 8);
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v41);
LABEL_22:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v39, v40, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v44 + 24))(v39, v40, v41);
LABEL_23:
  uint64_t v46 = v37[10];
  uint64_t v47 = &v10[v46];
  uint64_t v48 = &v11[v46];
  uint64_t v49 = *(void **)&v10[v46];
  uint64_t v50 = *(void **)&v11[v46];
  if (v49)
  {
    if (v50)
    {
      *(void *)uint64_t v47 = v50;
      id v51 = v50;

      uint64_t v52 = (void *)*((void *)v47 + 1);
      uint64_t v53 = (void *)*((void *)v48 + 1);
      *((void *)v47 + 1) = v53;
      id v54 = v53;

      uint64_t v55 = *((void *)v48 + 2);
    }
    else
    {
      outlined destroy of ConversationControlsRecipe.View((uint64_t)v47);
      uint64_t v55 = *((void *)v48 + 2);
      *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
    }
    *((void *)v47 + 2) = v55;
  }
  else if (v50)
  {
    *(void *)uint64_t v47 = v50;
    uint64_t v56 = (void *)*((void *)v48 + 1);
    *((void *)v47 + 1) = v56;
    *((void *)v47 + 2) = *((void *)v48 + 2);
    id v57 = v50;
    id v58 = v56;
  }
  else
  {
    long long v123 = *(_OWORD *)v48;
    *((void *)v47 + 2) = *((void *)v48 + 2);
    *(_OWORD *)uint64_t v47 = v123;
  }
  v10[v37[11]] = v11[v37[11]];
  v10[v37[12]] = v11[v37[12]];
  *(void *)&v10[v37[13]] = *(void *)&v11[v37[13]];
  *(void *)&v10[v37[14]] = *(void *)&v11[v37[14]];
  uint64_t v59 = v37[15];
  uint64_t v60 = (uint64_t)&v10[v59];
  uint64_t v61 = &v11[v59];
  uint64_t v62 = v11[v59 + 40];
  if (v10[v59 + 40] <= 0xFDu)
  {
    if (v62 <= 0xFD)
    {
      uint64_t v72 = *(void *)v61;
      uint64_t v73 = *((void *)v61 + 1);
      long long v127 = v5;
      uint64_t v74 = *((void *)v61 + 2);
      uint64_t v75 = *((void *)v61 + 4);
      uint64_t v76 = *(void *)v61;
      uint64_t v77 = *((void *)v61 + 3);
      outlined copy of ConversationControlsRecipe.Actions(v76, v73, v74, v77, v75, v62);
      uint64_t v78 = *(void *)v60;
      uint64_t v79 = *(void *)(v60 + 8);
      uint64_t v80 = *(void *)(v60 + 16);
      uint64_t v81 = *(void *)(v60 + 24);
      uint64_t v82 = *(void *)(v60 + 32);
      *(void *)uint64_t v60 = v72;
      *(void *)(v60 + 8) = v73;
      *(void *)(v60 + 16) = v74;
      *(void *)(v60 + 24) = v77;
      uint64_t v5 = v127;
      *(void *)(v60 + 32) = v75;
      uint64_t v83 = *(unsigned __int8 *)(v60 + 40);
      *(unsigned char *)(v60 + 40) = v62;
      outlined consume of ConversationControlsRecipe.Actions(v78, v79, v80, v81, v82, v83);
    }
    else
    {
      outlined destroy of ConversationControlsRecipe.Actions(v60);
      long long v65 = *(_OWORD *)(v61 + 25);
      long long v66 = *((_OWORD *)v61 + 1);
      *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
      *(_OWORD *)(v60 + 16) = v66;
      *(_OWORD *)(v60 + 25) = v65;
    }
  }
  else if (v62 <= 0xFD)
  {
    uint64_t v67 = *(void *)v61;
    uint64_t v68 = *((void *)v61 + 1);
    long long v126 = v5;
    uint64_t v69 = *((void *)v61 + 2);
    uint64_t v70 = *((void *)v61 + 3);
    uint64_t v71 = *((void *)v61 + 4);
    outlined copy of ConversationControlsRecipe.Actions(v67, v68, v69, v70, v71, v62);
    *(void *)uint64_t v60 = v67;
    *(void *)(v60 + 8) = v68;
    *(void *)(v60 + 16) = v69;
    *(void *)(v60 + 24) = v70;
    uint64_t v5 = v126;
    *(void *)(v60 + 32) = v71;
    *(unsigned char *)(v60 + 40) = v62;
  }
  else
  {
    long long v63 = *(_OWORD *)v61;
    long long v64 = *((_OWORD *)v61 + 1);
    *(_OWORD *)(v60 + 25) = *(_OWORD *)(v61 + 25);
    *(_OWORD *)uint64_t v60 = v63;
    *(_OWORD *)(v60 + 16) = v64;
  }
  v10[v37[16]] = v11[v37[16]];
  uint64_t v84 = v37[17];
  uint64_t v85 = (uint64_t)&v10[v84];
  os_log_type_t v86 = &v11[v84];
  int v87 = v10[v84 + 16];
  int v88 = v11[v84 + 16];
  if (v87 == 255)
  {
    if (v88 == 255)
    {
      long long v90 = *(_OWORD *)v86;
      *(unsigned char *)(v85 + 16) = v86[16];
      *(_OWORD *)uint64_t v85 = v90;
    }
    else
    {
      char v95 = v88 & 1;
      uint64_t v96 = *(void **)v86;
      uint64_t v97 = *((void *)v86 + 1);
      outlined copy of PreCallControlsContext(v96);
      *(void *)uint64_t v85 = v96;
      *(void *)(v85 + 8) = v97;
      *(unsigned char *)(v85 + 16) = v95;
    }
  }
  else if (v88 == 255)
  {
    outlined destroy of LeadingViewType(v85);
    char v89 = v86[16];
    *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    *(unsigned char *)(v85 + 16) = v89;
  }
  else
  {
    char v91 = v88 & 1;
    id v92 = *(void **)v86;
    uint64_t v93 = *((void *)v86 + 1);
    outlined copy of PreCallControlsContext(v92);
    id v94 = *(void **)v85;
    *(void *)uint64_t v85 = v92;
    *(void *)(v85 + 8) = v93;
    *(unsigned char *)(v85 + 16) = v91;
    outlined consume of PreCallControlsContext(v94);
  }
  uint64_t v98 = v37[18];
  uint64_t v99 = (uint64_t)&v10[v98];
  id v100 = &v11[v98];
  uint64_t v101 = *(void **)v99;
  double v102 = *(void **)v100;
  if (*(void *)v99 != 1)
  {
    if (v102 != (void *)1)
    {
      uint64_t v108 = *((void *)v100 + 1);
      *(void *)uint64_t v99 = v102;
      id v109 = v102;

      *(void *)(v99 + 8) = v108;
      double v110 = (void *)*((void *)v100 + 2);
      uint64_t v111 = *((void *)v100 + 3);
      os_log_type_t v112 = *(void **)(v99 + 16);
      *(void *)(v99 + 16) = v110;
      id v113 = v110;

      *(void *)(v99 + 24) = v111;
      id v114 = (void *)*((void *)v100 + 4);
      uint64_t v115 = *((void *)v100 + 5);
      unint64_t v116 = *(void **)(v99 + 32);
      *(void *)(v99 + 32) = v114;
      id v117 = v114;

      *(void *)(v99 + 40) = v115;
      uint64_t v118 = (void *)*((void *)v100 + 6);
      uint64_t v119 = *((void *)v100 + 7);
      id v120 = *(void **)(v99 + 48);
      *(void *)(v99 + 48) = v118;
      id v121 = v118;

      *(void *)(v99 + 56) = v119;
      *(void *)(v99 + 64) = *((void *)v100 + 8);
      *(unsigned char *)(v99 + 72) = v100[72];
      return v5;
    }
    outlined destroy of SystemApertureElement(v99);
    goto LABEL_49;
  }
  if (v102 == (void *)1)
  {
LABEL_49:
    memcpy((void *)v99, v100, 0x49uLL);
    return v5;
  }
  uint64_t v103 = *((void *)v100 + 1);
  *(void *)uint64_t v99 = v102;
  *(void *)(v99 + 8) = v103;
  long long v124 = *((_OWORD *)v100 + 1);
  *(_OWORD *)(v99 + 16) = v124;
  long long v125 = *((_OWORD *)v100 + 2);
  *(_OWORD *)(v99 + 32) = v125;
  long long v128 = *((_OWORD *)v100 + 3);
  *(_OWORD *)(v99 + 48) = v128;
  *(void *)(v99 + 64) = *((void *)v100 + 8);
  *(unsigned char *)(v99 + 72) = v100[72];
  id v104 = v102;
  id v105 = (id)v124;
  id v106 = (id)v125;
  id v107 = (id)v128;
  return v5;
}

void *initializeWithTake for ConversationStatusView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  id v6 = (char *)a2 + v4;
  *(_OWORD *)(v5 + 25) = *(_OWORD *)((char *)a2 + v4 + 25);
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)((char *)a2 + v4);
  *((_OWORD *)v5 + 1) = v7;
  *((void *)v5 + 6) = *(void *)((char *)a2 + v4 + 48);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)((char *)a2 + v4 + 72);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)((char *)a2 + v4 + 56);
  *((void *)v5 + 11) = *(void *)((char *)a2 + v4 + 88);
  id v8 = (int *)type metadata accessor for ConversationControlsRecipe();
  uint64_t v9 = v8[9];
  long long v10 = &v5[v9];
  uint64_t v11 = &v6[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = v8[10];
  id v15 = &v5[v14];
  long long v16 = &v6[v14];
  *(_OWORD *)id v15 = *(_OWORD *)v16;
  *((void *)v15 + 2) = *((void *)v16 + 2);
  v5[v8[11]] = v6[v8[11]];
  v5[v8[12]] = v6[v8[12]];
  *(void *)&v5[v8[13]] = *(void *)&v6[v8[13]];
  *(void *)&v5[v8[14]] = *(void *)&v6[v8[14]];
  uint64_t v17 = v8[15];
  uint64_t v18 = &v5[v17];
  id v19 = &v6[v17];
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *(_OWORD *)(v18 + 25) = *(_OWORD *)(v19 + 25);
  v5[v8[16]] = v6[v8[16]];
  uint64_t v21 = v8[17];
  id v22 = &v5[v21];
  id v23 = &v6[v21];
  v22[16] = v23[16];
  *(_OWORD *)id v22 = *(_OWORD *)v23;
  memcpy(&v5[v8[18]], &v6[v8[18]], 0x49uLL);
  return a1;
}

void **assignWithTake for ConversationStatusView(void **a1, void **a2, uint64_t a3)
{
  id v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  if (a1 != a2)
  {
    outlined destroy of ConversationControlsType((uint64_t)a1 + v7);
    long long v10 = *((_OWORD *)v9 + 1);
    *(_OWORD *)id v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v10;
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
  }
  uint64_t v11 = (void *)*((void *)v8 + 6);
  *((void *)v8 + 6) = *((void *)v9 + 6);

  uint64_t v12 = (void *)*((void *)v8 + 7);
  uint64_t v13 = *((void *)v9 + 7);
  if (v12)
  {
    if (v13)
    {
      *((void *)v8 + 7) = v13;

      uint64_t v14 = (void *)*((void *)v8 + 8);
      *((void *)v8 + 8) = *((void *)v9 + 8);

      *((void *)v8 + 9) = *((void *)v9 + 9);
      goto LABEL_8;
    }
    outlined destroy of ConversationControlsRecipe.View((uint64_t)(v8 + 56));
  }
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  *((void *)v8 + 9) = *((void *)v9 + 9);
LABEL_8:
  id v15 = (void *)*((void *)v8 + 10);
  *((void *)v8 + 10) = *((void *)v9 + 10);

  *((void *)v8 + 11) = *((void *)v9 + 11);
  swift_bridgeObjectRelease();
  long long v16 = (int *)type metadata accessor for ConversationControlsRecipe();
  uint64_t v17 = v16[9];
  uint64_t v18 = &v8[v17];
  id v19 = &v9[v17];
  uint64_t v20 = type metadata accessor for AttributedString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v20);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20);
  if (EnumTagSinglePayload)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v23 = *(void *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
LABEL_13:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
    memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v18, v19, v20);
LABEL_14:
  uint64_t v25 = v16[10];
  uint64_t v26 = &v8[v25];
  uint64_t v27 = &v9[v25];
  id v28 = *(void **)&v8[v25];
  if (v28)
  {
    if (*(void *)v27)
    {
      *(void *)uint64_t v26 = *(void *)v27;

      uint64_t v29 = (void *)*((void *)v26 + 1);
      *((void *)v26 + 1) = *((void *)v27 + 1);

      goto LABEL_19;
    }
    outlined destroy of ConversationControlsRecipe.View((uint64_t)v26);
  }
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
LABEL_19:
  *((void *)v26 + 2) = *((void *)v27 + 2);
  v8[v16[11]] = v9[v16[11]];
  v8[v16[12]] = v9[v16[12]];
  *(void *)&v8[v16[13]] = *(void *)&v9[v16[13]];
  *(void *)&v8[v16[14]] = *(void *)&v9[v16[14]];
  uint64_t v30 = v16[15];
  uint64_t v31 = (uint64_t)&v8[v30];
  uint64_t v32 = &v9[v30];
  uint64_t v33 = v8[v30 + 40];
  if (v33 > 0xFD)
  {
LABEL_22:
    long long v35 = *((_OWORD *)v32 + 1);
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    *(_OWORD *)(v31 + 16) = v35;
    *(_OWORD *)(v31 + 25) = *(_OWORD *)(v32 + 25);
    goto LABEL_24;
  }
  unsigned int v34 = v32[40];
  if (v34 > 0xFD)
  {
    outlined destroy of ConversationControlsRecipe.Actions(v31);
    goto LABEL_22;
  }
  uint64_t v36 = *((void *)v32 + 4);
  uint64_t v37 = *(void *)v31;
  uint64_t v38 = *(void *)(v31 + 8);
  uint64_t v39 = *(void *)(v31 + 16);
  uint64_t v40 = *(void *)(v31 + 24);
  uint64_t v41 = *(void *)(v31 + 32);
  long long v42 = *((_OWORD *)v32 + 1);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v42;
  *(void *)(v31 + 32) = v36;
  *(unsigned char *)(v31 + 40) = v34;
  outlined consume of ConversationControlsRecipe.Actions(v37, v38, v39, v40, v41, v33);
LABEL_24:
  v8[v16[16]] = v9[v16[16]];
  uint64_t v43 = v16[17];
  uint64_t v44 = (uint64_t)&v8[v43];
  uint64_t v45 = &v9[v43];
  if (v8[v43 + 16] == 255)
  {
LABEL_27:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    *(unsigned char *)(v44 + 16) = v45[16];
    goto LABEL_29;
  }
  int v46 = v45[16];
  if (v46 == 255)
  {
    outlined destroy of LeadingViewType(v44);
    goto LABEL_27;
  }
  uint64_t v47 = *(void **)v44;
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(unsigned char *)(v44 + 16) = v46 & 1;
  outlined consume of PreCallControlsContext(v47);
LABEL_29:
  uint64_t v48 = v16[18];
  uint64_t v49 = &v8[v48];
  uint64_t v50 = &v9[v48];
  id v51 = *(void **)v49;
  if (*(void *)v49 != 1)
  {
    if (*(void *)v50 != 1)
    {
      uint64_t v52 = *((void *)v50 + 1);
      *(void *)uint64_t v49 = *(void *)v50;

      uint64_t v53 = *((void *)v50 + 2);
      uint64_t v54 = *((void *)v50 + 3);
      uint64_t v55 = (void *)*((void *)v49 + 2);
      *((void *)v49 + 1) = v52;
      *((void *)v49 + 2) = v53;

      uint64_t v56 = *((void *)v50 + 4);
      uint64_t v57 = *((void *)v50 + 5);
      id v58 = (void *)*((void *)v49 + 4);
      *((void *)v49 + 3) = v54;
      *((void *)v49 + 4) = v56;

      uint64_t v59 = *((void *)v50 + 6);
      uint64_t v60 = *((void *)v50 + 7);
      uint64_t v61 = (void *)*((void *)v49 + 6);
      *((void *)v49 + 5) = v57;
      *((void *)v49 + 6) = v59;

      uint64_t v62 = *((void *)v50 + 8);
      *((void *)v49 + 7) = v60;
      *((void *)v49 + 8) = v62;
      v49[72] = v50[72];
      return a1;
    }
    outlined destroy of SystemApertureElement((uint64_t)v49);
  }
  memcpy(v49, v50, 0x49uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationStatusView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3008998);
}

uint64_t sub_1C3008998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_2_15();
  }
  uint64_t v7 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v8 = a1 + *(int *)(a3 + 20);
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for ConversationStatusView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3008A24);
}

void sub_1C3008A24()
{
  OUTLINED_FUNCTION_5();
  if (v3)
  {
    *uint64_t v1 = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = type metadata accessor for ConversationControlsRecipe();
    uint64_t v6 = (uint64_t)v1 + *(int *)(v4 + 20);
    __swift_storeEnumTagSinglePayload(v6, v0, v0, v5);
  }
}

uint64_t type metadata accessor for ConversationStatusView(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationStatusView);
}

uint64_t type metadata completion function for ConversationStatusView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ConversationStatusView()
{
  return MEMORY[0x1E4F3F158];
}

id ConversationStatusView.makeUIView(context:)()
{
  uint64_t v1 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v1 - 8);
  char v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ConversationStatusView(0);
  outlined init with copy of ShareCardStatusHeaderView((uint64_t)v0 + *(int *)(v4 + 20), (uint64_t)v3, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  uint64_t v5 = *v0;
  id v6 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDControlsStatusView());
  return ConversationHUDControlsStatusView.init(recipe:controlsManager:menuHostViewController:context:presentationStyle:)((uint64_t)v3, v5, 0, 0, 2, 1);
}

uint64_t ConversationStatusView.updateUIView(_:context:)(void *a1)
{
  uint64_t v3 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationStatusView(0);
  outlined init with copy of ShareCardStatusHeaderView(v1 + *(int *)(v6 + 20), (uint64_t)v5, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0))(v5);
}

double ConversationStatusView.sizeThatFits(_:uiView:context:)(uint64_t a1, char a2, uint64_t a3, char a4, id a5, double a6, double a7, double a8, double a9)
{
  double v10 = *(double *)(MEMORY[0x1E4FB2C68] + 8);
  if (a2) {
    a1 = *MEMORY[0x1E4FB2C68];
  }
  if (a4) {
    a3 = *(void *)(MEMORY[0x1E4FB2C68] + 8);
  }
  LODWORD(v10) = 1148846080;
  LODWORD(a9) = 1132068864;
  objc_msgSend(a5, sel_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_, *(double *)&a1, *(double *)&a3, v10, a9);
  return result;
}

uint64_t protocol witness for UIViewRepresentable._resetUIView(_:coordinator:destroy:) in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9E50]();
}

uint64_t protocol witness for static UIViewRepresentable.dismantleUIView(_:coordinator:) in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9E60]();
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9F00]();
}

uint64_t protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9E98]();
}

double protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance ConversationStatusView(uint64_t a1, char a2, uint64_t a3, char a4, void *a5, double a6, double a7, double a8, double a9)
{
  return ConversationStatusView.sizeThatFits(_:uiView:context:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, a9);
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9EC0]();
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9EB0]();
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9ED0]();
}

uint64_t protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance ConversationStatusView()
{
  return MEMORY[0x1F40F9E90]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ConversationStatusView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ConversationStatusView and conformance ConversationStatusView(&lazy protocol witness table cache variable for type ConversationStatusView and conformance ConversationStatusView);
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ConversationStatusView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ConversationStatusView and conformance ConversationStatusView(&lazy protocol witness table cache variable for type ConversationStatusView and conformance ConversationStatusView);
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ConversationStatusView()
{
  return static View._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ConversationStatusView()
{
}

uint64_t base witness table accessor for View in ConversationStatusView()
{
  return lazy protocol witness table accessor for type ConversationStatusView and conformance ConversationStatusView(&lazy protocol witness table cache variable for type ConversationStatusView and conformance ConversationStatusView);
}

uint64_t outlined init with copy of ShareCardStatusHeaderView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ConversationStatusView and conformance ConversationStatusView(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ConversationStatusView(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ConversationControlsRecipe(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of ShareCardStatusHeaderView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ConversationStatusView, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ConversationStatusView, _PaddingLayout>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.initializeCountdownView(with:fullValue:)(Swift::Double with, Swift::Double fullValue)
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v2 + 144)) + 0xE0))();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  oslog = OUTLINED_FUNCTION_30(v3, (uint64_t)static Logger.conversationControls);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, oslog, v4, "[CountdownJoinButtonProvider] Initializing new join countdown view with initial value %f and full value %f", (uint8_t *)v5, 0x16u);
    OUTLINED_FUNCTION_1_29();
  }
  else
  {
  }
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.startCountdown()()
{
  uint64_t v1 = MEMORY[0x1C8776240](v0 + 152);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    uint64_t v1 = swift_unknownObjectRelease();
  }
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 144)) + 0xE8))(v1);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v21 = OUTLINED_FUNCTION_30(v4, (uint64_t)static Logger.conversationControls);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_14(v5, v6, v7, v8, v9, v10, v11, v12, v19, v21))
  {
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v13, v14, "[CountdownJoinButtonProvider] Starting join countdown on a view", v15, v16, v17, v18, v20, v22);
    OUTLINED_FUNCTION_1_29();
  }
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.tick()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 144)) + 0xF0))();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  int v18 = OUTLINED_FUNCTION_30(v1, (uint64_t)static Logger.conversationControls);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_14(v2, v3, v4, v5, v6, v7, v8, v9, v16, v18))
  {
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v10, v11, "[CountdownJoinButtonProvider] tick", v12, v13, v14, v15, v17, v19);
    OUTLINED_FUNCTION_1_29();
  }
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.countdownEnded()()
{
  if (MEMORY[0x1C8776240](v0 + 152))
  {
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_5_0();
  uint64_t v3 = MEMORY[0x1C8776240](v0 + 16);
  if (v3)
  {
    int v4 = v3;
    if (MEMORY[0x1C8776240](v0 + 152))
    {
      uint64_t v5 = *(void *)(v0 + 160);
      swift_getObjectType();
      int v6 = *(void (**)(void))(v5 + 24);
      int v7 = v4;
      v6();

      swift_unknownObjectRelease();
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    int v9 = OUTLINED_FUNCTION_30(v8, (uint64_t)static Logger.conversationControls);
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)int v11 = 0;
      _os_log_impl(&dword_1C2F90000, v9, v10, "[CountdownJoinButtonProvider] countdownEnded", v11, 2u);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }
    else
    {

      int v9 = v4;
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    int v9 = OUTLINED_FUNCTION_30(v12, (uint64_t)static Logger.conversationControls);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v13))
    {
      int v14 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)int v14 = 0;
      _os_log_impl(&dword_1C2F90000, v9, v13, "[CountdownJoinButtonProvider] Skipping joinConversation because button no longer exists after countdownEnded.", v14, 2u);
      MEMORY[0x1C87760E0](v14, -1, -1);
    }
  }
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.cancelJoinCountdown()()
{
  if (MEMORY[0x1C8776240](v0 + 152))
  {
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
    swift_unknownObjectRelease();
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v20 = OUTLINED_FUNCTION_30(v3, (uint64_t)static Logger.conversationControls);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_14(v4, v5, v6, v7, v8, v9, v10, v11, v18, v20))
  {
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v12, v13, "[CountdownJoinButtonProvider] cancelJoinCountdown", v14, v15, v16, v17, v19, v21);
    OUTLINED_FUNCTION_1_29();
  }
}

uint64_t ConversationControlsCountdownJoinButtonProvider.__allocating_init(controlsManager:context:shape:)(void *a1, char a2, char a3)
{
  return ConversationControlsCountdownJoinButtonProvider.init(controlsManager:context:shape:)(a1, a2, a3);
}

uint64_t ConversationControlsCountdownJoinButtonProvider.init(controlsManager:context:shape:)(void *a1, char a2, char a3)
{
  v3[20] = 0;
  swift_unknownObjectWeakInit();
  v3[22] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v7 = (uint64_t)v3 + OBJC_IVAR____TtC15ConversationKit47ConversationControlsCountdownJoinButtonProvider_voucher;
  uint64_t v8 = type metadata accessor for CountdownVoucher(0);
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v8);
  type metadata accessor for ConversationControlsJoinCallCountdownView();
  id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  v3[18] = objc_msgSend(v9, sel_init);
  v3[20] = &protocol witness table for ConversationControlsManager;
  uint64_t v10 = swift_unknownObjectWeakAssign();
  int v11 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x2F0))(v10);
  v3[22] = &protocol witness table for ConversationControlsJoinCountdownActionController;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_release();
  v3[17] = a1;
  uint64_t v12 = ControlsButtonProvider.init(context:shape:)(a2, a3);
  int v13 = *(void **)(v12 + 144);
  int v14 = a1;
  swift_retain();
  int v15 = v13;
  double v16 = static Layout.ConversationControls.values.getter((uint64_t)v24);
  (*(void (**)(void, void, double))((*v11 & *v15) + 0xA0))(v24[37], 0, v16);

  int v17 = *(void **)(v12 + 144);
  uint64_t v18 = self;
  uint64_t v19 = v17;
  (*(void (**)(id))((*v11 & *v19) + 0xB8))(objc_msgSend(v18, sel_secondarySystemFillColor));

  type metadata accessor for UIImage();
  uint64_t v20 = (void *)*MEMORY[0x1E4FB2998];
  v25[0] = 0x69662E6F65646976;
  v25[1] = 0xEA00000000006C6CLL;
  v25[2] = 2;
  v25[3] = v20;
  __int16 v26 = 0;
  uint64_t v27 = 7;
  char v28 = 0;
  uint64_t v29 = 0;
  swift_retain();
  id v21 = v20;
  id v22 = static UIImage.symbolImage(for:)((uint64_t)v25);

  swift_bridgeObjectRelease();
  ControlsButtonProvider.image.setter(v22);
  swift_release_n();

  return v12;
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.buttonChanged()()
{
  ControlsButtonProvider.buttonChanged()();
  OUTLINED_FUNCTION_5_0();
  uint64_t v1 = (void *)MEMORY[0x1C8776240](v0 + 16);
  if (v1)
  {
    os_log_type_t v2 = v1;
    outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000013, 0x80000001C3792E90, v1);
    objc_msgSend(v2, sel_setClipsToBounds_, 1);
    objc_msgSend(v2, sel_addSubview_, *(void *)(v0 + 144));
    objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v0, sel_cancelJoinCountdown, 64);
    id v3 = objc_msgSend(v2, sel_imageView);
    if (v3)
    {
      os_log_type_t v4 = v3;
      objc_msgSend(v3, sel_setAlpha_, 0.0);
    }
  }
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.didLayoutSubviews(button:)(UIButton *button)
{
  id v3 = *(void **)(v1 + 144);
  [(UIButton *)button bounds];
  objc_msgSend(v3, sel_setFrame_);
  id v4 = [(UIButton *)button layer];
  [(UIButton *)button bounds];
  objc_msgSend(v4, sel_setCornerRadius_, CGRectGetHeight(v6) * 0.5);
}

Swift::Void __swiftcall ConversationControlsCountdownJoinButtonProvider.movedToWindow(button:)(UIButton *button)
{
  uint64_t v3 = type metadata accessor for CountdownVoucher(0);
  MEMORY[0x1F4188790](v3);
  int v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  id v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = &v27[-v11];
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  int v15 = &v27[-v14];
  MEMORY[0x1F4188790](v13);
  int v17 = &v27[-v16];
  id v18 = [(UIButton *)button window];

  uint64_t v19 = v1 + OBJC_IVAR____TtC15ConversationKit47ConversationControlsCountdownJoinButtonProvider_voucher;
  if (v18)
  {
    swift_beginAccess();
    outlined init with copy of CountdownVoucher?(v19, (uint64_t)v17);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v3);
    outlined destroy of CountdownVoucher?((uint64_t)v17);
    if (EnumTagSinglePayload != 1) {
      return;
    }
    if (MEMORY[0x1C8776240](v1 + 168))
    {
      uint64_t v21 = *(void *)(v1 + 176);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v21 + 8))(v1, &protocol witness table for ConversationControlsCountdownJoinButtonProvider, ObjectType, v21);
      swift_unknownObjectRelease();
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 1;
    }
    OUTLINED_FUNCTION_3_31((uint64_t)v15, v23);
    uint64_t v26 = (uint64_t)v15;
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of CountdownVoucher?(v19, (uint64_t)v12);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v3) == 1)
    {
      outlined destroy of CountdownVoucher?((uint64_t)v12);
      return;
    }
    outlined init with take of CountdownVoucher((uint64_t)v12, (uint64_t)v5);
    if (MEMORY[0x1C8776240](v1 + 168))
    {
      uint64_t v24 = *(void *)(v1 + 176);
      uint64_t v25 = swift_getObjectType();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v24 + 16))(v5, v25, v24);
      swift_unknownObjectRelease();
    }
    outlined destroy of CountdownVoucher((uint64_t)v5);
    OUTLINED_FUNCTION_3_31((uint64_t)v9, 1);
    uint64_t v26 = (uint64_t)v9;
  }
  outlined assign with take of CountdownVoucher?(v26, v19);
  swift_endAccess();
}

uint64_t ConversationControlsCountdownJoinButtonProvider.__ivar_destroyer()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 152);
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 168);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit47ConversationControlsCountdownJoinButtonProvider_voucher;
  return outlined destroy of CountdownVoucher?(v1);
}

uint64_t ConversationControlsCountdownJoinButtonProvider.deinit()
{
  uint64_t v0 = ControlsButtonProvider.deinit();

  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 152);
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 168);
  outlined destroy of CountdownVoucher?(v0 + OBJC_IVAR____TtC15ConversationKit47ConversationControlsCountdownJoinButtonProvider_voucher);
  return v0;
}

uint64_t ConversationControlsCountdownJoinButtonProvider.__deallocating_deinit()
{
  ConversationControlsCountdownJoinButtonProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of CountdownVoucher?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CountdownVoucher?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of CountdownVoucher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CountdownVoucher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CountdownVoucher(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CountdownVoucher(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of CountdownVoucher?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CountdownVoucher?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t dispatch thunk of ConversationControlsCountdownJoinButtonDelegate.invalidateDismissTimer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConversationControlsCountdownJoinButtonDelegate.scheduleDismissTimer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationControlsCountdownJoinButtonDelegate.joinConversation(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ConversationControlsCountdownJoinButtonDelegate.cancelJoinCountdown()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t ObjC metadata update function for ConversationControlsCountdownJoinButtonProvider()
{
  return type metadata accessor for ConversationControlsCountdownJoinButtonProvider();
}

uint64_t type metadata accessor for ConversationControlsCountdownJoinButtonProvider()
{
  uint64_t result = type metadata singleton initialization cache for ConversationControlsCountdownJoinButtonProvider;
  if (!type metadata singleton initialization cache for ConversationControlsCountdownJoinButtonProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ConversationControlsCountdownJoinButtonProvider()
{
  type metadata accessor for CountdownVoucher?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for CountdownVoucher?()
{
  if (!lazy cache variable for type metadata for CountdownVoucher?)
  {
    type metadata accessor for CountdownVoucher(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountdownVoucher?);
    }
  }
}

uint64_t key path setter for InCallControlsViewConstraintManager.type : InCallControlsViewConstraintManager(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 176))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t InCallControlsViewConstraintManager.type.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 72);
}

uint64_t InCallControlsViewConstraintManager.type.setter(uint64_t a1, char a2)
{
  swift_beginAccess();
  *(void *)(v2 + 72) = a1;
  *(unsigned char *)(v2 + 80) = a2;
  return InCallControlsViewConstraintManager.updateConstraints()();
}

uint64_t (*InCallControlsViewConstraintManager.type.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return InCallControlsViewConstraintManager.type.modify;
}

uint64_t InCallControlsViewConstraintManager.type.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return InCallControlsViewConstraintManager.updateConstraints()();
  }
  return result;
}

uint64_t InCallControlsViewConstraintManager.__allocating_init(containingGuide:containingView:controlsView:type:)(void *a1, void *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  InCallControlsViewConstraintManager.init(containingGuide:containingView:controlsView:type:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t InCallControlsViewConstraintManager.init(containingGuide:containingView:controlsView:type:)(void *a1, void *a2, id a3, uint64_t a4, char a5)
{
  *(void *)(v5 + 64) = MEMORY[0x1E4FBC860];
  *(void *)(v5 + 72) = a4;
  *(unsigned char *)(v5 + 80) = a5;
  id v8 = objc_msgSend(a3, sel_topAnchor);
  id v9 = objc_msgSend(a1, sel_bottomAnchor);
  id v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_constant_, v9, -157.0);

  *(void *)(v5 + 56) = v10;
  id v11 = objc_msgSend(a3, sel_heightAnchor);
  id v12 = objc_msgSend(a1, sel_widthAnchor);
  id v13 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v12);

  *(void *)(v5 + 40) = v13;
  id v14 = objc_msgSend(a3, sel_topAnchor);
  id v15 = OUTLINED_FUNCTION_1_30((uint64_t)objc_msgSend(a1, sel_topAnchor));

  *(void *)(v5 + 48) = v15;
  id v16 = objc_msgSend(a3, sel_leadingAnchor);
  id v17 = OUTLINED_FUNCTION_1_30((uint64_t)objc_msgSend(a1, sel_leadingAnchor));

  *(void *)(v5 + 16) = v17;
  id v18 = objc_msgSend(a3, sel_bottomAnchor);
  id v19 = OUTLINED_FUNCTION_1_30((uint64_t)objc_msgSend(a1, sel_bottomAnchor));

  *(void *)(v5 + 24) = v19;
  id v20 = objc_msgSend(a3, sel_widthAnchor);
  id v21 = objc_msgSend(v20, sel_constraintEqualToConstant_, 345.0);

  *(void *)(v5 + 32) = v21;
  InCallControlsViewConstraintManager.updateConstraints()();

  return v5;
}

uint64_t InCallControlsViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)(uint64_t a1)
{
  switch(*(void *)(a1 + 8))
  {
    case 0:
      OUTLINED_FUNCTION_50();
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v6 + 176);
      uint64_t v5 = 0;
      goto LABEL_6;
    case 1:
      OUTLINED_FUNCTION_50();
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v7 + 176);
      uint64_t v5 = 1;
LABEL_6:
      uint64_t v8 = 2;
      goto LABEL_9;
    case 2:
      OUTLINED_FUNCTION_50();
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 176);
      uint64_t v5 = 0x404D000000000000;
      goto LABEL_8;
    case 3:
      OUTLINED_FUNCTION_50();
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v9 + 176);
      uint64_t v5 = 0x4052C00000000000;
LABEL_8:
      uint64_t v8 = 0;
LABEL_9:
      v4(v5, v8);
      break;
    case 4:
    case 5:
    case 6:
      OUTLINED_FUNCTION_50();
      (*(void (**)(uint64_t, uint64_t))(v1 + 176))(v2, 1);
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1C300A9B4);
  }
  return swift_bridgeObjectRetain();
}

uint64_t InCallControlsViewConstraintManager.updateConstraints()()
{
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_50();
  double v3 = COERCE_DOUBLE((*(uint64_t (**)(void))(v2 + 168))());
  if (!v4)
  {
    uint64_t v6 = (void *)v0[7];
    objc_msgSend(v6, sel_setConstant_, -(v3 + 157.0));
LABEL_8:
    uint64_t v7 = (void *)v0[3];
    objc_msgSend(v7, sel_setConstant_, 0.0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769580;
    uint64_t v9 = (void *)v0[2];
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v7;
    id v10 = (void *)v0[4];
    *(void *)(v8 + 48) = v10;
    *(void *)(v8 + 56) = v6;
    uint64_t v53 = v8;
    uint64_t v11 = specialized Array._endMutation()();
    OUTLINED_FUNCTION_2_16(v11, v12, v13, v14, v15, v16, v17, v18, v52, v53);
    id v19 = v9;
    goto LABEL_14;
  }
  if (v4 == 1)
  {
    if ((*(void *)&v3 | 2) == 3) {
      uint64_t v5 = (id *)(v0 + 5);
    }
    else {
      uint64_t v5 = (id *)(v0 + 6);
    }
    id v10 = (void *)v0[3];
    id v38 = *v5;
    objc_msgSend(v10, sel_setConstant_, 0.0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_1C3769580;
    uint64_t v7 = (void *)v1[2];
    *(void *)(v39 + 32) = v7;
    *(void *)(v39 + 40) = v10;
    uint64_t v6 = (void *)v1[4];
    *(void *)(v39 + 48) = v6;
    *(void *)(v39 + 56) = v38;
    uint64_t v55 = v39;
    uint64_t v40 = specialized Array._endMutation()();
    OUTLINED_FUNCTION_2_16(v40, v41, v42, v43, v44, v45, v46, v47, v52, v55);
    goto LABEL_14;
  }
  uint64_t v6 = (void *)v0[7];
  if (v3 != 0.0)
  {
    objc_msgSend(v6, sel_setConstant_, -157.0);
    goto LABEL_8;
  }
  static Layout.MediaPip.padding.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v20 = static Defaults.shared;
  OUTLINED_FUNCTION_50();
  v21 += 48;
  id v22 = *v21;
  ((void (*)(void))*v21)();
  uint64_t v23 = static Platform.current.getter();
  uint64_t v24 = *(void (**)(uint64_t))(*(void *)v20 + 488);
  v24(v23);
  objc_msgSend(v6, sel_setConstant_, 16.0);
  uint64_t v25 = (void *)v1[3];
  double v26 = static Layout.MediaPip.padding.getter();
  v22(v26);
  uint64_t v27 = static Platform.current.getter();
  v24(v27);
  objc_msgSend(v25, sel_setConstant_, 173.0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C3769580;
  uint64_t v7 = (void *)v1[2];
  *(void *)(v28 + 32) = v6;
  *(void *)(v28 + 40) = v7;
  id v10 = (void *)v1[4];
  *(void *)(v28 + 48) = v10;
  *(void *)(v28 + 56) = v25;
  uint64_t v54 = v28;
  uint64_t v29 = specialized Array._endMutation()();
  OUTLINED_FUNCTION_2_16(v29, v30, v31, v32, v33, v34, v35, v36, v52, v54);
  id v37 = v6;
  uint64_t v6 = v25;
LABEL_14:
  id v48 = v7;
  id v49 = v10;
  id v50 = v6;
  return swift_bridgeObjectRelease();
}

id *InCallControlsViewConstraintManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InCallControlsViewConstraintManager.__deallocating_deinit()
{
  InCallControlsViewConstraintManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:) in conformance InCallControlsViewConstraintManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t sub_1C300AD94@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 168))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t type metadata accessor for InCallControlsViewConstraintManager()
{
  return self;
}

uint64_t method lookup function for InCallControlsViewConstraintManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsViewConstraintManager);
}

uint64_t dispatch thunk of InCallControlsViewConstraintManager.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of InCallControlsViewConstraintManager.type.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of InCallControlsViewConstraintManager.type.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of InCallControlsViewConstraintManager.__allocating_init(containingGuide:containingView:controlsView:type:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of InCallControlsViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t getEnumTagSinglePayload for InCallControlsViewConstraintManager.InCallControlsLayoutType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InCallControlsViewConstraintManager.InCallControlsLayoutType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for InCallControlsViewConstraintManager.InCallControlsLayoutType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for InCallControlsViewConstraintManager.InCallControlsLayoutType(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsViewConstraintManager.InCallControlsLayoutType()
{
  return &type metadata for InCallControlsViewConstraintManager.InCallControlsLayoutType;
}

id InCallControlsBaseCell.titleLabel.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_titleLabel);
}

id InCallControlsBaseCell.button.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_button);
}

uint64_t key path getter for InCallControlsBaseCell.isEnabled : InCallControlsBaseCell@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for InCallControlsBaseCell.isEnabled : InCallControlsBaseCell(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8))(*a1);
}

id InCallControlsBaseCell.isEnabled.didset(char a1)
{
  int v2 = a1 & 1;
  unsigned int v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isEnabled);
  id result = (id)swift_beginAccess();
  if (*v3 != v2) {
    return InCallControlsBaseCell.updateViews()();
  }
  return result;
}

uint64_t InCallControlsBaseCell.isEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

id InCallControlsBaseCell.isEnabled.setter(char a1)
{
  unsigned int v3 = (char *)(v1 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isEnabled);
  swift_beginAccess();
  char v4 = *v3;
  *unsigned int v3 = a1;
  return InCallControlsBaseCell.isEnabled.didset(v4);
}

void (*InCallControlsBaseCell.isEnabled.modify(void *a1))(uint64_t a1)
{
  unsigned int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  char v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isEnabled);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *v4;
  return InCallControlsBaseCell.isEnabled.modify;
}

void InCallControlsBaseCell.isEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  InCallControlsBaseCell.isEnabled.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t key path getter for InCallControlsBaseCell.delegate : InCallControlsBaseCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for InCallControlsBaseCell.delegate : InCallControlsBaseCell(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t InCallControlsBaseCell.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t InCallControlsBaseCell.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*InCallControlsBaseCell.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  unsigned int v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

void InCallControlsBaseCell.delegate.modify(uint64_t a1, char a2)
{
  unsigned int v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id InCallControlsBaseCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

uint64_t InCallControlsBaseCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v1 - 8);
  unsigned int v3 = (char *)&v95 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_titleLabel;
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  uint64_t v6 = v0;
  *(void *)&v0[v4] = objc_msgSend(v5, sel_init);
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_button;
  uint64_t v8 = type metadata accessor for InCallControlButton();
  uint64_t v100 = 0;
  memset(v99, 0, sizeof(v99));
  *(void *)&v6[v7] = OUTLINED_FUNCTION_2_17(37.0, v8, (uint64_t)v99, v9, v10, v11, v12, v13, v14, 1);
  v6[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isAccessiblityConstraintsEnabled] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelFirstBaselineLayoutConstraint] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelLastBaselineLayoutConstraint] = 0;
  v6[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isEnabled] = 1;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  uint64_t v15 = type metadata accessor for InCallControlsBaseCell();
  uint64_t v97 = v6;
  uint64_t v98 = v15;
  double v16 = OUTLINED_FUNCTION_6_2();
  id v19 = (char *)objc_msgSendSuper2(v17, v18, v16);
  if (static Platform.current.getter() == 2)
  {
    static UIBackgroundConfiguration.listPlainCell()();
    id v20 = objc_msgSend(self, sel_clearColor);
    UIBackgroundConfiguration.backgroundColor.setter();
  }
  else
  {
    static UIBackgroundConfiguration.listGroupedCell()();
    id v21 = objc_msgSend(self, sel_whiteColor);
    UIBackgroundConfiguration.backgroundColor.setter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
    static UIVibrancyEffect.inCallControlsEffect.getter();
    UIBackgroundConfiguration.visualEffect.setter();
  }
  uint64_t v22 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v22);
  MEMORY[0x1C8773CE0](v3);
  objc_msgSend(v19, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  uint64_t v23 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_titleLabel;
  uint64_t v24 = *(void **)&v19[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_titleLabel];
  uint64_t v25 = self;
  id v26 = v24;
  id v27 = objc_msgSend(v25, sel_conversationKit);
  v101._object = (void *)0xE000000000000000;
  v28._object = (void *)0x80000001C3793050;
  v28._countAndFlagsBits = 0xD000000000000011;
  v29.value._countAndFlagsBits = 0x61737265766E6F43;
  v29.value._object = (void *)0xEF74694B6E6F6974;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v101._countAndFlagsBits = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v101);

  outlined bridged method (mbnn) of @objc UILabel.text.setter(v31._countAndFlagsBits, (uint64_t)v31._object, v26);
  uint64_t v32 = one-time initialization token for tableViewCellTitleLabel;
  id v33 = *(id *)&v19[v23];
  if (v32 != -1) {
    swift_once();
  }
  objc_msgSend(v33, sel_setTextColor_, static Colors.InCallControls.tableViewCellTitleLabel);

  uint64_t v34 = *(void **)&v19[v23];
  uint64_t v35 = self;
  uint64_t v36 = *MEMORY[0x1E4FB28C8];
  id v37 = v34;
  id v38 = objc_msgSend(v35, sel_preferredFontForTextStyle_, v36);
  Class isa = UIFont.caseSensitive()().super.isa;

  objc_msgSend(v37, sel_setFont_, isa);
  uint64_t v40 = *(void **)&v19[v23];
  objc_msgSend(v40, sel_setAdjustsFontForContentSizeCategory_, 1);
  uint64_t v41 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_button;
  uint64_t v42 = *(void **)&v19[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_button];
  objc_msgSend(v42, sel_addTarget_action_forControlEvents_, v19, sel_didTapButton_, 64);
  id v43 = v40;
  id v44 = v42;
  objc_msgSend(v43, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v45 = OUTLINED_FUNCTION_8_13();
  objc_msgSend(v45, sel_addSubview_, v43);

  id v46 = v44;
  objc_msgSend(v46, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v47 = OUTLINED_FUNCTION_8_13();
  objc_msgSend(v47, sel_addSubview_, v46);

  id v48 = objc_msgSend(*(id *)&v19[v23], sel_firstBaselineAnchor);
  id v49 = OUTLINED_FUNCTION_8_13();
  id v50 = objc_msgSend(v49, sel_topAnchor);

  id v51 = objc_msgSend(v48, sel_constraintEqualToAnchor_, v50);
  uint64_t v52 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelFirstBaselineLayoutConstraint;
  uint64_t v53 = *(void **)&v19[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelFirstBaselineLayoutConstraint];
  *(void *)&v19[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelFirstBaselineLayoutConstraint] = v51;

  id v54 = OUTLINED_FUNCTION_8_13();
  id v55 = objc_msgSend(v54, sel_bottomAnchor);

  id v56 = objc_msgSend(*(id *)&v19[v23], sel_lastBaselineAnchor);
  id v57 = objc_msgSend(v55, sel_constraintEqualToAnchor_, v56);

  uint64_t v58 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelLastBaselineLayoutConstraint;
  uint64_t v59 = *(void **)&v19[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelLastBaselineLayoutConstraint];
  *(void *)&v19[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelLastBaselineLayoutConstraint] = v57;

  InCallControlsBaseCell.updateConstraintsConstants()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1C3769F40;
  uint64_t v61 = *(void **)&v19[v52];
  if (!v61)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v62 = result;
  *(void *)(result + 32) = v61;
  long long v63 = *(void **)&v19[v58];
  if (!v63)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  *(void *)(result + 40) = v63;
  long long v64 = *(void **)&v19[v23];
  id v65 = v61;
  id v66 = v63;
  id v67 = objc_msgSend(v64, sel_trailingAnchor);
  id v68 = [v19 (SEL)0x1F6EB6298];
  id v69 = objc_msgSend(v68, (SEL)&selRef_supportsDynamicSystemUI + 4);

  id v70 = objc_msgSend(v67, sel_constraintEqualToAnchor_constant_, v69, -10.0);
  *(void *)(v62 + 48) = v70;
  *(void *)&v99[0] = v62;
  specialized Array._endMutation()();
  unint64_t v71 = *(void *)&v99[0];
  id v72 = objc_msgSend(*(id *)&v19[v41], sel_leadingAnchor);
  id v73 = [v19 (SEL)0x1F6EB6298];
  id v74 = objc_msgSend(v73, (SEL)&selRef_shouldShowCallDetailsWhenReady + 2);

  id v96 = objc_msgSend(v72, sel_constraintEqualToAnchor_constant_, v74, 14.0);
  id v75 = objc_msgSend(*(id *)&v19[v41], sel_centerYAnchor);
  id v76 = [v19 (SEL)0x1F6EB6298];
  id v77 = objc_msgSend(v76, sel_centerYAnchor);

  uint64_t v78 = &selRef_ringButton;
  id v79 = objc_msgSend(v75, sel_constraintEqualToAnchor_, v77);

  id v80 = objc_msgSend(*(id *)&v19[v23], sel_leadingAnchor);
  id v81 = objc_msgSend(*(id *)&v19[v41], sel_trailingAnchor);
  id v82 = objc_msgSend(v80, sel_constraintEqualToAnchor_constant_, v81, 10.0);

  id v83 = objc_msgSend(v19, sel_separatorLayoutGuide);
  id v84 = objc_msgSend(v83, sel_leadingAnchor);

  id v85 = objc_msgSend(v19, sel_contentView);
  id v86 = objc_msgSend(v85, sel_leadingAnchor);

  id v87 = objc_msgSend(v84, sel_constraintEqualToAnchor_, v86);
  if (v71 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v88 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v88, 4))
  {
    __break(1u);
    goto LABEL_21;
  }
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v88 + 4, 1);
  specialized Array._endMutation()();
  uint64_t v78 = (char **)v96;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_31();
  if (v89) {
LABEL_21:
  }
    OUTLINED_FUNCTION_0_10();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v90 = v79;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_31();
  if (v89) {
    OUTLINED_FUNCTION_0_10();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v91 = v82;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_31();
  if (v89) {
    OUTLINED_FUNCTION_0_10();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v92 = v87;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_31();
  if (v89) {
    OUTLINED_FUNCTION_0_10();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v93 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class v94 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v93, sel_activateConstraints_, v94);

  return (uint64_t)v19;
}

id InCallControlsBaseCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsBaseCell.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_titleLabel;
  *(void *)&v1[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_button;
  uint64_t v4 = type metadata accessor for InCallControlButton();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  *(void *)&v1[v3] = OUTLINED_FUNCTION_2_17(37.0, v4, (uint64_t)v11, v5, v6, v7, v8, v9, v10, 1);
  v1[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isAccessiblityConstraintsEnabled] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelFirstBaselineLayoutConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelLastBaselineLayoutConstraint] = 0;
  v1[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isEnabled] = 1;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t InCallControlsBaseCell.didTapButton(_:)()
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

id InCallControlsBaseCell.updateViews()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C3769620;
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0);
  v2();
  uint64_t v3 = String.init<A>(reflecting:)();
  uint64_t v5 = v4;
  *(void *)(v1 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v1 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v5;
  os_log(_:dso:log:type:_:)();
  uint64_t v6 = swift_bridgeObjectRelease();
  id v7 = objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_titleLabel), sel_setEnabled_, ((uint64_t (*)(uint64_t))v2)(v6) & 1);
  id v8 = objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_button), sel_setEnabled_, ((uint64_t (*)(id))v2)(v7) & 1);
  return objc_msgSend(v0, sel_setUserInteractionEnabled_, ((uint64_t (*)(id))v2)(v8) & 1);
}

Swift::Void __swiftcall InCallControlsBaseCell.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v20.receiver = v1;
  v20.super_class = (Class)type metadata accessor for InCallControlsBaseCell();
  objc_msgSendSuper2(&v20, sel_traitCollectionDidChange_, isa);
  id v3 = objc_msgSend(v1, sel_traitCollection);
  if (isa) {
    Class isa = (Class)[(objc_class *)isa preferredContentSizeCategory];
  }
  id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);
  uint64_t v5 = v4;
  if (isa)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {

      swift_bridgeObjectRelease_n();
LABEL_21:

      return;
    }
    char v11 = OUTLINED_FUNCTION_3_1();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_21;
    }
  }
  else
  {
  }
  id v12 = objc_msgSend(v3, sel_preferredContentSizeCategory);
  char v13 = UIContentSizeCategory.isAccessibilityCategory.getter();

  if (!isa)
  {
LABEL_17:
    if ((v13 & 1) != *((unsigned char *)v1
                      + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isAccessiblityConstraintsEnabled))
      *((unsigned char *)v1 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isAccessiblityConstraintsEnabled) = v13 & 1;
    InCallControlsBaseCell.updateConstraintsConstants()();
    goto LABEL_21;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v19 = OUTLINED_FUNCTION_3_1();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      goto LABEL_17;
    }
  }

  if ((v13 & 1) != *((unsigned char *)v1
                    + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isAccessiblityConstraintsEnabled))
    *((unsigned char *)v1 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_isAccessiblityConstraintsEnabled) = v13 & 1;
}

void InCallControlsBaseCell.updateConstraintsConstants()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelFirstBaselineLayoutConstraint);
  if (!v1)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v2 = v0;
  uint64_t v3 = one-time initialization token for tableHeaderSingleLabelTopConstraintConstant;
  id v4 = v1;
  if (v3 != -1) {
    swift_once();
  }
  double v5 = *(double *)&static Fonts.InCallControls.tableHeaderSingleLabelTopConstraintConstant;
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_titleLabel);
  id v7 = objc_msgSend(v6, sel_font);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v8 = v7;
  NSLayoutConstraint.setConstant(_:scaledToFont:)(v7, v5);

  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_nameLabelLastBaselineLayoutConstraint);
  if (!v9)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  uint64_t v10 = one-time initialization token for tableHeaderSingleLabelBottomConstraintConstant;
  id v11 = v9;
  if (v10 != -1) {
    swift_once();
  }
  double v12 = *(double *)&static Fonts.InCallControls.tableHeaderSingleLabelBottomConstraintConstant;
  id v13 = objc_msgSend(v6, sel_font);
  if (!v13) {
    goto LABEL_15;
  }
  id v14 = v13;
  NSLayoutConstraint.setConstant(_:scaledToFont:)(v13, v12);
}

id InCallControlsBaseCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsBaseCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InCallControlsBaseCell()
{
  return self;
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *objc_super v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x1C8774500](v7, v9, a2 & 1, v5);
  *objc_super v2 = result;
  return result;
}

void outlined bridged method (mbnn) of @objc UILabel.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setText_, v4);
}

uint64_t method lookup function for InCallControlsBaseCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsBaseCell);
}

uint64_t dispatch thunk of InCallControlsBaseCell.isEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of InCallControlsBaseCell.isEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of InCallControlsBaseCell.isEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of InCallControlsBaseCell.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of InCallControlsBaseCell.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of InCallControlsBaseCell.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of InCallControlsBaseCellDelegate.inCallControlsBaseCellDidTapButton(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id SystemApertureEmptyTrailingView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id SystemApertureEmptyTrailingView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  swift_getObjectType();
  uint64_t v14 = v0;
  uint64_t v15 = type metadata accessor for SystemApertureEmptyTrailingView();
  double v1 = OUTLINED_FUNCTION_6_2();
  id v4 = objc_msgSendSuper2(v2, v3, v1);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v8 = OUTLINED_FUNCTION_1_22(4.8751e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v13);
    OUTLINED_FUNCTION_0_11();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v10, v11, "[SystemAperture] %{public}s created");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  return v4;
}

uint64_t type metadata accessor for SystemApertureEmptyTrailingView()
{
  return self;
}

id SystemApertureEmptyTrailingView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureEmptyTrailingView.init(coder:)()
{
}

id SystemApertureEmptyTrailingView.__deallocating_deinit()
{
  double v1 = v0;
  swift_getObjectType();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v5 = OUTLINED_FUNCTION_1_22(4.8751e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v11);
    OUTLINED_FUNCTION_0_11();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v7, v8, "[SystemAperture] %{public}s deinit");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  unint64_t v9 = (objc_class *)type metadata accessor for SystemApertureEmptyTrailingView();
  v12.receiver = v1;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, sel_dealloc);
}

CGSize __swiftcall SystemApertureEmptyTrailingView.sizeThatFits(_:)(CGSize a1)
{
  double v1 = 1.0;
  double v2 = 1.0;
  result.height = v2;
  result.width = v1;
  return result;
}

id SystemApertureEmptyTrailingView.sizeThatFits(_:for:)()
{
  return objc_msgSend(v0, sel_sizeThatFits_);
}

uint64_t method lookup function for SystemApertureEmptyTrailingView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureEmptyTrailingView);
}

uint64_t dispatch thunk of SystemApertureEmptyTrailingView.sizeThatFits(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t SystemApertureIconFactory.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  _s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOi0_((uint64_t)v2);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v2, v0 + 16, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  return v0;
}

uint64_t *SystemApertureIconFactory.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static SystemApertureIconFactory.shared;
}

uint64_t static SystemApertureIconFactory.shared.getter()
{
  type metadata accessor for SystemApertureIconFactory();
  return swift_initStaticObject();
}

uint64_t SystemApertureIconFactory.SymbolIcon.accessibilityLabel.getter()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v0 = unk_1EA37DFA0;
  double v1 = (void *)qword_1EA37DFA8;
  id v2 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v8._object = (void *)0xE000000000000000;
  v3._uint64_t countAndFlagsBits = 0x414C504552414853;
  v3._object = (void *)0xE900000000000059;
  v4.value._uint64_t countAndFlagsBits = v0;
  v4.value._object = v1;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v8)._countAndFlagsBits;
  swift_bridgeObjectRelease();

  return countAndFlagsBits;
}

BOOL SystemApertureIconFactory.SymbolIcon.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SystemApertureIconFactory.SymbolIcon.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

id SystemApertureIconFactory.CallDescriptor.statusSymbolAssetPackage.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    if (one-time initialization token for faceTimeVideo != -1) {
      swift_once();
    }
    Swift::Int v3 = &static AssetPackageDescriptor.faceTimeVideo;
  }
  else
  {
    if (*(unsigned char *)(v1 + 8))
    {
      uint64_t v5 = 0;
      uint64_t v4 = 0;
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      goto LABEL_11;
    }
    if (one-time initialization token for phoneInCall != -1) {
      swift_once();
    }
    Swift::Int v3 = &static AssetPackageDescriptor.phoneInCall;
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  unint64_t v6 = (void *)v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id result = v6;
LABEL_11:
  *a1 = v5;
  a1[1] = v4;
  a1[2] = (uint64_t)v6;
  a1[3] = v7;
  a1[4] = v8;
  return result;
}

unint64_t SystemApertureIconFactory.CallDescriptor.statusSymbolName.getter()
{
  unint64_t result = 0x69662E656E6F6870;
  uint64_t v2 = *v0;
  switch(*((unsigned char *)v0 + 8))
  {
    case 1:
LABEL_4:
      unint64_t result = 0x69662E6F65646976;
      break;
    case 2:
LABEL_2:
      unint64_t result = 0x616C706572616873;
      break;
    case 3:
      if (v2 != 1) {
        unint64_t result = 0x69662E6F65646976;
      }
      break;
    case 4:
      unint64_t result = 0x6F642E656E6F6870;
      switch(v2)
      {
        case 1:
        case 4:
          goto LABEL_4;
        case 2:
          unint64_t result = 0xD000000000000016;
          break;
        case 3:
          goto LABEL_2;
        case 5:
        case 7:
          unint64_t result = 0x6D726F6665766177;
          break;
        case 6:
          unint64_t result = 0x6E6964726F636572;
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

id SystemApertureIconFactory.CallDescriptor.statusSymbolTintColor.getter()
{
  switch(*(unsigned char *)(v0 + 8))
  {
    case 2:
      uint64_t v3 = *(void *)v0;
      uint64_t v1 = self;
      uint64_t v2 = &selRef_systemGreenColor;
      if (v3 == 13) {
        uint64_t v2 = &selRef_systemGrayColor;
      }
      break;
    case 3:
LABEL_7:
      uint64_t v1 = self;
      uint64_t v2 = &selRef_systemGrayColor;
      break;
    case 4:
      switch(*(void *)v0)
      {
        case 2:
          uint64_t v1 = self;
          uint64_t v2 = &selRef_systemIndigoColor;
          break;
        case 3:
        case 7:
          goto LABEL_2;
        case 5:
          uint64_t v1 = self;
          uint64_t v2 = &selRef_systemBlueColor;
          break;
        default:
          goto LABEL_7;
      }
      break;
    default:
LABEL_2:
      uint64_t v1 = self;
      uint64_t v2 = &selRef_systemGreenColor;
      break;
  }
  id v4 = [v1 *v2];
  return v4;
}

uint64_t SystemApertureIconFactory.CallDescriptor.symbolAccessibilityLabel.getter()
{
  switch(*(unsigned char *)(v1 + 8))
  {
    case 1:
    case 3:
      id v2 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_4_16();
      uint64_t v3 = 0x454D495445434146;
      uint64_t v4 = 0x4F454449565FLL;
LABEL_3:
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      goto LABEL_18;
    case 2:
LABEL_7:
      return SystemApertureIconFactory.SymbolIcon.accessibilityLabel.getter();
    case 4:
      switch(*(void *)v1)
      {
        case 1:
          id v9 = objc_msgSend(self, sel_conversationKit);
          uint64_t v3 = (unsigned __int16)OUTLINED_FUNCTION_19_12() | 0x4F454449565F0000;
          goto LABEL_11;
        case 2:
          id v10 = objc_msgSend(self, sel_conversationKit);
          OUTLINED_FUNCTION_4_16();
          uint64_t v3 = 0x535F4E4545524353;
          uint64_t v4 = 0x474E49524148;
          goto LABEL_3;
        case 3:
          goto LABEL_7;
        case 4:
          id v11 = objc_msgSend(self, sel_conversationKit);
          OUTLINED_FUNCTION_4_16();
          unint64_t v5 = 0x80000001C3793330;
          uint64_t v3 = 0xD000000000000017;
          goto LABEL_18;
        case 5:
          id v12 = objc_msgSend(self, sel_conversationKit);
          OUTLINED_FUNCTION_4_16();
          uint64_t v3 = 0x5F4F545F48535550;
          unint64_t v5 = 0xEC0000004B4C4154;
          goto LABEL_18;
        case 6:
          id v0 = objc_msgSend(self, sel_conversationKit);
          uint64_t v3 = 0xD000000000000018;
          unint64_t v18 = 0xE000000000000000;
          uint64_t v13 = "LIVE_VOICEMAIL_INDICATOR";
          goto LABEL_17;
        case 7:
          id v0 = objc_msgSend(self, sel_conversationKit);
          uint64_t v3 = 0xD00000000000001DLL;
          unint64_t v18 = 0xE000000000000000;
          uint64_t v13 = "GREENTEA3P_GROUP_CONVERSATION";
LABEL_17:
          unint64_t v5 = (unint64_t)(v13 - 32) | 0x8000000000000000;
          break;
        default:
          id v7 = objc_msgSend(self, sel_conversationKit);
          uint64_t v3 = (unsigned __int16)OUTLINED_FUNCTION_19_12() | 0x454E4F48505F0000;
LABEL_11:
          unint64_t v5 = 0xED00004C4C41435FLL;
          break;
      }
      goto LABEL_18;
    default:
      id v6 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_4_16();
      uint64_t v3 = 1280065859;
      unint64_t v5 = 0xE400000000000000;
LABEL_18:
      v14.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v14.value._object = (void *)0xEF74694B6E6F6974;
      v15._uint64_t countAndFlagsBits = 0;
      v15._object = (void *)0xE000000000000000;
      uint64_t v16 = 0;
      uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, v14, (NSBundle)v0, v15, *(Swift::String *)(&v18 - 1))._countAndFlagsBits;

      return countAndFlagsBits;
  }
}

double SystemApertureIconFactory.CallDescriptor.leadingOffsetForConcentricWhenCompact.getter()
{
  v2._uint64_t countAndFlagsBits = SystemApertureIconFactory.CallDescriptor.statusSymbolName.getter();
  BOOL v0 = SystemApertureIconFactory.SymbolIcon.init(rawValue:)(v2);
  double result = 0.0;
  if (!v0) {
    return 3.0;
  }
  return result;
}

void SystemApertureIconFactory.CallDescriptor.statusIcon.getter(int64x2_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(unsigned __int8 *)(v1 + 8);
  if (v4 == 1)
  {
    if (one-time initialization token for faceTimeVideo != -1) {
      swift_once();
    }
    unint64_t v5 = &static AssetPackageDescriptor.faceTimeVideo;
    goto LABEL_9;
  }
  if (!*(unsigned char *)(v1 + 8))
  {
    if (one-time initialization token for phoneInCall != -1) {
      swift_once();
    }
    unint64_t v5 = &static AssetPackageDescriptor.phoneInCall;
LABEL_9:
    uint64_t v6 = v5[1];
    id v33 = (void *)*v5;
    id v7 = (void *)v5[2];
    uint64_t v8 = v5[3];
    uint64_t v9 = v5[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    id v10 = v7;
    swift_bridgeObjectRetain();
    id v11 = v10;
    uint64_t v12 = SystemApertureIconFactory.CallDescriptor.symbolAccessibilityLabel.getter();
    uint64_t v14 = v13;
    uint64_t v34 = v3;
    char v35 = v4;
    v36._uint64_t countAndFlagsBits = SystemApertureIconFactory.CallDescriptor.statusSymbolName.getter();
    LOBYTE(v10) = SystemApertureIconFactory.SymbolIcon.init(rawValue:)(v36);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v15 = v4 == 1;
    uint64_t v16 = 0x4008000000000000;
    if (v10) {
      uint64_t v16 = 0;
    }
    int64x2_t v17 = vdupq_n_s64(1uLL);
    v17.i64[0] = v9;
    uint64_t v18 = v12;
    char v19 = v33;
    goto LABEL_29;
  }
  unint64_t v20 = SystemApertureIconFactory.CallDescriptor.statusSymbolName.getter();
  unint64_t v22 = v21;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v34 = v3;
  char v35 = v4;
  swift_bridgeObjectRetain();
  id v23 = SystemApertureIconFactory.CallDescriptor.statusSymbolTintColor.getter();
  id v24 = objc_msgSend(self, sel_configurationWithHierarchicalColor_, v23);

  id v25 = @nonobjc UIImage.init(_systemName:withConfiguration:)(v20, v22, v24);
  if (v25)
  {
    char v19 = v25;
    swift_bridgeObjectRelease();
    id v26 = v19;
    uint64_t v18 = SystemApertureIconFactory.CallDescriptor.symbolAccessibilityLabel.getter();
    uint64_t v14 = v27;
    uint64_t v34 = v3;
    char v35 = v4;
    v37._uint64_t countAndFlagsBits = SystemApertureIconFactory.CallDescriptor.statusSymbolName.getter();
    BOOL v28 = SystemApertureIconFactory.SymbolIcon.init(rawValue:)(v37);

    if ((v4 - 2) >= 2)
    {
      if (v4 == 4 && (unint64_t)(v3 - 1) < 6) {
        uint64_t v15 = qword_1C376A168[v3 - 1];
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 1;
    }
    uint64_t v6 = 0;
    id v11 = 0;
    uint64_t v8 = 0;
    uint64_t v16 = 0x4008000000000000;
    if (v28) {
      uint64_t v16 = 0;
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationControls);
    swift_bridgeObjectRetain();
    Swift::String v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v30, v31, "Unable to find systemImage for status: %s", v32, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char v19 = 0;
    uint64_t v6 = 0;
    id v11 = 0;
    uint64_t v8 = 0;
    uint64_t v18 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  int64x2_t v17 = 0uLL;
LABEL_29:
  a1->i64[0] = (uint64_t)v19;
  a1->i64[1] = v6;
  a1[1].i64[0] = (uint64_t)v11;
  a1[1].i64[1] = v8;
  a1[2] = v17;
  a1[3].i64[0] = v18;
  a1[3].i64[1] = v14;
  a1[4].i64[0] = v15;
  a1[4].i64[1] = v16;
}

uint64_t SystemApertureIconFactory.CallDescriptor.wantsPillForDetachedAppearance.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  if ((v1 - 1) < 3) {
    return 1;
  }
  if (v1 == 4 && *(void *)v0 < 7uLL) {
    return (0x5Eu >> *(void *)v0) & 1;
  }
  return 0;
}

id @nonobjc UIImage.init(_systemName:withConfiguration:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    int v4 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    int v4 = 0;
  }
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__systemImageNamed_withConfiguration_, v4, a3);

  return v5;
}

void SystemApertureIconFactory.CallDescriptor.activityIcon.getter(uint64_t a1@<X8>)
{
  unsigned int v5 = *(unsigned __int8 *)(v1 + 8);
  long long v6 = 0uLL;
  if (v5 > 2)
  {
    *(double *)v13.i64 = OUTLINED_FUNCTION_14_9();
  }
  else
  {
    unint64_t v7 = 0xEA00000000006574;
    uint64_t v8 = *(void *)v1;
    uint64_t v9 = 6516580;
    unint64_t v10 = 0x6F6E2E636973756DLL;
    unint64_t v11 = 0xE300000000000000;
    Swift::String v2 = 0;
    uint64_t v3 = 0;
    uint64_t v12 = 0;
    int64x2_t v13 = 0uLL;
    switch(*(void *)v1)
    {
      case 1u:
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_13;
      case 4u:
        unint64_t v7 = 0xE700000000000000;
        unint64_t v10 = 0x76742E79616C70;
        goto LABEL_13;
      case 5u:
        unint64_t v7 = 0xEA00000000006E75;
        unint64_t v10 = 0x722E657275676966;
        goto LABEL_13;
      case 6u:
        unint64_t v7 = 0x80000001C3793350;
        unint64_t v10 = 0xD000000000000028;
        goto LABEL_13;
      case 7u:
        unint64_t v7 = 0xE600000000000000;
        unint64_t v10 = 0x74656B636F72;
        goto LABEL_13;
      case 8u:
        unint64_t v7 = 0xE300000000000000;
        unint64_t v10 = 6775138;
        goto LABEL_13;
      case 9u:
        unint64_t v7 = 0xE400000000000000;
        unint64_t v10 = 1802465122;
        goto LABEL_13;
      case 0xAu:
        unint64_t v7 = 0xE500000000000000;
        unint64_t v10 = 0x65626F6C67;
        goto LABEL_13;
      case 0xBu:
        unint64_t v7 = 0xEE006C6163697472;
        unint64_t v10 = 0x65762E736B6F6F62;
        goto LABEL_13;
      case 0xCu:
        unint64_t v7 = 0xE800000000000000;
        unint64_t v10 = 0x656C626269726373;
LABEL_13:
        uint64_t v9 = v10;
        unint64_t v11 = v7;
LABEL_14:
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        uint64_t v14 = self;
        swift_bridgeObjectRetain();
        Swift::String v2 = objc_msgSend(v14, sel_systemGrayColor);
        id v15 = objc_msgSend(self, sel_configurationWithHierarchicalColor_, v2);

        uint64_t v16 = @nonobjc UIImage.init(_systemName:withConfiguration:)(v9, v11, v15);
        if (v16)
        {
          Swift::String v2 = v16;
          swift_bridgeObjectRelease();
          int64x2_t v17 = v2;
          uint64_t v3 = SystemApertureIconFactory.CallDescriptor.symbolAccessibilityLabel.getter();
          uint64_t v19 = v18;
          uint64_t v24 = v8;
          char v25 = v5;
          v27._uint64_t countAndFlagsBits = SystemApertureIconFactory.CallDescriptor.statusSymbolName.getter();
          BOOL v20 = SystemApertureIconFactory.SymbolIcon.init(rawValue:)(v27);

          if (v20) {
            uint64_t v12 = 0;
          }
          else {
            uint64_t v12 = 0x4008000000000000;
          }
          int64x2_t v13 = vdupq_n_s64(1uLL);
          v13.i64[0] = v19;
        }
        else
        {
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v21 = type metadata accessor for Logger();
          __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationControls);
          swift_bridgeObjectRetain();
          unint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.error.getter();
          uint64_t v3 = v23;
          if (os_log_type_enabled(v22, v23))
          {
            Swift::String v2 = (_DWORD *)swift_slowAlloc();
            uint64_t v24 = swift_slowAlloc();
            *Swift::String v2 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v24);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2F90000, v22, (os_log_type_t)v3, "Unable to find systemImage for activity: %s", (uint8_t *)v2, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          *(double *)v13.i64 = OUTLINED_FUNCTION_14_9();
        }
        long long v6 = 0uLL;
        break;
      default:
        break;
    }
  }
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v3;
  *(int64x2_t *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v12;
}

void SystemApertureIconFactory.CallDescriptor.activityType.getter(unsigned char *a1@<X8>)
{
  LOBYTE(v2) = 13;
  switch(*((unsigned char *)v1 + 8))
  {
    case 3:
    case 4:
      break;
    default:
      uint64_t v2 = *v1;
      break;
  }
  *a1 = v2;
}

BOOL static SystemApertureIconFactory.CallDescriptor.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  switch(*((unsigned char *)a1 + 8))
  {
    case 1:
      if (v4 == 1) {
        goto LABEL_15;
      }
      return 0;
    case 2:
      if (v4 != 2) {
        return 0;
      }
      uint64_t v5 = *a2;
      if (*a1 == 13)
      {
        if (v5 != 13) {
          return 0;
        }
        __int16 v6 = v3 ^ v2;
      }
      else
      {
        if (v5 == 13) {
          return 0;
        }
        __int16 v6 = v3 ^ v2;
        if ((_BYTE)v6) {
          return 0;
        }
      }
      return (v6 & 0xFF00) == 0;
    case 3:
      if (v4 != 3) {
        return 0;
      }
      return v2 == v3;
    case 4:
      switch(v2)
      {
        case 1:
          return v4 == 4 && v3 == 1;
        case 2:
          return v4 == 4 && v3 == 2;
        case 3:
          return v4 == 4 && v3 == 3;
        case 4:
          return v4 == 4 && v3 == 4;
        case 5:
          return v4 == 4 && v3 == 5;
        case 6:
          return v4 == 4 && v3 == 6;
        case 7:
          return v4 == 4 && v3 == 7;
        default:
          return v4 == 4 && v3 == 0;
      }
    default:
      if (*((unsigned char *)a2 + 8)) {
        return 0;
      }
LABEL_15:
      uint64_t v8 = *a2;
      if (*a1 != 13)
      {
        uint64_t v10 = (v3 ^ v2);
        return v8 != 13 && v10 == 0;
      }
      return v8 == 13;
  }
}

BOOL static SystemApertureIconFactory.CallState.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SystemApertureIconFactory.CallState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SystemApertureIconFactory.CallState(char *a1, char *a2)
{
  return static SystemApertureIconFactory.CallState.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SystemApertureIconFactory.CallState()
{
  return SystemApertureIconFactory.CallState.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SystemApertureIconFactory.CallState(uint64_t a1)
{
  SystemApertureIconFactory.CallState.hash(into:)(a1, *v1);
}

uint64_t SystemApertureIconFactory.makeStatusIcon(with:for:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  if (!a1) {
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x270))();
  }
  __int16 v6 = *(uint64_t (**)(uint64_t))((*v5 & *a2) + 0x290);
  uint64_t v7 = swift_unknownObjectRetain();
  uint64_t v8 = v6(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    *((void *)&v12 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    int64x2_t v13 = &protocol witness table for TUConversation;
    *(void *)&long long v11 = v9;
  }
  else
  {
    int64x2_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  SystemApertureIconFactory.makeStatusIcon(for:conversation:)();
  swift_unknownObjectRelease();
  outlined destroy of Conversation?((uint64_t)&v11, &demangling cache variable for type metadata for Conversation?);
  return outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v14, a3, &demangling cache variable for type metadata for SystemApertureIcon?);
}

void SystemApertureIconFactory.makeStatusIcon(for:conversation:)()
{
  uint64_t v2 = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v0 + 144))(&v101);
  unsigned __int8 v3 = v102;
  if (v102 == 255) {
    goto LABEL_7;
  }
  uint64_t v4 = v101;
  OUTLINED_FUNCTION_9_11((uint64_t)v2, (uint64_t)v99);
  OUTLINED_FUNCTION_16_9((uint64_t)v99);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  uint64_t v5 = _s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOg((uint64_t)v100);
  if (v5 == 1
    || (OUTLINED_FUNCTION_11_11(v5, v6, v7, v8, v9, v10, v11, v12, v40, v41, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v48,
          v49,
          v50,
          v51,
          v52,
          v53,
          v54,
          v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62,
          v63,
          v64,
          v65,
          v66,
          v67,
          v68,
          v69,
          v70),
        outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v99, (uint64_t)&v92, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?), outlined retain of SystemApertureIconFactory.SystemApertureIconSet((uint64_t)&v92), int64x2_t v13 = outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?), v97 = v4, v98 = v3, v1 == 255)|| (v21 = OUTLINED_FUNCTION_13_4((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20,
                v40,
                v41,
                v42,
                *((uint64_t *)&v42 + 1),
                v43,
                *((uint64_t *)&v43 + 1),
                v44,
                *((uint64_t *)&v44 + 1),
                v45,
                *((uint64_t *)&v45 + 1),
                v48,
                v49,
                v50,
                v51,
                v52,
                v53,
                v54,
                v55,
                v56,
                v57,
                v58,
                v59,
                v60,
                v61,
                v62,
                v63,
                v64,
                v65,
                v66,
                v67,
                v68,
                v69,
                v70,
                v71,
                (uint64_t)v72,
                v73,
                v74,
                v75,
                v76,
                v77,
                v78,
                v79,
                v80,
                v81,
                v82,
                v83,
                v84,
                v85,
                v86,
                v87,
                v88,
                v89,
                v90,
                v91,
                v92),
        (v21 & 1) == 0))
  {
    OUTLINED_FUNCTION_15_9();
    OUTLINED_FUNCTION_1_32();
    uint64_t v30 = OUTLINED_FUNCTION_0_12(v22, v23, v24, v25, v26, v27, v28, v29, v40, v41, v42, v43, v44, v45, v48, v49, v50, v51, v52,
            v53,
            v54,
            v55,
            v56,
            v57,
            v58,
            v59,
            v60,
            v61,
            v62,
            v63,
            v64,
            v65,
            v66,
            v67,
            v68,
            v69,
            v70,
            v71,
            (uint64_t)v72,
            v73,
            v74,
            v75,
            v76,
            v77,
            v78,
            v79,
            v80,
            v81,
            v82,
            v83,
            v84,
            v85,
            v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92,
            v93,
            v94,
            v95,
            v96);
    OUTLINED_FUNCTION_9_11(v30, (uint64_t)&v97);
    outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v92, v0 + 16, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
    uint64_t v21 = (uint64_t)outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v97, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?);
  }
  OUTLINED_FUNCTION_9_11(v21, (uint64_t)&v92);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v92, (uint64_t)&v70, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  OUTLINED_FUNCTION_16_9((uint64_t)&v92);
  if (_s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOg((uint64_t)&v97) == 1)
  {
LABEL_7:
    OUTLINED_FUNCTION_2_18();
  }
  else
  {
    id v46 = v72;
    outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v70, (uint64_t)&v48, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
    uint64_t v32 = outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of SystemApertureIconFactory.SystemApertureIconSet?);
    OUTLINED_FUNCTION_3_32((uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v46);
    outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?);
    uint64_t v31 = v47;
  }
  OUTLINED_FUNCTION_8_14(v31);
}

uint64_t SystemApertureIconFactory.makeActivityIcon(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
  uint64_t v9 = v8;
  uint64_t v10 = (*(uint64_t (**)(void))((*v6 & *a1) + 0x290))();
  if (v10)
  {
    uint64_t v11 = v10;
    *((void *)&v14 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    uint64_t v15 = &protocol witness table for TUConversation;
    *(void *)&long long v13 = v11;
  }
  else
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, long long *))(*(void *)v3 + 136))(v16, v7, v9, &v13);
  swift_unknownObjectRelease();
  outlined destroy of Conversation?((uint64_t)&v13, &demangling cache variable for type metadata for Conversation?);
  return outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v16, a2, &demangling cache variable for type metadata for SystemApertureIcon?);
}

void SystemApertureIconFactory.makeActivityIcon(for:conversation:)()
{
  uint64_t v2 = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v0 + 144))(&v101);
  unsigned __int8 v3 = v102;
  if (v102 == 255) {
    goto LABEL_7;
  }
  uint64_t v4 = v101;
  OUTLINED_FUNCTION_9_11((uint64_t)v2, (uint64_t)v99);
  OUTLINED_FUNCTION_16_9((uint64_t)v99);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  uint64_t v5 = _s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOg((uint64_t)v100);
  if (v5 == 1
    || (OUTLINED_FUNCTION_11_11(v5, v6, v7, v8, v9, v10, v11, v12, v40, v41, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v48,
          v49,
          v50,
          v51,
          v52,
          v53,
          v54,
          v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62,
          v63,
          v64,
          v65,
          v66,
          v67,
          v68,
          v69,
          v70),
        outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v99, (uint64_t)&v92, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?), outlined retain of SystemApertureIconFactory.SystemApertureIconSet((uint64_t)&v92), long long v13 = outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?), v97 = v4, v98 = v3, v1 == 255)|| (v21 = OUTLINED_FUNCTION_13_4((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20,
                v40,
                v41,
                v42,
                *((uint64_t *)&v42 + 1),
                v43,
                *((uint64_t *)&v43 + 1),
                v44,
                *((uint64_t *)&v44 + 1),
                v45,
                *((uint64_t *)&v45 + 1),
                v48,
                v49,
                v50,
                v51,
                v52,
                v53,
                v54,
                v55,
                v56,
                v57,
                v58,
                v59,
                v60,
                v61,
                v62,
                v63,
                v64,
                v65,
                v66,
                v67,
                v68,
                v69,
                v70,
                v71,
                v72,
                v73,
                v74,
                v75,
                v76,
                v77,
                v78,
                v79,
                v80,
                v81,
                (uint64_t)v82,
                v83,
                v84,
                v85,
                v86,
                v87,
                v88,
                v89,
                v90,
                v91,
                v92),
        (v21 & 1) == 0))
  {
    OUTLINED_FUNCTION_15_9();
    OUTLINED_FUNCTION_1_32();
    uint64_t v30 = OUTLINED_FUNCTION_0_12(v22, v23, v24, v25, v26, v27, v28, v29, v40, v41, v42, v43, v44, v45, v48, v49, v50, v51, v52,
            v53,
            v54,
            v55,
            v56,
            v57,
            v58,
            v59,
            v60,
            v61,
            v62,
            v63,
            v64,
            v65,
            v66,
            v67,
            v68,
            v69,
            v70,
            v71,
            v72,
            v73,
            v74,
            v75,
            v76,
            v77,
            v78,
            v79,
            v80,
            v81,
            (uint64_t)v82,
            v83,
            v84,
            v85,
            v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92,
            v93,
            v94,
            v95,
            v96);
    OUTLINED_FUNCTION_9_11(v30, (uint64_t)&v97);
    outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v92, v0 + 16, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
    uint64_t v21 = (uint64_t)outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v97, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?);
  }
  OUTLINED_FUNCTION_9_11(v21, (uint64_t)&v92);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v92, (uint64_t)&v70, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  OUTLINED_FUNCTION_16_9((uint64_t)&v92);
  if (_s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOg((uint64_t)&v97) == 1)
  {
LABEL_7:
    OUTLINED_FUNCTION_2_18();
  }
  else
  {
    id v46 = v82;
    outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v70, (uint64_t)&v48, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
    uint64_t v32 = outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of SystemApertureIconFactory.SystemApertureIconSet?);
    OUTLINED_FUNCTION_3_32((uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v46);
    outlined release of SystemApertureIconFactory.SystemApertureIconSet?(&v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?);
    uint64_t v31 = v47;
  }
  OUTLINED_FUNCTION_8_14(v31);
}

void SystemApertureIconFactory.callDescriptor(for:conversation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v61 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  long long v13 = (char *)&v60 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v60 - v14;
  outlined init with copy of Conversation?(a3, (uint64_t)v64);
  uint64_t v16 = v65;
  if (v65)
  {
    uint64_t v17 = OUTLINED_FUNCTION_5_24(v64);
    uint64_t v16 = (void *)Conversation.currentSharePlayActivity.getter(v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)v64, &demangling cache variable for type metadata for Conversation?);
  }
  outlined init with copy of Conversation?(a3, (uint64_t)v64);
  uint64_t v19 = (uint64_t)v65;
  if (v65)
  {
    uint64_t v20 = v66;
    __swift_project_boxed_opaque_existential_1(v64, (uint64_t)v65);
    Conversation.currentCollaboration.getter(v19, v20, (uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)v64, &demangling cache variable for type metadata for Conversation?);
    uint64_t v21 = type metadata accessor for Collaboration(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v21);
  }
  unsigned __int8 v22 = SystemApertureIconFactory.mediaType(for:conversation:)(a1, a2, a3);
  char v23 = SystemApertureIconFactory.callState(for:)(a1, a2);
  if (v16)
  {
    id v24 = v16;
    TUConversationActivitySession.generateType.getter((char *)v64);
    if (LOBYTE(v64[0]) == 6)
    {
      unsigned int v25 = objc_msgSend(v24, sel_isLocallyInitiated);

      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
      uint64_t v26 = 2;
      if (!v25) {
        uint64_t v26 = 3;
      }
LABEL_14:
      OUTLINED_FUNCTION_12_12(v26);
LABEL_15:
      char v30 = 4;
      goto LABEL_18;
    }

    id v31 = v24;
    TUConversationActivitySession.generateType.getter((char *)v64);

    outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
    unint64_t v32 = LOBYTE(v64[0]) | ((unint64_t)v22 << 8);
    goto LABEL_17;
  }
  char v27 = v23;
  uint64_t ObjectType = swift_getObjectType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 216))(ObjectType, a2))
  {
    outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
    uint64_t v26 = 5;
    goto LABEL_14;
  }
  uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(ObjectType, a2);
  unsigned int v34 = objc_msgSend(v33, sel_supportsDynamicSystemUI);

  if (v34)
  {
    id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
    unsigned int v36 = objc_msgSend(v35, sel_groupConversations);

    if (v36)
    {
      if (TUDeviceHasChinaSKU())
      {
        outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
        uint64_t v26 = 7;
        goto LABEL_14;
      }
    }
  }
  if (!v22)
  {
    outlined init with copy of Conversation?(a3, (uint64_t)&v62);
    if (v63)
    {
      outlined init with take of Notice(&v62, (uint64_t)v64);
      uint64_t v37 = OUTLINED_FUNCTION_5_24(v64);
      if (Conversation.isContinuitySession.getter(v37, v38))
      {
        OUTLINED_FUNCTION_10_13();
        uint64_t v39 = OUTLINED_FUNCTION_6_13();
        uint64_t v41 = v40(v39);
        outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
        long long v42 = v61;
        *uint64_t v61 = v41;
        char v43 = 3;
LABEL_47:
        *((unsigned char *)v42 + 8) = v43;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        return;
      }
      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    }
    else
    {
      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
      outlined destroy of Conversation?((uint64_t)&v62, &demangling cache variable for type metadata for Conversation?);
    }
    unint64_t v32 = 13;
LABEL_17:
    OUTLINED_FUNCTION_12_12(v32);
    char v30 = 2;
LABEL_18:
    *((unsigned char *)v29 + 8) = v30;
    return;
  }
  if (v22 != 1)
  {
    switch(v27)
    {
      case 0:
LABEL_35:
        outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
        OUTLINED_FUNCTION_12_12(4);
        *(unsigned char *)(v45 + 8) = v44;
        return;
      case 2:
        outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for Collaboration?);
        uint64_t v48 = type metadata accessor for Collaboration(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v48) == 1)
        {
          outlined destroy of Conversation?((uint64_t)v13, &demangling cache variable for type metadata for Collaboration?);
          OUTLINED_FUNCTION_12_12(13);
          *(unsigned char *)(v49 + 8) = 1;
        }
        else
        {
          uint64_t v58 = v13[17];
          outlined destroy of Collaboration((uint64_t)v13);
          uint64_t v59 = v61;
          *uint64_t v61 = v58;
          *((unsigned char *)v59 + 8) = 1;
        }
        return;
      case 1:
        outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
        uint64_t v26 = 1;
        goto LABEL_14;
    }
    outlined init with copy of Conversation?(a3, (uint64_t)&v62);
    if (v63)
    {
      outlined init with take of Notice(&v62, (uint64_t)v64);
      OUTLINED_FUNCTION_10_13();
      uint64_t v50 = OUTLINED_FUNCTION_6_13();
      uint64_t v52 = (void *)v51(v50);

      if (v52)
      {
        OUTLINED_FUNCTION_10_13();
        uint64_t v53 = OUTLINED_FUNCTION_6_13();
        BOOL v55 = v54(v53) != 1;
        outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
        long long v42 = v61;
        *uint64_t v61 = v55;
        char v43 = 4;
        goto LABEL_47;
      }
      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    }
    else
    {
      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
      outlined destroy of Conversation?((uint64_t)&v62, &demangling cache variable for type metadata for Conversation?);
    }
    uint64_t v29 = v61;
    *uint64_t v61 = 0;
    char v30 = -1;
    goto LABEL_18;
  }
  switch(v27)
  {
    case 1:
      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
      uint64_t v29 = v61;
      *uint64_t v61 = 0;
      goto LABEL_15;
    case 2:
      outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v15, (uint64_t)v10, &demangling cache variable for type metadata for Collaboration?);
      uint64_t v46 = type metadata accessor for Collaboration(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v46) == 1)
      {
        outlined destroy of Conversation?((uint64_t)v10, &demangling cache variable for type metadata for Collaboration?);
        OUTLINED_FUNCTION_12_12(13);
        *(unsigned char *)(v47 + 8) = 0;
      }
      else
      {
        uint64_t v56 = v10[17];
        outlined destroy of Collaboration((uint64_t)v10);
        uint64_t v57 = v61;
        *uint64_t v61 = v56;
        *((unsigned char *)v57 + 8) = 0;
      }
      break;
    case 3:
      outlined destroy of Conversation?((uint64_t)v15, &demangling cache variable for type metadata for Collaboration?);
      uint64_t v26 = 6;
      goto LABEL_14;
    default:
      goto LABEL_35;
  }
}

uint64_t SystemApertureIconFactory.callState(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(a2 + 184))(ObjectType, a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 136))(ObjectType, a2)) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t SystemApertureIconFactory.mediaType(for:conversation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of Conversation?(a3, (uint64_t)&v12);
  if (v13)
  {
    outlined init with take of Notice(&v12, (uint64_t)v14);
    __swift_project_boxed_opaque_existential_1(v14, v15);
    uint64_t v4 = OUTLINED_FUNCTION_7_12();
    if (!v5(v4)) {
      goto LABEL_11;
    }
    OUTLINED_FUNCTION_5_24(v14);
    uint64_t v6 = Conversation.avModeForSystemAperture.getter();
    if (v6 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      return 2;
    }
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      return 1;
    }
    if (v6)
    {
      *(void *)&long long v12 = 0;
      *((void *)&v12 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      *(void *)&long long v12 = 0xD000000000000021;
      *((void *)&v12 + 1) = 0x80000001C3793400;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      uint64_t v9 = OUTLINED_FUNCTION_7_12();
      v10(v9);
      v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      return 0;
    }
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)&v12, &demangling cache variable for type metadata for Conversation?);
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 376))(ObjectType, a2)) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t SystemApertureIconFactory.deinit()
{
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(v0 + 16, (uint64_t)v2, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  outlined release of SystemApertureIconFactory.SystemApertureIconSet?(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?);
  return v0;
}

uint64_t SystemApertureIconFactory.__deallocating_deinit()
{
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(v0 + 16, (uint64_t)v2, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  outlined release of SystemApertureIconFactory.SystemApertureIconSet?(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of SystemApertureIconFactory.SystemApertureIconSet?);
  return swift_deallocClassInstance();
}

uint64_t SystemApertureIconFactory.init()()
{
  _s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOi0_((uint64_t)v2);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v2, v0 + 16, &demangling cache variable for type metadata for SystemApertureIconFactory.SystemApertureIconSet?);
  return v0;
}

double _s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return result;
}

uint64_t type metadata accessor for SystemApertureIconFactory()
{
  return self;
}

uint64_t _s15ConversationKit25SystemApertureIconFactoryC0cdE3Set33_15DC8AE79B2F79D7CD5A12680A8D832BLLVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined retain of SystemApertureIconFactory.SystemApertureIconSet(uint64_t a1)
{
  uint64_t v10 = *(void **)(a1 + 96);
  uint64_t v2 = *(void *)(a1 + 104);
  unsigned __int8 v3 = *(void **)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  outlined copy of SystemApertureIcon?(*(void **)(a1 + 16), *(void *)(a1 + 24), *(void **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72));
  outlined copy of SystemApertureIcon?(v10, v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

void *outlined copy of SystemApertureIcon?(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    outlined copy of SystemApertureIconAsset(result, a2, a3, a4, a5, a6 & 1);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

id outlined copy of SystemApertureIconAsset(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1 = a3;
    uint64_t v6 = vars8;
  }
  return a1;
}

void outlined consume of SystemApertureIconFactory.SystemApertureIconSet?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a10 != 1)
  {
    outlined consume of SystemApertureIcon?(a3, a4, a5, a6, a7, a8, a9, a10);
    outlined consume of SystemApertureIcon?(a13, a14, a15, a16, a17, a18, a19, a20);
  }
}

void *outlined consume of SystemApertureIcon?(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    outlined consume of SystemApertureIconAsset(result, a2, a3, a4, a5, a6 & 1);
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void outlined consume of SystemApertureIconAsset(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

void *outlined release of SystemApertureIconFactory.SystemApertureIconSet?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return a1;
}

void outlined copy of SystemApertureIconFactory.SystemApertureIconSet?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a10 != 1)
  {
    outlined copy of SystemApertureIcon?(a3, a4, a5, a6, a7, a8, a9, a10);
    outlined copy of SystemApertureIcon?(a13, a14, a15, a16, a17, a18, a19, a20);
  }
}

uint64_t outlined init with copy of Conversation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conversation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Conversation?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Collaboration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Collaboration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SystemApertureIconFactory.CallState and conformance SystemApertureIconFactory.CallState()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemApertureIconFactory.CallState and conformance SystemApertureIconFactory.CallState;
  if (!lazy protocol witness table cache variable for type SystemApertureIconFactory.CallState and conformance SystemApertureIconFactory.CallState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemApertureIconFactory.CallState and conformance SystemApertureIconFactory.CallState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemApertureIconFactory.MediaType and conformance SystemApertureIconFactory.MediaType()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemApertureIconFactory.MediaType and conformance SystemApertureIconFactory.MediaType;
  if (!lazy protocol witness table cache variable for type SystemApertureIconFactory.MediaType and conformance SystemApertureIconFactory.MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemApertureIconFactory.MediaType and conformance SystemApertureIconFactory.MediaType);
  }
  return result;
}

uint64_t method lookup function for SystemApertureIconFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureIconFactory);
}

uint64_t dispatch thunk of SystemApertureIconFactory.makeStatusIcon(with:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SystemApertureIconFactory.makeActivityIcon(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SystemApertureIconFactory.makeActivityIcon(for:conversation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SystemApertureIconFactory.callDescriptor(for:conversation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SystemApertureIconFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t getEnumTagSinglePayload for SystemApertureIconFactory.CallDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SystemApertureIconFactory.CallDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SystemApertureIconFactory.CallDescriptor(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 8);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SystemApertureIconFactory.CallDescriptor(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void type metadata accessor for SystemApertureIconFactory.CallDescriptor()
{
}

uint64_t getEnumTagSinglePayload for SystemApertureIconFactory.CallState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SystemApertureIconFactory.CallState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C300FEECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for SystemApertureIconFactory.CallState()
{
}

unsigned char *storeEnumTagSinglePayload for SystemApertureIconFactory.MediaType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C300FFECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for SystemApertureIconFactory.MediaType()
{
}

uint64_t destroy for SystemApertureIconFactory.SystemApertureIconSet(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 72))
  {
    outlined consume of SystemApertureIconAsset(*(void **)(result + 16), *(void *)(result + 24), *(void **)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(unsigned char *)(result + 56));
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(v1 + 152))
  {
    outlined consume of SystemApertureIconAsset(*(void **)(v1 + 96), *(void *)(v1 + 104), *(void **)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 128), *(unsigned char *)(v1 + 136));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SystemApertureIconFactory.SystemApertureIconSet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 72);
  if (v4)
  {
    uint64_t v5 = *(void **)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 24);
    BOOL v7 = *(void **)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    char v10 = *(unsigned char *)(a2 + 56);
    outlined copy of SystemApertureIconAsset(v5, v6, v7, v8, v9, v10);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v4;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x50uLL);
  }
  uint64_t v11 = *(void *)(a2 + 152);
  if (v11)
  {
    long long v12 = *(void **)(a2 + 96);
    uint64_t v13 = *(void *)(a2 + 104);
    uint64_t v14 = *(void **)(a2 + 112);
    uint64_t v15 = *(void *)(a2 + 120);
    uint64_t v16 = *(void *)(a2 + 128);
    char v17 = *(unsigned char *)(a2 + 136);
    outlined copy of SystemApertureIconAsset(v12, v13, v14, v15, v16, v17);
    *(void *)(a1 + 96) = v12;
    *(void *)(a1 + 104) = v13;
    *(void *)(a1 + 112) = v14;
    *(void *)(a1 + 120) = v15;
    *(void *)(a1 + 128) = v16;
    *(unsigned char *)(a1 + 136) = v17;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v11;
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 0x50uLL);
  }
  return a1;
}

uint64_t assignWithCopy for SystemApertureIconFactory.SystemApertureIconSet(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t v6 = a2 + 2;
  uint64_t v7 = a2[9];
  if (*(void *)(a1 + 72))
  {
    if (v7)
    {
      uint64_t v8 = (void *)a2[2];
      uint64_t v9 = a2[3];
      char v10 = (void *)a2[4];
      uint64_t v11 = a2[5];
      uint64_t v12 = a2[6];
      char v13 = *((unsigned char *)a2 + 56);
      outlined copy of SystemApertureIconAsset(v8, v9, v10, v11, v12, v13);
      uint64_t v14 = *(void **)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      uint64_t v16 = *(void **)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = *(void *)(a1 + 48);
      char v19 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      *(void *)(a1 + 48) = v12;
      *(unsigned char *)(a1 + 56) = v13;
      outlined consume of SystemApertureIconAsset(v14, v15, v16, v17, v18, v19);
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      *(void *)(a1 + 88) = a2[11];
      goto LABEL_8;
    }
    outlined destroy of SystemApertureIcon(a1 + 16);
  }
  else if (v7)
  {
    uint64_t v20 = (void *)a2[2];
    uint64_t v21 = a2[3];
    unsigned __int8 v22 = (void *)a2[4];
    uint64_t v23 = a2[5];
    uint64_t v24 = a2[6];
    char v25 = *((unsigned char *)a2 + 56);
    outlined copy of SystemApertureIconAsset(v20, v21, v22, v23, v24, v25);
    *(void *)(a1 + 16) = v20;
    *(void *)(a1 + 24) = v21;
    *(void *)(a1 + 32) = v22;
    *(void *)(a1 + 40) = v23;
    *(void *)(a1 + 48) = v24;
    *(unsigned char *)(a1 + 56) = v25;
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = a2[9];
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    *(void *)(a1 + 88) = a2[11];
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy(v5, v6, 0x50uLL);
LABEL_8:
  uint64_t v26 = a2[19];
  if (!*(void *)(a1 + 152))
  {
    if (v26)
    {
      uint64_t v39 = (void *)a2[12];
      uint64_t v40 = a2[13];
      uint64_t v41 = (void *)a2[14];
      uint64_t v42 = a2[15];
      uint64_t v43 = a2[16];
      char v44 = *((unsigned char *)a2 + 136);
      outlined copy of SystemApertureIconAsset(v39, v40, v41, v42, v43, v44);
      *(void *)(a1 + 96) = v39;
      *(void *)(a1 + 104) = v40;
      *(void *)(a1 + 112) = v41;
      *(void *)(a1 + 120) = v42;
      *(void *)(a1 + 128) = v43;
      *(unsigned char *)(a1 + 136) = v44;
      *(void *)(a1 + 144) = a2[18];
      *(void *)(a1 + 152) = a2[19];
      *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
      *(void *)(a1 + 168) = a2[21];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_14:
    memcpy((void *)(a1 + 96), a2 + 12, 0x50uLL);
    return a1;
  }
  if (!v26)
  {
    outlined destroy of SystemApertureIcon(a1 + 96);
    goto LABEL_14;
  }
  char v27 = (void *)a2[12];
  uint64_t v28 = a2[13];
  uint64_t v29 = (void *)a2[14];
  uint64_t v30 = a2[15];
  uint64_t v31 = a2[16];
  char v32 = *((unsigned char *)a2 + 136);
  outlined copy of SystemApertureIconAsset(v27, v28, v29, v30, v31, v32);
  uint64_t v33 = *(void **)(a1 + 96);
  uint64_t v34 = *(void *)(a1 + 104);
  id v35 = *(void **)(a1 + 112);
  uint64_t v36 = *(void *)(a1 + 120);
  uint64_t v37 = *(void *)(a1 + 128);
  char v38 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v30;
  *(void *)(a1 + 128) = v31;
  *(unsigned char *)(a1 + 136) = v32;
  outlined consume of SystemApertureIconAsset(v33, v34, v35, v36, v37, v38);
  *(void *)(a1 + 144) = a2[18];
  *(void *)(a1 + 152) = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(void *)(a1 + 168) = a2[21];
  return a1;
}

uint64_t outlined destroy of SystemApertureIcon(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy176_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB0uLL);
}

uint64_t assignWithTake for SystemApertureIconFactory.SystemApertureIconSet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  uint64_t v5 = (const void *)(a2 + 16);
  if (*(void *)(a1 + 72))
  {
    uint64_t v6 = *(void *)(a2 + 72);
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      char v8 = *(unsigned char *)(a2 + 56);
      uint64_t v9 = *(void **)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      char v14 = *(unsigned char *)(a1 + 56);
      long long v15 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v15;
      *(void *)(a1 + 48) = v7;
      *(unsigned char *)(a1 + 56) = v8;
      outlined consume of SystemApertureIconAsset(v9, v10, v11, v12, v13, v14);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v6;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      goto LABEL_6;
    }
    outlined destroy of SystemApertureIcon(a1 + 16);
  }
  memcpy(v4, v5, 0x50uLL);
LABEL_6:
  if (!*(void *)(a1 + 152))
  {
LABEL_10:
    memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 0x50uLL);
    return a1;
  }
  uint64_t v16 = *(void *)(a2 + 152);
  if (!v16)
  {
    outlined destroy of SystemApertureIcon(a1 + 96);
    goto LABEL_10;
  }
  uint64_t v17 = *(void *)(a2 + 128);
  char v18 = *(unsigned char *)(a2 + 136);
  char v19 = *(void **)(a1 + 96);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = *(void **)(a1 + 112);
  uint64_t v22 = *(void *)(a1 + 120);
  uint64_t v23 = *(void *)(a1 + 128);
  char v24 = *(unsigned char *)(a1 + 136);
  long long v25 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v25;
  *(void *)(a1 + 128) = v17;
  *(unsigned char *)(a1 + 136) = v18;
  outlined consume of SystemApertureIconAsset(v19, v20, v21, v22, v23, v24);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v16;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemApertureIconFactory.SystemApertureIconSet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 176))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 72);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemApertureIconFactory.SystemApertureIconSet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

void *type metadata accessor for SystemApertureIconFactory.SystemApertureIconSet()
{
  return &unk_1F1E96250;
}

id CallControlsViewController.__allocating_init(captionsStateController:controlsManager:rosterViewProvider:service:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return CallControlsViewController.init(captionsStateController:controlsManager:rosterViewProvider:service:)(a1, a2, a3, a4, a5, a6);
}

id CallControlsViewController.init(captionsStateController:controlsManager:rosterViewProvider:service:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState] = 1;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount] = 0;
  uint64_t v9 = &v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_captionsStateController];
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_captionsStateController + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v10 = &v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterViewProvider];
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_cancellables] = MEMORY[0x1E4FBC860];
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusViewModel] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController] = 0;
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_sidebarStateStream;
  type metadata accessor for SidebarStateStream();
  swift_allocObject();
  uint64_t v12 = v6;
  *(void *)&v6[v11] = SidebarStateStream.init(initial:)();
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingVisible] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingHidden] = 0;
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController] = 0;
  v12[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_showingCallAgain] = 0;
  *((void *)v9 + 1) = a2;
  swift_unknownObjectWeakAssign();
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_controlsManager] = a3;
  *((void *)v10 + 1) = a5;
  swift_unknownObjectWeakAssign();
  outlined init with copy of IDSLookupManager(a6, (uint64_t)&v12[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service]);
  id v13 = a3;

  v19.receiver = v12;
  v19.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a6);
  return v14;
}

id CallControlsViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CallControlsViewController.init(coder:)()
{
  v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_captionsStateController + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterViewProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_cancellables] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusViewModel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_sidebarStateStream;
  type metadata accessor for SidebarStateStream();
  swift_allocObject();
  *(void *)&v0[v1] = SidebarStateStream.init(initial:)();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingVisible] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingHidden] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_showingCallAgain] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CallControlsViewController.loadView()()
{
  type metadata accessor for PassthroughView();
  id v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v0, sel_setView_, v1);

  id v2 = objc_msgSend(v0, sel_view);
  if (v2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(self, sel_clearColor);
    objc_msgSend(v3, sel_setBackgroundColor_, v4);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CallControlsViewController.viewDidLoad()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  CallControlsViewController.setupConstraints()();
  CallControlsViewController.statusViewModel.getter();
  CallControlsStatusViewModel.startStatusObservation()();
  swift_release();
  CallControlsViewController.observeSidebarState()();
  CallControlsViewController.observeControlMode()();
}

void CallControlsViewController.setupConstraints()()
{
  objc_super v1 = v0;
  unint64_t v28 = (unint64_t)CallControlsViewController.setupStatus()();
  CallControlsViewController.setupSidebar()();
  specialized Array.append<A>(contentsOf:)();
  CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  id v3 = v2;
  id v4 = objc_msgSend(v2, sel_leadingAnchor);

  id v5 = objc_msgSend(v1, sel_view);
  if (!v5)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(v5, sel_leadingAnchor);

  id v8 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v7);
  CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v9, sel_trailingAnchor);

  id v12 = objc_msgSend(v1, sel_view);
  if (!v12)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v13 = v12;
  id v14 = objc_msgSend(v12, sel_trailingAnchor);

  id v15 = objc_msgSend(v11, sel_constraintLessThanOrEqualToAnchor_, v14);
  CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  uint64_t v17 = v16;
  id v18 = objc_msgSend(v16, sel_bottomAnchor);

  id v19 = objc_msgSend(v1, sel_view);
  if (!v19)
  {
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v20 = v19;
  id v21 = objc_msgSend(v19, sel_bottomAnchor);

  id v22 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v21);
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v23, 3))
  {
    __break(1u);
    goto LABEL_17;
  }
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v23 + 3, 1);
  specialized Array._endMutation()();
  id v8 = v8;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_17:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v24 = v15;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v25 = v22;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v26 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v26, sel_activateConstraints_, isa);
}

void *CallControlsViewController.statusViewModel.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusViewModel;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusViewModel))
  {
    id v2 = *(void **)(v0
                    + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusViewModel);
  }
  else
  {
    uint64_t v3 = v0;
    outlined init with copy of IDSLookupManager(v0 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service, (uint64_t)v6);
    uint64_t v4 = CallControlsViewController.isScreenLocked.getter();
    type metadata accessor for CallControlsStatusViewModel();
    swift_allocObject();
    id v2 = CallControlsStatusViewModel.init(service:isScreenLocked:)(v6, v4);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t CallControlsViewController.observeSidebarState()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<AnyPublisher<SidebarState, Never>>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Drop<AnyPublisher<SidebarState, Never>>, NSRunLoop>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = (id)SidebarStateStream.states.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SidebarState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<SidebarState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<SidebarState, Never>);
  Publisher.dropFirst(_:)();
  swift_release();
  id v14 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v11);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Drop<AnyPublisher<SidebarState, Never>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<AnyPublisher<SidebarState, Never>>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v10);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Drop<AnyPublisher<SidebarState, Never>>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Drop<AnyPublisher<SidebarState, Never>>, NSRunLoop>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t CallControlsViewController.observeControlMode()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service + 24);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<InCallControlsMode, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<InCallControlsMode, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<InCallControlsMode, Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

Swift::Void __swiftcall CallControlsViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  v39.receiver = v1;
  v39.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v39, sel_viewWillAppear_, a1);
  uint64_t v3 = &v1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service];
  __swift_project_boxed_opaque_existential_1(&v1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service], *(void *)&v1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service + 24]);
  OUTLINED_FUNCTION_0_13();
  (*(void (**)(void))(v4 + 624))();
  uint64_t v6 = v5;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v6 + 184))(ObjectType, v6);
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_3_33();
  v8();
  __swift_project_boxed_opaque_existential_1(v3, *((void *)v3 + 3));
  OUTLINED_FUNCTION_0_13();
  (*(void (**)(void))(v9 + 2112))();
  OUTLINED_FUNCTION_3_33();
  v10();
  OUTLINED_FUNCTION_0_13();
  uint64_t v12 = (*(uint64_t (**)(void))(v11 + 656))();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    __swift_project_boxed_opaque_existential_1(v3, *((void *)v3 + 3));
    objc_msgSend(v13, sel_state);
    OUTLINED_FUNCTION_3_33();
    v14();
    __swift_project_boxed_opaque_existential_1(v3, *((void *)v3 + 3));
    objc_msgSend(v13, sel_letMeInRequestState);
    OUTLINED_FUNCTION_3_33();
    v15();
  }
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.sidebar);
  uint64_t v17 = v1;
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = v37;
    *(_DWORD *)uint64_t v20 = 136315906;
    __swift_project_boxed_opaque_existential_1(v3, *((void *)v3 + 3));
    uint64_t v21 = OUTLINED_FUNCTION_7_13();
    v22(v21);
    type metadata accessor for TUCallStatus(0);
    uint64_t v23 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    __swift_project_boxed_opaque_existential_1(v3, *((void *)v3 + 3));
    uint64_t v25 = OUTLINED_FUNCTION_7_13();
    v26(v25);
    uint64_t v27 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2080;
    uint64_t v29 = *((void *)v3 + 3);
    uint64_t v30 = *((void *)v3 + 4);
    __swift_project_boxed_opaque_existential_1(v3, v29);
    (*(void (**)(uint64_t, uint64_t))(v30 + 40))(v29, v30);
    type metadata accessor for TUConversationLetMeInRequestState(0);
    uint64_t v31 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 2080;
    uint64_t v34 = *((void *)v3 + 3);
    uint64_t v33 = *((void *)v3 + 4);
    __swift_project_boxed_opaque_existential_1(v3, v34);
    (*(void (**)(uint64_t, uint64_t))(v33 + 40))(v34, v33);
    uint64_t v35 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v18, v19, "CallControls initial states. call status: %s, controlMode: %s, conversationState: %s, letMeInState: %s", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v37, -1, -1);
    MEMORY[0x1C87760E0](v20, -1, -1);
  }
  else
  {
  }
}

Swift::Void __swiftcall CallControlsViewController.viewDidLayoutSubviews()()
{
  v19.receiver = v0;
  v19.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v19, sel_viewDidLayoutSubviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v17 = static OS_dispatch_queue.main.getter();
  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in CallControlsViewController.viewDidLayoutSubviews();
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6;
  uint64_t v2 = _Block_copy(aBlock);
  swift_release();
  uint64_t v3 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  id v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v15 = (void *)v17;
  MEMORY[0x1C8773BA0](0, v8, v14, v2);
  _Block_release(v2);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
}

uint64_t CallControlsViewController.isOneToOneModeEnabled.getter()
{
  uint64_t v0 = (char *)CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled];
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;

  return v2;
}

void CallControlsViewController.isOneToOneModeEnabled.setter()
{
  CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  OUTLINED_FUNCTION_4_31();
}

void (*CallControlsViewController.isOneToOneModeEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CallControlsViewController.isOneToOneModeEnabled.getter() & 1;
  return CallControlsViewController.isOneToOneModeEnabled.modify;
}

void CallControlsViewController.isOneToOneModeEnabled.modify()
{
  CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  OUTLINED_FUNCTION_4_31();
}

uint64_t CallControlsViewController.menuState.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState);
  uint64_t result = OUTLINED_FUNCTION_2();
  *a1 = *v3;
  return result;
}

uint64_t key path getter for CallControlsViewController.menuState : CallControlsViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void key path setter for CallControlsViewController.menuState : CallControlsViewController(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  CallControlsViewController.menuState.setter(&v1);
}

void CallControlsViewController.menuState.setter(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState);
  swift_beginAccess();
  unsigned __int8 v4 = *v3;
  *uint64_t v3 = v2;
  unsigned __int8 v5 = v4;
  CallControlsViewController.menuState.didset(&v5);
}

void CallControlsViewController.menuState.didset(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState);
  swift_beginAccess();
  int v4 = *v3;
  if (v2)
  {
    if (v2 == 1)
    {
      if (v4 == 1) {
        return;
      }
    }
    else if (v4 == 2)
    {
      return;
    }
  }
  else if (!*v3)
  {
    return;
  }
  CallControlsViewController.updateMenuVisibility()();
}

void CallControlsViewController.updateMenuVisibility()()
{
  uint64_t v1 = v0;
  char v2 = SidebarStateStream.currentState.getter();
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState);
  swift_beginAccess();
  if (*v3 | v2 & 1) {
    char v4 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_showingCallAgain);
  }
  else {
    char v4 = 1;
  }
  id v5 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  CallControlsMenuViewController.isHidden.setter(v4);
}

void (*CallControlsViewController.menuState.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  char v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState);
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *v4;
  return CallControlsViewController.menuState.modify;
}

void CallControlsViewController.menuState.modify()
{
  OUTLINED_FUNCTION_6_14();
  if (v2)
  {
    char v4 = v1;
    uint64_t v3 = (unsigned __int8 *)&v4;
  }
  else
  {
    char v5 = v1;
    uint64_t v3 = (unsigned __int8 *)&v5;
  }
  CallControlsViewController.menuState.setter(v3);
  free(v0);
}

uint64_t CallControlsViewController.rosterCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount;
  OUTLINED_FUNCTION_2();
  return *(void *)v1;
}

uint64_t key path getter for CallControlsViewController.rosterCount : CallControlsViewController@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t CallControlsViewController.rosterCount.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return CallControlsViewController.rosterCount.didset(v4);
}

uint64_t CallControlsViewController.rosterCount.didset(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount);
  uint64_t result = swift_beginAccess();
  if (*v3 != a1)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v17 = static OS_dispatch_queue.main.getter();
    uint64_t v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in CallControlsViewController.viewDidLayoutSubviews();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_13;
    uint64_t v6 = _Block_copy(aBlock);
    swift_release();
    uint64_t v7 = type metadata accessor for DispatchQoS();
    v16[1] = v16;
    uint64_t v8 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](v7);
    uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchQoS.unspecified.getter();
    uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
    v16[0] = v16;
    uint64_t v12 = *(void *)(v11 - 8);
    MEMORY[0x1F4188790](v11);
    id v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    aBlock[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v15 = (void *)v17;
    MEMORY[0x1C8773BA0](0, v10, v14, v6);
    _Block_release(v6);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

void closure #1 in CallControlsViewController.viewDidLayoutSubviews()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  OUTLINED_FUNCTION_2();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);

    CallControlsMenuViewController.checkForDynamicState()();
  }
}

void (*CallControlsViewController.rosterCount.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  id v4 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount);
  OUTLINED_FUNCTION_2();
  v3[3] = *v4;
  return CallControlsViewController.rosterCount.modify;
}

void CallControlsViewController.rosterCount.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  CallControlsViewController.rosterCount.setter(*(void *)(*(void *)a1 + 24));
  free(v1);
}

uint64_t CallControlsViewController.sizeUpdater.getter()
{
  uint64_t v0 = (char *)CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater];
  OUTLINED_FUNCTION_2();
  uint64_t v2 = MEMORY[0x1C8776240](v1);

  return v2;
}

uint64_t key path setter for CallControlsViewController.sizeUpdater : CallControlsViewController(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  return CallControlsViewController.sizeUpdater.setter(v2, v1);
}

uint64_t CallControlsViewController.sizeUpdater.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char *)CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  id v4 = &v3[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater];
  swift_beginAccess();
  *((void *)v4 + 1) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*CallControlsViewController.sizeUpdater.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CallControlsViewController.sizeUpdater.getter();
  a1[1] = v3;
  return CallControlsViewController.sizeUpdater.modify;
}

uint64_t CallControlsViewController.sizeUpdater.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if ((a2 & 1) == 0) {
    return CallControlsViewController.sizeUpdater.setter(*a1, v2);
  }
  uint64_t v3 = swift_unknownObjectRetain();
  CallControlsViewController.sizeUpdater.setter(v3, v2);
  return swift_unknownObjectRelease();
}

UILayoutGuide __swiftcall CallControlsViewController.updateViewDependencies(containingView:topCornerView:dodgingView:)(UIView *containingView, UIView_optional *topCornerView, UIView *dodgingView)
{
  swift_unknownObjectWeakAssign();
  id v6 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  Class isa = CallControlsMenuViewController.updateViewDependencies(containingView:topCornerView:dodgingView:)(containingView, topCornerView, dodgingView).super.isa;

  return (UILayoutGuide)isa;
}

Swift::Void __swiftcall CallControlsViewController.captioningStateDidChange()()
{
  if (objc_msgSend(v0, sel_isViewLoaded))
  {
    id v1 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    CallControlsSidebarViewController.captioningStateDidChange()();
  }
}

id CallControlsViewController.setupStatus()()
{
  id v1 = CallControlsViewController.statusViewModel.getter();
  id v2 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusView, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.statusView.getter);
  swift_beginAccess();
  v1[3] = &protocol witness table for CallControlsStatusView;
  swift_unknownObjectWeakAssign();
  swift_release();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769F40;
  id v4 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusView, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.statusView.getter);
  id v5 = objc_msgSend(v4, sel_topAnchor);

  id result = objc_msgSend(v0, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = result;
  id v8 = objc_msgSend(result, sel_topAnchor);

  id v9 = objc_msgSend(v5, sel_constraintEqualToAnchor_constant_, v8, 52.0);
  *(void *)(v3 + 32) = v9;
  id v10 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusView, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.statusView.getter);
  id v11 = objc_msgSend(v10, sel_leadingAnchor);

  id result = objc_msgSend(v0, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v12 = result;
  id v13 = objc_msgSend(result, sel_safeAreaLayoutGuide);

  id v14 = objc_msgSend(v13, sel_leadingAnchor);
  id v15 = objc_msgSend(v11, sel_constraintEqualToAnchor_constant_, v14, 24.0);

  *(void *)(v3 + 40) = v15;
  id v16 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___statusView, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.statusView.getter);
  id v17 = objc_msgSend(v16, sel_trailingAnchor);

  id result = objc_msgSend(v0, sel_view);
  if (result)
  {
    id v18 = result;
    id v19 = objc_msgSend(result, sel_safeAreaLayoutGuide);

    id v20 = objc_msgSend(v19, sel_trailingAnchor);
    id v21 = objc_msgSend(v17, sel_constraintLessThanOrEqualToAnchor_, v20);

    *(void *)(v3 + 48) = v21;
    specialized Array._endMutation()();
    return (id)v3;
  }
LABEL_7:
  __break(1u);
  return result;
}

id CallControlsViewController.setupSidebar()()
{
  id v1 = v0;
  if (SidebarStateStream.currentState.getter()) {
    id v2 = CallControlsViewController.sidebarTrailingVisible.getter();
  }
  else {
    id v2 = CallControlsViewController.sidebarTrailingHidden.getter();
  }
  id v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769600;
  CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
  id v6 = v5;
  id v7 = objc_msgSend(v5, sel_topAnchor);

  id result = objc_msgSend(v1, sel_view);
  if (result)
  {
    id v9 = result;
    id v10 = objc_msgSend(result, sel_topAnchor);

    id v11 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v10);
    *(void *)(v4 + 32) = v11;
    CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    id v13 = v12;
    id v14 = objc_msgSend(v12, sel_bottomAnchor);

    id result = objc_msgSend(v1, sel_view);
    if (result)
    {
      id v15 = result;
      id v16 = objc_msgSend(result, sel_bottomAnchor);

      id v17 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v16);
      *(void *)(v4 + 40) = v17;
      CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
      id v19 = v18;
      id v20 = objc_msgSend(v18, sel_widthAnchor);

      CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
      id v22 = v21;
      id v23 = objc_msgSend(v21, sel_widthAnchor);

      id v24 = objc_msgSend(v20, sel_constraintGreaterThanOrEqualToAnchor_, v23);
      *(void *)(v4 + 48) = v24;
      CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
      uint64_t v26 = v25;
      id v27 = objc_msgSend(v25, sel_widthAnchor);

      id v28 = objc_msgSend(v27, sel_constraintGreaterThanOrEqualToConstant_, 280.0);
      *(void *)(v4 + 56) = v28;
      *(void *)(v4 + 64) = v3;
      specialized Array._endMutation()();
      return (id)v4;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CallControlsViewController.isScreenLocked.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<Bool>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6[15] = 0;
  Just.init(_:)();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Just<Bool> and conformance Just<A>, &demangling cache variable for type metadata for Just<Bool>);
  uint64_t v4 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

id CallControlsViewController.menuViewController.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in CallControlsViewController.statusView.getter(void *a1)
{
  type metadata accessor for CallControlsStatusView();
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id result = objc_msgSend(a1, sel_view);
  if (result)
  {
    uint64_t v4 = result;
    objc_msgSend(result, sel_addSubview_, v2);

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id closure #1 in CallControlsViewController.menuViewController.getter(char *a1)
{
  id v2 = *(id *)&a1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_controlsManager];
  uint64_t v3 = CallControlsViewController.isScreenLocked.getter();
  uint64_t v4 = &a1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterViewProvider];
  uint64_t v5 = MEMORY[0x1C8776240](&a1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterViewProvider]);
  uint64_t v6 = *((void *)v4 + 1);
  outlined init with copy of IDSLookupManager((uint64_t)&a1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_service], (uint64_t)v13);
  uint64_t v7 = *(void *)&a1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_sidebarStateStream];
  objc_allocWithZone((Class)type metadata accessor for CallControlsMenuViewController());
  swift_retain();
  id v8 = CallControlsMenuViewController.init(controlsManager:isScreenLocked:rosterViewProvider:service:sidebarStateStream:)(v2, v3, v5, v6, (uint64_t)v13, v7);
  objc_msgSend(a1, sel_addChildViewController_, v8);
  id result = objc_msgSend(a1, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  id v10 = result;
  id result = objc_msgSend(v8, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v11 = result;
  objc_msgSend(v10, sel_addSubview_, result);

  objc_msgSend(v8, sel_didMoveToParentViewController_, a1);
  id result = objc_msgSend(v8, sel_view);
  if (result)
  {
    uint64_t v12 = result;
    objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    return v8;
  }
LABEL_7:
  __break(1u);
  return result;
}

void closure #1 in CallControlsViewController.observeSidebarState()(char *a1, uint64_t a2)
{
  char v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    CallControlsViewController.animateSidebarState(_:)(v2);
  }
}

void CallControlsViewController.animateSidebarState(_:)(char a1)
{
  id v3 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
  unsigned int v4 = objc_msgSend(v3, sel_isViewLoaded);

  if (v4)
  {
    uint64_t v5 = a1 & 1;
    CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    uint64_t v7 = v6;
    objc_msgSend(v6, sel_setHidden_, 0);

    id v8 = CallControlsViewController.sidebarTrailingVisible.getter();
    objc_msgSend(v8, sel_setActive_, v5);

    id v9 = CallControlsViewController.sidebarTrailingHidden.getter();
    objc_msgSend(v9, sel_setActive_, v5 == 0);

    if (v5) {
      CallControlsViewController.updateSidebarInsets()();
    }
    id v10 = self;
    objc_msgSend(v10, sel_begin);
    id v11 = objc_allocWithZone(MEMORY[0x1E4F39C10]);
    LODWORD(v12) = 1048240456;
    LODWORD(v13) = 1025758986;
    LODWORD(v14) = 1065269330;
    LODWORD(v15) = 0.375;
    id v16 = objc_msgSend(v11, sel_initWithControlPoints__::, v12, v15, v13, v14);
    objc_msgSend(v10, sel_setAnimationTimingFunction_, v16);

    id v17 = self;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v1;
    id v28 = partial apply for closure #1 in CallControlsViewController.animateSidebarState(_:);
    uint64_t v29 = v18;
    uint64_t v24 = MEMORY[0x1E4F143A8];
    uint64_t v25 = 1107296256;
    uint64_t v26 = thunk for @escaping @callee_guaranteed () -> ();
    id v27 = &block_descriptor_21;
    id v19 = _Block_copy(&v24);
    id v20 = v1;
    swift_release();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v20;
    *(unsigned char *)(v21 + 24) = v5;
    id v28 = partial apply for closure #2 in CallControlsViewController.animateSidebarState(_:);
    uint64_t v29 = v21;
    uint64_t v24 = MEMORY[0x1E4F143A8];
    uint64_t v25 = 1107296256;
    uint64_t v26 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    id v27 = &block_descriptor_27;
    id v22 = _Block_copy(&v24);
    id v23 = v20;
    swift_release();
    objc_msgSend(v17, sel_animateWithDuration_delay_options_animations_completion_, 6, v19, v22, 0.3, 0.0);
    _Block_release(v22);
    _Block_release(v19);
    objc_msgSend(v10, sel_commit);
  }
}

id CallControlsViewController.sidebarTrailingVisible.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingVisible;
  char v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingVisible);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingVisible);
  }
  else
  {
    CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    uint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_trailingAnchor);

    CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
    id v8 = v7;
    id v9 = objc_msgSend(v7, sel_trailingAnchor);

    id v10 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v9);
    id v11 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v10;
    id v3 = v10;

    char v2 = 0;
  }
  id v12 = v2;
  return v3;
}

void CallControlsViewController.menuView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  id v2 = CallControlsViewController.menuViewController.getter(a1, a2);
  id v3 = objc_msgSend(v2, sel_view);

  if (!v3) {
    __break(1u);
  }
}

id CallControlsViewController.sidebarTrailingHidden.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingHidden;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingHidden];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarTrailingHidden];
LABEL_5:
    id v12 = v2;
    return v3;
  }
  CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, sel_trailingAnchor);

  id result = objc_msgSend(v0, sel_view);
  if (result)
  {
    id v8 = result;
    id v9 = objc_msgSend(result, sel_leadingAnchor);

    id v10 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v9);
    id v11 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v10;
    id v3 = v10;

    id v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id closure #1 in CallControlsViewController.sidebarViewController.getter(char *a1)
{
  MEMORY[0x1C8776240](&a1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_captionsStateController]);
  id v2 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_controlsManager];
  objc_allocWithZone((Class)type metadata accessor for CallControlsSidebarViewController());
  id v3 = v2;
  swift_retain();
  id v4 = CallControlsSidebarViewController.init(captionsStateController:controlsManager:sidebarStateStream:)();
  objc_msgSend(a1, sel_addChildViewController_, v4);
  id result = objc_msgSend(v4, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v6 = result;
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id result = objc_msgSend(a1, sel_view);
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v7 = result;
  id result = objc_msgSend(v4, sel_view);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  id v8 = result;
  objc_msgSend(v7, sel_addSubview_, result);

  objc_msgSend(v4, sel_didMoveToParentViewController_, a1);
  id result = objc_msgSend(v4, sel_view);
  if (result)
  {
    id v9 = result;
    objc_msgSend(result, sel_setHidden_, 1);

    return v4;
  }
LABEL_9:
  __break(1u);
  return result;
}

void CallControlsViewController.updateSidebarInsets()()
{
  CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___menuViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.menuViewController.getter);
  id v2 = v1;
  objc_msgSend(v1, sel_frame);
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;

  v19.origin.x = v4;
  v19.origin.y = v6;
  v19.size.width = v8;
  v19.size.height = v10;
  double Height = CGRectGetHeight(v19);
  id v12 = objc_msgSend(v0, sel_view);
  if (v12)
  {
    double v13 = v12;
    objc_msgSend(v12, sel_safeAreaInsets);
    double v15 = v14;

    id v16 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    id v17 = CallControlsSidebarViewController.detailsViewController.getter();
    (*(void (**)(double, double, double, double))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x128))(0.0, 0.0, Height - v15, 0.0);
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in CallControlsViewController.animateSidebarState(_:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_layoutIfNeeded);
  }
  else
  {
    __break(1u);
  }
}

void closure #2 in CallControlsViewController.animateSidebarState(_:)(char a1, uint64_t a2, char a3)
{
  if (a1)
  {
    CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    id v10 = v4;
    objc_msgSend(v4, sel_setHidden_, (a3 & 1) == 0);
  }
  else
  {
    uint64_t v5 = a3 & 1;
    id v6 = CallControlsViewController.sidebarTrailingVisible.getter();
    objc_msgSend(v6, sel_setActive_, v5 == 0);

    id v7 = CallControlsViewController.sidebarTrailingHidden.getter();
    objc_msgSend(v7, sel_setActive_, v5);

    CallControlsViewController.menuView.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    double v9 = v8;
    objc_msgSend(v8, sel_setHidden_, v5);

    CallControlsViewController.updateMenuVisibility()();
  }
}

void CallControlsViewController.showingCallAgain.didset(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_showingCallAgain;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_showingCallAgain) != (a1 & 1))
  {
    CallControlsViewController.updateMenuVisibility()();
    id v3 = CallControlsViewController.menuViewController.getter(&OBJC_IVAR____TtC15ConversationKit26CallControlsViewController____lazy_storage___sidebarViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsViewController.sidebarViewController.getter);
    id v4 = objc_msgSend(v3, sel_viewIfLoaded);

    if (v4)
    {
      objc_msgSend(v4, sel_setHidden_, *(unsigned __int8 *)(v1 + v2));
    }
  }
}

void CallControlsViewController.showingCallAgain.setter(char a1)
{
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_showingCallAgain);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_showingCallAgain) = a1;
  CallControlsViewController.showingCallAgain.didset(v2);
}

void closure #1 in CallControlsViewController.observeControlMode()(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    CallControlsViewController.showingCallAgain.setter(v2 == 129);
  }
}

id CallControlsViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CallControlsViewController.init(nibName:bundle:)()
{
}

void (*protocol witness for CallControlsPlatformController.isOneToOneModeEnabled.modify in conformance CallControlsViewController(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CallControlsViewController.isOneToOneModeEnabled.getter() & 1;
  return CallControlsViewController.isOneToOneModeEnabled.modify;
}

void (*protocol witness for CallControlsPlatformController.menuState.modify in conformance CallControlsViewController(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_menuState);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *v4;
  return CallControlsViewController.menuState.modify;
}

void (*protocol witness for CallControlsPlatformController.rosterCount.modify in conformance CallControlsViewController(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_rosterCount);
  swift_beginAccess();
  v3[3] = *v4;
  return CallControlsViewController.rosterCount.modify;
}

uint64_t (*protocol witness for CallControlsPlatformController.sizeUpdater.modify in conformance CallControlsViewController(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CallControlsViewController.sizeUpdater.getter();
  a1[1] = v3;
  return CallControlsViewController.sizeUpdater.modify;
}

id CallControlsViewController.constraintsForLayout(_:in:deviceOrientation:)()
{
  uint64_t v1 = MEMORY[0x1C8776240](v0 + OBJC_IVAR____TtC15ConversationKit26CallControlsViewController_containingView);
  if (!v1) {
    return (id)MEMORY[0x1E4FBC860];
  }
  int v2 = (void *)v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769580;
  id result = OUTLINED_FUNCTION_8_6();
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = result;
  id v6 = objc_msgSend(result, sel_topAnchor);

  id v7 = objc_msgSend(v2, sel_topAnchor);
  id v8 = OUTLINED_FUNCTION_5_25();

  *(void *)(v3 + 32) = v8;
  id result = OUTLINED_FUNCTION_8_6();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  double v9 = result;
  id v10 = objc_msgSend(result, sel_bottomAnchor);

  id v11 = objc_msgSend(v2, sel_bottomAnchor);
  id v12 = OUTLINED_FUNCTION_5_25();

  *(void *)(v3 + 40) = v12;
  id result = OUTLINED_FUNCTION_8_6();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  double v13 = result;
  id v14 = objc_msgSend(result, sel_leadingAnchor);

  id v15 = objc_msgSend(v2, sel_leadingAnchor);
  id v16 = OUTLINED_FUNCTION_5_25();

  *(void *)(v3 + 48) = v16;
  id result = OUTLINED_FUNCTION_8_6();
  if (result)
  {
    id v17 = result;
    id v18 = objc_msgSend(result, sel_trailingAnchor);

    id v19 = objc_msgSend(v2, sel_trailingAnchor);
    id v20 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v19);

    *(void *)(v3 + 56) = v20;
    specialized Array._endMutation()();

    return (id)v3;
  }
LABEL_12:
  __break(1u);
  return result;
}

id protocol witness for ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:) in conformance CallControlsViewController()
{
  return CallControlsViewController.constraintsForLayout(_:in:deviceOrientation:)();
}

id PassthroughView.hitTest(_:with:)(uint64_t a1, double a2, double a3)
{
  v12.receiver = v3;
  v12.super_class = (Class)swift_getObjectType();
  id v7 = objc_msgSendSuper2(&v12, sel_hitTest_withEvent_, a1, a2, a3);
  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v8 = v3;
    id v9 = v7;
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {

      return 0;
    }
  }
  return v7;
}

id PassthroughView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v10.receiver = v4;
  v10.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v10, sel_initWithFrame_, a1, a2, a3, a4);
}

id PassthroughView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id CallControlsViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PassthroughView()
{
  return self;
}

uint64_t sub_1C3014A50()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallControlsViewController.viewDidLayoutSubviews()()
{
  closure #1 in CallControlsViewController.viewDidLayoutSubviews()(v0);
}

uint64_t sub_1C3014AA4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CallControlsViewController.isOneToOneModeEnabled.getter();
  *a1 = result & 1;
  return result;
}

void sub_1C3014AD4()
{
}

uint64_t sub_1C3014B08(uint64_t *a1)
{
  return CallControlsViewController.rosterCount.setter(*a1);
}

uint64_t sub_1C3014B30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CallControlsViewController.sizeUpdater.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t dispatch thunk of CallControlsPlatformController.isOneToOneModeEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallControlsPlatformController.isOneToOneModeEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CallControlsPlatformController.isOneToOneModeEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of CallControlsPlatformController.menuState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CallControlsPlatformController.menuState.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CallControlsPlatformController.menuState.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CallControlsPlatformController.rosterCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CallControlsPlatformController.rosterCount.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of CallControlsPlatformController.rosterCount.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CallControlsPlatformController.captioningStateDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of CallControlsPlatformController.sizeUpdater.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of CallControlsPlatformController.sizeUpdater.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of CallControlsPlatformController.sizeUpdater.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of CallControlsPlatformController.updateViewDependencies(containingView:topCornerView:dodgingView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

uint64_t dispatch thunk of RosterViewProvider.currentRosterViews.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for CallControlsViewController()
{
  return self;
}

uint64_t method lookup function for CallControlsViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallControlsViewController);
}

uint64_t dispatch thunk of CallControlsViewController.__allocating_init(captionsStateController:controlsManager:rosterViewProvider:service:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

void partial apply for closure #1 in CallControlsViewController.observeControlMode()(unsigned __int8 *a1)
{
  closure #1 in CallControlsViewController.observeControlMode()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop()
{
  unint64_t result = lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop;
  if (!lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop);
  }
  return result;
}

uint64_t outlined destroy of NSRunLoop.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in CallControlsViewController.observeSidebarState()(char *a1)
{
  closure #1 in CallControlsViewController.observeSidebarState()(a1, v1);
}

uint64_t sub_1C3014DA0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in CallControlsViewController.animateSidebarState(_:)()
{
  closure #1 in CallControlsViewController.animateSidebarState(_:)(*(void **)(v0 + 16));
}

uint64_t sub_1C3014DE0()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in CallControlsViewController.animateSidebarState(_:)(char a1)
{
  closure #2 in CallControlsViewController.animateSidebarState(_:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t static ClarityUIPreferences.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

id ClarityUIPreferences.incomingCommunicationLimit.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_7_14();
  OUTLINED_FUNCTION_4_17();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 16);
  return v1;
}

id key path getter for ClarityUIPreferences.incomingCommunicationLimit : ClarityUIPreferences@<X0>(void *a1@<X8>)
{
  id result = ClarityUIPreferences.incomingCommunicationLimit.getter();
  *a1 = result;
  return result;
}

id sub_1C3014F70()
{
  OUTLINED_FUNCTION_2_0();
  id result = ClarityUIPreferences.incomingCommunicationLimit.getter();
  *uint64_t v0 = result;
  return result;
}

void key path setter for ClarityUIPreferences.incomingCommunicationLimit : ClarityUIPreferences(id *a1)
{
}

unint64_t lazy protocol witness table accessor for type ClarityUIPreferences and conformance ClarityUIPreferences()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIPreferences and conformance ClarityUIPreferences;
  if (!lazy protocol witness table cache variable for type ClarityUIPreferences and conformance ClarityUIPreferences)
  {
    type metadata accessor for ClarityUIPreferences();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIPreferences and conformance ClarityUIPreferences);
  }
  return result;
}

uint64_t type metadata accessor for ClarityUIPreferences()
{
  uint64_t result = type metadata singleton initialization cache for ClarityUIPreferences;
  if (!type metadata singleton initialization cache for ClarityUIPreferences) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ClarityUIPreferences.incomingCommunicationLimit.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ClarityUIPreferences.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

void closure #1 in ClarityUIPreferences.incomingCommunicationLimit.setter(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  id v3 = a2;
}

uint64_t specialized ClarityUIPreferences.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ClarityUIPreferences.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

id ClarityUIPreferences.outgoingCommunicationLimit.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_7_14();
  OUTLINED_FUNCTION_4_17();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 24);
  return v1;
}

id key path getter for ClarityUIPreferences.outgoingCommunicationLimit : ClarityUIPreferences@<X0>(void *a1@<X8>)
{
  id result = ClarityUIPreferences.outgoingCommunicationLimit.getter();
  *a1 = result;
  return result;
}

id sub_1C30152C4()
{
  OUTLINED_FUNCTION_2_0();
  id result = ClarityUIPreferences.outgoingCommunicationLimit.getter();
  *uint64_t v0 = result;
  return result;
}

void key path setter for ClarityUIPreferences.outgoingCommunicationLimit : ClarityUIPreferences(id *a1)
{
}

void ClarityUIPreferences.incomingCommunicationLimit.setter(void *a1)
{
}

void closure #1 in ClarityUIPreferences.outgoingCommunicationLimit.setter(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = a2;
  id v3 = a2;
}

uint64_t ClarityUIPreferences.recentsEnabled.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_7_14();
  OUTLINED_FUNCTION_4_17();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t key path getter for ClarityUIPreferences.recentsEnabled : ClarityUIPreferences@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ClarityUIPreferences.recentsEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C3015454()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.recentsEnabled.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t key path setter for ClarityUIPreferences.recentsEnabled : ClarityUIPreferences()
{
  return ClarityUIPreferences.recentsEnabled.setter();
}

uint64_t sub_1C30154C4()
{
  return ClarityUIPreferences.recentsEnabled.setter();
}

uint64_t ClarityUIPreferences.recentsEnabled.init@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ClarityUIPreferences.inCallKeypadEnabled.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_7_14();
  OUTLINED_FUNCTION_4_17();
  swift_release();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t key path getter for ClarityUIPreferences.inCallKeypadEnabled : ClarityUIPreferences@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ClarityUIPreferences.inCallKeypadEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C301559C()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.inCallKeypadEnabled.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t key path setter for ClarityUIPreferences.inCallKeypadEnabled : ClarityUIPreferences()
{
  return ClarityUIPreferences.recentsEnabled.setter();
}

uint64_t sub_1C301560C()
{
  return ClarityUIPreferences.recentsEnabled.setter();
}

uint64_t ClarityUIPreferences.recentsEnabled.setter()
{
  return swift_release();
}

uint64_t ClarityUIPreferences.speakerOptionEnabled.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_7_14();
  OUTLINED_FUNCTION_4_17();
  swift_release();
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t key path getter for ClarityUIPreferences.speakerOptionEnabled : ClarityUIPreferences@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ClarityUIPreferences.speakerOptionEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C3015730()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.speakerOptionEnabled.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t key path setter for ClarityUIPreferences.speakerOptionEnabled : ClarityUIPreferences()
{
  return ClarityUIPreferences.recentsEnabled.setter();
}

uint64_t sub_1C30157A0()
{
  return ClarityUIPreferences.recentsEnabled.setter();
}

uint64_t ClarityUIPreferences.().init()()
{
  *(void *)(v0 + 72) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  ObservationRegistrar.init()();
  type metadata accessor for CLFPhoneFaceTimeSettings();
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_sharedInstance);
  *(void *)(v0 + 16) = objc_msgSend(v1, sel_incomingCommunicationLimit);
  *(void *)(v0 + 24) = objc_msgSend(v1, sel_outgoingCommunicationLimit);
  *(unsigned char *)(v0 + 32) = objc_msgSend(v1, sel_recentsEnabled);
  *(unsigned char *)(v0 + 33) = objc_msgSend(v1, sel_inCallKeypadEnabled);
  *(unsigned char *)(v0 + 34) = objc_msgSend(v1, sel_speakerOptionEnabled);
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  unint64_t v32 = partial apply for closure #1 in ClarityUIPreferences.().init();
  uint64_t v33 = v3;
  uint64_t v28 = MEMORY[0x1E4F143A8];
  uint64_t v29 = 1107296256;
  uint64_t v30 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v31 = &block_descriptor_7;
  uint64_t v4 = _Block_copy(&v28);
  id v5 = v1;
  swift_release();
  id v6 = objc_msgSend(v5, sel_observeUpdatesForSelector_handler_, sel_incomingCommunicationLimit, v4);
  _Block_release(v4);
  ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v5;
  unint64_t v32 = partial apply for closure #2 in ClarityUIPreferences.().init();
  uint64_t v33 = v8;
  uint64_t v28 = MEMORY[0x1E4F143A8];
  uint64_t v29 = 1107296256;
  uint64_t v30 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v31 = &block_descriptor_28_0;
  id v9 = _Block_copy(&v28);
  id v10 = v5;
  swift_release();
  id v11 = objc_msgSend(v10, sel_observeUpdatesForSelector_handler_, sel_outgoingCommunicationLimit, v9);
  _Block_release(v9);
  ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v10;
  unint64_t v32 = partial apply for closure #3 in ClarityUIPreferences.().init();
  uint64_t v33 = v13;
  uint64_t v28 = MEMORY[0x1E4F143A8];
  uint64_t v29 = 1107296256;
  uint64_t v30 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v31 = &block_descriptor_35_0;
  id v14 = _Block_copy(&v28);
  id v15 = v10;
  swift_release();
  id v16 = objc_msgSend(v15, sel_observeUpdatesForSelector_handler_, sel_recentsEnabled, v14);
  _Block_release(v14);
  ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v15;
  unint64_t v32 = partial apply for closure #4 in ClarityUIPreferences.().init();
  uint64_t v33 = v18;
  uint64_t v28 = MEMORY[0x1E4F143A8];
  uint64_t v29 = 1107296256;
  uint64_t v30 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v31 = &block_descriptor_42;
  id v19 = _Block_copy(&v28);
  id v20 = v15;
  swift_release();
  id v21 = objc_msgSend(v20, sel_observeUpdatesForSelector_handler_, sel_inCallKeypadEnabled, v19);
  _Block_release(v19);
  ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = v20;
  unint64_t v32 = partial apply for closure #5 in ClarityUIPreferences.().init();
  uint64_t v33 = v23;
  uint64_t v28 = MEMORY[0x1E4F143A8];
  uint64_t v29 = 1107296256;
  uint64_t v30 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v31 = &block_descriptor_49;
  uint64_t v24 = _Block_copy(&v28);
  id v25 = v20;
  swift_release();
  id v26 = objc_msgSend(v25, sel_observeUpdatesForSelector_handler_, sel_speakerOptionEnabled, v24);
  _Block_release(v24);
  ClarityUIPreferences.incomingCommunicationLimitObserver.setter();

  return v0;
}

uint64_t closure #1 in ClarityUIPreferences.().init()()
{
  OUTLINED_FUNCTION_1_33();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)v2();
    id v5 = [v0 *v1];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        ClarityUIPreferences.incomingCommunicationLimit.setter([v0 *v1]);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t ClarityUIPreferences.incomingCommunicationLimitObserver.setter()
{
  return swift_unknownObjectRelease();
}

uint64_t ClarityUIPreferences.recentsEnabledObserver.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t closure #3 in ClarityUIPreferences.().init()()
{
  OUTLINED_FUNCTION_1_33();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int v4 = v2() & 1;
    if (v4 != [v0 *v1])
    {
      [v0 *v1];
      ClarityUIPreferences.recentsEnabled.setter();
    }
    return swift_release();
  }
  return result;
}

uint64_t ClarityUIPreferences.dialerKeypadEnabled.getter()
{
  OUTLINED_FUNCTION_3_2();
  if (static ClarityUIPreferences.canEnableDialerKeypad.getter())
  {
    id v0 = ClarityUIPreferences.outgoingCommunicationLimit.getter();
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v2;
    if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4) {
      char v6 = 1;
    }
    else {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t static ClarityUIPreferences.canEnableDialerKeypad.getter()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  uint64_t v1 = outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v0);
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v3)
  {
    if (v1 == v4 && v3 == v5) {
      char v7 = 1;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t ClarityUIPreferences.canCallContacts.getter()
{
  id v2 = ClarityUIPreferences.outgoingCommunicationLimit.getter();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v1 == OUTLINED_FUNCTION_6_15() && v0 == v3)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  uint64_t v5 = OUTLINED_FUNCTION_0_14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_21:

    return 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v5 == OUTLINED_FUNCTION_6_15() && v0 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  uint64_t v8 = OUTLINED_FUNCTION_0_14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_24:

    return 1;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v8 == OUTLINED_FUNCTION_6_15() && v0 == v9)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = OUTLINED_FUNCTION_0_14();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      if (one-time initialization token for clarityUI != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Log.clarityUI);
      swift_retain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v22 = v16;
        *(_DWORD *)id v15 = 136315138;
        id v17 = ClarityUIPreferences.outgoingCommunicationLimit.getter();
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v13, v14, "Unhandled outgoing communication limit: %s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v16, -1, -1);
        MEMORY[0x1C87760E0](v15, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      return 0;
    }
  }
  return 1;
}

uint64_t ClarityUIPreferences.incomingCommunicationLimitObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t key path setter for ClarityUIPreferences.incomingCommunicationLimitObserver : ClarityUIPreferences()
{
  return ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
}

uint64_t closure #1 in ClarityUIPreferences.incomingCommunicationLimitObserver.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t ClarityUIPreferences.outgoingCommunicationLimitObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t key path setter for ClarityUIPreferences.outgoingCommunicationLimitObserver : ClarityUIPreferences()
{
  return ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
}

uint64_t closure #1 in ClarityUIPreferences.outgoingCommunicationLimitObserver.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t ClarityUIPreferences.recentsEnabledObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t key path setter for ClarityUIPreferences.recentsEnabledObserver : ClarityUIPreferences()
{
  return ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
}

uint64_t closure #1 in ClarityUIPreferences.recentsEnabledObserver.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t ClarityUIPreferences.inCallKeypadEnabledObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t key path setter for ClarityUIPreferences.inCallKeypadEnabledObserver : ClarityUIPreferences()
{
  return ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
}

uint64_t closure #1 in ClarityUIPreferences.inCallKeypadEnabledObserver.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t ClarityUIPreferences.speakerOptionEnabledObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t key path setter for ClarityUIPreferences.speakerOptionEnabledObserver : ClarityUIPreferences()
{
  return ClarityUIPreferences.incomingCommunicationLimitObserver.setter();
}

uint64_t closure #1 in ClarityUIPreferences.speakerOptionEnabledObserver.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t ClarityUIPreferences.deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit20ClarityUIPreferences___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ClarityUIPreferences.__deallocating_deinit()
{
  ClarityUIPreferences.deinit();
  OUTLINED_FUNCTION_3_2();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ClarityUIPreferences()
{
  return type metadata accessor for ClarityUIPreferences();
}

uint64_t type metadata completion function for ClarityUIPreferences()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ClarityUIPreferences(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClarityUIPreferences);
}

void partial apply for closure #1 in ClarityUIPreferences.speakerOptionEnabled.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 34) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in ClarityUIPreferences.inCallKeypadEnabled.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 33) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in ClarityUIPreferences.recentsEnabled.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 32) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in ClarityUIPreferences.outgoingCommunicationLimit.setter()
{
  closure #1 in ClarityUIPreferences.outgoingCommunicationLimit.setter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void partial apply for closure #1 in ClarityUIPreferences.incomingCommunicationLimit.setter()
{
  closure #1 in ClarityUIPreferences.incomingCommunicationLimit.setter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t type metadata accessor for CLFPhoneFaceTimeSettings()
{
  unint64_t result = lazy cache variable for type metadata for CLFPhoneFaceTimeSettings;
  if (!lazy cache variable for type metadata for CLFPhoneFaceTimeSettings)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CLFPhoneFaceTimeSettings);
  }
  return result;
}

uint64_t sub_1C3016B38()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ClarityUIPreferences.().init()()
{
  return closure #1 in ClarityUIPreferences.().init()();
}

uint64_t partial apply for closure #2 in ClarityUIPreferences.().init()()
{
  return closure #1 in ClarityUIPreferences.().init()();
}

uint64_t partial apply for closure #3 in ClarityUIPreferences.().init()()
{
  return closure #3 in ClarityUIPreferences.().init()();
}

uint64_t partial apply for closure #4 in ClarityUIPreferences.().init()()
{
  return closure #3 in ClarityUIPreferences.().init()();
}

uint64_t objectdestroy_20Tm()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in ClarityUIPreferences.().init()()
{
  return closure #3 in ClarityUIPreferences.().init()();
}

uint64_t sub_1C3016D68()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.speakerOptionEnabledObserver.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #1 in ClarityUIPreferences.speakerOptionEnabledObserver.setter()
{
  return closure #1 in ClarityUIPreferences.speakerOptionEnabledObserver.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3016DB0()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.inCallKeypadEnabledObserver.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #1 in ClarityUIPreferences.inCallKeypadEnabledObserver.setter()
{
  return closure #1 in ClarityUIPreferences.inCallKeypadEnabledObserver.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3016DF8()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.recentsEnabledObserver.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #1 in ClarityUIPreferences.recentsEnabledObserver.setter()
{
  return closure #1 in ClarityUIPreferences.recentsEnabledObserver.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3016E40()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.outgoingCommunicationLimitObserver.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #1 in ClarityUIPreferences.outgoingCommunicationLimitObserver.setter()
{
  return closure #1 in ClarityUIPreferences.outgoingCommunicationLimitObserver.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3016E88()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = ClarityUIPreferences.incomingCommunicationLimitObserver.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #1 in ClarityUIPreferences.incomingCommunicationLimitObserver.setter()
{
  return closure #1 in ClarityUIPreferences.incomingCommunicationLimitObserver.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

__C::CGRect __swiftcall CGRect.flipIfNeeded(in:)(__C::CGRect in)
{
  double v5 = v4;
  double v6 = v3;
  double v7 = v2;
  double v8 = v1;
  result.size.height = v5;
  result.size.width = v6;
  result.origin.y = v7;
  result.origin.x = v8;
  return result;
}

__C::CGRect __swiftcall CGRect.centered(in:)(__C::CGRect in)
{
  double v3 = v2;
  double v4 = v1;
  CGFloat height = in.size.height;
  CGFloat width = in.size.width;
  CGFloat y = in.origin.y;
  CGFloat x = in.origin.x;
  CGFloat v9 = CGRectGetMidX((CGRect)in) - v1 * 0.5;
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  double v10 = CGRectGetMidY(v14) - v3 * 0.5;
  double v11 = v9;
  double v12 = v4;
  double v13 = v3;
  result.size.CGFloat height = v13;
  result.size.CGFloat width = v12;
  result.origin.CGFloat y = v10;
  result.origin.CGFloat x = v11;
  return result;
}

void CGRect.applyInsets(top:left:bottom:right:)()
{
  double v1 = OUTLINED_FUNCTION_1_34();
  *(double *)uint64_t v0 = UIEdgeInsetsInsetRect(v1, v2, v3, v4, v5, v6);
  *(void *)(v0 + 8) = v7;
  *(void *)(v0 + 16) = v8;
  *(void *)(v0 + 24) = v9;
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

void CGRect.applyInsets(dx:dy:)()
{
  v3.origin.CGFloat x = OUTLINED_FUNCTION_1_34();
  *uint64_t v0 = CGRectInset(v3, v1, v2);
}

BOOL CGRect.isValid.getter()
{
  OUTLINED_FUNCTION_7();
  CGFloat Width = CGRectGetWidth(v5);
  if ((~*(void *)&Width & 0x7FF0000000000000) == 0 && (*(void *)&Width & 0xFFFFFFFFFFFFFLL) != 0) {
    return 0;
  }
  v6.origin.CGFloat x = OUTLINED_FUNCTION_6_2();
  CGFloat Height = CGRectGetHeight(v6);
  if ((~*(void *)&Height & 0x7FF0000000000000) == 0 && (*(void *)&Height & 0xFFFFFFFFFFFFFLL) != 0) {
    return 0;
  }
  if ((~v1 & 0x7FF0000000000000) == 0 && (v1 & 0xFFFFFFFFFFFFFLL) != 0
    || (~v0 & 0x7FF0000000000000) == 0 && (v0 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    return 0;
  }
  v7.origin.CGFloat x = OUTLINED_FUNCTION_6_2();
  return !CGRectIsInfinite(v7);
}

uint64_t CGRect.description.getter()
{
  OUTLINED_FUNCTION_7();
  v0._uint64_t countAndFlagsBits = 40;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  type metadata accessor for CGPoint(0);
  OUTLINED_FUNCTION_3_34();
  v1._uint64_t countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  type metadata accessor for CGSize(0);
  OUTLINED_FUNCTION_3_34();
  v2._uint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CGRect()
{
  return CGRect.description.getter();
}

void *key path getter for SystemApertureInCallLeadingView.icon : SystemApertureInCallLeadingView@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))(v4);
  return memcpy(a2, v4, 0x50uLL);
}

uint64_t key path setter for SystemApertureInCallLeadingView.icon : SystemApertureInCallLeadingView(void *__src, void **a2)
{
  memcpy(v5, __src, sizeof(v5));
  CGRect v3 = *(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  outlined retain of SystemApertureIcon((uint64_t)v5);
  return v3(v5);
}

uint64_t SystemApertureInCallLeadingView.icon.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_icon;
  swift_beginAccess();
  double v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  CGRect v6 = *(void **)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  char v9 = *(unsigned char *)(v3 + 40);
  uint64_t v11 = *(void *)(v3 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  char v14 = *(unsigned char *)(v3 + 64);
  uint64_t v12 = *(void *)(v3 + 72);
  outlined copy of SystemApertureIconAsset(*(void **)v3, v5, v6, v7, v8, v9);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v12;
  return swift_bridgeObjectRetain();
}

uint64_t SystemApertureInCallLeadingView.icon.setter(const void *a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_icon);
  swift_beginAccess();
  double v4 = *(void **)v3;
  uint64_t v5 = *((void *)v3 + 1);
  CGRect v6 = (void *)*((void *)v3 + 2);
  uint64_t v7 = *((void *)v3 + 3);
  uint64_t v8 = *((void *)v3 + 4);
  char v9 = *((unsigned char *)v3 + 40);
  memcpy(v3, a1, 0x50uLL);
  outlined retain of SystemApertureIcon((uint64_t)a1);
  outlined consume of SystemApertureIconAsset(v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  SystemApertureInCallLeadingView.updateIconView()();
  return outlined release of SystemApertureIcon((uint64_t)a1);
}

uint64_t outlined retain of SystemApertureIcon(uint64_t a1)
{
  return a1;
}

id (*SystemApertureInCallLeadingView.icon.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return SystemApertureInCallLeadingView.icon.modify;
}

id SystemApertureInCallLeadingView.icon.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0) {
    return SystemApertureInCallLeadingView.updateIconView()();
  }
  return result;
}

uint64_t SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(uint64_t a1, uint64_t a2)
{
  return SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:));
}

uint64_t SystemApertureInCallLeadingView.init(icon:callDurationProvider:)(uint64_t a1, uint64_t a2)
{
  return SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SystemApertureInCallLeadingView.init(icon:callDurationProvider:));
}

uint64_t SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v8);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_5_1();
  (*(void (**)(uint64_t))(v11 + 16))(v4);
  uint64_t v12 = a3(a1, v4, v3, v8, v9);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v12;
}

char *closure #1 in SystemApertureInCallLeadingView.init(icon:callDurationProvider:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  id result = (char *)MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = *(void **)&result[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_durationView];
    uint64_t v4 = result;
    id v5 = objc_msgSend(v3, sel_accessibilityLabel);
    if (v5)
    {
      CGRect v6 = v5;
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      uint64_t v10 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
      }
      if (v10)
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        MEMORY[0x1F4188790](v11 - 8);
        double v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v14 = type metadata accessor for Locale();
        __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v14);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = xmmword_1C3769620;
        *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v15 + 32) = v7;
        *(void *)(v15 + 40) = v9;
        uint64_t v16 = one-time initialization token for conversationKit;
        swift_bridgeObjectRetain();
        if (v16 != -1) {
          swift_once();
        }
        uint64_t v17 = unk_1EA37DFA0;
        uint64_t v18 = (void *)qword_1EA37DFA8;
        id v19 = (id)static LocalizationSource.conversationKit;
        swift_bridgeObjectRetain();
        v34._object = (void *)0xE000000000000000;
        v20._object = (void *)0x80000001C37939E0;
        v20._uint64_t countAndFlagsBits = 0xD000000000000021;
        v21.value._uint64_t countAndFlagsBits = v17;
        v21.value._object = v18;
        v22._uint64_t countAndFlagsBits = 0;
        v22._object = (void *)0xE000000000000000;
        v34._uint64_t countAndFlagsBits = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v34);
        uint64_t countAndFlagsBits = String.init(format:locale:arguments:)();
        object = v24;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        outlined destroy of Locale?((uint64_t)v13);
        swift_bridgeObjectRelease();
LABEL_13:
        outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(countAndFlagsBits, (uint64_t)object, v4);

        objc_msgSend(objc_msgSend(v4, sel_systemApertureElementContext), sel_setElementNeedsUpdate);
        return (char *)swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v26 = unk_1EA37DFA0;
    id v27 = (void *)qword_1EA37DFA8;
    id v28 = (id)static LocalizationSource.conversationKit;
    swift_bridgeObjectRetain();
    v35._object = (void *)0xE000000000000000;
    v29._uint64_t countAndFlagsBits = 0x494F474E4F5F5841;
    v29._object = (void *)0xEF4C4C41435F474ELL;
    v30.value._uint64_t countAndFlagsBits = v26;
    v30.value._object = v27;
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v35._uint64_t countAndFlagsBits = 0;
    Swift::String v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v35);
    uint64_t countAndFlagsBits = v32._countAndFlagsBits;
    object = v32._object;
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  return result;
}

id SystemApertureInCallLeadingView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SystemApertureInCallLeadingView.init(frame:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_interItemSpacing] = 0x4010000000000000;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_extraDurationPadding] = 0x4000000000000000;

  OUTLINED_FUNCTION_3_35();
  __break(1u);
}

id SystemApertureInCallLeadingView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureInCallLeadingView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_interItemSpacing] = 0x4010000000000000;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_extraDurationPadding] = 0x4000000000000000;

  OUTLINED_FUNCTION_3_35();
  __break(1u);
}

id SystemApertureInCallLeadingView.__deallocating_deinit()
{
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_durationView);
  type metadata accessor for OS_dispatch_queue();
  id v3 = v2;
  uint64_t v4 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  aBlock[4] = partial apply for closure #1 in SystemApertureInCallLeadingView.deinit;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8;
  CGRect v6 = _Block_copy(aBlock);
  id v19 = v3;
  swift_release();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_5_1();
  static DispatchQoS.unspecified.getter();
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_5_3();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C8773BA0](0, v1, v17, v6);
  _Block_release(v6);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
  v21.receiver = v20;
  v21.super_class = (Class)type metadata accessor for SystemApertureInCallLeadingView();
  return objc_msgSendSuper2(&v21, sel_dealloc);
}

uint64_t closure #1 in SystemApertureInCallLeadingView.deinit(void *a1)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60))(0, 0);
}

Swift::Void __swiftcall SystemApertureInCallLeadingView.layoutSubviews()()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  OUTLINED_FUNCTION_5_3();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = v6 - v5;
  v32.receiver = v0;
  v32.super_class = (Class)type metadata accessor for SystemApertureInCallLeadingView();
  objc_msgSendSuper2(&v32, sel_layoutSubviews);
  id v8 = objc_msgSend(v0, sel_effectiveUserInterfaceLayoutDirection);
  uint64_t v9 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_iconView];
  OUTLINED_FUNCTION_2_19();
  objc_msgSend(v9, sel_sizeThatFits_, v10, v11);
  double v13 = v12;
  double v15 = v14;
  double v16 = 0.0;
  if (v8 == (id)1)
  {
    OUTLINED_FUNCTION_2_19();
    double v16 = CGRectGetWidth(v33) - v13;
  }
  OUTLINED_FUNCTION_2_19();
  double v17 = (CGRectGetHeight(v34) - v15) * 0.5;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x1E4FBBEB0], v1);
  id v18 = objc_msgSend(v0, sel_traitCollection);
  objc_msgSend(v18, sel_displayScale);
  double v20 = v19;
  double v21 = CGFloat.rounded(_:toScale:)(v7, v19, v16);
  double v22 = CGFloat.rounded(_:toScale:)(v7, v20, v17);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  objc_msgSend(v9, sel_setFrame_, v21, v22, v13, v15);
  OUTLINED_FUNCTION_2_19();
  CGFloat Width = CGRectGetWidth(v35);
  double v24 = *(double *)&v0[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_interItemSpacing];
  CGFloat v25 = Width - v13 - v24;
  OUTLINED_FUNCTION_2_19();
  CGFloat Height = CGRectGetHeight(v36);
  id v27 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_durationView];
  objc_msgSend(v27, sel_sizeThatFits_, v25, Height);
  double v29 = v28;
  if (v8 == (id)1) {
    double v30 = 0.0;
  }
  else {
    double v30 = v13 + v24;
  }
  OUTLINED_FUNCTION_2_19();
  CGFloat v31 = (CGRectGetHeight(v37) - v29) * 0.5;
  OUTLINED_FUNCTION_2_19();
  objc_msgSend(v27, sel_setFrame_, v30, v31, CGRectGetWidth(v38) - v13 - v24, v29);
}

CGSize __swiftcall SystemApertureInCallLeadingView.sizeThatFits(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_iconView), sel_sizeThatFits_);
  double v5 = v4;
  double v7 = v6;
  double v8 = width - v4;
  double v9 = *(double *)(v1 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_interItemSpacing);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_durationView), sel_sizeThatFits_, v8 - v9, height);
  if (v7 > v11) {
    double v11 = v7;
  }
  double v12 = v5
      + v9
      + v10
      + *(double *)(v1 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_extraDurationPadding);
  result.double height = v11;
  result.double width = v12;
  return result;
}

id SystemApertureInCallLeadingView.sizeThatFits(_:for:)()
{
  return objc_msgSend(v0, sel_sizeThatFits_);
}

uint64_t SystemApertureInCallLeadingView.preferredLayoutMargins.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **(void **)(v1
                                                                                     + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_iconView))
                                               + 0xA8))(v4);
  return outlined init with take of SystemApertureLayoutMargins((uint64_t)v4, a1);
}

id SystemApertureInCallLeadingView.updateIconView()()
{
  uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_iconView);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))(v4);
  (*(void (**)(void *))((*v2 & *v1) + 0x70))(v4);
  return objc_msgSend(v0, sel_setNeedsLayout);
}

uint64_t outlined release of SystemApertureIcon(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for SystemApertureAccessoryView.preferredLayoutMargins.getter in conformance SystemApertureInCallLeadingView@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA0))(v4);
  return outlined init with take of SystemApertureLayoutMargins((uint64_t)v4, a1);
}

char *specialized SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_5_3();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  uint64_t v14 = v13 - v12;
  double v15 = (char *)objc_allocWithZone((Class)type metadata accessor for SystemApertureInCallLeadingView());
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v14, a2, a4);
  double v16 = specialized SystemApertureInCallLeadingView.init(icon:callDurationProvider:)(a1, v14, v15, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a4);
  return v16;
}

char *specialized SystemApertureInCallLeadingView.init(icon:callDurationProvider:)(const void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](ObjectType);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  double v16 = (char *)&v47 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))((char *)&v47 - v15, a2, a4);
  *(void *)&a3[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_interItemSpacing] = 0x4010000000000000;
  *(void *)&a3[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_extraDurationPadding] = 0x4000000000000000;
  memcpy(&a3[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_icon], a1, 0x50uLL);
  id v17 = objc_allocWithZone((Class)type metadata accessor for SystemApertureIconView());
  outlined retain of SystemApertureIcon((uint64_t)a1);
  outlined retain of SystemApertureIcon((uint64_t)a1);
  id v18 = a3;
  *(void *)&v18[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_iconView] = SystemApertureIconView.init(icon:isDetached:)((uint64_t)a1, 0);
  id v19 = objc_msgSend(self, sel_monospacedDigitSystemFontOfSize_weight_, 14.0, *MEMORY[0x1E4FB09E0]);
  id v20 = objc_allocWithZone((Class)type metadata accessor for LiveCallDurationView());
  double v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v48 = v16;
  v21(v14, v16, a4);
  *(void *)&v18[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_durationView] = specialized LiveCallDurationView.init(font:callDurationProvider:voiceOverUpdateHandler:)(v19, (uint64_t)v14, 0, 0, v20, a4, a5);

  double v22 = (objc_class *)type metadata accessor for SystemApertureInCallLeadingView();
  v51.receiver = v18;
  v51.super_class = v22;
  id v23 = objc_msgSendSuper2(&v51, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v24 = one-time initialization token for conversationControls;
  CGFloat v25 = (char *)v23;
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationControls);
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    double v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v50 = v30;
    uint64_t v47 = v11;
    *(_DWORD *)double v29 = 136446210;
    uint64_t v31 = _typeName(_:qualified:)();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v50);
    uint64_t v11 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v27, v28, "[SystemAperture] %{public}s created", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v30, -1, -1);
    MEMORY[0x1C87760E0](v29, -1, -1);
  }

  objc_msgSend(v25, sel_addSubview_, *(void *)&v25[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_iconView]);
  uint64_t v33 = OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_durationView;
  objc_msgSend(v25, sel_addSubview_, *(void *)&v25[OBJC_IVAR____TtC15ConversationKit31SystemApertureInCallLeadingView_durationView]);
  uint64_t v34 = one-time initialization token for conversationKit;
  CGRect v35 = v25;
  if (v34 != -1) {
    swift_once();
  }
  uint64_t v36 = unk_1EA37DFA0;
  CGRect v37 = (void *)qword_1EA37DFA8;
  id v38 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  v52._object = (void *)0xE000000000000000;
  v39._uint64_t countAndFlagsBits = 0x494F474E4F5F5841;
  v39._object = (void *)0xEF4C4C41435F474ELL;
  v40.value._uint64_t countAndFlagsBits = v36;
  v40.value._object = v37;
  v41._uint64_t countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  v52._uint64_t countAndFlagsBits = 0;
  Swift::String v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, v40, (NSBundle)v38, v41, v52);
  swift_bridgeObjectRelease();

  outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v42._countAndFlagsBits, (uint64_t)v42._object, v35);
  SystemApertureInCallLeadingView.updateIconView()();
  uint64_t v43 = *(void **)&v25[v33];
  uint64_t v44 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v45 = *(void (**)(char *(*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & *v43) + 0x60);
  swift_retain();
  v45(partial apply for closure #1 in SystemApertureInCallLeadingView.init(icon:callDurationProvider:), v44);

  outlined release of SystemApertureIcon((uint64_t)a1);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v48, a4);
  swift_release();
  return v35;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_1C3018AB8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemApertureInCallLeadingView.deinit()
{
  return closure #1 in SystemApertureInCallLeadingView.deinit(*(void **)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for SystemApertureInCallLeadingView()
{
  return self;
}

uint64_t outlined init with take of SystemApertureLayoutMargins(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t method lookup function for SystemApertureInCallLeadingView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureInCallLeadingView);
}

uint64_t dispatch thunk of SystemApertureInCallLeadingView.icon.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SystemApertureInCallLeadingView.icon.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_6_16(a1);
  OUTLINED_FUNCTION_1_35();
  return v1();
}

uint64_t dispatch thunk of SystemApertureInCallLeadingView.icon.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SystemApertureInCallLeadingView.__allocating_init(icon:callDurationProvider:)(uint64_t a1)
{
  OUTLINED_FUNCTION_6_16(a1);
  OUTLINED_FUNCTION_1_35();
  return v1();
}

uint64_t dispatch thunk of SystemApertureInCallLeadingView.sizeThatFits(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SystemApertureInCallLeadingView.preferredLayoutMargins.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t sub_1C3018D4C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

char *partial apply for closure #1 in SystemApertureInCallLeadingView.init(icon:callDurationProvider:)()
{
  return closure #1 in SystemApertureInCallLeadingView.init(icon:callDurationProvider:)(v0);
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PushToTalkTalkButtonController.__allocating_init(button:viewModel:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  PushToTalkTalkButtonController.init(button:viewModel:)(a1, a2);
  return v4;
}

uint64_t PushToTalkTalkButtonController.init(button:viewModel:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>.Publisher);
  OUTLINED_FUNCTION_5_3();
  uint64_t v27 = v7;
  uint64_t v28 = v6;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 40) = MEMORY[0x1E4FBC870];
  *(unsigned char *)(v2 + 32) = 0;
  swift_unknownObjectWeakAssign();
  *(void *)(v2 + 16) = a2;
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 160);
  uint64_t v12 = swift_retain();
  uint64_t v13 = v11(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    *((void *)&v30 + 1) = type metadata accessor for ConversationControlsManager(0);
    *(void *)&long long v29 = v14;
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_21();
  uint64_t v18 = v17 - v16;
  *(void *)(v17 - v16) = 300;
  (*(void (**)(uint64_t, void))(v19 + 104))(v17 - v16, *MEMORY[0x1E4FBCAC0]);
  id v20 = objc_allocWithZone((Class)type metadata accessor for PushToTalkTalkButtonGestureRecognizer());
  id v21 = PushToTalkTalkButtonGestureRecognizer.init(interval:maximumVerticalVelocity:target:action:)(v18, (uint64_t)&v29, (uint64_t)sel_pttTalkButtonGestureChangedWithRecognizer_, 100.0);
  objc_msgSend(v21, sel_setCancelsTouchesInView_, 0);
  objc_msgSend(v21, sel_addTarget_action_, v3, sel_pressGestureChangedWithGestureRecognizer_);
  uint64_t v22 = v11((uint64_t)objc_msgSend(a1, sel_addGestureRecognizer_, v21));
  if (v22)
  {
    uint64_t v23 = v22;
    *((void *)&v30 + 1) = type metadata accessor for ConversationControlsManager(0);
    *(void *)&long long v29 = v23;
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  id v24 = objc_allocWithZone(MEMORY[0x1E4FB1D38]);
  id v25 = @nonobjc UITapGestureRecognizer.init(target:action:)(&v29, (uint64_t)sel_pttDoneButtonTappedWithRecognizer_);
  objc_msgSend(v25, sel_shouldRequireFailureOfGestureRecognizer_, v21);
  (*(void (**)(id))(*(void *)a2 + 136))(objc_msgSend(a1, sel_addGestureRecognizer_, v25));
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type Published<PushToTalkViewModel.TalkButtonState>.Publisher and conformance Published<A>.Publisher();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v10, v28);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();

  swift_release();
  swift_release();
  return v3;
}

void closure #1 in PushToTalkTalkButtonController.init(button:viewModel:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)MEMORY[0x1C8776240](Strong + 24);
    swift_release();
    if (v3)
    {
      if (v1 == 2)
      {
        objc_msgSend(v3, sel_setHighlighted_, 0);
        uint64_t v4 = 1;
      }
      else
      {
        if (v1 != 3)
        {
          uint64_t v4 = 1;
          objc_msgSend(v3, sel_setEnabled_, 1);
          if (v1)
          {
LABEL_11:
            objc_msgSend(v3, sel_setNeedsUpdateConfiguration);

            return;
          }
          double v5 = &selRef_setHighlighted_;
LABEL_10:
          objc_msgSend(v3, *v5, v4);
          goto LABEL_11;
        }
        uint64_t v4 = 0;
      }
      double v5 = &selRef_setEnabled_;
      goto LABEL_10;
    }
  }
}

uint64_t PushToTalkTalkButtonController.buttonComputedState.getter()
{
  int v1 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 16) + 112);
  uint64_t v2 = swift_retain();
  char v3 = v1(v2);
  swift_release();
  if (v3 & 0xFE) != 2 && (v3)
  {
    uint64_t v7 = (void *)MEMORY[0x1C8776240](v0 + 24);
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned __int8 v9 = objc_msgSend(v7, sel_isHighlighted);

      if (v9) {
        return 1;
      }
    }
    return 0;
  }
  if (*(unsigned char *)(v0 + 32)) {
    return 1;
  }
  double v5 = (void *)MEMORY[0x1C8776240](v0 + 24);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (objc_msgSend(v5, sel_isHighlighted))
  {

    return 1;
  }
  unsigned int v11 = objc_msgSend(v6, sel_isEnabled);

  if (v11) {
    return 0;
  }
  return 2;
}

void PushToTalkTalkButtonController.pressGestureChanged(gestureRecognizer:)(void *a1)
{
  unint64_t v2 = (unint64_t)objc_msgSend(a1, sel_state);
  if (v2 <= 5 && ((0x3Bu >> v2) & 1) != 0)
  {
    *(unsigned char *)(v1 + 32) = 0x10100uLL >> (8 * v2);
    id v3 = (id)MEMORY[0x1C8776240](v1 + 24);
    objc_msgSend(v3, sel_setNeedsUpdateConfiguration);
  }
}

uint64_t PushToTalkTalkButtonController.deinit()
{
  swift_release();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PushToTalkTalkButtonController.__deallocating_deinit()
{
  PushToTalkTalkButtonController.deinit();
  return swift_deallocClassInstance();
}

id @nonobjc UITapGestureRecognizer.init(target:action:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    OUTLINED_FUNCTION_5_3();
    uint64_t v7 = v6;
    MEMORY[0x1F4188790](v8);
    OUTLINED_FUNCTION_21();
    uint64_t v11 = v10 - v9;
    (*(void (**)(uint64_t))(v7 + 16))(v10 - v9);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v13 = objc_msgSend(v2, sel_initWithTarget_action_, v12, a2);
  swift_unknownObjectRelease();
  return v13;
}

uint64_t sub_1C3019600()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in PushToTalkTalkButtonController.init(button:viewModel:)(unsigned __int8 *a1)
{
}

unint64_t lazy protocol witness table accessor for type Published<PushToTalkViewModel.TalkButtonState>.Publisher and conformance Published<A>.Publisher()
{
  unint64_t result = lazy protocol witness table cache variable for type Published<PushToTalkViewModel.TalkButtonState>.Publisher and conformance Published<A>.Publisher;
  if (!lazy protocol witness table cache variable for type Published<PushToTalkViewModel.TalkButtonState>.Publisher and conformance Published<A>.Publisher)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>.Publisher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Published<PushToTalkViewModel.TalkButtonState>.Publisher and conformance Published<A>.Publisher);
  }
  return result;
}

uint64_t type metadata accessor for PushToTalkTalkButtonController()
{
  return self;
}

uint64_t method lookup function for PushToTalkTalkButtonController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkTalkButtonController);
}

uint64_t dispatch thunk of PushToTalkTalkButtonController.__allocating_init(button:viewModel:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PushToTalkTalkButtonController.buttonComputedState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

id CallControlsFullScreenStatusView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id CallControlsFullScreenStatusView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___effectsView) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textLeadingConstraint) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___titleLabel) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___subtitleLabel) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer) = 0;
  uint64_t v7 = ObjectType;
  double v2 = OUTLINED_FUNCTION_6_2();
  id v5 = objc_msgSendSuper2(v3, v4, v2, v0, v7);
  CallControlsFullScreenStatusView.build()();

  return v5;
}

void CallControlsFullScreenStatusView.build()()
{
  id v1 = v0;
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769580;
  id v3 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___effectsView, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.effectsView.getter);
  id v4 = objc_msgSend(v3, sel_topAnchor);

  id v5 = objc_msgSend(v1, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  *(void *)(v2 + 32) = v6;
  id v7 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___effectsView, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.effectsView.getter);
  id v8 = objc_msgSend(v7, sel_bottomAnchor);

  id v9 = objc_msgSend(v1, sel_bottomAnchor);
  id v10 = objc_msgSend(v8, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v9);

  *(void *)(v2 + 40) = v10;
  id v11 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___effectsView, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.effectsView.getter);
  id v12 = objc_msgSend(v11, sel_leadingAnchor);

  id v13 = objc_msgSend(v1, sel_leadingAnchor);
  id v14 = objc_msgSend(v12, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v13);

  *(void *)(v2 + 48) = v14;
  id v15 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___effectsView, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.effectsView.getter);
  id v16 = objc_msgSend(v15, sel_trailingAnchor);

  id v17 = objc_msgSend(v1, sel_trailingAnchor);
  id v18 = objc_msgSend(v16, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v17);

  *(void *)(v2 + 56) = v18;
  unint64_t v43 = v2;
  specialized Array._endMutation()();
  id v19 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.textContainer.getter);
  id v20 = objc_msgSend(v19, sel_topAnchor);

  id v21 = objc_msgSend(v1, sel_topAnchor);
  id v41 = objc_msgSend(v20, sel_constraintGreaterThanOrEqualToAnchor_, v21);

  id v22 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.textContainer.getter);
  id v23 = objc_msgSend(v22, sel_bottomAnchor);

  id v24 = objc_msgSend(v1, sel_bottomAnchor);
  id v25 = objc_msgSend(v23, sel_constraintLessThanOrEqualToAnchor_, v24);

  id v26 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.textContainer.getter);
  id v27 = objc_msgSend(v26, sel_centerYAnchor);

  id v28 = objc_msgSend(v1, sel_centerYAnchor);
  id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  id v30 = CallControlsFullScreenStatusView.textLeadingConstraint.getter();
  id v31 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.textContainer.getter);
  id v32 = objc_msgSend(v31, sel_trailingAnchor);

  id v33 = objc_msgSend(v1, sel_trailingAnchor);
  id v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v33);

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v35, 5))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v35 + 5, 1);
    specialized Array._endMutation()();
    unint64_t v2 = (unint64_t)v41;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_5;
    }
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_5:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v36 = v25;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v37 = v29;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v38 = v30;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v39 = v34;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  Swift::String_optional v40 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_activateConstraints_, isa);
}

id CallControlsFullScreenStatusView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CallControlsFullScreenStatusView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___effectsView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textLeadingConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___titleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___subtitleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CallControlsFullScreenStatusView.set(title:subtitle:)(Swift::String_optional title, Swift::String_optional subtitle)
{
  object = subtitle.value._object;
  uint64_t countAndFlagsBits = subtitle.value._countAndFlagsBits;
  id v4 = title.value._object;
  uint64_t v5 = title.value._countAndFlagsBits;
  id v6 = CallControlsFullScreenStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___titleLabel, MEMORY[0x1E4FB28D8]);
  if (v4) {
    id v7 = (void *)MEMORY[0x1C87730B0](v5, v4);
  }
  else {
    id v7 = 0;
  }
  objc_msgSend(v6, sel_setText_, v7);

  id v8 = CallControlsFullScreenStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___titleLabel, MEMORY[0x1E4FB28D8]);
  objc_msgSend(v8, sel_setHidden_, v4 == 0);

  id v9 = CallControlsFullScreenStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___subtitleLabel, MEMORY[0x1E4FB28E0]);
  if (object) {
    id v10 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
  }
  else {
    id v10 = 0;
  }
  objc_msgSend(v9, sel_setText_, v10);

  id v11 = CallControlsFullScreenStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___subtitleLabel, MEMORY[0x1E4FB28E0]);
  objc_msgSend(v11, sel_setHidden_, object == 0);
}

id CallControlsFullScreenStatusView.titleLabel.getter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = closure #1 in CallControlsFullScreenStatusView.titleLabel.getter(a2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

Swift::Void __swiftcall CallControlsFullScreenStatusView.update(statusLayoutGuide:)(UILayoutGuide statusLayoutGuide)
{
  id v2 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.textContainer.getter);
  id v3 = objc_msgSend(v2, sel_leadingAnchor);

  id v4 = [(objc_class *)statusLayoutGuide.super.isa leadingAnchor];
  id v5 = objc_msgSend(v3, sel_constraintEqualToAnchor_, v4);

  CallControlsFullScreenStatusView.textLeadingConstraint.setter(v5);
}

void CallControlsFullScreenStatusView.textLeadingConstraint.setter(void *a1)
{
  id v3 = CallControlsFullScreenStatusView.textLeadingConstraint.getter();
  id v4 = *(void **)(v1
                + OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textLeadingConstraint);
  *(void *)(v1
            + OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textLeadingConstraint) = a1;
  id v5 = a1;

  CallControlsFullScreenStatusView.textLeadingConstraint.didset(v3);
}

id CallControlsFullScreenStatusView.textContainer.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in CallControlsFullScreenStatusView.effectsView.getter(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1FE0]), sel_initWithPrivateStyle_, 2030);
  if (!v2) {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  }
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(a1, sel_addSubview_, v2);
  return v2;
}

void CallControlsFullScreenStatusView.textLeadingConstraint.didset(void *a1)
{
  objc_msgSend(a1, sel_setActive_, 0);
  id v1 = CallControlsFullScreenStatusView.textLeadingConstraint.getter();
  objc_msgSend(v1, sel_setActive_, 1);
}

id CallControlsFullScreenStatusView.textLeadingConstraint.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textLeadingConstraint;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textLeadingConstraint];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textLeadingConstraint];
  }
  else
  {
    id v4 = CallControlsFullScreenStatusView.textContainer.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___textContainer, (uint64_t (*)(uint64_t))closure #1 in CallControlsFullScreenStatusView.textContainer.getter);
    id v5 = objc_msgSend(v4, sel_leadingAnchor);

    id v6 = objc_msgSend(v0, sel_leadingAnchor);
    id v7 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v6);

    id v8 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v7;
    id v3 = v7;

    id v2 = 0;
  }
  id v9 = v2;
  return v3;
}

id closure #1 in CallControlsFullScreenStatusView.titleLabel.getter(uint64_t *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  id v3 = static UIFont.preferredFont(textStyle:weight:maximumPointSize:)(*a1, 0, 1);
  objc_msgSend(v2, sel_setFont_, v3);

  return v2;
}

void *closure #1 in CallControlsFullScreenStatusView.textContainer.getter(void *a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769610;
  *(void *)(v2 + 32) = CallControlsFullScreenStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___titleLabel, MEMORY[0x1E4FB28D8]);
  *(void *)(v2 + 40) = CallControlsFullScreenStatusView.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit32CallControlsFullScreenStatusView____lazy_storage___subtitleLabel, MEMORY[0x1E4FB28E0]);
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v3, (Swift::OpaquePointer)v2);
  id v5 = v4;
  objc_msgSend(v4, sel_setAxis_, 1);
  objc_msgSend(v5, sel_setSpacing_, 8.0);
  objc_msgSend(v5, sel_setAlignment_, 3);
  objc_msgSend(v5, sel_setDistribution_, 0);
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(a1, sel_addSubview_, v5);
  return v5;
}

id CallControlsFullScreenStatusView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id (*protocol witness for CallControlsFullScreenStatusViewing.isHidden.modify in conformance CallControlsFullScreenStatusView(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(v1, sel_isHidden);
  return protocol witness for CallControlsFullScreenStatusViewing.isHidden.modify in conformance CallControlsFullScreenStatusView;
}

id protocol witness for CallControlsFullScreenStatusViewing.isHidden.modify in conformance CallControlsFullScreenStatusView(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, sel_setHidden_, *(unsigned __int8 *)(a1 + 8));
}

uint64_t type metadata accessor for CallControlsFullScreenStatusView()
{
  return self;
}

id InCallControlsPTTLeaveChannelFooterView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

char *InCallControlsPTTLeaveChannelFooterView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit39InCallControlsPTTLeaveChannelFooterView_titleLabel;
  id v2 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  id v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);

  type metadata accessor for InCallControlsPTTLeaveChannelFooterView();
  double v4 = OUTLINED_FUNCTION_6_2();
  id v7 = (char *)objc_msgSendSuper2(v5, v6, v4);
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit39InCallControlsPTTLeaveChannelFooterView_titleLabel;
  id v9 = *(void **)&v7[OBJC_IVAR____TtC15ConversationKit39InCallControlsPTTLeaveChannelFooterView_titleLabel];
  id v10 = self;
  id v11 = v7;
  id v12 = v9;
  id v13 = objc_msgSend(v10, sel_conversationKit);
  v43._object = (void *)0xE000000000000000;
  v14._object = (void *)0x80000001C3793BA0;
  v14._uint64_t countAndFlagsBits = 0xD000000000000026;
  v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v15.value._object = (void *)0xEF74694B6E6F6974;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v43._uint64_t countAndFlagsBits = 0;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v43);

  outlined bridged method (mbnn) of @objc UILabel.text.setter(v17._countAndFlagsBits, (uint64_t)v17._object, v12);
  id v18 = *(void **)&v7[v8];
  id v19 = self;
  uint64_t v20 = *MEMORY[0x1E4FB28F0];
  id v21 = v18;
  id v22 = objc_msgSend(v19, sel_preferredFontForTextStyle_, v20);
  Class isa = UIFont.withTraits(_:)(0x8000u).super.isa;

  objc_msgSend(v21, sel_setFont_, isa);
  uint64_t v24 = one-time initialization token for collectionViewSectionHeaderTitleLabel;
  id v25 = *(id *)&v7[v8];
  if (v24 != -1) {
    swift_once();
  }
  objc_msgSend(v25, sel_setTextColor_, static Colors.InCallControls.collectionViewSectionHeaderTitleLabel);

  id v26 = *(void **)&v7[v8];
  objc_msgSend(v26, sel_setNumberOfLines_, 0);
  objc_msgSend(v26, sel_setLineBreakMode_, 0);
  objc_msgSend(v26, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v11, sel_addSubview_, v26);
  id v27 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C3769580;
  id v29 = objc_msgSend(v26, sel_leadingAnchor);
  id v30 = objc_msgSend(v11, sel_leadingAnchor);
  id v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_constant_, v30, 16.0);

  *(void *)(v28 + 32) = v31;
  id v32 = objc_msgSend(*(id *)&v7[v8], sel_trailingAnchor);
  id v33 = objc_msgSend(v11, sel_trailingAnchor);
  id v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_constant_, v33, -16.0);

  *(void *)(v28 + 40) = v34;
  id v35 = objc_msgSend(*(id *)&v7[v8], sel_topAnchor);
  id v36 = objc_msgSend(v11, sel_topAnchor);
  id v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_constant_, v36, -10.0);

  *(void *)(v28 + 48) = v37;
  id v38 = objc_msgSend(*(id *)&v7[v8], sel_bottomAnchor);
  id v39 = objc_msgSend(v11, sel_bottomAnchor);
  id v40 = objc_msgSend(v38, sel_constraintEqualToAnchor_constant_, v39, -30.0);

  *(void *)(v28 + 56) = v40;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_activateConstraints_, v41);

  return v11;
}

uint64_t type metadata accessor for InCallControlsPTTLeaveChannelFooterView()
{
  return self;
}

id InCallControlsPTTLeaveChannelFooterView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsPTTLeaveChannelFooterView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit39InCallControlsPTTLeaveChannelFooterView_titleLabel;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id InCallControlsPTTLeaveChannelFooterView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsPTTLeaveChannelFooterView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t key path getter for SystemApertureConversationDetailsView.recipe : SystemApertureConversationDetailsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
}

uint64_t key path setter for SystemApertureConversationDetailsView.recipe : SystemApertureConversationDetailsView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  SEL v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70))(v6);
}

uint64_t SystemApertureConversationDetailsView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_recipe;
  swift_beginAccess();
  return outlined init with copy of ConversationControlsRecipe(v3, a1);
}

uint64_t SystemApertureConversationDetailsView.recipe.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_recipe;
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v3);
  swift_endAccess();
  SystemApertureConversationDetailsView.updateStatus()();
  return outlined destroy of ConversationControlsRecipe(a1);
}

id (*SystemApertureConversationDetailsView.recipe.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return SystemApertureConversationDetailsView.recipe.modify;
}

id SystemApertureConversationDetailsView.recipe.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0) {
    return SystemApertureConversationDetailsView.updateStatus()();
  }
  return result;
}

double SystemApertureConversationDetailsView.titleLabelGlyphInset.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_primaryLabel);
  objc_msgSend(v1, sel__tightBoundingRectOfFirstLine);
  objc_msgSend(v1, sel_convertPoint_toCoordinateSpace_, v0);
  return v2;
}

id SystemApertureConversationDetailsView.__allocating_init(recipe:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return SystemApertureConversationDetailsView.init(recipe:)(a1);
}

id SystemApertureConversationDetailsView.init(recipe:)(uint64_t a1)
{
  swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_primaryLabel;
  type metadata accessor for UILabel();
  uint64_t v4 = self;
  double v5 = *MEMORY[0x1E4FB09D0];
  SEL v6 = v1;
  id v7 = objc_msgSend(v4, sel_systemFontOfSize_weight_, 16.67, v5);
  uint64_t v8 = self;
  v25.value.super.Class isa = (Class)objc_msgSend(v8, sel_whiteColor);
  UILabel.init(font:textColor:)(v9, (UIFont)v7, v25);
  *(void *)&v1[v3] = v10;
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_secondaryLabel;
  id v12 = objc_msgSend(v4, sel_systemFontOfSize_, 14.0);
  v26.value.super.Class isa = (Class)objc_msgSend(v8, sel_secondaryLabelColor);
  UILabel.init(font:textColor:)(v13, (UIFont)v12, v26);
  *(void *)&v6[v11] = v14;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v6[OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_recipe]);

  v24.receiver = v6;
  v24.super_class = (Class)type metadata accessor for SystemApertureConversationDetailsView();
  id v15 = objc_msgSendSuper2(&v24, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  SystemApertureConversationDetailsView.configureSubviews()();
  SystemApertureConversationDetailsView.updateStatus()();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
  Swift::String v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)id v19 = 136446210;
    uint64_t v20 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v17, v18, "[%{public}s] created", v19, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  outlined destroy of ConversationControlsRecipe(a1);
  return v15;
}

id SystemApertureConversationDetailsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureConversationDetailsView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_primaryLabel;
  type metadata accessor for UILabel();
  double v2 = self;
  id v3 = objc_msgSend(v2, sel_systemFontOfSize_weight_, 16.67, *MEMORY[0x1E4FB09D0]);
  uint64_t v4 = self;
  v11.value.super.Class isa = (Class)objc_msgSend(v4, sel_whiteColor);
  UILabel.init(font:textColor:)(v5, (UIFont)v3, v11);
  *(void *)&v0[v1] = v6;
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_secondaryLabel;
  id v8 = objc_msgSend(v2, sel_systemFontOfSize_, 14.0);
  v12.value.super.Class isa = (Class)objc_msgSend(v4, sel_secondaryLabelColor);
  UILabel.init(font:textColor:)(v9, (UIFont)v8, v12);
  *(void *)&v0[v7] = v10;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall SystemApertureConversationDetailsView.layoutSubviews()()
{
  swift_getObjectType();
  v35.receiver = v0;
  v35.super_class = (Class)type metadata accessor for SystemApertureConversationDetailsView();
  objc_msgSendSuper2(&v35, sel_layoutSubviews);
  objc_msgSend(v0, sel_bounds);
  CGFloat Width = CGRectGetWidth(v36);
  id v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_primaryLabel], sel_font);
  if (!v2)
  {
    __break(1u);
    return;
  }
  id v3 = v2;
  objc_msgSend(v2, sel_lineHeight);
  double v5 = v4;

  objc_msgSend(v0, sel_bounds);
  double v6 = CGRectGetWidth(v37);
  objc_msgSend(v0, sel_bounds);
  double v7 = CGRectGetHeight(v38) - v5;
  id v8 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_secondaryLabel];
  objc_msgSend(v8, sel_sizeThatFits_, v6, v7);
  if (v6 >= v9) {
    double v6 = v9;
  }
  if (v7 >= v10) {
    double v7 = v10;
  }
  uint64_t v11 = self;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v0;
  *(CGFloat *)(v12 + 24) = Width;
  *(double *)(v12 + 32) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #1 in SystemApertureConversationDetailsView.layoutSubviews();
  *(void *)(v13 + 24) = v12;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_9;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v0;
  swift_retain();
  swift_release();
  objc_msgSend((id)v11, sel_performWithoutAnimation_, v14);
  _Block_release(v14);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  uint64_t v16 = swift_release();
  if (v11)
  {
    __break(1u);
    goto LABEL_14;
  }
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v15) + 0x80))(v16);
  if (one-time initialization token for conversationControls != -1) {
LABEL_14:
  }
    swift_once();
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationControls);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v21 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    OUTLINED_FUNCTION_1_36();
    uint64_t v23 = CGRect.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v18, v19, "[%{public}s][layout] primaryFrame: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_1_36();
  [v25 v26];
  OUTLINED_FUNCTION_1_36();
  objc_msgSend(v8, sel_setFrame_, 0.0, CGRectGetMaxY(v39), v6, v7);
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136446466;
    uint64_t v30 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v32 = CGRect.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v27, v28, "[%{public}s][layout] secondaryFrame: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  swift_release();
}

id closure #1 in SystemApertureConversationDetailsView.layoutSubviews()(uint64_t a1, double a2, double a3)
{
  id v3 = *(void **)(a1 + OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_primaryLabel);
  objc_msgSend(v3, sel_setFrame_, 0.0, 0.0, a2, a3);
  objc_msgSend(v3, sel_setNeedsLayout);
  return objc_msgSend(v3, sel_layoutIfNeeded);
}

id SystemApertureConversationDetailsView.updateStatus()()
{
  uint64_t v1 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  double v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  double v7 = (id *)((char *)&v16 - v6);
  id v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_primaryLabel);
  double v9 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68);
  ((void (*)(uint64_t))v9)(v5);
  id v10 = v7[10];
  outlined destroy of ConversationControlsRecipe((uint64_t)v7);
  objc_msgSend(v8, sel_setAttributedText_, v10);

  uint64_t v11 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_secondaryLabel);
  v9();
  unint64_t v12 = *((void *)v4 + 11);
  swift_bridgeObjectRetain();
  outlined destroy of ConversationControlsRecipe((uint64_t)v4);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v13 = *(void **)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v13) {
      goto LABEL_6;
    }
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v12 & 0xC000000000000001) == 0, v12);
  if ((v12 & 0xC000000000000001) != 0) {
    id v14 = (id)MEMORY[0x1C87744F0](0, v12);
  }
  else {
    id v14 = *(id *)(v12 + 32);
  }
  uint64_t v13 = v14;
LABEL_6:
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setAttributedText_, v13);

  objc_msgSend(v11, sel_setMarqueeEnabled_, 1);
  objc_msgSend(v11, sel_setMarqueeRunning_, 1);
  return objc_msgSend(v0, sel_setNeedsLayout);
}

uint64_t outlined destroy of ConversationControlsRecipe(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SystemApertureConversationDetailsView()
{
  uint64_t result = type metadata singleton initialization cache for SystemApertureConversationDetailsView;
  if (!type metadata singleton initialization cache for SystemApertureConversationDetailsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id SystemApertureConversationDetailsView.configureSubviews()()
{
  objc_msgSend(v0, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_primaryLabel]);
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC15ConversationKit37SystemApertureConversationDetailsView_secondaryLabel];
  return objc_msgSend(v0, sel_addSubview_, v1);
}

id SystemApertureConversationDetailsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SystemApertureConversationDetailsView.init(frame:)()
{
}

id SystemApertureConversationDetailsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemApertureConversationDetailsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SystemApertureControlsStatusView.recipe.getter in conformance SystemApertureConversationDetailsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t protocol witness for SystemApertureControlsStatusView.recipe.setter in conformance SystemApertureConversationDetailsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

void (*protocol witness for SystemApertureControlsStatusView.recipe.modify in conformance SystemApertureConversationDetailsView(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78))();
  return protocol witness for Control.cnkContentAlpha.modify in conformance BaseButton;
}

uint64_t protocol witness for SystemApertureControlsStatusView.titleLabelGlyphInset.getter in conformance SystemApertureConversationDetailsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t sub_1C301C1F0()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in SystemApertureConversationDetailsView.layoutSubviews()()
{
  return closure #1 in SystemApertureConversationDetailsView.layoutSubviews()(*(void *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1C301C234()
{
  return swift_deallocObject();
}

uint64_t ObjC metadata update function for SystemApertureConversationDetailsView()
{
  return type metadata accessor for SystemApertureConversationDetailsView();
}

uint64_t type metadata completion function for SystemApertureConversationDetailsView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SystemApertureConversationDetailsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureConversationDetailsView);
}

uint64_t dispatch thunk of SystemApertureConversationDetailsView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SystemApertureConversationDetailsView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemApertureConversationDetailsView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SystemApertureConversationDetailsView.titleLabelGlyphInset.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SystemApertureConversationDetailsView.__allocating_init(recipe:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t SystemSymbol.name.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SystemSymbol.color.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SystemSymbol.backgroundColor.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t SystemSymbol.scale.getter()
{
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*(void *)(v0 + 48));
  return OUTLINED_FUNCTION_35();
}

uint64_t SystemSymbol.font.getter()
{
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*(void *)(v0 + 64));
  return OUTLINED_FUNCTION_35();
}

uint64_t SystemSymbol.weight.getter()
{
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*(void *)(v0 + 80));
  return OUTLINED_FUNCTION_35();
}

__n128 SystemSymbol.init(name:color:backgroundColor:scale:font:weight:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11, unint64_t a12)
{
  __n128 result = a10;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4] = a10;
  a9[5].n128_u64[0] = a11;
  a9[5].n128_u64[1] = a12;
  return result;
}

uint64_t SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t (**a9)()@<X8>)
{
  int v55 = a8;
  uint64_t v51 = a7;
  uint64_t v52 = a6;
  uint64_t v15 = type metadata accessor for Image.Scale();
  uint64_t v50 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v50 + 64);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v48 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v49 = (char *)v45 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.Scale?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = OUTLINED_FUNCTION_26();
  *(void *)(v22 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  uint64_t v23 = OUTLINED_FUNCTION_26();
  *(void *)(v23 + 16) = partial apply for closure #1 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:);
  *(void *)(v23 + 24) = v22;
  uint64_t v54 = v23;
  uint64_t v24 = OUTLINED_FUNCTION_26();
  *(void *)(v24 + 16) = partial apply for closure #2 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:);
  *(void *)(v24 + 24) = a3;
  uint64_t v53 = v24;
  uint64_t v25 = OUTLINED_FUNCTION_26();
  *(void *)(v25 + 16) = partial apply for closure #3 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:);
  *(void *)(v25 + 24) = a4;
  uint64_t v26 = a5;
  outlined init with copy of Image.Scale?(a5, (uint64_t)v21);
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    id v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v46 = v25;
    uint64_t v47 = a5;
    uint64_t v30 = v49;
    uint64_t v29 = v50;
    v45[1] = a4;
    unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    v31(v49, v21, v15);
    uint64_t v32 = v48;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v48, v30, v15);
    unint64_t v33 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v28 = swift_allocObject();
    v31((char *)(v28 + v33), v32, v15);
    uint64_t v26 = v47;
    id v34 = *(void (**)(char *, uint64_t))(v29 + 8);
    swift_retain();
    swift_retain();
    objc_super v35 = v30;
    uint64_t v25 = v46;
    v34(v35, v15);
    id v27 = partial apply for closure #1 in closure #4 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:);
  }
  uint64_t v36 = v52;
  if (v52)
  {
    uint64_t v37 = OUTLINED_FUNCTION_26();
    *(void *)(v37 + 16) = partial apply for closure #1 in closure #5 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:);
    *(void *)(v37 + 24) = v36;
    uint64_t v36 = OUTLINED_FUNCTION_26();
    *(void *)(v36 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ()) -> (@out Font);
    *(void *)(v36 + 24) = v37;
    CGRect v38 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned Font);
  }
  else
  {
    CGRect v38 = 0;
  }
  if (v55)
  {
    swift_release();
    swift_release();
    outlined destroy of Image.Scale?(v26);
    Swift::String v42 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v51;
    swift_release();
    swift_release();
    outlined destroy of Image.Scale?(v26);
    uint64_t v40 = OUTLINED_FUNCTION_26();
    *(void *)(v40 + 16) = partial apply for closure #1 in closure #6 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:);
    *(void *)(v40 + 24) = v39;
    uint64_t result = OUTLINED_FUNCTION_26();
    *(void *)(result + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ()) -> (@out Font.Weight);
    *(void *)(result + 24) = v40;
    Swift::String v42 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Font.Weight);
  }
  uint64_t v44 = (uint64_t (*)())v53;
  Swift::String v43 = (uint64_t (*)())v54;
  *a9 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned String);
  a9[1] = v43;
  a9[2] = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned Color);
  a9[3] = v44;
  a9[4] = thunk for @escaping @callee_guaranteed () -> (@owned Color)partial apply;
  a9[5] = (uint64_t (*)())v25;
  a9[6] = (uint64_t (*)())v27;
  a9[7] = (uint64_t (*)())v28;
  a9[8] = v38;
  a9[9] = (uint64_t (*)())v36;
  a9[10] = v42;
  a9[11] = (uint64_t (*)())result;
  return result;
}

uint64_t closure #1 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C301C9C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)()
{
  return closure #1 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)(*(void *)(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned String)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #2 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)()
{
  return swift_retain();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned Color)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with copy of Image.Scale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.Scale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Image.Scale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.Scale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in closure #4 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.Scale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, a1, v4);
}

uint64_t sub_1C301CB8C()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in closure #6 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

uint64_t sub_1C301CBA8()
{
  swift_release();
  return swift_deallocObject();
}

double partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ()) -> (@out Font.Weight)()
{
  (*(void (**)(double *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Font.Weight)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in closure #5 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ()) -> (@out Font)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned Font)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1C301CCAC()
{
  uint64_t v1 = type metadata accessor for Image.Scale();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #4 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for Image.Scale() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #1 in closure #4 in SystemSymbol<A>.init(name:color:backgroundColor:scale:font:weight:)(v4, a1);
}

uint64_t type metadata instantiation function for SystemSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t destroy for SystemSymbol(void *a1)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (a1[6]) {
    uint64_t result = swift_release();
  }
  if (a1[8]) {
    uint64_t result = swift_release();
  }
  if (a1[10])
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SystemSymbol(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  uint64_t v6 = (_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 56) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *v6;
  }
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  uint64_t v10 = *(void *)(a2 + 80);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  return a1;
}

void *assignWithCopy for SystemSymbol(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[6];
  if (a1[6])
  {
    if (v7)
    {
      uint64_t v8 = a2[7];
      a1[6] = v7;
      a1[7] = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  uint64_t v10 = a2[8];
  if (a1[8])
  {
    if (v10)
    {
      uint64_t v11 = a2[9];
      a1[8] = v10;
      a1[9] = v11;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[9];
    a1[8] = v10;
    a1[9] = v12;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_15:
  uint64_t v13 = a2[10];
  if (!a1[10])
  {
    if (v13)
    {
      uint64_t v15 = a2[11];
      a1[10] = v13;
      a1[11] = v15;
      swift_retain();
      return a1;
    }
LABEL_21:
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v14 = a2[11];
  a1[10] = v13;
  a1[11] = v14;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for SystemSymbol(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v4;
      *(void *)(a1 + 56) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
LABEL_15:
  uint64_t v10 = *(void *)(a2 + 80);
  if (!*(void *)(a1 + 80))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v10;
      *(void *)(a1 + 88) = v12;
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemSymbol(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemSymbol(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for SystemSymbol()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C301D2D8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void *closure #1 in UIAction.init(title:imageSymbolName:target:selector:discoverabilityTitle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x1C8776240](v4);
  if (result)
  {
    uint64_t v6 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, a3))
    {
      objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_, a3);
      id v7 = v6;
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1C301D39C()
{
  swift_release();
  return swift_deallocObject();
}

void *partial apply for closure #1 in UIAction.init(title:imageSymbolName:target:selector:discoverabilityTitle:)(uint64_t a1)
{
  return closure #1 in UIAction.init(title:imageSymbolName:target:selector:discoverabilityTitle:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *one-time initialization function for shared()
{
  type metadata accessor for TextLayoutEngine();
  swift_allocObject();
  uint64_t result = TextLayoutEngine.().init()();
  static TextLayoutEngine.shared = (uint64_t)result;
  return result;
}

{
  void *result;

  type metadata accessor for ClarityUIFavoritesList();
  swift_allocObject();
  uint64_t result = ClarityUIFavoritesList.().init()();
  static ClarityUIFavoritesList.shared = (uint64_t)result;
  return result;
}

uint64_t *TextLayoutEngine.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static TextLayoutEngine.shared;
}

uint64_t static TextLayoutEngine.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

void *TextLayoutEngine.().init()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0880]), sel_init);
  v0[3] = v1;
  objc_msgSend(v1, sel_setLineFragmentPadding_, 0.0);
  objc_msgSend(v1, sel_setMaximumNumberOfLines_, 0);
  objc_msgSend(v1, sel_setLineBreakMode_, 0);
  objc_msgSend(v1, sel_setWidthTracksTextView_, 1);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0840]), sel_init);
  v0[4] = v2;
  objc_msgSend(v2, sel_addTextContainer_, v1);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB08B8]), sel_init);
  v0[2] = v3;
  objc_msgSend(v3, sel_addLayoutManager_, v2);
  return v0;
}

id TextLayoutEngine.draw(text:font:color:lowConfidenceRanges:viewSize:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  TextLayoutEngine.updateMembers(text:font:color:lowConfidenceRanges:viewSize:)(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v8 = String.count.getter();
  uint64_t v9 = *(void **)(v7 + 32);
  return objc_msgSend(v9, sel_drawGlyphsForGlyphRange_atPoint_, 0, v8, 0.0, 0.0);
}

void TextLayoutEngine.updateMembers(text:font:color:lowConfidenceRanges:viewSize:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  Class v11 = TextLayoutEngine.attributedTextWithUnderlines(text:font:color:lowConfidenceRanges:)(a1, a2, a3, a4, a5);
  objc_msgSend(*(id *)(v7 + 16), sel_setAttributedString_, v11);
  uint64_t v10 = *(void **)(v7 + 24);
  objc_msgSend(v10, sel_setSize_, a6, a7);
  objc_msgSend(*(id *)(v7 + 32), sel_ensureLayoutForTextContainer_, v10);
}

__C::CGRect __swiftcall TextLayoutEngine.frame(for:text:font:lowConfidenceRanges:viewSize:)(__C::_NSRange a1, Swift::String text, UIFont font, Swift::OpaquePointer lowConfidenceRanges, CGSize viewSize)
{
  Swift::Int length = a1.length;
  Swift::Int location = a1.location;
  TextLayoutEngine.updateMembers(text:font:color:lowConfidenceRanges:viewSize:)(text._countAndFlagsBits, text._object, font.super.isa, 0, (uint64_t)lowConfidenceRanges._rawValue, viewSize.width, viewSize.height);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v8 = *(void **)(v5 + 32);
  objc_msgSend(v8, sel_boundingRectForGlyphRange_inTextContainer_, location, length, v9);
  result.size.double height = v13;
  result.size.double width = v12;
  result.origin.CGFloat y = v11;
  result.origin.CGFloat x = v10;
  return result;
}

Class TextLayoutEngine.attributedTextWithUnderlines(text:font:color:lowConfidenceRanges:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = a1;
  v10._object = a2;
  v11.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v10).super.super.isa;
  uint64_t v48 = String.count.getter();
  static Color.blue.getter();
  if (!a4) {
    static Color.primary.getter();
  }
  uint64_t v12 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  swift_retain();
  double v13 = (void *)UIColor.init(_:)();
  if (!a4) {
    swift_retain();
  }
  swift_retain();
  uint64_t v47 = (void *)UIColor.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  uint64_t v15 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  uint64_t v16 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  uint64_t v17 = (void **)MEMORY[0x1E4FB0700];
  *(void *)(inited + 40) = a3;
  uint64_t v18 = *v17;
  uint64_t v45 = v16;
  *(void *)(inited + 64) = v16;
  *(void *)(inited + 72) = v18;
  uint64_t v46 = v12;
  *(void *)(inited + 104) = v12;
  *(void *)(inited + 80) = v13;
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  id v19 = v15;
  id v20 = a3;
  id v21 = v18;
  id v22 = v13;
  uint64_t v23 = Dictionary.init(dictionaryLiteral:)();
  outlined bridged method (mbnnn) of @objc NSMutableAttributedString.setAttributes(_:range:)(v23, 0, v48, v11.super.super.isa);
  uint64_t v24 = *(void *)(a5 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = v20;
    uint64_t v25 = (uint64_t *)(a5 + 40);
    Swift::String v43 = v22;
    Class isa = v11.super.super.isa;
    uint64_t v26 = v19;
    id v27 = v21;
    uint64_t v29 = (void *)*MEMORY[0x1E4FB0800];
    uint64_t v28 = (void *)*MEMORY[0x1E4FB0808];
    do
    {
      uint64_t v30 = *v25;
      uint64_t v49 = *(v25 - 1);
      uint64_t v31 = swift_initStackObject();
      *(_OWORD *)(v31 + 16) = xmmword_1C376A6F0;
      *(void *)(v31 + 32) = v26;
      *(void *)(v31 + 40) = v44;
      *(void *)(v31 + 64) = v45;
      *(void *)(v31 + 72) = v27;
      *(void *)(v31 + 80) = v43;
      *(void *)(v31 + 104) = v46;
      *(void *)(v31 + 112) = v28;
      *(void *)(v31 + 120) = 33024;
      *(void *)(v31 + 144) = MEMORY[0x1E4FBB550];
      *(void *)(v31 + 152) = v29;
      *(void *)(v31 + 184) = v46;
      *(void *)(v31 + 160) = v47;
      id v32 = v44;
      id v33 = v43;
      id v34 = v26;
      id v35 = v27;
      id v36 = v28;
      id v37 = v29;
      id v38 = v47;
      uint64_t v39 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v40 = v30;
      v11.super.super.Class isa = isa;
      outlined bridged method (mbnnn) of @objc NSMutableAttributedString.setAttributes(_:range:)(v39, v49, v40, isa);
      v25 += 2;
      --v24;
    }
    while (v24);

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_release();
  }

  return v11.super.super.isa;
}

id *TextLayoutEngine.deinit()
{
  return v0;
}

uint64_t TextLayoutEngine.__deallocating_deinit()
{
  TextLayoutEngine.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TextLayoutEngine()
{
  return self;
}

uint64_t method lookup function for TextLayoutEngine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TextLayoutEngine);
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

void outlined bridged method (mbnnn) of @objc NSMutableAttributedString.setAttributes(_:range:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a4, sel_setAttributes_range_, isa, a2, a3);
}

BOOL static PushToTalkViewModel.TalkButtonState.== infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == 2) {
    return a2 == 2;
  }
  if (a1 == 3) {
    return a2 == 3;
  }
  if ((a2 & 0xFE) == 2) {
    return 0;
  }
  return ((a2 ^ a1) & 1) == 0;
}

BOOL static PushToTalkViewModel.TransmitSource.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PushToTalkViewModel.TalkButtonState(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PushToTalkViewModel.TalkButtonState.== infix(_:_:)(*a1, *a2);
}

void PushToTalkViewModel.TransmitSource.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int PushToTalkViewModel.TransmitSource.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PushToTalkViewModel.TransmitSource(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PushToTalkViewModel.TransmitSource.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PushToTalkViewModel.TransmitSource()
{
  return PushToTalkViewModel.TransmitSource.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PushToTalkViewModel.TransmitSource(uint64_t a1)
{
  PushToTalkViewModel.TransmitSource.hash(into:)(a1, *v1);
}

uint64_t key path getter for PushToTalkViewModel.pttTalkButtonState : PushToTalkViewModel@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t key path setter for PushToTalkViewModel.pttTalkButtonState : PushToTalkViewModel()
{
  return PushToTalkViewModel.pttTalkButtonState.setter();
}

uint64_t PushToTalkViewModel.pttTalkButtonState.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1C301DDCC@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_5_9();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 112))();
  *a1 = result;
  return result;
}

uint64_t sub_1C301DE10()
{
  return PushToTalkViewModel.pttTalkButtonState.setter();
}

uint64_t PushToTalkViewModel.pttTalkButtonState.setter()
{
  return static Published.subscript.setter();
}

uint64_t key path setter for PushToTalkViewModel.$pttTalkButtonState : PushToTalkViewModel(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>.Publisher);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return PushToTalkViewModel.$pttTalkButtonState.setter((uint64_t)v4);
}

uint64_t PushToTalkViewModel.$pttTalkButtonState.getter()
{
  return swift_endAccess();
}

uint64_t PushToTalkViewModel.$pttTalkButtonState.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 - v6, a1, v2);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t key path setter for PushToTalkViewModel.conversationControlsManager : PushToTalkViewModel(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 168);
  id v4 = *a1;
  return v3(v2);
}

uint64_t PushToTalkViewModel.conversationControlsManager.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel_conversationControlsManager;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

void PushToTalkViewModel.conversationControlsManager.setter(void *a1)
{
}

void (*PushToTalkViewModel.conversationControlsManager.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel_conversationControlsManager;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  v3[3] = MEMORY[0x1C8776240](v5);
  return TapInteraction.view.modify;
}

uint64_t PushToTalkViewModel.__allocating_init(conversationControlsManager:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  PushToTalkViewModel.init(conversationControlsManager:)(a1);
  return v2;
}

uint64_t PushToTalkViewModel.init(conversationControlsManager:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<TUCallTransmissionMode>.Publisher);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_2_3();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ConversationControlsManager.PushToTalkChannelState>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_21();
  uint64_t v12 = v11 - v10;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v38 = v13;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest<Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>, Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_2_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Publishers.CombineLatest<Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>, Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>>, PushToTalkViewModel.TalkButtonState>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_2_3();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>);
  OUTLINED_FUNCTION_4();
  uint64_t v22 = v21;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_21();
  uint64_t v26 = v25 - v24;
  uint64_t v27 = v2 + OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel__pttTalkButtonState;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v27, v26, v20);
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel_talkButtonIsBeingPressed) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel_cancellables) = MEMORY[0x1E4FBC870];
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  OUTLINED_FUNCTION_1_37();
  (*(void (**)(void))(v28 + 1712))();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<ConversationControlsManager.PushToTalkChannelState>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<ConversationControlsManager.PushToTalkChannelState>.Publisher);
  lazy protocol witness table accessor for type ConversationControlsManager.PushToTalkChannelState and conformance ConversationControlsManager.PushToTalkChannelState();
  Publisher<>.removeDuplicates()();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
  OUTLINED_FUNCTION_1_37();
  (*(void (**)(void))(v29 + 1760))();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<TUCallTransmissionMode>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<TUCallTransmissionMode>.Publisher);
  lazy protocol witness table accessor for type TUCallTransmissionMode and conformance TUCallTransmissionMode();
  Publisher<>.removeDuplicates()();
  OUTLINED_FUNCTION_3_21();
  v30();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>);
  Publisher.combineLatest<A>(_:)();
  OUTLINED_FUNCTION_3_21();
  v31();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v17, v37);
  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for closure #1 in PushToTalkViewModel.init(conversationControlsManager:);
  *(void *)(v33 + 24) = v32;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CombineLatest<Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>, Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>> and conformance Publishers.CombineLatest<A, B>, &demangling cache variable for type metadata for Publishers.CombineLatest<Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>, Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>>);
  Publisher.compactMap<A>(_:)();
  swift_release();
  OUTLINED_FUNCTION_3_21();
  v34();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CompactMap<Publishers.CombineLatest<Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>, Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>>, PushToTalkViewModel.TalkButtonState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Publishers.CombineLatest<Publishers.RemoveDuplicates<Published<ConversationControlsManager.PushToTalkChannelState>.Publisher>, Publishers.RemoveDuplicates<Published<TUCallTransmissionMode>.Publisher>>, PushToTalkViewModel.TalkButtonState>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_3_21();
  v35();
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  return v2;
}

unint64_t lazy protocol witness table accessor for type ConversationControlsManager.PushToTalkChannelState and conformance ConversationControlsManager.PushToTalkChannelState()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationControlsManager.PushToTalkChannelState and conformance ConversationControlsManager.PushToTalkChannelState;
  if (!lazy protocol witness table cache variable for type ConversationControlsManager.PushToTalkChannelState and conformance ConversationControlsManager.PushToTalkChannelState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsManager.PushToTalkChannelState and conformance ConversationControlsManager.PushToTalkChannelState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TUCallTransmissionMode and conformance TUCallTransmissionMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TUCallTransmissionMode and conformance TUCallTransmissionMode;
  if (!lazy protocol witness table cache variable for type TUCallTransmissionMode and conformance TUCallTransmissionMode)
  {
    type metadata accessor for TUCallTransmissionMode(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUCallTransmissionMode and conformance TUCallTransmissionMode);
  }
  return result;
}

uint64_t sub_1C301E964()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in PushToTalkViewModel.init(conversationControlsManager:)(char a1, uint64_t a2)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 4;
  }
  uint64_t v4 = PushToTalkViewModel.state(channelState:transmissionMode:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t partial apply for closure #1 in PushToTalkViewModel.init(conversationControlsManager:)(char a1, uint64_t a2)
{
  return closure #1 in PushToTalkViewModel.init(conversationControlsManager:)(a1, a2);
}

uint64_t sub_1C301EA28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned ConversationControlsManager.PushToTalkChannelState, @unowned TUCallTransmissionMode) -> (@unowned PushToTalkViewModel.TalkButtonState?)@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *((void *)a1 + 1));
  *a2 = result;
  return result;
}

uint64_t closure #2 in PushToTalkViewModel.init(conversationControlsManager:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PushToTalkViewModel.pttTalkButtonState.setter();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #2 in PushToTalkViewModel.init(conversationControlsManager:)()
{
  return closure #2 in PushToTalkViewModel.init(conversationControlsManager:)();
}

uint64_t PushToTalkViewModel.state(channelState:transmissionMode:)(char a1, uint64_t a2)
{
  if (a2 == 2) {
    return 3;
  }
  uint64_t result = 3;
  switch(a1)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      if (a2) {
        uint64_t result = 3;
      }
      else {
        uint64_t result = 2;
      }
      break;
    case 3:
    case 4:
      uint64_t result = (*(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel_talkButtonIsBeingPressed) & 1) == 0;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall PushToTalkViewModel.talkButton(isActive:)(Swift::Bool isActive)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel_talkButtonIsBeingPressed) = isActive;
}

uint64_t PushToTalkViewModel.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit19PushToTalkViewModel__pttTalkButtonState;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PushToTalkViewModel.__deallocating_deinit()
{
  PushToTalkViewModel.deinit();
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type PushToTalkViewModel.TransmitSource and conformance PushToTalkViewModel.TransmitSource()
{
  unint64_t result = lazy protocol witness table cache variable for type PushToTalkViewModel.TransmitSource and conformance PushToTalkViewModel.TransmitSource;
  if (!lazy protocol witness table cache variable for type PushToTalkViewModel.TransmitSource and conformance PushToTalkViewModel.TransmitSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PushToTalkViewModel.TransmitSource and conformance PushToTalkViewModel.TransmitSource);
  }
  return result;
}

uint64_t sub_1C301ECC4()
{
  OUTLINED_FUNCTION_5_9();
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1C301ED04@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_5_9();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 160))();
  *a1 = result;
  return result;
}

uint64_t ObjC metadata update function for PushToTalkViewModel()
{
  return type metadata accessor for PushToTalkViewModel();
}

uint64_t type metadata accessor for PushToTalkViewModel()
{
  uint64_t result = type metadata singleton initialization cache for PushToTalkViewModel;
  if (!type metadata singleton initialization cache for PushToTalkViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for PushToTalkViewModel()
{
  type metadata accessor for Published<PushToTalkViewModel.TalkButtonState>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PushToTalkViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkViewModel);
}

uint64_t dispatch thunk of PushToTalkViewModel.pttTalkButtonState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PushToTalkViewModel.$pttTalkButtonState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PushToTalkViewModel.conversationControlsManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PushToTalkViewModel.conversationControlsManager.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PushToTalkViewModel.conversationControlsManager.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PushToTalkViewModel.__allocating_init(conversationControlsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of PushToTalkViewModel.talkButton(isActive:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

void type metadata accessor for Published<PushToTalkViewModel.TalkButtonState>()
{
  if (!lazy cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>);
    }
  }
}

uint64_t getEnumTagSinglePayload for PushToTalkViewModel.TalkButtonState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C301F04CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 2) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for PushToTalkViewModel.TalkButtonState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1C301F134);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for PushToTalkViewModel.TalkButtonState(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for PushToTalkViewModel.TalkButtonState(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PushToTalkViewModel.TalkButtonState()
{
  return &type metadata for PushToTalkViewModel.TalkButtonState;
}

uint64_t getEnumTagSinglePayload for PushToTalkViewModel.TransmitSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PushToTalkViewModel.TransmitSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C301F2E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for PushToTalkViewModel.TransmitSource(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PushToTalkViewModel.TransmitSource()
{
  return &type metadata for PushToTalkViewModel.TransmitSource;
}

id PushToTalkFullScreenViewController.backgroundMaterialView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController____lazy_storage___backgroundMaterialView;
  int v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController____lazy_storage___backgroundMaterialView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController____lazy_storage___backgroundMaterialView);
  }
  else
  {
    id v4 = objc_msgSend(self, sel_effectWithStyle_, 18);
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v4);

    unsigned int v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    int v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id PushToTalkFullScreenViewController.__allocating_init(conversationControlsManager:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return PushToTalkFullScreenViewController.init(conversationControlsManager:)(a1);
}

id PushToTalkFullScreenViewController.init(conversationControlsManager:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController____lazy_storage___backgroundMaterialView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_cancellables] = MEMORY[0x1E4FBC870];
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_conversationControlsManager] = a1;
  objc_allocWithZone((Class)type metadata accessor for PushToTalkView());
  id v3 = a1;
  id v4 = v1;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_pttView] = PushToTalkView.init(conversationControlsManager:)(v3);

  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for PushToTalkFullScreenViewController();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithNibName_bundle_, 0, 0);

  return v5;
}

id PushToTalkFullScreenViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PushToTalkFullScreenViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController____lazy_storage___backgroundMaterialView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_cancellables] = MEMORY[0x1E4FBC870];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall PushToTalkFullScreenViewController.viewDidLoad()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<TUCall?>);
  OUTLINED_FUNCTION_4();
  uint64_t v83 = v2;
  uint64_t v84 = v3;
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  uint64_t v81 = v1;
  v99.receiver = v0;
  v99.super_class = (Class)type metadata accessor for PushToTalkFullScreenViewController();
  objc_msgSendSuper2(&v99, sel_viewDidLoad);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Debounce<Publishers.Merge<Just<TUCall?>, Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  uint64_t v88 = v4;
  uint64_t v89 = v5;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_3();
  uint64_t v86 = v6;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Merge<Just<TUCall?>, Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>>);
  OUTLINED_FUNCTION_4();
  uint64_t v87 = v7;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v82 = v9;
  id v10 = objc_msgSend(self, sel_sharedInstance);
  id v11 = objc_msgSend(v10, sel_frontmostBargeCall);

  id v98 = v11;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUCall?);
  Just.init(_:)();
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>);
  OUTLINED_FUNCTION_4();
  uint64_t v80 = v12;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_2_3();
  uint64_t v77 = v14;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MergeMany<NSNotificationCenter.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v97 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_8_4();
  uint64_t v95 = v18;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_8_4();
  uint64_t v94 = v22;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_4_5();
  MEMORY[0x1F4188790](v24);
  uint64_t v75 = (char *)&v73 - v25;
  uint64_t v26 = type metadata accessor for NSNotificationCenter.Publisher();
  OUTLINED_FUNCTION_4();
  char v93 = v27;
  uint64_t v29 = *(void *)(v28 + 64);
  MEMORY[0x1F4188790](v30);
  unint64_t v96 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v31 = self;
  id v32 = objc_msgSend(v31, sel_defaultCenter);
  OUTLINED_FUNCTION_3_36();

  MEMORY[0x1F4188790](v33);
  id v74 = v31;
  id v34 = objc_msgSend(v31, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher();
  Publisher.merge(with:)();
  id v35 = (void (*)(void))*((void *)v93 + 1);
  OUTLINED_FUNCTION_1_19();
  v35();
  OUTLINED_FUNCTION_1_19();
  uint64_t v36 = ((uint64_t (*)(void))v35)();
  uint64_t v37 = v35;
  char v93 = v35;
  uint64_t v90 = v29;
  MEMORY[0x1F4188790](v36);
  id v38 = objc_msgSend(v31, sel_defaultCenter);
  OUTLINED_FUNCTION_3_36();

  uint64_t v39 = v76;
  uint64_t v40 = v75;
  Publishers.MergeMany.merge(with:)();
  OUTLINED_FUNCTION_1_19();
  v37();
  uint64_t v41 = v97 + 8;
  Swift::String v42 = *(uint64_t (**)(void))(v97 + 8);
  uint64_t v43 = ((uint64_t (*)(char *, uint64_t))v42)(v40, v39);
  uint64_t v91 = v42;
  uint64_t v97 = v41;
  MEMORY[0x1F4188790](v43);
  id v44 = v74;
  id v45 = objc_msgSend(v74, sel_defaultCenter);
  OUTLINED_FUNCTION_3_36();

  OUTLINED_FUNCTION_12_13();
  Publishers.MergeMany.merge(with:)();
  uint64_t v92 = v26;
  uint64_t v46 = v93;
  OUTLINED_FUNCTION_1_19();
  v46();
  OUTLINED_FUNCTION_10_6();
  uint64_t v47 = v42();
  MEMORY[0x1F4188790](v47);
  id v48 = objc_msgSend(v44, sel_defaultCenter);
  OUTLINED_FUNCTION_3_36();

  OUTLINED_FUNCTION_12_13();
  uint64_t v49 = v94;
  Publishers.MergeMany.merge(with:)();
  OUTLINED_FUNCTION_1_19();
  v46();
  uint64_t v50 = v91;
  uint64_t v51 = ((uint64_t (*)(uint64_t, uint64_t))v91)(v49, v39);
  MEMORY[0x1F4188790](v51);
  uint64_t v52 = v44;
  id v53 = objc_msgSend(v44, sel_defaultCenter);
  OUTLINED_FUNCTION_3_36();

  OUTLINED_FUNCTION_12_13();
  Publishers.MergeMany.merge(with:)();
  uint64_t v54 = v93;
  OUTLINED_FUNCTION_1_19();
  v54();
  OUTLINED_FUNCTION_10_6();
  uint64_t v55 = v50();
  MEMORY[0x1F4188790](v55);
  OUTLINED_FUNCTION_13_5();
  id v56 = objc_msgSend(v44, sel_defaultCenter);
  OUTLINED_FUNCTION_3_36();

  OUTLINED_FUNCTION_12_13();
  Publishers.MergeMany.merge(with:)();
  OUTLINED_FUNCTION_1_19();
  v54();
  uint64_t v57 = v91;
  OUTLINED_FUNCTION_10_6();
  uint64_t v58 = v57();
  MEMORY[0x1F4188790](v58);
  OUTLINED_FUNCTION_13_5();
  id v59 = objc_msgSend(v52, sel_defaultCenter);
  OUTLINED_FUNCTION_3_36();

  OUTLINED_FUNCTION_12_13();
  Publishers.MergeMany.merge(with:)();
  OUTLINED_FUNCTION_1_19();
  v54();
  OUTLINED_FUNCTION_10_6();
  v57();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.MergeMany<NSNotificationCenter.Publisher> and conformance Publishers.MergeMany<A>, &demangling cache variable for type metadata for Publishers.MergeMany<NSNotificationCenter.Publisher>);
  Publisher.map<A>(_:)();
  OUTLINED_FUNCTION_10_6();
  v57();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Just<TUCall?> and conformance Just<A>, &demangling cache variable for type metadata for Just<TUCall?>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>);
  uint64_t v60 = v83;
  Publisher.merge<A>(with:)();
  OUTLINED_FUNCTION_26_2();
  v61();
  OUTLINED_FUNCTION_26_2();
  v62();
  uint64_t v63 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  OUTLINED_FUNCTION_4();
  uint64_t v65 = v64;
  MEMORY[0x1F4188790](v66);
  OUTLINED_FUNCTION_16_0();
  static OS_dispatch_queue.SchedulerTimeType.Stride.milliseconds(_:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v98 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v67 - 8);
  uint64_t v69 = (char *)&v73 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v69, 1, 1, v70);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Merge<Just<TUCall?>, Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>> and conformance Publishers.Merge<A, B>, &demangling cache variable for type metadata for Publishers.Merge<Just<TUCall?>, Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  Publisher.debounce<A>(for:scheduler:options:)();
  _sSo17OS_dispatch_queueC8DispatchE16SchedulerOptionsVSgWOhTm_0((uint64_t)v69, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v60, v63);
  OUTLINED_FUNCTION_26_2();
  v71();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Debounce<Publishers.Merge<Just<TUCall?>, Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>>, OS_dispatch_queue> and conformance Publishers.Debounce<A, B>, &demangling cache variable for type metadata for Publishers.Debounce<Publishers.Merge<Just<TUCall?>, Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, TUCall?>>, OS_dispatch_queue>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v72();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  PushToTalkFullScreenViewController.setupMaterialView()();
  PushToTalkFullScreenViewController.setupPTTView()();
}

uint64_t closure #1 in PushToTalkFullScreenViewController.viewDidLoad()@<X0>(void *a1@<X8>)
{
  Notification.object.getter();
  if (!v3[3])
  {
    uint64_t result = _sSo17OS_dispatch_queueC8DispatchE16SchedulerOptionsVSgWOhTm_0((uint64_t)v3, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_5:
  }
    *a1 = 0;
  return result;
}

void closure #2 in PushToTalkFullScreenViewController.viewDidLoad()(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (char *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    if (v2)
    {
      id v6 = v2;
      if ((objc_msgSend(v6, sel_isPTT) & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v7 = OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_conversationControlsManager;
      uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)&v5[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_conversationControlsManager])
                                        + 0x270))();
      uint64_t v11 = v10;
      id v6 = v6;
      LOBYTE(v11) = specialized == infix(_:_:)(v9, v11, v6);
      swift_unknownObjectRelease();

      if (v11)
      {
        uint64_t v12 = *(void **)&v5[v7];
        uint64_t v13 = *(void (**)(void))((*v8 & *v12) + 0x270);
        uint64_t v14 = v12;
        v13();

        self;
        uint64_t v15 = swift_dynamicCastObjCClass();
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = *(void **)&v5[OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_pttView];
          uint64_t v18 = *(void (**)(uint64_t))((*v8 & *v17) + 0x128);
          uint64_t v19 = v17;
          v18(v16);

          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
        }
      }
      else
      {
LABEL_7:
      }
    }
    else
    {
    }
  }
}

void PushToTalkFullScreenViewController.setupMaterialView()()
{
  id v0 = OUTLINED_FUNCTION_9_12();
  if (!v0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v1 = v0;
  id v2 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  objc_msgSend(v1, sel_addSubview_, v2);

  id v3 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769580;
  id v5 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v6 = objc_msgSend(v5, sel_topAnchor);

  id v7 = OUTLINED_FUNCTION_9_12();
  if (!v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_topAnchor);

  id v10 = OUTLINED_FUNCTION_6_17();
  *(void *)(v4 + 32) = v10;
  id v11 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v12 = objc_msgSend(v11, sel_leadingAnchor);

  id v13 = OUTLINED_FUNCTION_9_12();
  if (!v13)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v14 = v13;
  id v15 = objc_msgSend(v13, sel_leadingAnchor);

  id v16 = OUTLINED_FUNCTION_6_17();
  *(void *)(v4 + 40) = v16;
  id v17 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v18 = objc_msgSend(v17, sel_trailingAnchor);

  id v19 = OUTLINED_FUNCTION_9_12();
  if (!v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v20 = v19;
  id v21 = objc_msgSend(v19, sel_trailingAnchor);

  id v22 = OUTLINED_FUNCTION_6_17();
  *(void *)(v4 + 48) = v22;
  id v23 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v24 = objc_msgSend(v23, sel_bottomAnchor);

  id v25 = OUTLINED_FUNCTION_9_12();
  if (!v25)
  {
LABEL_13:
    __break(1u);
    return;
  }
  uint64_t v26 = v25;
  id v27 = objc_msgSend(v25, sel_bottomAnchor);

  id v28 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v27);
  *(void *)(v4 + 56) = v28;
  specialized Array._endMutation()();
  uint64_t v29 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_activateConstraints_, isa);
}

void PushToTalkFullScreenViewController.setupPTTView()()
{
  id v1 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v2 = objc_msgSend(v1, sel_contentView);

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit34PushToTalkFullScreenViewController_pttView);
  objc_msgSend(v2, sel_addSubview_, v3);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769580;
  id v5 = objc_msgSend(v3, sel_topAnchor);
  id v6 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v7 = objc_msgSend(v6, sel_topAnchor);

  id v8 = OUTLINED_FUNCTION_5_27();
  *(void *)(v4 + 32) = v8;
  id v9 = objc_msgSend(v3, sel_leadingAnchor);
  id v10 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v11 = objc_msgSend(v10, sel_leadingAnchor);

  id v12 = OUTLINED_FUNCTION_5_27();
  *(void *)(v4 + 40) = v12;
  id v13 = objc_msgSend(v3, sel_trailingAnchor);
  id v14 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v15 = objc_msgSend(v14, sel_trailingAnchor);

  id v16 = OUTLINED_FUNCTION_5_27();
  *(void *)(v4 + 48) = v16;
  id v17 = objc_msgSend(v3, sel_bottomAnchor);
  id v18 = PushToTalkFullScreenViewController.backgroundMaterialView.getter();
  id v19 = objc_msgSend(v18, sel_bottomAnchor);

  id v20 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v19);
  *(void *)(v4 + 56) = v20;
  specialized Array._endMutation()();
  id v21 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_activateConstraints_, isa);
}

id PushToTalkFullScreenViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void PushToTalkFullScreenViewController.init(nibName:bundle:)()
{
}

id PushToTalkFullScreenViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushToTalkFullScreenViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PushToTalkFullScreenViewController()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher()
{
  unint64_t result = lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher;
  if (!lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_1C3020BC8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in PushToTalkFullScreenViewController.viewDidLoad()(void **a1)
{
  closure #2 in PushToTalkFullScreenViewController.viewDidLoad()(a1, v1);
}

uint64_t method lookup function for PushToTalkFullScreenViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkFullScreenViewController);
}

uint64_t dispatch thunk of PushToTalkFullScreenViewController.__allocating_init(conversationControlsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t specialized == infix(_:_:)(void *a1, uint64_t a2, void *a3)
{
  lazy protocol witness table accessor for type TUCall and conformance TUCall();
  if (a1 == a3)
  {
    char v7 = 1;
    return v7 & 1;
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
      swift_unknownObjectRetain();
      id v5 = a3;
      char v6 = static NSObject.== infix(_:_:)();
LABEL_9:
      char v7 = v6;
      swift_unknownObjectRelease();

      return v7 & 1;
    }
    goto LABEL_10;
  }
  type metadata accessor for PlaceholderCall();
  if (swift_dynamicCastClass())
  {
    if (swift_dynamicCastClass())
    {
      swift_unknownObjectRetain();
      id v8 = a3;
      char v6 = static PlaceholderCall.== infix(_:_:)();
      goto LABEL_9;
    }
LABEL_10:
    char v7 = 0;
    return v7 & 1;
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  swift_getObjectType();
  v12._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TUCall and conformance TUCall()
{
  unint64_t result = lazy protocol witness table cache variable for type TUCall and conformance TUCall;
  if (!lazy protocol witness table cache variable for type TUCall and conformance TUCall)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUCall and conformance TUCall);
  }
  return result;
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE16SchedulerOptionsVSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

BOOL static CATransform3D.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v2;
  long long v3 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v3;
  long long v4 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v4;
  long long v5 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v5;
  long long v6 = a2[1];
  *(_OWORD *)&v11.m11 = *a2;
  *(_OWORD *)&v11.m13 = v6;
  long long v7 = a2[3];
  *(_OWORD *)&v11.m21 = a2[2];
  *(_OWORD *)&v11.m23 = v7;
  long long v8 = a2[5];
  *(_OWORD *)&v11.m31 = a2[4];
  *(_OWORD *)&v11.m33 = v8;
  long long v9 = a2[7];
  *(_OWORD *)&v11.m41 = a2[6];
  *(_OWORD *)&v11.m43 = v9;
  return CATransform3DEqualToTransform(&a, &v11);
}

void CATransform3D.hash(into:)()
{
  OUTLINED_FUNCTION_0_15(*v0);
  OUTLINED_FUNCTION_0_15(v0[1]);
  OUTLINED_FUNCTION_0_15(v0[2]);
  OUTLINED_FUNCTION_0_15(v0[3]);
  OUTLINED_FUNCTION_0_15(v0[4]);
  OUTLINED_FUNCTION_0_15(v0[5]);
  OUTLINED_FUNCTION_0_15(v0[6]);
  OUTLINED_FUNCTION_0_15(v0[7]);
  OUTLINED_FUNCTION_0_15(v0[8]);
  OUTLINED_FUNCTION_0_15(v0[9]);
  OUTLINED_FUNCTION_0_15(v0[10]);
  OUTLINED_FUNCTION_0_15(v0[11]);
  OUTLINED_FUNCTION_0_15(v0[12]);
  OUTLINED_FUNCTION_0_15(v0[13]);
  OUTLINED_FUNCTION_0_15(v0[14]);
  OUTLINED_FUNCTION_0_15(v0[15]);
}

Swift::Int CATransform3D.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CATransform3D()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CATransform3D and conformance CATransform3D()
{
  unint64_t result = lazy protocol witness table cache variable for type CATransform3D and conformance CATransform3D;
  if (!lazy protocol witness table cache variable for type CATransform3D and conformance CATransform3D)
  {
    type metadata accessor for CATransform3D(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CATransform3D and conformance CATransform3D);
  }
  return result;
}

NSValue __swiftcall NSValue.init(point:)(CGPoint point)
{
  return (NSValue)NSValue.init(point:)((SEL *)&selRef_valueWithCGPoint_, point.x, point.y);
}

NSValue __swiftcall NSValue.init(size:)(CGSize size)
{
  return (NSValue)NSValue.init(point:)((SEL *)&selRef_valueWithCGSize_, size.width, size.height);
}

id NSValue.init(point:)(SEL *a1, double a2, double a3)
{
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), *a1, a2, a3);
  return v3;
}

id NSValue.sizeValue.getter()
{
  return objc_msgSend(v0, sel_CGSizeValue);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  long long v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v31 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  CATransform3D v11 = (char *)&v27 - v10;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v32 = MEMORY[0x1E4FBC860];
  uint64_t v30 = *(void *)(a1 + 16);
  if (v30)
  {
    unint64_t v13 = 0;
    uint64_t v14 = v30;
    uint64_t v29 = v2;
    do
    {
      if (v13 >= *(void *)(a1 + 16))
      {
        __break(1u);
        JUMPOUT(0x1C30214A4);
      }
      unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v16 = *(void *)(v7 + 72);
      unint64_t v17 = v13 + 1;
      outlined init with copy of Participant(a1 + v15 + v16 * v13, (uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
      outlined init with copy of Participant((uint64_t)v11, (uint64_t)v5, (void (*)(void))type metadata accessor for Participant.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v20 = (uint64_t)&v5[*(int *)(v19 + 48)];
          outlined consume of Participant.CopresenceInfo?(*(void *)&v5[*(int *)(v19 + 64)], *(void *)&v5[*(int *)(v19 + 64) + 8]);
          outlined destroy of Participant.MediaInfo(v20);
          type metadata accessor for Date();
          OUTLINED_FUNCTION_0();
          (*(void (**)(char *))(v21 + 8))(v5);
          outlined init with take of Participant((uint64_t)v11, v31);
          uint64_t v22 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
            uint64_t v22 = v32;
          }
          unint64_t v24 = *(void *)(v22 + 16);
          unint64_t v23 = *(void *)(v22 + 24);
          unint64_t v25 = v24 + 1;
          if (v24 >= v23 >> 1)
          {
            unint64_t v28 = v24 + 1;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
            unint64_t v25 = v28;
            uint64_t v22 = v32;
          }
          *(void *)(v22 + 16) = v25;
          outlined init with take of Participant(v31, v22 + v15 + v24 * v16);
          uint64_t v14 = v30;
          break;
        case 6u:
          goto LABEL_6;
        default:
          type metadata accessor for Date();
          OUTLINED_FUNCTION_0();
          (*(void (**)(char *))(v18 + 8))(v5);
LABEL_6:
          outlined destroy of Participant((uint64_t)v11);
          break;
      }
      unint64_t v13 = v17;
    }
    while (v14 != v17);
    uint64_t v12 = v32;
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t CaptionsViewController.captioningStateManager.getter()
{
  return swift_retain();
}

uint64_t CaptionsViewController.captioningStateManager.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return swift_release();
}

uint64_t (*CaptionsViewController.captioningStateManager.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t CaptionsViewController.allowsScreenshots.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for CaptionsViewController.allowsScreenshots);
}

uint64_t key path getter for CaptionsViewController.delegate : CaptionsViewController@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for CaptionsViewController.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for CaptionsViewController.delegate : CaptionsViewController(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + direct field offset for CaptionsViewController.delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t CaptionsViewController.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t CaptionsViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  *(void *)(v2 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CaptionsViewController.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for CaptionsViewController.delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  void v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t key path getter for CaptionsViewController.captionVisibilityDuringCapture : CaptionsViewController@<X0>(void *a1@<X0>, uint64_t (**a2)(double *a1, unsigned __int8 *a2)@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for CaptionsViewController.captionVisibilityDuringCapture);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(double *, unsigned __int8 *))v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ()(double *a1, unsigned __int8 *a2, uint64_t (*a3)(void, double, double, double, double))
{
  return a3(*a2, *a1, a1[1], a1[2], a1[3]);
}

uint64_t key path setter for CaptionsViewController.captionVisibilityDuringCapture : CaptionsViewController(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect, @in_guaranteed Bool) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for CaptionsViewController.captionVisibilityDuringCapture);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
}

uint64_t CaptionsViewController.captionVisibilityDuringCapture.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*v0);
  return v1;
}

uint64_t CaptionsViewController.captionVisibilityDuringCapture.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = *v2;
  *uint64_t v2 = a1;
  v2[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
}

uint64_t (*CaptionsViewController.captionVisibilityDuringCapture.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t CaptionsViewController.speechModelDownloadPromptBlocked.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t CaptionsViewController.speechModelDownloadPromptBlocked.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CaptionsViewController.speechModelDownloadPromptBlocked.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t CaptionsViewController.isBroadcastingScreenSharingActive.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t CaptionsViewController.isBroadcastingScreenSharingActive.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CaptionsViewController.isBroadcastingScreenSharingActive.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

Swift::Void __swiftcall CaptionsViewController.minimize(_:)(Swift::Bool a1)
{
}

uint64_t CaptionsViewController.allowsMinimization.getter()
{
  return CaptionsViewController.allowsMinimization.getter(CaptionsStateSource.allowsMinimization.getter);
}

uint64_t CaptionsViewController.allowsMinimization.setter(uint64_t a1)
{
  return CaptionsViewController.minimize(_:)(a1, (void (*)(uint64_t))CaptionsStateSource.allowsMinimization.setter);
}

uint64_t (*CaptionsViewController.allowsMinimization.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CaptionsViewController.allowsMinimization.getter() & 1;
  return CaptionsViewController.allowsMinimization.modify;
}

uint64_t CaptionsViewController.allowsMinimization.modify(uint64_t a1)
{
  return CaptionsViewController.allowsMinimization.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t CaptionsViewController.isGroupCall.getter()
{
  return CaptionsViewController.allowsMinimization.getter(CaptionsStateSource.isGroupCall.getter);
}

uint64_t CaptionsViewController.allowsMinimization.getter(uint64_t (*a1)(void))
{
  LOBYTE(a1) = a1();
  swift_release();
  swift_release();
  return a1 & 1;
}

uint64_t CaptionsViewController.isGroupCall.setter(uint64_t a1)
{
  return CaptionsViewController.minimize(_:)(a1, (void (*)(uint64_t))CaptionsStateSource.isGroupCall.setter);
}

uint64_t CaptionsViewController.minimize(_:)(uint64_t a1, void (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_7_15();
  CaptionsViewModel.source.getter();
  a2(a1);
  swift_release();
  return swift_release();
}

uint64_t (*CaptionsViewController.isGroupCall.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CaptionsViewController.isGroupCall.getter() & 1;
  return CaptionsViewController.isGroupCall.modify;
}

uint64_t CaptionsViewController.isGroupCall.modify(uint64_t a1)
{
  return CaptionsViewController.isGroupCall.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t CaptionsViewController.callName.getter()
{
  OUTLINED_FUNCTION_6_18();
  CaptionsViewModel.source.getter();
  uint64_t v0 = CaptionsStateSource.callName.getter();
  swift_release();
  swift_release();
  return v0;
}

uint64_t key path setter for CaptionsViewController.callName : CaptionsViewController()
{
  return CaptionsViewController.callName.setter();
}

uint64_t CaptionsViewController.callName.setter()
{
  OUTLINED_FUNCTION_7_15();
  CaptionsViewModel.source.getter();
  CaptionsStateSource.callName.setter();
  swift_release();
  return swift_release();
}

uint64_t (*CaptionsViewController.callName.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  *a1 = CaptionsViewController.callName.getter();
  a1[1] = v3;
  return CaptionsViewController.callName.modify;
}

uint64_t CaptionsViewController.callName.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return CaptionsViewController.callName.setter();
  }
  swift_bridgeObjectRetain();
  CaptionsViewController.callName.setter();
  return swift_bridgeObjectRelease();
}

void *CaptionsViewController.groupImage.getter()
{
  OUTLINED_FUNCTION_6_18();
  CaptionsViewModel.source.getter();
  uint64_t v0 = CaptionsStateSource.groupImage.getter();
  swift_release();
  swift_release();
  return v0;
}

uint64_t key path setter for CaptionsViewController.groupImage : CaptionsViewController(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  return CaptionsViewController.groupImage.setter(v1);
}

uint64_t CaptionsViewController.groupImage.setter(void *a1)
{
  swift_retain();
  CaptionsViewModel.source.getter();
  CaptionsStateSource.groupImage.setter(a1);
  swift_release();
  return swift_release();
}

void (*CaptionsViewController.groupImage.modify(void **a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = CaptionsViewController.groupImage.getter();
  return CaptionsViewController.groupImage.modify;
}

void CaptionsViewController.groupImage.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    CaptionsViewController.groupImage.setter(v2);
  }
  else
  {
    CaptionsViewController.groupImage.setter(*a1);
  }
}

uint64_t CaptionsViewController.languageModelDownloadingProgress.getter()
{
  OUTLINED_FUNCTION_6_18();
  CaptionsViewModel.source.getter();
  uint64_t v0 = CaptionsStateSource.languageModelDownloadingProgress.getter();
  swift_release();
  swift_release();
  return v0;
}

uint64_t key path getter for CaptionsViewController.languageModelDownloadingProgress : CaptionsViewController@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CaptionsViewController.languageModelDownloadingProgress.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CaptionsViewController.languageModelDownloadingProgress : CaptionsViewController()
{
  return CaptionsViewController.languageModelDownloadingProgress.setter();
}

uint64_t CaptionsViewController.languageModelDownloadingProgress.setter()
{
  OUTLINED_FUNCTION_7_15();
  CaptionsViewModel.source.getter();
  CaptionsStateSource.languageModelDownloadingProgress.setter();
  swift_release();
  return swift_release();
}

uint64_t (*CaptionsViewController.languageModelDownloadingProgress.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = CaptionsViewController.languageModelDownloadingProgress.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return CaptionsViewController.languageModelDownloadingProgress.modify;
}

uint64_t CaptionsViewController.languageModelDownloadingProgress.modify()
{
  return CaptionsViewController.languageModelDownloadingProgress.setter();
}

uint64_t CaptionsViewController.updateCaptions(for:)(uint64_t a1)
{
  swift_retain();
  CaptionsViewModel.updateCaptions(for:)(a1);
  return swift_release();
}

id CaptionsViewController.__allocating_init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9)
{
  id v18 = objc_allocWithZone(v9);
  return CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

id CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = type metadata accessor for UIHostingControllerSizingOptions();
  MEMORY[0x1F4188790](v14 - 8);
  unsigned __int8 v15 = *a7;
  *(void *)&v9[direct field offset for CaptionsViewController.screenSharingStateMonitor] = 0;
  *(void *)&v9[direct field offset for CaptionsViewController.captioningStateManager] = 0;
  *(void *)&v9[direct field offset for CaptionsViewController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v16 = &v9[direct field offset for CaptionsViewController.captionVisibilityDuringCapture];
  *uint64_t v16 = 0;
  v16[1] = 0;
  v9[direct field offset for CaptionsViewController.speechModelDownloadPromptBlocked] = 0;
  v9[direct field offset for CaptionsViewController.isBroadcastingScreenSharingActive] = 0;
  uint64_t v17 = direct field offset for CaptionsViewController.logger;
  uint64_t v18 = one-time initialization token for conversationKit;
  uint64_t v19 = v9;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = &v19[v17];
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationKit);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, v22, v21);
  uint64_t ObjectType = swift_getObjectType();
  v19[direct field offset for CaptionsViewController.allowsScreenshots] = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 512))(ObjectType, a9) & 1;
  unsigned __int8 v36 = v15;
  id v35 = a4;
  swift_unknownObjectRetain();
  LOBYTE(v21) = static Platform.current.getter() == 2;
  type metadata accessor for CaptionsViewModel(0);
  swift_allocObject();
  *(void *)&v19[direct field offset for CaptionsViewController.viewModel] = CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(a1, a2, a3, a4, a5 & 1, a6 & 1, &v36, a8, a9, v21);

  swift_retain();
  unint64_t v24 = (void *)UIHostingController.init(rootView:)();
  uint64_t v25 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = a6 & 1;
  *(void *)(v26 + 24) = v25;
  id v27 = v24;
  swift_retain();
  swift_retain();
  CaptionsViewModel.onRequestMinimizeHandler.setter((uint64_t)partial apply for closure #1 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:), v26);
  swift_release();
  swift_release();
  uint64_t v28 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  CaptionsViewModel.onRequestDismissControlsHandler.setter((uint64_t)partial apply for closure #2 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:), v28);
  swift_release();
  swift_release();
  id v29 = v27;
  static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
  dispatch thunk of UIHostingController.sizingOptions.setter();

  swift_unknownObjectRelease();
  return v29;
}

void closure #1 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(char a1, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a3 + 16;
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x1C8776240](v4);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      uint64_t v7 = v5 + direct field offset for CaptionsViewController.delegate;
      swift_beginAccess();
      if (MEMORY[0x1C8776240](v7))
      {
        uint64_t v8 = *(void *)(v7 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 8))(v6, a1 & 1, ObjectType, v8);

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
}

void closure #2 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    char v3 = (void *)v2;
    uint64_t v4 = v2 + direct field offset for CaptionsViewController.delegate;
    swift_beginAccess();
    if (MEMORY[0x1C8776240](v4))
    {
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v3, ObjectType, v5);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

id CaptionsViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CaptionsViewController.init(coder:)()
{
  *(void *)&v0[direct field offset for CaptionsViewController.screenSharingStateMonitor] = 0;
  *(void *)&v0[direct field offset for CaptionsViewController.captioningStateManager] = 0;
  *(void *)&v0[direct field offset for CaptionsViewController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = &v0[direct field offset for CaptionsViewController.captionVisibilityDuringCapture];
  *uint64_t v1 = 0;
  v1[1] = 0;
  v0[direct field offset for CaptionsViewController.speechModelDownloadPromptBlocked] = 0;
  v0[direct field offset for CaptionsViewController.isBroadcastingScreenSharingActive] = 0;
  uint64_t v2 = direct field offset for CaptionsViewController.logger;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationKit);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(&v0[v2], v4, v3);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc CaptionsViewController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  CaptionsViewController.init(coder:)();
}

Swift::Bool __swiftcall CaptionsViewController._canShowWhileLocked()()
{
  return 1;
}

uint64_t @objc CaptionsViewController._canShowWhileLocked()()
{
  return 1;
}

Swift::Void __swiftcall CaptionsViewController.viewDidLoad()()
{
  v8.receiver = v0;
  v8.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v8, sel_viewDidLoad);
  id v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(self, sel_clearColor);
  objc_msgSend(v2, sel_setBackgroundColor_, v3);

  id v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
LABEL_8:
    __break(1u);
    return;
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, sel_layer);

  if (*((unsigned char *)v0 + direct field offset for CaptionsViewController.allowsScreenshots)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 1042;
  }
  objc_msgSend(v6, sel_setDisableUpdateMask_, v7);
}

void @objc CaptionsViewController.viewDidLoad()(void *a1)
{
  id v1 = a1;
  CaptionsViewController.viewDidLoad()();
}

Swift::Void __swiftcall CaptionsViewController.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v5, sel_traitCollectionDidChange_, isa);
  if (!static Platform.current.getter() || static Platform.current.getter() == 1)
  {
    id v3 = objc_msgSend(v1, sel_traitCollection);
    id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

    LOBYTE(v3) = UIContentSizeCategory.isAccessibilityCategory.getter();
    if (v3)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      OUTLINED_FUNCTION_6_18();
      CaptionsViewModel.source.getter();
      CaptionsStateSource.isMinimized.setter();
      swift_release();
      swift_release();
    }
  }
}

void @objc CaptionsViewController.traitCollectionDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  v9.is_nil = (char)v6;
  id v7 = v6;
  v9.value.super.Class isa = (Class)a3;
  CaptionsViewController.traitCollectionDidChange(_:)(v9);
}

uint64_t CaptionsViewController.update(with:updateReason:)()
{
  OUTLINED_FUNCTION_7_15();
  CaptionsViewModel.source.getter();
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)(v0);
  CaptionsStateSource.participants.setter();
  swift_release();
  return swift_release();
}

void CaptionsViewController.__allocating_init(rootView:)()
{
}

void CaptionsViewController.init(rootView:)()
{
}

void CaptionsViewController.__allocating_init(coder:rootView:)()
{
}

void CaptionsViewController.init(coder:rootView:)()
{
}

uint64_t CaptionsViewController.__ivar_destroyer()
{
  swift_release();

  swift_release();
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + direct field offset for CaptionsViewController.delegate);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + direct field offset for CaptionsViewController.captionVisibilityDuringCapture));
  uint64_t v1 = v0 + direct field offset for CaptionsViewController.logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  return v4(v1, v2);
}

id CaptionsViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CaptionsViewController.__ivar_destroyer(uint64_t a1)
{
  swift_release();

  swift_release();
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(a1 + direct field offset for CaptionsViewController.delegate);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(a1 + direct field offset for CaptionsViewController.captionVisibilityDuringCapture));
  uint64_t v2 = a1 + direct field offset for CaptionsViewController.logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  return v5(v2, v3);
}

uint64_t protocol witness for ParticipantsViewController.update(with:updateReason:) in conformance CaptionsViewController()
{
  return CaptionsViewController.update(with:updateReason:)();
}

uint64_t specialized OptionSet<>.insert(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return OUTLINED_FUNCTION_9_13(v3 != a2);
}

uint64_t specialized OptionSet<>.insert(_:)(_DWORD *a1, int a2)
{
  int v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return OUTLINED_FUNCTION_9_13(v3 != a2);
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  *v1 &= result;
  return result;
}

{
  _DWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_1C30230FC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(char a1)
{
  closure #1 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #2 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)()
{
  closure #2 in CaptionsViewController.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)(v0);
}

uint64_t sub_1C3023158()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewController.allowsMinimization.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_1C3023184(unsigned __int8 *a1)
{
  return CaptionsViewController.allowsMinimization.setter(*a1);
}

uint64_t sub_1C30231AC()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewController.isGroupCall.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_1C30231D8(unsigned __int8 *a1)
{
  return CaptionsViewController.isGroupCall.setter(*a1);
}

uint64_t sub_1C3023200()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewController.callName.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

void *sub_1C302322C()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewController.groupImage.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t dispatch thunk of CaptionsViewControllerDelegate.captionsViewController(_:didRequestToBeMinimized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CaptionsViewControllerDelegate.captionsViewControllerDidRequestDismissControls(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for CaptionsViewController()
{
  uint64_t result = type metadata singleton initialization cache for CaptionsViewController;
  if (!type metadata singleton initialization cache for CaptionsViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CaptionsViewController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CaptionsViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CaptionsViewController);
}

uint64_t dispatch thunk of CaptionsViewController.__allocating_init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for CaptionsViewController + v0 + 72))();
}

uint64_t ObjC metadata update function for CaptionsViewController()
{
  return type metadata accessor for CaptionsViewController();
}

uint64_t sub_1C30233E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect, @in_guaranteed Bool) -> (@out ())(char a1, double a2, double a3, double a4, double a5)
{
  id v6 = *(uint64_t (**)(void *, char *))(v5 + 16);
  *(double *)UITraitCollection_optional v9 = a2;
  *(double *)&v9[1] = a3;
  *(double *)&v9[2] = a4;
  *(double *)&v9[3] = a5;
  char v8 = a1;
  return v6(v9, &v8);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ()(double *a1, unsigned __int8 *a2)
{
  return thunk for @escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ()(a1, a2, *(uint64_t (**)(void, double, double, double, double))(v2 + 16));
}

uint64_t outlined init with copy of Participant(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Participant(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of Participant.CopresenceInfo?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of Participant.MediaInfo(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for CancelConfirmationViewModel.delegate : CancelConfirmationViewModel@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v4);
  uint64_t v6 = *(void *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t key path setter for CancelConfirmationViewModel.delegate : CancelConfirmationViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t CancelConfirmationViewModel.delegate.getter()
{
  OUTLINED_FUNCTION_10_14();
  return MEMORY[0x1C8776240](v0);
}

uint64_t CancelConfirmationViewModel.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*CancelConfirmationViewModel.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  void v3[4] = v5;
  return CancelConfirmationViewModel.delegate.modify;
}

uint64_t CancelConfirmationViewModel.enabled(for:)()
{
  return 1;
}

uint64_t CancelConfirmationViewModel.controlType.getter()
{
  return CancelConfirmationViewModel.config.getter();
}

uint64_t CancelConfirmationViewModel.config.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Font.Leading();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Image.Scale();
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 32))
  {
    uint64_t v14 = *(void *)(v1 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = static Color.white.getter();
    if (one-time initialization token for callControlBackgroundOff != -1) {
      swift_once();
    }
    uint64_t v16 = static SystemSymbol<A>.callControlBackgroundOff;
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4F3EC70], v8);
    swift_retain();
    uint64_t v17 = static Font.body.getter();
    static Font.Weight.regular.getter();
    static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:scale:font:weight:)(0x6B72616D78, 0xE500000000000000, v15, v16, (uint64_t)v13, v17, v41, v18);
    long long v40 = v41[3];
    long long v39 = v41[4];
    uint64_t v38 = v42;
    uint64_t v37 = v43;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    long long v36 = v41[0];
    long long v35 = v41[1];
    long long v34 = v41[2];
    v19(v13, v8);
    uint64_t v20 = static Color.white.getter();
    static Font.subheadline.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4F3E0F8], v2);
    uint64_t v21 = Font.leading(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
    long long v44 = xmmword_1C376AA10;
    uint64_t v45 = 0x401C000000000000;
    uint64_t v46 = v20;
    long long v48 = v36;
    long long v49 = v35;
    long long v50 = v34;
    long long v51 = v40;
    long long v52 = v39;
    uint64_t v47 = v21;
    uint64_t v53 = v38;
    uint64_t v54 = v37;
    uint64_t v22 = self;
    id v23 = objc_msgSend(v22, sel_conversationKit);
    v55._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_4_6();
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v55._uint64_t countAndFlagsBits = 0;
    Swift::String v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, (NSBundle)v23, v24, v55);

    id v28 = objc_msgSend(v22, sel_conversationKit);
    v56._object = (void *)0xE000000000000000;
    OUTLINED_FUNCTION_4_6();
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v56._uint64_t countAndFlagsBits = 0;
    Swift::String v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v28, v29, v56);

    swift_allocObject();
    swift_weakInit();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButtonConfig<()>);
    OUTLINED_FUNCTION_8_9();
    uint64_t v14 = specialized IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)((uint64_t)&v44, v27._countAndFlagsBits, (uint64_t)v27._object, 0, v32._countAndFlagsBits, (uint64_t)v32._object, 0x75426C65636E6163, 0xEC0000006E6F7474, 1);
    *(void *)(v1 + 32) = v14;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v14;
}

Swift::Void __swiftcall CancelConfirmationViewModel.didTap()()
{
  OUTLINED_FUNCTION_10_14();
  if (MEMORY[0x1C8776240]())
  {
    uint64_t v1 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
    swift_unknownObjectRelease();
  }
}

uint64_t key path setter for CancelConfirmationViewModel.config : CancelConfirmationViewModel()
{
  uint64_t v0 = swift_retain();
  return CancelConfirmationViewModel.config.setter(v0);
}

uint64_t CancelConfirmationViewModel.config.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t closure #1 in CancelConfirmationViewModel.config.getter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CancelConfirmationViewModel.didTap()();
    return swift_release();
  }
  return result;
}

uint64_t CancelConfirmationViewModel.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 16);
  swift_release();
  return v0;
}

uint64_t CancelConfirmationViewModel.__deallocating_deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 16);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t CancelConfirmationViewModel.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CancelConfirmationViewModel.init()();
  return v0;
}

uint64_t CancelConfirmationViewModel.init()()
{
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 32) = 0;
  return v0;
}

uint64_t protocol witness for CallControlsPreCallButtonViewModel.delegate.getter in conformance CancelConfirmationViewModel()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1 + 16);
}

uint64_t protocol witness for CallControlsPreCallButtonViewModel.delegate.setter in conformance CancelConfirmationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for CallControlsPreCallButtonViewModel.delegate.modify in conformance CancelConfirmationViewModel(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1C8776240](v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  v3[3] = v5;
  void v3[4] = v6;
  return CancelConfirmationViewModel.delegate.modify;
}

void CancelConfirmationViewModel.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t protocol witness for CallControlsButtonViewModel.controlType.getter in conformance CancelConfirmationViewModel()
{
  return CancelConfirmationViewModel.controlType.getter();
}

uint64_t sub_1C3024094()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CancelConfirmationViewModel.config.getter()
{
  return closure #1 in CancelConfirmationViewModel.config.getter();
}

uint64_t specialized IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  OUTLINED_FUNCTION_5_28();
  uint64_t v23 = v17;
  OUTLINED_FUNCTION_9_14();
  ObservationRegistrar.init()();
  memcpy((void *)(v10 + 352), v13, 0x88uLL);
  outlined retain of IconButtonStyle<ShareMenuActionState>(v13, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy);
  swift_bridgeObjectRelease();
  *(void *)(v10 + 176) = v12;
  *(void *)(v10 + 184) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateHolder<Bool>);
  uint64_t v18 = OUTLINED_FUNCTION_8_9();
  OUTLINED_FUNCTION_7_16();
  ObservationRegistrar.init()();
  *(unsigned char *)(v18 + 16) = v9;
  *(void *)(v10 + 344) = v18;
  swift_bridgeObjectRelease();
  *(void *)(v10 + 192) = v16;
  *(void *)(v10 + 200) = v15;
  swift_bridgeObjectRelease();
  *(void *)(v10 + 208) = v14;
  *(void *)(v10 + 216) = a8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateHolder<()>);
  OUTLINED_FUNCTION_8_9();
  OUTLINED_FUNCTION_7_16();
  ObservationRegistrar.init()();
  *(unsigned char *)(v10 + 168) = a9;
  __n128 v19 = OUTLINED_FUNCTION_0_16(v23);
  OUTLINED_FUNCTION_2_21(v19, v20);
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_1_38();
  outlined release of IconButtonStyle<ShareMenuActionState>(v13, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe);
  memcpy(__dst, (const void *)(v10 + 352), 0x88uLL);
  OUTLINED_FUNCTION_6_19();
  swift_retain();
  swift_retain();
  outlined retain of IconButtonStyle<ShareMenuActionState>(__dst, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy);
  return v10;
}

uint64_t sub_1C30242F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CancelConfirmationViewModel.config.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CancelConfirmationViewModel()
{
  return self;
}

uint64_t method lookup function for CancelConfirmationViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CancelConfirmationViewModel);
}

uint64_t dispatch thunk of CancelConfirmationViewModel.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t specialized IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  OUTLINED_FUNCTION_5_28();
  uint64_t v25 = v18;
  OUTLINED_FUNCTION_9_14();
  ObservationRegistrar.init()();
  memcpy((void *)(v11 + 352), v14, 0x88uLL);
  outlined retain of IconButtonStyle<ShareMenuActionState>(v14, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy);
  swift_bridgeObjectRelease();
  *(void *)(v11 + 176) = v13;
  *(void *)(v11 + 184) = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateHolder<Bool>);
  uint64_t v19 = OUTLINED_FUNCTION_8_9();
  OUTLINED_FUNCTION_7_16();
  ObservationRegistrar.init()();
  *(unsigned char *)(v19 + 16) = v10;
  *(void *)(v11 + 344) = v19;
  swift_bridgeObjectRelease();
  *(void *)(v11 + 192) = v17;
  *(void *)(v11 + 200) = v16;
  swift_bridgeObjectRelease();
  *(void *)(v11 + 208) = v15;
  *(void *)(v11 + 216) = a8;
  uint64_t v20 = swift_allocObject();
  OUTLINED_FUNCTION_7_16();
  ObservationRegistrar.init()();
  *(unsigned char *)(v20 + 16) = a9;
  *(unsigned char *)(v11 + 168) = a10;
  __n128 v21 = OUTLINED_FUNCTION_0_16(v25);
  OUTLINED_FUNCTION_2_21(v21, v22);
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_1_38();
  outlined release of IconButtonStyle<ShareMenuActionState>(v14, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe);
  memcpy(__dst, (const void *)(v11 + 352), 0x88uLL);
  OUTLINED_FUNCTION_6_19();
  swift_retain();
  swift_retain();
  outlined retain of IconButtonStyle<ShareMenuActionState>(__dst, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy);
  return v11;
}

uint64_t specialized IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_9_14();
  ObservationRegistrar.init()();
  memcpy((void *)(v16 + 352), a1, 0x88uLL);
  outlined retain of IconButtonStyle<ShareMenuActionState>(a1, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy);
  swift_bridgeObjectRelease();
  *(void *)(v16 + 176) = a2;
  *(void *)(v16 + 184) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateHolder<Bool>);
  uint64_t v23 = OUTLINED_FUNCTION_8_9();
  OUTLINED_FUNCTION_7_16();
  ObservationRegistrar.init()();
  *(unsigned char *)(v23 + 16) = a4;
  *(void *)(v16 + 344) = v23;
  swift_bridgeObjectRelease();
  *(void *)(v16 + 192) = a5;
  *(void *)(v16 + 200) = a6;
  swift_bridgeObjectRelease();
  *(void *)(v16 + 208) = a7;
  *(void *)(v16 + 216) = a8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateHolder<ShareMenuActionState>);
  uint64_t v24 = OUTLINED_FUNCTION_8_9();
  OUTLINED_FUNCTION_7_16();
  ObservationRegistrar.init()();
  *(unsigned char *)(v24 + 16) = a9 & 1;
  *(unsigned char *)(v24 + 17) = a10 & 1;
  *(void *)(v24 + 24) = a11;
  *(unsigned char *)(v24 + 32) = a12 & 1;
  *(unsigned char *)(v24 + 33) = a13 & 1;
  *(unsigned char *)(v16 + 168) = a14;
  __n128 v25 = OUTLINED_FUNCTION_0_16(a16);
  OUTLINED_FUNCTION_2_21(v25, v26);
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_1_38();
  outlined release of IconButtonStyle<ShareMenuActionState>(a1, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOe, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
  memcpy(__dst, (const void *)(v16 + 352), 0x88uLL);
  OUTLINED_FUNCTION_6_19();
  swift_retain();
  swift_retain();
  outlined retain of IconButtonStyle<ShareMenuActionState>(__dst, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI5ImageV5ScaleORi_zRi0_zly15ConversationKit20ShareMenuActionStateVIsegnr_SgWOy, (void (*)(uint64_t, uint64_t))_sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy);
  return v16;
}

void *outlined retain of IconButtonStyle<ShareMenuActionState>(void *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[11];
  uint64_t v7 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[15];
  uint64_t v11 = a1[16];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  a2(v5, v7);
  a3(v6, v8);
  a4(v9, v11);
  return a1;
}

void *outlined release of IconButtonStyle<ShareMenuActionState>(void *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[15];
  uint64_t v11 = a1[16];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  a2(v5, v6);
  a3(v7, v8);
  a4(v9, v11);
  return a1;
}

void one-time initialization function for backgroundCornerRadius()
{
  static ConversationNoticeButtonProvider.Constants.backgroundCornerRadius = 0x4031AA3D70A3D70ALL;
}

double one-time initialization function for contentInsets()
{
  if (one-time initialization token for systemApertureButtonContentInsets != -1) {
    swift_once();
  }
  double result = *(double *)&static SystemApertureNoticeLayoutSharedConstants.systemApertureButtonContentInsets;
  static ConversationNoticeButtonProvider.Constants.contentInsets = static SystemApertureNoticeLayoutSharedConstants.systemApertureButtonContentInsets;
  *(_OWORD *)&qword_1EA347F18 = *(_OWORD *)&qword_1EA37E850;
  return result;
}

uint64_t ConversationNoticeButtonProvider.__allocating_init(controlsManager:context:)(void *a1, char a2)
{
  return ConversationNoticeButtonProvider.init(controlsManager:context:)(a1, a2);
}

uint64_t ConversationNoticeButtonProvider.init(controlsManager:context:)(void *a1, char a2)
{
  *(void *)(v2 + 136) = a1;
  uint64_t v4 = ControlsButtonProvider.init(context:shape:)(a2, 2);
  id v5 = a1;
  swift_retain();
  id v6 = ConversationNoticeButtonProvider.noticeButtonTitleFont.getter();
  ControlsButtonProvider.titleFont.setter(v6);
  swift_release();

  return v4;
}

id ConversationNoticeButtonProvider.noticeButtonTitleFont.getter()
{
  if (*(unsigned char *)(v0 + 40))
  {
    type metadata accessor for UIFont();
    return static UIFont.preferredFont(textStyle:weight:maximumPointSize:)(*MEMORY[0x1E4FB2950], 0, 1);
  }
  else
  {
    id result = objc_msgSend(self, sel__preferredFontForTextStyle_variant_, *MEMORY[0x1E4FB28D0], 264);
    if (!result) {
      __break(1u);
    }
  }
  return result;
}

Swift::Void __swiftcall ConversationNoticeButtonProvider.buttonChanged()()
{
  ControlsButtonProvider.buttonChanged()();
  if (!*(unsigned char *)(v0 + 40))
  {
    swift_beginAccess();
    uint64_t v1 = (void *)MEMORY[0x1C8776240](v0 + 16);
    if (v1)
    {
      uint64_t v2 = v1;
      id v3 = objc_msgSend(v1, sel_titleLabel);

      if (v3)
      {
        objc_msgSend(v3, sel_setAdjustsFontSizeToFitWidth_, 1);
        objc_msgSend(v3, sel_setMinimumScaleFactor_, 0.5);
      }
    }
  }
}

uint64_t ConversationNoticeButtonProvider.buttonConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  type metadata accessor for UIButton.Configuration.Size();
  OUTLINED_FUNCTION_4();
  uint64_t v29 = v2;
  uint64_t v30 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UIBackgroundConfiguration();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v28 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v28 - v16;
  ControlsButtonProvider.defaultButtonConfiguration.getter();
  uint64_t v18 = self;
  id v19 = objc_msgSend(v18, sel_whiteColor);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v15, v6);
  id v20 = v19;
  static UIBackgroundConfiguration.clear()();
  UIButton.Configuration.background.setter();
  UIButton.Configuration.baseBackgroundColor.setter();
  __n128 v21 = v12;
  __n128 v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v22(v17, v21, v6);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v6);
  id v23 = objc_msgSend(v18, sel_blackColor);
  UIButton.Configuration.baseForegroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v4, *MEMORY[0x1E4FB1270], v30);
  UIButton.Configuration.buttonSize.setter();
  uint64_t v24 = v31;
  if (!*(unsigned char *)(v28 + 40))
  {
    uint64_t v25 = v31;
    if (one-time initialization token for backgroundCornerRadius != -1) {
      swift_once();
    }
    __n128 v26 = (void (*)(char *, void))UIButton.Configuration.background.modify();
    UIBackgroundConfiguration.cornerRadius.setter();
    v26(v32, 0);
    if (one-time initialization token for contentInsets != -1) {
      swift_once();
    }
    UIButton.Configuration.contentInsets.setter();
    UIButton.Configuration.titleLineBreakMode.setter();
    uint64_t v24 = v25;
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v22)(v24, v17, v6);
}

void ConversationNoticeButtonProvider.__allocating_init(controlsManager:context:shape:)()
{
}

void ConversationNoticeButtonProvider.init(controlsManager:context:shape:)()
{
}

uint64_t ConversationNoticeButtonProvider.deinit()
{
  uint64_t v0 = ControlsButtonProvider.deinit();

  return v0;
}

uint64_t ConversationNoticeButtonProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConversationNoticeButtonProvider()
{
  return self;
}

uint64_t method lookup function for ConversationNoticeButtonProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationNoticeButtonProvider);
}

uint64_t dispatch thunk of ConversationNoticeButtonProvider.__allocating_init(controlsManager:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 480))();
}

unint64_t type metadata accessor for UIFont()
{
  unint64_t result = lazy cache variable for type metadata for UIFont;
  if (!lazy cache variable for type metadata for UIFont)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  }
  return result;
}

uint64_t ServiceAvailability.telephony.getter(char a1)
{
  return a1 & 1;
}

uint64_t ServiceAvailability.telephony.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ServiceAvailability.telephony.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ServiceAvailability.faceTimeAudio.getter(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t ServiceAvailability.faceTimeAudio.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*ServiceAvailability.faceTimeAudio.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ServiceAvailability.faceTimeVideo.getter(unint64_t a1)
{
  return (a1 >> 16) & 1;
}

uint64_t ServiceAvailability.faceTimeVideo.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*ServiceAvailability.faceTimeVideo.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ServiceAvailability.faceTimeMultiway.getter(unint64_t a1)
{
  return (a1 >> 24) & 1;
}

uint64_t ServiceAvailability.faceTimeMultiway.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3) = result;
  return result;
}

uint64_t (*ServiceAvailability.faceTimeMultiway.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ServiceAvailability.avLessSharePlay.getter(unint64_t a1)
{
  return HIDWORD(a1) & 1;
}

uint64_t ServiceAvailability.avLessSharePlay.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t (*ServiceAvailability.avLessSharePlay.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ServiceAvailability.videoMessaging.getter(unint64_t a1)
{
  return (a1 >> 40) & 1;
}

uint64_t ServiceAvailability.videoMessaging.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 5) = result;
  return result;
}

uint64_t (*ServiceAvailability.videoMessaging.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL ServiceAvailability.audio.getter(__int16 a1)
{
  return (a1 & 0x101) != 0;
}

BOOL static ServiceAvailability.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return ((a1 ^ a2) & 1 | (a1 >> 8) & 1 ^ (a2 >> 8) & 1 | (a1 >> 16) & 1 ^ (a2 >> 16) & 1 | (a1 >> 24) & 1 ^ (a2 >> 24) & 1 | BYTE4(a1) & 1 ^ BYTE4(a2) & 1 | (a1 >> 40) & 1 ^ (a2 >> 40) & 1) == 0;
}

ConversationKit::ServiceAvailability __swiftcall ServiceAvailability.init()()
{
  return (ConversationKit::ServiceAvailability)0;
}

ConversationKit::ServiceAvailability __swiftcall ServiceAvailability.init(telephony:faceTimeAudio:faceTimeVideo:faceTimeMultiway:avLessSharePlay:videoMessaging:)(Swift::Bool telephony, Swift::Bool faceTimeAudio, Swift::Bool faceTimeVideo, Swift::Bool faceTimeMultiway, Swift::Bool avLessSharePlay, Swift::Bool videoMessaging)
{
  uint64_t v6 = 0x10000000000;
  if (!videoMessaging) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0x100000000;
  if (!avLessSharePlay) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0x1000000;
  if (!faceTimeMultiway) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 0x10000;
  if (!faceTimeVideo) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = 256;
  if (!faceTimeAudio) {
    uint64_t v10 = 0;
  }
  return (ConversationKit::ServiceAvailability)(v10 & 0xFFFFFFFFFFFFFFFELL | telephony | v9 | v8 | v7 | v6);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ServiceAvailability(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[2];
  int v5 = a1[3];
  int v6 = a1[4];
  uint64_t v7 = *a2;
  int v8 = a2[1];
  int v9 = a2[2];
  int v10 = a2[3];
  int v11 = a2[4];
  int v12 = a2[5];
  if (a1[5]) {
    uint64_t v13 = 0x10000000000;
  }
  else {
    uint64_t v13 = 0;
  }
  BOOL v14 = v6 == 0;
  uint64_t v15 = 0x100000000;
  if (v14) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = 0x100000000;
  }
  BOOL v14 = v5 == 0;
  uint64_t v17 = 0x1000000;
  if (v14) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = 0x1000000;
  }
  BOOL v14 = v4 == 0;
  uint64_t v19 = 0x10000;
  if (v14) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = 0x10000;
  }
  BOOL v14 = v3 == 0;
  uint64_t v21 = 256;
  if (v14) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = 256;
  }
  unint64_t v23 = v22 | v2 | v20 | v18 | v16 | v13;
  if (v12) {
    uint64_t v24 = 0x10000000000;
  }
  else {
    uint64_t v24 = 0;
  }
  if (!v11) {
    uint64_t v15 = 0;
  }
  if (!v10) {
    uint64_t v17 = 0;
  }
  if (!v9) {
    uint64_t v19 = 0;
  }
  if (!v8) {
    uint64_t v21 = 0;
  }
  return static ServiceAvailability.== infix(_:_:)(v23, v21 | v7 | v19 | v17 | v15 | v24);
}

uint64_t __swift_memcpy6_1(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ServiceAvailability(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[6])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServiceAvailability(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServiceAvailability()
{
  return &type metadata for ServiceAvailability;
}

uint64_t StateHolder.state.getter@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t v4 = *(void *)(v3 + 80);
  swift_getKeyPath();
  StateHolder.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_50();
  uint64_t v6 = v1 + *(void *)(v5 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v6, v4);
}

uint64_t key path getter for StateHolder.state : <A>StateHolder<A>@<X0>(uint64_t a1@<X8>)
{
  return StateHolder.state.getter(a1);
}

uint64_t sub_1C3025528@<X0>(uint64_t a1@<X8>)
{
  return StateHolder.state.getter(a1);
}

uint64_t key path setter for StateHolder.state : <A>StateHolder<A>(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  int v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return StateHolder.state.setter((uint64_t)v2);
}

void *sub_1C3025614(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t StateHolder.state.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_50();
  uint64_t v3 = *(void *)(v2 + 80);
  swift_getKeyPath();
  StateHolder.withMutation<A, B>(keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

uint64_t StateHolder.state.init@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 80) - 8) + 32))(a3, a1);
}

uint64_t StateHolder.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t closure #1 in StateHolder.state.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)a1 + *(void *)(*a1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v4, a2);
  return swift_endAccess();
}

uint64_t partial apply for closure #1 in StateHolder.state.setter()
{
  return closure #1 in StateHolder.state.setter(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t StateHolder.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t (*StateHolder.state.modify(void *a1))()
{
  a1[3] = v1;
  OUTLINED_FUNCTION_0_17();
  swift_getKeyPath();
  StateHolder.access<A>(keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_50();
  *a1 = v1;
  swift_getKeyPath();
  swift_getWitnessTable();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return StateHolder.state.modify;
}

uint64_t StateHolder.state.modify()
{
  swift_endAccess();
  return $defer #1 <A>() in StateHolder.state.modify();
}

uint64_t $defer #1 <A>() in StateHolder.state.modify()
{
  return swift_release();
}

uint64_t StateHolder.__allocating_init(state:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  StateHolder.init(state:)(a1);
  return v2;
}

uint64_t StateHolder.init(state:)(uint64_t a1)
{
  OUTLINED_FUNCTION_50();
  ObservationRegistrar.init()();
  OUTLINED_FUNCTION_0_17();
  StateHolder.state.init(a1, v4, v1 + *(void *)(v3 + 88));
  return v1;
}

uint64_t StateHolder.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t StateHolder.__deallocating_deinit()
{
  StateHolder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for StateHolder()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for StateHolder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for StateHolder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for StateHolder);
}

uint64_t dispatch thunk of StateHolder.__allocating_init(state:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

id UIView.windowRect.getter@<X0>(uint64_t a1@<X8>)
{
  id result = objc_msgSend(v1, sel_superview);
  if (result)
  {
    uint64_t v4 = result;
    objc_msgSend(v1, sel_frame);
    objc_msgSend(v4, sel_convertPoint_toView_, 0);
    uint64_t v6 = v5;
    uint64_t v8 = v7;

    objc_msgSend(v1, sel_frame);
    uint64_t v10 = v9;
    id result = objc_msgSend(v1, sel_frame);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

void *iOSPeoplePickerAddButtonHandler.presenterViewController.getter()
{
  OUTLINED_FUNCTION_5_4();
  unint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

uint64_t (*iOSPeoplePickerAddButtonHandler.presenterViewController.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

void *iOSPeoplePickerAddButtonHandler.contactsSearchViewController.getter()
{
  OUTLINED_FUNCTION_5_4();
  unint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void iOSPeoplePickerAddButtonHandler.contactsSearchViewController.setter(void *a1)
{
}

uint64_t (*iOSPeoplePickerAddButtonHandler.contactsSearchViewController.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for iOSPeoplePickerAddButtonHandler.addToken : iOSPeoplePickerAddButtonHandler@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC15ConversationKit31iOSPeoplePickerAddButtonHandler_addToken);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CNComposeRecipient) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for iOSPeoplePickerAddButtonHandler.addToken : iOSPeoplePickerAddButtonHandler(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNComposeRecipient) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC15ConversationKit31iOSPeoplePickerAddButtonHandler_addToken);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
}

uint64_t iOSPeoplePickerAddButtonHandler.addToken.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*v0);
  return v1;
}

uint64_t iOSPeoplePickerAddButtonHandler.addToken.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = *v2;
  *id v2 = a1;
  v2[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
}

uint64_t (*iOSPeoplePickerAddButtonHandler.addToken.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

Swift::Void __swiftcall iOSPeoplePickerAddButtonHandler.handleAddButtonPressed(sourceView:)(UIView *sourceView)
{
  uint64_t v2 = v1;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB80]), sel_init);
  objc_msgSend(v3, sel_setAllowsCancel_, 1);
  objc_msgSend(v3, sel_setAllowsEditing_, 0);
  objc_msgSend(v3, sel_setDelegate_, v1);
  objc_msgSend(v3, sel_setMode_, 2);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
  uint64_t v4 = NSPredicate.init(format:_:)();
  objc_msgSend(v3, sel_setPredicateForEnablingContact_, v4);

  objc_msgSend(v3, sel_setModalPresentationStyle_, 6);
  id v5 = objc_msgSend(v3, sel_view);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = v5;
  uint64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_systemGreenColor);
  objc_msgSend(v6, sel_setTintColor_, v8);

  id v9 = objc_msgSend(v3, sel_view);
  if (!v9)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v7, sel_systemBackgroundColor);
  objc_msgSend(v10, sel_setBackgroundColor_, v11);

  int v12 = (id *)(v2 + OBJC_IVAR____TtC15ConversationKit31iOSPeoplePickerAddButtonHandler_presenterViewController);
  swift_beginAccess();
  if (*v12)
  {
    id v13 = *v12;
    objc_msgSend(v13, sel_presentViewController_animated_completion_, v3, 1, 0);
  }
}

id iOSPeoplePickerAddButtonHandler.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id iOSPeoplePickerAddButtonHandler.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit31iOSPeoplePickerAddButtonHandler_presenterViewController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit31iOSPeoplePickerAddButtonHandler_contactsSearchViewController] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKit31iOSPeoplePickerAddButtonHandler_addToken];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id iOSPeoplePickerAddButtonHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t (*protocol witness for PeoplePickerAddButtonHandler.presenterViewController.modify in conformance iOSPeoplePickerAddButtonHandler())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t (*protocol witness for PeoplePickerAddButtonHandler.contactsSearchViewController.modify in conformance iOSPeoplePickerAddButtonHandler())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t (*protocol witness for PeoplePickerAddButtonHandler.addToken.modify in conformance iOSPeoplePickerAddButtonHandler())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

Swift::Void __swiftcall iOSPeoplePickerAddButtonHandler.contactPicker(_:didSelect:)(CNContactPickerViewController *_, CNContactProperty didSelect)
{
  [(CNContactPickerViewController *)_ dismissViewControllerAnimated:1 completion:0];
  objc_super v4 = (void (**)(void))(v2 + OBJC_IVAR____TtC15ConversationKit31iOSPeoplePickerAddButtonHandler_addToken);
  swift_beginAccess();
  id v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = didSelect.super.isa;
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v5);
    id v7 = specialized CNKContactProperty.asRecipient()();
    if (v7)
    {
      id v8 = v7;
      v5();
    }
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v5);
  }
}

Swift::Void __swiftcall iOSPeoplePickerAddButtonHandler.contactPickerDidCancel(_:)(CNContactPickerViewController *a1)
{
}

id specialized CNKContactProperty.asRecipient()()
{
  id v1 = objc_msgSend(v0, sel_contact);
  @nonobjc CNContactProperty.value.getter(&v11);
  if (v12)
  {
    if (swift_dynamicCast())
    {
      uint64_t v2 = 0;
      uint64_t v4 = (uint64_t)v9;
      uint64_t v3 = v10;
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
  }
  @nonobjc CNContactProperty.value.getter(&v11);
  if (v12)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNPhoneNumber);
    if (swift_dynamicCast())
    {
      id v5 = objc_msgSend(v9, sel_stringValue);
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = v6;

      uint64_t v2 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
  }
  uint64_t v4 = 0;
  uint64_t v3 = 0xE000000000000000;
  uint64_t v2 = 5;
LABEL_10:
  if (String.count.getter() < 1)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    id v7 = objc_allocWithZone(MEMORY[0x1E4F5A138]);
    return @nonobjc CNComposeRecipient.init(contact:address:kind:)(v1, v4, v3, v2);
  }
}

uint64_t type metadata accessor for iOSPeoplePickerAddButtonHandler()
{
  return self;
}

uint64_t sub_1C3026A74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNComposeRecipient) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CNComposeRecipient) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySfG_Sfs5NeverOTg5108_s15ConversationKit13AudioPowerTapC16validatedSamples33_00240A3F10F7B5AE9F613A7AA708052ALLySaySfGAFFS2fXEfU_0F3Kit0hiJ0CAFTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v7 = v14;
    id v8 = (int *)(a1 + 32);
    while (1)
    {
      int v12 = *v8;
      closure #1 in AudioPowerTap.validatedSamples(_:)(&v12, a2, &v13);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      int v9 = v13;
      uint64_t v14 = v7;
      unint64_t v10 = *(void *)(v7 + 16);
      if (v10 >= *(void *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v7 = v14;
      }
      *(void *)(v7 + 16) = v10 + 1;
      *(_DWORD *)(v7 + 4 * v10 + 32) = v9;
      ++v8;
      if (!--v5)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_10:
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t AudioSampleNormalizer.description.getter()
{
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  uint64_t DynamicType = swift_getDynamicType();
  MetatypeMetadatCATransform3D a = swift_getMetatypeMetadata();
  v1._uint64_t countAndFlagsBits = >> prefix<A>(_:)((uint64_t)&DynamicType, MetatypeMetadata);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x52656C706D617328;
  v2._object = (void *)0xED0000203A657461;
  String.append(_:)(v2);
  uint64_t v3 = OUTLINED_FUNCTION_18_4();
  LODWORD(DynamicType) = v4(v3);
  v5._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001C3794350;
  v6._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  uint64_t v7 = OUTLINED_FUNCTION_18_4();
  LODWORD(DynamicType) = v8(v7);
  v9._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_11();
  uint64_t v10 = OUTLINED_FUNCTION_18_4();
  LOBYTE(DynamicType) = v11(v10) & 1;
  v12._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v16;
}

BOOL static AudioPowerTap.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AudioPowerTap.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int AudioPowerTap.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioPowerTap.Errors(char *a1, char *a2)
{
  return static AudioPowerTap.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioPowerTap.Errors()
{
  return AudioPowerTap.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AudioPowerTap.Errors(uint64_t a1)
{
  AudioPowerTap.Errors.hash(into:)(a1, *v1);
}

uint64_t AudioPowerTap.TapType.description.getter(char a1)
{
  if (a1) {
    return 0x6E696C6E776F642ELL;
  }
  else {
    return 0x6B6E696C70752ELL;
  }
}

ConversationKit::AudioPowerTap::TapType_optional __swiftcall AudioPowerTap.TapType.init(rawValue:)(Swift::Int32 rawValue)
{
  if (rawValue == -2) {
    v1.value = ConversationKit_AudioPowerTap_TapType_downlink;
  }
  else {
    v1.value = ConversationKit_AudioPowerTap_TapType_unknownDefault;
  }
  if (rawValue == -3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t AudioPowerTap.TapType.rawValue.getter(char a1)
{
  return (a1 & 1u) - 3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioPowerTap.TapType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioPowerTap.TapType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AudioPowerTap.TapType(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioPowerTap.TapType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::AudioPowerTap::TapType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AudioPowerTap.TapType@<W0>(Swift::Int32 *a1@<X0>, ConversationKit::AudioPowerTap::TapType_optional *a2@<X8>)
{
  result.value = AudioPowerTap.TapType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AudioPowerTap.TapType@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AudioPowerTap.TapType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AudioPowerTap.TapType()
{
  return AudioPowerTap.TapType.description.getter(*v0);
}

id AudioPowerTap.format.getter()
{
  return *(id *)(v0 + 16);
}

id AudioPowerTap.tapDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24)) {
    uint64_t v2 = 4294967294;
  }
  else {
    uint64_t v2 = 4294967293;
  }
  id v3 = objc_allocWithZone(MEMORY[0x1E4F189F8]);
  return objc_msgSend(v3, sel_initProcessTapWithFormat_PID_, v1, v2);
}

uint64_t AudioPowerTap.tapType.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t AudioPowerTap.lock.getter()
{
  return swift_retain();
}

uint64_t AudioPowerTap.normalizer.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IDSLookupManager(v1 + 40, a1);
}

uint64_t key path setter for AudioPowerTap.waveform : AudioPowerTap(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t AudioPowerTap.waveform.getter()
{
  return swift_retain();
}

uint64_t AudioPowerTap.waveform.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return swift_release();
}

uint64_t (*AudioPowerTap.waveform.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t AudioPowerTap.__allocating_init(type:normalizer:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 48);
  uint64_t v8 = a1 & 1;
  v10[3] = a2;
  v10[4] = a3;
  __swift_allocate_boxed_opaque_existential_1(v10);
  v7(v8, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v4 + 280))(v8, v10);
}

uint64_t AudioPowerTap.__allocating_init(type:normalizer:)(char a1, long long *a2)
{
  char v3 = a1 & 1;
  swift_allocObject();
  return AudioPowerTap.init(type:normalizer:)(v3, a2);
}

uint64_t AudioPowerTap.init(type:normalizer:)(char a1, long long *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for Lock();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *(void *)(v6 + 16) = v7;
  *uint64_t v7 = 0;
  *(void *)(v3 + 32) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Float]?, Never>);
  swift_allocObject();
  *(void *)(v3 + 80) = CurrentValueSubject.init(_:)();
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(unsigned char *)(v3 + 112) = 0;
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a2 + 4);
  __swift_project_boxed_opaque_existential_1(a2, v8);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F153A0]), sel_initWithCommonFormat_sampleRate_channels_interleaved_, 1, 1, 1, (*(float (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9));
  if (v10)
  {
    *(void *)(v3 + 16) = v10;
    *(unsigned char *)(v3 + 24) = a1 & 1;
    outlined init with take of Notice(a2, v3 + 40);
  }
  else
  {
    if (one-time initialization token for audioTap != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.audioTap);
    Swift::String v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_35_1(&dword_1C2F90000, v14, v15, "Failed to create AVAudioFormat");
      OUTLINED_FUNCTION_3();
    }

    swift_release();
    swift_release();

    type metadata accessor for AudioPowerTap();
    swift_deallocPartialClassInstance();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    return 0;
  }
  return v3;
}

void AudioPowerTap.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_24_0();
  a21 = v23;
  a22 = v24;
  uint64_t v25 = v22;
  if (one-time initialization token for audioTap != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.audioTap);
  swift_retain_n();
  Swift::String v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (_DWORD *)OUTLINED_FUNCTION_37();
    a10 = OUTLINED_FUNCTION_9_0();
    *uint64_t v29 = 136315138;
    type metadata accessor for AudioPowerTap();
    swift_retain();
    uint64_t v30 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_33_8();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v32, v33, "Deinit %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    uint64_t v34 = OUTLINED_FUNCTION_33_8();
  }
  if ((*((uint64_t (**)(uint64_t))*v25 + 37))(v34))
  {
    long long v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_1C2F90000, v35, v36, "AudioPowerTap is being stopped on deinit which is errorprone, leading to hangs in main", v37, 2u);
      OUTLINED_FUNCTION_3();
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v25 + 5));
  swift_release();

  OUTLINED_FUNCTION_22();
}

#error "1C30276C4: call analysis failed (funcsize=13)"

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AudioPowerTap.start()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for audioTap != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.audioTap);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::String v5 = (uint8_t *)swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)Swift::String v5 = 136315138;
    type metadata accessor for AudioPowerTap();
    swift_retain();
    uint64_t v6 = String.init<A>(reflecting:)();
    v61[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_38_2();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "Starting %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_38_2();
  }
  uint64_t v8 = v1[4];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  uint64_t v9 = swift_beginAccess();
  if (v1[12])
  {
    lazy protocol witness table accessor for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors();
    OUTLINED_FUNCTION_29();
    *id v10 = 0;
LABEL_13:
    swift_willThrow();
LABEL_14:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    return;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*v1 + 152);
  Swift::String v12 = (void *)v11(v9);
  id v13 = objc_msgSend(v12, sel_format);

  uint64_t v14 = (const AudioStreamBasicDescription *)objc_msgSend(v13, sel_streamDescription);
  swift_beginAccess();
  OSStatus v15 = AudioQueueNewInput(v14, (AudioQueueInputCallback)@objc closure #1 in AudioPowerTap.start(), v1, 0, 0, 0x800u, (AudioQueueRef *)v1 + 12);
  uint64_t v16 = swift_endAccess();
  unint64_t v17 = (OpaqueAudioQueue *)v1[12];
  if (!v17 || v15)
  {
    uint64_t v18 = (void *)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_12(v19))
    {
      *(_DWORD *)OUTLINED_FUNCTION_11_12() = 67109120;
      LODWORD(v61[0]) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_10_15(&dword_1C2F90000, v20, v21, "Failed to create processingQueue, OSStatus: %d");
      OUTLINED_FUNCTION_3();
    }

    lazy protocol witness table accessor for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors();
    OUTLINED_FUNCTION_29();
    *uint64_t v22 = 1;
    goto LABEL_13;
  }
  uint64_t v23 = (void *)v11(v16);
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F189F0]), sel_initWithTapDescription_, v23);

  if (AudioQueueSetProperty(v17, 0x71746F62u, v24, 8u))
  {
    uint64_t v25 = (void *)Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_12(v26))
    {
      Swift::String v27 = (float *)OUTLINED_FUNCTION_11_12();
      OUTLINED_FUNCTION_5_29(v27, 1.5047e-36);
      OUTLINED_FUNCTION_10_15(&dword_1C2F90000, v28, v29, "Failed to configure AudioQueue, status: %d");
      OUTLINED_FUNCTION_3();
    }

    lazy protocol witness table accessor for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors();
    OUTLINED_FUNCTION_29();
    char v31 = 2;
    goto LABEL_31;
  }
  objc_msgSend((id)v1[2], sel_sampleRate);
  float v33 = v32;
  uint64_t v34 = v1[8];
  uint64_t v35 = v1[9];
  __swift_project_boxed_opaque_existential_1(v1 + 5, v34);
  float v36 = (*(float (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35);
  float v37 = log2f(v33 / v36);
  float v38 = exp2f(ceilf(v37));
  if ((~LODWORD(v38) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v38 <= -1.0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v38 >= 4295000000.0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  UInt32 v39 = v38;
  long long v40 = (AudioQueueBufferRef *)(v1 + 11);
  swift_beginAccess();
  OSStatus Buffer = AudioQueueAllocateBuffer(v17, v39, (AudioQueueBufferRef *)v1 + 11);
  swift_endAccess();
  if (Buffer)
  {
    uint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_12(v43))
    {
LABEL_30:

      lazy protocol witness table accessor for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors();
      OUTLINED_FUNCTION_29();
      char v31 = 4;
LABEL_31:
      *uint64_t v30 = v31;
      swift_willThrow();

      goto LABEL_14;
    }
    long long v44 = (float *)OUTLINED_FUNCTION_11_12();
    OUTLINED_FUNCTION_5_29(v44, 1.5047e-36);
    uint64_t v47 = "Failed to allocate buffer, status: %d";
LABEL_29:
    OUTLINED_FUNCTION_10_15(&dword_1C2F90000, v45, v46, v47);
    OUTLINED_FUNCTION_3();
    goto LABEL_30;
  }
  if (*v40)
  {
    if (!AudioQueueEnqueueBuffer(v17, *v40, 0, 0))
    {
      OSStatus v50 = AudioQueueStart(v17, 0);
      if (!v50)
      {
        swift_retain_n();
        Swift::String v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          v61[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 136315138;
          type metadata accessor for AudioPowerTap();
          swift_retain();
          uint64_t v59 = String.init<A>(reflecting:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_38_2();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2F90000, v56, v57, "Started %s", v58, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {

          OUTLINED_FUNCTION_38_2();
        }
        goto LABEL_14;
      }
      OSStatus v51 = v50;
      long long v52 = (void *)Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_12(v53))
      {
        *(_DWORD *)OUTLINED_FUNCTION_11_12() = 67109120;
        LODWORD(v61[0]) = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_10_15(&dword_1C2F90000, v54, v55, "Failed to start AudioQueue, status: %d");
        OUTLINED_FUNCTION_3();
      }

      lazy protocol witness table accessor for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors();
      OUTLINED_FUNCTION_29();
      char v31 = 3;
      goto LABEL_31;
    }
    uint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_12(v48)) {
      goto LABEL_30;
    }
    long long v49 = (float *)OUTLINED_FUNCTION_11_12();
    OUTLINED_FUNCTION_5_29(v49, 1.5047e-36);
    uint64_t v47 = "Failed to enqueue buffer, status: %d";
    goto LABEL_29;
  }
LABEL_42:
  __break(1u);
}

uint64_t closure #1 in AudioPowerTap.start()(uint64_t result, OpaqueAudioQueue *a2, AudioQueueBuffer *a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v8 = result;
    if (one-time initialization token for audioTap != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.audioTap);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v22 = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeMutablePointer<AudioQueueBuffer>);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v10, v11, "queueBufferRef %s ptr %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v13, -1, -1);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }

    UInt32 mAudioDataByteSize = a3->mAudioDataByteSize;
    swift_retain();
    if (mAudioDataByteSize >> 2 == a5)
    {
      (*(void (**)(void *const, uint64_t))(*(void *)v8 + 304))(a3->mAudioData, a5);
      AudioQueueEnqueueBuffer(a2, a3, 0, 0);
    }
    else
    {
      os_log_type_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 67109632;
        LODWORD(v22) = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v21 + 8) = 1024;
        LODWORD(v22) = mAudioDataByteSize >> 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v21 + 14) = 1024;
        LODWORD(v22) = mAudioDataByteSize;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2F90000, v19, v20, "Invalid buffer passed. sampleCount %u is not expected value (%u) for buffer: %u", (uint8_t *)v21, 0x14u);
        MEMORY[0x1C87760E0](v21, -1, -1);
      }
    }
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall AudioPowerTap.stop()()
{
  OUTLINED_FUNCTION_3_15();
  uint64_t v27 = v1;
  uint64_t v28 = v2;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 + 32);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 16));
  swift_beginAccess();
  Swift::String v5 = *(OpaqueAudioQueue **)(v3 + 96);
  if (v5)
  {
    uint64_t v25 = v4;
    if (objc_msgSend(self, sel_isMainThread))
    {
      if (one-time initialization token for audioTap != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.audioTap);
      unint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v7, v8))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        OUTLINED_FUNCTION_35_1(&dword_1C2F90000, v9, v10, "AudioPowerTap is being stopped on main thread which causes hangs");
        OUTLINED_FUNCTION_3();
      }
    }
    if (one-time initialization token for audioTap != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.audioTap);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v26 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v14 = 136315138;
      type metadata accessor for AudioPowerTap();
      swift_retain();
      uint64_t v15 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_39_2();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v12, v13, "Stopping %s", v14, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      OUTLINED_FUNCTION_39_2();
    }
    AudioQueuePause(v5);
    AudioQueueStop(v5, 1u);
    AudioQueueDispose(v5, 1u);
    *(void *)(v3 + 96) = 0;
    swift_retain_n();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (_DWORD *)OUTLINED_FUNCTION_37();
      uint64_t v26 = OUTLINED_FUNCTION_9_0();
      *os_log_type_t v19 = 136315138;
      type metadata accessor for AudioPowerTap();
      swift_retain();
      uint64_t v20 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_39_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v22, v23, "Stopped %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      OUTLINED_FUNCTION_39_2();
    }
    uint64_t v4 = v25;
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 16));
  OUTLINED_FUNCTION_2_22();
  return result;
}

uint64_t AudioPowerTap.process(_:count:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for audioTap != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.audioTap);
  swift_retain_n();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_33_8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
    uint64_t v12 = MEMORY[0x1C87733E0]();
    unint64_t v14 = v13;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v21);
    a2 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v7, v8, "[%s] Buffer: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    uint64_t v15 = OUTLINED_FUNCTION_33_8();
  }
  (*(void (**)(uint64_t))(*v3 + 160))(v15);
  uint64_t v16 = v3[8];
  uint64_t v17 = v3[9];
  __swift_project_boxed_opaque_existential_1(v3 + 5, v16);
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v17 + 40))(a1, a2, v16, v17);
  swift_retain();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySfG_Sfs5NeverOTg5108_s15ConversationKit13AudioPowerTapC16validatedSamples33_00240A3F10F7B5AE9F613A7AA708052ALLySaySfGAFFS2fXEfU_0F3Kit0hiJ0CAFTf1cn_n(v18, (uint64_t)v3);
  swift_bridgeObjectRelease();
  v21[0] = v19;
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

void closure #1 in AudioPowerTap.validatedSamples(_:)(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v4 = *a1;
  if ((~*a1 & 0x7F800000) == 0 && (v4 & 0x7FFFFF) != 0)
  {
    if ((*(unsigned char *)(a2 + 112) & 1) == 0)
    {
      *(unsigned char *)(a2 + 112) = 1;
      if (one-time initialization token for audioTap != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.audioTap);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v14 = v13;
        *(_DWORD *)uint64_t v8 = 136315394;
        uint64_t v9 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2080;
        type metadata accessor for AudioPowerTap();
        swift_retain();
        uint64_t v11 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v6, v7, "Found NaN when processing %s samples in %s", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v13, -1, -1);
        MEMORY[0x1C87760E0](v8, -1, -1);
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
    }
    int v4 = 0;
  }
  *a3 = v4;
}

uint64_t AudioPowerTap.description.getter()
{
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(73);
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  v1._object = (void *)0x80000001C3794370;
  String.append(_:)(v1);
  v15[0] = v0;
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000001C3794390;
  v2._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v2);
  swift_beginAccess();
  if (*(void *)(v0 + 96))
  {
    v15[0] = *(void *)(v0 + 96);
    uint64_t v3 = String.init<A>(reflecting:)();
    unint64_t v5 = v4;
  }
  else
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_11();
  LOBYTE(v15[0]) = *(unsigned char *)(v0 + 24);
  v7._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x6C616D726F6E202CLL;
  v8._object = (void *)0xEE00203A72657A69;
  String.append(_:)(v8);
  outlined init with copy of IDSLookupManager(v0 + 40, (uint64_t)v15);
  uint64_t v9 = specialized >> prefix<A>(_:)((uint64_t)v15);
  uint64_t v11 = v10;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for AudioSampleNormalizer?);
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AudioPowerTap()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320))();
}

uint64_t type metadata accessor for AudioPowerTap()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors;
  if (!lazy protocol witness table cache variable for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors;
  if (!lazy protocol witness table cache variable for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioPowerTap.Errors and conformance AudioPowerTap.Errors);
  }
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUConversation, 0x1E4FADB20, (unint64_t *)&lazy protocol witness table cache variable for type TUConversation and conformance NSObject);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &lazy cache variable for type metadata for TUConversationActivitySession, 0x1E4FADB58, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &lazy cache variable for type metadata for SGURL, 0x1E4F5DB80, (unint64_t *)&lazy protocol witness table cache variable for type SGURL and conformance NSObject);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
    OUTLINED_FUNCTION_27_3();
    uint64_t v4 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_1(v4);
    uint64_t v6 = *(void *)(v5 + 72);
    Swift::String v7 = (void *)OUTLINED_FUNCTION_9_15();
    _swift_stdlib_malloc_size(v7);
    if (v6)
    {
      OUTLINED_FUNCTION_23_3();
      BOOL v9 = v9 && v6 == -1;
      if (!v9)
      {
        v7[2] = v2;
        v7[3] = 2 * (v8 / v6);
        swift_bridgeObjectRetain();
        unint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v11, (uint64_t)v7 + v1, v2, a1);
        outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
        if (v10 != (void *)v2) {
          __break(1u);
        }
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = __CocoaSet.count.getter();
    if (v8) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v8 <= 0)
  {
    BOOL v9 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    BOOL v9 = (void *)OUTLINED_FUNCTION_15_2();
    _swift_stdlib_malloc_size(v9);
    OUTLINED_FUNCTION_30_4();
    v9[2] = v8;
    v9[3] = v10;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)(&v13, v9 + 4, v8, a1, a2, a3, a4);
  uint64_t result = outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
  if (v11 == (void *)v8) {
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  if (!a2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  if (a2 <= 0)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = a2;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 4);
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, (unint64_t)(v4 + 4));
  return v4;
}

unint64_t lazy protocol witness table accessor for type AudioPowerTap.TapType and conformance AudioPowerTap.TapType()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioPowerTap.TapType and conformance AudioPowerTap.TapType;
  if (!lazy protocol witness table cache variable for type AudioPowerTap.TapType and conformance AudioPowerTap.TapType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioPowerTap.TapType and conformance AudioPowerTap.TapType);
  }
  return result;
}

uint64_t sub_1C3029234@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of AudioSampleNormalizer.sampleRate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AudioSampleNormalizer.refreshFrequency.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AudioSampleNormalizer.tapType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))() & 1;
}

uint64_t dispatch thunk of AudioSampleNormalizer.process(_:sampleCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of AudioSampleNormalizer.init(with:)(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))(a1 & 1);
}

uint64_t method lookup function for AudioPowerTap(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioPowerTap);
}

uint64_t dispatch thunk of AudioPowerTap.tapDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AudioPowerTap.waveform.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of AudioPowerTap.waveform.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of AudioPowerTap.waveform.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of AudioPowerTap.__allocating_init(type:normalizer:)(char a1)
{
  return (*(uint64_t (**)(void))(v1 + 280))(a1 & 1);
}

uint64_t dispatch thunk of AudioPowerTap.start()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of AudioPowerTap.stop()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of AudioPowerTap.process(_:count:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of AudioPowerTap.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t getEnumTagSinglePayload for AudioPowerTap.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AudioPowerTap.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C30295F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioPowerTap.Errors()
{
  return &type metadata for AudioPowerTap.Errors;
}

unsigned char *storeEnumTagSinglePayload for AudioPowerTap.TapType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C30296FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioPowerTap.TapType()
{
  return &type metadata for AudioPowerTap.TapType;
}

void specialized _copyCollectionToContiguousArray<A>(_:)()
{
  OUTLINED_FUNCTION_3_15();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v1 = (const void *)OUTLINED_FUNCTION_15_2();
    _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_30_4();
    OUTLINED_FUNCTION_6_20(v2);
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_7_17();
    OUTLINED_FUNCTION_1_39();
    if (!v3) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_2_22();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_3_15();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v1 = (const void *)OUTLINED_FUNCTION_15_2();
    uint64_t v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_6_20(2 * ((uint64_t)(v2 - 32) / 16));
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_7_17();
    OUTLINED_FUNCTION_1_39();
    if (!v7) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_2_22();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  void *v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_3_15();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NoticePriority>);
    uint64_t v1 = (const void *)swift_allocObject();
    uint64_t v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_6_20(2 * v2 - 64);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_7_17();
    OUTLINED_FUNCTION_1_39();
    if (!v7) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_2_22();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  char v3;

  OUTLINED_FUNCTION_3_15();
  if (*(void *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v1 = (const void *)OUTLINED_FUNCTION_15_2();
    uint64_t v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_6_20(2 * ((uint64_t)(v2 - 32) / 16));
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_7_17();
    OUTLINED_FUNCTION_1_39();
    if (!v3) {
      __break(1u);
    }
  }
  OUTLINED_FUNCTION_2_22();
}

#error "1C30298CC: call analysis failed (funcsize=44)"

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *))
{
  unint64_t v7 = a4 >> 1;
  uint64_t v8 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v8)
  {
    if (v8 <= 0)
    {
      uint64_t v18 = (char *)MEMORY[0x1E4FBC860];
LABEL_12:
      if (v7 != a3)
      {
        uint64_t v21 = a6(0);
        OUTLINED_FUNCTION_1(v21);
        a7(a2 + *(void *)(v23 + 72) * a3, v8, &v18[(*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)]);
        return;
      }
      goto LABEL_17;
    }
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = a6(0);
    OUTLINED_FUNCTION_1(v13);
    uint64_t v15 = *(void *)(v14 + 72);
    unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v18 = (char *)swift_allocObject();
    size_t v19 = _swift_stdlib_malloc_size(v18);
    if (v15)
    {
      if (v19 - v17 != 0x8000000000000000 || v15 != -1)
      {
        *((void *)v18 + 2) = v8;
        *((void *)v18 + 3) = 2 * ((uint64_t)(v19 - v17) / v15);
        goto LABEL_12;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

const void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (const void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      char v3 = (const void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      char v3 = (const void *)OUTLINED_FUNCTION_15_2();
      size_t v4 = _swift_stdlib_malloc_size(v3);
      OUTLINED_FUNCTION_20_4(v4);
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((uint64_t)v3 + 32, v2, v1);
    unint64_t v1 = v5;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    OUTLINED_FUNCTION_32();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (const void *)MEMORY[0x1E4FBC860];
    }
  }
  return v3;
}

#error "1C3029C1C: call analysis failed (funcsize=52)"

#error "1C3029D94: call analysis failed (funcsize=59)"

#error "1C3029E44: call analysis failed (funcsize=37)"

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 == -1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = result;
  if (v3 <= 0)
  {
    unsigned int v6 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    unsigned int v6 = (void *)OUTLINED_FUNCTION_15_2();
    _swift_stdlib_malloc_size(v6);
    OUTLINED_FUNCTION_40_2();
    long long v6[2] = v3;
    v6[3] = v7;
  }
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, (uint64_t)(v6 + 4), v3, v5, a2);
  if (result == v3) {
    return (uint64_t)v6;
  }
LABEL_12:
  __break(1u);
  return result;
}

void specialized Array._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t)&lazy protocol witness table cache variable for type [NSLayoutConstraint] and conformance [A], (uint64_t)&demangling cache variable for type metadata for [NSLayoutConstraint], (uint64_t)specialized protocol witness for Collection.subscript.read in conformance [A], a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

{
  specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t)&lazy protocol witness table cache variable for type [PickablePerson] and conformance [A], (uint64_t)&demangling cache variable for type metadata for [PickablePerson], (uint64_t)specialized protocol witness for Collection.subscript.read in conformance [A], a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

{
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t (*v30)(char *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t *v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  void (*v35)(unint64_t, void, uint64_t);
  void (*v36)(unint64_t, void, uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  void (*v48)(char *, void);
  id *v49;
  id v50;

  OUTLINED_FUNCTION_3_15();
  a25 = v26;
  a26 = v28;
  uint64_t v30 = v29;
  double v32 = v31;
  uint64_t v34 = v33;
  float v36 = v35;
  float v37 = v27;
  UInt32 v39 = v38;
  uint64_t v41 = v40;
  uint64_t v42 = v27 >> 62;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v43) {
      goto LABEL_13;
    }
  }
  else
  {
    os_log_type_t v43 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v43)
    {
LABEL_13:
      OUTLINED_FUNCTION_2_22();
      return;
    }
  }
  if (v41)
  {
    if (v42)
    {
      swift_bridgeObjectRetain();
      long long v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v44 <= v39)
      {
        if (v43 >= 1)
        {
          uint64_t v45 = lazy protocol witness table accessor for type [UIWindow] and conformance [A](v34, v32);
          swift_bridgeObjectRetain();
          for (i = 0; i != v43; ++i)
          {
            uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(v32);
            os_log_type_t v48 = (void (*)(char *, void))v30(&a11, i, v37, v47, v45);
            OSStatus v50 = *v49;
            v48(&a11, 0);
            *(void *)(v41 + 8 * i) = v50;
          }
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v39)
      {
        v36((v37 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10), v41);
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
}

{
  specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t)&lazy protocol witness table cache variable for type [TUHandle] and conformance [A], (uint64_t)&demangling cache variable for type metadata for [TUHandle], (uint64_t)specialized protocol witness for Collection.subscript.read in conformance [A], a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

{
  specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t)&lazy protocol witness table cache variable for type [UILayoutGuide] and conformance [A], (uint64_t)&demangling cache variable for type metadata for [UILayoutGuide], (uint64_t)specialized protocol witness for Collection.subscript.read in conformance [A], a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

{
  specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t)&lazy protocol witness table cache variable for type [UIMenuElement] and conformance [A], (uint64_t)&demangling cache variable for type metadata for [UIMenuElement], (uint64_t)specialized protocol witness for Collection.subscript.read in conformance [A], a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

{
  specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t)&lazy protocol witness table cache variable for type [UIWindow] and conformance [A], (uint64_t)&demangling cache variable for type metadata for [UIWindow], (uint64_t)specialized protocol witness for Collection.subscript.read in conformance [A], a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [RecipientResultWrapper] and conformance [A], &demangling cache variable for type metadata for [RecipientResultWrapper]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RecipientResultWrapper]);
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A]();
            uint64_t v12 = *v11;
            swift_retain();
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(a4 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a4 + 56);
  if (!a2)
  {
    unint64_t v28 = 0;
    uint64_t v10 = 0;
LABEL_40:
    *uint64_t result = v38;
    result[1] = v4;
    result[2] = ~v5;
    result[3] = v28;
    result[4] = v7;
    return (void *)v10;
  }
  if (!a3)
  {
    unint64_t v28 = 0;
    uint64_t v10 = 0;
    goto LABEL_40;
  }
  if (a3 < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v40 = a2;
  uint64_t v34 = a3;
  char v31 = result;
  uint64_t v32 = a4 + 56;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = v8;
  unint64_t v39 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v11;
  uint64_t v30 = v5;
  unint64_t v12 = (unint64_t)(63 - v5) >> 6;
  uint64_t v35 = v36 + 16;
  uint64_t v13 = (void (**)(char *, char *, uint64_t))(v36 + 32);
  int64_t v33 = v12;
  unint64_t v29 = v12 - 1;
  while (1)
  {
    MEMORY[0x1F4188790](v8);
    uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t result = (void *)MEMORY[0x1F4188790](v16 - 8);
    uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v19 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v20 = v19 | (v39 << 6);
      goto LABEL_23;
    }
    unint64_t v21 = v39;
    int64_t v22 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v4 = v32;
    if (v22 >= v33) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v32 + 8 * v22);
    if (v23) {
      goto LABEL_22;
    }
    int64_t v24 = v39 + 2;
    unint64_t v21 = v39 + 1;
    if ((uint64_t)(v39 + 2) >= v33) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v32 + 8 * v24);
    if (!v23)
    {
      unint64_t v21 = v39 + 2;
      if ((uint64_t)(v39 + 3) >= v33) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v32 + 8 * (v39 + 3));
      if (v23)
      {
        int64_t v22 = v39 + 3;
        goto LABEL_22;
      }
      unint64_t v21 = v39 + 3;
      if ((uint64_t)(v39 + 4) >= v33) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v32 + 8 * (v39 + 4));
      if (v23)
      {
        int64_t v22 = v39 + 4;
        goto LABEL_22;
      }
      int64_t v24 = v39 + 5;
      unint64_t v21 = v39 + 4;
      if ((uint64_t)(v39 + 5) >= v33)
      {
LABEL_37:
        unint64_t v39 = v21;
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v9);
        unint64_t v7 = 0;
        goto LABEL_38;
      }
      unint64_t v23 = *(void *)(v32 + 8 * v24);
      if (!v23) {
        break;
      }
    }
    int64_t v22 = v24;
LABEL_22:
    unint64_t v7 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v22 << 6);
    unint64_t v39 = v22;
LABEL_23:
    uint64_t v25 = *(void *)(v36 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v18, *(void *)(v38 + 48) + v25 * v20, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v9);
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v9) == 1)
    {
      uint64_t v4 = v32;
LABEL_38:
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t result = v31;
      goto LABEL_39;
    }
    ++v10;
    uint64_t v26 = *v13;
    (*v13)(v15, v18, v9);
    uint64_t v27 = v40;
    uint64_t v8 = ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v40, v15, v9);
    if (v10 == v34)
    {
      uint64_t v10 = v34;
      uint64_t result = v31;
      uint64_t v4 = v32;
LABEL_39:
      uint64_t v5 = v30;
      unint64_t v28 = v39;
      goto LABEL_40;
    }
    uint64_t v40 = v27 + v25;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v33)
    {
      unint64_t v21 = v29;
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v32 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, &lazy cache variable for type metadata for TUConversationActivitySession, 0x1E4FADB58, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject);
}

{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  if (!a2)
  {
    uint64_t v8 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    uint64_t v8 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_17:
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  uint64_t v8 = v6 - 1;
  *a2 = *(void *)(a4 + 8 * (v6 - 1) + 32);
  uint64_t v9 = a3 - 1;
  if (a3 == 1)
  {
LABEL_10:
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = a4 + 8 * v6 + 16;
    unint64_t v12 = a2 + 1;
    while (v8 + v10)
    {
      swift_bridgeObjectRetain();
      *v12++ = *(void *)(v11 + 8 * v10--);
      if (!(v9 + v10))
      {
        v8 += v10;
        goto LABEL_10;
      }
    }
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRetain();
LABEL_14:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4);
}

{
  void *v4;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  uint64_t v8 = OUTLINED_FUNCTION_27_3();
  uint64_t v10 = v9(v8);
  uint64_t v11 = OUTLINED_FUNCTION_1(v10);
  uint64_t v13 = v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t result = MEMORY[0x1F4188790](v14);
  unint64_t v29 = a4;
  uint64_t v16 = a4 + 56;
  uint64_t v26 = -1 << *(unsigned char *)(a4 + 32);
  if (-v26 < 64) {
    uint64_t v17 = ~(-1 << -(char)v26);
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = v17 & *(void *)(a4 + 56);
  if (!a2)
  {
    unint64_t v19 = 0;
    a3 = 0;
LABEL_34:
    *uint64_t v4 = v29;
    v4[1] = v16;
    v4[2] = ~v26;
    v4[3] = v19;
    v4[4] = v18;
    return a3;
  }
  if (!a3)
  {
    unint64_t v19 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v25 = v4;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v27 = v16;
  unint64_t v28 = (unint64_t)(63 - v26) >> 6;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  v18 &= v18 - 1;
  while (1)
  {
    ++v20;
    int64_t v24 = *(void *)(v13 + 72);
    outlined init with copy of RecentsCallItem();
    outlined init with take of RecentsCallItem();
    uint64_t result = outlined init with take of RecentsCallItem();
    if (v20 == a3) {
      goto LABEL_33;
    }
    a2 += v24;
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    unint64_t v21 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v21 >= v28)
    {
      uint64_t v18 = 0;
      a3 = v20;
LABEL_33:
      uint64_t v4 = v25;
      uint64_t v16 = v27;
      goto LABEL_34;
    }
    uint64_t v16 = v27;
    int64_t v22 = *(void *)(v27 + 8 * v21);
    if (!v22) {
      break;
    }
LABEL_18:
    uint64_t v18 = (v22 - 1) & v22;
    unint64_t v19 = v21;
  }
  v19 += 2;
  if (v21 + 1 >= v28)
  {
    uint64_t v18 = 0;
    unint64_t v19 = v21;
LABEL_39:
    a3 = v20;
    uint64_t v4 = v25;
    goto LABEL_34;
  }
  int64_t v22 = *(void *)(v27 + 8 * v19);
  if (v22) {
    goto LABEL_14;
  }
  unint64_t v23 = v21 + 2;
  if (v21 + 2 >= v28) {
    goto LABEL_36;
  }
  int64_t v22 = *(void *)(v27 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  unint64_t v19 = v21 + 3;
  if (v21 + 3 >= v28)
  {
    uint64_t v18 = 0;
    unint64_t v19 = v21 + 2;
    goto LABEL_39;
  }
  int64_t v22 = *(void *)(v27 + 8 * v19);
  if (v22)
  {
LABEL_14:
    unint64_t v21 = v19;
    goto LABEL_18;
  }
  unint64_t v23 = v21 + 4;
  if (v21 + 4 >= v28)
  {
LABEL_36:
    uint64_t v18 = 0;
    goto LABEL_39;
  }
  int64_t v22 = *(void *)(v27 + 8 * v23);
  if (v22)
  {
LABEL_17:
    unint64_t v21 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v28)
    {
      uint64_t v18 = 0;
      unint64_t v19 = v28 - 1;
      goto LABEL_39;
    }
    int64_t v22 = *(void *)(v27 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_8_16();
  if (v8 && (uint64_t v9 = v7) != 0)
  {
    if (v7 < 0)
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_16_10();
      if (!v4) {
        goto LABEL_6;
      }
LABEL_5:
      OUTLINED_FUNCTION_25_5();
      while (1)
      {
        ++v3;
        unint64_t v12 = *(void **)(*(void *)(v0 + 56) + 8 * v10);
        *unint64_t v1 = v12;
        if (v3 == v9)
        {
          id v16 = v12;
          goto LABEL_28;
        }
        ++v1;
        id v13 = v12;
        if (v4) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        if (v11 >= v5) {
          goto LABEL_28;
        }
        if (!*(void *)(v2 + 8 * v11))
        {
          v6 += 2;
          if (v11 + 1 >= v5) {
            goto LABEL_28;
          }
          if (!*(void *)(v2 + 8 * v6))
          {
            if (v11 + 2 >= v5) {
              goto LABEL_28;
            }
            if (!*(void *)(v2 + 8 * (v11 + 2)))
            {
              uint64_t v6 = v11 + 3;
              if (v11 + 3 >= v5) {
                goto LABEL_28;
              }
              if (!*(void *)(v2 + 8 * v6))
              {
                uint64_t v14 = v11 + 4;
                if (v11 + 4 >= v5) {
                  goto LABEL_28;
                }
                if (!*(void *)(v2 + 8 * v14)) {
                  break;
                }
              }
            }
          }
        }
LABEL_14:
        OUTLINED_FUNCTION_19_13();
      }
      while (1)
      {
        uint64_t v15 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          break;
        }
        if (v15 >= v5) {
          goto LABEL_28;
        }
        ++v14;
        if (*(void *)(v2 + 8 * v15)) {
          goto LABEL_14;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_28:
    OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_22();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_8_16();
  if (v8 && (uint64_t v9 = v7) != 0)
  {
    if (v7 < 0)
    {
LABEL_30:
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_16_10();
      if (!v4) {
        goto LABEL_6;
      }
LABEL_5:
      OUTLINED_FUNCTION_25_5();
      while (1)
      {
        ++v3;
        unint64_t v12 = (void *)(*(void *)(v0 + 48) + 16 * v10);
        id v13 = v12[1];
        *unint64_t v1 = *v12;
        v1[1] = v13;
        if (v3 == v9)
        {
          swift_bridgeObjectRetain();
          goto LABEL_28;
        }
        v1 += 2;
        swift_bridgeObjectRetain();
        if (v4) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        if (v11 >= v5) {
          goto LABEL_28;
        }
        if (!*(void *)(v2 + 8 * v11))
        {
          v6 += 2;
          if (v11 + 1 >= v5) {
            goto LABEL_28;
          }
          if (!*(void *)(v2 + 8 * v6))
          {
            if (v11 + 2 >= v5) {
              goto LABEL_28;
            }
            if (!*(void *)(v2 + 8 * (v11 + 2)))
            {
              uint64_t v6 = v11 + 3;
              if (v11 + 3 >= v5) {
                goto LABEL_28;
              }
              if (!*(void *)(v2 + 8 * v6))
              {
                uint64_t v14 = v11 + 4;
                if (v11 + 4 >= v5) {
                  goto LABEL_28;
                }
                if (!*(void *)(v2 + 8 * v14)) {
                  break;
                }
              }
            }
          }
        }
LABEL_14:
        OUTLINED_FUNCTION_19_13();
      }
      while (1)
      {
        uint64_t v15 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          break;
        }
        if (v15 >= v5) {
          goto LABEL_28;
        }
        ++v14;
        if (*(void *)(v2 + 8 * v15)) {
          goto LABEL_14;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_28:
    OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_22();
  }
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Participant.Caption(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t result = MEMORY[0x1F4188790](v10);
  uint64_t v25 = a4;
  uint64_t v12 = a4 + 64;
  uint64_t v22 = -1 << *(unsigned char *)(a4 + 32);
  if (-v22 < 64) {
    uint64_t v13 = ~(-1 << -(char)v22);
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v13 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v15 = 0;
    a3 = 0;
LABEL_34:
    *a1 = v25;
    a1[1] = v12;
    a1[2] = ~v22;
    a1[3] = v15;
    a1[4] = v14;
    return a3;
  }
  if (!a3)
  {
    int64_t v15 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v21 = a1;
  int64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v23 = v12;
  int64_t v24 = (unint64_t)(63 - v22) >> 6;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_8:
  v14 &= v14 - 1;
  while (1)
  {
    ++v16;
    uint64_t v20 = *(void *)(v9 + 72);
    outlined init with copy of RecentsCallItem();
    outlined init with take of RecentsCallItem();
    uint64_t result = outlined init with take of RecentsCallItem();
    if (v16 == a3) {
      goto LABEL_33;
    }
    a2 += v20;
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v17 >= v24)
    {
      uint64_t v14 = 0;
      a3 = v16;
LABEL_33:
      a1 = v21;
      uint64_t v12 = v23;
      goto LABEL_34;
    }
    uint64_t v12 = v23;
    uint64_t v18 = *(void *)(v23 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    uint64_t v14 = (v18 - 1) & v18;
    int64_t v15 = v17;
  }
  v15 += 2;
  if (v17 + 1 >= v24)
  {
    uint64_t v14 = 0;
    int64_t v15 = v17;
LABEL_39:
    a3 = v16;
    a1 = v21;
    goto LABEL_34;
  }
  uint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v24) {
    goto LABEL_36;
  }
  uint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v15 = v17 + 3;
  if (v17 + 3 >= v24)
  {
    uint64_t v14 = 0;
    int64_t v15 = v17 + 2;
    goto LABEL_39;
  }
  uint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v15;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v24)
  {
LABEL_36:
    uint64_t v14 = 0;
    goto LABEL_39;
  }
  uint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v24)
    {
      uint64_t v14 = 0;
      int64_t v15 = v24 - 1;
      goto LABEL_39;
    }
    uint64_t v18 = *(void *)(v23 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  uint64_t v30 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    uint64_t v12 = OUTLINED_FUNCTION_27_3();
    type metadata accessor for NSObject(v12, a5);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject(a7, a5);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v34;
    uint64_t v13 = v35;
    uint64_t v14 = v36;
    int64_t v15 = v37;
    unint64_t v16 = v38;
    if (v9) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v17 = 0;
    goto LABEL_39;
  }
  int64_t v15 = 0;
  uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v13 = a4 + 56;
  uint64_t v14 = ~v25;
  uint64_t v26 = -v25;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  else {
    uint64_t v27 = -1;
  }
  unint64_t v16 = v27 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_37;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v17 = 0;
LABEL_39:
    unint64_t v28 = v30;
LABEL_41:
    *unint64_t v28 = v7;
    v28[1] = v13;
    v28[2] = v14;
    v28[3] = v15;
    v28[4] = v16;
    return (void *)v17;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v17 = 0;
  int64_t v31 = (unint64_t)(v14 + 64) >> 6;
  uint64_t v29 = v14;
  while (1)
  {
    if (v7 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      type metadata accessor for NSObject(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v20 = v33;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v33) {
        goto LABEL_40;
      }
      goto LABEL_23;
    }
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v15 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v21 >= v31)
    {
      unint64_t v16 = 0;
      goto LABEL_40;
    }
    unint64_t v22 = *(void *)(v13 + 8 * v21);
    if (v22) {
      goto LABEL_21;
    }
    int64_t v23 = v15 + 2;
    if (v15 + 2 >= v31)
    {
      unint64_t v16 = 0;
      ++v15;
      goto LABEL_40;
    }
    unint64_t v22 = *(void *)(v13 + 8 * v23);
    if (!v22)
    {
      if (v15 + 3 >= v31) {
        goto LABEL_44;
      }
      unint64_t v22 = *(void *)(v13 + 8 * (v15 + 3));
      if (v22)
      {
        int64_t v21 = v15 + 3;
        goto LABEL_21;
      }
      int64_t v23 = v15 + 4;
      if (v15 + 4 >= v31)
      {
        unint64_t v16 = 0;
        v15 += 3;
        goto LABEL_40;
      }
      unint64_t v22 = *(void *)(v13 + 8 * v23);
      if (!v22)
      {
        int64_t v21 = v15 + 5;
        if (v15 + 5 >= v31)
        {
LABEL_44:
          unint64_t v16 = 0;
          int64_t v15 = v23;
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(v13 + 8 * v21);
        if (!v22)
        {
          int64_t v24 = v15 + 6;
          while (v24 < v31)
          {
            unint64_t v22 = *(void *)(v13 + 8 * v24++);
            if (v22)
            {
              int64_t v21 = v24 - 1;
              goto LABEL_21;
            }
          }
          unint64_t v16 = 0;
          int64_t v15 = v31 - 1;
          goto LABEL_40;
        }
        goto LABEL_21;
      }
    }
    int64_t v21 = v23;
LABEL_21:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v21 << 6);
    int64_t v15 = v21;
LABEL_22:
    uint64_t result = *(id *)(*(void *)(v7 + 48) + 8 * v19);
    id v20 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_23:
    ++v17;
    *v9++ = v20;
    if (v17 == a3)
    {
      uint64_t v17 = a3;
LABEL_40:
      uint64_t v14 = v29;
      unint64_t v28 = v30;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v10 = a2;
  uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v26 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    unint64_t v19 = (void *)(*(void *)(a4 + 56) + 40 * v15);
    uint64_t v20 = v19[1];
    uint64_t v21 = v19[2];
    uint64_t v22 = v19[3];
    int64_t v23 = (void *)v19[4];
    *int64_t v10 = *v19;
    v10[1] = v20;
    v10[2] = v21;
    v10[3] = v22;
    v10[4] = v23;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v24 = v23;
      goto LABEL_38;
    }
    v10 += 5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = v23;
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v25;
      uint64_t result = v26;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    BOOL v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    BOOL v7 = 0;
LABEL_14:
    uint64_t v8 = a4;
LABEL_15:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v8;
    *(unsigned char *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a4;
  while (1)
  {
    BOOL v7 = v6 == a5;
    if (v6 != a5) {
      break;
    }
    uint64_t v8 = 0;
LABEL_8:
    *(void *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5) {
      goto LABEL_15;
    }
    ++v5;
    BOOL v9 = v6 == a5;
    uint64_t v6 = v8;
    if (v9)
    {
      BOOL v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  uint64_t v8 = v6 + 1;
  if (!__OFADD__(v6, 1)) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [UIWindow] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  return 0;
}

uint64_t static CNContact.contactsByHandle(handles:knownContacts:)(id *a1, uint64_t isUniquelyReferenced_nonNull_native)
{
  unint64_t v3 = (unint64_t)a1;
  if ((unint64_t)a1 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v4 = *(void *)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = (void *)MEMORY[0x1E4FBC868];
  if (!v4)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  uint64_t v34 = isUniquelyReferenced_nonNull_native;
  unint64_t v35 = v3 & 0xC000000000000001;
  uint64_t v6 = 4;
  int64_t v33 = (id *)v3;
  while (1)
  {
    if (v35) {
      id v7 = (id)MEMORY[0x1C87744F0](v6 - 4, v3);
    }
    else {
      id v7 = *(id *)(v3 + 8 * v6);
    }
    uint64_t v8 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    id v9 = v7;
    id v10 = objc_msgSend(v9, sel_value);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (*(void *)(isUniquelyReferenced_nonNull_native + 16)
      && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13), (v15 & 1) != 0))
    {
      unint64_t v3 = *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v14);
      int64_t v16 = (id *)(id)v3;
    }
    else
    {
      unint64_t v3 = 0;
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = v5;
    uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    uint64_t v19 = v5[2];
    BOOL v20 = (v18 & 1) == 0;
    Swift::Int v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_24;
    }
    unint64_t v22 = v17;
    char v23 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TUHandle, CNContact?>);
    Swift::Bool v24 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21);
    isUniquelyReferenced_nonNull_native = v34;
    if (v24) {
      break;
    }
LABEL_17:
    uint64_t v5 = v36;
    if (v23)
    {
      uint64_t v27 = v36[7];

      *(void *)(v27 + 8 * v22) = v3;
    }
    else
    {
      v36[(v22 >> 6) + 8] |= 1 << v22;
      *(void *)(v36[6] + 8 * v22) = v9;
      *(void *)(v36[7] + 8 * v22) = v3;
      uint64_t v28 = v36[2];
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_25;
      }
      v36[2] = v30;
      id v31 = v9;
    }

    swift_bridgeObjectRelease();
    ++v6;
    unint64_t v3 = (unint64_t)v33;
    if (v8 == v4) {
      goto LABEL_22;
    }
  }
  uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
  if ((v23 & 1) == (v26 & 1))
  {
    unint64_t v22 = v25;
    goto LABEL_17;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v38 = 0;
    uint64_t v3 = 0;
    int64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    specialized _NativeDictionary.makeIterator()(v43, a2);
    unint64_t v6 = v43[0];
    uint64_t v38 = v43[1];
    uint64_t v3 = v43[2];
    int64_t v4 = v43[3];
    unint64_t v5 = v43[4];
  }
  swift_bridgeObjectRetain();
  int64_t v37 = (unint64_t)(v3 + 64) >> 6;
  for (i = v6; ; unint64_t v6 = i)
  {
    int64_t v41 = v4;
    if ((v6 & 0x8000000000000000) != 0)
    {
      if (!__CocoaDictionary.Iterator.next()()) {
        goto LABEL_37;
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v9 = v44;
      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v10 = v44;
      swift_unknownObjectRelease();
      uint64_t v7 = v5;
      if (!v9) {
        goto LABEL_37;
      }
    }
    else
    {
      if (v5)
      {
        uint64_t v7 = (v5 - 1) & v5;
        unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
      }
      else
      {
        int64_t v11 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_40;
        }
        if (v11 >= v37) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v38 + 8 * v11);
        ++v4;
        if (!v12)
        {
          int64_t v4 = v11 + 1;
          if (v11 + 1 >= v37) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v38 + 8 * v4);
          if (!v12)
          {
            int64_t v4 = v11 + 2;
            if (v11 + 2 >= v37) {
              goto LABEL_37;
            }
            unint64_t v12 = *(void *)(v38 + 8 * v4);
            if (!v12)
            {
              int64_t v4 = v11 + 3;
              if (v11 + 3 >= v37) {
                goto LABEL_37;
              }
              unint64_t v12 = *(void *)(v38 + 8 * v4);
              if (!v12)
              {
                int64_t v4 = v11 + 4;
                if (v11 + 4 >= v37) {
                  goto LABEL_37;
                }
                unint64_t v12 = *(void *)(v38 + 8 * v4);
                if (!v12)
                {
                  int64_t v13 = v41 + 6;
                  while (v13 < v37)
                  {
                    unint64_t v12 = *(void *)(v38 + 8 * v13++);
                    if (v12)
                    {
                      int64_t v4 = v13 - 1;
                      goto LABEL_26;
                    }
                  }
LABEL_37:
                  outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
                  return (uint64_t)a1;
                }
              }
            }
          }
        }
LABEL_26:
        uint64_t v7 = (v12 - 1) & v12;
        unint64_t v8 = __clz(__rbit64(v12)) + (v4 << 6);
      }
      unint64_t v14 = *(void **)(*(void *)(v6 + 56) + 8 * v8);
      id v9 = *(id *)(*(void *)(v6 + 48) + 8 * v8);
      id v10 = v14;
      if (!v9) {
        goto LABEL_37;
      }
    }
    int64_t v40 = v4;
    unint64_t v42 = v7;
    char v15 = v9;
    id v16 = objc_msgSend(v9, sel_value);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    id v20 = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v44 = a1;
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
    uint64_t v24 = a1[2];
    BOOL v25 = (v23 & 1) == 0;
    Swift::Int v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    unint64_t v27 = v22;
    char v28 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CNContact>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
    {
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_41;
      }
      unint64_t v27 = v29;
    }
    a1 = v44;
    if (v28)
    {
      uint64_t v31 = v44[7];

      *(void *)(v31 + 8 * v27) = v20;
    }
    else
    {
      v44[(v27 >> 6) + 8] |= 1 << v27;
      uint64_t v32 = (uint64_t *)(a1[6] + 16 * v27);
      *uint64_t v32 = v17;
      v32[1] = v19;
      *(void *)(a1[7] + 8 * v27) = v20;
      uint64_t v33 = a1[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_39;
      }
      a1[2] = v35;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v4 = v40;
    unint64_t v5 = v42;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static CNContact.contactsByHandle(handles:knownContacts:)(id *a1, uint64_t a2)
{
  uint64_t v3 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC868], a2);
  uint64_t v4 = static CNContact.contactsByHandle(handles:knownContacts:)(a1, v3);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_5_30();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  OUTLINED_FUNCTION_11_13();
  type metadata accessor for UUID();
  unint64_t v1 = (void (*)(uint64_t))MEMORY[0x1F418BB38];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB38]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v2, MEMORY[0x1F418BC30], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v1, MEMORY[0x1F418BD10]);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  OUTLINED_FUNCTION_11_13();
  type metadata accessor for IndexPath();
  unint64_t v1 = (void (*)(uint64_t))MEMORY[0x1F418BF50];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1F418BF50]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v2, MEMORY[0x1F418BF68], &lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, v1, MEMORY[0x1F418C008]);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 & 1;
  Hasher.init(_seed:)();
  MultiwayViewConstraintsController.OverallLayoutState.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v5, a2, a3 & 0x10101FF01FFFFLL, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  Swift::Int v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::UInt16 v2;
  Swift::Int v3;
  uint64_t vars8;

  OUTLINED_FUNCTION_5_30();
  Swift::Int v2 = MessageType.rawValue.getter();
  Hasher._combine(_:)(v2);
  uint64_t v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  Swift::Int v2;
  uint64_t vars8;

  OUTLINED_FUNCTION_5_30();
  ObjectTracker.RuleGroup.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  OUTLINED_FUNCTION_5_30();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

{
  Swift::Int v0;

  OUTLINED_FUNCTION_5_30();
  String.hash(into:)();
  uint64_t v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_5_30();
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  char v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v3);
}

{
  Swift::Int v2;
  uint64_t vars8;

  char v2 = specialized RawRepresentable<>._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t result = a4 & ~v7;
  if ((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v9 = ~v7;
    uint64_t v10 = *(void *)(v4 + 48);
    uint64_t v11 = HIDWORD(a3) & 1;
    uint64_t v12 = (a3 >> 16) & 1;
    while (1)
    {
      int64_t v13 = (unsigned __int8 *)(v10 + 24 * result);
      if (((a1 ^ *v13) & 1) != 0 || *((void *)v13 + 1) != a2) {
        goto LABEL_39;
      }
      int v14 = v13[16];
      unsigned int v15 = v13[17];
      int v16 = v13[18];
      int v17 = v13[19];
      int v18 = v13[20];
      int v19 = v13[21];
      int v20 = v13[22];
      if (v14)
      {
        if (v14 == 1)
        {
          if (a3 != 1) {
            goto LABEL_39;
          }
        }
        else if (a3 != 2)
        {
          goto LABEL_39;
        }
      }
      else if ((_BYTE)a3)
      {
        goto LABEL_39;
      }
      if (!(v15 >> 6)) {
        break;
      }
      if (v15 >> 6 == 1)
      {
        if ((BYTE1(a3) & 0xC0) != 0x40) {
          goto LABEL_39;
        }
        BOOL v21 = ((a3 >> 8) & 0x3F) == (v15 & 0x3F);
        goto LABEL_18;
      }
      int v23 = v12 ^ v16;
      int v24 = v11 ^ v18;
      if (v15 == 128) {
        BOOL v25 = BYTE1(a3) == 128;
      }
      else {
        BOOL v25 = BYTE1(a3) == 129;
      }
      if (!v25) {
        int v23 = 1;
      }
      if (v17 == BYTE3(a3)) {
        int v26 = v23;
      }
      else {
        int v26 = 1;
      }
      if ((v26 | v24)) {
        goto LABEL_39;
      }
LABEL_35:
      int v27 = HIWORD(a3) & 1 ^ v20;
      if (((a3 >> 40) & 1) == v19 && v27 == 0) {
        return result;
      }
LABEL_39:
      unint64_t result = (result + 1) & v9;
      if (((*(void *)(v6 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        return result;
      }
    }
    if (BYTE1(a3) >= 0x40u) {
      goto LABEL_39;
    }
    BOOL v21 = v15 == BYTE1(a3);
LABEL_18:
    int v22 = v21;
    if (!v22 || ((v12 ^ v16) & 1) != 0 || v17 != BYTE3(a3) || ((v11 ^ v18) & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  unint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x1C8774410](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  int v6;
  uint64_t v7;
  int v8;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v6 = (unsigned __int16)MessageType.rawValue.getter();
    if (v6 != (unsigned __int16)MessageType.rawValue.getter())
    {
      uint64_t v7 = ~v4;
      for (unint64_t i = (i + 1) & v7; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v7)
      {
        uint64_t v8 = (unsigned __int16)MessageType.rawValue.getter();
        if (v8 == (unsigned __int16)MessageType.rawValue.getter()) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  char v18;
  uint64_t v20;

  unint64_t v5 = (int *)type metadata accessor for ObjectTracker.RuleGroup(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    char v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      outlined init with copy of ObjectTracker.RuleGroup(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      if (static UUID.== infix(_:_:)())
      {
        uint64_t v13 = v5[5];
        uint64_t v14 = *(void *)&v8[v13];
        uint64_t v15 = *(void *)&v8[v13 + 8];
        uint64_t v16 = (void *)(a1 + v13);
        int v17 = v14 == *v16 && v15 == v16[1];
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          specialized static Set.== infix(_:_:)(*(void *)&v8[v5[6]], *(void *)(a1 + v5[6]));
          if ((v18 & 1) != 0 && v8[v5[7]] == *(unsigned char *)(a1 + v5[7])) {
            break;
          }
        }
      }
      outlined destroy of ObjectTracker.RuleGroup((uint64_t)v8);
      uint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    outlined destroy of ObjectTracker.RuleGroup((uint64_t)v8);
  }
  return v10;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  int v24 = a5;
  uint64_t v25 = a6;
  int v23 = a4;
  uint64_t v7 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v8 = a2 & ~v7;
  uint64_t v20 = v6 + 64;
  uint64_t v21 = a1;
  if ((*(void *)(v6 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v19 = ~v7;
    uint64_t v9 = a3(0);
    uint64_t v10 = v9;
    char v11 = *(void **)(v9 - 8);
    uint64_t v12 = (void (*)(char *, unint64_t, uint64_t))v11[2];
    uint64_t v14 = v11[8];
    uint64_t v13 = v11[9];
    uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v11 + 1);
    do
    {
      MEMORY[0x1F4188790](v9);
      v12((char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(v22 + 48) + v13 * v8, v10);
      lazy protocol witness table accessor for type UUID and conformance UUID(v23, v24);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v9 = (*v15)((char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      if (v16) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v19;
    }
    while (((*(void *)(v20 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned char *)(v7 + result) != (a1 & 1))
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (((*(unsigned char *)(v7 + result) ^ a1) & 1) == 0) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  OUTLINED_FUNCTION_6_21();
  if (v6)
  {
    type metadata accessor for NSObject(0, v5);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * v4);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v3;
      uint64_t v4 = (v4 + 1) & v9;
      OUTLINED_FUNCTION_6_21();
      if (v10)
      {
        do
        {
          id v11 = *(id *)(*(void *)(v2 + 48) + 8 * v4);
          char v12 = static NSObject.== infix(_:_:)();

          if (v12) {
            break;
          }
          uint64_t v4 = (v4 + 1) & v9;
          OUTLINED_FUNCTION_6_21();
        }
        while ((v13 & 1) != 0);
      }
    }
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    char v6 = ~v4;
    uint64_t v7 = *(void *)(v2 + 48);
    do
    {
      if (*(unsigned char *)(v7 + result))
      {
        if (*(unsigned char *)(v7 + result) == 1)
        {
          if (a1 == 1) {
            return result;
          }
        }
        else if (a1 == 2)
        {
          return result;
        }
      }
      else if (!a1)
      {
        return result;
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A]())()
{
  uint64_t v1 = OUTLINED_FUNCTION_2_23();
  uint64_t v2 = OUTLINED_FUNCTION_1_40((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_2_23();
  uint64_t v2 = OUTLINED_FUNCTION_1_40((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_2_23();
  uint64_t v2 = OUTLINED_FUNCTION_1_40((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_2_23();
  uint64_t v2 = OUTLINED_FUNCTION_1_40((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_2_23();
  uint64_t v2 = OUTLINED_FUNCTION_1_40((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_2_23();
  uint64_t v2 = OUTLINED_FUNCTION_1_40((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_2_23();
  uint64_t v2 = OUTLINED_FUNCTION_1_40((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = OUTLINED_FUNCTION_0_18(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, v5, v6);
  if (v3) {
    OUTLINED_FUNCTION_7_18();
  }
  else {
    id v7 = OUTLINED_FUNCTION_9_16();
  }
  *uint64_t v2 = v7;
  return Array.subscript.readspecialized ;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = OUTLINED_FUNCTION_0_18(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, v5, v6);
  if (v3) {
    OUTLINED_FUNCTION_7_18();
  }
  else {
    id v7 = swift_retain();
  }
  *uint64_t v2 = v7;
  return Array.subscript.readspecialized ;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  uint64_t v4 = OUTLINED_FUNCTION_0_18(a1, a2);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, v5, v6);
  if (v3) {
    OUTLINED_FUNCTION_7_18();
  }
  else {
    id v7 = OUTLINED_FUNCTION_9_16();
  }
  *uint64_t v2 = v7;
  return Array.subscript.readspecialized ;
}

uint64_t outlined init with copy of ObjectTracker.RuleGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObjectTracker.RuleGroup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ObjectTracker.RuleGroup(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObjectTracker.RuleGroup(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    *(void *)unint64_t result = *(void *)(a3 + 8 * a2 + 32);
    swift_bridgeObjectRetain();
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_bridgeObjectRelease();
}

{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SpringBoardUtilities.isSupported.getter()
{
  return 1;
}

void specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)()
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_5_31();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_5_1();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_12_6();
  OUTLINED_FUNCTION_4_33(v6);
  id v7 = v2;
  id v8 = v3;
  if (OUTLINED_FUNCTION_1_41())
  {
    v11[4] = partial apply for closure #1 in InCallControlsCollectionViewController.inCallControlsBaseCellDidTapButton(_:);
    v11[5] = v1;
    v11[0] = MEMORY[0x1E4F143A8];
    OUTLINED_FUNCTION_13_7(COERCE_DOUBLE(1107296256));
    _OWORD v11[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v11[3] = &block_descriptor_17;
    _Block_copy(v11);
    OUTLINED_FUNCTION_6_22();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v0);
  }
  else
  {
    swift_getObjectType();
    OUTLINED_FUNCTION_11_14();
    uint64_t v9 = OUTLINED_FUNCTION_0_19();
    v10(v9);
    outlined destroy of InCallControlsCollectionViewController.Action(v4);
  }
  swift_unknownObjectRelease();
  swift_release();

  OUTLINED_FUNCTION_28();
}

{
  const void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void v11[6];

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_5_31();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_5_1();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_12_6();
  OUTLINED_FUNCTION_4_33(v6);
  id v7 = v2;
  id v8 = v3;
  if (OUTLINED_FUNCTION_1_41())
  {
    v11[4] = partial apply for closure #1 in InCallControlsCollectionViewController.openMessages(cell:tappedOpenMessagesButton:);
    v11[5] = v1;
    v11[0] = MEMORY[0x1E4F143A8];
    OUTLINED_FUNCTION_13_7(COERCE_DOUBLE(1107296256));
    _OWORD v11[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v11[3] = &block_descriptor_11;
    _Block_copy(v11);
    OUTLINED_FUNCTION_6_22();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v0);
  }
  else
  {
    swift_getObjectType();
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = OUTLINED_FUNCTION_0_19();
    v10(v9);
    outlined destroy of InCallControlsCollectionViewController.Action(v4);
  }
  swift_unknownObjectRelease();
  swift_release();

  OUTLINED_FUNCTION_28();
}

{
  const void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void v11[6];

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_5_31();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_5_1();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_12_6();
  OUTLINED_FUNCTION_4_33(v6);
  id v7 = v2;
  id v8 = v3;
  if (OUTLINED_FUNCTION_1_41())
  {
    v11[4] = partial apply for closure #1 in InCallControlsCollectionViewController.inCallControlsBaseCellDidTapButton(_:);
    v11[5] = v1;
    v11[0] = MEMORY[0x1E4F143A8];
    OUTLINED_FUNCTION_13_7(COERCE_DOUBLE(1107296256));
    _OWORD v11[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v11[3] = &block_descriptor_29_0;
    _Block_copy(v11);
    OUTLINED_FUNCTION_6_22();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v0);
  }
  else
  {
    swift_getObjectType();
    OUTLINED_FUNCTION_11_14();
    uint64_t v9 = OUTLINED_FUNCTION_0_19();
    v10(v9);
    outlined destroy of InCallControlsCollectionViewController.Action(v4);
  }
  swift_unknownObjectRelease();
  swift_release();

  OUTLINED_FUNCTION_28();
}

{
  const void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void v11[6];

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_5_31();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_5_1();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_12_6();
  OUTLINED_FUNCTION_4_33(v6);
  id v7 = v2;
  id v8 = v3;
  if (OUTLINED_FUNCTION_1_41())
  {
    v11[4] = partial apply for closure #1 in InCallControlsCollectionViewController.shareLinkCell(cell:tappedCopyLinkButton:);
    v11[5] = v1;
    v11[0] = MEMORY[0x1E4F143A8];
    OUTLINED_FUNCTION_13_7(COERCE_DOUBLE(1107296256));
    _OWORD v11[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v11[3] = &block_descriptor_23;
    _Block_copy(v11);
    OUTLINED_FUNCTION_6_22();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v0);
  }
  else
  {
    swift_getObjectType();
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = OUTLINED_FUNCTION_0_19();
    v10(v9);
    outlined destroy of InCallControlsCollectionViewController.Action(v4);
  }
  swift_unknownObjectRelease();
  swift_release();

  OUTLINED_FUNCTION_28();
}

uint64_t specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  void v15[5] = a5;
  v15[6] = a6;
  v15[7] = a7;
  v15[8] = a8;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)a3);
  id v21 = a8;
  swift_unknownObjectRetain();
  id v16 = a7;
  if (static SpringBoardUtilities.checkSpringBoardState(for:)())
  {
    aBlock[4] = partial apply for closure #1 in InCallControlsViewController.handle(_:from:completion:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_35_1;
    int v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v17);
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(id, uint64_t, void *, uint64_t, uint64_t))(a6 + 16))(v16, a2, a8, ObjectType, a6);
    if (!a3)
    {
      swift_release();
      uint64_t v19 = 0;
      goto LABEL_7;
    }
    a3(1);
  }
  swift_release();
  uint64_t v19 = (uint64_t)a3;
LABEL_7:
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v19);

  return swift_unknownObjectRelease();
}

uint64_t specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  swift_retain();
  if (OUTLINED_FUNCTION_1_41())
  {
    v8[4] = partial apply for closure #1 in closure #2 in ConversationControlsManager.startScreenShareWithCountdown(completion:);
    v8[5] = v5;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1107296256;
    v8[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v8[3] = &block_descriptor_41;
    uint64_t v6 = _Block_copy(v8);
    swift_retain();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v6);
    swift_release();
    return swift_release();
  }
  else
  {
    a2();
    swift_release();
    return swift_release();
  }
}

uint64_t specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (OUTLINED_FUNCTION_1_41())
  {
    v11[4] = partial apply for closure #1 in LocalParticipantControlsView.handleEffectsTapped();
    v11[5] = a2;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1107296256;
    _OWORD v11[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v11[3] = &block_descriptor_8;
    uint64_t v3 = _Block_copy(v11);
    swift_retain();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v3);
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = (void *)MEMORY[0x1C8776240](a2 + 16);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x1F8))();
      uint64_t v8 = v7;

      if (v6)
      {
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(7, ObjectType, v8);
        OUTLINED_FUNCTION_33_8();
        return swift_unknownObjectRelease();
      }
    }
  }
  return OUTLINED_FUNCTION_33_8();
}

void specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (OUTLINED_FUNCTION_1_41())
  {
    aBlock[4] = partial apply for closure #1 in InCallBannerHostViewController.callDetailsGestureRecognizerTapped();
    aBlock[5] = a2;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_5;
    uint64_t v3 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v3);
LABEL_6:
    OUTLINED_FUNCTION_33_8();
    return;
  }
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](a2 + 16);
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = v4 + OBJC_IVAR____TtC15ConversationKit30InCallBannerHostViewController_inCallBannerDelegate;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v6))
  {
    uint64_t v7 = *(void *)(v6 + 8);

    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
    OUTLINED_FUNCTION_33_8();
    swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_33_8();
  }
}

void static SpringBoardUtilities.requestPasscodeUnlock(_:)(void (*a1)(uint64_t), uint64_t a2)
{
  if (OUTLINED_FUNCTION_1_41())
  {
    v5[4] = a1;
    v5[5] = a2;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 1107296256;
    v5[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v5[3] = &block_descriptor_10;
    uint64_t v4 = _Block_copy(v5);
    swift_retain();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v4);
  }
  else
  {
    a1(1);
  }
}

BOOL static SpringBoardUtilities.isSpringBoardPasscodeLocked.getter()
{
  return OUTLINED_FUNCTION_7_19();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, int a2)
{
  uint64_t v2 = *(void (**)(BOOL))(a1 + 32);
  BOOL v3 = a2 != 0;
  swift_retain();
  v2(v3);
  return swift_release();
}

BOOL static SpringBoardUtilities.checkSpringBoardState(for:)()
{
  state64[1] = *MEMORY[0x1E4F143B8];
  int out_token = 0;
  uint64_t v0 = String.utf8CString.getter();
  uint32_t v1 = notify_register_check((const char *)(v0 + 32), &out_token);
  swift_release();
  if (v1)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationKit);
    BOOL v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    state64[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    LODWORD(v15) = v1;
    uint64_t v7 = String.init<A>(reflecting:)();
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)state64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v9 = "Unable to get token to check if SpringBoard is passcode locked: uint64_t result = %s";
LABEL_11:
    _os_log_impl(&dword_1C2F90000, v3, v4, v9, v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v6, -1, -1);
    MEMORY[0x1C87760E0](v5, -1, -1);
LABEL_12:

    return 0;
  }
  state64[0] = 0;
  if (notify_get_state(out_token, state64))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationKit);
    BOOL v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v9 = "Unable to get SpringBoard passcode lock state: uint64_t result = %s";
    goto LABEL_11;
  }
  return state64[0] != 0;
}

BOOL static SpringBoardUtilities.isShowingLockScreenOrCoverSheetUI.getter()
{
  return OUTLINED_FUNCTION_7_19();
}

uint64_t SpringBoardUtilities.deinit()
{
  return v0;
}

uint64_t SpringBoardUtilities.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SpringBoardUtilities.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SpringBoardUtilities.init()()
{
  return v0;
}

uint64_t type metadata accessor for SpringBoardUtilities()
{
  return self;
}

uint64_t method lookup function for SpringBoardUtilities(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SpringBoardUtilities);
}

uint64_t dispatch thunk of SpringBoardUtilities.isSupported.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of SpringBoardUtilities.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

void partial apply for closure #1 in InCallBannerHostViewController.callDetailsGestureRecognizerTapped()(char a1)
{
  closure #1 in InCallBannerHostViewController.callDetailsGestureRecognizerTapped()(a1, v1);
}

void partial apply for closure #1 in LocalParticipantControlsView.handleEffectsTapped()(char a1)
{
  closure #1 in LocalParticipantControlsView.handleEffectsTapped()(a1, v1);
}

void partial apply for closure #1 in InCallControlsCollectionViewController.openMessages(cell:tappedOpenMessagesButton:)()
{
}

uint64_t outlined destroy of InCallControlsCollectionViewController.Action(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InCallControlsCollectionViewController.Action(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in InCallControlsCollectionViewController.inCallControlsBaseCellDidTapButton(_:)()
{
}

void partial apply for closure #1 in InCallControlsCollectionViewController.shareLinkCell(cell:tappedCopyLinkButton:)()
{
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1C302ECF4()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InCallControlsViewController.handle(_:from:completion:)(char a1)
{
  return closure #1 in InCallControlsViewController.handle(_:from:completion:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1C302ED60()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in ConversationControlsManager.startScreenShareWithCountdown(completion:)(char a1)
{
  closure #1 in closure #2 in ConversationControlsManager.startScreenShareWithCountdown(completion:)(a1, *(void (**)(void))(v1 + 16));
}

uint64_t static ViewBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

BOOL static SyncedScreeningAlphaGradientView.AnimatedState.== infix(_:_:)()
{
  double v0 = SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter();
  if (v0 != SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter()) {
    return 0;
  }
  double v1 = SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.getter();
  if (v1 != SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.getter()) {
    return 0;
  }
  double v2 = SyncedScreeningAlphaGradientView.AnimatedState.unitStart.getter();
  return v2 == SyncedScreeningAlphaGradientView.AnimatedState.unitStart.getter();
}

double SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter();
}

{
  double v1;

  swift_getKeyPath();
  OUTLINED_FUNCTION_3_38();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.setter()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.setter();
}

{
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_38();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t property wrapper backing initializer of SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity()
{
  return Published.init(initialValue:)();
}

double SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.getter()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter();
}

uint64_t SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.setter()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.setter();
}

double SyncedScreeningAlphaGradientView.AnimatedState.unitStart.getter()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter();
}

uint64_t SyncedScreeningAlphaGradientView.AnimatedState.unitStart.setter()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.setter();
}

uint64_t SyncedScreeningAlphaGradientView.AnimatedState.deinit()
{
  uint64_t v1 = v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._minOpacity;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Double>);
  BOOL v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._maxOpacity, v2);
  v3(v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._unitStart, v2);
  return v0;
}

uint64_t SyncedScreeningAlphaGradientView.AnimatedState.__deallocating_deinit()
{
  SyncedScreeningAlphaGradientView.AnimatedState.deinit();
  return swift_deallocClassInstance();
}

uint64_t SyncedScreeningAlphaGradientView.AnimatedState.__allocating_init()()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.init()();
}

uint64_t SyncedScreeningAlphaGradientView.AnimatedState.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Double>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  os_log_type_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._minOpacity;
  property wrapper backing initializer of SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity();
  uint64_t v6 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  v6(v5, v4, v1);
  uint64_t v7 = v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._maxOpacity;
  property wrapper backing initializer of SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity();
  v6(v7, v4, v1);
  uint64_t v8 = v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._unitStart;
  property wrapper backing initializer of SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity();
  v6(v8, v4, v1);
  return v0;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance SyncedScreeningAlphaGradientView<A>.AnimatedState@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SyncedScreeningAlphaGradientView.AnimatedState();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SyncedScreeningAlphaGradientView<A>.AnimatedState()
{
  return static SyncedScreeningAlphaGradientView.AnimatedState.== infix(_:_:)();
}

double SyncedScreeningAlphaGradientView.GradientTracking.defaultUnitPointStart.getter()
{
  return *(double *)v0;
}

void SyncedScreeningAlphaGradientView.GradientTracking.defaultUnitPointStart.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*SyncedScreeningAlphaGradientView.GradientTracking.defaultUnitPointStart.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double SyncedScreeningAlphaGradientView.GradientTracking.unitOffset.getter()
{
  return *(double *)(v0 + 8);
}

void SyncedScreeningAlphaGradientView.GradientTracking.unitOffset.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*SyncedScreeningAlphaGradientView.GradientTracking.unitOffset.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double SyncedScreeningAlphaGradientView.GradientTracking.gradientTransitionUnitLength.getter()
{
  return *(double *)(v0 + 16);
}

void SyncedScreeningAlphaGradientView.GradientTracking.gradientTransitionUnitLength.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*SyncedScreeningAlphaGradientView.GradientTracking.gradientTransitionUnitLength.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double SyncedScreeningAlphaGradientView.GradientTracking.unitTransitionPoint.getter()
{
  return *(double *)(v0 + 24);
}

void SyncedScreeningAlphaGradientView.GradientTracking.unitTransitionPoint.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*SyncedScreeningAlphaGradientView.GradientTracking.unitTransitionPoint.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double SyncedScreeningAlphaGradientView.GradientTracking.endOpacity.getter()
{
  return *(double *)(v0 + 32);
}

void SyncedScreeningAlphaGradientView.GradientTracking.endOpacity.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*SyncedScreeningAlphaGradientView.GradientTracking.endOpacity.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double SyncedScreeningAlphaGradientView.GradientTracking.startOpacity.getter()
{
  return *(double *)(v0 + 40);
}

void SyncedScreeningAlphaGradientView.GradientTracking.startOpacity.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*SyncedScreeningAlphaGradientView.GradientTracking.startOpacity.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double SyncedScreeningAlphaGradientView.GradientTracking.init()@<D0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1C376AEA0;
  a1[1] = xmmword_1C376AEB0;
  double result = 0.0;
  a1[2] = xmmword_1C376AEC0;
  return result;
}

double default argument 0 of SyncedScreeningAlphaGradientView.GradientTracking.init(defaultUnitPointStart:unitOffset:gradientTransitionUnitLength:unitTransitionPoint:endOpacity:startOpacity:)()
{
  return 0.3;
}

double default argument 1 of SyncedScreeningAlphaGradientView.GradientTracking.init(defaultUnitPointStart:unitOffset:gradientTransitionUnitLength:unitTransitionPoint:endOpacity:startOpacity:)()
{
  return 0.0;
}

double default argument 2 of SyncedScreeningAlphaGradientView.GradientTracking.init(defaultUnitPointStart:unitOffset:gradientTransitionUnitLength:unitTransitionPoint:endOpacity:startOpacity:)()
{
  return 0.3;
}

double default argument 3 of SyncedScreeningAlphaGradientView.GradientTracking.init(defaultUnitPointStart:unitOffset:gradientTransitionUnitLength:unitTransitionPoint:endOpacity:startOpacity:)()
{
  return 0.5;
}

double default argument 4 of SyncedScreeningAlphaGradientView.GradientTracking.init(defaultUnitPointStart:unitOffset:gradientTransitionUnitLength:unitTransitionPoint:endOpacity:startOpacity:)()
{
  return 0.0;
}

double default argument 5 of SyncedScreeningAlphaGradientView.GradientTracking.init(defaultUnitPointStart:unitOffset:gradientTransitionUnitLength:unitTransitionPoint:endOpacity:startOpacity:)()
{
  return 1.0;
}

void SyncedScreeningAlphaGradientView.GradientTracking.init(defaultUnitPointStart:unitOffset:gradientTransitionUnitLength:unitTransitionPoint:endOpacity:startOpacity:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
}

uint64_t property wrapper backing initializer of SyncedScreeningAlphaGradientView.positionalData()
{
  type metadata accessor for PositionalData();
  lazy protocol witness table accessor for type PositionalData and conformance PositionalData();
  return ObservedObject.init(wrappedValue:)();
}

uint64_t SyncedScreeningAlphaGradientView.positionalData.getter()
{
  return swift_retain();
}

uint64_t key path getter for SyncedScreeningAlphaGradientView.positionalData : <A>SyncedScreeningAlphaGradientView<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SyncedScreeningAlphaGradientView.positionalData.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SyncedScreeningAlphaGradientView.positionalData : <A>SyncedScreeningAlphaGradientView<A>()
{
  uint64_t v0 = swift_retain();
  return SyncedScreeningAlphaGradientView.positionalData.setter(v0);
}

uint64_t SyncedScreeningAlphaGradientView.positionalData.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*SyncedScreeningAlphaGradientView.positionalData.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SyncedScreeningAlphaGradientView.$positionalData.getter()
{
  type metadata accessor for PositionalData();
  lazy protocol witness table accessor for type PositionalData and conformance PositionalData();
  return ObservedObject.projectedValue.getter();
}

unint64_t lazy protocol witness table accessor for type PositionalData and conformance PositionalData()
{
  unint64_t result = lazy protocol witness table cache variable for type PositionalData and conformance PositionalData;
  if (!lazy protocol witness table cache variable for type PositionalData and conformance PositionalData)
  {
    type metadata accessor for PositionalData();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PositionalData and conformance PositionalData);
  }
  return result;
}

uint64_t property wrapper backing initializer of SyncedScreeningAlphaGradientView.viewState()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t implicit closure #2 in implicit closure #1 in variable initialization expression of SyncedScreeningAlphaGradientView._viewState()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.__allocating_init()();
}

double SyncedScreeningAlphaGradientView.init(uiView:positionalData:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(swift_allocObject() + 16) = a2;
  uint64_t v5 = property wrapper backing initializer of SyncedScreeningAlphaGradientView.viewState();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t v10 = property wrapper backing initializer of SyncedScreeningAlphaGradientView.positionalData();
  *(void *)a3 = a1;
  *(_OWORD *)(a3 + 8) = xmmword_1C376AEA0;
  *(_OWORD *)(a3 + 24) = xmmword_1C376AEB0;
  double result = 0.0;
  *(_OWORD *)(a3 + 40) = xmmword_1C376AEC0;
  *(void *)(a3 + 56) = v10;
  *(void *)(a3 + 64) = v12;
  *(void *)(a3 + 72) = v5;
  *(void *)(a3 + 80) = v7;
  *(unsigned char *)(a3 + 88) = v9 & 1;
  return result;
}

uint64_t sub_1C302F7D8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in variable initialization expression of SyncedScreeningAlphaGradientView._viewState()
{
  return implicit closure #2 in implicit closure #1 in variable initialization expression of SyncedScreeningAlphaGradientView._viewState();
}

uint64_t SyncedScreeningAlphaGradientView.body.getter@<X0>(long long *a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  OUTLINED_FUNCTION_2_25(v2);
  outlined retain of SyncedScreeningAlphaGradientView<A>(v1);
  type metadata accessor for BackgroundView();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _MaskEffect<LinearGradient>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for SyncedScreeningAlphaGradientView.AnimatedState();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v28 = lazy protocol witness table accessor for type _MaskEffect<LinearGradient> and conformance _MaskEffect<A>();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v26 = MEMORY[0x1E4F3CA90];
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = swift_getWitnessTable();
  swift_getWitnessTable();
  *(void *)&long long v29 = GeometryReader.init(content:)();
  *((void *)&v29 + 1) = v3;
  type metadata accessor for GeometryReader();
  uint64_t v4 = swift_getWitnessTable();
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  View.ignoresSafeArea(_:edges:)();
  swift_release();
  uint64_t v5 = swift_allocObject();
  OUTLINED_FUNCTION_2_25(v5);
  outlined retain of SyncedScreeningAlphaGradientView<A>(v1);
  type metadata accessor for ModifiedContent();
  uint64_t v21 = v4;
  uint64_t v22 = MEMORY[0x1E4F3DF38];
  swift_getWitnessTable();
  View.onAppear(perform:)();
  swift_release();
  swift_release();
  uint64_t v6 = v32;
  uint64_t v7 = v34;
  long long v14 = v29;
  uint64_t v15 = v30;
  char v16 = v31;
  uint64_t v17 = v32;
  uint64_t v18 = v33;
  uint64_t v19 = v34;
  uint64_t v20 = v35;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  char v9 = *(void (**)(long long *, long long *, uint64_t))(*(void *)(v8 - 8) + 16);
  v9(&v36, &v14, v8);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v6);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  uint64_t v10 = v39;
  uint64_t v11 = v41;
  long long v29 = v36;
  uint64_t v30 = v37;
  char v31 = v38;
  uint64_t v32 = v39;
  uint64_t v33 = v40;
  uint64_t v34 = v41;
  uint64_t v35 = v42;
  v9(a1, &v29, v8);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v10);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v11);
}

uint64_t closure #1 in SyncedScreeningAlphaGradientView.body.getter@<X0>(uint64_t a1@<X0>, id *a2@<X1>, long long *a3@<X8>)
{
  id v37 = *a2;
  uint64_t v4 = type metadata accessor for SyncedScreeningAlphaGradientView();
  id v5 = v37;
  SyncedScreeningAlphaGradientView.gradient(for:)(a1, v4, v35);
  long long v29 = v35[0];
  long long v30 = v35[1];
  *(void *)&long long v31 = v36;
  type metadata accessor for BackgroundView();
  uint64_t WitnessTable = swift_getWitnessTable();
  lazy protocol witness table accessor for type LinearGradient and conformance LinearGradient();
  View.mask<A>(_:)();
  outlined release of LinearGradient((uint64_t)v35);
  outlined release of BackgroundView<A>(&v37);
  type metadata accessor for SyncedScreeningAlphaGradientView.AnimatedState();
  swift_getWitnessTable();
  StateObject.wrappedValue.getter();
  SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.getter();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _MaskEffect<LinearGradient>);
  type metadata accessor for ModifiedContent();
  uint64_t v21 = WitnessTable;
  unint64_t v22 = lazy protocol witness table accessor for type _MaskEffect<LinearGradient> and conformance _MaskEffect<A>();
  uint64_t v7 = swift_getWitnessTable();
  View.opacity(_:)();
  swift_bridgeObjectRelease();

  static Animation.default.getter();
  uint64_t v20 = StateObject.wrappedValue.getter();
  type metadata accessor for ModifiedContent();
  uint64_t v18 = v7;
  uint64_t v19 = MEMORY[0x1E4F3CA90];
  swift_getWitnessTable();
  swift_getWitnessTable();
  View.animation<A>(_:value:)();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  uint64_t v8 = (void *)v23;
  v14[0] = v23;
  v14[1] = v24;
  v14[2] = v25;
  uint64_t v15 = v26;
  uint64_t v16 = v27;
  uint64_t v17 = v28;
  type metadata accessor for _AnimationModifier();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v10 = *(void (**)(long long *, long long *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(&v29, v14, v9);
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v11 = (void *)v29;
  long long v23 = v29;
  long long v24 = v30;
  long long v25 = v31;
  uint64_t v26 = v32;
  uint64_t v27 = v33;
  uint64_t v28 = v34;
  v10(a3, &v23, v9);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t outlined consume of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in SyncedScreeningAlphaGradientView.body.getter@<X0>(uint64_t a1@<X0>, long long *a2@<X8>)
{
  return closure #1 in SyncedScreeningAlphaGradientView.body.getter(a1, (id *)(v2 + 24), a2);
}

double SyncedScreeningAlphaGradientView.gradient(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void (*v8)(void *__return_ptr, uint64_t);
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  long long v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  void v30[4];
  long long v31;
  long long v32;
  uint64_t v33;
  unsigned char v34[32];
  uint64_t v35;

  uint64_t v4 = v3;
  uint64_t v28 = a1;
  long long v29 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v27 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Color.black.getter();
  uint64_t v26 = *(void *)(a2 + 16);
  type metadata accessor for SyncedScreeningAlphaGradientView.AnimatedState();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_1_42();
  SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.getter();
  swift_release();
  Color.opacity(_:)();
  swift_release();
  static Color.black.getter();
  OUTLINED_FUNCTION_1_42();
  SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter();
  swift_release();
  Color.opacity(_:)();
  swift_release();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v4 + 64) + 176);
  uint64_t v9 = swift_retain();
  v8(v30, v9);
  swift_release();
  outlined init with take of ListAnchor?((uint64_t)v30, (uint64_t)v34);
  if (v35)
  {
    type metadata accessor for CGRect(0);
    swift_retain();
    GeometryProxy.subscript.getter();
    outlined release of ListAnchor?((uint64_t)v30);
    uint64_t v10 = *((double *)&v31 + 1);
    GeometryProxy.size.getter();
    uint64_t v12 = v11;
    outlined release of ListAnchor?((uint64_t)v30);
    char v13 = 1.0 - v10 / v12 + *(double *)(v4 + 16);
  }
  else
  {
    char v13 = *(double *)(v4 + 8);
  }
  if (*(double *)(v4 + 32) <= v13)
  {
    long long v14 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v27, 1, 1, v14);
    type metadata accessor for MainActor();
    outlined retain of SyncedScreeningAlphaGradientView<A>((id *)v4);
    uint64_t v15 = static MainActor.shared.getter();
    uint64_t v16 = (void *)swift_allocObject();
    uint64_t v17 = MEMORY[0x1E4FBCFD8];
    void v16[2] = v15;
    v16[3] = v17;
    v16[4] = v26;
    memcpy(v16 + 5, (const void *)v4, 0x59uLL);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Gradient.Stop>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1C376A6F0;
  swift_retain();
  *(void *)(v18 + 32) = Gradient.Stop.init(color:location:)();
  *(void *)(v18 + 40) = v19;
  swift_retain();
  *(void *)(v18 + 48) = Gradient.Stop.init(color:location:)();
  *(void *)(v18 + 56) = v20;
  swift_retain();
  *(void *)(v18 + 64) = Gradient.Stop.init(color:location:)();
  *(void *)(v18 + 72) = v21;
  swift_retain();
  *(void *)(v18 + 80) = Gradient.Stop.init(color:location:)();
  *(void *)(v18 + 88) = v22;
  static UnitPoint.bottom.getter();
  static UnitPoint.top.getter();
  MEMORY[0x1C8772A40](v18);
  LinearGradient.init(gradient:startPoint:endPoint:)();
  swift_release();
  swift_release();
  double result = *(double *)&v31;
  long long v24 = v32;
  long long v25 = v29;
  *long long v29 = v31;
  v25[1] = v24;
  *((void *)v25 + 4) = v33;
  return result;
}

id *outlined retain of SyncedScreeningAlphaGradientView<A>(id *a1)
{
  id v2 = *a1;
  swift_retain();
  outlined copy of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
  return a1;
}

uint64_t outlined copy of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>()
{
  return swift_retain();
}

uint64_t type metadata accessor for BackgroundView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SyncedScreeningAlphaGradientView.AnimatedState()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _MaskEffect<LinearGradient> and conformance _MaskEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _MaskEffect<LinearGradient> and conformance _MaskEffect<A>;
  if (!lazy protocol witness table cache variable for type _MaskEffect<LinearGradient> and conformance _MaskEffect<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _MaskEffect<LinearGradient>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MaskEffect<LinearGradient> and conformance _MaskEffect<A>);
  }
  return result;
}

uint64_t closure #2 in SyncedScreeningAlphaGradientView.body.getter()
{
  return swift_release();
}

uint64_t objectdestroy_7Tm()
{
  swift_release();
  outlined consume of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SyncedScreeningAlphaGradientView.body.getter()
{
  return closure #2 in SyncedScreeningAlphaGradientView.body.getter();
}

uint64_t outlined init with take of ListAnchor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ListAnchor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in SyncedScreeningAlphaGradientView.gradient(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in SyncedScreeningAlphaGradientView.gradient(for:), v7, v6);
}

uint64_t closure #1 in SyncedScreeningAlphaGradientView.gradient(for:)()
{
  int8x16_t v3 = *(int8x16_t *)(v0 + 24);
  swift_release();
  *(int8x16_t *)(swift_task_alloc() + 16) = vextq_s8(v3, v3, 8uLL);
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1C303076C()
{
  swift_unknownObjectRelease();

  swift_release();
  outlined consume of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:)(uint64_t a1)
{
  uint64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v6 = v1[2];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #1 in SyncedScreeningAlphaGradientView.gradient(for:)(a1, v6, v5, (uint64_t)(v1 + 5), v4);
}

uint64_t partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t outlined release of ListAnchor?(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in SyncedScreeningAlphaGradientView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #2 in SyncedScreeningAlphaGradientView.body.getter(uint64_t a1, uint64_t a2, void (*a3)(double))
{
  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance SyncedScreeningAlphaGradientView<A>@<X0>(long long *a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return SyncedScreeningAlphaGradientView.body.getter(a1);
}

void *sub_1C3030AF0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata instantiation function for SyncedScreeningAlphaGradientView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t destroy for SyncedScreeningAlphaGradientView(id *a1)
{
  swift_release();
  return outlined consume of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
}

uint64_t initializeWithCopy for SyncedScreeningAlphaGradientView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  char v7 = *(unsigned char *)(a2 + 88);
  id v8 = v3;
  swift_retain();
  outlined copy of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = v7;
  return a1;
}

uint64_t assignWithCopy for SyncedScreeningAlphaGradientView(uint64_t a1, void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *a2;
  id v6 = v4;

  *(void *)(a1 + 8) = v2[1];
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v2[3];
  *(void *)(a1 + 32) = v2[4];
  *(void *)(a1 + 40) = v2[5];
  *(void *)(a1 + 48) = v2[6];
  *(void *)(a1 + 56) = v2[7];
  *(void *)(a1 + 64) = v2[8];
  swift_retain();
  swift_release();
  char v7 = v2[9];
  id v8 = v2[10];
  LOBYTE(v2) = *((unsigned char *)v2 + 88);
  outlined copy of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 88) = (_BYTE)v2;
  outlined consume of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
  return a1;
}

void *__swift_memcpy89_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x59uLL);
}

uint64_t assignWithTake for SyncedScreeningAlphaGradientView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v6;
  outlined consume of StateObject<SyncedScreeningAlphaGradientView<A>.AnimatedState>.Storage<A>();
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncedScreeningAlphaGradientView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 89))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncedScreeningAlphaGradientView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for SyncedScreeningAlphaGradientView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata completion function for SyncedScreeningAlphaGradientView.AnimatedState()
{
  type metadata accessor for Published<Double>();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

void type metadata accessor for Published<Double>()
{
  if (!lazy cache variable for type metadata for Published<Double>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Double>);
    }
  }
}

uint64_t type metadata accessor for SyncedScreeningAlphaGradientView.GradientTracking()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3030EC0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata instantiation function for BackgroundView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t base witness table accessor for View in BackgroundView<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for UIViewRepresentable.makeUIView(context:) in conformance BackgroundView<A>(uint64_t a1, uint64_t a2)
{
  return BackgroundView.makeUIView(context:)(a1, *v2, *(void *)(a2 + 16));
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance BackgroundView<A>(uint64_t a1)
{
  return TPNumberPadCharacter.rawValue.getter(a1);
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance BackgroundView<A>()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in SyncedScreeningAlphaGradientView<A>.AnimatedState()
{
  return MEMORY[0x1E4F1ABE8];
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BackgroundView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BackgroundView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F40F9E78](a1, a2, a3, WitnessTable);
}

void protocol witness for View.body.getter in conformance BackgroundView<A>()
{
}

void sub_1C3031288(double *a1@<X8>)
{
  *a1 = SyncedScreeningAlphaGradientView.AnimatedState.unitStart.getter();
}

uint64_t sub_1C30312B4()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.unitStart.setter();
}

void sub_1C30312E0(double *a1@<X8>)
{
  *a1 = SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.getter();
}

uint64_t sub_1C303130C()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.setter();
}

void sub_1C3031338(double *a1@<X8>)
{
  *a1 = SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.getter();
}

uint64_t sub_1C3031364()
{
  return SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.setter();
}

uint64_t partial apply for closure #1 in closure #1 in SyncedScreeningAlphaGradientView.gradient(for:)()
{
  return closure #1 in closure #2 in SyncedScreeningAlphaGradientView.body.getter(*(void *)(v0 + 24), *(void *)(v0 + 16), (void (*)(double))SyncedScreeningAlphaGradientView.AnimatedState.minOpacity.setter);
}

uint64_t partial apply for closure #1 in closure #2 in SyncedScreeningAlphaGradientView.body.getter()
{
  return closure #1 in closure #2 in SyncedScreeningAlphaGradientView.body.getter(*(void *)(v0 + 24), *(void *)(v0 + 16), (void (*)(double))SyncedScreeningAlphaGradientView.AnimatedState.maxOpacity.setter);
}

unint64_t lazy protocol witness table accessor for type LinearGradient and conformance LinearGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient;
  if (!lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient);
  }
  return result;
}

uint64_t outlined release of LinearGradient(uint64_t a1)
{
  return a1;
}

id *outlined release of BackgroundView<A>(id *a1)
{
  return a1;
}

BOOL ConversationControlsAudioRouteMenuButtonProvider.shouldToggleBetweenSpeakerAndReceiver.getter()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_sharedInstance);
  uint64_t v2 = (char **)objc_msgSend(v1, sel_routeController);

  uint64_t v3 = self;
  id v4 = objc_msgSend(v0, sel_sharedInstance);
  id v5 = objc_msgSend(v3, sel_eligibleLagunaDevices_, v4);

  if (v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUNearbyDeviceHandle);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    char v7 = &selRef_ringButton;
    id v8 = objc_msgSend(v2, sel_routes);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TURoute);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62) {
      goto LABEL_43;
    }
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      if (v10 != 2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      id v11 = [v2 v7[420]];
      unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = v2;
      if (v12 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        if (!v13)
        {
LABEL_16:
          swift_bridgeObjectRelease_n();
          if (v6 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();

            swift_bridgeObjectRelease_n();
          }
          else
          {
            uint64_t v19 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRelease();
          }
          return v19 == 0;
        }
      }
      else
      {
        uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v13) {
          goto LABEL_16;
        }
      }
      uint64_t v14 = 4;
      uint64_t v2 = &selRef_ringButton;
      while (1)
      {
        char v7 = (char **)(v14 - 4);
        id v15 = (v12 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1C87744F0](v14 - 4, v12)
            : *(id *)(v12 + 8 * v14);
        uint64_t v16 = v15;
        uint64_t v17 = v14 - 3;
        if (__OFADD__(v7, 1)) {
          break;
        }
        if (objc_msgSend(v15, sel_isSpeaker))
        {
        }
        else
        {
          unsigned __int8 v18 = objc_msgSend(v16, sel_isReceiver);

          if ((v18 & 1) == 0)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease_n();
            return 0;
          }
        }
        ++v14;
        if (v17 == v13) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  id v21 = objc_msgSend(v2, sel_routes);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TURoute);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v23 == 2)
  {
    id v24 = objc_msgSend(v2, sel_routes);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (v25) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v25)
      {
LABEL_24:
        char v7 = (char **)(v6 & 0xC000000000000001);
        uint64_t v26 = 4;
        do
        {
          if (v7) {
            id v27 = (id)MEMORY[0x1C87744F0](v26 - 4, v6);
          }
          else {
            id v27 = *(id *)(v6 + 8 * v26);
          }
          uint64_t v28 = v27;
          uint64_t v29 = v26 - 3;
          if (__OFADD__(v26 - 4, 1)) {
            goto LABEL_42;
          }
          if (objc_msgSend(v27, sel_isSpeaker))
          {
          }
          else
          {
            unsigned __int8 v30 = objc_msgSend(v28, sel_isReceiver);

            if ((v30 & 1) == 0)
            {
              uint64_t v20 = 0;
              goto LABEL_39;
            }
          }
          ++v26;
        }
        while (v29 != v25);
      }
    }
    uint64_t v20 = 1;
LABEL_39:

    swift_bridgeObjectRelease_n();
    return v20;
  }
LABEL_35:

  return 0;
}

id ConversationControlsAudioRouteMenuButtonProvider.makeButton(frame:)()
{
  id v1 = static ConversationControlsButtonFactory.makeButton(frame:provider:)(v0);
  uint64_t v3 = v2;
  id v4 = v1;
  ControlsButtonProvider.button.setter(v1, v3);
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  id v6 = v4;
  swift_retain();
  UIControl.addAction(for:handler:)(64, (uint64_t)partial apply for closure #1 in ConversationControlsAudioRouteMenuButtonProvider.makeButton(frame:), v5);

  swift_release_n();
  return v1;
}

void closure #1 in ConversationControlsAudioRouteMenuButtonProvider.makeButton(frame:)()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (ConversationControlsAudioRouteMenuButtonProvider.shouldToggleBetweenSpeakerAndReceiver.getter())
    {
      id v0 = objc_msgSend(self, sel_sharedInstance);
      id v1 = objc_msgSend(v0, sel_routeController);

      id v2 = objc_msgSend(v1, sel_routes);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TURoute);
      unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v4 = v1;
      id v5 = specialized Sequence.first(where:)(v3, v4);
      swift_bridgeObjectRelease();
      if (v5)
      {
        objc_msgSend(v4, sel_pickRoute_, v5);
      }
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

id specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v7 = v5;
      id v8 = objc_msgSend(a2, sel_pickedRoute);
      if (!v8)
      {

        swift_bridgeObjectRelease();
        return v7;
      }
      unint64_t v9 = v8;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TURoute);
      id v10 = v7;
      char v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        return v7;
      }

      ++v4;
      if (v6 == v3) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:

  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall ConversationControlsAudioRouteMenuButtonProvider.buttonChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<TURoute?>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ControlsButtonProvider.buttonChanged()();
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v0 + 16);
  if (v6)
  {
    id v7 = (void *)v6;
    type metadata accessor for ConversationControlsButton();
    if (swift_dynamicCastClass())
    {
      id v8 = self;
      id v9 = v7;
      id v10 = objc_msgSend(v8, sel_sharedInstance);
      id v11 = objc_msgSend(v10, sel_routeController);

      unsigned int v12 = objc_msgSend(v11, sel_areAuxiliaryRoutesAvailable);
      id v13 = objc_msgSend(self, sel_conversationKit);
      if (v12)
      {
        unint64_t v21 = 0xE000000000000000;
        unint64_t v14 = 0x6F69647541;
        unint64_t v15 = 0xE500000000000000;
      }
      else
      {
        unint64_t v14 = 0xD00000000000001ELL;
        unint64_t v21 = 0xE000000000000000;
        unint64_t v15 = 0x80000001C3794510;
      }
      v16.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v16.value._object = (void *)0xEF74694B6E6F6974;
      v17._uint64_t countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      uint64_t v18 = 0;
      Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v14, v16, (NSBundle)v13, v17, *(Swift::String *)(&v21 - 1));

      ConversationControlsButton.localizedName.setter(v19._countAndFlagsBits, (uint64_t)v19._object);
    }
    outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD00000000000001ALL, 0x80000001C37944F0, v7);
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 136)) + 0x598))();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type Published<TURoute?>.Publisher and conformance Published<A>.Publisher();
    uint64_t v20 = Publisher<>.sink(receiveValue:)();

    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    swift_beginAccess();
    *(void *)(v1 + 48) = v20;
    swift_release();
  }
}

uint64_t closure #1 in ConversationControlsAudioRouteMenuButtonProvider.buttonChanged()(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 16;
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x1C8776240](v4);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      if (v1)
      {
        id v7 = *(void **)(v3 + 136);
        id v8 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x460);
        id v9 = v7;
        id v10 = v1;
        uint64_t v11 = swift_retain();
        unsigned int v12 = (void *)v8(v11);

        if (v12)
        {
          id v13 = objc_msgSend(v12, sel_audioRouteGlyphFor_, v10);
          swift_unknownObjectRelease();
        }
        else
        {
          id v13 = 0;
        }
        ControlsButtonProvider.image.setter(v13);
        swift_release();
        objc_msgSend(v6, sel_setSelected_, objc_msgSend(v10, sel_isReceiver) ^ 1);
      }
      else
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationControls);
        unint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          Swift::String v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::String v17 = 0;
          _os_log_impl(&dword_1C2F90000, v15, v16, "ConversationControlsManager didn't have a route specified, falling back to Speaker.", v17, 2u);
          MEMORY[0x1C87760E0](v17, -1, -1);
        }

        uint64_t v18 = type metadata accessor for UUID();
        uint64_t v19 = *(void *)(v18 - 8);
        MEMORY[0x1F4188790](v18);
        unint64_t v21 = &v31[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
        UUID.init()();
        uint64_t v22 = UUID.uuidString.getter();
        uint64_t v24 = v23;
        (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v18);
        id v25 = objc_allocWithZone(MEMORY[0x1E4FADC28]);
        id v10 = @nonobjc TUMutableRoute.init(uniqueIdentifier:name:)(v22, v24, 0x72656B61657053, 0xE700000000000000);
        objc_msgSend(v10, sel_setSpeaker_, 1);
        uint64_t v26 = *(void **)(v3 + 136);
        id v27 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v26) + 0x460);
        swift_retain();
        uint64_t v28 = v26;
        uint64_t v29 = (void *)v27();

        if (v29)
        {
          id v30 = objc_msgSend(v29, sel_audioRouteGlyphFor_, v10);
          swift_unknownObjectRelease();
        }
        else
        {
          id v30 = 0;
        }
        ControlsButtonProvider.image.setter(v30);
        swift_release();
        objc_msgSend(v6, sel_setSelected_, 1);
      }
    }
    return swift_release();
  }
  return result;
}

id ConversationControlsAudioRouteMenuButtonProvider.menu(for:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Displaying Audio Routing menu", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v1 + 136)) + 0x460))();
  if (!v6) {
    return 0;
  }
  id v7 = objc_msgSend(v6, sel_audioRouteMenu);
  swift_unknownObjectRelease();
  return v7;
}

Swift::Bool __swiftcall ConversationControlsAudioRouteMenuButtonProvider.shouldEnableMenu()()
{
  return !ConversationControlsAudioRouteMenuButtonProvider.shouldToggleBetweenSpeakerAndReceiver.getter();
}

uint64_t ConversationControlsAudioRouteMenuButtonProvider.__allocating_init(controlsManager:context:shape:menuHostViewController:)()
{
  return ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
}

uint64_t ConversationControlsAudioRouteMenuButtonProvider.__deallocating_deinit()
{
  ConversationControlsMenuButtonProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3032638()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationControlsAudioRouteMenuButtonProvider.makeButton(frame:)()
{
}

uint64_t partial apply for closure #1 in ConversationControlsAudioRouteMenuButtonProvider.buttonChanged()(void **a1)
{
  return closure #1 in ConversationControlsAudioRouteMenuButtonProvider.buttonChanged()(a1);
}

unint64_t lazy protocol witness table accessor for type Published<TURoute?>.Publisher and conformance Published<A>.Publisher()
{
  unint64_t result = lazy protocol witness table cache variable for type Published<TURoute?>.Publisher and conformance Published<A>.Publisher;
  if (!lazy protocol witness table cache variable for type Published<TURoute?>.Publisher and conformance Published<A>.Publisher)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Published<TURoute?>.Publisher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Published<TURoute?>.Publisher and conformance Published<A>.Publisher);
  }
  return result;
}

uint64_t type metadata accessor for ConversationControlsAudioRouteMenuButtonProvider()
{
  return self;
}

BOOL static ParticipantVideoLayerType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ParticipantVideoLayerType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ParticipantVideoLayerType.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParticipantVideoLayerType(char *a1, char *a2)
{
  return static ParticipantVideoLayerType.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticipantVideoLayerType()
{
  return ParticipantVideoLayerType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ParticipantVideoLayerType(uint64_t a1)
{
  ParticipantVideoLayerType.hash(into:)(a1, *v1);
}

id RemoteParticipantVideoProvider.token.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 304))();
  uint64_t v2 = v1;
  if (!v1) {
    return 0;
  }
  id v3 = objc_msgSend(v1, sel_streamToken);

  return v3;
}

id RemoteParticipantVideoProvider.hasReceivedVideoFrames.getter()
{
  return RemoteParticipantVideoProvider.hasReceivedVideoFrames.getter((SEL *)&selRef_hasReceivedFirstFrame);
}

id RemoteParticipantVideoProvider.isVideoReconnecting.getter()
{
  return RemoteParticipantVideoProvider.hasReceivedVideoFrames.getter((SEL *)&selRef_isMediaStalled);
}

id RemoteParticipantVideoProvider.hasReceivedVideoFrames.getter(SEL *a1)
{
  OUTLINED_FUNCTION_0_20();
  id v3 = (void *)(*(uint64_t (**)(void))(v2 + 304))();
  if (!v3) {
    return 0;
  }
  os_log_type_t v4 = v3;
  id v5 = [v3 *a1];

  return v5;
}

unint64_t RemoteParticipantVideoProvider.videoAttributeOrientation.getter()
{
  return RemoteParticipantVideoProvider.videoAttributeOrientation.getter((uint64_t (*)(void))RemoteParticipantVideoProvider.remoteVideoAttributes.getter, (SEL *)&selRef_orientation);
}

unint64_t RemoteParticipantVideoProvider.screenAttributeOrientation.getter()
{
  return RemoteParticipantVideoProvider.videoAttributeOrientation.getter((uint64_t (*)(void))RemoteParticipantVideoProvider.remoteScreenAttributes.getter, (SEL *)&selRef_orientation);
}

unint64_t RemoteParticipantVideoProvider.videoAttributeOrientation.getter(uint64_t (*a1)(void), SEL *a2)
{
  id v3 = (void *)a1();
  os_log_type_t v4 = v3;
  if (v3)
  {
    unsigned int v5 = [v3 *a2];

    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t RemoteParticipantVideoProvider.videoAttributeCamera.getter()
{
  return RemoteParticipantVideoProvider.videoAttributeOrientation.getter((uint64_t (*)(void))RemoteParticipantVideoProvider.remoteVideoAttributes.getter, (SEL *)&selRef_camera);
}

void RemoteParticipantVideoProvider.contentsRect.getter(uint64_t a1@<X8>)
{
  id v2 = RemoteParticipantVideoProvider.remoteVideoAttributes.getter();
  id v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, sel_contentsRect);
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = v3 == 0;
}

void RemoteParticipantVideoProvider.scaleFactor.getter()
{
  id v0 = RemoteParticipantVideoProvider.remoteVideoAttributes.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    VideoAttributes.scaleFactor.getter();
  }
}

double VideoAttributes.scaleFactor.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1C87730B0](0x636146656C616373, 0xEB00000000726F74);
  id v2 = objc_msgSend(v0, sel_valueForKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v5, (uint64_t)v6, &demangling cache variable for type metadata for Any?);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v6);
  }
  return 1.0;
}

id RemoteParticipantVideoProvider.videoAspectRatio.getter()
{
  id result = RemoteParticipantVideoProvider.remoteVideoAttributes.getter();
  uint64_t v1 = result;
  if (result)
  {
    objc_msgSend(result, sel_ratio);
    uint64_t v3 = v2;

    return (id)v3;
  }
  return result;
}

void RemoteParticipantVideoProvider._remoteVideoAttributes.setter(uint64_t a1)
{
}

id RemoteParticipantVideoProvider.remoteVideoAttributes.getter()
{
  return RemoteParticipantVideoProvider.remoteVideoAttributes.getter(&OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider__remoteVideoAttributes, (SEL *)&selRef_remoteVideoAttributes);
}

void RemoteParticipantVideoProvider._remoteScreenAttributes.setter(uint64_t a1)
{
}

id RemoteParticipantVideoProvider.remoteScreenAttributes.getter()
{
  return RemoteParticipantVideoProvider.remoteVideoAttributes.getter(&OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider__remoteScreenAttributes, (SEL *)&selRef_remoteScreenAttributes);
}

id RemoteParticipantVideoProvider.remoteVideoAttributes.getter(void *a1, SEL *a2)
{
  uint64_t v3 = *(void **)(v2 + *a1);
  id v4 = v3;
  if (!v3)
  {
    OUTLINED_FUNCTION_0_20();
    uint64_t v7 = (void *)(*(uint64_t (**)(void))(v6 + 304))();
    id v4 = [v7 *a2];
  }
  id v8 = v3;
  return v4;
}

void *RemoteParticipantVideoProvider.portraitVideoAspectRatio.getter()
{
  return RemoteParticipantVideoProvider.portraitVideoAspectRatio.getter((uint64_t (*)(void))RemoteParticipantVideoProvider.remoteVideoAttributes.getter);
}

void *RemoteParticipantVideoProvider.portraitScreenAspectRatio.getter()
{
  return RemoteParticipantVideoProvider.portraitVideoAspectRatio.getter((uint64_t (*)(void))RemoteParticipantVideoProvider.remoteScreenAttributes.getter);
}

void *RemoteParticipantVideoProvider.portraitVideoAspectRatio.getter(uint64_t (*a1)(void))
{
  id result = (void *)a1();
  if (result)
  {
    uint64_t v2 = result;
    if (objc_msgSend(result, sel_orientation) && objc_msgSend(v2, sel_orientation) != 1)
    {

      return 0;
    }
    else
    {
      objc_msgSend(v2, sel_ratio);
      uint64_t v4 = v3;

      return (void *)v4;
    }
  }
  return result;
}

void *RemoteParticipantVideoProvider.landscapeVideoAspectRatio.getter()
{
  return RemoteParticipantVideoProvider.landscapeVideoAspectRatio.getter((uint64_t (*)(void))RemoteParticipantVideoProvider.remoteVideoAttributes.getter);
}

void *RemoteParticipantVideoProvider.landscapeScreenAspectRatio.getter()
{
  return RemoteParticipantVideoProvider.landscapeVideoAspectRatio.getter((uint64_t (*)(void))RemoteParticipantVideoProvider.remoteScreenAttributes.getter);
}

void *RemoteParticipantVideoProvider.landscapeVideoAspectRatio.getter(uint64_t (*a1)(void))
{
  id result = (void *)a1();
  if (result)
  {
    uint64_t v2 = result;
    if (objc_msgSend(result, sel_orientation) == 2
      || objc_msgSend(v2, sel_orientation) == 3)
    {
      objc_msgSend(v2, sel_ratio);
      uint64_t v4 = v3;

      return (void *)v4;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t key path getter for RemoteParticipantVideoProvider.avcRemoteVideoClient : RemoteParticipantVideoProvider@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x130))();
  *a2 = result;
  return result;
}

void key path setter for RemoteParticipantVideoProvider.avcRemoteVideoClient : RemoteParticipantVideoProvider(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  RemoteParticipantVideoProvider.avcRemoteVideoClient.setter(v1);
}

void *RemoteParticipantVideoProvider.avcRemoteVideoClient.getter()
{
  id v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClient);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void RemoteParticipantVideoProvider.avcRemoteVideoClient.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClient);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t RemoteParticipantVideoProvider.isOneToOneModeEnabled.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_oneToOneModeStateProvider;
  uint64_t result = MEMORY[0x1C8776240](v0 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_oneToOneModeStateProvider);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    swift_unknownObjectRelease();
    return v3 & 1;
  }
  return result;
}

char *RemoteParticipantVideoProvider.__allocating_init(streamToken:avcRemoteVideoClientDelegate:oneToOneModeStateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return RemoteParticipantVideoProvider.init(streamToken:avcRemoteVideoClientDelegate:oneToOneModeStateProvider:)(a1, a2, a3, a4);
}

char *RemoteParticipantVideoProvider.init(streamToken:avcRemoteVideoClientDelegate:oneToOneModeStateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_features;
  uint64_t v8 = one-time initialization token for shared;
  id v9 = v4;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = static Features.shared;
  *(void *)&v4[v7] = static Features.shared;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider__remoteVideoAttributes] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider__remoteScreenAttributes] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClient] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_oneToOneModeStateProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  id v11 = v10;

  v27.receiver = v9;
  v27.super_class = (Class)type metadata accessor for RemoteParticipantVideoProvider();
  unsigned int v12 = (char *)objc_msgSendSuper2(&v27, sel_init);
  swift_unknownObjectWeakAssign();
  *(void *)&v12[OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_oneToOneModeStateProvider + 8] = a4;
  swift_unknownObjectWeakAssign();
  id v13 = objc_allocWithZone(MEMORY[0x1E4F47980]);
  uint64_t v14 = v12;
  id v15 = objc_msgSend(v13, sel_initWithStreamToken_delegate_, a1, v14);
  if (!v15)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1C3769620;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1C3769620;
  uint64_t v21 = String.init<A>(reflecting:)();
  uint64_t v23 = v22;
  *(void *)(v20 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v20 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v24 = (void **)&v14[OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClient];
  swift_beginAccess();
  id v25 = *v24;
  void *v24 = v15;

  return v14;
}

uint64_t RemoteParticipantVideoProvider.isPaused.getter()
{
  return RemoteParticipantVideoProvider.isPaused.getter((SEL *)&selRef_isVideoPaused);
}

uint64_t RemoteParticipantVideoProvider.isSuspended.getter()
{
  return RemoteParticipantVideoProvider.isPaused.getter((SEL *)&selRef_isVideoSuspended);
}

id RemoteParticipantVideoProvider.__deallocating_deinit()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C3769620;
  OUTLINED_FUNCTION_0_20();
  (*(void (**)(void))(v2 + 128))();
  if (v3)
  {
    unint64_t v6 = 0xE300000000000000;
    uint64_t v4 = 7104878;
  }
  else
  {
    uint64_t v4 = String.init<A>(reflecting:)();
    unint64_t v6 = v5;
  }
  *(void *)(v1 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v1 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v6;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for RemoteParticipantVideoProvider();
  return objc_msgSendSuper2(&v8, sel_dealloc);
}

Swift::Void __swiftcall RemoteParticipantVideoProvider.setLayer(_:for:)(CALayer _, ConversationKit::ParticipantVideoLayerType a2)
{
  char refcount = _._attr.refcount;
  Class isa = _.super.isa;
  OUTLINED_FUNCTION_0_20();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 304))();
  if (v5)
  {
    id v36 = (id)v5;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 296))() & 1) != 0 && refcount == 2)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationKit);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        id v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v9 = 0;
        _os_log_impl(&dword_1C2F90000, v7, v8, "Using CALayerHost mode for screen", v9, 2u);
        MEMORY[0x1C87760E0](v9, -1, -1);
      }

      objc_msgSend(v36, sel_setVideoLayerHost_forMode_, isa, 2);
    }
    else
    {
      uint64_t v10 = self;
      objc_msgSend(v10, sel_begin);
      [(objc_class *)isa setContentsGravity:*MEMORY[0x1E4F3A3E0]];
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationKit);
      unsigned int v12 = isa;
      id v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(void *)&long long v38 = v16;
        *(_DWORD *)uint64_t v15 = 136315394;
        uint64_t v17 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CALayer);
        uint64_t v19 = v12;
        uint64_t v20 = String.init<A>(reflecting:)();
        *(void *)&v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)&v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v13, v14, "Connecting CALayer to AVCRemoteVideoClient type: %s layer: %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v16, -1, -1);
        MEMORY[0x1C87760E0](v15, -1, -1);
      }
      else
      {
      }
      switch(refcount)
      {
        case 1:
        case 3:
          id v22 = objc_msgSend(v36, sel_slotForMode_, 1);
          if (!v22)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x1C3033CB4);
          }
          uint64_t v23 = v22;
          uint64_t v24 = self;
          id v25 = objc_msgSend(v23, sel_unsignedIntValue);

          if (objc_msgSend(v24, sel_objectForSlot_, v25))
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            outlined init with take of Any(v37, &v38);
            __swift_project_boxed_opaque_existential_1(&v38, v39);
            [(objc_class *)v12 setContents:_bridgeAnythingToObjectiveC<A>(_:)()];
            swift_unknownObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
          }
          uint64_t v26 = 0xD00000000000001FLL;
          objc_super v27 = "RemoteParticipantVideoLayerBack";
          break;
        case 2:
          id v32 = objc_msgSend(v36, sel_slotForMode_, 0);
          if (!v32) {
            goto LABEL_35;
          }
          uint64_t v33 = v32;
          uint64_t v34 = self;
          id v35 = objc_msgSend(v33, sel_unsignedIntValue);

          if (objc_msgSend(v34, sel_objectForSlot_, v35))
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            outlined init with take of Any(v37, &v38);
            __swift_project_boxed_opaque_existential_1(&v38, v39);
            [(objc_class *)v12 setContents:_bridgeAnythingToObjectiveC<A>(_:)()];
            swift_unknownObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
          }
          uint64_t v26 = 0xD000000000000021;
          objc_super v27 = "RemoteParticipantVideoLayerScreen";
          break;
        default:
          id v28 = objc_msgSend(v36, sel_slotForMode_, 0);
          if (!v28) {
            goto LABEL_34;
          }
          uint64_t v29 = v28;
          id v30 = self;
          id v31 = objc_msgSend(v29, sel_unsignedIntValue);

          if (objc_msgSend(v30, sel_objectForSlot_, v31))
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            outlined init with take of Any(v37, &v38);
            __swift_project_boxed_opaque_existential_1(&v38, v39);
            [(objc_class *)v12 setContents:_bridgeAnythingToObjectiveC<A>(_:)()];
            swift_unknownObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
          }
          uint64_t v26 = 0xD000000000000020;
          objc_super v27 = "RemoteParticipantVideoLayerFront";
          break;
      }
      outlined bridged method (mbnn) of @objc CALayer.name.setter(v26, (unint64_t)(v27 - 32) | 0x8000000000000000, v12);
      [(objc_class *)v12 setAllowsDisplayCompositing:1];
      objc_msgSend(v10, sel_commit);
    }
  }
}

uint64_t key path getter for RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled : RemoteParticipantVideoProvider@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled : RemoteParticipantVideoProvider(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A8))(*a1);
}

uint64_t RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.getter()
{
  return RemoteParticipantVideoProvider.isPaused.getter((SEL *)&selRef_isTransformForRemoteVideoOrientationEnabled);
}

uint64_t RemoteParticipantVideoProvider.isPaused.getter(SEL *a1)
{
  OUTLINED_FUNCTION_0_20();
  char v3 = (void *)(*(uint64_t (**)(void))(v2 + 304))();
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  id v5 = [v3 *a1];

  return (uint64_t)v5;
}

void RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.setter(char a1)
{
  OUTLINED_FUNCTION_0_20();
  id v3 = (id)(*(uint64_t (**)(void))(v2 + 304))();
  objc_msgSend(v3, sel_setTransformForRemoteVideoOrientationEnabled_, a1 & 1);
}

void (*RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.getter() & 1;
  return RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.modify;
}

void RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  OUTLINED_FUNCTION_0_20();
  id v3 = (id)(*(uint64_t (**)(void))(v2 + 304))();
  objc_msgSend(v3, sel_setTransformForRemoteVideoOrientationEnabled_, v1);
}

uint64_t RemoteParticipantVideoProvider.isEqual(to:)(uint64_t a1)
{
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
  type metadata accessor for RemoteParticipantVideoProvider();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    id v3 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80))();
    char v6 = v5;
    uint64_t v7 = (*(uint64_t (**)(void))((*v3 & *v11) + 0x80))();
    char v9 = v8;

    if (v6) {
      return v9 & 1;
    }
    else {
      return (v9 & 1) == 0 && v4 == v7;
    }
  }
  return result;
}

id RemoteParticipantVideoProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void RemoteParticipantVideoProvider.init()()
{
}

uint64_t protocol witness for ParticipantVideoProvider.token.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x80))();
}

uint64_t protocol witness for ParticipantVideoProvider.hasReceivedVideoFrames.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x88))() & 1;
}

uint64_t protocol witness for ParticipantVideoProvider.isVideoMirrored.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x90))() & 1;
}

uint64_t protocol witness for ParticipantVideoProvider.isVideoReconnecting.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x98))() & 1;
}

uint64_t protocol witness for ParticipantVideoProvider.videoAttributeOrientation.getter in conformance RemoteParticipantVideoProvider()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xA0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t protocol witness for ParticipantVideoProvider.screenAttributeOrientation.getter in conformance RemoteParticipantVideoProvider()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xA8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t protocol witness for ParticipantVideoProvider.videoAttributeCamera.getter in conformance RemoteParticipantVideoProvider()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xB0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t protocol witness for ParticipantVideoProvider.contentsRect.getter in conformance RemoteParticipantVideoProvider@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **v1) + 0xB8))(v4);
  return outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v4, a1, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t protocol witness for ParticipantVideoProvider.scaleFactor.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xC0))();
}

uint64_t protocol witness for ParticipantVideoProvider.videoAspectRatio.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xC8))();
}

uint64_t protocol witness for ParticipantVideoProvider.portraitVideoAspectRatio.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x110))();
}

uint64_t protocol witness for ParticipantVideoProvider.portraitScreenAspectRatio.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x118))();
}

uint64_t protocol witness for ParticipantVideoProvider.landscapeVideoAspectRatio.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x120))();
}

uint64_t protocol witness for ParticipantVideoProvider.landscapeScreenAspectRatio.getter in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x128))();
}

uint64_t protocol witness for ParticipantVideoProvider.setLayer(_:for:) in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x198))();
}

uint64_t protocol witness for ParticipantVideoProvider.isEqual(to:) in conformance RemoteParticipantVideoProvider()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x1B8))() & 1;
}

void *RemoteParticipantVideoProvider.remoteVideoClientDidReceiveFirstFrame(_:)(uint64_t a1)
{
  uint64_t result = (void *)MEMORY[0x1C8776240](v1 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClientDelegate);
  if (result)
  {
    uint64_t v4 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, sel_remoteVideoClientDidReceiveFirstFrame_)) {
      objc_msgSend(v4, sel_remoteVideoClientDidReceiveFirstFrame_, a1);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *RemoteParticipantVideoProvider.remoteVideoClient(_:videoDidSuspend:)(uint64_t a1, char a2)
{
  return RemoteParticipantVideoProvider.remoteVideoClient(_:videoDidSuspend:)(a1, a2, (SEL *)&selRef_remoteVideoClient_videoDidSuspend_);
}

void *RemoteParticipantVideoProvider.remoteVideoClient(_:remoteVideoDidPause:)(uint64_t a1, char a2)
{
  return RemoteParticipantVideoProvider.remoteVideoClient(_:videoDidSuspend:)(a1, a2, (SEL *)&selRef_remoteVideoClient_remoteVideoDidPause_);
}

void *RemoteParticipantVideoProvider.remoteVideoClient(_:videoDidDegrade:)(uint64_t a1, char a2)
{
  return RemoteParticipantVideoProvider.remoteVideoClient(_:videoDidSuspend:)(a1, a2, (SEL *)&selRef_remoteVideoClient_videoDidDegrade_);
}

void RemoteParticipantVideoProvider.remoteVideoClient(_:networkQualityDidDegrade:info:)(uint64_t a1, char a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_20();
  if ((*(uint64_t (**)(void))(v7 + 128))())
  {
    char v8 = (void *)MEMORY[0x1C8776240](v3 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClientDelegate);
    if (v8)
    {
      char v9 = v8;
      if (objc_msgSend(v8, sel_respondsToSelector_, sel_remoteVideoClient_networkQualityDidDegrade_info_))
      {
        if (a3) {
          v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        }
        else {
          v10.super.Class isa = 0;
        }
        Class isa = v10.super.isa;
        objc_msgSend(v9, sel_remoteVideoClient_networkQualityDidDegrade_info_, a1, a2 & 1);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
}

void *RemoteParticipantVideoProvider.remoteVideoClient(_:remoteMediaDidStall:)(uint64_t a1, char a2)
{
  return RemoteParticipantVideoProvider.remoteVideoClient(_:videoDidSuspend:)(a1, a2, (SEL *)&selRef_remoteVideoClient_remoteMediaDidStall_);
}

void *RemoteParticipantVideoProvider.remoteVideoClient(_:videoDidSuspend:)(uint64_t a1, char a2, SEL *a3)
{
  uint64_t result = (void *)MEMORY[0x1C8776240](v3 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClientDelegate);
  if (result)
  {
    char v8 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a3)) {
      objc_msgSend(v8, *a3, a1, a2 & 1);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *RemoteParticipantVideoProvider.remoteVideoClient(_:remoteVideoAttributesDidChange:)(uint64_t a1, void *a2)
{
  id v5 = a2;
  RemoteParticipantVideoProvider._remoteVideoAttributes.setter((uint64_t)a2);
  uint64_t result = (void *)MEMORY[0x1C8776240](v2 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClientDelegate);
  if (result)
  {
    uint64_t v7 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, sel_remoteVideoClient_remoteVideoAttributesDidChange_))objc_msgSend(v7, sel_remoteVideoClient_remoteVideoAttributesDidChange_, a1, v5); {
    return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

void *RemoteParticipantVideoProvider.remoteVideoClient(_:remoteScreenAttributesDidChange:)(uint64_t a1, void *a2)
{
  id v5 = a2;
  RemoteParticipantVideoProvider._remoteScreenAttributes.setter((uint64_t)a2);
  uint64_t result = (void *)MEMORY[0x1C8776240](v2 + OBJC_IVAR____TtC15ConversationKit30RemoteParticipantVideoProvider_avcRemoteVideoClientDelegate);
  if (result)
  {
    uint64_t v7 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, sel_remoteVideoClient_remoteScreenAttributesDidChange_))objc_msgSend(v7, sel_remoteVideoClient_remoteScreenAttributesDidChange_, a1, v5); {
    return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t RemoteParticipantVideoProvider.debugDescription.getter()
{
  uint64_t v1 = 7104878;
  _StringGuts.grow(_:)(73);
  OUTLINED_FUNCTION_3_39();
  String.append(_:)(v2);
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_4_7();
  (*(void (**)(void))(v4 + 128))();
  if (v5)
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  else
  {
    uint64_t v6 = String.init<A>(reflecting:)();
    unint64_t v8 = v7;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_39();
  v10._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v10);
  OUTLINED_FUNCTION_4_7();
  char v12 = (*(uint64_t (**)(void))(v11 + 136))();
  BOOL v13 = (v12 & 1) == 0;
  if (v12) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (v13) {
    unint64_t v15 = 0xE500000000000000;
  }
  else {
    unint64_t v15 = 0xE400000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0x3D6376612CLL;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  if ((*(uint64_t (**)(void))((*v3 & *v0) + 0x130))())
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for AVCRemoteVideoClient);
    uint64_t v1 = String.init<A>(reflecting:)();
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v19 = (void *)0xE300000000000000;
  }
  v20._uint64_t countAndFlagsBits = v1;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return 0;
}

uint64_t TUVideoDeviceController.token.getter()
{
  return 0;
}

uint64_t TUVideoDeviceController.hasReceivedVideoFrames.getter()
{
  return 1;
}

uint64_t TUVideoDeviceController.videoAttributeOrientation.getter()
{
  unint64_t v1 = TUVideoDeviceController.videoAttributeOrientationFor(_:)((int)objc_msgSend(v0, sel_currentVideoOrientation));
  return OUTLINED_FUNCTION_1_43(v1);
}

uint64_t TUVideoDeviceController.videoAttributeOrientationFor(_:)(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 3) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t TUVideoDeviceController.videoAttributeCamera.getter()
{
  return 0x100000000;
}

__n128 TUVideoDeviceController.contentsRect.getter@<Q0>(__n128 *a1@<X8>)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  a1[1] = result;
  a1[2].n128_u8[0] = 0;
  return result;
}

double TUVideoDeviceController.scaleFactor.getter()
{
  return 1.0;
}

uint64_t TUVideoDeviceController.videoAspectRatio.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_currentVideoOrientation);
  if (v1 >= 4)
  {
    _StringGuts.grow(_:)(62);
    OUTLINED_FUNCTION_3_39();
    v4._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v4);
    objc_msgSend(v0, sel_currentVideoOrientation);
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    objc_msgSend(v0, *off_1E64825D0[v1]);
    return v2;
  }
  return result;
}

double TUVideoDeviceController.portraitVideoAspectRatio.getter()
{
  return TUVideoDeviceController.portraitVideoAspectRatio.getter((SEL *)&selRef_localVideoPortraitAspectRatio);
}

double TUVideoDeviceController.portraitScreenAspectRatio.getter()
{
  return TUVideoDeviceController.portraitVideoAspectRatio.getter((SEL *)&selRef_localScreenPortraitAspectRatio);
}

double TUVideoDeviceController.landscapeVideoAspectRatio.getter()
{
  return TUVideoDeviceController.portraitVideoAspectRatio.getter((SEL *)&selRef_localVideoLandscapeAspectRatio);
}

double TUVideoDeviceController.landscapeScreenAspectRatio.getter()
{
  return TUVideoDeviceController.portraitVideoAspectRatio.getter((SEL *)&selRef_localScreenLandscapeAspectRatio);
}

double TUVideoDeviceController.portraitVideoAspectRatio.getter(SEL *a1)
{
  [v1 *a1];
  return result;
}

Swift::Void __swiftcall TUVideoDeviceController.setLayer(_:for:)(CALayer _, ConversationKit::ParticipantVideoLayerType a2)
{
  uint64_t v3 = v2;
  char refcount = _._attr.refcount;
  Class isa = _.super.isa;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 632))())
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t v6 = &selRef_setLocalFrontLayerHost_;
    unint64_t v7 = &selRef_setLocalBackLayerHost_;
  }
  else
  {
    uint64_t v6 = &selRef_setLocalFrontLayer_;
    unint64_t v7 = &selRef_setLocalBackLayer_;
  }
  unint64_t v8 = self;
  objc_msgSend(v8, sel_begin);
  [(objc_class *)isa setContentsGravity:*MEMORY[0x1E4F3A3E0]];
  if (refcount == 1) {
    unint64_t v9 = (SEL *)v7;
  }
  else {
    unint64_t v9 = (SEL *)v6;
  }
  objc_msgSend(v3, *v9, isa);
  objc_msgSend(v8, sel_commit);
}

id TUVideoDeviceController.isEqual(to:)(uint64_t a1)
{
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticipantVideoProvider);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUVideoDeviceController);
  if (!swift_dynamicCast()) {
    return 0;
  }
  uint64_t v2 = v6;
  v5.receiver = v1;
  v5.super_class = (Class)MEMORY[0x1E4FADC98];
  id v3 = objc_msgSendSuper2(&v5, sel_isEqual_, v6);

  return v3;
}

uint64_t protocol witness for ParticipantVideoProvider.token.getter in conformance TUVideoDeviceController()
{
  return 0;
}

uint64_t protocol witness for ParticipantVideoProvider.videoAttributeOrientation.getter in conformance TUVideoDeviceController()
{
  unint64_t v0 = TUVideoDeviceController.videoAttributeOrientation.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t protocol witness for ParticipantVideoProvider.screenAttributeOrientation.getter in conformance TUVideoDeviceController(uint64_t a1, uint64_t a2)
{
  return protocol witness for ParticipantVideoProvider.screenAttributeOrientation.getter in conformance TUVideoDeviceController(a1, a2, TUVideoDeviceController.screenAttributeOrientation.getter);
}

uint64_t protocol witness for ParticipantVideoProvider.videoAttributeCamera.getter in conformance TUVideoDeviceController(uint64_t a1, uint64_t a2)
{
  return protocol witness for ParticipantVideoProvider.screenAttributeOrientation.getter in conformance TUVideoDeviceController(a1, a2, TUVideoDeviceController.videoAttributeCamera.getter);
}

uint64_t protocol witness for ParticipantVideoProvider.screenAttributeOrientation.getter in conformance TUVideoDeviceController(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return OUTLINED_FUNCTION_1_43(v3);
}

uint64_t protocol witness for ParticipantVideoProvider.contentsRect.getter in conformance TUVideoDeviceController@<X0>(uint64_t a1@<X8>)
{
  TUVideoDeviceController.contentsRect.getter(v3);
  return outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v3, a1, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t protocol witness for ParticipantVideoProvider.videoAspectRatio.getter in conformance TUVideoDeviceController()
{
  return TUVideoDeviceController.videoAspectRatio.getter();
}

double protocol witness for ParticipantVideoProvider.portraitVideoAspectRatio.getter in conformance TUVideoDeviceController()
{
  return TUVideoDeviceController.portraitVideoAspectRatio.getter();
}

double protocol witness for ParticipantVideoProvider.portraitScreenAspectRatio.getter in conformance TUVideoDeviceController()
{
  return TUVideoDeviceController.portraitScreenAspectRatio.getter();
}

double protocol witness for ParticipantVideoProvider.landscapeVideoAspectRatio.getter in conformance TUVideoDeviceController()
{
  return TUVideoDeviceController.landscapeVideoAspectRatio.getter();
}

double protocol witness for ParticipantVideoProvider.landscapeScreenAspectRatio.getter in conformance TUVideoDeviceController()
{
  return TUVideoDeviceController.landscapeScreenAspectRatio.getter();
}

void protocol witness for ParticipantVideoProvider.setLayer(_:for:) in conformance TUVideoDeviceController(CALayer a1@<0:X0, 8:X1, 16:X2, 24:X3>, ConversationKit::ParticipantVideoLayerType a2@<W4>)
{
}

unint64_t protocol witness for ParticipantVideoProvider.isEqual(to:) in conformance TUVideoDeviceController(uint64_t a1)
{
  return (unint64_t)TUVideoDeviceController.isEqual(to:)(a1) & 1;
}

uint64_t type metadata accessor for RemoteParticipantVideoProvider()
{
  return self;
}

void outlined bridged method (mbnn) of @objc CALayer.name.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setName_, v4);
}

unint64_t lazy protocol witness table accessor for type ParticipantVideoLayerType and conformance ParticipantVideoLayerType()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantVideoLayerType and conformance ParticipantVideoLayerType;
  if (!lazy protocol witness table cache variable for type ParticipantVideoLayerType and conformance ParticipantVideoLayerType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantVideoLayerType and conformance ParticipantVideoLayerType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticipantVideoLayerType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C30359D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantVideoLayerType()
{
  return &type metadata for ParticipantVideoLayerType;
}

uint64_t dispatch thunk of OneToOneModeStateProviding.isOneToOneModeEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.token.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.hasReceivedVideoFrames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.isVideoMirrored.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.isVideoReconnecting.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.videoAttributeOrientation.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 40))();
  return OUTLINED_FUNCTION_1_43(v2);
}

uint64_t dispatch thunk of ParticipantVideoProvider.screenAttributeOrientation.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 48))();
  return OUTLINED_FUNCTION_1_43(v2);
}

uint64_t dispatch thunk of ParticipantVideoProvider.videoAttributeCamera.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 56))();
  return OUTLINED_FUNCTION_1_43(v2);
}

uint64_t dispatch thunk of ParticipantVideoProvider.contentsRect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.scaleFactor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.videoAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.portraitVideoAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.portraitScreenAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.landscapeVideoAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.landscapeScreenAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.setLayer(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of ParticipantVideoProvider.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t method lookup function for RemoteParticipantVideoProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteParticipantVideoProvider);
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.token.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.hasReceivedVideoFrames.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isVideoMirrored.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isVideoReconnecting.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.videoAttributeOrientation.getter()
{
  OUTLINED_FUNCTION_0_20();
  unint64_t v1 = (*(uint64_t (**)(void))(v0 + 160))();
  return OUTLINED_FUNCTION_1_43(v1);
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.screenAttributeOrientation.getter()
{
  OUTLINED_FUNCTION_0_20();
  unint64_t v1 = (*(uint64_t (**)(void))(v0 + 168))();
  return OUTLINED_FUNCTION_1_43(v1);
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.videoAttributeCamera.getter()
{
  OUTLINED_FUNCTION_0_20();
  unint64_t v1 = (*(uint64_t (**)(void))(v0 + 176))();
  return OUTLINED_FUNCTION_1_43(v1);
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.contentsRect.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.scaleFactor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.videoAspectRatio.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.portraitVideoAspectRatio.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.portraitScreenAspectRatio.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.landscapeVideoAspectRatio.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.landscapeScreenAspectRatio.getter()
{
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.avcRemoteVideoClient.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isOneToOneModeEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.__allocating_init(streamToken:avcRemoteVideoClientDelegate:oneToOneModeStateProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 384))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isPaused.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isSuspended.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.setLayer(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isTransformForRemoteVideoOrientationEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of RemoteParticipantVideoProvider.isEqual(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t static CallScreening.EndingAction.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 != 1) {
      return a6 == 2 && !(a5 | a4);
    }
    if (a6 != 1) {
      return 0;
    }
LABEL_6:
    if (a1 != a4 || a2 != a5) {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    return 1;
  }
  if (!a6) {
    goto LABEL_6;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CallScreening.EndingAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CallScreening.EndingAction(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static CallScreening.EndingAction.== infix(_:_:));
}

uint64_t static CallScreening.StateTransition.== infix(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  switch(a3 >> 5)
  {
    case 1:
      if ((a6 & 0xE0) == 0x20) {
        goto LABEL_7;
      }
      return 0;
    case 2:
      if ((a6 & 0xE0) == 0x40) {
        goto LABEL_7;
      }
      return 0;
    case 3:
      if ((a6 & 0xE0) != 0x60) {
        return 0;
      }
      int v8 = a6 & 0x1F;
      if ((a3 & 0x1F) != 0)
      {
        if ((a3 & 0x1F) != 1) {
          return v8 == 2 && !(a5 | a4);
        }
        if (v8 != 1) {
          return 0;
        }
      }
      else if ((a6 & 0x1F) != 0)
      {
        return 0;
      }
      BOOL v11 = a1 == a4 && a2 == a5;
      return v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
    case 4:
      if (a2 | a1 || a3 != 128)
      {
        if ((a6 & 0xE0) != 0x80 || a4 != 1 || a5 != 0) {
          return 0;
        }
      }
      else if ((a6 & 0xE0) != 0x80 || a5 | a4)
      {
        return 0;
      }
      return a6 == 128;
    default:
      if (a6 >= 0x20u) {
        return 0;
      }
LABEL_7:
      if (a1 == a4 && a2 == a5) {
        return 1;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CallScreening.StateTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CallScreening.EndingAction(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static CallScreening.StateTransition.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CallScreening.EndingAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

unint64_t CallScreening.StateTransition.description.getter(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t result = 0x69726577736E612ELL;
  switch(a3 >> 5)
  {
    case 1:
      return result;
    case 2:
      unint64_t result = 0x696E65657263732ELL;
      break;
    case 3:
      unint64_t result = 0x676E69646E652ELL;
      break;
    case 4:
      if ((a2 | a1) == 0 && a3 == 128) {
        unint64_t result = 0x6C616974696E692ELL;
      }
      else {
        unint64_t result = 0x696E657473696C2ELL;
      }
      break;
    default:
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = a1;
      v6._object = (void *)a2;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 10530;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      unint64_t result = 0xD000000000000015;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallScreening.StateTransition()
{
  return CallScreening.StateTransition.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

unint64_t CallScreening.State.description.getter()
{
  outlined init with take of CallScreening.State(v0, (uint64_t)&v8);
  unint64_t v1 = v11;
  unint64_t result = 0x6C616974696E692ELL;
  switch(v11 >> 61)
  {
    case 1uLL:
      return 0xD000000000000019;
    case 2uLL:
      v11 &= 0x1FFFFFFFFFFFFFFFuLL;
      long long v12 = v8;
      long long v13 = v9;
      long long v14 = v10;
      v16[0] = v9;
      uint64_t v7 = 0x676E696B63617274;
      swift_retain();
      outlined retain of String((uint64_t)v16);
      swift_retain();
      swift_retain();
      v3._uint64_t countAndFlagsBits = specialized CallScreeningTrackingState.description.getter();
      String.append(_:)(v3);
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of String((uint64_t)v16);
      goto LABEL_6;
    case 3uLL:
      v11 &= 0x1FFFFFFFFFFFFFFFuLL;
      long long v12 = v8;
      long long v13 = v9;
      *(void *)&long long v14 = v10;
      v16[0] = v8;
      OUTLINED_FUNCTION_6_23();
      swift_retain();
      swift_retain();
      v4._uint64_t countAndFlagsBits = specialized CallScreeningAnsweringState.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      outlined release of String((uint64_t)v16);
      goto LABEL_6;
    case 4uLL:
      v11 &= 0x1FFFFFFFFFFFFFFFuLL;
      long long v13 = v9;
      long long v14 = v10;
      long long v12 = v8;
      uint64_t v15 = v1 & 0x1FFFFFFFFFFFFFFFLL;
      v16[0] = v8;
      OUTLINED_FUNCTION_6_23();
      swift_retain();
      swift_retain();
      swift_retain();
      v5._uint64_t countAndFlagsBits = specialized CallScreeningScreeningState.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      outlined release of String((uint64_t)v16);
      swift_release();
LABEL_6:
      swift_release();
      goto LABEL_8;
    case 5uLL:
      v11 &= 0x1FFFFFFFFFFFFFFFuLL;
      long long v12 = v8;
      long long v13 = v9;
      long long v14 = v10;
      outlined init with take of CallScreening.EndingAction(&v12, (uint64_t)v16);
      uint64_t v7 = 0x20676E69646E652ELL;
      outlined retain of CallScreening.EndingAction((uint64_t)v16);
      swift_retain();
      swift_retain();
      v6._uint64_t countAndFlagsBits = specialized CallScreeningEndingState.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      outlined release of CallScreening.EndingAction((uint64_t)v16);
      swift_release();
LABEL_8:
      swift_release();
      unint64_t result = v7;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallScreening.State()
{
  outlined init with take of CallScreening.State(v0, (uint64_t)v2);
  return CallScreening.State.description.getter();
}

uint64_t CallScreening.State.stateTransition.getter()
{
  outlined init with take of CallScreening.State(v0, (uint64_t)v3);
  uint64_t v1 = v5 >> 61;
  switch(v5 >> 61)
  {
    case 1uLL:
      uint64_t v1 = 1;
      break;
    case 2uLL:
      uint64_t v1 = v4;
      swift_bridgeObjectRetain();
      break;
    case 3uLL:
    case 4uLL:
      uint64_t v1 = v3[0];
      swift_bridgeObjectRetain();
      break;
    case 5uLL:
      OUTLINED_FUNCTION_7_20();
      uint64_t v1 = v3[0];
      outlined copy of CallScreening.EndingAction(v3[0], v3[1], v4);
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t CallScreening.State.stateMachineContainer.getter()
{
  outlined init with take of CallScreening.State(v0, (uint64_t)&v2);
  return swift_retain();
}

BOOL static CallScreening.State.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v45);
  uint64_t v4 = v45[0];
  uint64_t v5 = v45[1];
  unsigned __int8 v6 = v46;
  uint64_t v7 = outlined init with take of CallScreening.State(a1, (uint64_t)&v54);
  switch(v57 >> 61)
  {
    case 1uLL:
      OUTLINED_FUNCTION_5_32();
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      outlined init with take of CallScreening.State(a2, (uint64_t)&v47);
      return v50 >> 61 == 1;
    case 2uLL:
      OUTLINED_FUNCTION_5_32();
      long long v64 = v55;
      uint64_t v10 = *((void *)&v56 + 1);
      OUTLINED_FUNCTION_1_44(v11, (uint64_t)&v47);
      if (v13 != 2)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_release();
        long long v58 = v64;
        outlined release of String((uint64_t)&v58);
        goto LABEL_36;
      }
      unint64_t v50 = v12 & 0x1FFFFFFFFFFFFFFFLL;
      long long v58 = v48;
      uint64_t v14 = *((void *)&v49 + 1);
      OUTLINED_FUNCTION_0_21();
      BOOL v17 = v8 && v15 == v16;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        outlined retain of CallScreening.State((uint64_t *)a1);
        swift_retain();
        outlined retain of String((uint64_t)&v58);
        swift_retain();
        swift_retain();
        BOOL v9 = specialized static CKStateMachineContainer.== infix(_:_:)(v10, v14);
        swift_release();
        outlined release of String((uint64_t)&v58);
        swift_release();
        swift_release();
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        BOOL v9 = 0;
      }
      swift_release();
      outlined release of String((uint64_t)&v51);
      goto LABEL_57;
    case 3uLL:
      OUTLINED_FUNCTION_5_32();
      long long v64 = v54;
      uint64_t v18 = v55;
      OUTLINED_FUNCTION_1_44(v19, (uint64_t)&v47);
      if (v21 != 3)
      {
        long long v58 = v64;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        outlined release of String((uint64_t)&v58);
        goto LABEL_36;
      }
      unint64_t v50 = v20 & 0x1FFFFFFFFFFFFFFFLL;
      long long v58 = v47;
      uint64_t v22 = v48;
      OUTLINED_FUNCTION_0_21();
      BOOL v25 = v8 && v23 == v24;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        outlined retain of CallScreening.State((uint64_t *)a1);
        outlined retain of String((uint64_t)&v58);
        swift_retain();
        swift_retain();
        BOOL v9 = specialized static CKStateMachineContainer.== infix(_:_:)(v18, v22);
        outlined release of String((uint64_t)&v58);
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        BOOL v9 = 0;
      }
      outlined release of String((uint64_t)&v51);
      goto LABEL_57;
    case 4uLL:
      uint64_t v26 = v57 & 0x1FFFFFFFFFFFFFFFLL;
      v57 &= 0x1FFFFFFFFFFFFFFFuLL;
      long long v64 = v54;
      OUTLINED_FUNCTION_1_44(v7, (uint64_t)&v47);
      if (v28 == 4)
      {
        uint64_t v29 = v27 & 0x1FFFFFFFFFFFFFFFLL;
        unint64_t v50 = v27 & 0x1FFFFFFFFFFFFFFFLL;
        long long v58 = v47;
        OUTLINED_FUNCTION_0_21();
        BOOL v32 = v8 && v30 == v31;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          outlined retain of CallScreening.State((uint64_t *)a1);
          outlined retain of String((uint64_t)&v58);
          swift_retain();
          swift_retain();
          swift_retain();
          BOOL v9 = specialized static CKStateMachineContainer.== infix(_:_:)(v26, v29);
          outlined release of String((uint64_t)&v58);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          BOOL v9 = 0;
        }
        outlined release of String((uint64_t)&v51);
        swift_release();
LABEL_57:
        swift_release();
      }
      else
      {
        long long v58 = v64;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        outlined release of String((uint64_t)&v58);
        swift_release();
LABEL_36:
        swift_release();
        BOOL v9 = 0;
      }
      goto LABEL_58;
    case 5uLL:
      OUTLINED_FUNCTION_5_32();
      long long v58 = v54;
      long long v59 = v55;
      long long v60 = v56;
      OUTLINED_FUNCTION_1_44(v33, (uint64_t)&v47);
      if (v35 != 5)
      {
        outlined init with take of CallScreening.EndingAction(&v58, (uint64_t)&v51);
        outlined copy of CallScreening.EndingAction(v4, v5, v6);
        swift_retain();
        swift_retain();
        outlined release of CallScreening.EndingAction((uint64_t)&v51);
        swift_release();
        BOOL v9 = 0;
        goto LABEL_58;
      }
      unint64_t v50 = v34 & 0x1FFFFFFFFFFFFFFFLL;
      long long v51 = v47;
      long long v52 = v48;
      long long v53 = v49;
      outlined init with take of CallScreening.EndingAction(&v51, (uint64_t)v62);
      outlined init with take of CallScreening.EndingAction(&v58, (uint64_t)&v61);
      outlined init with take of CallScreening.EndingAction(&v61, (uint64_t)&v64);
      if (!v65)
      {
        uint64_t v37 = *((void *)&v64 + 1);
        uint64_t v36 = v64;
        OUTLINED_FUNCTION_8_17();
        if (v39)
        {
LABEL_47:
          outlined copy of CallScreening.EndingAction(v4, v5, v6);
          swift_retain();
          swift_retain();
          BOOL v9 = 0;
          goto LABEL_49;
        }
        goto LABEL_39;
      }
      if (v65 == 1)
      {
        uint64_t v37 = *((void *)&v64 + 1);
        uint64_t v36 = v64;
        OUTLINED_FUNCTION_8_17();
        if (v38 != 1) {
          goto LABEL_47;
        }
LABEL_39:
        BOOL v40 = v36 == (void)v63 && v37 == *((void *)&v63 + 1);
        if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      OUTLINED_FUNCTION_8_17();
      if (v41 != 2 || v63 != 0) {
        goto LABEL_47;
      }
LABEL_48:
      uint64_t v42 = *((void *)&v52 + 1);
      uint64_t v43 = *((void *)&v59 + 1);
      outlined retain of CallScreening.State((uint64_t *)a1);
      outlined retain of CallScreening.EndingAction((uint64_t)v62);
      swift_retain();
      swift_retain();
      BOOL v9 = specialized static CKStateMachineContainer.== infix(_:_:)(v43, v42);
      outlined release of CallScreening.EndingAction((uint64_t)v62);
      swift_release();
      swift_release();
LABEL_49:
      outlined release of CallScreening.EndingAction((uint64_t)&v61);
      swift_release();
LABEL_58:
      swift_release();
      return v9;
    default:
      OUTLINED_FUNCTION_5_32();
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      outlined init with take of CallScreening.State(a2, (uint64_t)&v47);
      return v50 >> 61 == 0;
  }
}

uint64_t CallScreening.State.willExit(to:)(uint64_t a1)
{
  CallScreening.State.state.getter((uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, v2, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t *CallScreening.State.state.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of CallScreening.State(v1, (uint64_t)&v32);
  switch(v35 >> 61)
  {
    case 1uLL:
      OUTLINED_FUNCTION_2_26();
      uint64_t v3 = &demangling cache variable for type metadata for CallScreeningListeningState<CKStateMachine<CallScreening.State>>;
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningListeningState<CKStateMachine<CallScreening.State>>);
      uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CallScreeningListeningState<CKStateMachine<CallScreening.State>> and conformance CallScreeningListeningState<A>;
      goto LABEL_4;
    case 2uLL:
      OUTLINED_FUNCTION_2_26();
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningTrackingState<CKStateMachine<CallScreening.State>>);
      uint64_t v31 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CallScreeningTrackingState<CKStateMachine<CallScreening.State>> and conformance CallScreeningTrackingState<A>, &demangling cache variable for type metadata for CallScreeningTrackingState<CKStateMachine<CallScreening.State>>);
      goto LABEL_9;
    case 3uLL:
      OUTLINED_FUNCTION_2_26();
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningAnsweringState<CKStateMachine<CallScreening.State>>);
      uint64_t v31 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CallScreeningAnsweringState<CKStateMachine<CallScreening.State>> and conformance CallScreeningAnsweringState<A>, &demangling cache variable for type metadata for CallScreeningAnsweringState<CKStateMachine<CallScreening.State>>);
      uint64_t v6 = swift_allocObject();
      *(void *)&long long v28 = v6;
      long long v7 = v33;
      *(_OWORD *)(v6 + 16) = v32;
      *(_OWORD *)(v6 + 32) = v7;
      *(void *)(v6 + 48) = v34;
      break;
    case 4uLL:
      OUTLINED_FUNCTION_2_26();
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningScreeningState<CKStateMachine<CallScreening.State>>);
      uint64_t v31 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CallScreeningScreeningState<CKStateMachine<CallScreening.State>> and conformance CallScreeningScreeningState<A>, &demangling cache variable for type metadata for CallScreeningScreeningState<CKStateMachine<CallScreening.State>>);
      BOOL v8 = (_OWORD *)swift_allocObject();
      OUTLINED_FUNCTION_3_40(v8, v9, v10, v11, v12, v13, v14, v15, v28, *((uint64_t *)&v28 + 1), v29, v30, v31, v32, v33, v16);
      *(void *)(v17 + 64) = v35;
      break;
    case 5uLL:
      OUTLINED_FUNCTION_2_26();
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningEndingState<CKStateMachine<CallScreening.State>>);
      uint64_t v31 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CallScreeningEndingState<CKStateMachine<CallScreening.State>> and conformance CallScreeningEndingState<A>, &demangling cache variable for type metadata for CallScreeningEndingState<CKStateMachine<CallScreening.State>>);
LABEL_9:
      uint64_t v18 = (_OWORD *)swift_allocObject();
      OUTLINED_FUNCTION_3_40(v18, v19, v20, v21, v22, v23, v24, v25, v28, *((uint64_t *)&v28 + 1), v29, v30, v31, v32, v33, v26);
      break;
    default:
      OUTLINED_FUNCTION_2_26();
      uint64_t v3 = &demangling cache variable for type metadata for CallScreeningInitialState<CKStateMachine<CallScreening.State>>;
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallScreeningInitialState<CKStateMachine<CallScreening.State>>);
      uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CallScreeningInitialState<CKStateMachine<CallScreening.State>> and conformance CallScreeningInitialState<A>;
LABEL_4:
      uint64_t v5 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(v4, v3);
      long long v28 = v32;
      uint64_t v31 = v5;
      uint64_t v29 = v33;
      break;
  }
  outlined init with take of Notice(&v28, a1);
  return outlined retain of CallScreening.State((uint64_t *)v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CallScreening.State.enteringState()()
{
  CallScreening.State.state.getter((uint64_t)v2);
  uint64_t v0 = v3;
  uint64_t v1 = v4;
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t CallScreening.State.stateMachine.getter()
{
  outlined init with take of CallScreening.State(v0, (uint64_t)&v17);
  switch(v20 >> 61)
  {
    case 1uLL:
      OUTLINED_FUNCTION_7_20();
      OUTLINED_FUNCTION_50();
      uint64_t v5 = *(uint64_t (**)(void))(v4 + 104);
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_10_16();
      uint64_t v3 = v5();
      goto LABEL_9;
    case 2uLL:
      OUTLINED_FUNCTION_7_20();
      v21[0] = v18;
      OUTLINED_FUNCTION_50();
      long long v7 = *(uint64_t (**)(uint64_t))(v6 + 104);
      swift_retain();
      outlined retain of String((uint64_t)v21);
      swift_retain();
      uint64_t v8 = swift_retain();
      uint64_t v3 = v7(v8);
      swift_release();
      outlined release of String((uint64_t)v21);
      swift_release();
      goto LABEL_10;
    case 3uLL:
      v20 &= 0x1FFFFFFFFFFFFFFFuLL;
      v21[0] = v17;
      OUTLINED_FUNCTION_50();
      uint64_t v10 = *(uint64_t (**)(void))(v9 + 104);
      outlined retain of String((uint64_t)v21);
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_10_16();
      uint64_t v3 = v10();
      outlined release of String((uint64_t)v21);
      goto LABEL_9;
    case 4uLL:
      v20 &= 0x1FFFFFFFFFFFFFFFuLL;
      v21[0] = v17;
      OUTLINED_FUNCTION_50();
      uint64_t v12 = *(uint64_t (**)(uint64_t))(v11 + 104);
      outlined retain of String((uint64_t)v21);
      swift_retain();
      swift_retain();
      uint64_t v13 = swift_retain();
      uint64_t v3 = v12(v13);
      outlined release of String((uint64_t)v21);
      swift_release();
      goto LABEL_9;
    case 5uLL:
      v20 &= 0x1FFFFFFFFFFFFFFFuLL;
      v21[0] = v17;
      v21[1] = v18;
      uint64_t v21[2] = v19;
      outlined init with take of CallScreening.EndingAction(v21, (uint64_t)v22);
      OUTLINED_FUNCTION_50();
      uint64_t v15 = *(uint64_t (**)(void))(v14 + 104);
      outlined retain of CallScreening.EndingAction((uint64_t)v22);
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_10_16();
      uint64_t v3 = v15();
      outlined release of CallScreening.EndingAction((uint64_t)v22);
      goto LABEL_9;
    default:
      OUTLINED_FUNCTION_7_20();
      OUTLINED_FUNCTION_50();
      uint64_t v2 = *(uint64_t (**)(void))(v1 + 104);
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_10_16();
      uint64_t v3 = v2();
LABEL_9:
      swift_release();
LABEL_10:
      swift_release();
      return v3;
  }
}

uint64_t CallScreeningState.stateMachine.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 40))();
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v2 + 104))();
  swift_release();
  if (!v3) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachine<CallScreening.State>);
  swift_getAssociatedTypeWitness();
  if (swift_dynamicCast()) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for CKStateMachineState.stateTransition.getter in conformance CallScreening.State@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of CallScreening.State(v1, (uint64_t)v6);
  uint64_t result = CallScreening.State.stateTransition.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t protocol witness for CKStateMachineState.stateMachineContainer.getter in conformance CallScreening.State()
{
  outlined init with take of CallScreening.State(v0, (uint64_t)v2);
  return CallScreening.State.stateMachineContainer.getter();
}

uint64_t protocol witness for CKStateMachineState.willExit(to:) in conformance CallScreening.State(long long *a1)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v3);
  outlined init with take of CallScreening.State(v1, (uint64_t)v4);
  return CallScreening.State.willExit(to:)((uint64_t)v3);
}

void protocol witness for CKStateMachineState.enteringState() in conformance CallScreening.State()
{
  outlined init with take of CallScreening.State(v0, (uint64_t)v1);
  CallScreening.State.enteringState()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CallScreening.State(long long *a1, long long *a2)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v4);
  outlined init with take of CallScreening.State(a2, (uint64_t)v5);
  return static CallScreening.State.== infix(_:_:)(v4, v5);
}

BOOL specialized static CKStateMachineContainer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)a1 + 104))();
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)a2 + 104))();
  uint64_t v5 = v4;
  if (v3)
  {
    swift_release();
    if (v5)
    {
      swift_release();
      return v3 == v5;
    }
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    swift_release();
    return 0;
  }
  swift_release();
  return 1;
}

uint64_t specialized CallScreeningEndingState.description.getter()
{
  *(void *)&long long v7 = 0;
  *((void *)&v7 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  uint64_t v5 = 0;
  unint64_t v6 = 0xE000000000000000;
  v1._object = (void *)0x80000001C37949D0;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v1);
  outlined init with take of CallScreening.EndingAction(v0, (uint64_t)&v7);
  outlined init with take of CallScreening.EndingAction(&v7, (uint64_t)&v4);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v5;
}

unint64_t specialized CallScreeningScreeningState.description.getter()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v2 = *v0;
  Swift::String v1 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000019;
}

unint64_t specialized CallScreeningTrackingState.description.getter()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);
  Swift::String v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000018;
}

unint64_t specialized CallScreeningAnsweringState.description.getter()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v2 = *v0;
  Swift::String v1 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000019;
}

uint64_t outlined init with take of CallScreening.State(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(void *)(a2 + 48) = *((void *)a1 + 6);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t outlined init with take of CallScreening.EndingAction(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t outlined retain of CallScreening.EndingAction(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of CallScreening.EndingAction(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined release of CallScreening.EndingAction(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of CallScreening.EndingAction(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

uint64_t *outlined retain of CallScreening.State(uint64_t *a1)
{
  return a1;
}

uint64_t outlined copy of CallScreening.State(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  switch(a7 >> 61)
  {
    case 0uLL:
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3uLL:
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 4uLL:
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_6;
    case 5uLL:
      outlined copy of CallScreening.EndingAction(result, a2, a3);
LABEL_6:
      swift_retain();
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallScreening.StateTransition and conformance CallScreening.StateTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type CallScreening.StateTransition and conformance CallScreening.StateTransition;
  if (!lazy protocol witness table cache variable for type CallScreening.StateTransition and conformance CallScreening.StateTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallScreening.StateTransition and conformance CallScreening.StateTransition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallScreening.StateTransition and conformance CallScreening.StateTransition;
  if (!lazy protocol witness table cache variable for type CallScreening.StateTransition and conformance CallScreening.StateTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallScreening.StateTransition and conformance CallScreening.StateTransition);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CallScreening.State(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CallScreening.State and conformance CallScreening.State();
  unint64_t result = lazy protocol witness table accessor for type CallScreening.State and conformance CallScreening.State();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CallScreening.State and conformance CallScreening.State()
{
  unint64_t result = lazy protocol witness table cache variable for type CallScreening.State and conformance CallScreening.State;
  if (!lazy protocol witness table cache variable for type CallScreening.State and conformance CallScreening.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallScreening.State and conformance CallScreening.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CallScreening.State and conformance CallScreening.State;
  if (!lazy protocol witness table cache variable for type CallScreening.State and conformance CallScreening.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallScreening.State and conformance CallScreening.State);
  }
  return result;
}

uint64_t dispatch thunk of CallScreeningState.stateMachineContainer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CallScreeningState.willExit(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  long long v4 = *(uint64_t (**)(_OWORD *))(a3 + 48);
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a1 + 32);
  uint64_t v8 = v3;
  return v4(v7);
}

uint64_t dispatch thunk of CallScreeningState.enteredState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CallScreeningStateMachine.logger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallScreeningStateMachine.currentState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CallScreeningStateMachine.transition(with:reason:validation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a9 + 32) + **(int **)(a9 + 32));
  long long v17 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v17;
  *long long v17 = v9;
  v17[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t destroy for CallScreening.State(uint64_t *a1)
{
  return outlined consume of CallScreening.State(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
}

uint64_t outlined consume of CallScreening.State(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  switch(a7 >> 61)
  {
    case 0uLL:
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 3uLL:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 4uLL:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 5uLL:
      outlined consume of CallScreening.EndingAction(result, a2, a3);
LABEL_6:
      swift_release();
      unint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for CallScreening.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  outlined copy of CallScreening.State(*a2, v4, v5, v6, v7, v8, v9);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for CallScreening.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  outlined copy of CallScreening.State(*a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  uint64_t v15 = a1[5];
  unint64_t v16 = a1[6];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  outlined consume of CallScreening.State(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t *assignWithTake for CallScreening.State(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  unint64_t v10 = a1[6];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = v3;
  outlined consume of CallScreening.State(v4, v6, v5, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallScreening.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7B && *(unsigned char *)(a1 + 56))
    {
      unsigned int v2 = *(_DWORD *)a1 + 122;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 48) >> 57) >> 4) | (8
                                                               * ((*(void *)(a1 + 48) >> 57) & 8 | *(void *)(a1 + 48) & 7))) ^ 0x7F;
      if (v2 >= 0x7A) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for CallScreening.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)unint64_t result = 0u;
      *(void *)(result + 48) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for CallScreening.State(uint64_t a1)
{
  return *(void *)(a1 + 48) >> 61;
}

uint64_t destructiveProjectEnumData for CallScreening.State(uint64_t result)
{
  *(void *)(result + 48) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for CallScreening.State(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(result + 48) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

void type metadata accessor for CallScreening.State()
{
}

uint64_t initializeBufferWithCopyOfBuffer for CallScreening.EndingAction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for CallScreening.EndingAction(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of CallScreening.EndingAction);
}

uint64_t destroy for CallScreening.EndingAction(uint64_t a1)
{
  return outlined consume of CallScreening.EndingAction(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for CallScreening.EndingAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for CallScreening.EndingAction(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of CallScreening.EndingAction, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CallScreening.EndingAction);
}

uint64_t *assignWithTake for CallScreening.EndingAction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for CallScreening.EndingAction(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CallScreening.EndingAction);
}

uint64_t getEnumTagSinglePayload for CallScreening.EndingAction(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallScreening.EndingAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CallScreening.EndingAction(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for CallScreening.EndingAction(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for CallScreening.EndingAction()
{
}

uint64_t initializeBufferWithCopyOfBuffer for CallScreening.StateTransition(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for CallScreening.EndingAction(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of CallScreening.StateTransition);
}

uint64_t outlined copy of CallScreening.StateTransition(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 0:
    case 1:
    case 2:
      unint64_t result = swift_bridgeObjectRetain();
      break;
    case 3:
      unint64_t result = outlined copy of CallScreening.EndingAction(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for CallScreening.StateTransition(uint64_t a1)
{
  return outlined consume of CallScreening.StateTransition(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of CallScreening.StateTransition(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 0:
    case 1:
    case 2:
      unint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      unint64_t result = outlined consume of CallScreening.EndingAction(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CallScreening.EndingAction(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for CallScreening.StateTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for CallScreening.EndingAction(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of CallScreening.StateTransition, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CallScreening.StateTransition);
}

uint64_t *assignWithCopy for CallScreening.EndingAction(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for CallScreening.StateTransition(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for CallScreening.EndingAction(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of CallScreening.StateTransition);
}

uint64_t *assignWithTake for CallScreening.EndingAction(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallScreening.StateTransition(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3C && *(unsigned char *)(a1 + 17))
    {
      unsigned int v2 = *(_DWORD *)a1 + 59;
    }
    else
    {
      unsigned int v2 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFFC7 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 2) & 7))) ^ 0x3F;
      if (v2 >= 0x3B) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for CallScreening.StateTransition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3B)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 60;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3C) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3C) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 4 * (((-a2 >> 3) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for CallScreening.StateTransition(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveProjectEnumData for CallScreening.StateTransition(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for CallScreening.StateTransition(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    char v2 = *(unsigned char *)(result + 16) & 3 | (32 * a2);
  }
  else
  {
    *(void *)unint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    char v2 = 0x80;
  }
  *(unsigned char *)(result + 16) = v2;
  return result;
}

void type metadata accessor for CallScreening.StateTransition()
{
}

uint64_t sub_1C3038AA8()
{
  outlined consume of CallScreening.EndingAction(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C3038AF4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C3038B44()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C3038B8C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t AudioCallMiddleContainerView.view.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t property wrapper backing initializer of AudioCallMiddleContainerView.viewModel()
{
  lazy protocol witness table accessor for type TranscriptionViewModel and conformance TranscriptionViewModel((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  return ObservedObject.init(wrappedValue:)();
}

uint64_t AudioCallMiddleContainerView.viewModel.getter()
{
  return swift_retain();
}

uint64_t key path getter for AudioCallMiddleContainerView.viewModel : <A>AudioCallMiddleContainerView<A>@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AudioCallMiddleContainerView();
  uint64_t result = AudioCallMiddleContainerView.viewModel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for AudioCallMiddleContainerView.viewModel : <A>AudioCallMiddleContainerView<A>()
{
  uint64_t v0 = type metadata accessor for AudioCallMiddleContainerView();
  uint64_t v1 = swift_retain();
  return AudioCallMiddleContainerView.viewModel.setter(v1, v0);
}

uint64_t AudioCallMiddleContainerView.viewModel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t result = swift_release();
  *(void *)(v4 + 8) = a1;
  return result;
}

uint64_t (*AudioCallMiddleContainerView.viewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AudioCallMiddleContainerView.$viewModel.getter()
{
  type metadata accessor for TranscriptionViewModel(0);
  lazy protocol witness table accessor for type TranscriptionViewModel and conformance TranscriptionViewModel((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  return ObservedObject.projectedValue.getter();
}

uint64_t AudioCallMiddleContainerView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v28 = *(void *)(MEMORY[0x1F4188790](v8) + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _AnimationModifier<[TranscriptionViewModel.Caption]>);
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v30 = v25;
  unint64_t v31 = lazy protocol witness table accessor for type _AnimationModifier<[TranscriptionViewModel.Caption]> and conformance _AnimationModifier<A>();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for AccessibilityCaptionsReader();
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  long long v17 = (char *)&v24 - v16;
  uint64_t v24 = AudioCallMiddleContainerView.viewModel.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v25;
  *(void *)(v19 + 16) = v28;
  *(void *)(v19 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v18, (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  AccessibilityCaptionsReader.init(viewModel:content:)((uint64_t)partial apply for closure #1 in AudioCallMiddleContainerView.body.getter, v19, (uint64_t)v15);
  uint64_t v21 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15, v9, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v15, v9);
  static ViewBuilder.buildExpression<A>(_:)(v17, v9, v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v17, v9);
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<[TranscriptionViewModel.Caption]> and conformance _AnimationModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnimationModifier<[TranscriptionViewModel.Caption]> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<[TranscriptionViewModel.Caption]> and conformance _AnimationModifier<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _AnimationModifier<[TranscriptionViewModel.Caption]>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<[TranscriptionViewModel.Caption]> and conformance _AnimationModifier<A>);
  }
  return result;
}

uint64_t closure #1 in AudioCallMiddleContainerView.body.getter()
{
  return swift_release();
}

uint64_t sub_1C30391CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AudioCallMiddleContainerView() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for AudioCallMiddleContainerView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in AudioCallMiddleContainerView.body.getter()
{
  type metadata accessor for AudioCallMiddleContainerView();
  return closure #1 in AudioCallMiddleContainerView.body.getter();
}

uint64_t AudioCallMiddleContainerView.init(view:viewModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
  uint64_t v4 = (uint64_t *)(a3 + *(int *)(type metadata accessor for AudioCallMiddleContainerView() + 36));
  uint64_t result = property wrapper backing initializer of AudioCallMiddleContainerView.viewModel();
  *uint64_t v4 = result;
  v4[1] = v6;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AudioCallMiddleContainerView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C303943C()
{
  return 16;
}

__n128 sub_1C3039448(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for AudioCallMiddleContainerView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioCallMiddleContainerView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    v10[1] = v11[1];
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AudioCallMiddleContainerView(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for AudioCallMiddleContainerView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AudioCallMiddleContainerView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AudioCallMiddleContainerView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AudioCallMiddleContainerView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioCallMiddleContainerView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*(void *)(v4 - 8) + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C30399BCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return __swift_getEnumTagSinglePayload((uint64_t)a1, v5, v4);
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for AudioCallMiddleContainerView(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1C3039BA0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v17 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *unint64_t v17 = a2 ^ 0x80000000;
            v17[1] = 0;
          }
          else
          {
            v17[1] = (a2 - 1);
          }
        }
        else
        {
          __swift_storeEnumTagSinglePayload((uint64_t)a1, a2, v7, v6);
        }
      }
      return;
  }
}

uint64_t sub_1C3039BC8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type [TranscriptionViewModel.Caption] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [TranscriptionViewModel.Caption] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [TranscriptionViewModel.Caption] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [TranscriptionViewModel.Caption]);
    lazy protocol witness table accessor for type TranscriptionViewModel and conformance TranscriptionViewModel(&lazy protocol witness table cache variable for type TranscriptionViewModel.Caption and conformance TranscriptionViewModel.Caption, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel.Caption);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TranscriptionViewModel.Caption] and conformance <A> [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TranscriptionViewModel and conformance TranscriptionViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static UIBackgroundConfiguration.plainInCallControlsBackground.getter()
{
  static UIBackgroundConfiguration.listPlainCell()();
  id v0 = objc_msgSend(self, sel_clearColor);
  return UIBackgroundConfiguration.backgroundColor.setter();
}

uint64_t static UIBackgroundConfiguration.preferredInCallControlsBackground.getter()
{
  static UIBackgroundConfiguration.listGroupedCell()();
  id v0 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for UIVibrancyEffect();
  static UIVibrancyEffect.inCallControlsEffect.getter();
  return UIBackgroundConfiguration.visualEffect.setter();
}

uint64_t static UIBackgroundConfiguration.blurredInCallControlsBackground.getter()
{
  static UIBackgroundConfiguration.listGroupedCell()();
  id v0 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for UIVibrancyEffect();
  static UIVibrancyEffect.inCallControlsEffect.getter();
  return UIBackgroundConfiguration.visualEffect.setter();
}

unint64_t type metadata accessor for UIVibrancyEffect()
{
  unint64_t result = lazy cache variable for type metadata for UIVibrancyEffect;
  if (!lazy cache variable for type metadata for UIVibrancyEffect)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
  }
  return result;
}

uint64_t key path getter for CallScreeningInitialState.initialStateSetup : <A>CallScreeningInitialState<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CallScreeningInitialState<A>) -> ();
  a4[1] = v8;
  return swift_retain();
}

uint64_t key path setter for CallScreeningInitialState.initialStateSetup : <A>CallScreeningInitialState<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CallScreeningInitialState<A>) -> (@out ());
  *(void *)(a2 + 16) = v8;
  return result;
}

uint64_t CallScreeningInitialState.initialStateSetup.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CallScreeningInitialState.initialStateSetup.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*CallScreeningInitialState.initialStateSetup.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CallScreeningInitialState.init(initialStateSetup:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  return v0;
}

uint64_t CallScreeningInitialState.willExit(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_63();
  v24[0] = a2;
  v24[1] = a3;
  v24[2] = a4;
  uint64_t v9 = type metadata accessor for CallScreeningInitialState();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = CallScreeningState.stateMachine.getter(v9, WitnessTable);
  if (result)
  {
    uint64_t v12 = OUTLINED_FUNCTION_5_33();
    v13(v12);
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v23 = v15;
      uint64_t v16 = swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      swift_release();
      swift_release();
      uint64_t v22 = v14;
      uint64_t v25 = OUTLINED_FUNCTION_1_45();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_3_41();
      *(_WORD *)(v16 + 12) = 2082;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
      unint64_t v17 = CallScreening.State.description.getter();
      unint64_t v19 = v18;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      uint64_t v14 = v22;
      _os_log_impl(&dword_1C2F90000, v22, v23, "%{public}s Exiting to %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      swift_release_n();
      swift_release_n();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
    }

    swift_unknownObjectRelease();
    uint64_t v20 = OUTLINED_FUNCTION_6_24();
    return v21(v20);
  }
  return result;
}

uint64_t type metadata accessor for CallScreeningInitialState()
{
  return __swift_instantiateGenericMetadata();
}

void *outlined retain of CallScreening.State(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CallScreeningInitialState.enteredState()()
{
  uint64_t v6 = v4;
  uint64_t v7 = v3;
  uint64_t v8 = v2;
  uint64_t v9 = v1;
  uint64_t v10 = v0;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v10;
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  uint64_t v15 = type metadata accessor for CallScreeningInitialState();
  uint64_t WitnessTable = swift_getWitnessTable();
  if (CallScreeningState.stateMachine.getter(v15, WitnessTable))
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6);
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v23 = v5;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = v22;
      *(_DWORD *)uint64_t v20 = 136446210;
      uint64_t v29 = OUTLINED_FUNCTION_1_45();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_3_41();
      _os_log_impl(&dword_1C2F90000, v17, v18, "EnteredState %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  }
  v9(v10, v9, v8);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CallScreeningInitialState.update(with:)(ConversationKit::AnsweringMachineCallStatus *with)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_63();
  v21[0] = v6;
  v21[1] = v5;
  uint64_t v21[2] = v4;
  uint64_t v9 = type metadata accessor for CallScreeningInitialState();
  uint64_t WitnessTable = swift_getWitnessTable();
  if (CallScreeningState.stateMachine.getter(v9, WitnessTable))
  {
    uint64_t v11 = OUTLINED_FUNCTION_5_33();
    v12(v11);
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    outlined retain of AnsweringMachineCallStatus((uint64_t)with);
    swift_retain();
    swift_retain();
    outlined retain of AnsweringMachineCallStatus((uint64_t)with);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      swift_release();
      swift_release();
      uint64_t v22 = OUTLINED_FUNCTION_1_45();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_3_41();
      *(_WORD *)(v15 + 12) = 2082;
      outlined retain of AnsweringMachineCallStatus((uint64_t)with);
      uint64_t v16 = AnsweringMachineCallStatus.description.getter();
      unint64_t v18 = v17;
      outlined release of AnsweringMachineCallStatus((uint64_t)with);
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of AnsweringMachineCallStatus((uint64_t)with);
      outlined release of AnsweringMachineCallStatus((uint64_t)with);
      _os_log_impl(&dword_1C2F90000, v13, v14, "%{public}s recieved callStatus Update: %{public}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      swift_release_n();
      swift_release_n();
      outlined release of AnsweringMachineCallStatus((uint64_t)with);
      outlined release of AnsweringMachineCallStatus((uint64_t)with);
    }

    uint64_t v19 = OUTLINED_FUNCTION_6_24();
    v20(v19);
  }
}

uint64_t protocol witness for CallScreeningState.stateMachineContainer.getter in conformance CallScreeningInitialState<A>()
{
  return swift_retain();
}

uint64_t protocol witness for CallScreeningState.willExit(to:) in conformance CallScreeningInitialState<A>(void *a1)
{
  return CallScreeningInitialState.willExit(to:)(a1, *v1, v1[1], v1[2]);
}

void protocol witness for CallScreeningState.enteredState() in conformance CallScreeningInitialState<A>()
{
}

uint64_t protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningInitialState<A>(uint64_t a1, uint64_t a2)
{
  v3[3] = v2;
  void v3[4] = a2;
  uint64_t v3[2] = a1;
  uint64_t v4 = static CKStateMachineActor.shared.getter();
  v3[5] = v4;
  return MEMORY[0x1F4188298](protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningInitialState<A>, v4, 0);
}

uint64_t protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningInitialState<A>()
{
  uint64_t v1 = *(ConversationKit::AnsweringMachineCallStatus **)(v0 + 16);
  swift_release();
  CallScreeningInitialState.update(with:)(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t static CallScreeningInitialState.== infix(_:_:)()
{
  return 1;
}

uint64_t CallScreeningInitialState.description.getter()
{
  return 0x536C616974696E49;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallScreeningInitialState<A>()
{
  return 0x536C616974696E49;
}

uint64_t outlined retain of AnsweringMachineCallStatus(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AnsweringMachineCallStatus(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for CallScreeningState.StateMachine : CallScreeningStateMachine in CallScreeningInitialState<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t instantiation function for generic protocol witness table for CallScreeningInitialState<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C303ABD4()
{
  return 16;
}

__n128 sub_1C303ABE0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for CallScreeningInitialState()
{
  swift_release();
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for CallScreeningInitialState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CallScreeningInitialState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CallScreeningInitialState(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallScreeningInitialState(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C303AD58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CallScreeningInitialState<A>) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 32);
  v6[0] = a1;
  v6[1] = a2;
  long long v6[2] = a3;
  return v4(v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CallScreeningInitialState<A>) -> ()(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 32))(*a1, a1[1], a1[2]);
}

uint64_t @objc LockScreenHostingController._canShowWhileLocked()()
{
  return 1;
}

uint64_t LockScreenHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return LockScreenHostingController.init(rootView:)(a1);
}

uint64_t LockScreenHostingController.init(rootView:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_3();
  uint64_t v3 = *(void *)(v2 + class metadata base offset for LockScreenHostingController);
  OUTLINED_FUNCTION_5_3();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - v7, a1, v3);
  uint64_t v8 = UIHostingController.init(rootView:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
  return v8;
}

void *LockScreenHostingController.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return LockScreenHostingController.init(coder:rootView:)(a1, a2);
}

void *LockScreenHostingController.init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_3();
  uint64_t v4 = *(void *)(v3 + class metadata base offset for LockScreenHostingController);
  OUTLINED_FUNCTION_5_3();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *))(v6 + 16))((char *)&v13 - v8);
  uint64_t v9 = (void *)UIHostingController.init(coder:rootView:)();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  id v11 = v9;
  v10(a2, v4);
  if (v9) {

  }
  return v9;
}

id LockScreenHostingController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id LockScreenHostingController.init(coder:)(void *a1)
{
  OUTLINED_FUNCTION_0_3();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for LockScreenHostingController();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

uint64_t type metadata accessor for LockScreenHostingController()
{
  return __swift_instantiateGenericMetadata();
}

id @objc LockScreenHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return LockScreenHostingController.init(coder:)(a3);
}

id LockScreenHostingController.__deallocating_deinit()
{
  OUTLINED_FUNCTION_0_3();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LockScreenHostingController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t View.inLockScreenHostingController()(uint64_t a1)
{
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LockScreenHostingController();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1, a1);
  return LockScreenHostingController.__allocating_init(rootView:)((uint64_t)v7);
}

uint64_t type metadata completion function for LockScreenHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t CaptionsViewConstraintManager.__allocating_init(containingGuide:rosterCellLayoutGuide:containingView:captionsView:bannerView:gridView:)(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v12 = swift_allocObject();
  CaptionsViewConstraintManager.init(containingGuide:rosterCellLayoutGuide:containingView:captionsView:bannerView:gridView:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

void *CaptionsViewConstraintManager.init(containingGuide:rosterCellLayoutGuide:containingView:captionsView:bannerView:gridView:)(void *a1, void *a2, void *a3, id a4, void *a5, void *a6)
{
  uint64_t v7 = v6;
  v6[22] = MEMORY[0x1E4FBC860];
  id v11 = objc_msgSend(a4, sel_widthAnchor);
  if (one-time initialization token for transcriptSidebarWidth != -1) {
    swift_once();
  }
  id v12 = objc_msgSend(v11, sel_constraintEqualToConstant_, *(double *)&static Layout.Captions.transcriptSidebarWidth);

  v7[13] = v12;
  id v13 = objc_msgSend(a4, sel_heightAnchor);
  if (one-time initialization token for transcriptVerticalSize != -1) {
    swift_once();
  }
  id v14 = objc_msgSend(v13, sel_constraintEqualToConstant_, *(double *)&static Layout.Captions.transcriptVerticalSize);

  v7[14] = v14;
  id v15 = objc_msgSend(a4, sel_heightAnchor);
  id v16 = objc_msgSend(v15, sel_constraintEqualToConstant_, 0.0);

  v7[15] = v16;
  id v17 = objc_msgSend(a4, sel_leftAnchor);
  id v18 = objc_msgSend(a1, sel_leftAnchor);
  id v19 = OUTLINED_FUNCTION_3_42((uint64_t)v18, sel_constraintEqualToAnchor_);

  v7[2] = v19;
  id v20 = objc_msgSend(a4, sel_leftAnchor);
  id v21 = objc_msgSend(a5, sel_rightAnchor);
  static Layout.MediaPip.padding.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static Defaults.shared + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v22 + 488))();
  id v23 = objc_msgSend(v20, sel_constraintEqualToAnchor_constant_, v21, 16.0);

  _OWORD v7[3] = v23;
  id v24 = objc_msgSend(a4, sel_rightAnchor);
  id v25 = OUTLINED_FUNCTION_2_27((uint64_t)objc_msgSend(a1, sel_rightAnchor));

  v7[5] = v25;
  id v26 = objc_msgSend(a4, sel_rightAnchor);
  id v27 = objc_msgSend(a6, sel_leftAnchor);
  static Layout.MediaPip.padding.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v28 + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  uint64_t v30 = (*(uint64_t (**)(void))(v29 + 488))();
  id v31 = OUTLINED_FUNCTION_12_15(v30, sel_constraintEqualToAnchor_constant_);

  v7[6] = v31;
  id v32 = objc_msgSend(a4, (SEL)&selRef_updateConfiguration + 1);
  id v33 = objc_msgSend(a6, sel_rightAnchor);
  static Layout.MediaPip.padding.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v34 + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v35 + 488))();
  id v36 = objc_msgSend(v32, sel_constraintEqualToAnchor_constant_, v33, 16.0);

  v7[4] = v36;
  id v37 = objc_msgSend(a6, sel_rightAnchor);
  id v38 = objc_msgSend(a1, sel_rightAnchor);
  id v39 = OUTLINED_FUNCTION_3_42((uint64_t)v38, sel_constraintEqualToAnchor_);

  v7[7] = v39;
  id v40 = objc_msgSend(a6, sel_leftAnchor);
  id v41 = OUTLINED_FUNCTION_2_27((uint64_t)objc_msgSend(a1, sel_leftAnchor));

  v7[8] = v41;
  id v42 = objc_msgSend(a4, sel_leadingAnchor);
  id v43 = OUTLINED_FUNCTION_2_27((uint64_t)objc_msgSend(a1, sel_leadingAnchor));

  v7[10] = v43;
  id v44 = objc_msgSend(a4, sel_trailingAnchor);
  id v45 = objc_msgSend(a6, sel_leadingAnchor);
  static Layout.MediaPip.padding.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v46 + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  uint64_t v48 = (*(uint64_t (**)(void))(v47 + 488))();
  id v49 = OUTLINED_FUNCTION_12_15(v48, sel_constraintEqualToAnchor_constant_);

  v7[11] = v49;
  id v50 = objc_msgSend(a4, sel_trailingAnchor);
  id v51 = objc_msgSend(a6, sel_leadingAnchor);
  id v52 = OUTLINED_FUNCTION_3_42((uint64_t)v51, sel_constraintEqualToAnchor_);

  v7[12] = v52;
  id v53 = objc_msgSend(a6, sel_trailingAnchor);
  id v54 = OUTLINED_FUNCTION_2_27((uint64_t)objc_msgSend(a1, sel_trailingAnchor));

  v7[9] = v54;
  id v55 = objc_msgSend(a4, sel_topAnchor);
  id v56 = OUTLINED_FUNCTION_2_27((uint64_t)objc_msgSend(a1, sel_topAnchor));

  v7[16] = v56;
  id v57 = objc_msgSend(a4, sel_bottomAnchor);
  id v58 = OUTLINED_FUNCTION_2_27((uint64_t)objc_msgSend(a1, sel_bottomAnchor));

  v7[17] = v58;
  id v59 = objc_msgSend(a4, sel_bottomAnchor);
  id v60 = objc_msgSend(a5, sel_topAnchor);
  static Layout.MediaPip.padding.getter();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v61 + 384))();
  static Platform.current.getter();
  OUTLINED_FUNCTION_3_2();
  uint64_t v63 = (*(uint64_t (**)(void))(v62 + 488))();
  id v64 = OUTLINED_FUNCTION_12_15(v63, sel_constraintEqualToAnchor_constant_);

  v7[18] = v64;
  id v65 = objc_msgSend(a4, sel_bottomAnchor);
  id v66 = objc_msgSend(a2, sel_topAnchor);
  id v67 = OUTLINED_FUNCTION_3_42((uint64_t)v66, (const char *)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6);

  v7[21] = v67;
  id v68 = objc_msgSend(a4, sel_centerXAnchor);
  id v69 = objc_msgSend(a1, sel_centerXAnchor);
  id v70 = OUTLINED_FUNCTION_3_42((uint64_t)v69, (const char *)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6);

  v7[19] = v70;
  id v71 = objc_msgSend(a4, sel_centerYAnchor);
  id v72 = objc_msgSend(a6, sel_centerYAnchor);
  id v73 = OUTLINED_FUNCTION_3_42((uint64_t)v72, (const char *)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6);

  v7[20] = v73;
  return v7;
}

uint64_t CaptionsViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 19))
  {
    if (*(unsigned char *)(a1 + 19) == 1)
    {
      OUTLINED_FUNCTION_13_8();
      OUTLINED_FUNCTION_10_17();
      CaptionsViewConstraintManager.platformBubbleConstraints(for:deviceOrientation:)(v2, v3);
    }
    else
    {
      OUTLINED_FUNCTION_13_8();
      OUTLINED_FUNCTION_10_17();
      CaptionsViewConstraintManager.platformTranscriptConstraints(for:deviceOrientation:)(v10);
    }
    v1[22] = v4;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1C3769610;
    uint64_t v6 = (void *)v1[13];
    uint64_t v7 = (void *)v1[15];
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
    uint64_t v12 = v5;
    specialized Array._endMutation()();
    v1[22] = v12;
    id v8 = v6;
    id v9 = v7;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRetain();
}

void CaptionsViewConstraintManager.platformTranscriptConstraints(for:deviceOrientation:)(char *a1)
{
  char v1 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  char v3 = a1[16];
  char v4 = a1[17];
  char v5 = a1[18];
  char v6 = a1[19];
  char v7 = a1[20];
  char v8 = a1[21];
  char v9 = a1[22];
  if (static Platform.current.getter() == 2)
  {
    v12[0] = v1;
    uint64_t v13 = v2;
    char v14 = v3;
    char v15 = v4;
    char v16 = v5;
    char v17 = v6;
    char v18 = v7;
    char v19 = v8;
    char v20 = v9;
    CaptionsViewConstraintManager.tvTranscriptConstraints(for:)((uint64_t)v12);
    OUTLINED_FUNCTION_16();
  }
  else
  {
    OUTLINED_FUNCTION_16();
    CaptionsViewConstraintManager.defaultTranscriptConstraints(for:deviceOrientation:)(v10, v11);
  }
}

uint64_t CaptionsViewConstraintManager.tvTranscriptConstraints(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  int v3 = *(unsigned __int8 *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769580;
  char v6 = (void *)v1[13];
  char v7 = (void *)v1[14];
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v7;
  char v9 = (void *)v1[9];
  char v8 = (void *)v1[10];
  *(void *)(v5 + 48) = v8;
  *(void *)(v5 + 56) = v9;
  uint64_t v21 = v5;
  specialized Array._endMutation()();
  uint64_t v10 = 12;
  if (v4) {
    uint64_t v10 = 11;
  }
  uint64_t v11 = (void *)v1[v10];
  id v12 = v6;
  id v13 = v7;
  id v14 = v8;
  id v15 = v9;
  id v16 = v11;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_21();
  if (v17) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (v3) {
    char v18 = (void *)v2[16];
  }
  else {
    char v18 = (void *)v2[20];
  }
  id v19 = v18;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_5_34();
  if (v17) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return v21;
}

uint64_t CaptionsViewConstraintManager.defaultTranscriptConstraints(for:deviceOrientation:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769830;
  uint64_t v5 = (void *)v2[13];
  *(void *)(v4 + 32) = v5;
  uint64_t v51 = v4;
  specialized Array._endMutation()();
  id v6 = (id)v51;
  if ((unint64_t)(a2 - 1) < 3)
  {
    char v8 = (void *)v2[4];
    char v7 = (void *)v2[5];
    char v9 = (void *)v2[16];
    uint64_t v10 = (void *)v2[21];
    uint64_t v11 = (void *)v2[8];
    if ((unint64_t)v51 >> 62)
    {
      if (v51 < 0) {
        uint64_t v12 = v51;
      }
      else {
        uint64_t v12 = v51 & 0xFFFFFFFFFFFFFF8;
      }
      id v37 = v5;
      swift_bridgeObjectRetain();
      id v38 = v7;
      id v39 = v8;
      id v40 = v9;
      id v41 = v10;
      id v42 = v11;
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_11();
    }
    else
    {
      uint64_t v12 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v13 = v5;
      id v14 = v7;
      id v15 = v8;
      id v16 = v9;
      id v17 = v10;
      id v18 = v11;
    }
    if (__OFADD__(v12, 5))
    {
      __break(1u);
    }
    else
    {
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v12 + 5, 1);
      specialized Array._endMutation()();
      id v6 = v7;
      MEMORY[0x1C87733A0]();
      OUTLINED_FUNCTION_5_34();
      if (!v19)
      {
LABEL_6:
        OUTLINED_FUNCTION_14_10();
        specialized Array._endMutation()();
        id v20 = v8;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_7_21();
        if (v19) {
          OUTLINED_FUNCTION_1_14();
        }
        OUTLINED_FUNCTION_15_10();
        specialized Array._endMutation()();
        id v21 = v9;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_18_13();
        if (v19) {
          OUTLINED_FUNCTION_1_14();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v22 = v10;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_17_12();
        if (v19) {
          OUTLINED_FUNCTION_1_14();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v23 = v11;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_1_14();
        }
LABEL_28:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        return v51;
      }
    }
    OUTLINED_FUNCTION_1_14();
    goto LABEL_6;
  }
  if (!a2)
  {
    id v24 = (void *)v2[2];
    id v25 = (void *)v2[16];
    id v26 = (void *)v2[21];
    uint64_t v28 = (void *)v2[6];
    id v27 = (void *)v2[7];
    if ((unint64_t)v51 >> 62)
    {
      if (v51 < 0) {
        uint64_t v29 = v51;
      }
      else {
        uint64_t v29 = v51 & 0xFFFFFFFFFFFFFF8;
      }
      id v43 = v5;
      id v44 = v24;
      id v45 = v28;
      id v46 = v25;
      id v47 = v26;
      id v48 = v27;
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_11();
    }
    else
    {
      uint64_t v29 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v30 = v5;
      id v31 = v24;
      id v32 = v28;
      id v33 = v25;
      id v34 = v26;
      id v35 = v27;
    }
    if (__OFADD__(v29, 5))
    {
      __break(1u);
    }
    else
    {
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v29 + 5, 1);
      specialized Array._endMutation()();
      id v6 = v24;
      MEMORY[0x1C87733A0]();
      OUTLINED_FUNCTION_5_34();
      if (!v19)
      {
LABEL_20:
        OUTLINED_FUNCTION_14_10();
        specialized Array._endMutation()();
        id v20 = v28;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_7_21();
        if (v19) {
          OUTLINED_FUNCTION_1_14();
        }
        OUTLINED_FUNCTION_15_10();
        specialized Array._endMutation()();
        id v21 = v25;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_18_13();
        if (v19) {
          OUTLINED_FUNCTION_1_14();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v22 = v26;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_17_12();
        if (v19) {
          OUTLINED_FUNCTION_1_14();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v23 = v27;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        goto LABEL_28;
      }
    }
    OUTLINED_FUNCTION_1_14();
    goto LABEL_20;
  }
  id v49 = v5;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_17();
  v50._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  uint64_t result = OUTLINED_FUNCTION_19_14();
  __break(1u);
  return result;
}

void CaptionsViewConstraintManager.platformBubbleConstraints(for:deviceOrientation:)(uint64_t a1, char *a2)
{
  if (static Platform.current.getter() == 2)
  {
    OUTLINED_FUNCTION_4_34();
    CaptionsViewConstraintManager.tvBubbleConstraints(for:)(v2);
  }
  else
  {
    OUTLINED_FUNCTION_4_34();
    CaptionsViewConstraintManager.defaultBubbleConstraints(for:deviceOrientation:)(v3, a2);
  }
  OUTLINED_FUNCTION_16();
}

uint64_t CaptionsViewConstraintManager.tvBubbleConstraints(for:)(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 17);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769830;
  uint64_t v5 = *(void **)(v1 + 152);
  *(void *)(v4 + 32) = v5;
  uint64_t v12 = v4;
  specialized Array._endMutation()();
  if (v3 == 128)
  {
    id v6 = *(void **)(v1 + 128);
    goto LABEL_5;
  }
  if (v2)
  {
    id v6 = *(void **)(v1 + 144);
LABEL_5:
    id v7 = v6;
    id v8 = v5;
    id v9 = v7;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_5_34();
    if (v10) {
      OUTLINED_FUNCTION_6_3();
    }
    goto LABEL_7;
  }
  id v9 = *(id *)(v1 + 136);
  MEMORY[0x1C87733A0](v5);
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
LABEL_7:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return v12;
}

uint64_t CaptionsViewConstraintManager.defaultBubbleConstraints(for:deviceOrientation:)(uint64_t a1, char *a2)
{
  int v3 = v2;
  int v5 = *(unsigned __int8 *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769830;
  id v7 = (void *)v2[13];
  *(void *)(v6 + 32) = v7;
  unint64_t v30 = v6;
  specialized Array._endMutation()();
  unint64_t v31 = v30;
  if ((unint64_t)(a2 - 1) < 2)
  {
    a2 = (char *)v2[5];
    int v3 = (void *)v2[16];
    if (v30 >> 62)
    {
      OUTLINED_FUNCTION_8_18();
      swift_bridgeObjectRetain();
      id v20 = a2;
      id v21 = v3;
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_11();
    }
    else
    {
      OUTLINED_FUNCTION_20_5();
      id v8 = a2;
      id v9 = v3;
    }
    if (!__OFADD__(&v30, 2)) {
      goto LABEL_23;
    }
    __break(1u);
  }
  if (a2 == (char *)3)
  {
    a2 = (char *)v3[2];
    if (!v5) {
      goto LABEL_20;
    }
    int v3 = (void *)v3[18];
    if (v30 >> 62)
    {
      OUTLINED_FUNCTION_8_18();
      swift_bridgeObjectRetain();
      id v24 = a2;
      id v25 = v3;
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_11();
    }
    else
    {
      OUTLINED_FUNCTION_20_5();
      char v10 = a2;
      uint64_t v11 = v3;
    }
    if (!__OFADD__(&v30, 2)) {
      goto LABEL_23;
    }
    __break(1u);
  }
  if (a2)
  {
LABEL_33:
    id v28 = v7;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_17();
    v29._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    uint64_t result = OUTLINED_FUNCTION_19_14();
    __break(1u);
    return result;
  }
  a2 = (char *)v3[2];
  int v3 = (void *)v3[16];
  if (v30 >> 62)
  {
    OUTLINED_FUNCTION_8_18();
    id v22 = a2;
    id v23 = v3;
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_11();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
    uint64_t v12 = a2;
    id v13 = v3;
  }
  if (!__OFADD__(&v30, 2)) {
    goto LABEL_23;
  }
  __break(1u);
LABEL_20:
  int v3 = (void *)v3[17];
  if (v30 >> 62)
  {
    OUTLINED_FUNCTION_8_18();
    swift_bridgeObjectRetain();
    id v26 = a2;
    id v27 = v3;
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_11();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
    id v14 = a2;
    id v15 = v3;
  }
  if (__OFADD__(&v30, 2))
  {
    __break(1u);
    goto LABEL_33;
  }
LABEL_23:
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)((char *)&v30 + 2, 1);
  specialized Array._endMutation()();
  id v16 = a2;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_5_34();
  if (v17) {
    OUTLINED_FUNCTION_1_14();
  }
  OUTLINED_FUNCTION_14_10();
  specialized Array._endMutation()();
  id v18 = v3;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_7_21();
  if (v17) {
    OUTLINED_FUNCTION_1_14();
  }
  OUTLINED_FUNCTION_15_10();
  specialized Array._endMutation()();

  return v31;
}

id *CaptionsViewConstraintManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CaptionsViewConstraintManager.__deallocating_deinit()
{
  CaptionsViewConstraintManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CaptionsViewConstraintManagerProtocol.init(containingGuide:rosterCellLayoutGuide:containingView:captionsView:bannerView:gridView:) in conformance CaptionsViewConstraintManager@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 272))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CaptionsViewConstraintManagerProtocol.update(remoteParticipantAspectRatio:) in conformance CaptionsViewConstraintManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t protocol witness for ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:) in conformance CaptionsViewConstraintManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288))();
}

uint64_t dispatch thunk of CaptionsViewConstraintManagerProtocol.init(containingGuide:rosterCellLayoutGuide:containingView:captionsView:bannerView:gridView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of CaptionsViewConstraintManagerProtocol.update(remoteParticipantAspectRatio:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for CaptionsViewConstraintManager()
{
  return self;
}

uint64_t method lookup function for CaptionsViewConstraintManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CaptionsViewConstraintManager);
}

uint64_t dispatch thunk of CaptionsViewConstraintManager.__allocating_init(containingGuide:rosterCellLayoutGuide:containingView:captionsView:bannerView:gridView:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of CaptionsViewConstraintManager.update(remoteParticipantAspectRatio:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of CaptionsViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t *Colors.InCallControls.tableViewCellTitleLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for tableViewCellTitleLabel != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.tableViewCellTitleLabel;
}

uint64_t *Colors.InCallControls.collectionViewSectionHeaderTitleLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for collectionViewSectionHeaderTitleLabel != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.collectionViewSectionHeaderTitleLabel;
}

id one-time initialization function for separator()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.33, 0.33, 0.35, 1.0);
  static Colors.ShareView.separator = (uint64_t)result;
  return result;
}

uint64_t *Colors.ShareView.separator.unsafeMutableAddressor()
{
  if (one-time initialization token for separator != -1) {
    swift_once();
  }
  return &static Colors.ShareView.separator;
}

id static Colors.ShareView.separator.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for background()
{
  id result = OUTLINED_FUNCTION_24_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.1);
  static Colors.ParticipantViews.background = (uint64_t)result;
  return result;
}

{
  id result;

  id result = OUTLINED_FUNCTION_24_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.1);
  static Colors.InCallControls.background = (uint64_t)result;
  return result;
}

{
  id result;

  id result = OUTLINED_FUNCTION_2_28(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.MultiwayViewController.background = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.background.unsafeMutableAddressor()
{
  if (one-time initialization token for background != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.background;
}

id static Colors.ParticipantViews.background.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for titleLabel()
{
  id result = OUTLINED_FUNCTION_17_13(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantViews.titleLabel = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.titleLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for titleLabel != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.titleLabel;
}

id static Colors.ParticipantViews.titleLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for subtitleLabel()
{
  id result = OUTLINED_FUNCTION_24_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.698039216);
  static Colors.ParticipantViews.subtitleLabel = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.subtitleLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for subtitleLabel != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.subtitleLabel;
}

id static Colors.ParticipantViews.subtitleLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for alertText()
{
  id result = OUTLINED_FUNCTION_2_28(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantViews.alertText = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.alertText.unsafeMutableAddressor()
{
  if (one-time initialization token for alertText != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.alertText;
}

id static Colors.ParticipantViews.alertText.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for bottomBarText()
{
  id result = OUTLINED_FUNCTION_17_13(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantViews.bottomBarText = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.bottomBarText.unsafeMutableAddressor()
{
  if (one-time initialization token for bottomBarText != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.bottomBarText;
}

id static Colors.ParticipantViews.bottomBarText.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for overlaySpinner()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 1.0);
  static Colors.ParticipantViews.overlaySpinner = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.overlaySpinner.unsafeMutableAddressor()
{
  if (one-time initialization token for overlaySpinner != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.overlaySpinner;
}

id static Colors.ParticipantViews.overlaySpinner.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for overlayIcon()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 0.5);
  static Colors.ParticipantViews.overlayIcon = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.overlayIcon.unsafeMutableAddressor()
{
  if (one-time initialization token for overlayIcon != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.overlayIcon;
}

id static Colors.ParticipantViews.overlayIcon.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for buttonIcon()
{
  id result = OUTLINED_FUNCTION_2_28(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantViews.buttonIcon = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.buttonIcon.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonIcon != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.buttonIcon;
}

id static Colors.ParticipantViews.buttonIcon.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for border()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.0, 0.0, 0.0, 1.0);
  static Colors.ParticipantViews.border = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.border.unsafeMutableAddressor()
{
  if (one-time initialization token for border != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.border;
}

id static Colors.ParticipantViews.border.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

uint64_t one-time initialization function for bottomGradient()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C3769610;
  *(void *)(v0 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 0.0, 0.0);
  *(void *)(v0 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 0.0, 0.5);
  uint64_t result = specialized Array._endMutation()();
  static Colors.ParticipantViews.bottomGradient = v0;
  return result;
}

uint64_t *Colors.ParticipantViews.bottomGradient.unsafeMutableAddressor()
{
  if (one-time initialization token for bottomGradient != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.bottomGradient;
}

uint64_t static Colors.ParticipantViews.bottomGradient.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

{
  char v0;
  uint64_t vars8;

  OUTLINED_FUNCTION_13_9();
  if (!v0) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

id one-time initialization function for bottomShadow()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 0.0, 0.5);
  static Colors.ParticipantViews.bottomShadow = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.bottomShadow.unsafeMutableAddressor()
{
  if (one-time initialization token for bottomShadow != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.bottomShadow;
}

id static Colors.ParticipantViews.bottomShadow.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

void *Colors.ParticipantViews.bottomShadowOpacity.unsafeMutableAddressor()
{
  return &static Colors.ParticipantViews.bottomShadowOpacity;
}

float static Colors.ParticipantViews.bottomShadowOpacity.getter()
{
  return 0.5;
}

id one-time initialization function for shutterButtonEnabled()
{
  id result = OUTLINED_FUNCTION_17_13(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantViews.shutterButtonEnabled = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.shutterButtonEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for shutterButtonEnabled != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.shutterButtonEnabled;
}

id static Colors.ParticipantViews.shutterButtonEnabled.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for shutterButtonDisabled()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 0.5);
  static Colors.ParticipantViews.shutterButtonDisabled = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.shutterButtonDisabled.unsafeMutableAddressor()
{
  if (one-time initialization token for shutterButtonDisabled != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.shutterButtonDisabled;
}

id static Colors.ParticipantViews.shutterButtonDisabled.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for ringButtonColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.274509804, 0.274509804, 0.274509804, 0.7);
  static Colors.ParticipantViews.ringButtonColor = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.ringButtonColor.unsafeMutableAddressor()
{
  if (one-time initialization token for ringButtonColor != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.ringButtonColor;
}

id static Colors.ParticipantViews.ringButtonColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for shadow()
{
  id result = OUTLINED_FUNCTION_2_28(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantViews.shadow = (uint64_t)result;
  return result;
}

{
  id result;

  id result = OUTLINED_FUNCTION_2_28(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.LocalParticipantView.shadow = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.shadow.unsafeMutableAddressor()
{
  if (one-time initialization token for shadow != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.shadow;
}

id static Colors.ParticipantViews.shadow.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for screenShareNameLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_labelColor, &static Colors.ParticipantViews.screenShareNameLabel);
}

void *Colors.ParticipantViews.screenShareNameLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for screenShareNameLabel != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.screenShareNameLabel;
}

id static Colors.ParticipantViews.screenShareNameLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for screenShareInfoViewButton(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_labelColor, &static Colors.ParticipantViews.screenShareInfoViewButton);
}

void *Colors.ParticipantViews.screenShareInfoViewButton.unsafeMutableAddressor()
{
  if (one-time initialization token for screenShareInfoViewButton != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.screenShareInfoViewButton;
}

id static Colors.ParticipantViews.screenShareInfoViewButton.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

void *Colors.ParticipantViews.shadowOpacity.unsafeMutableAddressor()
{
  return &static Colors.ParticipantViews.shadowOpacity;
}

float static Colors.ParticipantViews.shadowOpacity.getter()
{
  return 0.83;
}

id one-time initialization function for contactMonogram()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.0, 0.0, 0.0, 0.9);
  static Colors.ParticipantViews.contactMonogram = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.contactMonogram.unsafeMutableAddressor()
{
  if (one-time initialization token for contactMonogram != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.contactMonogram;
}

id static Colors.ParticipantViews.contactMonogram.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for contactMonogramIcon()
{
  id result = OUTLINED_FUNCTION_32_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantViews.contactMonogramIcon = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.contactMonogramIcon.unsafeMutableAddressor()
{
  if (one-time initialization token for contactMonogramIcon != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.contactMonogramIcon;
}

id static Colors.ParticipantViews.contactMonogramIcon.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for overlayContent()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 1.0, 0.75);
  static Colors.ParticipantViews.overlayContent = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantViews.overlayContent.unsafeMutableAddressor()
{
  if (one-time initialization token for overlayContent != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.overlayContent;
}

id static Colors.ParticipantViews.overlayContent.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

uint64_t one-time initialization function for expandButton()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, ParticipantViewButton.ElementColors)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C376A6F0);
  OUTLINED_FUNCTION_11_15(objc_allocWithZone(MEMORY[0x1E4FB1618]));
  id v2 = OUTLINED_FUNCTION_26_6();
  id v3 = OUTLINED_FUNCTION_12_16(v2);
  inited[2].n128_u64[1] = v0;
  inited[3].n128_u64[0] = 0x3FECCCCCCCCCCCCDLL;
  inited[3].n128_u64[1] = (unint64_t)v3;
  inited[4].n128_u64[0] = 0x3FED70A3D70A3D71;
  inited[4].n128_u64[1] = 1;
  OUTLINED_FUNCTION_11_15(objc_allocWithZone(MEMORY[0x1E4FB1618]));
  id v4 = OUTLINED_FUNCTION_26_6();
  id v5 = OUTLINED_FUNCTION_12_16(v4);
  inited[5].n128_u64[0] = v0;
  inited[5].n128_u64[1] = 0x3FECCCCCCCCCCCCDLL;
  inited[6].n128_u64[0] = (unint64_t)v5;
  inited[6].n128_u64[1] = 0x3FED70A3D70A3D71;
  inited[7].n128_u64[0] = 4;
  OUTLINED_FUNCTION_11_15(objc_allocWithZone(MEMORY[0x1E4FB1618]));
  id v6 = OUTLINED_FUNCTION_26_6();
  id v7 = OUTLINED_FUNCTION_12_16(v6);
  inited[7].n128_u64[1] = v0;
  inited[8].n128_u64[0] = 0x3FECCCCCCCCCCCCDLL;
  inited[8].n128_u64[1] = (unint64_t)v7;
  inited[9].n128_u64[0] = 0x3FED70A3D70A3D71;
  inited[9].n128_u64[1] = 2;
  OUTLINED_FUNCTION_11_15(objc_allocWithZone(MEMORY[0x1E4FB1618]));
  id v8 = OUTLINED_FUNCTION_26_6();
  id v9 = OUTLINED_FUNCTION_12_16(v8);
  inited[10].n128_u64[0] = v0;
  inited[10].n128_u64[1] = 0x3FECCCCCCCCCCCCDLL;
  inited[11].n128_u64[0] = (unint64_t)v9;
  inited[11].n128_u64[1] = 0x3FED70A3D70A3D71;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = OUTLINED_FUNCTION_19_15();
  static Colors.ParticipantViews.expandButton = result;
  return result;
}

uint64_t *Colors.ParticipantViews.expandButton.unsafeMutableAddressor()
{
  if (one-time initialization token for expandButton != -1) {
    swift_once();
  }
  return &static Colors.ParticipantViews.expandButton;
}

uint64_t static Colors.ParticipantViews.expandButton.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

id one-time initialization function for background(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_clearColor, &static Colors.MostActiveParticipantView.background);
}

uint64_t *Colors.MostActiveParticipantView.background.unsafeMutableAddressor()
{
  if (one-time initialization token for background != -1) {
    swift_once();
  }
  return &static Colors.MostActiveParticipantView.background;
}

id static Colors.MostActiveParticipantView.background.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for unfocusedOverlay()
{
  id result = OUTLINED_FUNCTION_32_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_);
  static Colors.ParticipantGridView.unfocusedOverlaCGFloat y = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantGridView.unfocusedOverlay.unsafeMutableAddressor()
{
  if (one-time initialization token for unfocusedOverlay != -1) {
    swift_once();
  }
  return &static Colors.ParticipantGridView.unfocusedOverlay;
}

id static Colors.ParticipantGridView.unfocusedOverlay.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

uint64_t *Colors.LocalParticipantView.shadow.unsafeMutableAddressor()
{
  if (one-time initialization token for shadow != -1) {
    swift_once();
  }
  return &static Colors.LocalParticipantView.shadow;
}

id static Colors.LocalParticipantView.shadow.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

void *Colors.LocalParticipantView.shadowOpacity.unsafeMutableAddressor()
{
  return &static Colors.LocalParticipantView.shadowOpacity;
}

float static Colors.LocalParticipantView.shadowOpacity.getter()
{
  return 0.83;
}

uint64_t *Colors.InCallControls.background.unsafeMutableAddressor()
{
  if (one-time initialization token for background != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.background;
}

id static Colors.InCallControls.background.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for flatHotdog()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 0.2);
  static Colors.InCallControls.flatHotdog = (uint64_t)result;
  return result;
}

uint64_t *Colors.InCallControls.flatHotdog.unsafeMutableAddressor()
{
  if (one-time initialization token for flatHotdog != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.flatHotdog;
}

id static Colors.InCallControls.flatHotdog.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for tableViewBackground(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_clearColor, &static Colors.InCallControls.tableViewBackground);
}

uint64_t *Colors.InCallControls.tableViewBackground.unsafeMutableAddressor()
{
  if (one-time initialization token for tableViewBackground != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.tableViewBackground;
}

id static Colors.InCallControls.tableViewBackground.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for actionButton()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 1.0);
  static Colors.InCallControls.actionButton = (uint64_t)result;
  return result;
}

uint64_t *Colors.InCallControls.actionButton.unsafeMutableAddressor()
{
  if (one-time initialization token for actionButton != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.actionButton;
}

id static Colors.InCallControls.actionButton.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for actionButtonDisabled()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.698039216, 0.698039216, 0.698039216, 1.0);
  static Colors.InCallControls.actionButtonDisabled = (uint64_t)result;
  return result;
}

uint64_t *Colors.InCallControls.actionButtonDisabled.unsafeMutableAddressor()
{
  if (one-time initialization token for actionButtonDisabled != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.actionButtonDisabled;
}

id static Colors.InCallControls.actionButtonDisabled.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

void *Colors.InCallControls.actionButtonDisabledAlpha.unsafeMutableAddressor()
{
  return &static Colors.InCallControls.actionButtonDisabledAlpha;
}

double static Colors.InCallControls.actionButtonDisabledAlpha.getter()
{
  return 0.75;
}

id one-time initialization function for backgroundBlurEffect()
{
  id result = objc_msgSend(self, sel_effectWithStyle_, 1200);
  static Colors.InCallControls.backgroundBlurEffect = (uint64_t)result;
  return result;
}

uint64_t *Colors.InCallControls.backgroundBlurEffect.unsafeMutableAddressor()
{
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.backgroundBlurEffect;
}

id static Colors.InCallControls.backgroundBlurEffect.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for localCameraControlsBlurEffect()
{
  id result = objc_msgSend(self, sel_effectWithStyle_, 14);
  static Colors.InCallControls.localCameraControlsBlurEffect = (uint64_t)result;
  return result;
}

uint64_t *Colors.InCallControls.localCameraControlsBlurEffect.unsafeMutableAddressor()
{
  if (one-time initialization token for localCameraControlsBlurEffect != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.localCameraControlsBlurEffect;
}

id static Colors.InCallControls.localCameraControlsBlurEffect.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

uint64_t one-time initialization function for button()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, InCallControlButtonConfiguration)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C376A6F0);
  uint64_t v1 = self;
  id v2 = OUTLINED_FUNCTION_20_6(v1);
  id v3 = OUTLINED_FUNCTION_0_22();
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  id v4 = (void *)static Colors.InCallControls.backgroundBlurEffect;
  id v5 = self;
  id v6 = v4;
  id v7 = OUTLINED_FUNCTION_14_11(v5, sel__effectForBlurEffect_vibrancyStyle_);
  id v8 = OUTLINED_FUNCTION_0_22();
  id v9 = OUTLINED_FUNCTION_0_22();
  id v10 = OUTLINED_FUNCTION_33_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_);
  inited[2].n128_u64[1] = (unint64_t)v2;
  inited[3].n128_u64[0] = (unint64_t)v3;
  inited[3].n128_u64[1] = (unint64_t)v6;
  inited[4].n128_u64[0] = (unint64_t)v7;
  inited[4].n128_u8[8] = 1;
  inited[5].n128_u64[0] = (unint64_t)v8;
  inited[5].n128_u64[1] = (unint64_t)v9;
  inited[6].n128_u64[0] = (unint64_t)v10;
  inited[6].n128_u64[1] = 1;
  id v11 = OUTLINED_FUNCTION_0_22();
  id v12 = objc_msgSend(v11, sel_colorWithAlphaComponent_, 0.6);

  id v13 = OUTLINED_FUNCTION_0_22();
  id v14 = objc_msgSend(v13, (SEL)&selRef_primaryActionTitle + 5, 0.6);

  id v15 = objc_msgSend(v5, sel__effectForBlurEffect_vibrancyStyle_, (id)static Colors.InCallControls.backgroundBlurEffect, 111);
  id v16 = OUTLINED_FUNCTION_0_22();
  id v17 = OUTLINED_FUNCTION_0_22();
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 1.0, 0.3);
  OUTLINED_FUNCTION_28_4();
  inited[9].n128_u64[1] = (unint64_t)v16;
  inited[10].n128_u64[0] = (unint64_t)v17;
  inited[10].n128_u64[1] = v18;
  inited[11].n128_u64[0] = 4;
  id v19 = OUTLINED_FUNCTION_0_22();
  id v20 = OUTLINED_FUNCTION_6_25();
  id v21 = OUTLINED_FUNCTION_0_22();
  id v22 = OUTLINED_FUNCTION_6_25();
  id v23 = OUTLINED_FUNCTION_6_25();
  id v24 = OUTLINED_FUNCTION_0_22();
  inited[11].n128_u64[1] = (unint64_t)v19;
  inited[12].n128_u64[0] = (unint64_t)v20;
  inited[12].n128_u64[1] = (unint64_t)v21;
  inited[13].n128_u64[0] = 0;
  inited[13].n128_u8[8] = 0;
  inited[14].n128_u64[0] = (unint64_t)v22;
  inited[14].n128_u64[1] = (unint64_t)v23;
  inited[15].n128_u64[0] = (unint64_t)v24;
  inited[15].n128_u64[1] = 2;
  id v25 = OUTLINED_FUNCTION_0_22();
  id v26 = OUTLINED_FUNCTION_10_18(v25);

  id v27 = OUTLINED_FUNCTION_0_22();
  id v28 = OUTLINED_FUNCTION_10_18(v27);

  id v29 = (id)static Colors.InCallControls.backgroundBlurEffect;
  id v30 = OUTLINED_FUNCTION_14_11(v5, sel__effectForBlurEffect_vibrancyStyle_);
  id v31 = OUTLINED_FUNCTION_0_22();
  id v32 = OUTLINED_FUNCTION_10_18(v31);

  id v33 = OUTLINED_FUNCTION_0_22();
  id v34 = OUTLINED_FUNCTION_10_18(v33);

  id v35 = OUTLINED_FUNCTION_33_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_);
  OUTLINED_FUNCTION_9_18((uint64_t)v35);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = OUTLINED_FUNCTION_19_15();
  static Colors.InCallControls.button = result;
  return result;
}

uint64_t *Colors.InCallControls.button.unsafeMutableAddressor()
{
  if (one-time initialization token for button != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.button;
}

uint64_t static Colors.InCallControls.button.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for brickButton()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, InCallControlButtonConfiguration)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C376A6F0);
  uint64_t v1 = self;
  id v2 = OUTLINED_FUNCTION_20_6(v1);
  id v3 = OUTLINED_FUNCTION_0_22();
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  id v4 = (void *)static Colors.InCallControls.backgroundBlurEffect;
  id v34 = self;
  id v5 = v4;
  id v6 = OUTLINED_FUNCTION_14_11(v34, sel__effectForBlurEffect_vibrancyStyle_);
  id v7 = OUTLINED_FUNCTION_0_22();
  id v8 = OUTLINED_FUNCTION_0_22();
  id v9 = OUTLINED_FUNCTION_33_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_);
  inited[2].n128_u64[1] = (unint64_t)v2;
  inited[3].n128_u64[0] = (unint64_t)v3;
  inited[3].n128_u64[1] = (unint64_t)v5;
  inited[4].n128_u64[0] = (unint64_t)v6;
  inited[4].n128_u8[8] = 1;
  inited[5].n128_u64[0] = (unint64_t)v7;
  inited[5].n128_u64[1] = (unint64_t)v8;
  inited[6].n128_u64[0] = (unint64_t)v9;
  inited[6].n128_u64[1] = 1;
  id v10 = OUTLINED_FUNCTION_0_22();
  id v11 = OUTLINED_FUNCTION_23_4(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_);
  id v12 = OUTLINED_FUNCTION_0_22();
  id v13 = OUTLINED_FUNCTION_0_22();
  id v14 = OUTLINED_FUNCTION_23_4(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_);
  id v15 = OUTLINED_FUNCTION_0_22();
  inited[7].n128_u64[0] = (unint64_t)v10;
  inited[7].n128_u64[1] = (unint64_t)v11;
  inited[8].n128_u64[0] = (unint64_t)v12;
  inited[8].n128_u64[1] = 0;
  inited[9].n128_u8[0] = 0;
  inited[9].n128_u64[1] = (unint64_t)v13;
  inited[10].n128_u64[0] = (unint64_t)v14;
  inited[10].n128_u64[1] = (unint64_t)v15;
  inited[11].n128_u64[0] = 4;
  id v16 = OUTLINED_FUNCTION_0_22();
  id v17 = OUTLINED_FUNCTION_23_4(objc_allocWithZone(MEMORY[0x1E4FB1618]), (SEL)&selRef_videoMessageButton);
  id v18 = OUTLINED_FUNCTION_0_22();
  id v19 = OUTLINED_FUNCTION_23_4(objc_allocWithZone(MEMORY[0x1E4FB1618]), (SEL)&selRef_videoMessageButton);
  id v20 = OUTLINED_FUNCTION_23_4(objc_allocWithZone(MEMORY[0x1E4FB1618]), (SEL)&selRef_videoMessageButton);
  id v21 = OUTLINED_FUNCTION_0_22();
  inited[11].n128_u64[1] = (unint64_t)v16;
  inited[12].n128_u64[0] = (unint64_t)v17;
  inited[12].n128_u64[1] = (unint64_t)v18;
  inited[13].n128_u64[0] = 0;
  inited[13].n128_u8[8] = 0;
  inited[14].n128_u64[0] = (unint64_t)v19;
  inited[14].n128_u64[1] = (unint64_t)v20;
  inited[15].n128_u64[0] = (unint64_t)v21;
  inited[15].n128_u64[1] = 2;
  id v22 = OUTLINED_FUNCTION_0_22();
  id v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.3);

  id v24 = OUTLINED_FUNCTION_0_22();
  id v25 = OUTLINED_FUNCTION_10_18(v24);

  id v26 = (id)static Colors.InCallControls.backgroundBlurEffect;
  id v27 = OUTLINED_FUNCTION_14_11(v34, sel__effectForBlurEffect_vibrancyStyle_);
  id v28 = OUTLINED_FUNCTION_0_22();
  id v29 = OUTLINED_FUNCTION_10_18(v28);

  id v30 = OUTLINED_FUNCTION_0_22();
  id v31 = OUTLINED_FUNCTION_10_18(v30);

  id v32 = OUTLINED_FUNCTION_33_9(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_);
  OUTLINED_FUNCTION_9_18((uint64_t)v32);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = OUTLINED_FUNCTION_19_15();
  static Colors.InCallControls.brickButton = result;
  return result;
}

uint64_t *Colors.InCallControls.brickButton.unsafeMutableAddressor()
{
  if (one-time initialization token for brickButton != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.brickButton;
}

uint64_t static Colors.InCallControls.brickButton.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for conversationControls()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, InCallControlButtonConfiguration)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C376BA00);
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_labelColor);
  id v3 = OUTLINED_FUNCTION_31_5();
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  id v4 = (void *)static Colors.InCallControls.backgroundBlurEffect;
  id v5 = self;
  id v6 = v4;
  id v53 = v5;
  id v7 = OUTLINED_FUNCTION_14_11(v5, sel__effectForBlurEffect_vibrancyStyle_);
  id v8 = OUTLINED_FUNCTION_31_5();
  id v9 = OUTLINED_FUNCTION_22_6();
  id v10 = objc_msgSend(v1, sel_secondarySystemFillColor);
  inited[2].n128_u64[1] = (unint64_t)v2;
  inited[3].n128_u64[0] = (unint64_t)v3;
  inited[3].n128_u64[1] = (unint64_t)v6;
  inited[4].n128_u64[0] = (unint64_t)v7;
  inited[4].n128_u8[8] = 1;
  inited[5].n128_u64[0] = (unint64_t)v8;
  inited[5].n128_u64[1] = (unint64_t)v9;
  inited[6].n128_u64[0] = (unint64_t)v10;
  inited[6].n128_u64[1] = 1;
  id v11 = OUTLINED_FUNCTION_22_6();
  id v12 = objc_msgSend(v11, sel_colorWithAlphaComponent_, 0.75);

  id v13 = OUTLINED_FUNCTION_22_6();
  id v14 = objc_msgSend(v13, (SEL)&selRef_primaryActionTitle + 5, 0.75);

  id v15 = objc_msgSend(v5, sel__effectForBlurEffect_vibrancyStyle_, (id)static Colors.InCallControls.backgroundBlurEffect, 111);
  id v16 = OUTLINED_FUNCTION_22_6();
  id v17 = OUTLINED_FUNCTION_16_11(v16);

  id v18 = OUTLINED_FUNCTION_22_6();
  id v19 = objc_msgSend(v18, (SEL)&selRef_primaryActionTitle + 5, 0.75);

  id v20 = objc_msgSend(v1, sel_secondarySystemFillColor);
  id v21 = objc_msgSend(v20, (SEL)&selRef_primaryActionTitle + 5, 0.75);

  OUTLINED_FUNCTION_28_4();
  inited[9].n128_u64[1] = (unint64_t)v17;
  inited[10].n128_u64[0] = (unint64_t)v19;
  inited[10].n128_u64[1] = (unint64_t)v21;
  inited[11].n128_u64[0] = 4;
  id v22 = OUTLINED_FUNCTION_6_25();
  id v23 = OUTLINED_FUNCTION_6_25();
  id v24 = objc_msgSend(v1, sel_whiteColor);
  id v25 = OUTLINED_FUNCTION_6_25();
  id v26 = OUTLINED_FUNCTION_6_25();
  id v27 = objc_msgSend(v1, sel_whiteColor);
  inited[11].n128_u64[1] = (unint64_t)v22;
  inited[12].n128_u64[0] = (unint64_t)v23;
  OUTLINED_FUNCTION_21_10((uint64_t)v27);
  id v28 = OUTLINED_FUNCTION_6_25();
  id v52 = OUTLINED_FUNCTION_5_35(v28);

  id v29 = OUTLINED_FUNCTION_6_25();
  id v30 = OUTLINED_FUNCTION_5_35(v29);

  id v31 = objc_msgSend(v1, sel_labelColor);
  id v32 = OUTLINED_FUNCTION_5_35(v31);

  id v33 = OUTLINED_FUNCTION_6_25();
  id v34 = OUTLINED_FUNCTION_5_35(v33);

  id v35 = OUTLINED_FUNCTION_6_25();
  id v36 = OUTLINED_FUNCTION_5_35(v35);

  id v37 = objc_msgSend(v1, sel_labelColor);
  id v38 = OUTLINED_FUNCTION_5_35(v37);

  inited[16].n128_u64[0] = (unint64_t)v52;
  inited[16].n128_u64[1] = (unint64_t)v30;
  inited[17].n128_u64[0] = (unint64_t)v32;
  inited[17].n128_u64[1] = 0;
  inited[18].n128_u8[0] = 0;
  inited[18].n128_u64[1] = (unint64_t)v34;
  inited[19].n128_u64[0] = (unint64_t)v36;
  inited[19].n128_u64[1] = (unint64_t)v38;
  inited[20].n128_u64[0] = 2;
  id v39 = objc_msgSend(v1, sel_labelColor);
  id v40 = objc_msgSend(v39, sel_colorWithAlphaComponent_, 0.2);

  id v41 = OUTLINED_FUNCTION_15_11();
  id v42 = OUTLINED_FUNCTION_30_5(v41);

  id v43 = (id)static Colors.InCallControls.backgroundBlurEffect;
  id v44 = OUTLINED_FUNCTION_14_11(v53, sel__effectForBlurEffect_vibrancyStyle_);
  id v45 = OUTLINED_FUNCTION_15_11();
  id v46 = OUTLINED_FUNCTION_30_5(v45);

  id v47 = OUTLINED_FUNCTION_15_11();
  id v48 = OUTLINED_FUNCTION_30_5(v47);

  id v49 = objc_msgSend(v1, sel_secondarySystemFillColor);
  id v50 = OUTLINED_FUNCTION_30_5(v49);

  inited[20].n128_u64[1] = (unint64_t)v40;
  inited[21].n128_u64[0] = (unint64_t)v42;
  inited[21].n128_u64[1] = (unint64_t)v43;
  inited[22].n128_u64[0] = (unint64_t)v44;
  inited[22].n128_u8[8] = 1;
  inited[23].n128_u64[0] = (unint64_t)v46;
  inited[23].n128_u64[1] = (unint64_t)v48;
  inited[24].n128_u64[0] = (unint64_t)v50;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = OUTLINED_FUNCTION_19_15();
  static Colors.InCallControls.conversationControls = result;
  return result;
}

{
  uint64_t v0;

  unint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.conversationControls);
  OUTLINED_FUNCTION_1_123();
  return OUTLINED_FUNCTION_2_111();
}

uint64_t *Colors.InCallControls.conversationControls.unsafeMutableAddressor()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.conversationControls;
}

uint64_t static Colors.InCallControls.conversationControls.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for joinButton(uint64_t a1)
{
  return one-time initialization function for joinButton(a1, (uint64_t)&selRef_systemGreenColor, &static Colors.InCallControls.joinButton);
}

{
  return one-time initialization function for audioMuteMac(a1, static ImageResource.joinButton, 0x7475622D6E696F6ALL, 0xEB000000006E6F74);
}

id static UIColor.joinConversation.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemGreenColor);
}

uint64_t *Colors.InCallControls.joinButton.unsafeMutableAddressor()
{
  if (one-time initialization token for joinButton != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.joinButton;
}

uint64_t static Colors.InCallControls.joinButton.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for leaveButton(uint64_t a1)
{
  return one-time initialization function for joinButton(a1, (uint64_t)&selRef_systemRedColor, &static Colors.InCallControls.leaveButton);
}

uint64_t one-time initialization function for joinButton(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, InCallControlButtonConfiguration)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C37696D0);
  id v4 = self;
  id v5 = objc_msgSend(v4, sel_whiteColor);
  id v6 = objc_msgSend(v4, sel_whiteColor);
  id v7 = OUTLINED_FUNCTION_27_4();
  id v8 = objc_msgSend(v4, sel_whiteColor);
  id v9 = objc_msgSend(v4, sel_whiteColor);
  id v10 = OUTLINED_FUNCTION_27_4();
  inited[2].n128_u64[1] = (unint64_t)v5;
  inited[3].n128_u64[0] = (unint64_t)v6;
  inited[3].n128_u64[1] = (unint64_t)v7;
  inited[4].n128_u64[0] = 0;
  inited[4].n128_u8[8] = 0;
  inited[5].n128_u64[0] = (unint64_t)v8;
  inited[5].n128_u64[1] = (unint64_t)v9;
  inited[6].n128_u64[0] = (unint64_t)v10;
  inited[6].n128_u64[1] = 1;
  id v11 = OUTLINED_FUNCTION_29_8();
  id v12 = OUTLINED_FUNCTION_3_43(v11);

  id v13 = OUTLINED_FUNCTION_29_8();
  id v14 = OUTLINED_FUNCTION_3_43(v13);

  id v15 = OUTLINED_FUNCTION_27_4();
  id v16 = OUTLINED_FUNCTION_3_43(v15);

  id v17 = OUTLINED_FUNCTION_29_8();
  id v18 = OUTLINED_FUNCTION_3_43(v17);

  id v19 = OUTLINED_FUNCTION_29_8();
  id v20 = OUTLINED_FUNCTION_3_43(v19);

  id v21 = OUTLINED_FUNCTION_27_4();
  id v22 = OUTLINED_FUNCTION_3_43(v21);

  inited[7].n128_u64[0] = (unint64_t)v12;
  inited[7].n128_u64[1] = (unint64_t)v14;
  inited[8].n128_u64[0] = (unint64_t)v16;
  inited[8].n128_u64[1] = 0;
  inited[9].n128_u8[0] = 0;
  inited[9].n128_u64[1] = (unint64_t)v18;
  inited[10].n128_u64[0] = (unint64_t)v20;
  inited[10].n128_u64[1] = (unint64_t)v22;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  *a3 = result;
  return result;
}

id static UIColor.leaveConversation.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemRedColor);
}

uint64_t *Colors.InCallControls.leaveButton.unsafeMutableAddressor()
{
  if (one-time initialization token for leaveButton != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.leaveButton;
}

uint64_t static Colors.InCallControls.leaveButton.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for localCameraControls()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, InCallControlButtonConfiguration)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C376A6F0);
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_labelColor);
  id v3 = OUTLINED_FUNCTION_31_5();
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  id v4 = (void *)static Colors.InCallControls.backgroundBlurEffect;
  id v5 = self;
  id v6 = v4;
  id v7 = OUTLINED_FUNCTION_14_11(v5, sel__effectForBlurEffect_vibrancyStyle_);
  inited[2].n128_u64[1] = (unint64_t)v2;
  inited[3].n128_u64[0] = (unint64_t)v3;
  inited[3].n128_u64[1] = (unint64_t)v6;
  inited[4].n128_u64[0] = (unint64_t)v7;
  inited[4].n128_u8[8] = 1;
  inited[5].n128_u64[0] = 0;
  inited[5].n128_u64[1] = 0;
  inited[6].n128_u64[0] = 0;
  inited[6].n128_u64[1] = 1;
  id v8 = OUTLINED_FUNCTION_31_5();
  id v9 = OUTLINED_FUNCTION_16_11(v8);

  id v10 = objc_msgSend(v1, sel_labelColor);
  id v11 = OUTLINED_FUNCTION_16_11(v10);

  id v12 = (id)static Colors.InCallControls.backgroundBlurEffect;
  id v13 = objc_msgSend(v5, sel__effectForBlurEffect_vibrancyStyle_, v12, 110);
  inited[7].n128_u64[0] = (unint64_t)v9;
  inited[7].n128_u64[1] = (unint64_t)v11;
  inited[8].n128_u64[0] = (unint64_t)v12;
  inited[8].n128_u64[1] = (unint64_t)v13;
  inited[9].n128_u8[0] = 1;
  inited[9].n128_u64[1] = 0;
  inited[10].n128_u64[0] = 0;
  inited[10].n128_u64[1] = 0;
  inited[11].n128_u64[0] = 4;
  id v14 = OUTLINED_FUNCTION_8_19();
  id v15 = OUTLINED_FUNCTION_8_19();
  id v16 = OUTLINED_FUNCTION_15_11();
  id v17 = OUTLINED_FUNCTION_8_19();
  id v18 = OUTLINED_FUNCTION_8_19();
  id v19 = OUTLINED_FUNCTION_15_11();
  inited[11].n128_u64[1] = (unint64_t)v14;
  inited[12].n128_u64[0] = (unint64_t)v15;
  OUTLINED_FUNCTION_21_10((uint64_t)v19);
  id v20 = OUTLINED_FUNCTION_8_19();
  id v21 = OUTLINED_FUNCTION_16_11(v20);

  id v22 = OUTLINED_FUNCTION_8_19();
  id v23 = OUTLINED_FUNCTION_16_11(v22);

  id v24 = OUTLINED_FUNCTION_15_11();
  id v25 = OUTLINED_FUNCTION_8_19();
  id v26 = OUTLINED_FUNCTION_16_11(v25);

  id v27 = OUTLINED_FUNCTION_8_19();
  id v28 = OUTLINED_FUNCTION_16_11(v27);

  id v29 = OUTLINED_FUNCTION_15_11();
  inited[16].n128_u64[0] = (unint64_t)v21;
  inited[16].n128_u64[1] = (unint64_t)v23;
  inited[17].n128_u64[0] = (unint64_t)v24;
  inited[17].n128_u64[1] = 0;
  inited[18].n128_u8[0] = 0;
  inited[18].n128_u64[1] = (unint64_t)v26;
  inited[19].n128_u64[0] = (unint64_t)v28;
  inited[19].n128_u64[1] = (unint64_t)v29;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = OUTLINED_FUNCTION_19_15();
  static Colors.InCallControls.localCameraControls = result;
  return result;
}

uint64_t *Colors.InCallControls.localCameraControls.unsafeMutableAddressor()
{
  if (one-time initialization token for localCameraControls != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.localCameraControls;
}

uint64_t static Colors.InCallControls.localCameraControls.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for localCameraCollapseControls()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, InCallControlButtonConfiguration)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  *(void *)(inited + 32) = 0;
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_secondarySystemBackgroundColor);
  id v3 = objc_msgSend(v1, sel_secondarySystemBackgroundColor);
  if (one-time initialization token for localCameraControlsBlurEffect != -1) {
    swift_once();
  }
  id v4 = (void *)static Colors.InCallControls.localCameraControlsBlurEffect;
  id v5 = self;
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel__effectForBlurEffect_vibrancyStyle_, v6, 112);
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 64) = v7;
  *(unsigned char *)(inited + 72) = 1;
  *(void *)(inited + 80) = 0;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0;
  *(void *)(inited + 104) = 1;
  id v8 = objc_msgSend(v1, sel_secondarySystemBackgroundColor);
  id v9 = objc_msgSend(v8, sel_colorWithAlphaComponent_, 0.6);

  id v10 = objc_msgSend(v1, sel_secondarySystemBackgroundColor);
  id v11 = objc_msgSend(v10, sel_colorWithAlphaComponent_, 0.6);

  id v12 = (id)static Colors.InCallControls.localCameraControlsBlurEffect;
  id v13 = objc_msgSend(v5, sel__effectForBlurEffect_vibrancyStyle_, v12, 110);
  *(void *)(inited + 112) = v9;
  *(void *)(inited + 120) = v11;
  *(void *)(inited + 128) = v12;
  *(void *)(inited + 136) = v13;
  *(unsigned char *)(inited + 144) = 1;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  *(void *)(inited + 160) = 0;
  *(void *)(inited + 168) = 0;
  *(void *)(inited + 152) = 0;
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static Colors.InCallControls.localCameraCollapseControls = result;
  return result;
}

uint64_t *Colors.InCallControls.localCameraCollapseControls.unsafeMutableAddressor()
{
  if (one-time initialization token for localCameraCollapseControls != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.localCameraCollapseControls;
}

uint64_t static Colors.InCallControls.localCameraCollapseControls.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for pttLeaveButtonBanner(uint64_t a1)
{
  return one-time initialization function for pttLeaveButtonBanner(a1, (SEL *)&selRef_systemRedColor, &static Colors.InCallControls.pttLeaveButtonBanner);
}

uint64_t *Colors.InCallControls.pttLeaveButtonBanner.unsafeMutableAddressor()
{
  if (one-time initialization token for pttLeaveButtonBanner != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.pttLeaveButtonBanner;
}

uint64_t static Colors.InCallControls.pttLeaveButtonBanner.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for pttLeaveButtonFullScreen(uint64_t a1)
{
  return one-time initialization function for pttLeaveButtonFullScreen(a1, (SEL *)&selRef_systemRedColor, &static Colors.InCallControls.pttLeaveButtonFullScreen);
}

uint64_t *Colors.InCallControls.pttLeaveButtonFullScreen.unsafeMutableAddressor()
{
  if (one-time initialization token for pttLeaveButtonFullScreen != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.pttLeaveButtonFullScreen;
}

uint64_t static Colors.InCallControls.pttLeaveButtonFullScreen.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for pttTalkButtonBanner(uint64_t a1)
{
  return one-time initialization function for pttLeaveButtonBanner(a1, (SEL *)&selRef_systemBlueColor, &static Colors.InCallControls.pttTalkButtonBanner);
}

id static UIColor.pttTalk.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemBlueColor);
}

uint64_t *Colors.InCallControls.pttTalkButtonBanner.unsafeMutableAddressor()
{
  if (one-time initialization token for pttTalkButtonBanner != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.pttTalkButtonBanner;
}

uint64_t static Colors.InCallControls.pttTalkButtonBanner.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for pttTalkButtonFullScreen(uint64_t a1)
{
  return one-time initialization function for pttLeaveButtonFullScreen(a1, (SEL *)&selRef_systemBlueColor, &static Colors.InCallControls.pttTalkButtonFullScreen);
}

uint64_t one-time initialization function for pttLeaveButtonFullScreen(uint64_t a1, SEL *a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, ButtonStyle)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C376BA10);
  id v5 = self;
  id v6 = [v5 *a2];
  id v7 = OUTLINED_FUNCTION_4_35();
  id v8 = OUTLINED_FUNCTION_18_14();
  id v9 = OUTLINED_FUNCTION_4_35();
  inited[2].n128_u64[1] = (unint64_t)v6;
  inited[3].n128_u64[0] = 0;
  inited[3].n128_u8[8] = 64;
  inited[4].n128_u64[0] = (unint64_t)v7;
  inited[4].n128_u64[1] = (unint64_t)v8;
  inited[5].n128_u64[0] = 0;
  inited[5].n128_u8[8] = 64;
  inited[6].n128_u64[0] = (unint64_t)v9;
  inited[6].n128_u64[1] = 1;
  id v10 = OUTLINED_FUNCTION_18_14();
  id v11 = OUTLINED_FUNCTION_3_43(v10);

  id v12 = OUTLINED_FUNCTION_4_35();
  id v13 = OUTLINED_FUNCTION_3_43(v12);

  id v14 = OUTLINED_FUNCTION_18_14();
  id v15 = OUTLINED_FUNCTION_3_43(v14);

  id v16 = OUTLINED_FUNCTION_4_35();
  id v17 = OUTLINED_FUNCTION_3_43(v16);

  inited[7].n128_u64[0] = (unint64_t)v11;
  inited[7].n128_u64[1] = 0;
  inited[8].n128_u8[0] = 64;
  inited[8].n128_u64[1] = (unint64_t)v13;
  inited[9].n128_u64[0] = (unint64_t)v15;
  inited[9].n128_u64[1] = 0;
  inited[10].n128_u8[0] = 64;
  inited[10].n128_u64[1] = (unint64_t)v17;
  inited[11].n128_u64[0] = 2;
  id v18 = objc_msgSend(v5, sel_darkGrayColor);
  id v19 = objc_msgSend(v18, sel_colorWithAlphaComponent_, 0.5);

  id v20 = OUTLINED_FUNCTION_4_35();
  id v21 = OUTLINED_FUNCTION_3_43(v20);

  id v22 = objc_msgSend(v5, sel_darkGrayColor);
  id v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.5);

  id v24 = OUTLINED_FUNCTION_4_35();
  id v25 = OUTLINED_FUNCTION_3_43(v24);

  inited[11].n128_u64[1] = (unint64_t)v19;
  inited[12].n128_u64[0] = 0;
  inited[12].n128_u8[8] = 64;
  inited[13].n128_u64[0] = (unint64_t)v21;
  inited[13].n128_u64[1] = (unint64_t)v23;
  inited[14].n128_u64[0] = 0;
  inited[14].n128_u8[8] = 64;
  inited[15].n128_u64[0] = (unint64_t)v25;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  *a3 = result;
  return result;
}

uint64_t *Colors.InCallControls.pttTalkButtonFullScreen.unsafeMutableAddressor()
{
  if (one-time initialization token for pttTalkButtonFullScreen != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.pttTalkButtonFullScreen;
}

uint64_t static Colors.InCallControls.pttTalkButtonFullScreen.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for avLessButton()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, ButtonStyle)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  *(void *)(inited + 32) = 0;
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_secondarySystemFillColor);
  id v3 = objc_msgSend(v1, sel_labelColor);
  id v4 = objc_msgSend(v1, sel_secondarySystemFillColor);
  id v5 = objc_msgSend(v1, sel_labelColor);
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = 0;
  *(unsigned char *)(inited + 56) = 64;
  *(void *)(inited + 64) = v3;
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 80) = 0;
  *(unsigned char *)(inited + 88) = 64;
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = 1;
  id v6 = objc_msgSend(v1, sel_secondarySystemFillColor);
  id v7 = objc_msgSend(v6, sel_colorWithAlphaComponent_, 0.75);

  id v8 = objc_msgSend(v1, sel_labelColor);
  id v9 = objc_msgSend(v1, sel_secondarySystemFillColor);
  id v10 = objc_msgSend(v9, sel_colorWithAlphaComponent_, 0.75);

  id v11 = objc_msgSend(v1, sel_labelColor);
  *(void *)(inited + 112) = v7;
  *(void *)(inited + 120) = 0;
  *(unsigned char *)(inited + 128) = 64;
  *(void *)(inited + 136) = v8;
  *(void *)(inited + 144) = v10;
  *(void *)(inited + 152) = 0;
  *(unsigned char *)(inited + 160) = 64;
  *(void *)(inited + 168) = v11;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static Colors.InCallControls.avLessButton = result;
  return result;
}

uint64_t *Colors.InCallControls.avLessButton.unsafeMutableAddressor()
{
  if (one-time initialization token for avLessButton != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.avLessButton;
}

uint64_t static Colors.InCallControls.avLessButton.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for greenTea3PDeclineButtonBanner(uint64_t a1)
{
  return one-time initialization function for pttLeaveButtonBanner(a1, (SEL *)&selRef_systemRedColor, &static Colors.InCallControls.greenTea3PDeclineButtonBanner);
}

id static UIColor.declineCall.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemRedColor);
}

uint64_t *Colors.InCallControls.greenTea3PDeclineButtonBanner.unsafeMutableAddressor()
{
  if (one-time initialization token for greenTea3PDeclineButtonBanner != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.greenTea3PDeclineButtonBanner;
}

uint64_t static Colors.InCallControls.greenTea3PDeclineButtonBanner.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for greenTea3PAcceptButtonBanner(uint64_t a1)
{
  return one-time initialization function for pttLeaveButtonBanner(a1, (SEL *)&selRef_systemBlueColor, &static Colors.InCallControls.greenTea3PAcceptButtonBanner);
}

uint64_t one-time initialization function for pttLeaveButtonBanner(uint64_t a1, SEL *a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, ButtonStyle)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C376BA10);
  id v5 = [self *a2];
  id v6 = OUTLINED_FUNCTION_4_35();
  id v7 = OUTLINED_FUNCTION_18_14();
  id v8 = OUTLINED_FUNCTION_4_35();
  inited[2].n128_u64[1] = (unint64_t)v5;
  inited[3].n128_u64[0] = 0;
  inited[3].n128_u8[8] = 64;
  inited[4].n128_u64[0] = (unint64_t)v6;
  inited[4].n128_u64[1] = (unint64_t)v7;
  inited[5].n128_u64[0] = 0;
  inited[5].n128_u8[8] = 64;
  inited[6].n128_u64[0] = (unint64_t)v8;
  inited[6].n128_u64[1] = 1;
  id v9 = OUTLINED_FUNCTION_18_14();
  id v10 = OUTLINED_FUNCTION_5_35(v9);

  id v11 = OUTLINED_FUNCTION_4_35();
  id v12 = OUTLINED_FUNCTION_5_35(v11);

  id v13 = OUTLINED_FUNCTION_18_14();
  id v14 = OUTLINED_FUNCTION_5_35(v13);

  id v15 = OUTLINED_FUNCTION_4_35();
  id v16 = OUTLINED_FUNCTION_5_35(v15);

  inited[7].n128_u64[0] = (unint64_t)v10;
  inited[7].n128_u64[1] = 0;
  inited[8].n128_u8[0] = 64;
  inited[8].n128_u64[1] = (unint64_t)v12;
  inited[9].n128_u64[0] = (unint64_t)v14;
  inited[9].n128_u64[1] = 0;
  inited[10].n128_u8[0] = 64;
  inited[10].n128_u64[1] = (unint64_t)v16;
  inited[11].n128_u64[0] = 2;
  id v17 = OUTLINED_FUNCTION_4_35();
  id v18 = OUTLINED_FUNCTION_5_35(v17);

  id v19 = OUTLINED_FUNCTION_4_35();
  id v20 = OUTLINED_FUNCTION_5_35(v19);

  inited[11].n128_u64[1] = 0;
  inited[12].n128_u64[0] = 0;
  inited[12].n128_u8[8] = 3;
  inited[13].n128_u64[1] = 0;
  inited[14].n128_u64[0] = 0;
  inited[13].n128_u64[0] = (unint64_t)v18;
  inited[14].n128_u8[8] = 3;
  inited[15].n128_u64[0] = (unint64_t)v20;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  *a3 = result;
  return result;
}

id static UIColor.acceptGreenTea3PCall.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemBlueColor);
}

uint64_t *Colors.InCallControls.greenTea3PAcceptButtonBanner.unsafeMutableAddressor()
{
  if (one-time initialization token for greenTea3PAcceptButtonBanner != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.greenTea3PAcceptButtonBanner;
}

uint64_t static Colors.InCallControls.greenTea3PAcceptButtonBanner.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

uint64_t one-time initialization function for greenTea3PResumeButton()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, InCallControlButtonConfiguration)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_7_22(inited, (__n128)xmmword_1C37696D0);
  id v2 = self;
  id v3 = OUTLINED_FUNCTION_20_6(v2);
  id v4 = OUTLINED_FUNCTION_0_22();
  if (one-time initialization token for backgroundBlurEffect != -1) {
    swift_once();
  }
  id v5 = (void *)static Colors.InCallControls.backgroundBlurEffect;
  id v6 = self;
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel__effectForBlurEffect_vibrancyStyle_, v7, 111);
  id v9 = OUTLINED_FUNCTION_0_22();
  id v10 = OUTLINED_FUNCTION_0_22();
  id v11 = objc_msgSend(v0, sel_secondarySystemFillColor);
  inited[2].n128_u64[1] = (unint64_t)v3;
  inited[3].n128_u64[0] = (unint64_t)v4;
  inited[3].n128_u64[1] = (unint64_t)v7;
  inited[4].n128_u64[0] = (unint64_t)v8;
  inited[4].n128_u8[8] = 1;
  inited[5].n128_u64[0] = (unint64_t)v9;
  inited[5].n128_u64[1] = (unint64_t)v10;
  inited[6].n128_u64[0] = (unint64_t)v11;
  inited[6].n128_u64[1] = 1;
  id v12 = OUTLINED_FUNCTION_0_22();
  id v13 = OUTLINED_FUNCTION_25_6(v12);

  id v14 = OUTLINED_FUNCTION_0_22();
  id v15 = OUTLINED_FUNCTION_25_6(v14);

  id v16 = (id)static Colors.InCallControls.backgroundBlurEffect;
  id v17 = objc_msgSend(v6, sel__effectForBlurEffect_vibrancyStyle_, v16, 110);
  id v18 = OUTLINED_FUNCTION_0_22();
  id v19 = OUTLINED_FUNCTION_25_6(v18);

  id v20 = OUTLINED_FUNCTION_0_22();
  id v21 = OUTLINED_FUNCTION_25_6(v20);

  id v22 = objc_msgSend(v0, sel_systemFillColor);
  inited[7].n128_u64[0] = (unint64_t)v13;
  inited[7].n128_u64[1] = (unint64_t)v15;
  inited[8].n128_u64[0] = (unint64_t)v16;
  inited[8].n128_u64[1] = (unint64_t)v17;
  inited[9].n128_u8[0] = 1;
  inited[9].n128_u64[1] = (unint64_t)v19;
  inited[10].n128_u64[0] = (unint64_t)v21;
  inited[10].n128_u64[1] = (unint64_t)v22;
  type metadata accessor for UIControlState(0);
  lazy protocol witness table accessor for type UIControlState and conformance UIControlState();
  uint64_t result = OUTLINED_FUNCTION_19_15();
  static Colors.InCallControls.greenTea3PResumeButton = result;
  return result;
}

uint64_t *Colors.InCallControls.greenTea3PResumeButton.unsafeMutableAddressor()
{
  if (one-time initialization token for greenTea3PResumeButton != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.greenTea3PResumeButton;
}

uint64_t static Colors.InCallControls.greenTea3PResumeButton.getter()
{
  return static Colors.ParticipantViews.bottomGradient.getter();
}

id one-time initialization function for collectionViewSectionHeaderTitleLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_secondaryLabelColor, &static Colors.InCallControls.collectionViewSectionHeaderTitleLabel);
}

id static Colors.InCallControls.collectionViewSectionHeaderTitleLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for tableViewCellTitleLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_labelColor, &static Colors.InCallControls.tableViewCellTitleLabel);
}

id static Colors.InCallControls.tableViewCellTitleLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for tableViewCellSubtitleLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_secondaryLabelColor, &static Colors.InCallControls.tableViewCellSubtitleLabel);
}

uint64_t *Colors.InCallControls.tableViewCellSubtitleLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for tableViewCellSubtitleLabel != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.tableViewCellSubtitleLabel;
}

id static Colors.InCallControls.tableViewCellSubtitleLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for tableViewHeaderTitleLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_labelColor, &static Colors.InCallControls.tableViewHeaderTitleLabel);
}

uint64_t *Colors.InCallControls.tableViewHeaderTitleLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for tableViewHeaderTitleLabel != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.tableViewHeaderTitleLabel;
}

id static Colors.InCallControls.tableViewHeaderTitleLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for tableViewHeaderSubtitleLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_secondaryLabelColor, &static Colors.InCallControls.tableViewHeaderSubtitleLabel);
}

void *Colors.InCallControls.tableViewHeaderSubtitleLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for tableViewHeaderSubtitleLabel != -1) {
    swift_once();
  }
  return &static Colors.InCallControls.tableViewHeaderSubtitleLabel;
}

id static Colors.InCallControls.tableViewHeaderSubtitleLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

uint64_t *Colors.MultiwayViewController.background.unsafeMutableAddressor()
{
  if (one-time initialization token for background != -1) {
    swift_once();
  }
  return &static Colors.MultiwayViewController.background;
}

id static Colors.MultiwayViewController.background.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for buttonDefaultBackground(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.ParticipantControls.buttonDefaultBackground);
}

void *Colors.ParticipantControls.buttonDefaultBackground.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonDefaultBackground != -1) {
    swift_once();
  }
  return &static Colors.ParticipantControls.buttonDefaultBackground;
}

id static Colors.ParticipantControls.buttonDefaultBackground.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for buttonDefaultTint(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_systemBlueColor, &static Colors.ParticipantControls.buttonDefaultTint);
}

void *Colors.ParticipantControls.buttonDefaultTint.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonDefaultTint != -1) {
    swift_once();
  }
  return &static Colors.ParticipantControls.buttonDefaultTint;
}

id static Colors.ParticipantControls.buttonDefaultTint.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for buttonBlurBackground()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 0.35);
  static Colors.ParticipantControls.buttonBlurBackground = (uint64_t)result;
  return result;
}

uint64_t *Colors.ParticipantControls.buttonBlurBackground.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonBlurBackground != -1) {
    swift_once();
  }
  return &static Colors.ParticipantControls.buttonBlurBackground;
}

id static Colors.ParticipantControls.buttonBlurBackground.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for buttonBlurTint(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.ParticipantControls.buttonBlurTint);
}

void *Colors.ParticipantControls.buttonBlurTint.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonBlurTint != -1) {
    swift_once();
  }
  return &static Colors.ParticipantControls.buttonBlurTint;
}

id static Colors.ParticipantControls.buttonBlurTint.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for participantBackground()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.2, 0.2, 0.2, 1.0);
  static Colors.Roster.participantBackground = (uint64_t)result;
  return result;
}

uint64_t *Colors.Roster.participantBackground.unsafeMutableAddressor()
{
  if (one-time initialization token for participantBackground != -1) {
    swift_once();
  }
  return &static Colors.Roster.participantBackground;
}

id static Colors.Roster.participantBackground.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for sashBackground()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.301960784, 0.301960784, 0.301960784, 1.0);
  static Colors.Roster.sashBackground = (uint64_t)result;
  return result;
}

uint64_t *Colors.Roster.sashBackground.unsafeMutableAddressor()
{
  if (one-time initialization token for sashBackground != -1) {
    swift_once();
  }
  return &static Colors.Roster.sashBackground;
}

id static Colors.Roster.sashBackground.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for sashSelectedBackground(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_lightGrayColor, &static Colors.Roster.sashSelectedBackground);
}

void *Colors.Roster.sashSelectedBackground.unsafeMutableAddressor()
{
  if (one-time initialization token for sashSelectedBackground != -1) {
    swift_once();
  }
  return &static Colors.Roster.sashSelectedBackground;
}

id static Colors.Roster.sashSelectedBackground.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for sashText(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.Roster.sashText);
}

void *Colors.Roster.sashText.unsafeMutableAddressor()
{
  if (one-time initialization token for sashText != -1) {
    swift_once();
  }
  return &static Colors.Roster.sashText;
}

id static Colors.Roster.sashText.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for sashSelectedText(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_blackColor, &static Colors.Roster.sashSelectedText);
}

void *Colors.Roster.sashSelectedText.unsafeMutableAddressor()
{
  if (one-time initialization token for sashSelectedText != -1) {
    swift_once();
  }
  return &static Colors.Roster.sashSelectedText;
}

id static Colors.Roster.sashSelectedText.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for actionCellTintColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.64, 0.64, 0.64, 1.0);
  static Colors.Roster.actionCellTintColor = (uint64_t)result;
  return result;
}

uint64_t *Colors.Roster.actionCellTintColor.unsafeMutableAddressor()
{
  if (one-time initialization token for actionCellTintColor != -1) {
    swift_once();
  }
  return &static Colors.Roster.actionCellTintColor;
}

id static Colors.Roster.actionCellTintColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for actionCellBackgroundColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.21, 0.21, 0.21, 0.6);
  static Colors.Roster.actionCellBackgroundColor = (uint64_t)result;
  return result;
}

uint64_t *Colors.Roster.actionCellBackgroundColor.unsafeMutableAddressor()
{
  if (one-time initialization token for actionCellBackgroundColor != -1) {
    swift_once();
  }
  return &static Colors.Roster.actionCellBackgroundColor;
}

id static Colors.Roster.actionCellBackgroundColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

uint64_t one-time initialization function for background()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  MEMORY[0x1F4188790](v0);
  id v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v3 + 104))(v2, *MEMORY[0x1E4F3EB10]);
  uint64_t result = MEMORY[0x1C87725D0](v2, 0.117647059, 0.117647059, 0.117647059, 1.0);
  static Colors.Captions.background = result;
  return result;
}

uint64_t *Colors.Captions.background.unsafeMutableAddressor()
{
  if (one-time initialization token for background != -1) {
    swift_once();
  }
  return &static Colors.Captions.background;
}

uint64_t static Colors.Captions.background.getter()
{
  return static Colors.Captions.background.getter();
}

{
  char v0;
  uint64_t vars8;

  OUTLINED_FUNCTION_13_9();
  if (!v0) {
    swift_once();
  }
  return swift_retain();
}

uint64_t one-time initialization function for divider()
{
  static Color.gray.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  static Colors.Captions.divider = v0;
  return result;
}

uint64_t *Colors.Captions.divider.unsafeMutableAddressor()
{
  if (one-time initialization token for divider != -1) {
    swift_once();
  }
  return &static Colors.Captions.divider;
}

uint64_t static Colors.Captions.divider.getter()
{
  return static Colors.Captions.background.getter();
}

id one-time initialization function for lowConfidenceTermUnderline(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_systemBlueColor, &static Colors.Captions.lowConfidenceTermUnderline);
}

uint64_t *Colors.Captions.lowConfidenceTermUnderline.unsafeMutableAddressor()
{
  if (one-time initialization token for lowConfidenceTermUnderline != -1) {
    swift_once();
  }
  return &static Colors.Captions.lowConfidenceTermUnderline;
}

id static Colors.Captions.lowConfidenceTermUnderline.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

uint64_t one-time initialization function for progressBar()
{
  uint64_t result = static Color.white.getter();
  static Colors.Captions.progressBar = result;
  return result;
}

uint64_t *Colors.Captions.progressBar.unsafeMutableAddressor()
{
  if (one-time initialization token for progressBar != -1) {
    swift_once();
  }
  return &static Colors.Captions.progressBar;
}

uint64_t static Colors.Captions.progressBar.getter()
{
  return static Colors.Captions.background.getter();
}

id static Colors.clear.getter()
{
  id v0 = objc_msgSend(self, sel_clearColor);
  return v0;
}

void *Colors.AudioVisualization.alphaDecay.unsafeMutableAddressor()
{
  return &static Colors.AudioVisualization.alphaDecay;
}

float static Colors.AudioVisualization.alphaDecay.getter()
{
  return 0.75;
}

void *Colors.AudioVisualization.minAlpha.unsafeMutableAddressor()
{
  return &static Colors.AudioVisualization.minAlpha;
}

float static Colors.AudioVisualization.minAlpha.getter()
{
  return 0.35;
}

void *Colors.AudioVisualization.reducedMotionMinAlpha.unsafeMutableAddressor()
{
  return &static Colors.AudioVisualization.reducedMotionMinAlpha;
}

double static Colors.AudioVisualization.reducedMotionMinAlpha.getter()
{
  return 0.0;
}

float static Colors.AudioVisualization.reducedMotionAlpha(_:)(float a1)
{
  if (a1 <= 0.5) {
    return powf(a1 + a1, 3.0);
  }
  else {
    return 1.0;
  }
}

void *Colors.AudioVisualization.gradientInterpolationPercentage.unsafeMutableAddressor()
{
  return &static Colors.AudioVisualization.gradientInterpolationPercentage;
}

double static Colors.AudioVisualization.gradientInterpolationPercentage.getter()
{
  return 0.25;
}

uint64_t one-time initialization function for uniqueGradients()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UIColor]>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C376BA20;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C3769610;
  *(void *)(v1 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.345098039, 0.925490196, 1.0, 1.0);
  *(void *)(v1 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.156862745, 0.737254902, 1.0, 1.0);
  specialized Array._endMutation()();
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769610;
  *(void *)(v2 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.356862745, 0.968627451, 0.654901961, 1.0);
  *(void *)(v2 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.0509803922, 0.741176471, 0.17254902, 1.0);
  specialized Array._endMutation()();
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769610;
  *(void *)(v3 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 0.368627451, 0.533333333, 1.0);
  *(void *)(v3 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 0.125490196, 0.290196078, 1.0);
  specialized Array._endMutation()();
  *(void *)(v0 + 48) = v3;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C3769610;
  *(void *)(v4 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 0.91372549, 0.247058824, 1.0);
  *(void *)(v4 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 0.674509804, 0.00784313725, 1.0);
  specialized Array._endMutation()();
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769610;
  *(void *)(v5 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.650980392, 0.639215686, 1.0, 1.0);
  *(void *)(v5 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.450980392, 0.439215686, 1.0, 1.0);
  specialized Array._endMutation()();
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769610;
  *(void *)(v6 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.266666667, 0.674509804, 1.0, 1.0);
  *(void *)(v6 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.0274509804, 0.435294118, 1.0, 1.0);
  specialized Array._endMutation()();
  *(void *)(v0 + 72) = v6;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769610;
  *(void *)(v7 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.996078431, 0.678431373, 0.349019608, 1.0);
  *(void *)(v7 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 0.325490196, 0.192156863, 1.0);
  specialized Array._endMutation()();
  *(void *)(v0 + 80) = v7;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C3769610;
  *(void *)(v8 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.988235294, 0.988235294, 0.345098039, 1.0);
  *(void *)(v8 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 1.0, 0.925490196, 0.00784313725, 1.0);
  uint64_t result = specialized Array._endMutation()();
  *(void *)(v0 + 88) = v8;
  static Colors.ParticipantGradients.uniqueGradients = (_UNKNOWN *)v0;
  return result;
}

#error "1C30419F8: call analysis failed (funcsize=31)"

uint64_t static Colors.ParticipantGradients.gradient(for:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_value);
  unint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  specialized Sequence.reduce<A>(_:_:)(0, v2, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for gradients != -1) {
    uint64_t result = swift_once();
  }
  if (*((void *)static Colors.ParticipantGradients.gradients + 2))
  {
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return a1;
  }
  uint64_t v7 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4 << v7;
  uint64_t v15 = a3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v9 = 15;
  while (1)
  {
    unint64_t result = v9;
    if ((v9 & 0xC) == v8) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a2, a3);
    }
    unint64_t v11 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      int v12 = result;
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v14[0] = a2;
      v14[1] = v15;
      int v12 = *((unsigned __int8 *)v14 + v11);
    }
    else
    {
      unint64_t result = v13;
      if ((a2 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      int v12 = *(unsigned __int8 *)(result + v11);
    }
    if ((v9 & 0xC) == v8)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a2, a3);
      unint64_t v9 = result;
      if ((a3 & 0x1000000000000000) == 0)
      {
LABEL_19:
        unint64_t v9 = (v9 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_24;
      }
    }
    else if ((a3 & 0x1000000000000000) == 0)
    {
      goto LABEL_19;
    }
    if (v4 <= v9 >> 16) {
      goto LABEL_27;
    }
    unint64_t v9 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    a1 = v12 ^ a1;
    if (4 * v4 == v9 >> 14) {
      return a1;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t *Colors.ParticipantGradients.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  return &static Colors.ParticipantGradients.default;
}

uint64_t static Colors.ParticipantGradients.default.getter()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Colors.ParticipantGradients.default.setter(uint64_t a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  swift_beginAccess();
  static Colors.ParticipantGradients.default = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Colors.ParticipantGradients.default.modify())()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CallRecordingPillViewController.cancellable.modify;
}

id one-time initialization function for borderColor(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_darkGrayColor, &static Colors.AnnotationDisc.borderColor);
}

void *Colors.AnnotationDisc.borderColor.unsafeMutableAddressor()
{
  if (one-time initialization token for borderColor != -1) {
    swift_once();
  }
  return &static Colors.AnnotationDisc.borderColor;
}

id static Colors.AnnotationDisc.borderColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for fillColor(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_lightGrayColor, &static Colors.AnnotationDisc.fillColor);
}

void *Colors.AnnotationDisc.fillColor.unsafeMutableAddressor()
{
  if (one-time initialization token for fillColor != -1) {
    swift_once();
  }
  return &static Colors.AnnotationDisc.fillColor;
}

id static Colors.AnnotationDisc.fillColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for activeButtonTintColor(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.PeoplePickerViewController.activeButtonTintColor);
}

id static Colors.PeoplePickerViewController.activeButtonTintColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

{
  void **v0;
  char v1;
  void *v2;
  uint64_t vars8;

  OUTLINED_FUNCTION_13_9();
  if (!v1) {
    swift_once();
  }
  unint64_t v2 = *v0;
  return v2;
}

id one-time initialization function for inactiveButtonTintColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 1.0, 0.3);
  static Colors.PeoplePickerViewController.inactiveButtonTintColor = (uint64_t)result;
  return result;
}

id static Colors.PeoplePickerViewController.inactiveButtonTintColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for activeButtonBackgroundColor(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_systemGreenColor, &static Colors.PeoplePickerViewController.activeButtonBackgroundColor);
}

id static Colors.PeoplePickerViewController.activeButtonBackgroundColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for inactiveButtonBackgroundColor(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_darkGrayColor, &static Colors.PeoplePickerViewController.inactiveButtonBackgroundColor);
}

id static Colors.PeoplePickerViewController.inactiveButtonBackgroundColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for audioActiveTintColor(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_systemGreenColor, &static Colors.PeoplePickerViewController.audioActiveTintColor);
}

id static Colors.PeoplePickerViewController.audioActiveTintColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for audioActiveBackgroundColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, 0.19, 0.25, 0.17, 1.0);
  static Colors.PeoplePickerViewController.audioActiveBackgroundColor = (uint64_t)result;
  return result;
}

id static Colors.PeoplePickerViewController.audioActiveBackgroundColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for foregroundColor()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 0.509803922, 1.0);
  static Colors.Notices.foregroundColor = (uint64_t)result;
  return result;
}

uint64_t *Colors.Notices.foregroundColor.unsafeMutableAddressor()
{
  if (one-time initialization token for foregroundColor != -1) {
    swift_once();
  }
  return &static Colors.Notices.foregroundColor;
}

id static Colors.Notices.foregroundColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for subjectColor(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.Notices.subjectColor);
}

uint64_t *Colors.Notices.subjectColor.unsafeMutableAddressor()
{
  if (one-time initialization token for subjectColor != -1) {
    swift_once();
  }
  return &static Colors.Notices.subjectColor;
}

id static Colors.Notices.subjectColor.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for channelNameLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.PTT.channelNameLabel);
}

{
  return one-time initialization function for screenShareInfoFullScreen(a1, MEMORY[0x1E4FB2928], &static Fonts.PTT.channelNameLabel);
}

uint64_t *Colors.PTT.channelNameLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for channelNameLabel != -1) {
    swift_once();
  }
  return &static Colors.PTT.channelNameLabel;
}

id static Colors.PTT.channelNameLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for disclosureButtonLabel()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 1.0, 0.5);
  static Colors.PTT.disclosureButtonLabel = (uint64_t)result;
  return result;
}

uint64_t *Colors.PTT.disclosureButtonLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for disclosureButtonLabel != -1) {
    swift_once();
  }
  return &static Colors.PTT.disclosureButtonLabel;
}

id static Colors.PTT.disclosureButtonLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for buttonLabel(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.PTT.buttonLabel);
}

{
  return one-time initialization function for screenShareInfoFullScreen(a1, MEMORY[0x1E4FB28D8], &static Fonts.DebugOverlay.buttonLabel);
}

uint64_t *Colors.PTT.buttonLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonLabel != -1) {
    swift_once();
  }
  return &static Colors.PTT.buttonLabel;
}

id static Colors.PTT.buttonLabel.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for buttonLabelDisabled(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_darkGrayColor, &static Colors.PTT.buttonLabelDisabled);
}

uint64_t *Colors.PTT.buttonLabelDisabled.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonLabelDisabled != -1) {
    swift_once();
  }
  return &static Colors.PTT.buttonLabelDisabled;
}

id static Colors.PTT.buttonLabelDisabled.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

void one-time initialization function for pttButtonDisabledSymbol()
{
  id v0 = objc_msgSend(self, sel_whiteColor);
  id v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.5);

  static Colors.PTT.pttButtonDisabledSymbol = (uint64_t)v1;
}

uint64_t *Colors.PTT.pttButtonDisabledSymbol.unsafeMutableAddressor()
{
  if (one-time initialization token for pttButtonDisabledSymbol != -1) {
    swift_once();
  }
  return &static Colors.PTT.pttButtonDisabledSymbol;
}

id static Colors.PTT.pttButtonDisabledSymbol.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id one-time initialization function for pttButtonSymbol(uint64_t a1)
{
  return one-time initialization function for screenShareNameLabel(a1, (SEL *)&selRef_whiteColor, &static Colors.PTT.pttButtonSymbol);
}

id one-time initialization function for screenShareNameLabel(uint64_t a1, SEL *a2, void *a3)
{
  id result = [self *a2];
  *a3 = result;
  return result;
}

uint64_t *Colors.PTT.pttButtonSymbol.unsafeMutableAddressor()
{
  if (one-time initialization token for pttButtonSymbol != -1) {
    swift_once();
  }
  return &static Colors.PTT.pttButtonSymbol;
}

id static Colors.PTT.pttButtonSymbol.getter()
{
  return static Colors.PeoplePickerViewController.activeButtonTintColor.getter();
}

id static UIColor.acceptCall.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemGreenColor);
}

id static UIColor.callAgain.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemGreenColor);
}

id static UIColor.continueHandoff.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemGreenColor);
}

id static UIColor.lagunaHandoff.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_whiteColor);
}

id static UIColor.acceptVoIPCall.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemBlueColor);
}

id static UIColor.missedCallTitle.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemRedColor);
}

id static UIColor.close.getter()
{
  return static UIColor.close.getter(0.8);
}

id static UIColor.acceptScreenShare.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_whiteColor);
}

id static UIColor.incomingScreenShareBackground.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemIndigoColor);
}

id static UIColor.denyScreenShareBackground.getter()
{
  return static UIColor.close.getter(0.5);
}

id static UIColor.close.getter(double a1)
{
  id v2 = objc_msgSend(self, sel_systemGrayColor);
  id v3 = objc_msgSend(v2, sel_colorWithAlphaComponent_, a1);

  return v3;
}

id static UIColor.callIsRecording.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_systemRedColor);
}

id static UIColor.remoteWaveform.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_greenColor);
}

id static UIColor.localWaveform.getter()
{
  return static UIColor.joinConversation.getter((SEL *)&selRef_orangeColor);
}

id static UIColor.joinConversation.getter(SEL *a1)
{
  id v1 = [self *a1];
  return v1;
}

void type metadata accessor for Colors()
{
}

void type metadata accessor for Colors.ShareView()
{
}

void type metadata accessor for Colors.ParticipantViews()
{
}

void type metadata accessor for Colors.MostActiveParticipantView()
{
}

void type metadata accessor for Colors.ParticipantGridView()
{
}

void type metadata accessor for Colors.LocalParticipantView()
{
}

void type metadata accessor for Colors.InCallControls()
{
}

void type metadata accessor for Colors.MultiwayViewController()
{
}

void type metadata accessor for Colors.ParticipantControls()
{
}

void type metadata accessor for Colors.Roster()
{
}

void type metadata accessor for Colors.Captions()
{
}

void type metadata accessor for Colors.AudioVisualization()
{
}

void type metadata accessor for Colors.ParticipantGradients()
{
}

void type metadata accessor for Colors.AnnotationDisc()
{
}

void type metadata accessor for Colors.PeoplePickerViewController()
{
}

void type metadata accessor for Colors.Notices()
{
}

void type metadata accessor for Colors.PTT()
{
}

unint64_t lazy protocol witness table accessor for type UIControlState and conformance UIControlState()
{
  unint64_t result = lazy protocol witness table cache variable for type UIControlState and conformance UIControlState;
  if (!lazy protocol witness table cache variable for type UIControlState and conformance UIControlState)
  {
    type metadata accessor for UIControlState(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIControlState and conformance UIControlState);
  }
  return result;
}

BOOL static CallScreeningEndingState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of CallScreening.EndingAction((long long *)a1, (uint64_t)&v11);
  outlined init with take of CallScreening.EndingAction((long long *)a2, (uint64_t)&v10);
  outlined init with take of CallScreening.EndingAction(&v11, (uint64_t)&v12);
  if (v14)
  {
    if (v14 != 1)
    {
      outlined init with take of CallScreening.EndingAction(&v10, (uint64_t)&v15);
      if (v16 != 2 || v15 != 0) {
        return 0;
      }
      return specialized static CKStateMachineContainer.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24));
    }
    uint64_t v4 = v12;
    uint64_t v5 = v13;
    outlined init with take of CallScreening.EndingAction(&v10, (uint64_t)&v15);
    if (v16 != 1) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = v12;
    uint64_t v5 = v13;
    outlined init with take of CallScreening.EndingAction(&v10, (uint64_t)&v15);
    if (v16) {
      return 0;
    }
  }
  if (v4 == (void)v15 && v5 == *((void *)&v15 + 1)) {
    return specialized static CKStateMachineContainer.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24));
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v8 = 0;
  if (v7) {
    return specialized static CKStateMachineContainer.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24));
  }
  return v8;
}

uint64_t CallScreeningEndingState.endingAction.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of CallScreening.EndingAction(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return v1;
}

uint64_t CallScreeningEndingState.stateMachineContainer.getter()
{
  return swift_retain();
}

void (*CallScreeningEndingState.validation.getter(uint64_t a1))(long long *a1)
{
  id v3 = (_OWORD *)swift_allocObject();
  long long v4 = *v1;
  long long v5 = v1[1];
  v3[1] = *(_OWORD *)(a1 + 16);
  uint64_t v3[2] = v4;
  long long v6 = v1[2];
  v3[3] = v5;
  void v3[4] = v6;
  outlined init with take of CallScreening.EndingAction(v1, (uint64_t)v8);
  outlined retain of CallScreening.EndingAction((uint64_t)v8);
  swift_retain();
  swift_retain();
  return partial apply for closure #1 in CallScreeningEndingState.validation.getter;
}

void closure #1 in CallScreeningEndingState.validation.getter(long long *a1, long long *a2)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v10);
  if (v11 >> 61 != 5)
  {
    char v3 = 0;
    v11 &= 0x1FFFFFFFFFFFFFFFuLL;
    goto LABEL_3;
  }
  v11 &= 0x1FFFFFFFFFFFFFFFuLL;
  v12[0] = v10[0];
  v12[1] = v10[1];
  v12[2] = v10[2];
  outlined init with take of CallScreening.EndingAction(v12, (uint64_t)&v13);
  outlined init with take of CallScreening.EndingAction(a2, (uint64_t)&v14);
  outlined init with take of CallScreening.EndingAction(&v13, (uint64_t)&v21);
  if (!v23)
  {
    uint64_t v5 = v21;
    uint64_t v6 = v22;
    outlined init with take of CallScreening.EndingAction(&v14, (uint64_t)v15);
    if (v16) {
      goto LABEL_20;
    }
    uint64_t v7 = v15[0];
    uint64_t v8 = v15[1];
    goto LABEL_12;
  }
  if (v23 == 1)
  {
    uint64_t v5 = v21;
    uint64_t v6 = v22;
    outlined init with take of CallScreening.EndingAction(&v14, (uint64_t)v17);
    if (v18 != 1) {
      goto LABEL_20;
    }
    uint64_t v7 = v17[0];
    uint64_t v8 = v17[1];
LABEL_12:
    BOOL v9 = v5 == v7 && v6 == v8;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_21;
    }
LABEL_20:
    char v3 = 0;
    goto LABEL_3;
  }
  outlined init with take of CallScreening.EndingAction(&v14, (uint64_t)&v19);
  if (v20 != 2 || v19 != 0) {
    goto LABEL_20;
  }
LABEL_21:
  char v3 = 1;
LABEL_3:
  lazy protocol witness table accessor for type CKStateMachineError and conformance CKStateMachineError();
  long long v4 = (void *)swift_allocError();
  if (v3) {

  }
  else {
    swift_willThrow();
  }
}

void CallScreeningEndingState.init(prevState:endingAction:endCall:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_5_36(a1, a2, a3, a4, a5, a6, a7, a8, v8);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
  swift_allocObject();
  swift_weakInit();
  OUTLINED_FUNCTION_13_10();
}

{
  long long v8;

  OUTLINED_FUNCTION_5_36(a1, a2, a3, a4, a5, a6, a7, a8, v8);
  swift_release();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
  swift_allocObject();
  swift_weakInit();
  OUTLINED_FUNCTION_13_10();
}

uint64_t CallScreeningEndingState.willExit(to:)(void *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = v2[1];
  v35[0] = *v2;
  v35[1] = v12;
  _OWORD v35[2] = v2[2];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = CallScreeningState.stateMachine.getter(a2, WitnessTable);
  if (result)
  {
    uint64_t v32 = v8;
    uint64_t v33 = v6;
    outlined init with take of CallScreening.EndingAction(v2, (uint64_t)v35);
    (*(void (**)(void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 16));
    outlined retain of CallScreening.EndingAction((uint64_t)v35);
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    outlined retain of CallScreening.EndingAction((uint64_t)v35);
    swift_retain();
    swift_retain();
    outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc();
      int v29 = v17;
      uint64_t v19 = v18;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v36 = v30;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v31 = v3;
      os_log_t v28 = v15;
      uint64_t v20 = CallScreeningEndingState.description.getter();
      unint64_t v22 = v21;
      outlined release of CallScreening.EndingAction((uint64_t)v35);
      swift_release();
      swift_release();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of CallScreening.EndingAction((uint64_t)v35);
      swift_release();
      swift_release();
      *(_WORD *)(v19 + 12) = 2082;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
      unint64_t v23 = CallScreening.State.description.getter();
      unint64_t v25 = v24;
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      os_log_t v26 = v28;
      _os_log_impl(&dword_1C2F90000, v28, (os_log_type_t)v29, "%{public}s Exiting to %{public}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
      swift_unknownObjectRelease();
    }
    else
    {
      outlined release of CallScreening.EndingAction((uint64_t)v35);
      swift_release();
      swift_release();
      outlined release of CallScreening.EndingAction((uint64_t)v35);
      swift_release();
      swift_release();
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      swift_unknownObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v33);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CallScreeningEndingState.enteredState()()
{
  id v2 = (_OWORD *)v1;
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v83 = v6;
  uint64_t v84 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  id v73 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  long long v12 = (char *)&v69 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  long long v15 = (char *)&v69 - v14;
  MEMORY[0x1F4188790](v13);
  long long v16 = *(_OWORD *)(v1 + 16);
  v86[0] = *(_OWORD *)v1;
  v86[1] = v16;
  v86[2] = *(_OWORD *)(v1 + 32);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v85 = CallScreeningState.stateMachine.getter(v3, WitnessTable);
  if (v85)
  {
    id v69 = v15;
    id v70 = v12;
    uint64_t v18 = *(void *)v1;
    uint64_t v19 = *(void *)(v1 + 8);
    int v20 = *(unsigned __int8 *)(v1 + 16);
    uint64_t v21 = *(void *)(v1 + 24);
    uint64_t v22 = *(void *)(v1 + 40);
    uint64_t v23 = *(void *)(v3 + 24);
    unint64_t v24 = *(void (**)(void))(v23 + 16);
    uint64_t v81 = *(void *)(v3 + 16);
    uint64_t v77 = v23 + 16;
    uint64_t v78 = v23;
    uint64_t v76 = v24;
    v24();
    uint64_t v74 = v19;
    LODWORD(v75) = v20;
    outlined copy of CallScreening.EndingAction(v18, v19, v20);
    uint64_t v79 = v21;
    swift_retain();
    uint64_t v80 = v22;
    swift_retain();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    os_log_t v28 = &protocol conformance descriptor for RejectedRemoteControlRequesetContext;
    id v72 = v2;
    uint64_t v71 = v18;
    if (v27)
    {
      int v29 = (uint8_t *)swift_slowAlloc();
      *(void *)&v86[0] = swift_slowAlloc();
      *(_DWORD *)int v29 = 136446210;
      uint64_t v30 = CallScreeningEndingState.description.getter();
      LODWORD(v28) = v31;
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v86);
      OUTLINED_FUNCTION_9_19(v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_11_16();
      swift_release();
      _os_log_impl(&dword_1C2F90000, v25, v26, "EnteredState %{public}s", v29, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      OUTLINED_FUNCTION_11_16();
      swift_release();
    }

    uint64_t v33 = *(void (**)(void))(v84 + 8);
    OUTLINED_FUNCTION_15();
    v33();
    if (v28)
    {
      if (v28 == 1)
      {
        uint64_t v75 = v33;
        swift_bridgeObjectRetain();
        uint64_t v34 = OUTLINED_FUNCTION_3_44();
        v35(v34);
        swift_bridgeObjectRetain_n();
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v36, v37))
        {
          id v38 = (uint8_t *)swift_slowAlloc();
          *(void *)&v86[0] = swift_slowAlloc();
          *(_DWORD *)id v38 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v39 = v71;
          uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v18, (uint64_t *)v86);
          OUTLINED_FUNCTION_9_19(v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_12_17();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2F90000, v36, v37, "Ending State EnteredState() will end call %{public}s", v38, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {
          uint64_t v39 = v71;
          OUTLINED_FUNCTION_12_17();
        }

        OUTLINED_FUNCTION_15();
        v61();
        static TaskPriority.userInitiated.getter();
        uint64_t v62 = type metadata accessor for TaskPriority();
        OUTLINED_FUNCTION_17_14(v62);
        outlined copy of CallScreening.EndingAction(v39, v18, 1u);
        uint64_t v63 = one-time initialization token for shared;
        swift_retain();
        swift_retain();
        swift_unknownObjectRetain();
        if (v63 != -1) {
          swift_once();
        }
        lazy protocol witness table accessor for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType();
        id v64 = (void *)swift_allocObject();
        id v65 = OUTLINED_FUNCTION_16_12(v64);
        id v66 = v72;
        long long v67 = v72[1];
        *((_OWORD *)v65 + 3) = *v72;
        *((_OWORD *)v65 + 4) = v67;
        *((_OWORD *)v65 + 5) = v66[2];
        v65[12] = v39;
        v65[13] = v18;
        v65[14] = v85;
        swift_retain();
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
      }
      else
      {
        uint64_t v50 = OUTLINED_FUNCTION_3_44();
        v51(v50);
        id v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          id v54 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v54 = 0;
          _os_log_impl(&dword_1C2F90000, v52, v53, "Ending State EnteredState() will passthrough to listening state", v54, 2u);
          OUTLINED_FUNCTION_3();
        }

        OUTLINED_FUNCTION_15();
        v33();
        static TaskPriority.userInitiated.getter();
        uint64_t v55 = type metadata accessor for TaskPriority();
        OUTLINED_FUNCTION_17_14(v55);
        uint64_t v56 = one-time initialization token for shared;
        swift_retain();
        swift_retain();
        swift_unknownObjectRetain();
        if (v56 != -1) {
          swift_once();
        }
        lazy protocol witness table accessor for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType();
        id v57 = (void *)swift_allocObject();
        id v58 = OUTLINED_FUNCTION_16_12(v57);
        v58[6] = v85;
        id v59 = v72;
        long long v60 = v72[1];
        *(_OWORD *)(v58 + 7) = *v72;
        *(_OWORD *)(v58 + 9) = v60;
        *(_OWORD *)(v58 + 11) = v59[2];
        swift_retain();
        _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v82, (uint64_t)&async function pointer to partial apply for closure #2 in CallScreeningEndingState.enteredState(), v56);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRetain();
      id v41 = v70;
      uint64_t v42 = OUTLINED_FUNCTION_3_44();
      v43(v42);
      swift_bridgeObjectRetain();
      id v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v75 = v33;
        id v47 = (uint8_t *)v46;
        *(void *)&v86[0] = swift_slowAlloc();
        *(_DWORD *)id v47 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v48 = v71;
        uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v18, (uint64_t *)v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_14_12(v48);
        OUTLINED_FUNCTION_14_12(v48);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v44, v45, "Ending State EnteredState() will wait for %{public}s to disconnect", v47, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();

        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_15();
        v49();
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v68 = v71;
        OUTLINED_FUNCTION_14_12(v71);
        OUTLINED_FUNCTION_14_12(v68);

        ((void (*)(char *, uint64_t))v33)(v41, v83);
      }
    }
  }
}

uint64_t closure #1 in CallScreeningEndingState.enteredState()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[6] = a8;
  v8[7] = v17;
  v8[4] = a6;
  v8[5] = a7;
  v8[3] = a5;
  uint64_t v12 = type metadata accessor for Logger();
  v8[8] = v12;
  v8[9] = *(void *)(v12 - 8);
  v8[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  v8[11] = static CKStateMachineActor.shared;
  long long v15 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a4 + 32) + **(int **)(a4 + 32));
  uint64_t v13 = (void *)swift_task_alloc();
  v8[12] = v13;
  *uint64_t v13 = v8;
  v13[1] = closure #1 in CallScreeningEndingState.enteredState();
  return v15(a5, a6);
}

uint64_t closure #1 in CallScreeningEndingState.enteredState()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 88);
    return MEMORY[0x1F4188298](closure #1 in CallScreeningEndingState.enteredState(), v7, 0);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v8();
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  (*(void (**)(void))(*(void *)(v0 + 56) + 16))(*(void *)(v0 + 48));
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v12 = *(id *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 72);
    uint64_t v14 = *(void *)(v0 + 64);
    long long v15 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 24);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v1, v2, "Ending State EnteredState() will end call %{public}s and wait for it to disconnect", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v6, -1, -1);
    MEMORY[0x1C87760E0](v5, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 64);

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v10();
}

uint64_t closure #2 in CallScreeningEndingState.enteredState()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  _OWORD v7[3] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static CKStateMachineActor.shared;
  v7[6] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #2 in CallScreeningEndingState.enteredState(), v8, 0);
}

void closure #2 in CallScreeningEndingState.enteredState()()
{
  uint64_t v6 = v0[5];
  uint64_t v1 = type metadata accessor for CallScreeningEndingState();
  CallScreeningEndingState.validation.getter(v1);
  v0[7] = v2;
  uint64_t v4 = *(void *)(v6 + 32) + **(int **)(v6 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #2 in CallScreeningEndingState.enteredState();
  OUTLINED_FUNCTION_8_20();
  __asm { BRAA            X9, X16 }
}

uint64_t closure #2 in CallScreeningEndingState.enteredState()()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 48);
    return MEMORY[0x1F4188298](closure #2 in CallScreeningEndingState.enteredState(), v7, 0);
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_6();
    return v8();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t CallScreeningEndingState.update(with:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[15] = v2;
  v1[16] = v0;
  v1[14] = v3;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CKStateMachineActor.shared;
  v1[17] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](CallScreeningEndingState.update(with:), v4, 0);
}

{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  long long v3;
  long long v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;

  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(_OWORD **)(v0 + 128);
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = CallScreeningState.stateMachine.getter(v2, WitnessTable);
  *(void *)(v0 + 144) = v6;
  if (v6)
  {
    outlined init with take of CallScreening.EndingAction(*(long long **)(v0 + 128), v0 + 88);
    outlined init with take of CallScreening.EndingAction((long long *)(v0 + 88), v0 + 64);
    if (*(unsigned __int8 *)(v0 + 80) <= 1u)
    {
      uint64_t v7 = *(void *)(v0 + 112);
      if (*(void *)(v7 + 16) == *(void *)(v0 + 64) && *(void *)(v7 + 24) == *(void *)(v0 + 72))
      {
LABEL_9:
        if (*(unsigned char *)(v7 + 32) == 6)
        {
          uint64_t v9 = *(void *)(v0 + 120);
          CallScreeningEndingState.validation.getter(v9);
          *(void *)(v0 + 152) = v10;
          uint64_t v14 = *(void *)(*(void *)(v9 + 24) + 32) + **(int **)(*(void *)(v9 + 24) + 32);
          uint64_t v11 = (void *)swift_task_alloc();
          *(void *)(v0 + 160) = v11;
          *uint64_t v11 = v0;
          v11[1] = CallScreeningEndingState.update(with:);
          OUTLINED_FUNCTION_8_20();
          __asm { BRAA            X9, X16 }
        }
        goto LABEL_13;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v7 = *(void *)(v0 + 112);
        goto LABEL_9;
      }
    }
LABEL_13:
    swift_unknownObjectRelease();
  }
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 136);
    uint64_t v8 = CallScreeningEndingState.update(with:);
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 136);
    swift_release();
    uint64_t v8 = CallScreeningEndingState.update(with:);
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t protocol witness for CallScreeningState.stateMachineContainer.getter in conformance CallScreeningEndingState<A>()
{
  return swift_retain();
}

uint64_t protocol witness for CallScreeningState.willExit(to:) in conformance CallScreeningEndingState<A>(void *a1, uint64_t a2)
{
  return CallScreeningEndingState.willExit(to:)(a1, a2);
}

void protocol witness for CallScreeningState.enteredState() in conformance CallScreeningEndingState<A>()
{
}

uint64_t protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningEndingState<A>()
{
  long long v2 = v0[1];
  *(_OWORD *)(v1 + 16) = *v0;
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = v0[2];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningEndingState<A>;
  return CallScreeningEndingState.update(with:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *long long v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v3();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CallScreeningEndingState<A>(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return static CallScreeningEndingState.== infix(_:_:)((uint64_t)v7, (uint64_t)v8);
}

uint64_t CallScreeningEndingState.description.getter()
{
  *(void *)&long long v7 = 0;
  *((void *)&v7 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  uint64_t v5 = 0;
  unint64_t v6 = 0xE000000000000000;
  v1._object = (void *)0x80000001C37949D0;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v1);
  outlined init with take of CallScreening.EndingAction(v0, (uint64_t)&v7);
  outlined init with take of CallScreening.EndingAction(&v7, (uint64_t)&v4);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CallScreeningEndingState<A>()
{
  return CallScreeningEndingState.description.getter();
}

unint64_t lazy protocol witness table accessor for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType()
{
  unint64_t result = lazy protocol witness table cache variable for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType;
  if (!lazy protocol witness table cache variable for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType)
  {
    type metadata accessor for CKStateMachineActor.ActorType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKStateMachineActor.ActorType and conformance CKStateMachineActor.ActorType);
  }
  return result;
}

uint64_t sub_1C3044A60()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined consume of CallScreening.EndingAction(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in CallScreeningEndingState.enteredState()(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return closure #2 in CallScreeningEndingState.enteredState()(a1, v6, v7, v8, (uint64_t)(v1 + 7), v4, v5);
}

uint64_t sub_1C3044B94()
{
  swift_unknownObjectRelease();
  outlined consume of CallScreening.EndingAction(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CallScreeningEndingState.enteredState()(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (uint64_t)(v1 + 6);
  uint64_t v8 = v1[12];
  uint64_t v9 = v1[13];
  uint64_t v10 = v1[14];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return closure #1 in CallScreeningEndingState.enteredState()(a1, v5, v6, v7, v8, v9, v10, v4);
}

uint64_t instantiation function for generic protocol witness table for CallScreeningEndingState<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t destroy for CallScreeningEndingState(uint64_t a1)
{
  outlined consume of CallScreening.EndingAction(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CallScreeningEndingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  outlined copy of CallScreening.EndingAction(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v7;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CallScreeningEndingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  outlined copy of CallScreening.EndingAction(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of CallScreening.EndingAction(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CallScreeningEndingState(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of CallScreening.EndingAction(v5, v6, v7);
  swift_release();
  uint64_t v8 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallScreeningEndingState(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallScreeningEndingState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CallScreeningEndingState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3044F88()
{
  outlined consume of CallScreening.EndingAction(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallScreeningEndingState.validation.getter(long long *a1)
{
  closure #1 in CallScreeningEndingState.validation.getter(a1, (long long *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type CKStateMachineError and conformance CKStateMachineError()
{
  unint64_t result = lazy protocol witness table cache variable for type CKStateMachineError and conformance CKStateMachineError;
  if (!lazy protocol witness table cache variable for type CKStateMachineError and conformance CKStateMachineError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKStateMachineError and conformance CKStateMachineError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CKStateMachineError and conformance CKStateMachineError;
  if (!lazy protocol witness table cache variable for type CKStateMachineError and conformance CKStateMachineError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKStateMachineError and conformance CKStateMachineError);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo06UIMenuB0CG_AGs5NeverOTg50108_s15ConversationKit0A31ControlsShareMenuButtonProviderC29capturedDidChangeNotificationyy10Foundation0K0VFSo6d13CAIXEfU_So0M7B8CAKXEfU_0G3Kit0gjklmN0CTf1cn_n(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_23:
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_23;
  }
LABEL_3:
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = v2;
    uint64_t v4 = 0;
    unint64_t v20 = v1 & 0xC000000000000001;
    while (1)
    {
      if (v2 == v4)
      {
        __break(1u);
        goto LABEL_22;
      }
      id v5 = v20 ? (id)MEMORY[0x1C87744F0](v4, v1) : *(id *)(v1 + 8 * v4 + 32);
      uint64_t v6 = v5;
      self;
      uint64_t v7 = swift_dynamicCastObjCClass();
      if (v7) {
        break;
      }
LABEL_19:
      ++v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4)
      {
        uint64_t v18 = v21;
        swift_release();
        return v18;
      }
    }
    uint64_t v8 = (void *)v7;
    unint64_t v9 = v1;
    id v10 = v6;
    id v11 = objc_msgSend(v8, sel_identifier);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_18;
      }
    }
    ConversationControlsShareMenuButtonProvider.determineState(for:)((UIAction)v8);
LABEL_18:

    unint64_t v1 = v9;
    uint64_t v2 = v19;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.didset(void *a1)
{
  uint64_t v2 = v1;
  if (a1) {
    objc_msgSend(a1, sel_removeFromSuperview);
  }
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v1 + 2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = (unsigned char *)v1[26];
    if (v5)
    {
      uint64_t v6 = v1[3];
      v5[OBJC_IVAR____TtC15ConversationKit13CountdownView_isCountingDown] = 1;
      uint64_t v7 = (void *)v1[17];
      uint64_t v8 = v5;
      Class v9 = ConversationControlsShareMenuButtonProvider.countdownEphemeralAlert.getter();
      (*(void (**)(Class))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x7F8))(v9);
      objc_msgSend(v8, sel_addTarget_action_forControlEvents_, v2, sel_screenSharingButtonPressed, 64);
      uint64_t v10 = self;
      id v11 = (void *)swift_allocObject();
      _OWORD v11[2] = v4;
      v11[3] = v6;
      v11[4] = v8;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = partial apply for closure #1 in ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.didset;
      *(void *)(v12 + 24) = v11;
      aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_44;
      uint64_t v13 = _Block_copy(aBlock);
      uint64_t v14 = v8;
      id v15 = v4;
      swift_retain();
      swift_release();
      objc_msgSend((id)v10, sel_performWithoutAnimation_, v13);
      _Block_release(v13);
      LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v10)
      {
        __break(1u);
        return;
      }
      CGFloat v16 = *MEMORY[0x1E4FB12A8];
      CGFloat v17 = *(double *)(MEMORY[0x1E4FB12A8] + 8);
      CGFloat v18 = *(double *)(MEMORY[0x1E4FB12A8] + 16);
      CGFloat v19 = *(double *)(MEMORY[0x1E4FB12A8] + 24);
      unint64_t v20 = (UIView *)v15;
      v22.top = v16;
      v22.leading = v17;
      v22.bottom = v18;
      v22.trailing = v19;
      UIView.addConstraintsToFill(_:insets:)(v20, v22);
      swift_release();
    }
  }
}

Class ConversationControlsShareMenuButtonProvider.countdownEphemeralAlert.getter()
{
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_conversationKit);
  OUTLINED_FUNCTION_0_23(0x535F4E4545524353, 0xEE00474E49524148);
  OUTLINED_FUNCTION_21_11();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  v4._uint64_t countAndFlagsBits = v0;
  v4._object = v1;
  v5.super.super.Class isa = NSMutableAttributedString.__allocating_init(string:)(v4).super.super.isa;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  char v8 = (*(uint64_t (**)(uint64_t))(v6 + 176))(v7);
  if (v8) {
    uint64_t v9 = 0xD00000000000002ELL;
  }
  else {
    uint64_t v9 = 0xD00000000000002FLL;
  }
  if (v8) {
    uint64_t v10 = 0x80000001C3794DB0;
  }
  else {
    uint64_t v10 = 0x80000001C3794D80;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v11 = (objc_class *)objc_msgSend(v2, sel_conversationKit, 0xE000000000000000);
  v12.super.Class isa = v11;
  uint64_t v13 = OUTLINED_FUNCTION_2_29(v9, v10, 0x61737265766E6F43, 0xEF74694B6E6F6974, v12);
  id v15 = v14;
  swift_bridgeObjectRelease();

  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  NSMutableAttributedString.__allocating_init(string:)(v16);
  return v5.super.super.isa;
}

id closure #1 in ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.didset(void *a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(a1, sel_setSelected_, 0);
  return objc_msgSend(a1, sel_addSubview_, a3);
}

void ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.setter(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 208);
  *(void *)(v1 + 208) = a1;
  id v3 = a1;
  ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.didset(v2);
}

Swift::Void __swiftcall ConversationControlsShareMenuButtonProvider.buttonChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ForegroundApp?>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v43 = v3;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<ForegroundApp?>.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<ShareMenuActionState, Never>>);
  OUTLINED_FUNCTION_4();
  uint64_t v42 = v16;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = v19 - v18;
  ControlsButtonProvider.buttonChanged()();
  OUTLINED_FUNCTION_2();
  uint64_t v21 = MEMORY[0x1C8776240](v0 + 16);
  if (v21)
  {
    NSDirectionalEdgeInsets v22 = (void *)v21;
    uint64_t v38 = v2;
    uint64_t v39 = v14;
    uint64_t v40 = v10;
    uint64_t v41 = v8;
    type metadata accessor for ConversationControlsButton();
    if (swift_dynamicCastClass())
    {
      uint64_t v23 = self;
      id v24 = v22;
      unint64_t v25 = (objc_class *)objc_msgSend(v23, sel_conversationKit);
      OUTLINED_FUNCTION_47();
      unint64_t v26 = OUTLINED_FUNCTION_3_19(28);
      v27.super.Class isa = v25;
      uint64_t v31 = OUTLINED_FUNCTION_2_29(v26, v28, v29, v30, v27);
      uint64_t v33 = v32;

      ConversationControlsButton.localizedName.setter(v31, v33);
    }
    outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x6E654D6572616873, 0xEF6E6F7474754275, v22);
    objc_msgSend(v22, sel_addTarget_action_forControlEvents_, v0, sel_screenSharingButtonPressed, 64);
    OUTLINED_FUNCTION_11_9();
    (*(void (**)(void))(v34 + 1648))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<ShareMenuActionState, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<ShareMenuActionState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<ShareMenuActionState, Never>);
    lazy protocol witness table accessor for type ShareMenuActionState and conformance ShareMenuActionState();
    Publisher<>.removeDuplicates()();
    swift_release();
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_19_7();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<AnyPublisher<ShareMenuActionState, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<ShareMenuActionState, Never>>);
    uint64_t v35 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v20, v15);
    swift_beginAccess();
    *(void *)(v1 + 48) = v35;
    swift_release();
    OUTLINED_FUNCTION_11_9();
    (*(void (**)(void))(v36 + 1936))();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<ForegroundApp?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<ForegroundApp?>.Publisher);
    lazy protocol witness table accessor for type ForegroundApp? and conformance <A> A?();
    Publisher<>.removeDuplicates()();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v7, v38);
    OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_19_7();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<ForegroundApp?>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<ForegroundApp?>.Publisher>);
    uint64_t v37 = Publisher<>.sink(receiveValue:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    *(void *)(v1 + 160) = v37;
    swift_release();
  }
}

void closure #1 in ConversationControlsShareMenuButtonProvider.buttonChanged()(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  int v2 = a1[1];
  uint64_t v3 = *((void *)a1 + 1);
  __int16 v4 = a1[16];
  int v5 = a1[17];
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = Strong + 16;
    swift_beginAccess();
    uint64_t v9 = (void *)MEMORY[0x1C8776240](v8);
    if (v9)
    {
      uint64_t v10 = v9;
      objc_msgSend(v9, sel_setEnabled_, v1);
      if (v2) {
        int v11 = 256;
      }
      else {
        int v11 = 0;
      }
      uint64_t v12 = v11 | v1;
      if (v5) {
        __int16 v13 = 256;
      }
      else {
        __int16 v13 = 0;
      }
      __int16 v14 = v13 | v4;
      ConversationControlsShareMenuButtonProvider.updateShareScreenCountdownView(with:)(v11 | v1, v3, v14);
      uint64_t v15 = *(void **)(v7 + 136);
      uint64_t v16 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x778);
      uint64_t v17 = v15;
      uint64_t v18 = (void *)v16();

      ConversationControlsShareMenuButtonProvider.updateButtonStyle(buttonState:foregroundApp:)(v12, v3, v14, v18);
      id v19 = v10;
      *(void *)&v20.buttonEnabled = v12;
      objc_msgSend(v19, sel_setShowsMenuAsPrimaryAction_, ConversationControlsShareMenuButtonProvider.shouldEnableMenu(state:)(v20));
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

void ConversationControlsShareMenuButtonProvider.updateShareScreenCountdownView(with:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.setter(0);
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 208);
    if (v5
      || (id v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CountdownView()), sel_init),
          ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.setter(v6),
          (uint64_t v5 = *(void *)(v3 + 208)) != 0))
    {
      uint64_t v7 = *(void **)(v5 + OBJC_IVAR____TtC15ConversationKit13CountdownView_countdownLabel);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNumberFormatter);
      id v10 = v7;
      uint64_t v8 = static NSNumberFormatter.localizedStringForInt(_:)(a2);
      outlined bridged method (mbnn) of @objc UILabel.text.setter(v8, v9, v10);
    }
  }
}

void ConversationControlsShareMenuButtonProvider.updateButtonStyle(buttonState:foregroundApp:)(__int16 a1, uint64_t a2, __int16 a3, void *a4)
{
  uint64_t v5 = v4;
  swift_beginAccess();
  uint64_t v9 = (void *)MEMORY[0x1C8776240](v5 + 16);
  if (!v9) {
    return;
  }
  id v10 = v9;
  if (!*(void *)(v5 + 208))
  {
    if ((a1 & 0x100) != 0)
    {
      objc_msgSend(v9, sel_setSelected_, 1);
    }
    else
    {
      if ((a3 & 0x100) != 0)
      {
        objc_msgSend(v9, sel_setSelected_, 1);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        uint64_t v18 = (void *)*MEMORY[0x1E4FB28C8];
        unint64_t v26 = 0x616C706572616873;
        unint64_t v27 = 0xE900000000000079;
        uint64_t v28 = 3;
        uint64_t v29 = v18;
        __int16 v30 = 0;
        uint64_t v31 = 4;
        char v32 = 0;
        uint64_t v33 = 0;
        id v19 = v18;
        id v20 = static UIImage.symbolImage(for:)((uint64_t)&v26);

        swift_bridgeObjectRelease();
        ControlsButtonProvider.image.setter(v20);
        goto LABEL_13;
      }
      if (a4)
      {
        __int16 v13 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a4) + 0x80);
        __int16 v14 = a4;
        if (v13())
        {
          objc_msgSend(v10, sel_setSelected_, 0);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
          uint64_t v15 = (void *)*MEMORY[0x1E4FB28C8];
          unint64_t v26 = 0x616C706572616873;
          unint64_t v27 = 0xE900000000000079;
          uint64_t v28 = 3;
          uint64_t v29 = v15;
          __int16 v30 = 0;
          uint64_t v31 = 4;
          char v32 = 0;
          uint64_t v33 = 0;
          id v16 = v15;
          id v17 = static UIImage.symbolImage(for:)((uint64_t)&v26);

          swift_bridgeObjectRelease();
          ControlsButtonProvider.image.setter(v17);

LABEL_13:
          long long v21 = xmmword_1C376BCD0;
          long long v22 = xmmword_1C376BCE0;
LABEL_17:
          *(_OWORD *)(v5 + 176) = v21;
          *(_OWORD *)(v5 + 192) = v22;
          return;
        }
      }
      objc_msgSend(v10, sel_setSelected_, 0);
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    uint64_t v23 = (void *)*MEMORY[0x1E4FB28C8];
    unint64_t v26 = 0xD000000000000028;
    unint64_t v27 = 0x80000001C3793350;
    uint64_t v28 = 3;
    uint64_t v29 = v23;
    __int16 v30 = 0;
    uint64_t v31 = 4;
    char v32 = 0;
    uint64_t v33 = 0;
    id v24 = v23;
    id v25 = static UIImage.symbolImage(for:)((uint64_t)&v26);

    swift_bridgeObjectRelease();
    ControlsButtonProvider.image.setter(v25);

    long long v21 = *MEMORY[0x1E4FB12A8];
    long long v22 = *(_OWORD *)(MEMORY[0x1E4FB12A8] + 16);
    goto LABEL_17;
  }
  objc_msgSend(v9, sel_setSelected_, 0);
  id v11 = objc_msgSend(v10, sel_imageView);
  if (v11)
  {
    uint64_t v12 = v11;
    objc_msgSend(v11, sel_setAlpha_, 0.0);
  }
}

Swift::Bool __swiftcall ConversationControlsShareMenuButtonProvider.shouldEnableMenu(state:)(ConversationKit::ShareMenuActionState state)
{
  Swift::Bool v2 = (*(_WORD *)&state.buttonEnabled & 0x100) == 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v3 + 280))()) {
    return 0;
  }
  uint64_t v4 = *(void *)(v1 + 208);
  if (v4)
  {
    if (*(unsigned char *)(v4 + OBJC_IVAR____TtC15ConversationKit13CountdownView_isCountingDown)) {
      return 0;
    }
  }
  return v2;
}

uint64_t closure #2 in ConversationControlsShareMenuButtonProvider.buttonChanged()(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)(result + 136);
    uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x640);
    id v6 = v4;
    LOWORD(v5) = v5();
    uint64_t v8 = v7;
    __int16 v10 = v9;

    ConversationControlsShareMenuButtonProvider.updateButtonStyle(buttonState:foregroundApp:)((unsigned __int16)v5 & 0x101, v8, v10 & 0x101, v1);
    if (*(unsigned __int8 *)(v3 + 40) <= 1u)
    {
      v11._object = (void *)0x80000001C3795120;
      v11._uint64_t countAndFlagsBits = 0xD000000000000016;
      ConversationControlsMenuButtonProvider.dismissMenu(context:)(v11);
    }
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall ConversationControlsShareMenuButtonProvider.shouldEnableMenu()()
{
  *(void *)&v1.buttonEnabled = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 136)) + 0x640))() & 0x101;
  return ConversationControlsShareMenuButtonProvider.shouldEnableMenu(state:)(v1);
}

uint64_t ConversationControlsShareMenuButtonProvider.buttonConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return UIButton.Configuration.contentInsets.setter();
}

Swift::Void __swiftcall ConversationControlsShareMenuButtonProvider.didLayoutSubviews(button:)(UIButton *button)
{
  uint64_t v3 = *(void **)(v1 + 208);
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_layer);
    [(UIButton *)button bounds];
    objc_msgSend(v4, sel_setCornerRadius_, CGRectGetHeight(v9) * 0.5);
  }
  uint64_t v5 = [(UIButton *)button imageView];
  if (v5)
  {
    double v6 = 0.0;
    if (!*(void *)(v1 + 208)) {
      double v6 = 1.0;
    }
    uint64_t v7 = v5;
    [(UIImageView *)v5 setAlpha:v6];
  }
}

Swift::Void __swiftcall ConversationControlsShareMenuButtonProvider.screenSharingButtonPressed()()
{
  swift_weakInit();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if (((*(uint64_t (**)(void))(v1 + 280))() & 1) != 0
    && (!static Platform.current.getter() || static Platform.current.getter() == 1))
  {
    __int16 v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 136)) + 0x640))();
    uint64_t v3 = *(void *)(v0 + 208);
    if (v3 && (*(unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit13CountdownView_isCountingDown) & 1) != 0)
    {
      ConversationControlsManager.declineIncomingScreenShareRequests()();
LABEL_13:
      specialized closure #1 in ConversationControlsShareMenuButtonProvider.screenSharingButtonPressed()();
      goto LABEL_14;
    }
    if ((v2 & 0x100) != 0) {
      goto LABEL_13;
    }
    OUTLINED_FUNCTION_2();
    double v6 = (UIView_optional *)MEMORY[0x1C8776240](v0 + 16);
    ConversationControlsManager.presentShareCard(source:)(v6);
  }
  else
  {
    specialized closure #1 in ConversationControlsShareMenuButtonProvider.screenSharingButtonPressed()();
    OUTLINED_FUNCTION_2();
    uint64_t v4 = MEMORY[0x1C8776240](v0 + 16);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      *(void *)&v7.buttonEnabled = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 136)) + 0x640))() & 0x101;
      objc_msgSend(v5, sel_setShowsMenuAsPrimaryAction_, ConversationControlsShareMenuButtonProvider.shouldEnableMenu(state:)(v7));
    }
  }
LABEL_14:
  swift_weakDestroy();
}

uint64_t specialized closure #1 in ConversationControlsShareMenuButtonProvider.screenSharingButtonPressed()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C2F90000, v3, v4, "Stopping screen sharing", v5, 2u);
      MEMORY[0x1C87760E0](v5, -1, -1);
    }

    id v6 = *(id *)(v1 + 136);
    ConversationControlsManager.stopScreenShare()();

    ConversationKit::ShareMenuActionState v7 = *(void **)(v1 + 136);
    uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
    CGRect v9 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x640);
    __int16 v10 = v7;
    if ((v9() & 0x100) != 0)
    {
      Class v11 = ConversationControlsShareMenuButtonProvider.endedScreenSharingEphemeralAlert.getter();
      uint64_t v13 = 1;
    }
    else
    {
      Class v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    (*(void (**)(Class, uint64_t, uint64_t))((*v8 & *v10) + 0x7F8))(v11, v12, v13);

    ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.setter(0);
    __int16 v14 = *(void **)(v1 + 136);
    uint64_t v15 = *(void (**)(void))((*v8 & *v14) + 0x978);
    id v16 = v14;
    v15();

    id v17 = *(void **)(v1 + 136);
    uint64_t v18 = *(uint64_t (**)(void))((*v8 & *v17) + 0x640);
    id v19 = v17;
    __int16 v20 = v18();
    uint64_t v22 = v21;
    LOWORD(v15) = v23;

    ConversationControlsShareMenuButtonProvider.updateButtonStyle(buttonState:foregroundApp:)(v20 & 0x101, v22, (unsigned __int16)v15 & 0x101, 0);
    return swift_release();
  }
  return result;
}

Class ConversationControlsShareMenuButtonProvider.endedScreenSharingEphemeralAlert.getter()
{
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_conversationKit);
  OUTLINED_FUNCTION_0_23(0x535F4E4545524353, 0xEE00474E49524148);
  OUTLINED_FUNCTION_21_11();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  v4._uint64_t countAndFlagsBits = v0;
  v4._object = v1;
  Class isa = NSMutableAttributedString.__allocating_init(string:)(v4).super.super.isa;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  id v6 = (objc_class *)objc_msgSend(v2, sel_conversationKit, 0xE000000000000000);
  OUTLINED_FUNCTION_47();
  unint64_t v7 = OUTLINED_FUNCTION_3_19(27);
  v8.super.Class isa = v6;
  uint64_t v12 = OUTLINED_FUNCTION_2_29(v7, v9, v10, v11, v8);
  __int16 v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  NSMutableAttributedString.__allocating_init(string:)(v15);
  return isa;
}

Swift::Void __swiftcall ConversationControlsShareMenuButtonProvider.setAutomaticShareState(_:)(Swift::Bool a1)
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v3, v4, "togglePlaybackAuthorization: %{BOOL}d", v5, 8u);
    OUTLINED_FUNCTION_3();
  }

  BOOL v6 = a1;
  ConversationControlsShareMenuButtonProvider.shareMediaEphemeralAlert(authorization:)();
  unint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_7_23();
  (*(void (**)(void))(v8 + 2040))();
  OUTLINED_FUNCTION_7_23();
  uint64_t v10 = (void *)(*(uint64_t (**)(void))(v9 + 1912))();
  if (v10)
  {
    uint64_t v11 = v10;
    (*(void (**)(BOOL))((*v7 & *v10) + 0x90))(v6);
  }
}

id ConversationControlsShareMenuButtonProvider.shareMediaEphemeralAlert(authorization:)()
{
  uint64_t v1 = v0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v2 = (void *)*MEMORY[0x1E4FB2908];
  v36[0] = 0x616C706572616873;
  v36[1] = 0xE900000000000079;
  v36[2] = 1;
  v36[3] = v2;
  __int16 v37 = 0;
  uint64_t v38 = 4;
  char v39 = 0;
  uint64_t v40 = 0;
  id v3 = v2;
  id v4 = static UIImage.symbolImage(for:)((uint64_t)v36);

  swift_bridgeObjectRelease();
  if (v4)
  {
    id v5 = objc_msgSend(self, sel_labelColor);
    id v6 = objc_msgSend(v4, sel_imageWithTintColor_, v5);
  }
  else
  {
    id v6 = 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  unint64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  uint64_t v10 = OUTLINED_FUNCTION_0_23(0x414C504552414853, v9);
  uint64_t v12 = v11;

  memset(v34, 0, sizeof(v34));
  char v35 = 1;
  id v13 = static NSAttributedString.localizedString(_:prefixImage:imageBounds:)(v10, v12, v6, (uint64_t)v34);
  uint64_t v14 = swift_bridgeObjectRelease();
  Swift::String v15 = *(void **)(v1 + 136);
  id v16 = (void *)MEMORY[0x1E4FBC8C8];
  id v17 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x778))(v14);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = (*(uint64_t (**)(void))((*v16 & *v17) + 0x68))();
    unint64_t v21 = v20;
  }
  else
  {
    unint64_t v21 = 0x80000001C3791DB0;
    uint64_t v19 = 0xD000000000000010;
  }
  uint64_t v22 = (objc_class *)objc_msgSend(v7, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_4_6();
  v23.super.Class isa = v22;
  OUTLINED_FUNCTION_2_29(v24, v25, v26, v27, v23);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C3769620;
  *(void *)(v28 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v28 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v28 + 32) = v19;
  *(void *)(v28 + 40) = v21;
  uint64_t v29 = String.init(format:_:)();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = v29;
  v32._object = v31;
  NSMutableAttributedString.__allocating_init(string:)(v32);

  return v13;
}

uint64_t ConversationControlsShareMenuButtonProvider.__allocating_init(controlsManager:context:shape:menuHostViewController:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return ConversationControlsShareMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)(a1, a2, a3, a4);
}

uint64_t ConversationControlsShareMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(v4 + 160) = 0;
  id v7 = objc_allocWithZone(MEMORY[0x1E4FADBD0]);
  swift_retain();
  id v8 = objc_msgSend(v7, sel_init);
  uint64_t v9 = (_OWORD *)MEMORY[0x1E4FB12A8];
  *(void *)(v4 + 168) = v8;
  long long v10 = v9[1];
  *(_OWORD *)(v4 + 176) = *v9;
  *(_OWORD *)(v4 + 192) = v10;
  *(void *)(v4 + 208) = 0;
  OUTLINED_FUNCTION_47();
  *(void *)(v4 + 216) = MEMORY[0x1C87730B0](0xD000000000000013);
  OUTLINED_FUNCTION_47();
  *(void *)(v4 + 224) = MEMORY[0x1C87730B0]();
  swift_release();
  id v11 = a4;
  id v12 = a1;
  uint64_t v13 = ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
  uint64_t v14 = self;
  swift_retain();
  id v15 = objc_msgSend(v14, sel_defaultCenter);
  uint64_t v16 = *MEMORY[0x1E4FB2EB8];
  swift_retain();
  objc_msgSend(v15, sel_addObserver_selector_name_object_, v13, sel_capturedDidChangeNotification_, v16, 0);

  swift_release_n();
  return v13;
}

id ConversationControlsShareMenuButtonProvider.screenSharingActionIdentifier.getter()
{
  return *(id *)(v0 + 216);
}

id ConversationControlsShareMenuButtonProvider.requestScreenSharingActionIdentifier.getter()
{
  return *(id *)(v0 + 224);
}

void ConversationControlsShareMenuButtonProvider.capturedDidChangeNotification(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationControls);
  uint64_t v5 = type metadata accessor for Notification();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  id v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v12(v10 - v9, a1, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v34 = v32;
    id v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v35 = v2;
    aBlock[0] = v33;
    *(_DWORD *)id v15 = 136315138;
    v32[1] = v15 + 4;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
    v32[0] = v32;
    MEMORY[0x1F4188790](v16 - 8);
    OUTLINED_FUNCTION_21();
    uint64_t v19 = v18 - v17;
    v12(v18 - v17, v11, v5);
    __swift_storeEnumTagSinglePayload(v19, 0, 1, v5);
    uint64_t v20 = specialized >> prefix<A>(_:)(v19);
    unint64_t v22 = v21;
    outlined destroy of Notification?(v19);
    void aBlock[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, aBlock);
    uint64_t v2 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = OUTLINED_FUNCTION_27_5();
    v24(v23);
    _os_log_impl(&dword_1C2F90000, v13, v14, "capturedDidChangeNotification: %s", v15, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v25 = OUTLINED_FUNCTION_27_5();
    v26(v25);
  }

  OUTLINED_FUNCTION_2();
  uint64_t v27 = (void *)MEMORY[0x1C8776240](v2 + 16);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(v27, sel_contextMenuInteraction);

    if (v29)
    {
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = partial apply for closure #1 in ConversationControlsShareMenuButtonProvider.capturedDidChangeNotification(_:);
      *(void *)(v30 + 24) = v2;
      aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu);
      aBlock[5] = v30;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu);
      aBlock[3] = (uint64_t)&block_descriptor_11;
      uint64_t v31 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel_updateVisibleMenuWithBlock_, v31);

      _Block_release(v31);
      LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v31) {
        __break(1u);
      }
    }
  }
}

id closure #1 in ConversationControlsShareMenuButtonProvider.capturedDidChangeNotification(_:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_children);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo06UIMenuB0CG_AGs5NeverOTg50108_s15ConversationKit0A31ControlsShareMenuButtonProviderC29capturedDidChangeNotificationyy10Foundation0K0VFSo6d13CAIXEfU_So0M7B8CAKXEfU_0G3Kit0gjklmN0CTf1cn_n(v3);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(a1, sel_menuByReplacingChildren_, isa);

  return v5;
}

Swift::Void __swiftcall ConversationControlsShareMenuButtonProvider.determineState(for:)(UIAction a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v4 + 160))())
  {
    OUTLINED_FUNCTION_50();
    char v6 = (*(uint64_t (**)(void))(v5 + 208))();
    id v7 = objc_msgSend(self, sel_mainScreen);
    uint64_t v8 = objc_msgSend(v7, sel_isCaptured);

    if ((v6 & 1) == 0 || v8)
    {
      OUTLINED_FUNCTION_50();
      if (((*(uint64_t (**)(void))(v9 + 216))() & 1) == 0)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationControls);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v2 = swift_slowAlloc();
          uint64_t v41 = swift_slowAlloc();
          *(_DWORD *)uint64_t v2 = 136315394;
          uint64_t v33 = String.init<A>(reflecting:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v41);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v2 + 12) = 2080;
          uint64_t v35 = String.init<A>(reflecting:)();
          uint64_t v8 = v36;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v41);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2F90000, v31, v32, "screenSharingAvailable:%s, screenIsCaptured:%s", (uint8_t *)v2, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }

        [(objc_class *)a1.super.super.isa setAttributes:1];
        id v37 = objc_msgSend(self, sel_conversationKit);
        uint64_t v38 = (unsigned __int16)OUTLINED_FUNCTION_31_6() | 0x616C696176610000;
        uint64_t v39 = 0xEB00000000656C62;
        goto LABEL_35;
      }
    }
    if (ConversationControlsManager.isShownAboveCoverSheet.getter())
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationControls);
      swift_retain_n();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)id v12 = 136315138;
        char v13 = ConversationControlsManager.isShownAboveCoverSheet.getter();
        BOOL v14 = (v13 & 1) == 0;
        if (v13) {
          uint64_t v15 = 1702195828;
        }
        else {
          uint64_t v15 = 0x65736C6166;
        }
        if (v14) {
          unint64_t v16 = 0xE500000000000000;
        }
        else {
          unint64_t v16 = 0xE400000000000000;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v8, v11, "controlsManager.isShownAboveCoverSheet:%s", v12, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        swift_release_n();
      }
      [(objc_class *)a1.super.super.isa setAttributes:1];
      id v40 = objc_msgSend(self, sel_conversationKit);
      uint64_t v38 = (unsigned __int16)OUTLINED_FUNCTION_31_6() | 0x74206B636F6C0000;
      uint64_t v39 = 0xEF6572616853206FLL;
LABEL_35:
      OUTLINED_FUNCTION_0_23(v38, v39);
      OUTLINED_FUNCTION_21_11();
      outlined bridged method (mbnn) of @objc UIAction.discoverabilityTitle.setter(v2, (uint64_t)v8, a1.super.super.isa);
      OUTLINED_FUNCTION_16();
      return;
    }
    [(objc_class *)a1.super.super.isa setAttributes:(unint64_t)[(objc_class *)a1.super.super.isa attributes] & 0xFFFFFFFFFFFFFFFELL];
    OUTLINED_FUNCTION_16();
    [v27 v28];
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationControls);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v20, v21, "Hardware doesn't support screen sharing");
      OUTLINED_FUNCTION_3();
    }

    [(objc_class *)a1.super.super.isa setAttributes:1];
    id v22 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_12_18();
    OUTLINED_FUNCTION_0_23(0x7070755320746F4ELL, 0xED0000646574726FLL);
    OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_16();
    outlined bridged method (mbnn) of @objc UIAction.discoverabilityTitle.setter(v23, v24, v25);
  }
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)v2();

  return v4;
}

Class ConversationControlsShareMenuButtonProvider.menu(for:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 136);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationControls);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "Displaying Share menu");
    OUTLINED_FUNCTION_3();
  }

  UIMenuElementSize v88 = MEMORY[0x1E4FBC860];
  uint64_t v8 = (void *)specialized static UIImage.image(named:)(2, (uint64_t)&type metadata for ImageNames.ConversationControls, (uint64_t)&protocol witness table for ImageNames.ConversationControls, (uint64_t (*)(uint64_t))ImageNames.ConversationControls.rawValue.getter);
  uint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_labelColor);
  id v11 = objc_msgSend(v8, sel_imageWithTintColor_, v10);

  id v12 = (void *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  char v13 = self;
  BOOL v14 = (objc_class *)objc_msgSend(v13, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  OUTLINED_FUNCTION_4_6();
  v15.super.Class isa = v14;
  OUTLINED_FUNCTION_2_29(v16, v17, v18, v19, v15);

  uint64_t v20 = *(void **)(v1 + 216);
  uint64_t v21 = OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_19_7();
  id v86 = v11;
  id v22 = v20;
  UIMenuElementSize preferredElementSize = UIMenuElementSizeSmall;
  v80._rawValue = 0;
  uint64_t v23 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  ConversationControlsShareMenuButtonProvider.determineState(for:)((UIAction)v23);
  id v24 = v23;
  MEMORY[0x1C87733A0](v24);
  OUTLINED_FUNCTION_15_12();
  if (v25) {
    OUTLINED_FUNCTION_8_21();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t v26 = specialized Array._endMutation()();
  uint64_t v27 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x8D0))(v26);
  if (v28)
  {
    uint64_t v29 = v28;
    if (objc_msgSend(v28, sel_state, 0, 0, 0, partial apply for closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:), v21) == (id)1)
    {
      TUConversationActivitySession.generateType.getter((char *)v89);
      if (LOBYTE(v89[0]) != 6)
      {
        id v82 = v24;
        uint64_t v30 = (void *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
        id v31 = (id)*MEMORY[0x1E4FB28C8];
        id v32 = objc_msgSend(v9, sel_labelColor);
        v89[0] = 0x616C706572616873;
        v89[1] = 0xEF6873616C732E79;
        v89[2] = 3;
        v89[3] = v31;
        __int16 v90 = 0;
        uint64_t v91 = 4;
        char v92 = 0;
        id v93 = v32;
        id v33 = static UIImage.symbolImage(for:)((uint64_t)v89);

        swift_bridgeObjectRelease();
        id v34 = objc_msgSend(v13, sel_conversationKit);
        OUTLINED_FUNCTION_12_18();
        OUTLINED_FUNCTION_0_23(0x7261685320646E45, 0xED000079616C5065);

        id v84 = v33;
        TUConversationActivitySession.concatenatedDescription.getter();
        UIMenuElementSize v36 = v35;
        uint64_t v37 = OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_19_7();
        uint64_t v38 = (void *)OUTLINED_FUNCTION_3_0();
        v38[2] = v37;
        v38[3] = v2;
        v38[4] = v29;
        uint64_t v39 = v2;
        id v40 = v29;
        v80._rawValue = 0;
        UIMenuElementSize preferredElementSize = v36;
        Class v41 = (Class)(id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        MEMORY[0x1C87733A0](v41);
        OUTLINED_FUNCTION_15_12();
        if (v25) {
          OUTLINED_FUNCTION_8_21();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v24 = v82;
        id v42 = v84;
LABEL_21:

        uint64_t v29 = v42;
        goto LABEL_22;
      }
      goto LABEL_22;
    }
  }
  uint64_t v43 = (void *)(*(uint64_t (**)(void))((*v27 & *v2) + 0x778))();
  if (!v43) {
    goto LABEL_23;
  }
  uint64_t v29 = v43;
  if ((*(uint64_t (**)(void))((*v27 & *v43) + 0x80))())
  {
    id v83 = v24;
    OUTLINED_FUNCTION_29_9();
    uint64_t v81 = (*(uint64_t (**)(void))(v44 + 104))();
    uint64_t v85 = v45;
    OUTLINED_FUNCTION_29_9();
    int v47 = (*(unsigned __int8 (**)(void))(v46 + 120))();
    id v48 = objc_msgSend(v13, sel_conversationKit);
    OUTLINED_FUNCTION_12_18();
    OUTLINED_FUNCTION_0_23(0x6974616D6F747541, 0xED0000796C6C6163);

    uint64_t v49 = OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_19_7();
    uint64_t v50 = (void *)OUTLINED_FUNCTION_3_0();
    v50[2] = v49;
    v50[3] = v81;
    v50[4] = v85;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_17_15();
    uint64_t v51 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    id v52 = objc_msgSend(v13, sel_conversationKit, 0, 0, v47 == 2, partial apply for closure #3 in ConversationControlsShareMenuButtonProvider.menu(for:), v50);
    OUTLINED_FUNCTION_12_18();
    OUTLINED_FUNCTION_0_23(0x7478654E206B7341, 0xED0000656D695420);

    uint64_t v53 = OUTLINED_FUNCTION_20();
    OUTLINED_FUNCTION_19_7();
    id v54 = (void *)OUTLINED_FUNCTION_3_0();
    v54[2] = v53;
    v54[3] = v81;
    v54[4] = v85;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_17_15();
    uint64_t v55 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1C3769610;
    *(void *)(v56 + 32) = v51;
    *(void *)(v56 + 40) = v55;
    v89[0] = v56;
    specialized Array._endMutation()();
    UIMenuElementSize v57 = v89[0];
    id v42 = v51;
    id v40 = v55;
    id v58 = objc_msgSend(v13, sel_conversationKit, 0);
    OUTLINED_FUNCTION_12_18();
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_0_23(0xD000000000000017, v59);

    String.uppercased()();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_1C3769620;
    *(void *)(v60 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v60 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v60 + 32) = v81;
    *(void *)(v60 + 40) = v85;
    String.init(format:_:)();
    swift_bridgeObjectRelease();
    if ((unint64_t)v57 >> 62)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
      swift_bridgeObjectRetain();
      UIMenuElementSize v61 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
      UIMenuElementSize v61 = v57;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
    OUTLINED_FUNCTION_5_37();
    Class v41 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v62, v63, v94, v64, v65, v61, 0).super.super.isa;
    MEMORY[0x1C87733A0]();
    id v24 = v83;
    if (*(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      OUTLINED_FUNCTION_8_21();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    goto LABEL_21;
  }
LABEL_22:

LABEL_23:
  if (objc_msgSend(*(id *)(v1 + 168), sel_sharePlayDiscoverabilityEnabled, preferredElementSize))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICustomViewMenuElement);
    id v66 = @nonobjc UICustomViewMenuElement.__allocating_init(viewProvider:)((uint64_t)closure #5 in ConversationControlsShareMenuButtonProvider.menu(for:), 0);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v67 = OUTLINED_FUNCTION_3_0();
    *(_OWORD *)(v67 + 16) = xmmword_1C3769830;
    *(void *)(v67 + 32) = v66;
    UIMenuElementSize v87 = v67;
    specialized Array._endMutation()();
    id v68 = v66;
    OUTLINED_FUNCTION_5_37();
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v69, v70, v95, v71, v72, v87, v80);
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_15_12();
    if (v25) {
      OUTLINED_FUNCTION_8_21();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  OUTLINED_FUNCTION_5_37();
  Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v73, v74, v96, v75, v76, v88, v80).super.super.isa;

  return isa;
}

uint64_t closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl(&dword_1C2F90000, v3, v4, "Start screen sharing (countdown)", v5, 2u);
      MEMORY[0x1C87760E0](v5, -1, -1);
    }

    id v6 = *(id *)(v1 + 136);
    swift_retain();
    ConversationControlsManager.startScreenShareWithCountdown(completion:)();

    swift_release();
    ConversationControlsMenuButtonProvider.disableMenuContainerViewInteraction()();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)(uint64_t a1)
{
  uint64_t v2 = self;
  uint64_t v9 = partial apply for closure #1 in closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:);
  uint64_t v10 = a1;
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 1107296256;
  uint64_t v7 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v8 = &block_descriptor_32_0;
  uint64_t v3 = _Block_copy(&v5);
  swift_retain();
  swift_release();
  uint64_t v9 = partial apply for closure #2 in closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:);
  uint64_t v10 = a1;
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 1107296256;
  uint64_t v7 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v8 = &block_descriptor_35_2;
  os_log_type_t v4 = _Block_copy(&v5);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_animateWithDuration_animations_completion_, v3, v4, 0.5);
  _Block_release(v4);
  _Block_release(v3);
}

id closure #1 in closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)(uint64_t a1)
{
  id result = *(id *)(a1 + 208);
  if (result) {
    return objc_msgSend(result, sel_setAlpha_, 0.0);
  }
  return result;
}

void closure #2 in ConversationControlsShareMenuButtonProvider.menu(for:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x290))();
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
      id v9 = a4;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v18 = v13;
        *(_DWORD *)id v12 = 136315138;
        uint64_t v14 = TUConversationActivitySession.uniqueIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v10, v11, "End active SharePlay activity: %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v13, -1, -1);
        MEMORY[0x1C87760E0](v12, -1, -1);
      }
      else
      {
      }
      id v16 = objc_msgSend(self, sel_sharedInstance);
      id v17 = objc_msgSend(v16, sel_conversationManager);

      objc_msgSend(v17, sel_presentDismissalAlertForActivitySession_onConversation_, v9, v7);
      ConversationControlsMenuButtonProvider.disableMenuContainerViewInteraction()();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

UIMenuElementState __swiftcall UIMenuElementState.init(state:)(Swift::Bool state)
{
  return (unint64_t)state;
}

uint64_t closure #3 in ConversationControlsShareMenuButtonProvider.menu(for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const char *a5, char a6)
{
  OUTLINED_FUNCTION_2();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationControls);
    swift_bridgeObjectRetain_n();
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v12, v13, a5, v14, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ConversationControlsShareMenuButtonProvider.setAutomaticShareState(_:)(a6 & 1);
    ConversationControlsMenuButtonProvider.disableMenuContainerViewInteraction()();
    return swift_release();
  }
  return result;
}

id closure #5 in ConversationControlsShareMenuButtonProvider.menu(for:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for SharePlayDiscoverabilityMenuView());
  id v1 = SharePlayDiscoverabilityMenuView.init(type:presentationStyle:foregroundApp:)(0, 0, 0);
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v1;
}

id @nonobjc UICustomViewMenuElement.__allocating_init(viewProvider:)(uint64_t a1, uint64_t a2)
{
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  _OWORD v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed UICustomViewMenuElement) -> (@owned UIView);
  long long v5[3] = &block_descriptor_29_1;
  uint64_t v2 = _Block_copy(v5);
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_elementWithViewProvider_, v2);
  _Block_release(v2);
  swift_release();
  return v3;
}

void ConversationControlsShareMenuButtonProvider.__ivar_destroyer()
{
  swift_release();

  id v1 = *(void **)(v0 + 224);
}

id *ConversationControlsShareMenuButtonProvider.deinit()
{
  uint64_t v0 = (id *)ConversationControlsMenuButtonProvider.deinit();
  swift_release();

  return v0;
}

uint64_t ConversationControlsShareMenuButtonProvider.__deallocating_deinit()
{
  ConversationControlsShareMenuButtonProvider.deinit();
  return swift_deallocClassInstance();
}

id CountdownView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t static NSNumberFormatter.localizedStringForInt(_:)(uint64_t a1)
{
  uint64_t v2 = self;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithInteger_, a1);
  id v4 = objc_msgSend(v2, sel_localizedStringFromNumber_numberStyle_, v3, 0);

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v5;
}

char *CountdownView.init()()
{
  v0[OBJC_IVAR____TtC15ConversationKit13CountdownView_isCountingDown] = 0;
  id v1 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  uint64_t v2 = v0;
  double v3 = OUTLINED_FUNCTION_18();
  id v5 = objc_msgSend(v1, v4, v3);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit13CountdownView_countdownLabel;
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit13CountdownView_countdownLabel] = v5;
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v7 = *(void **)&v2[v6];
  uint64_t v8 = self;
  double v9 = *MEMORY[0x1E4FB09B8];
  id v10 = v7;
  id v11 = objc_msgSend(v8, sel_systemFontOfSize_weight_, 20.0, v9);
  objc_msgSend(v10, sel_setFont_, v11);

  type metadata accessor for CountdownView();
  double v12 = OUTLINED_FUNCTION_18();
  uint64_t v15 = (char *)objc_msgSendSuper2(v13, v14, v12);
  id v16 = objc_msgSend(v15, sel_layer);
  id v17 = objc_msgSend(self, sel_whiteColor);
  id v18 = objc_msgSend(v17, sel_CGColor);

  objc_msgSend(v16, sel_setBorderColor_, v18);
  id v19 = objc_msgSend(v15, sel_layer);
  objc_msgSend(v19, sel_setBorderWidth_, 2.0);

  uint64_t v20 = OBJC_IVAR____TtC15ConversationKit13CountdownView_countdownLabel;
  objc_msgSend(v15, sel_addSubview_, *(void *)&v15[OBJC_IVAR____TtC15ConversationKit13CountdownView_countdownLabel]);
  uint64_t v21 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1C3769610;
  id v23 = objc_msgSend(*(id *)&v15[v20], sel_centerXAnchor);
  id v24 = objc_msgSend(v15, sel_centerXAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(void *)(v22 + 32) = v25;
  id v26 = objc_msgSend(*(id *)&v15[v20], sel_centerYAnchor);
  id v27 = objc_msgSend(v15, sel_centerYAnchor);
  id v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(void *)(v22 + 40) = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_activateConstraints_, isa);

  return v15;
}

id CountdownView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CountdownView.init(coder:)()
{
  v0[OBJC_IVAR____TtC15ConversationKit13CountdownView_isCountingDown] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id CountdownView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void CountdownView.init(frame:)()
{
}

id CountdownView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CountdownView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @nonobjc UIImage.__allocating_init(named:in:compatibleWith:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_imageNamed_inBundle_compatibleWithTraitCollection_, v6, a3, a4);

  return v7;
}

unint64_t lazy protocol witness table accessor for type ShareMenuActionState and conformance ShareMenuActionState()
{
  unint64_t result = lazy protocol witness table cache variable for type ShareMenuActionState and conformance ShareMenuActionState;
  if (!lazy protocol witness table cache variable for type ShareMenuActionState and conformance ShareMenuActionState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShareMenuActionState and conformance ShareMenuActionState);
  }
  return result;
}

uint64_t sub_1C3049A10()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationControlsShareMenuButtonProvider.buttonChanged()(unsigned __int8 *a1)
{
}

unint64_t lazy protocol witness table accessor for type ForegroundApp? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ForegroundApp? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ForegroundApp? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ForegroundApp?);
    lazy protocol witness table accessor for type ForegroundApp and conformance NSObject();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForegroundApp? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForegroundApp and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type ForegroundApp and conformance NSObject;
  if (!lazy protocol witness table cache variable for type ForegroundApp and conformance NSObject)
  {
    type metadata accessor for ForegroundApp();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForegroundApp and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #2 in ConversationControlsShareMenuButtonProvider.buttonChanged()(void **a1)
{
  return closure #2 in ConversationControlsShareMenuButtonProvider.buttonChanged()(a1);
}

id partial apply for closure #1 in ConversationControlsShareMenuButtonProvider.capturedDidChangeNotification(_:)(void *a1)
{
  return closure #1 in ConversationControlsShareMenuButtonProvider.capturedDidChangeNotification(_:)(a1);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined destroy of Notification?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void outlined bridged method (mbnn) of @objc UIAction.discoverabilityTitle.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setDiscoverabilityTitle_, v4);
}

uint64_t specialized static UIImage.image(named:)()
{
  SEL v14 = &type metadata for ImageNames.CallRecording;
  uint64_t v15 = &protocol witness table for ImageNames.CallRecording;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_conversationKit);
  id v2 = objc_msgSend(self, sel_mainScreen);
  id v3 = objc_msgSend(v2, sel_traitCollection);

  OUTLINED_FUNCTION_47();
  id v6 = @nonobjc UIImage.__allocating_init(named:in:compatibleWith:)(v4, v5, v1, v3);
  if (v6)
  {
    id v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v7;
  }
  else
  {
    outlined init with copy of IDSLookupManager((uint64_t)v13, (uint64_t)v12);
    OUTLINED_FUNCTION_33_10();
    OUTLINED_FUNCTION_24_10((uint64_t)"Unable to load image ");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageName);
    _print_unlocked<A, B>(_:_:)();
    OUTLINED_FUNCTION_10_19();
    id v9 = objc_msgSend(v0, sel_conversationKit);
    id v10 = objc_msgSend(v9, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_21_11();
    v11._uint64_t countAndFlagsBits = (uint64_t)v1;
    v11._object = v2;
    String.append(_:)(v11);

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_7();
    uint64_t result = OUTLINED_FUNCTION_34_2();
    __break(1u);
  }
  return result;
}

uint64_t specialized static UIImage.image(named:)(uint64_t a1)
{
  return specialized static UIImage.image(named:)(a1, (uint64_t)&type metadata for ImageNames.Drawer, (uint64_t)&protocol witness table for ImageNames.Drawer, (uint64_t (*)(uint64_t))ImageNames.Drawer.rawValue.getter);
}

{
  return specialized static UIImage.image(named:)(a1, (uint64_t)&type metadata for ImageNames.ParticipantView, (uint64_t)&protocol witness table for ImageNames.ParticipantView, (uint64_t (*)(uint64_t))ImageNames.ParticipantView.rawValue.getter);
}

{
  return specialized static UIImage.image(named:)(a1, (uint64_t)&type metadata for ImageNames.ConversationControls, (uint64_t)&protocol witness table for ImageNames.ConversationControls, (uint64_t (*)(uint64_t))ImageNames.ConversationControls.rawValue.getter);
}

uint64_t specialized static UIImage.image(named:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  v20[0] = a1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v6 = a4(a1);
  uint64_t v8 = v7;
  id v9 = self;
  id v10 = objc_msgSend(v9, sel_conversationKit);
  id v11 = objc_msgSend(self, sel_mainScreen);
  id v12 = objc_msgSend(v11, sel_traitCollection);

  id v13 = @nonobjc UIImage.__allocating_init(named:in:compatibleWith:)(v6, (uint64_t)v8, v10, v12);
  if (v13)
  {
    id v14 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    return (uint64_t)v14;
  }
  else
  {
    outlined init with copy of IDSLookupManager((uint64_t)v20, (uint64_t)v19);
    OUTLINED_FUNCTION_33_10();
    OUTLINED_FUNCTION_24_10((uint64_t)"Unable to load image ");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageName);
    _print_unlocked<A, B>(_:_:)();
    OUTLINED_FUNCTION_10_19();
    id v16 = objc_msgSend(v9, sel_conversationKit);
    id v17 = objc_msgSend(v16, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_21_11();
    v18._uint64_t countAndFlagsBits = v6;
    v18._object = v8;
    String.append(_:)(v18);

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_7();
    uint64_t result = OUTLINED_FUNCTION_34_2();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)()
{
  return closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)();
}

uint64_t partial apply for closure #3 in ConversationControlsShareMenuButtonProvider.menu(for:)(uint64_t a1)
{
  return closure #3 in ConversationControlsShareMenuButtonProvider.menu(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), "Setting automatic SharePlay for app: %s", 1);
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_5();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in ConversationControlsShareMenuButtonProvider.menu(for:)(uint64_t a1)
{
  return closure #3 in ConversationControlsShareMenuButtonProvider.menu(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), "Reset SharePlay state for app: %s", 0);
}

uint64_t sub_1C304A0C4()
{
  swift_release();

  OUTLINED_FUNCTION_23_5();
  return swift_deallocObject();
}

void partial apply for closure #2 in ConversationControlsShareMenuButtonProvider.menu(for:)(uint64_t a1)
{
  closure #2 in ConversationControlsShareMenuButtonProvider.menu(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t type metadata accessor for CountdownView()
{
  return self;
}

uint64_t type metadata accessor for ConversationControlsShareMenuButtonProvider()
{
  return self;
}

uint64_t method lookup function for CountdownView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CountdownView);
}

void partial apply for closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)()
{
  closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)(v0);
}

id partial apply for closure #1 in closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)()
{
  return closure #1 in closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)(v0);
}

id partial apply for closure #2 in closure #1 in closure #1 in ConversationControlsShareMenuButtonProvider.menu(for:)()
{
  id result = *(id *)(v0 + 208);
  if (result) {
    return objc_msgSend(result, sel_removeFromSuperview);
  }
  return result;
}

uint64_t sub_1C304A198()
{
  OUTLINED_FUNCTION_23_5();
  return swift_deallocObject();
}

id partial apply for closure #1 in ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.didset()
{
  return closure #1 in ConversationControlsShareMenuButtonProvider.shareScreenCountdownView.didset(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t key path getter for InCallControlsStatusCell.viewModel : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))(v4);
  return outlined init with take of InCallControlsStatusCellViewModel?((uint64_t)v4, a2);
}

uint64_t key path setter for InCallControlsStatusCell.viewModel : InCallControlsStatusCell(uint64_t a1, void **a2)
{
  outlined init with take of InCallControlsStatusCellViewModel?(a1, (uint64_t)v5);
  id v3 = *(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8);
  outlined retain of InCallControlsStatusCellViewModel?((uint64_t)v5);
  return v3(v5);
}

void InCallControlsStatusCell.viewModel.getter(void *a1@<X8>)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_viewModel);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = (void *)v3[4];
  uint64_t v9 = OUTLINED_FUNCTION_5_38();
  outlined copy of InCallControlsStatusCellViewModel?(v9, v10, v11, v12, v8);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
}

void outlined copy of InCallControlsStatusCellViewModel?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v5 = a5;
  }
}

void InCallControlsStatusCell.viewModel.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  id v3 = *(void **)(v1 + 32);
  outlined init with take of InCallControlsStatusCellViewModel?(a1, v1);
  uint64_t v4 = OUTLINED_FUNCTION_5_38();
  outlined consume of InCallControlsStatusCellViewModel?(v4, v5, v6, v7, v3);
}

uint64_t outlined init with take of InCallControlsStatusCellViewModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallControlsStatusCellViewModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined consume of InCallControlsStatusCellViewModel?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t (*InCallControlsStatusCell.viewModel.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for InCallControlsStatusCell.menuHostViewController : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for InCallControlsStatusCell.menuHostViewController : InCallControlsStatusCell(uint64_t a1, void **a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(id, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0);
  id v5 = *(id *)a1;
  return v4(v2, v3);
}

id InCallControlsStatusCell.menuHostViewController.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void InCallControlsStatusCell.menuHostViewController.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  id v5 = *(void **)v2;
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
}

uint64_t (*InCallControlsStatusCell.menuHostViewController.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for InCallControlsStatusCell.iconImageView : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallControlsStatusCell.iconImageView : InCallControlsStatusCell(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8))(*a1);
}

id InCallControlsStatusCell.iconImageView.getter()
{
  return InCallControlsStatusCell.iconImageView.getter(&OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___iconImageView, (uint64_t (*)(uint64_t))closure #1 in InCallControlsStatusCell.iconImageView.getter);
}

id closure #1 in InCallControlsStatusCell.iconImageView.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  char v3 = UIContentSizeCategory.isAccessibilityCategory.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  id v5 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v4, sel_setTintColor_, v5);

  objc_msgSend(v4, sel_setHidden_, v3 & 1);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v6 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769610;
  id v8 = objc_msgSend(v4, sel_widthAnchor);
  id v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 29.0);

  *(void *)(v7 + 32) = v9;
  id v10 = objc_msgSend(v4, sel_heightAnchor);
  id v11 = objc_msgSend(v10, sel_constraintEqualToConstant_, 29.0);

  *(void *)(v7 + 40) = v11;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_activateConstraints_, isa);

  return v4;
}

void InCallControlsStatusCell.iconImageView.setter(uint64_t a1)
{
}

void (*InCallControlsStatusCell.iconImageView.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *id v1 = InCallControlsStatusCell.iconImageView.getter();
  return InCallControlsStatusCell.iconImageView.modify;
}

void InCallControlsStatusCell.iconImageView.modify(void **a1, char a2)
{
}

id InCallControlsStatusCell.titleLabel.getter()
{
  return InCallControlsStatusCell.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___titleLabel, (uint64_t (*)(void))closure #1 in InCallControlsStatusCell.titleLabel.getter);
}

void InCallControlsStatusCell.titleLabel.setter(uint64_t a1)
{
}

uint64_t key path getter for InCallControlsStatusCell.titleLabel : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallControlsStatusCell.titleLabel : InCallControlsStatusCell(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0))(*a1);
}

id closure #1 in InCallControlsStatusCell.titleLabel.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v0, sel_setNumberOfLines_, 1);
  objc_msgSend(v0, sel_setClipsToBounds_, 1);
  objc_msgSend(v0, sel_setLineBreakMode_, 4);
  id v1 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2908]);
  objc_msgSend(v0, sel_setFont_, v1);

  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  id v2 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v0, sel_setTextColor_, v2);

  LODWORD(v3) = 1132068864;
  objc_msgSend(v0, sel_setContentCompressionResistancePriority_forAxis_, 0, v3);
  return v0;
}

void (*InCallControlsStatusCell.titleLabel.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *id v1 = InCallControlsStatusCell.titleLabel.getter();
  return InCallControlsStatusCell.titleLabel.modify;
}

void InCallControlsStatusCell.titleLabel.modify(void **a1, char a2)
{
}

id InCallControlsStatusCell.subtitleLabel.getter()
{
  return InCallControlsStatusCell.titleLabel.getter(&OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___subtitleLabel, (uint64_t (*)(void))closure #1 in InCallControlsStatusCell.subtitleLabel.getter);
}

id InCallControlsStatusCell.titleLabel.getter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2();
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void InCallControlsStatusCell.subtitleLabel.setter(uint64_t a1)
{
}

uint64_t key path getter for InCallControlsStatusCell.subtitleLabel : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallControlsStatusCell.subtitleLabel : InCallControlsStatusCell(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x108))(*a1);
}

id closure #1 in InCallControlsStatusCell.subtitleLabel.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v0, sel_setNumberOfLines_, 1);
  objc_msgSend(v0, sel_setClipsToBounds_, 1);
  objc_msgSend(v0, sel_setLineBreakMode_, 4);
  objc_msgSend(v0, sel_setMarqueeEnabled_, 1);
  objc_msgSend(v0, sel_setMarqueeRunning_, 1);
  id v1 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
  Class isa = UIFont.withTraits(_:)(0x8000u).super.isa;

  Class v3 = UIFont.caseSensitive()().super.isa;
  objc_msgSend(v0, sel_setFont_, v3);

  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  id v4 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v0, sel_setTextColor_, v4);

  LODWORD(v5) = 1132068864;
  objc_msgSend(v0, sel_setContentCompressionResistancePriority_forAxis_, 0, v5);
  return v0;
}

void (*InCallControlsStatusCell.subtitleLabel.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *id v1 = InCallControlsStatusCell.subtitleLabel.getter();
  return InCallControlsStatusCell.subtitleLabel.modify;
}

void InCallControlsStatusCell.subtitleLabel.modify(void **a1, char a2)
{
}

void *InCallControlsStatusCell.actionButton.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  id v2 = v1;
  return v1;
}

void InCallControlsStatusCell.actionButton.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  Class v3 = *v1;
  *id v1 = a1;
}

uint64_t key path getter for InCallControlsStatusCell.actionButton : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x118))();
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallControlsStatusCell.actionButton : InCallControlsStatusCell(id *a1, void **a2)
{
  id v2 = *a1;
  Class v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x120);
  id v4 = *a1;
  return v3(v2);
}

uint64_t (*InCallControlsStatusCell.actionButton.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for InCallControlsStatusCell.conversationStatusHStack : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x130))();
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallControlsStatusCell.conversationStatusHStack : InCallControlsStatusCell(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x138))(*a1);
}

id InCallControlsStatusCell.conversationStatusHStack.getter()
{
  return InCallControlsStatusCell.iconImageView.getter(&OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___conversationStatusHStack, (uint64_t (*)(uint64_t))closure #1 in InCallControlsStatusCell.conversationStatusHStack.getter);
}

id closure #1 in InCallControlsStatusCell.conversationStatusHStack.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  LOBYTE(v1) = UIContentSizeCategory.isAccessibilityCategory.getter();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  objc_msgSend(v3, sel_setAxis_, v1 & 1);
  if (v1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 3;
  }
  objc_msgSend(v3, sel_setAlignment_, v4);
  objc_msgSend(v3, sel_setSpacing_, 16.0);

  return v3;
}

void InCallControlsStatusCell.conversationStatusHStack.setter(uint64_t a1)
{
}

void (*InCallControlsStatusCell.conversationStatusHStack.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *id v1 = InCallControlsStatusCell.conversationStatusHStack.getter();
  return InCallControlsStatusCell.conversationStatusHStack.modify;
}

void InCallControlsStatusCell.conversationStatusHStack.modify(void **a1, char a2)
{
}

uint64_t key path getter for InCallControlsStatusCell.conversationStatusDetailsVStack : InCallControlsStatusCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x148))();
  *a2 = result;
  return result;
}

uint64_t key path setter for InCallControlsStatusCell.conversationStatusDetailsVStack : InCallControlsStatusCell(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x150))(*a1);
}

id InCallControlsStatusCell.conversationStatusDetailsVStack.getter()
{
  return InCallControlsStatusCell.iconImageView.getter(&OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___conversationStatusDetailsVStack, (uint64_t (*)(uint64_t))closure #1 in InCallControlsStatusCell.conversationStatusDetailsVStack.getter);
}

id InCallControlsStatusCell.iconImageView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in InCallControlsStatusCell.conversationStatusDetailsVStack.getter(void *a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769610;
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(void *)(v2 + 32) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xE8))();
  *(void *)(v2 + 40) = (*(uint64_t (**)(void))((*v3 & *a1) + 0x100))();
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v4, (Swift::OpaquePointer)v2);
  id v6 = v5;
  objc_msgSend(v6, sel_setAxis_, 1);
  objc_msgSend(v6, sel_setAlignment_, 1);

  return v6;
}

void InCallControlsStatusCell.conversationStatusDetailsVStack.setter(uint64_t a1)
{
}

void (*InCallControlsStatusCell.conversationStatusDetailsVStack.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *id v1 = InCallControlsStatusCell.conversationStatusDetailsVStack.getter();
  return InCallControlsStatusCell.conversationStatusDetailsVStack.modify;
}

void InCallControlsStatusCell.conversationStatusDetailsVStack.modify(void **a1, char a2)
{
}

void InCallControlsStatusCell.iconImageView.modify(void **a1, char a2, void (*a3)(void))
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

id InCallControlsStatusCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id InCallControlsStatusCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v4 = &v0[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_viewModel];
  *(_OWORD *)double v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((void *)v4 + 4) = 0;
  id v5 = &v0[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_menuHostViewController];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_faceTimeSymbolImage;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v7 = (void *)*MEMORY[0x1E4FB28C8];
  v35[0] = 0x69662E6F65646976;
  v35[1] = 0xEA00000000006C6CLL;
  _OWORD v35[2] = -1;
  _OWORD v35[3] = v7;
  __int16 v36 = 0;
  uint64_t v37 = 4;
  char v38 = 0;
  uint64_t v39 = 0;
  id v8 = v0;
  id v9 = v7;
  id v10 = static UIImage.symbolImage(for:)((uint64_t)v35);

  swift_bridgeObjectRelease();
  *(void *)&v0[v6] = v10;
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_sharePlaySymbolImage;
  uint64_t v12 = self;
  id v13 = v9;
  id v14 = objc_msgSend(v12, sel_labelColor);
  OUTLINED_FUNCTION_9_20();
  v30[0] = v15;
  v30[1] = v16;
  v30[2] = 1;
  v30[3] = v13;
  __int16 v31 = 0;
  uint64_t v32 = 4;
  char v33 = 0;
  uint64_t v34 = v17;
  id v18 = static UIImage.symbolImage(for:)((uint64_t)v30);

  swift_bridgeObjectRelease();
  *(void *)&v8[v11] = v18;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___iconImageView] = 0;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___titleLabel] = 0;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___subtitleLabel] = 0;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_actionButton] = 0;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___conversationStatusHStack] = 0;
  *(void *)&v8[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___conversationStatusDetailsVStack] = 0;

  uint64_t v19 = type metadata accessor for InCallControlsStatusCell();
  v29[0] = v8;
  v29[1] = v19;
  double v20 = OUTLINED_FUNCTION_6_2();
  id v23 = objc_msgSendSuper2(v21, v22, v20);
  id v24 = objc_msgSend(v23, sel_contentView);
  objc_msgSend(v24, sel_setUserInteractionEnabled_, 0);

  id v25 = v23;
  static UIBackgroundConfiguration.listGroupedCell()();
  id v26 = objc_msgSend(v12, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  uint64_t v27 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v27);
  MEMORY[0x1C8773CE0](v3);

  objc_msgSend(v25, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  InCallControlsStatusCell.setupCell()();

  return v25;
}

void InCallControlsStatusCell.setupCell()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130);
  uint64_t v3 = (void *)v2();
  double v4 = (void *)(*(uint64_t (**)(void))((*v1 & *v0) + 0xD0))();
  objc_msgSend(v3, sel_addArrangedSubview_, v4);

  id v5 = (void *)v2();
  uint64_t v6 = (void *)(*(uint64_t (**)(void))((*v1 & *v0) + 0x148))();
  objc_msgSend(v5, sel_addArrangedSubview_, v6);

  uint64_t v7 = (void *)v2();
  objc_msgSend(v0, sel_addSubview_, v7);

  InCallControlsStatusCell.configureActionButton()();
  InCallControlsStatusCell.setupLayoutConstraints()();
  id v8 = objc_msgSend(v0, sel_separatorLayoutGuide);
  id v9 = objc_msgSend(v8, sel_leadingAnchor);

  id v10 = objc_msgSend(v0, sel_leadingAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  objc_msgSend(v11, sel_setActive_, 1);
}

id InCallControlsStatusCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsStatusCell.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_viewModel];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((void *)v2 + 4) = 0;
  id v3 = &v0[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_menuHostViewController];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_faceTimeSymbolImage;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v5 = (void *)*MEMORY[0x1E4FB28C8];
  v21[0] = 0x69662E6F65646976;
  v21[1] = 0xEA00000000006C6CLL;
  uint64_t v21[2] = -1;
  uint64_t v21[3] = v5;
  __int16 v22 = 0;
  uint64_t v23 = 4;
  char v24 = 0;
  uint64_t v25 = 0;
  id v6 = v5;
  id v7 = static UIImage.symbolImage(for:)((uint64_t)v21);

  swift_bridgeObjectRelease();
  *(void *)&v0[v4] = v7;
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_sharePlaySymbolImage;
  id v9 = self;
  id v10 = v6;
  id v11 = objc_msgSend(v9, sel_labelColor);
  OUTLINED_FUNCTION_9_20();
  v16[0] = v12;
  v16[1] = v13;
  _OWORD v16[2] = 1;
  v16[3] = v10;
  __int16 v17 = 0;
  uint64_t v18 = 4;
  char v19 = 0;
  uint64_t v20 = v14;
  id v15 = static UIImage.symbolImage(for:)((uint64_t)v16);

  swift_bridgeObjectRelease();
  *(void *)&v1[v8] = v15;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___iconImageView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___titleLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___subtitleLabel] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_actionButton] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___conversationStatusHStack] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell____lazy_storage___conversationStatusDetailsVStack] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t InCallControlsStatusCell.configure(with:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  id v7 = (void *)a1[4];
  v24[0] = *a1;
  uint64_t v3 = v24[0];
  v24[1] = v4;
  v24[2] = v5;
  uint64_t v24[3] = v6;
  v24[4] = v7;
  uint64_t v8 = *(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v7;
  v8(v24);
  OUTLINED_FUNCTION_8_22();
  id v11 = (void *)(*(uint64_t (**)(void))(v10 + 232))();
  outlined bridged method (mbgnn) of @objc UILabel.text.setter(v3, v4, v11);

  OUTLINED_FUNCTION_8_22();
  uint64_t v13 = (void *)(*(uint64_t (**)(void))(v12 + 256))();
  outlined bridged method (mbgnn) of @objc UILabel.text.setter(v5, v6, v13);

  OUTLINED_FUNCTION_8_22();
  char v15 = (*(uint64_t (**)(void))(v14 + 800))();
  OUTLINED_FUNCTION_8_22();
  __int16 v17 = *(uint64_t (**)(void))(v16 + 208);
  uint64_t v18 = (void *)v17();
  char v19 = v18;
  if (v15) {
    uint64_t v20 = 2;
  }
  else {
    uint64_t v20 = 1;
  }
  if (v15) {
    uint64_t v21 = &OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_sharePlaySymbolImage;
  }
  else {
    uint64_t v21 = &OBJC_IVAR____TtC15ConversationKit24InCallControlsStatusCell_faceTimeSymbolImage;
  }
  objc_msgSend(v18, sel_setContentMode_, v20);

  __int16 v22 = (void *)v17();
  objc_msgSend(v22, sel_setImage_, *(void *)((char *)v2 + *v21));

  return InCallControlsStatusCell.configureActionButton()();
}

uint64_t InCallControlsStatusCell.configureActionButton()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ConversationControlsAction();
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))(v33, v3);
  uint64_t result = outlined init with take of InCallControlsStatusCellViewModel?((uint64_t)v33, (uint64_t)v34);
  if (*((void *)&v34[0] + 1))
  {
    long long v36 = v34[0];
    long long v37 = v34[1];
    uint64_t v8 = v35;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))((*v6 & *v0) + 0x118))(result);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      id v11 = (void *)(*(uint64_t (**)(void))((*v6 & *v0) + 0x130))();
      objc_msgSend(v11, sel_removeArrangedSubview_, v10);

      objc_msgSend(v10, sel_removeFromSuperview);
    }
    id v12 = v8;
    static ConversationControlsAction.primaryCallAction(controlsManager:location:)();
    uint64_t v13 = (void *)(*(uint64_t (**)(void))((*v6 & *v1) + 0xB8))();
    ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
    char v15 = v14;

    objc_msgSend(v15, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    uint64_t v16 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1C3769610;
    id v18 = objc_msgSend(v15, sel_widthAnchor);
    id v19 = objc_msgSend(v18, sel_constraintEqualToConstant_, 0.0);

    LODWORD(v20) = 1144733696;
    objc_msgSend(v19, sel_setPriority_, v20);
    *(void *)(v17 + 32) = v19;
    id v21 = objc_msgSend(v15, sel_heightAnchor);
    id v22 = objc_msgSend(v21, sel_constraintEqualToConstant_, 36.0);

    type metadata accessor for UILayoutPriority(0);
    LODWORD(v38) = 1144750080;
    v32[3] = 1092616192;
    lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority();
    static _UIKitNumericRawRepresentable.- infix(_:_:)();
    LODWORD(v23) = v39;
    objc_msgSend(v22, sel_setPriority_, v23);
    *(void *)(v17 + 40) = v22;
    *(void *)&long long v39 = v17;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_activateConstraints_, isa);

    id v25 = v15;
    *(float *)&double v26 = ConversationControlsAction.ccrPriority.getter();
    objc_msgSend(v25, sel_setContentCompressionResistancePriority_forAxis_, 0, v26);

    uint64_t v27 = (void *)MEMORY[0x1E4FBC8C8];
    id v28 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x120);
    id v29 = v25;
    uint64_t v30 = v28(v25);
    __int16 v31 = (void *)(*(uint64_t (**)(uint64_t))((*v27 & *v1) + 0x130))(v30);
    objc_msgSend(v31, sel_addArrangedSubview_, v29);

    long long v38 = v36;
    outlined release of String((uint64_t)&v38);
    long long v39 = v37;
    outlined release of String((uint64_t)&v39);

    return outlined destroy of ConversationControlsAction((uint64_t)v5);
  }
  return result;
}

Swift::Void __swiftcall InCallControlsStatusCell.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for InCallControlsStatusCell();
  objc_msgSendSuper2(&v13, sel_traitCollectionDidChange_, isa);
  id v3 = objc_msgSend(v1, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  char v5 = UIContentSizeCategory.isAccessibilityCategory.getter();
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  id v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD0))();
  uint64_t v8 = v7;
  if (v5) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 3;
  }
  objc_msgSend(v7, sel_setHidden_, v5 & 1);

  uint64_t v10 = *(uint64_t (**)(void))((*v6 & *v1) + 0x130);
  id v11 = (void *)v10();
  objc_msgSend(v11, sel_setAxis_, v5 & 1);

  id v12 = (void *)v10();
  objc_msgSend(v12, sel_setAlignment_, v9);
}

id InCallControlsStatusCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsStatusCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void InCallControlsStatusCell.setupLayoutConstraints()()
{
  uint64_t v1 = v0;
  unint64_t v2 = MEMORY[0x1E4FBC860];
  unint64_t v44 = MEMORY[0x1E4FBC860];
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  objc_msgSend(v1, sel_addLayoutGuide_, v3);
  id v4 = objc_msgSend(v3, sel_topAnchor);
  id v5 = objc_msgSend(v1, sel_topAnchor);
  id v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_constant_, v5, 11.0);

  id v7 = objc_msgSend(v3, sel_leadingAnchor);
  id v8 = objc_msgSend(v1, sel_leadingAnchor);
  id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v8, 18.0);

  id v10 = objc_msgSend(v3, sel_bottomAnchor);
  id v11 = objc_msgSend(v1, sel_bottomAnchor);
  id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v11, -11.0);

  id v13 = objc_msgSend(v3, sel_trailingAnchor);
  id v14 = objc_msgSend(v1, sel_trailingAnchor);
  id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v14, -10.0);

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v16 + 4, 1);
    specialized Array._endMutation()();
    id v6 = v6;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_5;
    }
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_5:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v17 = v9;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v18 = v12;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v19 = v15;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  double v20 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x130);
  id v21 = (void *)v20();
  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v22 = (void *)v20();
  id v23 = objc_msgSend(v22, sel_topAnchor);

  id v24 = objc_msgSend(v3, sel_topAnchor);
  id v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  double v26 = (void *)v20();
  id v27 = objc_msgSend(v26, sel_leadingAnchor);

  id v28 = objc_msgSend(v3, sel_leadingAnchor);
  id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  uint64_t v30 = (void *)v20();
  id v31 = objc_msgSend(v30, sel_bottomAnchor);

  id v32 = objc_msgSend(v3, sel_bottomAnchor);
  id v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v32);

  uint64_t v34 = (void *)v20();
  id v35 = objc_msgSend(v34, sel_trailingAnchor);

  id v36 = objc_msgSend(v3, sel_trailingAnchor);
  id v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v36);

  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v38 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v38, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v38 + 4, 1);
    specialized Array._endMutation()();
    id v25 = v25;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_15:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v39 = v29;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v40 = v33;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v41 = v37;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v42 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v42, sel_activateConstraints_, isa);
}

uint64_t type metadata accessor for InCallControlsStatusCell()
{
  return self;
}

void outlined bridged method (mbgnn) of @objc UILabel.text.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  objc_msgSend(a3, sel_setText_, v4);
}

uint64_t method lookup function for InCallControlsStatusCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsStatusCell);
}

uint64_t dispatch thunk of InCallControlsStatusCell.viewModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.viewModel.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA8);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  uint64_t v7 = v2;
  return v3(v6);
}

uint64_t dispatch thunk of InCallControlsStatusCell.viewModel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.menuHostViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.menuHostViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.menuHostViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.iconImageView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.iconImageView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.iconImageView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.titleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.titleLabel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.titleLabel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.subtitleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.subtitleLabel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.subtitleLabel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.actionButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.actionButton.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.actionButton.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.conversationStatusHStack.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.conversationStatusHStack.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.conversationStatusHStack.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.conversationStatusDetailsVStack.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.conversationStatusDetailsVStack.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.conversationStatusDetailsVStack.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of InCallControlsStatusCell.configure(with:)(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  id v3 = *(uint64_t (**)(long long *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x160);
  long long v5 = *a1;
  uint64_t v6 = v2;
  long long v7 = *(long long *)((char *)a1 + 24);
  return v3(&v5);
}

uint64_t outlined retain of InCallControlsStatusCellViewModel?(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority()
{
  unint64_t result = lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority;
  if (!lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority)
  {
    type metadata accessor for UILayoutPriority(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority);
  }
  return result;
}

uint64_t outlined destroy of ConversationControlsAction(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationControlsAction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo8TUHandleCG_15ConversationKit11ParticipantVs5NeverOTg5(void (*a1)(void **), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for Participant(0);
  uint64_t v8 = OUTLINED_FUNCTION_1(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  unint64_t v32 = a3 & 0xC000000000000001;
  if ((a3 & 0xC000000000000001) != 0) {
    uint64_t v9 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v9 = *(void *)(a3 + 16);
  }
  if (!v9)
  {
LABEL_24:
    OUTLINED_FUNCTION_42_3();
    return;
  }
  uint64_t v37 = MEMORY[0x1E4FBC860];
  OUTLINED_FUNCTION_48_5();
  if (v32)
  {
    uint64_t v10 = __CocoaSet.startIndex.getter();
    unsigned __int8 v12 = 1;
  }
  else
  {
    uint64_t v10 = specialized _NativeSet.startIndex.getter(a3);
    unsigned __int8 v12 = v13 & 1;
  }
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  unsigned __int8 v36 = v12;
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v30 = a3;
    while (1)
    {
      uint64_t v14 = v34;
      uint64_t v15 = v35;
      uint64_t v16 = v36;
      specialized Set.subscript.getter(v34, v35, v36, a3);
      id v18 = v17;
      id v33 = v17;
      a1(&v33);

      if (v4) {
        break;
      }
      uint64_t v19 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = v37;
      }
      unint64_t v21 = *(void *)(v19 + 16);
      unint64_t v20 = *(void *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v19 = v37;
      }
      *(void *)(v19 + 16) = v21 + 1;
      OUTLINED_FUNCTION_12_19();
      outlined init with take of Participant();
      if (v32)
      {
        a3 = v30;
        if ((v16 & 1) == 0) {
          goto LABEL_26;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>.Index);
        id v28 = (void (*)(uint64_t))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        uint64_t v29 = OUTLINED_FUNCTION_44_3();
        v28(v29);
      }
      else
      {
        a3 = v30;
        uint64_t v22 = specialized _NativeSet.index(after:)(v14, v15, v16, v30);
        uint64_t v23 = a2;
        uint64_t v25 = v24;
        char v27 = v26;
        outlined consume of Set<TUHandle>.Index._Variant(v14, v15, v16);
        uint64_t v34 = v22;
        uint64_t v35 = v25;
        a2 = v23;
        uint64_t v4 = 0;
        unsigned __int8 v36 = v27 & 1;
      }
      if (!--v9)
      {
        outlined consume of Set<TUHandle>.Index._Variant(v34, v35, v36);
        goto LABEL_24;
      }
    }
    outlined consume of Set<TUHandle>.Index._Variant(v14, v15, v16);
    swift_release();
    goto LABEL_24;
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8TUHandleCG_15ConversationKit11ParticipantVs5NeverOTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Participant(0);
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  MEMORY[0x1F4188790](v6);
  if ((unint64_t)a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v7)
    {
LABEL_16:
      OUTLINED_FUNCTION_42_3();
      return;
    }
    uint64_t v14 = MEMORY[0x1E4FBC860];
    OUTLINED_FUNCTION_48_5();
    if (v7 < 0) {
      break;
    }
    uint64_t v8 = 0;
    while (v7 != v8)
    {
      if ((a3 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x1C87744F0](v8, a3);
      }
      else {
        id v9 = *(id *)(a3 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      OUTLINED_FUNCTION_22_7();
      v11();
      if (v3)
      {
        swift_release();

        goto LABEL_16;
      }

      unint64_t v13 = *(void *)(v14 + 16);
      unint64_t v12 = *(void *)(v14 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      ++v8;
      *(void *)(v14 + 16) = v13 + 1;
      OUTLINED_FUNCTION_12_19();
      outlined init with take of Participant();
      if (v7 == v8) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    if (a3 < 0) {
      uint64_t v3 = a3;
    }
    else {
      uint64_t v3 = a3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit16CaptionSectionerV0F0VG_AJs5NeverOTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v11 = *(void *)(v8 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_22_7();
      v12();
      if (v3) {
        break;
      }
      unint64_t v14 = *(void *)(v15 + 16);
      unint64_t v13 = *(void *)(v15 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v15 + 16) = v14 + 1;
      outlined init with take of Participant();
      v10 += v11;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    swift_release();
  }
LABEL_9:
  OUTLINED_FUNCTION_42_3();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit11ParticipantV7CaptionVG_AF0G9SectionerVAIVs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for CaptionSectioner.Caption(0) - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = v16;
    uint64_t v9 = *(void *)(type metadata accessor for Participant.Caption(0) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v14 = *(void *)(v9 + 72);
    while (1)
    {
      a1(v10);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      unint64_t v12 = *(void *)(v16 + 16);
      unint64_t v11 = *(void *)(v16 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v16 + 16) = v12 + 1;
      outlined init with take of Participant();
      v10 += v14;
      if (!--v7) {
        return v8;
      }
    }
    swift_release();
  }
  return v8;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg5(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    goto LABEL_18;
  }
  if (v5)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v5 < 0)
    {
LABEL_19:
      __break(1u);
      return;
    }
    uint64_t v9 = a3;
    while (a4 != v9)
    {
      OUTLINED_FUNCTION_22_7();
      a1();
      if (v4)
      {
        swift_release();
        return;
      }
      unint64_t v10 = *(void *)(v12 + 16);
      if (v10 >= *(void *)(v12 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(void *)(v12 + 8 * v10 + 32) = v11;
      if (a4 < a3) {
        goto LABEL_16;
      }
      if (v9 >= a4) {
        goto LABEL_17;
      }
      if (a4 == ++v9) {
        return;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI14LayoutSubviewsV_12CoreGraphics7CGFloatVs5NeverOTg5()
{
  type metadata accessor for LayoutSubview();
  OUTLINED_FUNCTION_5_3();
  uint64_t v15 = v2;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_25_7();
  type metadata accessor for LayoutSubviews();
  lazy protocol witness table accessor for type CaptionSectioner.SectionID and conformance CaptionSectioner.SectionID((unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews, MEMORY[0x1E4F3C980]);
  uint64_t v4 = dispatch thunk of Collection.count.getter();
  if (!v4)
  {
LABEL_11:
    OUTLINED_FUNCTION_42_3();
    return;
  }
  uint64_t v5 = v4;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  dispatch thunk of Collection.startIndex.getter();
  if ((v5 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      uint64_t v6 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      (*(void (**)(uint64_t))(v15 + 16))(v1);
      uint64_t v7 = OUTLINED_FUNCTION_44_3();
      v6(v7);
      OUTLINED_FUNCTION_22_7();
      v8();
      if (v0) {
        break;
      }
      uint64_t v9 = OUTLINED_FUNCTION_31_7();
      v10(v9);
      uint64_t v11 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v17;
      }
      unint64_t v12 = *(void *)(v11 + 16);
      if (v12 >= *(void *)(v11 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v11 = v17;
      }
      *(void *)(v11 + 16) = v12 + 1;
      *(void *)(v11 + 8 * v12 + 32) = v16;
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v5) {
        goto LABEL_11;
      }
    }
    uint64_t v13 = OUTLINED_FUNCTION_31_7();
    v14(v13);
    swift_release();
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18NSNotificationNameaG_So8NSObject_ps5NeverOTg5(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    for (unint64_t i = (id *)(a3 + 32); ; ++i)
    {
      id v9 = *i;
      OUTLINED_FUNCTION_22_7();
      a1();

      if (v3) {
        break;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v5) {
        return v10;
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit22TranscriptionViewModelC7CaptionVG_SSs5NeverOTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v5 = v18;
    uint64_t v7 = type metadata accessor for TranscriptionViewModel.Caption(0);
    OUTLINED_FUNCTION_1(v7);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_22_7();
      v11();
      if (v3) {
        break;
      }
      unint64_t v12 = *(void *)(v18 + 16);
      if (v12 >= *(void *)(v18 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v18 + 16) = v12 + 1;
      uint64_t v13 = v18 + 16 * v12;
      *(void *)(v13 + 32) = v16;
      *(void *)(v13 + 40) = v17;
      v9 += v15;
      if (!--v4) {
        return v5;
      }
    }
    swift_release();
  }
  return v5;
}

void CaptionSectioner.Caption.Visibility.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static CaptionSectioner.Caption.Visibility.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int CaptionSectioner.Caption.Visibility.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CaptionSectioner.Caption.Visibility()
{
  return CaptionSectioner.Caption.Visibility.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CaptionSectioner.Caption.Visibility(uint64_t a1)
{
  CaptionSectioner.Caption.Visibility.hash(into:)(a1, *v1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CaptionSectioner.Caption.Visibility(char *a1, char *a2)
{
  return static CaptionSectioner.Caption.Visibility.== infix(_:_:)(*a1, *a2);
}

uint64_t CaptionSectioner.Caption.id.getter()
{
  return *(void *)v0;
}

uint64_t CaptionSectioner.Caption.id.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CaptionSectioner.Caption.id.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.participant.getter()
{
  return CaptionSectioner.Caption.participant.getter((void (*)(void))type metadata accessor for CaptionSectioner.Caption);
}

uint64_t type metadata accessor for CaptionSectioner.Caption(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for CaptionSectioner.Caption);
}

uint64_t CaptionSectioner.Caption.participant.setter()
{
  return CaptionSectioner.Caption.participant.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  uint64_t v0 = OUTLINED_FUNCTION_49_2();
  v1(v0);
  return outlined assign with take of Participant();
}

uint64_t (*CaptionSectioner.Caption.participant.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.dateCreated.getter()
{
  type metadata accessor for CaptionSectioner.Caption(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t CaptionSectioner.Caption.dateCreated.setter()
{
  type metadata accessor for CaptionSectioner.Caption(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t (*CaptionSectioner.Caption.dateCreated.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.dateUpdated.getter()
{
  type metadata accessor for CaptionSectioner.Caption(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t CaptionSectioner.Caption.dateUpdated.setter()
{
  type metadata accessor for CaptionSectioner.Caption(0);
  OUTLINED_FUNCTION_47_2();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t (*CaptionSectioner.Caption.dateUpdated.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.image.getter()
{
  type metadata accessor for CaptionSectioner.Caption(0);
  return swift_retain();
}

uint64_t CaptionSectioner.Caption.image.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_15_13() + 32);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*CaptionSectioner.Caption.image.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.text.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t CaptionSectioner.Caption.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CaptionSectioner.Caption(0) + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CaptionSectioner.Caption.text.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.isBadTranscription.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CaptionSectioner.Caption(0) + 40));
}

uint64_t CaptionSectioner.Caption.isBadTranscription.setter(char a1)
{
  uint64_t result = type metadata accessor for CaptionSectioner.Caption(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CaptionSectioner.Caption.isBadTranscription.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.lowConfidenceRanges.getter()
{
  type metadata accessor for CaptionSectioner.Caption(0);
  return swift_bridgeObjectRetain();
}

uint64_t CaptionSectioner.Caption.lowConfidenceRanges.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_15_13() + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*CaptionSectioner.Caption.lowConfidenceRanges.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.Caption.visibility.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CaptionSectioner.Caption(0) + 48));
}

uint64_t CaptionSectioner.Caption.visibility.setter(char a1)
{
  uint64_t result = type metadata accessor for CaptionSectioner.Caption(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*CaptionSectioner.Caption.visibility.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL CaptionSectioner.Caption.suppressed.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CaptionSectioner.Caption(0) + 48)) == 1;
}

BOOL CaptionSectioner.Caption.expired.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CaptionSectioner.Caption(0) + 48)) == 2;
}

void CaptionSectioner.Caption.isDisplayEquivalent(to:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for CaptionSectioner.Caption(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_10_5();
  v33[2] = v5;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_8_4();
  v33[1] = v7;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_8_4();
  v33[0] = v9;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_8_4();
  uint64_t v34 = v11;
  OUTLINED_FUNCTION_8_1();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v33 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)v33 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  MEMORY[0x1F4188790](v19);
  uint64_t v20 = *v0;
  uint64_t v21 = *v2;
  _s15ConversationKit11ParticipantVWOcTm_0();
  _s15ConversationKit11ParticipantVWOcTm_0();
  if (v20 != v21)
  {
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
    _s15ConversationKit11ParticipantVWOcTm_0();
    _s15ConversationKit11ParticipantVWOcTm_0();
    goto LABEL_10;
  }
  static Participant.== infix(_:_:)();
  char v23 = v22;
  outlined destroy of CaptionSectioner.Caption();
  outlined destroy of CaptionSectioner.Caption();
  _s15ConversationKit11ParticipantVWOcTm_0();
  _s15ConversationKit11ParticipantVWOcTm_0();
  if ((v23 & 1) == 0)
  {
LABEL_10:
    outlined destroy of CaptionSectioner.Caption();
    OUTLINED_FUNCTION_18_15();
    _s15ConversationKit11ParticipantVWOcTm_0();
    OUTLINED_FUNCTION_45_2();
    goto LABEL_11;
  }
  uint64_t v24 = *(int *)(v3 + 36);
  uint64_t v25 = *(void *)&v18[v24];
  uint64_t v26 = *(void *)&v18[v24 + 8];
  char v27 = &v15[v24];
  BOOL v28 = v25 == *(void *)v27 && v26 == *((void *)v27 + 1);
  uint64_t v29 = v34;
  if (v28)
  {
    outlined destroy of CaptionSectioner.Caption();
    OUTLINED_FUNCTION_18_15();
    _s15ConversationKit11ParticipantVWOcTm_0();
    OUTLINED_FUNCTION_45_2();
    goto LABEL_15;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined destroy of CaptionSectioner.Caption();
  outlined destroy of CaptionSectioner.Caption();
  _s15ConversationKit11ParticipantVWOcTm_0();
  uint64_t v18 = (char *)v33[0];
  _s15ConversationKit11ParticipantVWOcTm_0();
  if ((v30 & 1) == 0)
  {
LABEL_11:
    outlined destroy of CaptionSectioner.Caption();
    OUTLINED_FUNCTION_29_10();
    _s15ConversationKit11ParticipantVWOcTm_0();
    _s15ConversationKit11ParticipantVWOcTm_0();
    goto LABEL_12;
  }
LABEL_15:
  BOOL v31 = *(unsigned __int8 *)(v29 + *(int *)(v3 + 48)) != 2;
  outlined destroy of CaptionSectioner.Caption();
  BOOL v32 = v18[*(int *)(v3 + 48)] == 2;
  outlined destroy of CaptionSectioner.Caption();
  _s15ConversationKit11ParticipantVWOcTm_0();
  _s15ConversationKit11ParticipantVWOcTm_0();
  if ((v31 ^ v32))
  {
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
    goto LABEL_13;
  }
LABEL_12:
  outlined destroy of CaptionSectioner.Caption();
  OUTLINED_FUNCTION_18_15();
LABEL_13:
  OUTLINED_FUNCTION_28();
}

BOOL static CaptionSectioner.CaptionID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_0()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_21();
  v2(v1);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_33_3();
  v4(v3);
  return v0;
}

BOOL static CaptionSectioner.Caption.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v5 = OUTLINED_FUNCTION_9_21();
  type metadata accessor for CaptionSectioner.Caption(v5);
  OUTLINED_FUNCTION_41_4();
  if ((v6 & 1) == 0 || (static Date.== infix(_:_:)() & 1) == 0 || (static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v7 = v4[8];
  uint64_t v8 = *(void *)(v2 + v7);
  if (*(void *)(v3 + v7))
  {
    if (!v8) {
      return 0;
    }
    swift_retain();
    swift_retain();
    char v9 = static Image.== infix(_:_:)();
    swift_release();
    swift_release();
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  uint64_t v10 = v4[9];
  uint64_t v11 = *(void *)(v3 + v10);
  uint64_t v12 = *(void *)(v3 + v10 + 8);
  uint64_t v13 = (void *)(v2 + v10);
  BOOL v14 = v11 == *v13 && v12 == v13[1];
  if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v15 & 1) != 0))
  {
    if (*(unsigned __int8 *)(v3 + v4[10]) == *(unsigned __int8 *)(v2 + v4[10]))
    {
      specialized static Array<A>.== infix(_:_:)(*(int64x2_t **)(v3 + v4[11]), *(int64x2_t **)(v2 + v4[11]));
      if (v17) {
        return *(unsigned __int8 *)(v3 + v4[12]) == *(unsigned __int8 *)(v2 + v4[12]);
      }
    }
    return 0;
  }
  return result;
}

void specialized static Array<A>.== infix(_:_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_3_27();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_13_12();
  OUTLINED_FUNCTION_40_3();
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v46 = (char *)&v38 - v8;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_51_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_50_3();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_19_16();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  BOOL v14 = (char *)&v38 - v13;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_27_6();
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = *(void *)(v4 + 16);
  if (v20 == *(void *)(v2 + 16) && v20 && v4 != v2)
  {
    uint64_t v42 = v16;
    uint64_t v43 = v19;
    uint64_t v44 = v18;
    unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v39 = *(void *)(v17 + 72);
    id v40 = v14;
    uint64_t v22 = v20 - 1;
    uint64_t v41 = v4;
    while (1)
    {
      uint64_t v23 = v22;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      static Participant.State.== infix(_:_:)();
      char v25 = v24;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v25 & 1) == 0) {
        break;
      }
      uint64_t v45 = v23;
      uint64_t v26 = v2;
      uint64_t v27 = v42;
      char v28 = static UUID.== infix(_:_:)();
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v29 = v0;
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v30 = v43;
      _s15ConversationKit11ParticipantVWOcTm_0();
      uint64_t v31 = v44;
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v28 & 1) == 0) {
        goto LABEL_17;
      }
      char v32 = (*(void *)(v30 + *(int *)(v27 + 28)) != 0) ^ (*(void *)(v31 + *(int *)(v27 + 28)) == 0);
      outlined destroy of CaptionSectioner.Caption();
      OUTLINED_FUNCTION_18_15();
      _s15ConversationKit11ParticipantVWOcTm_0();
      OUTLINED_FUNCTION_54_0();
      if ((v32 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v33 = *(int *)(v27 + 24);
      uint64_t v34 = (unsigned __int8 *)&v46[v33];
      int v35 = v46[v33];
      unsigned __int8 v36 = (unsigned __int8 *)(v47 + v33);
      if (v35 != *v36 || ((v34[1] ^ v36[1]) & 1) != 0 || ((v34[2] ^ v36[2]) & 1) != 0 || ((v34[3] ^ v36[3]) & 1) != 0) {
        goto LABEL_18;
      }
      char v37 = v36[4] ^ v34[4];
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      OUTLINED_FUNCTION_29_10();
      OUTLINED_FUNCTION_18_15();
      uint64_t v2 = v26;
      uint64_t v0 = v29;
      if ((v37 & 1) == 0)
      {
        uint64_t v22 = v45 - 1;
        v21 += v39;
        if (v45) {
          continue;
        }
      }
      goto LABEL_19;
    }
    outlined destroy of CaptionSectioner.Caption();
    OUTLINED_FUNCTION_29_10();
    _s15ConversationKit11ParticipantVWOcTm_0();
    _s15ConversationKit11ParticipantVWOcTm_0();
LABEL_17:
    outlined destroy of CaptionSectioner.Caption();
    OUTLINED_FUNCTION_18_15();
    _s15ConversationKit11ParticipantVWOcTm_0();
    OUTLINED_FUNCTION_54_0();
LABEL_18:
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
    OUTLINED_FUNCTION_29_10();
    OUTLINED_FUNCTION_18_15();
  }
LABEL_19:
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;

  OUTLINED_FUNCTION_26_3();
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == *(void *)(v1 + 16) && v2 && v0 != v1)
  {
    uint64_t v3 = (uint64_t *)(v1 + 64);
    uint64_t v4 = (uint64_t *)(v0 + 64);
    do
    {
      uint64_t v16 = v2;
      uint64_t v5 = *((unsigned __int8 *)v4 - 16);
      uint64_t v6 = *(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v8 = *((unsigned __int8 *)v3 - 16);
      uint64_t v10 = *(v3 - 1);
      uint64_t v9 = *v3;
      if (*(v4 - 4) == *(v3 - 4) && *(v4 - 3) == *(v3 - 3))
      {
        if (v5 != v8) {
          break;
        }
      }
      else if (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || ((v5 ^ v8))
      {
        break;
      }
      if (v6)
      {
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v6;
        *(void *)(v12 + 24) = v7;
        uint64_t v13 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      }
      else
      {
        uint64_t v13 = 0;
      }
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v6);
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v10);
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v13);
      if (v10)
      {
        BOOL v14 = swift_allocObject();
        *(void *)(v14 + 16) = v10;
        *(void *)(v14 + 24) = v9;
        uint64_t v15 = partial apply for thunk for @callee_guaranteed () -> ();
      }
      else
      {
        uint64_t v15 = 0;
      }
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v10);
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v15);
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v10);
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v6);
      if ((v6 == 0) != (v10 == 0)) {
        break;
      }
      v3 += 5;
      v4 += 5;
      uint64_t v2 = v16 - 1;
    }
    while (v16 != 1);
  }
  OUTLINED_FUNCTION_16();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  BOOL v12;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_9_21();
  uint64_t v2 = type metadata accessor for ConversationControlsAction() - 8;
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_13_12();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5 == *(void *)(v0 + 16) && v5 && v1 != v0)
  {
    uint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v7 = *(void *)(v4 + 72);
    uint64_t v8 = v5 - 1;
    do
    {
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      static ConversationControlsAction.== infix(_:_:)();
      uint64_t v10 = v9;
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v12 = v8-- != 0;
      if ((v10 & 1) == 0) {
        break;
      }
      v6 += v7;
    }
    while (v12);
  }
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;

  OUTLINED_FUNCTION_31();
  uint64_t v2 = OUTLINED_FUNCTION_9_21();
  type metadata accessor for ParticipantReaction(v2);
  OUTLINED_FUNCTION_3_27();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_13_12();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_19_16();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_27_6();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = *(void *)(v1 + 16);
  if (v8 == *(void *)(v0 + 16) && v8 && v1 != v0)
  {
    uint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v17 = *(void *)(v7 + 72);
    while (1)
    {
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      type metadata accessor for Participant(0);
      uint64_t v10 = static UUID.== infix(_:_:)();
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v10 & 1) == 0) {
        break;
      }
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
      {
        swift_bridgeObjectRelease_n();
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
      }
      else
      {
        uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        if ((v16 & 1) == 0) {
          goto LABEL_16;
        }
      }
      v9 += v17;
      if (!--v8) {
        goto LABEL_16;
      }
    }
    outlined destroy of CaptionSectioner.Caption();
    OUTLINED_FUNCTION_29_10();
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
  }
LABEL_16:
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(char *, unint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(char *, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)(char *, uint64_t);
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;

  OUTLINED_FUNCTION_31();
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == *(void *)(v1 + 16))
  {
    if (v2)
    {
      uint64_t v3 = v1;
      uint64_t v4 = v0;
      uint64_t v5 = type metadata accessor for UUID();
      uint64_t v6 = *(void *)(v5 - 8);
      if (v4 != v3)
      {
        uint64_t v7 = v5;
        uint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        uint64_t v9 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        uint64_t v23 = *(void *)(v6 + 64);
        char v24 = v9;
        uint64_t v20 = *(void *)(v6 + 72);
        unint64_t v21 = v4;
        char v25 = v6 + 16;
        uint64_t v22 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
        uint64_t v10 = v2 - 1;
        do
        {
          uint64_t v27 = &v20;
          uint64_t v11 = v23;
          MEMORY[0x1F4188790](v5);
          uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v13 = v24;
          BOOL v14 = ((uint64_t (*)(char *, unint64_t, uint64_t))v24)(v12, v4 + v8, v7);
          uint64_t v26 = &v20;
          MEMORY[0x1F4188790](v14);
          uint64_t v15 = v3;
          v13(v12, v3 + v8, v7);
          _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB60]);
          uint64_t v16 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v17 = *v22;
          (*v22)(v12, v7);
          uint64_t v5 = v17(v12, v7);
          uint64_t v19 = v10-- != 0;
          if ((v16 & 1) == 0) {
            break;
          }
          v8 += v20;
          uint64_t v3 = v15;
          uint64_t v4 = v21;
        }
        while (v19);
      }
    }
  }
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  BOOL v13;

  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == *(void *)(v1 + 16))
  {
    if (v2)
    {
      uint64_t v3 = v1;
      uint64_t v4 = v0;
      if (v0 != v1)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        uint64_t v5 = v2 - 1;
        uint64_t v6 = v3 + 48;
        uint64_t v7 = v4 + 48;
        do
        {
          uint64_t v8 = *(void **)(v6 - 16);
          uint64_t v9 = *(id *)(v7 - 16);
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v10 = v8;
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v11 = static NSObject.== infix(_:_:)();
          swift_release();
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();

          uint64_t v13 = v5-- != 0;
          if ((v11 & 1) == 0) {
            break;
          }
          v6 += 24;
          v7 += 24;
        }
        while (v13);
      }
    }
  }
  OUTLINED_FUNCTION_22();
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)specialized Array._checkSubscript(_:wasNativeTypeChecked:), (uint64_t)&lazy cache variable for type metadata for UIColor, 0x1E4FB1618, a6, a7, a8, a9, a10, a11, a12);
}

{
  specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)specialized Array._checkSubscript(_:wasNativeTypeChecked:), (uint64_t)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, a6, a7, a8, a9, a10, a11, a12);
}

{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void, BOOL, uint64_t);
  void (*v16)(void, BOOL, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  char v36;

  OUTLINED_FUNCTION_26_3();
  BOOL v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v19 = v12;
  uint64_t v20 = v12 >> 62;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v21 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v21 != v22 || !v21) {
    goto LABEL_33;
  }
  uint64_t v23 = v19 & 0xFFFFFFFFFFFFFF8;
  char v24 = (v19 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v19 < 0) {
    uint64_t v23 = v19;
  }
  if (v20) {
    char v24 = v23;
  }
  char v25 = v18 & 0xFFFFFFFFFFFFFF8;
  uint64_t v26 = (v18 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v18 < 0) {
    char v25 = v18;
  }
  if ((unint64_t)v18 >> 62) {
    uint64_t v26 = v25;
  }
  if (v24 == v26) {
    goto LABEL_33;
  }
  if (v21 < 0)
  {
LABEL_38:
    __break(1u);
  }
  else
  {
    v16(0, (v19 & 0xC000000000000001) == 0, v19);
    a12 = v19 & 0xC000000000000001;
    if ((v19 & 0xC000000000000001) == 0)
    {
      uint64_t v27 = *(id *)(v19 + 32);
      goto LABEL_19;
    }
  }
  uint64_t v27 = (id)MEMORY[0x1C87744F0](0, v19);
LABEL_19:
  char v28 = v27;
  v16(0, (v18 & 0xC000000000000001) == 0, v18);
  if ((v18 & 0xC000000000000001) != 0) {
    OUTLINED_FUNCTION_53_3();
  }
  else {
    uint64_t v29 = *(id *)(v18 + 32);
  }
  uint64_t v30 = v29;
  type metadata accessor for NSObject(0, (unint64_t *)v14);
  BOOL v14 = static NSObject.== infix(_:_:)();

  if (v14)
  {
    uint64_t v31 = 1 - v21;
    char v32 = 5;
    do
    {
      unint64_t v21 = v31 + v32 == 5;
      if (v31 + v32 == 5) {
        break;
      }
      uint64_t v16 = (void (*)(void, BOOL, uint64_t))(v32 - 4);
      if (a12)
      {
        uint64_t v33 = (id)MEMORY[0x1C87744F0](v32 - 4, v19);
      }
      else
      {
        if ((unint64_t)v16 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v33 = *(id *)(v19 + 8 * v32);
      }
      BOOL v14 = (uint64_t)v33;
      if ((v18 & 0xC000000000000001) != 0)
      {
        uint64_t v34 = (id)MEMORY[0x1C87744F0](v32 - 4, v18);
      }
      else
      {
        if ((unint64_t)v16 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_37;
        }
        uint64_t v34 = *(id *)(v18 + 8 * v32);
      }
      int v35 = v34;
      unsigned __int8 v36 = static NSObject.== infix(_:_:)();

      ++v32;
    }
    while ((v36 & 1) != 0);
  }
LABEL_33:
  OUTLINED_FUNCTION_16();
}

{
  specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)specialized Array._checkSubscript(_:wasNativeTypeChecked:), (uint64_t)&lazy cache variable for type metadata for CNContact, 0x1E4F1B8F8, a6, a7, a8, a9, a10, a11, a12);
}

{
  specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t)specialized Array._checkSubscript(_:wasNativeTypeChecked:), (uint64_t)&lazy cache variable for type metadata for TUContinuityCall, 0x1E4FADB10, a6, a7, a8, a9, a10, a11, a12);
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_31();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = (int *)type metadata accessor for TranscriptionViewModel.Caption(0);
  OUTLINED_FUNCTION_3_27();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_13_12();
  uint64_t v31 = (void *)(v29 - v30);
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (uint64_t *)((char *)&a9 - v33);
  uint64_t v35 = *(void *)(v26 + 16);
  if (v35 == *(void *)(v24 + 16) && v35 && v26 != v24)
  {
    OUTLINED_FUNCTION_52_4();
    while (1)
    {
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if (*v34 != *v31 || (static Date.== infix(_:_:)() & 1) == 0 || (static Date.== infix(_:_:)() & 1) == 0) {
        break;
      }
      uint64_t v36 = v27[7];
      uint64_t v37 = *(void *)((char *)v34 + v36);
      uint64_t v38 = *(void *)((char *)v34 + v36 + 8);
      uint64_t v39 = (void *)((char *)v31 + v36);
      BOOL v40 = v37 == *v39 && v38 == v39[1];
      if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      if (*((unsigned __int8 *)v34 + v27[8]) != *((unsigned __int8 *)v31 + v27[8])) {
        break;
      }
      uint64_t v41 = v27[9];
      uint64_t v42 = *(int64x2_t **)((char *)v34 + v41);
      uint64_t v43 = *(int64x2_t **)((char *)v31 + v41);
      uint64_t v44 = v42[1].i64[0];
      if (v44 != v43[1].i64[0]) {
        break;
      }
      if (v44) {
        BOOL v45 = v42 == v43;
      }
      else {
        BOOL v45 = 1;
      }
      if (!v45)
      {
        if (v42[2].i64[0] != v43[2].i64[0] || v42[2].i64[1] != v43[2].i64[1]) {
          break;
        }
        id v48 = v42 + 3;
        uint64_t v49 = v44 - 1;
        while (v49)
        {
          OUTLINED_FUNCTION_23_6(v48);
          if ((v50 & 1) == 0) {
            goto LABEL_31;
          }
        }
      }
      char v46 = *((unsigned char *)v34 + v27[10]) ^ *((unsigned char *)v31 + v27[10]);
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      if ((v46 & 1) == 0 && ++v20 != v35) {
        continue;
      }
      goto LABEL_32;
    }
LABEL_31:
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
  }
LABEL_32:
  OUTLINED_FUNCTION_28();
}

int32x2_t specialized static Array<A>.== infix(_:_:)(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0] && v2 && a1 != a2 && a1[2].i64[0] == a2[2].i64[0] && a1[2].i64[1] == a2[2].i64[1])
  {
    uint64_t v4 = a1 + 3;
    uint64_t v5 = v2 - 1;
    do
    {
      if (!v5) {
        break;
      }
      int32x2_t result = OUTLINED_FUNCTION_23_6(v4);
    }
    while ((v7 & 1) != 0);
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v71 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v71 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v71 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v71 - v20;
  uint64_t v22 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = *(void *)(a1 + 16);
  if (v28 == *(void *)(a2 + 16))
  {
    if (!v28 || a1 == a2) {
      return 1;
    }
    uint64_t v85 = (int *)v24;
    id v86 = (char *)&v71 - v26;
    UIMenuOptions v76 = v21;
    uint64_t v77 = v19;
    uint64_t v74 = a2;
    uint64_t v75 = v4;
    uint64_t v78 = v16;
    uint64_t v79 = v13;
    UIMenuElementSize v87 = v27;
    Swift::OpaquePointer v80 = v10;
    unint64_t v29 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v72 = *(void *)(v25 + 72);
    uint64_t v73 = a1;
    uint64_t v30 = v28 - 1;
    while (1)
    {
      uint64_t v82 = v30;
      uint64_t v31 = v86;
      _s15ConversationKit11ParticipantVWOcTm_0();
      unint64_t v81 = v29;
      uint64_t v32 = v87;
      _s15ConversationKit11ParticipantVWOcTm_0();
      if (*v31 != *v32) {
        break;
      }
      static Participant.State.== infix(_:_:)();
      char v34 = v33;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v34 & 1) == 0)
      {
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        _s15ConversationKit11ParticipantVWOcTm_0();
        _s15ConversationKit11ParticipantVWOcTm_0();
LABEL_33:
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        _s15ConversationKit11ParticipantVWOcTm_0();
        _s15ConversationKit11ParticipantVWOcTm_0();
LABEL_34:
        outlined destroy of CaptionSectioner.Caption();
        outlined destroy of CaptionSectioner.Caption();
        break;
      }
      uint64_t v35 = v75;
      char v36 = static UUID.== infix(_:_:)();
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v37 = v78;
      _s15ConversationKit11ParticipantVWOcTm_0();
      uint64_t v38 = v79;
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v36 & 1) == 0) {
        goto LABEL_33;
      }
      BOOL v39 = *(void *)&v37[*(int *)(v35 + 28)] != 0;
      outlined destroy of CaptionSectioner.Caption();
      BOOL v40 = *(void *)&v38[*(int *)(v35 + 28)] == 0;
      outlined destroy of CaptionSectioner.Caption();
      char v41 = v39 ^ v40;
      uint64_t v42 = v80;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v41 & 1) == 0) {
        goto LABEL_34;
      }
      uint64_t v43 = (unsigned __int8 *)&v42[*(int *)(v35 + 24)];
      int v84 = *v43;
      int v44 = v43[1];
      int v45 = v43[2];
      int v46 = v43[3];
      int v47 = v43[4];
      outlined destroy of CaptionSectioner.Caption();
      id v48 = (unsigned __int8 *)&v7[*(int *)(v35 + 24)];
      int v83 = *v48;
      int v49 = v48[1];
      int v50 = v48[2];
      int v51 = v48[3];
      int v52 = v48[4];
      outlined destroy of CaptionSectioner.Caption();
      if (v84 != v83) {
        break;
      }
      if ((v44 ^ v49)) {
        break;
      }
      if ((v45 ^ v50)) {
        break;
      }
      if ((v46 ^ v51)) {
        break;
      }
      if ((v47 ^ v52)) {
        break;
      }
      if ((static Date.== infix(_:_:)() & 1) == 0) {
        break;
      }
      char v53 = static Date.== infix(_:_:)();
      uint64_t v55 = v85;
      id v54 = v86;
      uint64_t v56 = v87;
      if ((v53 & 1) == 0) {
        break;
      }
      uint64_t v57 = v85[8];
      uint64_t v58 = *(void *)((char *)v87 + v57);
      if (*(void *)&v86[v57])
      {
        if (!v58) {
          break;
        }
        swift_retain();
        swift_retain();
        char v59 = static Image.== infix(_:_:)();
        swift_release();
        swift_release();
        uint64_t v55 = v85;
        id v54 = v86;
        uint64_t v56 = v87;
        if ((v59 & 1) == 0) {
          break;
        }
      }
      else if (v58)
      {
        break;
      }
      uint64_t v60 = v55[9];
      uint64_t v61 = *(void *)&v54[v60];
      uint64_t v62 = *(void *)&v54[v60 + 8];
      Swift::String_optional v63 = (void *)((char *)v56 + v60);
      if (v61 != *v63 || v62 != v63[1])
      {
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v55 = v85;
        id v54 = v86;
        uint64_t v56 = v87;
        if ((v65 & 1) == 0) {
          break;
        }
      }
      if (v54[v55[10]] != *((unsigned char *)v56 + v55[10])) {
        break;
      }
      specialized static Array<A>.== infix(_:_:)(*(int64x2_t **)&v54[v55[11]], *(int64x2_t **)((char *)v56 + v55[11]));
      if ((v66 & 1) == 0) {
        break;
      }
      uint64_t v67 = v85[12];
      int v68 = v86[v67];
      int v69 = *((unsigned __int8 *)v87 + v67);
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v30 = v82 - 1;
      BOOL result = v68 == v69;
      if (v68 == v69)
      {
        unint64_t v29 = v81 + v72;
        if (v82) {
          continue;
        }
      }
      return result;
    }
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
  }
  return 0;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a1 + 7;
  uint64_t v9 = a2 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v8 - 1);
    if (result != *(v9 - 1) || *v8 != *v9)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

void CaptionSectioner.Caption.init(id:participant:dateCreated:dateUpdated:image:text:isBadTranscription:lowConfidenceRanges:visibility:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  OUTLINED_FUNCTION_26_3();
  char v46 = v26;
  uint64_t v44 = v27;
  uint64_t v45 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  char v36 = v35;
  *(void *)uint64_t v35 = v37;
  uint64_t v38 = (int *)type metadata accessor for CaptionSectioner.Caption(0);
  outlined init with take of Participant();
  BOOL v39 = &v36[v38[6]];
  uint64_t v40 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
  v42(v39, v34, v40);
  v42(&v36[v38[7]], v32, v40);
  *(void *)&v36[v38[8]] = v30;
  uint64_t v43 = &v36[v38[9]];
  *(void *)uint64_t v43 = v44;
  *((void *)v43 + 1) = v45;
  v36[v38[10]] = v46;
  *(void *)&v36[v38[11]] = a25;
  v36[v38[12]] = a26;
  OUTLINED_FUNCTION_16();
}

uint64_t CaptionSectioner.SpeakerSection.id.getter()
{
  return _s15ConversationKit11ParticipantVWOcTm_0();
}

uint64_t type metadata accessor for CaptionSectioner.SectionID(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for CaptionSectioner.SectionID);
}

uint64_t CaptionSectioner.SpeakerSection.id.setter()
{
  return outlined assign with take of Participant();
}

uint64_t outlined assign with take of Participant()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_21();
  v2(v1);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_33_3();
  v4(v3);
  return v0;
}

uint64_t (*CaptionSectioner.SpeakerSection.id.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.SpeakerSection.participant.getter()
{
  return CaptionSectioner.Caption.participant.getter((void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
}

uint64_t CaptionSectioner.Caption.participant.getter(void (*a1)(void))
{
  return _s15ConversationKit11ParticipantVWOcTm_0();
}

uint64_t type metadata accessor for CaptionSectioner.SpeakerSection(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for CaptionSectioner.SpeakerSection);
}

uint64_t CaptionSectioner.SpeakerSection.participant.setter()
{
  return CaptionSectioner.Caption.participant.setter();
}

uint64_t (*CaptionSectioner.SpeakerSection.participant.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CaptionSectioner.SpeakerSection.captions.getter()
{
  type metadata accessor for CaptionSectioner.SpeakerSection(0);
  return swift_bridgeObjectRetain();
}

uint64_t CaptionSectioner.SpeakerSection.captions.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CaptionSectioner.SpeakerSection(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*CaptionSectioner.SpeakerSection.captions.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL static CaptionSectioner.SpeakerSection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for CaptionSectioner.SpeakerSection(0);
  OUTLINED_FUNCTION_41_4();
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(v2 + 24);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a2 + v6);
  return specialized static Array<A>.== infix(_:_:)(v7, v8);
}

uint64_t static CaptionSectioner.SectionID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t CaptionSectioner.SpeakerSection.init(id:participant:captions:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  outlined init with take of Participant();
  uint64_t v4 = type metadata accessor for CaptionSectioner.SpeakerSection(0);
  uint64_t result = outlined init with take of Participant();
  *(void *)(a2 + *(int *)(v4 + 24)) = a1;
  return result;
}

uint64_t outlined init with take of Participant()
{
  uint64_t v1 = OUTLINED_FUNCTION_9_21();
  v2(v1);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_33_3();
  v4(v3);
  return v0;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CaptionSectioner.SpeakerSection()
{
  return _s15ConversationKit11ParticipantVWOcTm_0();
}

void CaptionSectioner.CaptionID.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int CaptionSectioner.CaptionID.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CaptionSectioner.CaptionID()
{
  return CaptionSectioner.CaptionID.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CaptionSectioner.CaptionID(int a1)
{
  CaptionSectioner.CaptionID.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CaptionSectioner.CaptionID()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CaptionSectioner.CaptionID(uint64_t *a1, uint64_t *a2)
{
  return static CaptionSectioner.CaptionID.== infix(_:_:)(*a1, *a2);
}

uint64_t CaptionSectioner.SectionID.init(_:)()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_34_3();
  return v1(v0);
}

uint64_t CaptionSectioner.SectionID.hash(into:)()
{
  OUTLINED_FUNCTION_49_2();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB60]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int CaptionSectioner.SectionID.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CaptionSectioner.SectionID()
{
  return Hasher._finalize()();
}

uint64_t CaptionSectioner.sections.getter()
{
  return swift_bridgeObjectRetain();
}

double CaptionSectioner.suppressionAge.getter()
{
  return *(double *)(v0 + 8);
}

double CaptionSectioner.maximumAge.getter()
{
  return *(double *)(v0 + 16);
}

void default argument 4 of CaptionSectioner.init(participants:badCaptionCountThreshold:suppressionAge:maximumAge:currentDate:)()
{
}

uint64_t closure #1 in default argument 4 of CaptionSectioner.init(participants:badCaptionCountThreshold:suppressionAge:maximumAge:currentDate:)()
{
  return Date.init()();
}

__n128 CaptionSectioner.init(participants:badCaptionCountThreshold:suppressionAge:maximumAge:currentDate:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  v10.n128_f64[0] = a6;
  v10.n128_f64[1] = a7;
  *(void *)&long long v13 = a3;
  *((void *)&v13 + 1) = a4;
  CaptionSectioner.updateCaptions()();
  __n128 result = v10;
  *(void *)a5 = v9;
  *(__n128 *)(a5 + 8) = v10;
  *(void *)(a5 + 24) = a1;
  *(void *)(a5 + 32) = a2;
  *(_OWORD *)(a5 + 40) = v13;
  return result;
}

Swift::Void __swiftcall CaptionSectioner.updateCaptions()()
{
  Swift::UInt v1 = v0;
  long long v2 = v0[2];
  long long v30 = v0[1];
  long long v31 = v2;
  long long v29 = *v0;
  uint64_t v32 = *((void *)v0 + 6);
  uint64_t v3 = (void (*)(uint64_t))*((void *)&v2 + 1);
  CaptionSectioner.gatherAndSortCaptions()();
  uint64_t v21 = v4;
  type metadata accessor for Date();
  OUTLINED_FUNCTION_5_3();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  v3(v11);
  Date.addingTimeInterval(_:)();
  uint64_t v12 = *(uint64_t (**)(void))(v6 + 8);
  OUTLINED_FUNCTION_20_7();
  uint64_t v13 = v12();
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  v16(v15);
  Date.addingTimeInterval(_:)();
  OUTLINED_FUNCTION_20_7();
  v12();
  uint64_t v23 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v23;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit16CaptionSectionerV0F0VG_AJs5NeverOTg5((uint64_t)partial apply for closure #1 in CaptionSectioner.updateCaptions(), (uint64_t)v22, v21);
  swift_bridgeObjectRelease();
  long long v17 = v0[1];
  long long v25 = *v0;
  long long v26 = v17;
  long long v27 = v0[2];
  uint64_t v28 = *((void *)v0 + 6);
  CaptionSectioner.chunkSections(sortedCaptions:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_7();
  v12();
  OUTLINED_FUNCTION_20_7();
  v12();
  swift_bridgeObjectRelease();
  *Swift::UInt v1 = v19;
}

void CaptionSectioner.update(for:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v3 = (uint64_t *)(v1 + 24);
  uint64_t v4 = v5;
  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)();
  unint64_t v7 = v6;
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v14 = *(void *)(*v3 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
    uint64_t v15 = *v3;
    *(void *)(*v3 + 16) = v14 + 1;
    uint64_t v16 = type metadata accessor for Participant(0);
    OUTLINED_FUNCTION_1(v16);
    _s15ConversationKit11ParticipantVWOcTm_0();
    *uint64_t v3 = v15;
    goto LABEL_7;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()();
  *uint64_t v3 = v4;
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 >= *(void *)(v4 + 16))
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v11 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1(v11);
  outlined assign with copy of Participant(a1, v4+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v13 + 72) * v7);
LABEL_7:
  CaptionSectioner.updateCaptions()();
}

void specialized Collection<>.firstIndex(of:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v5 = v4;
  uint64_t v6 = OUTLINED_FUNCTION_49_2();
  uint64_t v46 = type metadata accessor for Participant(v6);
  OUTLINED_FUNCTION_3_27();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_13_12();
  OUTLINED_FUNCTION_27_6();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_51_0();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_19_16();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_40_3();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v38 - v13;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_50_3();
  MEMORY[0x1F4188790](v15);
  uint64_t v51 = *(void *)(v5 + 16);
  if (v51)
  {
    uint64_t v49 = v16;
    uint64_t v50 = v17;
    OUTLINED_FUNCTION_52_4();
    uint64_t v19 = v5 + v18;
    uint64_t v47 = *(void *)(v20 + 72);
    uint64_t v48 = v1;
    while (1)
    {
      _s15ConversationKit11ParticipantVWOcTm_0();
      static Participant.State.== infix(_:_:)();
      char v22 = v21;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v22 & 1) == 0) {
        break;
      }
      char v23 = static UUID.== infix(_:_:)();
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v23 & 1) == 0) {
        goto LABEL_13;
      }
      uint64_t v24 = v0;
      long long v25 = v14;
      uint64_t v26 = v1;
      uint64_t v27 = v46;
      BOOL v28 = *(void *)(v52 + *(int *)(v46 + 28)) != 0;
      outlined destroy of CaptionSectioner.Caption();
      LOBYTE(v27) = *(void *)(v26 + *(int *)(v27 + 28)) == 0;
      uint64_t v14 = v25;
      uint64_t v0 = v24;
      outlined destroy of CaptionSectioner.Caption();
      LOBYTE(v24) = v28 ^ v27;
      uint64_t v29 = v49;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      if ((v24 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v30 = v46;
      long long v31 = (unsigned __int8 *)(v29 + *(int *)(v46 + 24));
      int v32 = *v31;
      int v44 = v31[1];
      int v45 = v32;
      int v43 = v31[2];
      int v41 = v31[3];
      int v33 = v31[4];
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v34 = (unsigned __int8 *)(v2 + *(int *)(v30 + 24));
      int v35 = *v34;
      int v36 = v34[1];
      int v42 = v34[2];
      int v37 = v34[3];
      int v39 = v34[4];
      int v40 = v37;
      outlined destroy of CaptionSectioner.Caption();
      if (v45 == v35 && ((v44 ^ v36) & 1) == 0 && ((v43 ^ v42) & 1) == 0 && ((v41 ^ v40) & 1) == 0)
      {
        outlined destroy of CaptionSectioner.Caption();
        uint64_t v1 = v48;
        if (v33 == v39) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
LABEL_15:
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v1 = v48;
LABEL_16:
      ++v3;
      v19 += v47;
      if (v51 == v3) {
        goto LABEL_17;
      }
    }
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
    _s15ConversationKit11ParticipantVWOcTm_0();
    _s15ConversationKit11ParticipantVWOcTm_0();
LABEL_13:
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
    _s15ConversationKit11ParticipantVWOcTm_0();
    _s15ConversationKit11ParticipantVWOcTm_0();
LABEL_14:
    outlined destroy of CaptionSectioner.Caption();
    outlined destroy of CaptionSectioner.Caption();
    goto LABEL_15;
  }
LABEL_17:
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char v6;

  OUTLINED_FUNCTION_31();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    uint64_t v3 = 0;
    uint64_t v4 = v2 + 48;
    do
    {
      uint64_t v5 = *(id *)(v4 - 16);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v6 = static NSObject.== infix(_:_:)();
      swift_release();
      swift_bridgeObjectRelease();

      if (v6) {
        break;
      }
      ++v3;
      v4 += 24;
    }
    while (v1 != v3);
  }
  OUTLINED_FUNCTION_28();
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for HUDActivityManager.BannerUpdate(0);
  uint64_t v5 = 0;
  OUTLINED_FUNCTION_1(v4);
  uint64_t v7 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v9 = *(void *)(v8 + 72);
  while (1)
  {
    static HUDActivityManager.BannerUpdate.== infix(_:_:)();
    if (v10) {
      break;
    }
    ++v5;
    v7 += v9;
    if (v2 == v5) {
      return 0;
    }
  }
  return v5;
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v12 = v11;
  if (v11 >> 62) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v13)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v12 & 0xC000000000000001) == 0, v12);
    if ((v12 & 0xC000000000000001) != 0) {
      OUTLINED_FUNCTION_53_3();
    }
    else {
      id v14 = *(id *)(v12 + 32);
    }
    uint64_t v15 = v14;
    type metadata accessor for MomentsIndicatorBubble();
    char v16 = static NSObject.== infix(_:_:)();

    if (v16) {
      break;
    }
    OUTLINED_FUNCTION_43_1();
    while (1)
    {
      unint64_t v17 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      if (v17 == v13) {
        goto LABEL_21;
      }
      if ((v12 & 0xC000000000000001) != 0)
      {
        id v18 = (id)MEMORY[0x1C87744F0](v10 + 1, v12);
      }
      else
      {
        if ((v17 & 0x8000000000000000) != 0) {
          goto LABEL_18;
        }
        if (v17 >= *(void *)(a10 + 16)) {
          goto LABEL_19;
        }
        id v18 = *(id *)(a9 + 8 * v17);
      }
      uint64_t v19 = v18;
      char v20 = static NSObject.== infix(_:_:)();

      ++v10;
      if (v20) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    OUTLINED_FUNCTION_32();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_21:
  OUTLINED_FUNCTION_22();
}

{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  char v16;
  unint64_t v17;
  id v18;
  void *v19;
  char v20;

  OUTLINED_FUNCTION_24_0();
  unint64_t v12 = v11;
  if (v11 >> 62) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v13)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v12 & 0xC000000000000001) == 0, v12);
    if ((v12 & 0xC000000000000001) != 0) {
      OUTLINED_FUNCTION_53_3();
    }
    else {
      id v14 = *(id *)(v12 + 32);
    }
    uint64_t v15 = v14;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for SGURL);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16) {
      break;
    }
    OUTLINED_FUNCTION_43_1();
    while (1)
    {
      unint64_t v17 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      if (v17 == v13) {
        goto LABEL_21;
      }
      if ((v12 & 0xC000000000000001) != 0)
      {
        id v18 = (id)MEMORY[0x1C87744F0](v10 + 1, v12);
      }
      else
      {
        if ((v17 & 0x8000000000000000) != 0) {
          goto LABEL_18;
        }
        if (v17 >= *(void *)(a10 + 16)) {
          goto LABEL_19;
        }
        id v18 = *(id *)(a9 + 8 * v17);
      }
      uint64_t v19 = v18;
      char v20 = static NSObject.== infix(_:_:)();

      ++v10;
      if (v20) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    OUTLINED_FUNCTION_32();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_21:
  OUTLINED_FUNCTION_22();
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

void CaptionSectioner.gatherAndSortCaptions()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.Caption?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = OUTLINED_FUNCTION_25_7();
  uint64_t v4 = type metadata accessor for CaptionSectioner.Caption(v3);
  OUTLINED_FUNCTION_5_3();
  uint64_t v71 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_5();
  uint64_t v75 = v7;
  OUTLINED_FUNCTION_8_1();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v67 - v10;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_8_4();
  uint64_t v67 = v12;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v67 - v14;
  uint64_t v74 = type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v16);
  id v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = v0;
  uint64_t v19 = *(void *)(v0 + 24);
  v78[0] = v19;
  uint64_t v20 = *(void *)(v19 + 16);
  int v68 = v11;
  uint64_t v69 = v1;
  Swift::String_optional v70 = v15;
  if (!v20)
  {
    uint64_t v25 = MEMORY[0x1E4FBC860];
LABEL_29:
    v77[0] = v25;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(v77);
    uint64_t v46 = v70;
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void *)(v77[0] + 16);
    if (v47)
    {
      uint64_t v48 = *(void *)(v76 + 32);
      OUTLINED_FUNCTION_12_19();
      uint64_t v73 = v49;
      uint64_t v74 = v50;
      uint64_t v51 = v49 + v50;
      uint64_t v76 = *(void *)(v52 + 72);
      swift_retain();
      uint64_t v53 = 0;
      uint64_t v54 = MEMORY[0x1E4FBC860];
      do
      {
        _s15ConversationKit11ParticipantVWOcTm_0();
        if (v46[*(int *)(v4 + 40)] == 1)
        {
          BOOL v44 = __OFADD__(v53++, 1);
          if (v44) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v53 = 0;
        }
        _s15ConversationKit11ParticipantVWOcTm_0();
        v11[*(int *)(v4 + 40)] = v53 >= v48;
        if (v48 >= v53)
        {
          outlined init with take of Participant();
          uint64_t v55 = 0;
        }
        else
        {
          outlined destroy of CaptionSectioner.Caption();
          uint64_t v55 = 1;
        }
        __swift_storeEnumTagSinglePayload(v1, v55, 1, v4);
        outlined destroy of CaptionSectioner.Caption();
        if (__swift_getEnumTagSinglePayload(v1, 1, v4) == 1)
        {
          outlined destroy of CaptionSectioner.Caption?(v1);
          uint64_t v56 = v76;
        }
        else
        {
          outlined init with take of Participant();
          outlined init with take of Participant();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            char v60 = OUTLINED_FUNCTION_28_5();
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60, v61, v62, v54);
          }
          uint64_t v57 = v76;
          unint64_t v59 = *(void *)(v54 + 16);
          unint64_t v58 = *(void *)(v54 + 24);
          if (v59 >= v58 >> 1) {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, v54);
          }
          *(void *)(v54 + 16) = v59 + 1;
          outlined init with take of Participant();
          uint64_t v56 = v57;
          uint64_t v11 = v68;
          uint64_t v1 = v69;
          uint64_t v46 = v70;
        }
        v51 += v56;
        --v47;
      }
      while (v47);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
    OUTLINED_FUNCTION_28();
    return;
  }
  uint64_t v21 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1(v21);
  uint64_t v23 = v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  uint64_t v72 = *(void *)(v24 + 72);
  swift_bridgeObjectRetain_n();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v73 = v4;
  while (1)
  {
    _s15ConversationKit11ParticipantVWOcTm_0();
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v27 = &v18[*(int *)(v26 + 48)];
      outlined consume of Participant.CopresenceInfo?(*(void *)&v18[*(int *)(v26 + 64)], *(void *)&v18[*(int *)(v26 + 64) + 8]);
      memcpy(v77, v27, sizeof(v77));
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v28();
      uint64_t v29 = v77[39];
      uint64_t v30 = v77[41];
      outlined copy of Participant.CaptionInfo?(v77[39]);
      uint64_t v31 = outlined destroy of Participant.MediaInfo((uint64_t)v77);
      if (v29)
      {
        uint64_t v31 = swift_unknownObjectRelease();
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v31 = outlined destroy of CaptionSectioner.Caption();
    }
    uint64_t v30 = MEMORY[0x1E4FBC860];
LABEL_8:
    MEMORY[0x1F4188790](v31);
    uint64_t v65 = v23;
    uint64_t v66 = v76;
    uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit11ParticipantV7CaptionVG_AF0G9SectionerVAIVs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in closure #1 in CaptionSectioner.gatherAndSortCaptions(), (uint64_t)v63, v30);
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)(v32 + 16);
    uint64_t v34 = *(void *)(v25 + 16);
    uint64_t v35 = v34 + v33;
    if (__OFADD__(v34, v33)) {
      break;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v35 > *(void *)(v25 + 24) >> 1)
    {
      if (v34 <= v35) {
        uint64_t v37 = v34 + v33;
      }
      else {
        uint64_t v37 = v34;
      }
      uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v37, 1, v25);
    }
    uint64_t v4 = v73;
    if (*(void *)(v32 + 16))
    {
      uint64_t v38 = *(void *)(v25 + 16);
      if ((*(void *)(v25 + 24) >> 1) - v38 < v33) {
        goto LABEL_52;
      }
      unint64_t v39 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
      uint64_t v40 = *(void *)(v71 + 72);
      unint64_t v41 = v25 + v39 + v40 * v38;
      if (v32 + v39 < v41 + v40 * v33 && v41 < v32 + v39 + v40 * v33) {
        goto LABEL_55;
      }
      swift_arrayInitWithCopy();
      if (v33)
      {
        uint64_t v43 = *(void *)(v25 + 16);
        BOOL v44 = __OFADD__(v43, v33);
        uint64_t v45 = v43 + v33;
        if (v44) {
          goto LABEL_54;
        }
        *(void *)(v25 + 16) = v45;
      }
    }
    else if (v33)
    {
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    v23 += v72;
    if (!--v20)
    {
      outlined release of LinearGradient((uint64_t)v78);
      outlined release of LinearGradient((uint64_t)v78);
      uint64_t v11 = v68;
      uint64_t v1 = v69;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  LODWORD(v65) = 0;
  uint64_t v64 = 1092;
  v63[0] = 2;
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t closure #1 in CaptionSectioner.updateCaptions()@<X0>(uint64_t a1@<X8>)
{
  _s15ConversationKit11ParticipantVWOcTm_0();
  uint64_t v2 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t result = static Date.< infix(_:_:)();
  if (result)
  {
    uint64_t v4 = *(int *)(v2 + 48);
    char v5 = 2;
LABEL_5:
    *(unsigned char *)(a1 + v4) = v5;
    return result;
  }
  uint64_t result = static Date.< infix(_:_:)();
  uint64_t v4 = *(int *)(v2 + 48);
  if (result)
  {
    char v5 = 1;
    goto LABEL_5;
  }
  *(unsigned char *)(a1 + v4) = 0;
  return result;
}

uint64_t partial apply for closure #1 in CaptionSectioner.updateCaptions()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in CaptionSectioner.updateCaptions()(a1);
}

void CaptionSectioner.chunkSections(sortedCaptions:)()
{
  OUTLINED_FUNCTION_31();
  int v84 = v0;
  uint64_t v2 = v1;
  uint64_t v83 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_3();
  uint64_t v82 = v4;
  uint64_t v5 = type metadata accessor for CaptionSectioner.SectionID(0);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_36();
  uint64_t v8 = v6 - v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v81 = (uint64_t)&v73 - v10;
  uint64_t v76 = type metadata accessor for CaptionSectioner.SpeakerSection(0);
  OUTLINED_FUNCTION_5_3();
  uint64_t v77 = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_36();
  unint64_t v15 = v13 - v14;
  MEMORY[0x1F4188790](v16);
  id v18 = (char *)&v73 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CaptionSectioner.Caption));
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_2_3();
  uint64_t v79 = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CaptionSectioner.Caption)?);
  MEMORY[0x1F4188790](v22 - 8);
  OUTLINED_FUNCTION_36();
  uint64_t v25 = (unint64_t *)(v23 - v24);
  MEMORY[0x1F4188790](v26);
  BOOL v28 = (uint64_t *)((char *)&v73 - v27);
  type metadata accessor for CaptionSectioner.Caption(0);
  OUTLINED_FUNCTION_5_3();
  uint64_t v88 = v29;
  uint64_t v89 = v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v78 = (char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_8_4();
  uint64_t v90 = v33;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v34);
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  id v86 = v25;
  UIMenuElementSize v87 = (char *)&v73 - v35;
  specialized BidirectionalCollection.suffix(_:)(50, v2);
  swift_bridgeObjectRetain();
  specialized Array.init<A>(_:)();
  if (!*(void *)(v36 + 16))
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    char v70 = OUTLINED_FUNCTION_28_5();
    unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70, v71, v72, v15);
    goto LABEL_34;
  }
  uint64_t v37 = v36;
  uint64_t v75 = v18;
  uint64_t v73 = v8;
  unint64_t v74 = v15;
  uint64_t v85 = v36 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
  uint64_t v38 = v87;
  _s15ConversationKit11ParticipantVWOcTm_0();
  uint64_t v39 = *v84;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = swift_getKeyPath();
  uint64_t v91 = 0;
  uint64_t v92 = v39;
  id v93 = closure #1 in CaptionSectioner.chunkSections(sortedCaptions:);
  uint64_t v94 = 0;
  uint64_t v95 = KeyPath;
  uint64_t v96 = v41;
  uint64_t v97 = v42;
  unint64_t v43 = *(void *)(v37 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  int v84 = (uint64_t *)MEMORY[0x1E4FBC860];
  uint64_t v46 = v86;
  for (i = v43; ; unint64_t v43 = i)
  {
    if (v45 == v43)
    {
      uint64_t v47 = 1;
      unint64_t v45 = v43;
    }
    else
    {
      if (v45 >= *(void *)(v37 + 16))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      unint64_t v15 = v45 + 1;
      _s15ConversationKit11ParticipantVWOcTm_0();
      *uint64_t v46 = v45;
      outlined init with take of Participant();
      uint64_t v47 = 0;
      ++v45;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v46, v47, 1, v19);
    outlined init with take of (offset: Int, element: CaptionSectioner.Caption)?((uint64_t)v46, (uint64_t)v28);
    if (__swift_getEnumTagSinglePayload((uint64_t)v28, 1, v19) == 1) {
      break;
    }
    uint64_t v48 = *v28;
    outlined init with take of Participant();
    unint64_t v15 = (unint64_t)&v38[*(int *)(v88 + 20) + *(int *)(v83 + 20)];
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB60]);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v38 = v87;
    }
    else
    {
      if (v44 >= *(void *)(v37 + 16)) {
        goto LABEL_40;
      }
      OUTLINED_FUNCTION_39_4();
      uint64_t v49 = (uint64_t)v78;
      _s15ConversationKit11ParticipantVWOcTm_0();
      specialized FindMatchByWalking.callAsFunction(firstRowInNewSection:)(v49, v81);
      outlined destroy of CaptionSectioner.Caption();
      _s15ConversationKit11ParticipantVWOcTm_0();
      unint64_t v15 = v48 - v44;
      if (v48 < v44) {
        goto LABEL_41;
      }
      uint64_t v50 = *(void *)(v37 + 16);
      if (v50 < v44 || v50 < v48) {
        goto LABEL_42;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v52 = swift_dynamicCastClass();
      if (!v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v52 = MEMORY[0x1E4FBC860];
      }
      uint64_t v53 = *(void *)(v52 + 16);
      swift_release();
      uint64_t v38 = v87;
      if (v53 == v15)
      {
        OUTLINED_FUNCTION_35();
        uint64_t v54 = swift_dynamicCastClass();
        if (!v54)
        {
          swift_bridgeObjectRelease();
          uint64_t v54 = MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        specialized _copyCollectionToContiguousArray<A>(_:)(v37, v85, v44, (2 * v48) | 1);
        uint64_t v54 = v59;
      }
      swift_bridgeObjectRelease();
      uint64_t v55 = v75;
      outlined init with take of Participant();
      uint64_t v56 = v76;
      outlined init with take of Participant();
      *(void *)&v55[*(int *)(v56 + 24)] = v54;
      uint64_t v57 = (uint64_t)v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v60 = OUTLINED_FUNCTION_28_5();
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60, v61, v62, v57);
      }
      unint64_t v15 = *(void *)(v57 + 16);
      unint64_t v58 = *(void *)(v57 + 24);
      if (v15 >= v58 >> 1) {
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v15 + 1, 1, v57);
      }
      *(void *)(v57 + 16) = v15 + 1;
      OUTLINED_FUNCTION_12_19();
      int v84 = (uint64_t *)v57;
      outlined init with take of Participant();
      uint64_t v44 = v48;
    }
    outlined destroy of CaptionSectioner.Caption();
    outlined init with take of Participant();
    uint64_t v46 = v86;
  }
  swift_bridgeObjectRelease();
  if (v44 == v43)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= *(void *)(v37 + 16)) {
    goto LABEL_44;
  }
  OUTLINED_FUNCTION_39_4();
  uint64_t v63 = (uint64_t)v78;
  _s15ConversationKit11ParticipantVWOcTm_0();
  specialized FindMatchByWalking.callAsFunction(firstRowInNewSection:)(v63, v73);
  outlined destroy of CaptionSectioner.Caption();
  specialized MutableCollection.subscript.getter(v44, v37);
  swift_bridgeObjectRelease();
  specialized Array.init<A>(_:)();
  uint64_t v65 = v64;
  unint64_t v66 = v74;
  outlined init with take of Participant();
  uint64_t v67 = v76;
  _s15ConversationKit11ParticipantVWOcTm_0();
  *(void *)(v66 + *(int *)(v67 + 24)) = v65;
  unint64_t v15 = (unint64_t)v84;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_45;
  }
LABEL_34:
  unint64_t v69 = *(void *)(v15 + 16);
  unint64_t v68 = *(void *)(v15 + 24);
  if (v69 >= v68 >> 1) {
    unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1, v15);
  }
  *(void *)(v15 + 16) = v69 + 1;
  OUTLINED_FUNCTION_12_19();
  outlined init with take of Participant();
LABEL_37:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of CaptionSectioner.Caption();
LABEL_38:
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in closure #1 in CaptionSectioner.gatherAndSortCaptions()@<X0>(void *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v5 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v27 = *a1;
  BOOL v28 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit11ParticipantVWOcTm_0();
  uint64_t v7 = (int *)type metadata accessor for Participant.Caption(0);
  uint64_t v24 = (char *)a1 + v7[5];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = v9[8];
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (uint64_t (*)(void))v9[2];
  uint64_t v25 = (char *)&v23 - v11;
  uint64_t v13 = v12();
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = (char *)&v23 - v11;
  ((void (*)(char *))v12)((char *)&v23 - v11);
  unint64_t v15 = (char **)((char *)a1 + v7[7]);
  uint64_t v16 = v15[1];
  uint64_t v24 = *v15;
  swift_bridgeObjectRetain();
  char v17 = CaptionSectioner.isBad(_:)((uint64_t)a1);
  if (*((unsigned char *)a1 + v7[8]) == 1)
  {
    uint64_t v18 = *(void *)((char *)a1 + v7[9]);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  *(void *)a3 = v27;
  uint64_t v19 = (int *)type metadata accessor for CaptionSectioner.Caption(0);
  outlined init with take of Participant();
  uint64_t v20 = (void (*)(char *, char *, uint64_t))v9[4];
  v20(&a3[v19[6]], v25, v8);
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v20)(&a3[v19[7]], v14, v8);
  *(void *)&a3[v19[8]] = 0;
  uint64_t v22 = &a3[v19[9]];
  *(void *)uint64_t v22 = v24;
  *((void *)v22 + 1) = v16;
  a3[v19[10]] = v17 & 1;
  *(void *)&a3[v19[11]] = v18;
  a3[v19[12]] = 0;
  return result;
}

uint64_t CaptionSectioner.isBad(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant.Caption(0);
  if (*(unsigned char *)(a1 + *(int *)(v2 + 32)) != 1) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t result = String.count.getter();
  if (result < 1) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + *(int *)(v3 + 36));
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(v5 + 40);
    while (1)
    {
      uint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = __OFADD__(v7, v9);
      v7 += v9;
      if (v10) {
        break;
      }
      if (!--v6)
      {
        float v11 = (float)v7;
        return (float)(v11 / (float)String.count.getter()) > 0.75;
      }
    }
    __break(1u);
  }
  else
  {
    float v11 = 0.0;
    return (float)(v11 / (float)String.count.getter()) > 0.75;
  }
  return result;
}

uint64_t closure #1 in CaptionSectioner.chunkSections(sortedCaptions:)()
{
  return UUID.init()();
}

uint64_t FindMatchByWalking.init(currentSections:newID:sectionRow:rowAgeKey:groupedByPivot:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = 0;
  a7[1] = result;
  a7[2] = a2;
  a7[3] = a3;
  a7[4] = a4;
  a7[5] = a5;
  a7[6] = a6;
  return result;
}

uint64_t specialized FindMatchByWalking.callAsFunction(firstRowInNewSection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v38[2] = a2;
  uint64_t v5 = type metadata accessor for Participant(0);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v46 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v38 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.Caption?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CaptionSectioner.SpeakerSection(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13 - 8);
  v38[1] = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v38 - v17;
  uint64_t v19 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v47 = *(void *)(v19 - 8);
  uint64_t result = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *v3;
  uint64_t v24 = *(void *)(v3[1] + 16);
  if (*v3 >= v24) {
    return ((uint64_t (*)(uint64_t))v3[2])(result);
  }
  uint64_t v44 = v9;
  uint64_t v45 = a1;
  uint64_t v42 = v12;
  unint64_t v43 = v22;
  uint64_t v40 = v18;
  uint64_t v41 = v14;
  uint64_t v39 = v19;
  while (1)
  {
    if (v23 < 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= (unint64_t)v24) {
      goto LABEL_24;
    }
    unint64_t v25 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v26 = *(void *)(v14 + 72);
    _s15ConversationKit11ParticipantVWOcTm_0();
    swift_getAtKeyPath();
    outlined destroy of CaptionSectioner.Caption();
    if (*(void *)(v49 + 16))
    {
      _s15ConversationKit11ParticipantVWOcTm_0();
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 1;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v12, v27, 1, v19);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v19) == 1)
    {
      uint64_t result = outlined destroy of CaptionSectioner.Caption?((uint64_t)v12);
      uint64_t v23 = *v3 + 1;
      if (__OFADD__(*v3, 1)) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }
    v38[3] = v26;
    v38[4] = v25;
    outlined init with take of Participant();
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v48 = v38;
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(void *)(v29 + 64);
    MEMORY[0x1F4188790](v28);
    unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v32 = (char *)v38 - v31;
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    static Participant.== infix(_:_:)();
    char v34 = v33;
    uint64_t v35 = outlined destroy of CaptionSectioner.Caption();
    if (v34)
    {
      MEMORY[0x1F4188790](v35);
      swift_getAtKeyPath();
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418BA78]);
      char v36 = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t v37 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
      uint64_t result = v37((char *)v38 - v31, v28);
      if (v36) {
        break;
      }
    }
    outlined destroy of CaptionSectioner.Caption();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
    uint64_t result = outlined destroy of CaptionSectioner.Caption();
    uint64_t v23 = *v3 + 1;
    if (__OFADD__(*v3, 1)) {
      goto LABEL_26;
    }
    uint64_t v14 = v41;
    uint64_t v12 = v42;
    uint64_t v19 = v39;
LABEL_16:
    *uint64_t v3 = v23;
    uint64_t v24 = *(void *)(v3[1] + 16);
    if (v23 >= v24) {
      return ((uint64_t (*)(uint64_t))v3[2])(result);
    }
  }
  if (*v3 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((unint64_t)*v3 >= *(void *)(v3[1] + 16))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  _s15ConversationKit11ParticipantVWOcTm_0();
  _s15ConversationKit11ParticipantVWOcTm_0();
  outlined destroy of CaptionSectioner.Caption();
  outlined destroy of CaptionSectioner.Caption();
  v37(v32, v28);
  uint64_t result = outlined destroy of CaptionSectioner.Caption();
  if (!__OFADD__(*v3, 1))
  {
    ++*v3;
    return result;
  }
LABEL_29:
  __break(1u);
  return result;
}

void FindMatchByWalking.callAsFunction(firstRowInNewSection:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  v46[1] = v4;
  uint64_t v65 = *(void *)(v2 + 32);
  OUTLINED_FUNCTION_5_3();
  uint64_t v61 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10_5();
  uint64_t v56 = v7;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v46 - v9;
  uint64_t v59 = *(void *)(v11 + 40);
  OUTLINED_FUNCTION_5_3();
  uint64_t v60 = v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v48 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v15);
  uint64_t v57 = (char *)v46 - v16;
  uint64_t v18 = *(void *)(v17 + 24);
  uint64_t v55 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_5_3();
  uint64_t v50 = v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v46 - v21;
  uint64_t v23 = *(void *)(v3 + 16);
  OUTLINED_FUNCTION_5_3();
  char v62 = v24;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_10_5();
  v46[0] = v26;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v27);
  uint64_t v63 = (char *)v46 - v28;
  OUTLINED_FUNCTION_5_3();
  uint64_t v30 = v29;
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_2_3();
  uint64_t v64 = v32;
  uint64_t v33 = *v0;
  if (v33 >= MEMORY[0x1C8773490](v1[1], v23))
  {
LABEL_11:
    ((void (*)(void))v1[2])();
LABEL_12:
    OUTLINED_FUNCTION_28();
    return;
  }
  ++v61;
  ++v62;
  unint64_t v58 = (void (**)(void))(v60 + 8);
  uint64_t v51 = (void (**)(uint64_t, char *, uint64_t))(v30 + 32);
  uint64_t v52 = v30 + 8;
  uint64_t v49 = v22;
  v50 += 8;
  uint64_t v53 = v18;
  uint64_t v54 = v10;
  uint64_t v47 = v23;
  while (1)
  {
    uint64_t v34 = v3;
    Array.subscript.getter();
    swift_getAtKeyPath();
    uint64_t v60 = *v62;
    OUTLINED_FUNCTION_15();
    v35();
    uint64_t v66 = v67;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v18) != 1) {
      break;
    }
    OUTLINED_FUNCTION_26_2();
    v36();
    uint64_t v37 = *v1 + 1;
    if (__OFADD__(*v1, 1))
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_10:
    *uint64_t v1 = v37;
    if (v37 >= MEMORY[0x1C8773490](v1[1], v23)) {
      goto LABEL_11;
    }
  }
  (*v51)(v64, v22, v18);
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *v61;
  OUTLINED_FUNCTION_15();
  v39();
  if ((v38 & 1) == 0
    || (swift_getAtKeyPath(),
        char v40 = dispatch thunk of static Comparable.>= infix(_:_:)(),
        uint64_t v41 = *v58,
        uint64_t v23 = v47,
        OUTLINED_FUNCTION_15(),
        v41(),
        (v40 & 1) == 0))
  {
    OUTLINED_FUNCTION_15();
    v39();
    OUTLINED_FUNCTION_26_2();
    v42();
    uint64_t v18 = v53;
    OUTLINED_FUNCTION_26_2();
    v43();
    uint64_t v37 = *v1 + 1;
    if (__OFADD__(*v1, 1)) {
      goto LABEL_16;
    }
    uint64_t v3 = v34;
    uint64_t v22 = v49;
    goto LABEL_10;
  }
  Array.subscript.getter();
  dispatch thunk of Identifiable.id.getter();
  OUTLINED_FUNCTION_15();
  v44();
  OUTLINED_FUNCTION_15();
  v39();
  OUTLINED_FUNCTION_15();
  v41();
  OUTLINED_FUNCTION_26_2();
  v45();
  if (!__OFADD__(*v1, 1))
  {
    ++*v1;
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
}

uint64_t FindMatchByWalking.currentSections.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FindMatchByWalking.newID.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t FindMatchByWalking.sectionRow.getter()
{
  return swift_retain();
}

uint64_t FindMatchByWalking.rowAgeKey.getter()
{
  return swift_retain();
}

uint64_t FindMatchByWalking.groupedByPivot.getter()
{
  return swift_retain();
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for CaptionSectioner.Caption(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for TranscriptionViewModel.Caption(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for Participant(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  uint64_t v2 = *(void *)(type metadata accessor for HUDActivityManager.BannerUpdate(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

{
  uint64_t v2;

  type metadata accessor for HUDActivityManager.BannerUpdate(0);
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()();
  }
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)();
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for Participant.Caption(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)((unint64_t)v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for Participant(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_22_0();
  v6[0] = v2 + v5;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for Participant(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void v6[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails)
                 - 8);
  v6[0] = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void v6[2];

  uint64_t v2 = *(void *)(type metadata accessor for Participant(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x1F4183E80]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()()
{
  char v0 = OUTLINED_FUNCTION_7_24();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  char v0 = OUTLINED_FUNCTION_7_24();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  char v0 = OUTLINED_FUNCTION_7_24();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  OUTLINED_FUNCTION_7_24();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  char v0 = OUTLINED_FUNCTION_7_24();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  char v0 = OUTLINED_FUNCTION_7_24();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

uint64_t outlined assign with copy of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CaptionSectioner.Caption.Visibility and conformance CaptionSectioner.Caption.Visibility()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptionSectioner.Caption.Visibility and conformance CaptionSectioner.Caption.Visibility;
  if (!lazy protocol witness table cache variable for type CaptionSectioner.Caption.Visibility and conformance CaptionSectioner.Caption.Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptionSectioner.Caption.Visibility and conformance CaptionSectioner.Caption.Visibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CaptionSectioner.CaptionID and conformance CaptionSectioner.CaptionID()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptionSectioner.CaptionID and conformance CaptionSectioner.CaptionID;
  if (!lazy protocol witness table cache variable for type CaptionSectioner.CaptionID and conformance CaptionSectioner.CaptionID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptionSectioner.CaptionID and conformance CaptionSectioner.CaptionID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CaptionSectioner.CaptionID and conformance CaptionSectioner.CaptionID;
  if (!lazy protocol witness table cache variable for type CaptionSectioner.CaptionID and conformance CaptionSectioner.CaptionID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptionSectioner.CaptionID and conformance CaptionSectioner.CaptionID);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in CaptionSectioner.SpeakerSection()
{
  return lazy protocol witness table accessor for type CaptionSectioner.SectionID and conformance CaptionSectioner.SectionID(&lazy protocol witness table cache variable for type CaptionSectioner.SectionID and conformance CaptionSectioner.SectionID, (void (*)(uint64_t))type metadata accessor for CaptionSectioner.SectionID);
}

uint64_t base witness table accessor for Equatable in CaptionSectioner.SectionID()
{
  return lazy protocol witness table accessor for type CaptionSectioner.SectionID and conformance CaptionSectioner.SectionID(&lazy protocol witness table cache variable for type CaptionSectioner.SectionID and conformance CaptionSectioner.SectionID, (void (*)(uint64_t))type metadata accessor for CaptionSectioner.SectionID);
}

uint64_t lazy protocol witness table accessor for type CaptionSectioner.SectionID and conformance CaptionSectioner.SectionID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for CaptionSectioner()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for CaptionSectioner(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CaptionSectioner(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CaptionSectioner(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CaptionSectioner(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptionSectioner(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CaptionSectioner()
{
}

void *initializeBufferWithCopyOfBuffer for CaptionSectioner.Caption(void *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v13 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(void *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for Participant.State(0);
    id v86 = v8;
    int v84 = a2;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v11 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
        goto LABEL_18;
      case 4u:
        uint64_t v14 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v16 = *(int *)(v15 + 48);
        uint64_t v17 = &v8[v16];
        uint64_t v18 = &v9[v16];
        *(_OWORD *)uint64_t v17 = *(_OWORD *)&v9[v16];
        uint64_t v19 = *(void *)&v9[v16 + 16];
        uint64_t v20 = *(void *)&v9[v16 + 24];
        *((void *)v17 + 2) = v19;
        *((void *)v17 + 3) = v20;
        *((_WORD *)v17 + 16) = *((_WORD *)v18 + 16);
        *((void *)v17 + 5) = *((void *)v18 + 5);
        v17[48] = v18[48];
        *(_OWORD *)(v17 + 56) = *(_OWORD *)(v18 + 56);
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(v18 + 72);
        v17[88] = v18[88];
        v17[89] = v18[89];
        uint64_t v21 = *((void *)v18 + 15);
        swift_bridgeObjectRetain();
        if (v21)
        {
          if (v21 == 1)
          {
            uint64_t v22 = v17 + 96;
            uint64_t v23 = v18 + 96;
            size_t v24 = 209;
            goto LABEL_12;
          }
          uint64_t v26 = *((void *)v18 + 16);
          *((void *)v17 + 15) = v21;
          *((void *)v17 + 16) = v26;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v21 - 8))((uint64_t)(v17 + 96), (uint64_t)(v18 + 96), v21);
        }
        else
        {
          long long v25 = *((_OWORD *)v18 + 7);
          *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
          *((_OWORD *)v17 + 7) = v25;
          *((void *)v17 + 16) = *((void *)v18 + 16);
        }
        *((_DWORD *)v17 + 34) = *((_DWORD *)v18 + 34);
        long long v27 = *((_OWORD *)v18 + 10);
        *((_OWORD *)v17 + 9) = *((_OWORD *)v18 + 9);
        *((_OWORD *)v17 + 10) = v27;
        *((_OWORD *)v17 + 11) = *((_OWORD *)v18 + 11);
        v17[192] = v18[192];
        uint64_t v22 = v17 + 208;
        uint64_t v23 = v18 + 208;
        *((void *)v17 + 25) = *((void *)v18 + 25);
        size_t v24 = 97;
LABEL_12:
        memcpy(v22, v23, v24);
        uint64_t v28 = *((void *)v18 + 39);
        if (v28)
        {
          uint64_t v29 = *((void *)v18 + 40);
          uint64_t v30 = *((void *)v18 + 41);
          *((void *)v17 + 39) = v28;
          *((void *)v17 + 40) = v29;
          *((void *)v17 + 41) = v30;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v17 + 312) = *(_OWORD *)(v18 + 312);
          *((void *)v17 + 41) = *((void *)v18 + 41);
        }
        uint64_t v31 = *(int *)(v15 + 64);
        uint64_t v8 = v86;
        uint64_t v32 = &v86[v31];
        uint64_t v33 = &v9[v31];
        uint64_t v34 = *((void *)v33 + 1);
        if (v34)
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *((void *)v32 + 1) = v34;
          uint64_t v35 = *((void *)v33 + 3);
          *((void *)v32 + 2) = *((void *)v33 + 2);
          *((void *)v32 + 3) = v35;
          char v32[32] = v33[32];
          *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
          *((void *)v32 + 7) = *((void *)v33 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v36 = *((_OWORD *)v33 + 1);
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          *((_OWORD *)v32 + 1) = v36;
          long long v37 = *((_OWORD *)v33 + 3);
          *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
          *((_OWORD *)v32 + 3) = v37;
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
LABEL_19:
        char v38 = (int *)type metadata accessor for Participant(0);
        uint64_t v39 = v38[5];
        char v40 = &v8[v39];
        uint64_t v41 = &v9[v39];
        uint64_t v42 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
        uint64_t v43 = v38[6];
        uint64_t v44 = &v8[v43];
        uint64_t v45 = &v9[v43];
        v44[4] = v45[4];
        *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
        uint64_t v46 = v38[7];
        uint64_t v47 = &v8[v46];
        uint64_t v48 = &v9[v46];
        uint64_t v49 = *(void **)v48;
        uint64_t v83 = a3;
        if (*(void *)v48)
        {
          uint64_t v50 = *((void *)v48 + 1);
          *(void *)uint64_t v47 = v49;
          *((void *)v47 + 1) = v50;
          v47[16] = v48[16];
          uint64_t v51 = *((void *)v48 + 4);
          *((void *)v47 + 3) = *((void *)v48 + 3);
          *((void *)v47 + 4) = v51;
          id v52 = v49;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v53 = *((_OWORD *)v48 + 1);
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
          *((_OWORD *)v47 + 1) = v53;
          *((void *)v47 + 4) = *((void *)v48 + 4);
        }
        *(void *)&v8[v38[8]] = *(void *)&v9[v38[8]];
        uint64_t v54 = v38[9];
        uint64_t v55 = &v8[v54];
        uint64_t v56 = &v9[v54];
        uint64_t v57 = *((void *)v56 + 1);
        *uint64_t v55 = *(void *)v56;
        v55[1] = v57;
        v8[v38[10]] = v9[v38[10]];
        *(void *)&v8[v38[11]] = *(void *)&v9[v38[11]];
        uint64_t v58 = v38[12];
        uint64_t v59 = *(void **)&v9[v58];
        *(void *)&v8[v58] = v59;
        v8[v38[13]] = v9[v38[13]];
        uint64_t v60 = v38[14];
        uint64_t v61 = &v8[v60];
        char v62 = &v9[v60];
        uint64_t v63 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v64 = v59;
        uint64_t v85 = a1;
        if (__swift_getEnumTagSinglePayload((uint64_t)v62, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
          __swift_storeEnumTagSinglePayload((uint64_t)v61, 0, 1, v63);
        }
        uint64_t v66 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v67 = *(int *)(v66 + 20);
        unint64_t v68 = &v61[v67];
        unint64_t v69 = &v62[v67];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v62[v67], 1, v63))
        {
          uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
          uint64_t v71 = *(void *)(v63 - 8);
        }
        else
        {
          uint64_t v71 = *(void *)(v63 - 8);
          (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v63);
          __swift_storeEnumTagSinglePayload((uint64_t)v68, 0, 1, v63);
        }
        uint64_t v72 = v71;
        v61[*(int *)(v66 + 24)] = v62[*(int *)(v66 + 24)];
        v86[v38[15]] = v9[v38[15]];
        *(void *)&v86[v38[16]] = *(void *)&v9[v38[16]];
        uint64_t v73 = v83[6];
        uint64_t v13 = v85;
        unint64_t v74 = (char *)v85 + v73;
        uint64_t v75 = &v84[v73];
        uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
        swift_retain();
        v76(v74, v75, v63);
        v76((char *)v85 + v83[7], &v84[v83[7]], v63);
        uint64_t v77 = v83[9];
        *(void *)((char *)v85 + v83[8]) = *(void *)&v84[v83[8]];
        uint64_t v78 = (void *)((char *)v85 + v77);
        uint64_t v79 = &v84[v77];
        uint64_t v80 = *((void *)v79 + 1);
        *uint64_t v78 = *(void *)v79;
        v78[1] = v80;
        uint64_t v81 = v83[11];
        *((unsigned char *)v85 + v83[10]) = v84[v83[10]];
        *(void *)((char *)v85 + v81) = *(void *)&v84[v81];
        *((unsigned char *)v85 + v83[12]) = v84[v83[12]];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
        goto LABEL_19;
    }
  }
  return v13;
}

uint64_t destroy for CaptionSectioner.Caption(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v5 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      break;
    case 4u:
      uint64_t v15 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v4, v15);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v17 = v4 + *(int *)(v16 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v17 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v17 + 96);
      }
      if (*(void *)(v17 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v4 + *(int *)(v16 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  uint64_t v6 = (int *)type metadata accessor for Participant(0);
  uint64_t v7 = v4 + v6[5];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (id *)(v4 + v6[7]);
  if (*v9)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v10 = v4 + v6[14];
  uint64_t v11 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  uint64_t v12 = v10 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v12, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v12, v11);
  }
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v13(a1 + a2[6], v11);
  v13(a1 + a2[7], v11);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for CaptionSectioner.Caption(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Participant.State(0);
  uint64_t v82 = a1;
  uint64_t v83 = v7;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v10 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v8, v10);
      goto LABEL_16;
    case 4u:
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v13 = *(int *)(v12 + 48);
      uint64_t v14 = &v7[v13];
      uint64_t v15 = &v8[v13];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)&v8[v13];
      uint64_t v16 = *(void *)&v8[v13 + 16];
      uint64_t v17 = *(void *)&v8[v13 + 24];
      *((void *)v14 + 2) = v16;
      *((void *)v14 + 3) = v17;
      *((_WORD *)v14 + 16) = *((_WORD *)v15 + 16);
      *((void *)v14 + 5) = *((void *)v15 + 5);
      v14[48] = v15[48];
      *(_OWORD *)(v14 + 56) = *(_OWORD *)(v15 + 56);
      *(_OWORD *)(v14 + 72) = *(_OWORD *)(v15 + 72);
      v14[88] = v15[88];
      v14[89] = v15[89];
      uint64_t v18 = *((void *)v15 + 15);
      swift_bridgeObjectRetain();
      if (v18)
      {
        if (v18 == 1)
        {
          uint64_t v19 = v14 + 96;
          uint64_t v20 = v15 + 96;
          size_t v21 = 209;
          goto LABEL_10;
        }
        uint64_t v23 = *((void *)v15 + 16);
        *((void *)v14 + 15) = v18;
        *((void *)v14 + 16) = v23;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v18 - 8))((uint64_t)(v14 + 96), (uint64_t)(v15 + 96), v18);
      }
      else
      {
        long long v22 = *((_OWORD *)v15 + 7);
        *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
        *((_OWORD *)v14 + 7) = v22;
        *((void *)v14 + 16) = *((void *)v15 + 16);
      }
      *((_DWORD *)v14 + 34) = *((_DWORD *)v15 + 34);
      long long v24 = *((_OWORD *)v15 + 10);
      *((_OWORD *)v14 + 9) = *((_OWORD *)v15 + 9);
      *((_OWORD *)v14 + 10) = v24;
      *((_OWORD *)v14 + 11) = *((_OWORD *)v15 + 11);
      v14[192] = v15[192];
      uint64_t v19 = v14 + 208;
      uint64_t v20 = v15 + 208;
      *((void *)v14 + 25) = *((void *)v15 + 25);
      size_t v21 = 97;
LABEL_10:
      memcpy(v19, v20, v21);
      uint64_t v25 = *((void *)v15 + 39);
      if (v25)
      {
        uint64_t v26 = *((void *)v15 + 40);
        uint64_t v27 = *((void *)v15 + 41);
        *((void *)v14 + 39) = v25;
        *((void *)v14 + 40) = v26;
        *((void *)v14 + 41) = v27;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v14 + 312) = *(_OWORD *)(v15 + 312);
        *((void *)v14 + 41) = *((void *)v15 + 41);
      }
      uint64_t v28 = *(int *)(v12 + 64);
      uint64_t v7 = v83;
      uint64_t v29 = &v83[v28];
      uint64_t v30 = &v8[v28];
      uint64_t v31 = *((void *)v30 + 1);
      if (v31)
      {
        *(void *)uint64_t v29 = *(void *)v30;
        *((void *)v29 + 1) = v31;
        uint64_t v32 = *((void *)v30 + 3);
        *((void *)v29 + 2) = *((void *)v30 + 2);
        *((void *)v29 + 3) = v32;
        v29[32] = v30[32];
        *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
        *((void *)v29 + 7) = *((void *)v30 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v33 = *((_OWORD *)v30 + 1);
        *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
        *((_OWORD *)v29 + 1) = v33;
        long long v34 = *((_OWORD *)v30 + 3);
        *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
        *((_OWORD *)v29 + 3) = v34;
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_17:
      uint64_t v35 = (int *)type metadata accessor for Participant(0);
      uint64_t v36 = v35[5];
      long long v37 = &v7[v36];
      char v38 = &v8[v36];
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
      uint64_t v40 = v35[6];
      uint64_t v41 = &v7[v40];
      uint64_t v42 = &v8[v40];
      v41[4] = v42[4];
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      uint64_t v43 = v35[7];
      uint64_t v44 = &v7[v43];
      uint64_t v45 = &v8[v43];
      uint64_t v46 = *(void **)v45;
      uint64_t v81 = a2;
      if (*(void *)v45)
      {
        uint64_t v47 = *((void *)v45 + 1);
        *(void *)uint64_t v44 = v46;
        *((void *)v44 + 1) = v47;
        v44[16] = v45[16];
        uint64_t v48 = *((void *)v45 + 4);
        *((void *)v44 + 3) = *((void *)v45 + 3);
        *((void *)v44 + 4) = v48;
        id v49 = v46;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v50 = *((_OWORD *)v45 + 1);
        *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
        *((_OWORD *)v44 + 1) = v50;
        *((void *)v44 + 4) = *((void *)v45 + 4);
      }
      *(void *)&v7[v35[8]] = *(void *)&v8[v35[8]];
      uint64_t v51 = v35[9];
      id v52 = &v7[v51];
      long long v53 = &v8[v51];
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)id v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      v7[v35[10]] = v8[v35[10]];
      *(void *)&v7[v35[11]] = *(void *)&v8[v35[11]];
      uint64_t v55 = v35[12];
      uint64_t v56 = *(void **)&v8[v55];
      *(void *)&v7[v55] = v56;
      v7[v35[13]] = v8[v35[13]];
      uint64_t v57 = v35[14];
      uint64_t v58 = &v7[v57];
      uint64_t v59 = &v8[v57];
      uint64_t v60 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v61 = v56;
      uint64_t v80 = a3;
      if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v60))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
        __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
      }
      uint64_t v63 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v64 = *(int *)(v63 + 20);
      uint64_t v65 = &v58[v64];
      uint64_t v66 = &v59[v64];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v59[v64], 1, v60))
      {
        uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
        uint64_t v68 = *(void *)(v60 - 8);
      }
      else
      {
        uint64_t v68 = *(void *)(v60 - 8);
        (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v66, v60);
        __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v60);
      }
      uint64_t v69 = v68;
      v58[*(int *)(v63 + 24)] = v59[*(int *)(v63 + 24)];
      v83[v35[15]] = v8[v35[15]];
      *(void *)&v83[v35[16]] = *(void *)&v8[v35[16]];
      uint64_t v70 = v80[6];
      uint64_t v71 = &v82[v70];
      uint64_t v72 = &v81[v70];
      uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      swift_retain();
      v73(v71, v72, v60);
      v73(&v82[v80[7]], &v81[v80[7]], v60);
      uint64_t v74 = v80[9];
      *(void *)&v82[v80[8]] = *(void *)&v81[v80[8]];
      uint64_t v75 = &v82[v74];
      uint64_t v76 = &v81[v74];
      uint64_t v77 = *((void *)v76 + 1);
      *(void *)uint64_t v75 = *(void *)v76;
      *((void *)v75 + 1) = v77;
      uint64_t v78 = v80[11];
      v82[v80[10]] = v81[v80[10]];
      *(void *)&v82[v78] = *(void *)&v81[v78];
      v82[v80[12]] = v81[v80[12]];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v82;
    default:
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
      goto LABEL_17;
  }
}

char *assignWithCopy for CaptionSectioner.Caption(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  if (a1 != a2)
  {
    outlined destroy of CaptionSectioner.Caption();
    uint64_t v7 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v5, v6, v8);
        goto LABEL_17;
      case 4u:
        uint64_t v9 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v5, v6, v9);
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v11 = *(int *)(v10 + 48);
        uint64_t v12 = &v5[v11];
        uint64_t v13 = &v6[v11];
        *(_OWORD *)uint64_t v12 = *(_OWORD *)&v6[v11];
        *((void *)v12 + 2) = *(void *)&v6[v11 + 16];
        uint64_t v14 = *(void *)&v6[v11 + 24];
        *((_WORD *)v12 + 16) = *((_WORD *)v13 + 16);
        *((void *)v12 + 3) = v14;
        *((void *)v12 + 5) = *((void *)v13 + 5);
        v12[48] = v13[48];
        long long v15 = *(_OWORD *)(v13 + 72);
        long long v16 = *(_OWORD *)(v13 + 56);
        v12[88] = v13[88];
        *(_OWORD *)(v12 + 56) = v16;
        *(_OWORD *)(v12 + 72) = v15;
        v12[89] = v13[89];
        uint64_t v17 = *((void *)v13 + 15);
        swift_bridgeObjectRetain();
        if (v17)
        {
          if (v17 == 1)
          {
            uint64_t v18 = v12 + 96;
            uint64_t v19 = v13 + 96;
            size_t v20 = 209;
            goto LABEL_11;
          }
          *((void *)v12 + 15) = v17;
          *((void *)v12 + 16) = *((void *)v13 + 16);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8))((uint64_t)(v12 + 96), (uint64_t)(v13 + 96), v17);
        }
        else
        {
          long long v21 = *((_OWORD *)v13 + 6);
          long long v22 = *((_OWORD *)v13 + 7);
          *((void *)v12 + 16) = *((void *)v13 + 16);
          *((_OWORD *)v12 + 6) = v21;
          *((_OWORD *)v12 + 7) = v22;
        }
        *((_DWORD *)v12 + 34) = *((_DWORD *)v13 + 34);
        *((void *)v12 + 18) = *((void *)v13 + 18);
        *((void *)v12 + 19) = *((void *)v13 + 19);
        long long v23 = *((_OWORD *)v13 + 10);
        long long v24 = *((_OWORD *)v13 + 11);
        v12[192] = v13[192];
        *((_OWORD *)v12 + 10) = v23;
        *((_OWORD *)v12 + 11) = v24;
        *((void *)v12 + 25) = *((void *)v13 + 25);
        uint64_t v18 = v12 + 208;
        uint64_t v19 = v13 + 208;
        size_t v20 = 97;
LABEL_11:
        memcpy(v18, v19, v20);
        uint64_t v25 = *((void *)v13 + 39);
        if (v25)
        {
          uint64_t v26 = *((void *)v13 + 40);
          *((void *)v12 + 39) = v25;
          *((void *)v12 + 40) = v26;
          *((void *)v12 + 41) = *((void *)v13 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v27 = *(_OWORD *)(v13 + 312);
          *((void *)v12 + 41) = *((void *)v13 + 41);
          *(_OWORD *)(v12 + 312) = v27;
        }
        uint64_t v28 = *(int *)(v10 + 64);
        uint64_t v29 = &v5[v28];
        uint64_t v30 = &v6[v28];
        if (*((void *)v30 + 1))
        {
          *(void *)uint64_t v29 = *(void *)v30;
          *((void *)v29 + 1) = *((void *)v30 + 1);
          *((void *)v29 + 2) = *((void *)v30 + 2);
          *((void *)v29 + 3) = *((void *)v30 + 3);
          v29[32] = v30[32];
          *((void *)v29 + 5) = *((void *)v30 + 5);
          *((void *)v29 + 6) = *((void *)v30 + 6);
          *((void *)v29 + 7) = *((void *)v30 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v31 = *(_OWORD *)v30;
          long long v32 = *((_OWORD *)v30 + 1);
          long long v33 = *((_OWORD *)v30 + 3);
          *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
          *((_OWORD *)v29 + 3) = v33;
          *(_OWORD *)uint64_t v29 = v31;
          *((_OWORD *)v29 + 1) = v32;
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
  }
  long long v34 = (int *)type metadata accessor for Participant(0);
  uint64_t v35 = v34[5];
  uint64_t v36 = &v5[v35];
  long long v37 = &v6[v35];
  uint64_t v38 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 24))(v36, v37, v38);
  uint64_t v39 = v34[6];
  uint64_t v40 = &v5[v39];
  uint64_t v41 = &v6[v39];
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  v40[2] = v41[2];
  v40[3] = v41[3];
  v40[4] = v41[4];
  uint64_t v42 = v34[7];
  uint64_t v43 = (uint64_t)&v5[v42];
  uint64_t v44 = &v6[v42];
  uint64_t v45 = *(void **)&v5[v42];
  uint64_t v46 = *(void **)&v6[v42];
  if (v45)
  {
    if (v46)
    {
      *(void *)uint64_t v43 = v46;
      id v47 = v46;

      uint64_t v48 = *((void *)v44 + 1);
      *(unsigned char *)(v43 + 16) = v44[16];
      *(void *)(v43 + 8) = v48;
      *(void *)(v43 + 24) = *((void *)v44 + 3);
      *(void *)(v43 + 32) = *((void *)v44 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Participant.RemoteIdentifiers(v43);
      uint64_t v51 = *((void *)v44 + 4);
      long long v52 = *((_OWORD *)v44 + 1);
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
      *(_OWORD *)(v43 + 16) = v52;
      *(void *)(v43 + 32) = v51;
    }
  }
  else if (v46)
  {
    *(void *)uint64_t v43 = v46;
    uint64_t v49 = *((void *)v44 + 1);
    *(unsigned char *)(v43 + 16) = v44[16];
    *(void *)(v43 + 8) = v49;
    *(void *)(v43 + 24) = *((void *)v44 + 3);
    *(void *)(v43 + 32) = *((void *)v44 + 4);
    id v50 = v46;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v53 = *(_OWORD *)v44;
    long long v54 = *((_OWORD *)v44 + 1);
    *(void *)(v43 + 32) = *((void *)v44 + 4);
    *(_OWORD *)uint64_t v43 = v53;
    *(_OWORD *)(v43 + 16) = v54;
  }
  *(void *)&v5[v34[8]] = *(void *)&v6[v34[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = v34[9];
  uint64_t v56 = &v5[v55];
  uint64_t v57 = &v6[v55];
  *(void *)uint64_t v56 = *(void *)v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[v34[10]] = v6[v34[10]];
  *(void *)&v5[v34[11]] = *(void *)&v6[v34[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = v34[12];
  uint64_t v59 = *(void **)&v5[v58];
  uint64_t v60 = *(void **)&v6[v58];
  *(void *)&v5[v58] = v60;
  id v61 = v60;

  v5[v34[13]] = v6[v34[13]];
  uint64_t v62 = v34[14];
  uint64_t v63 = &v5[v62];
  uint64_t v64 = &v6[v62];
  uint64_t v65 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v63, 1, v65);
  int v67 = __swift_getEnumTagSinglePayload((uint64_t)v64, 1, v65);
  uint64_t v85 = a1;
  if (EnumTagSinglePayload)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
      __swift_storeEnumTagSinglePayload((uint64_t)v63, 0, 1, v65);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v68 = *(void *)(v65 - 8);
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v65);
LABEL_30:
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v63, v64, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v63, v64, v65);
LABEL_31:
  uint64_t v70 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v71 = *(int *)(v70 + 20);
  uint64_t v72 = &v63[v71];
  uint64_t v73 = &v64[v71];
  int v74 = __swift_getEnumTagSinglePayload((uint64_t)&v63[v71], 1, v65);
  int v75 = __swift_getEnumTagSinglePayload((uint64_t)v73, 1, v65);
  if (!v74)
  {
    uint64_t v76 = *(void *)(v65 - 8);
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v76 + 24))(v72, v73, v65);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v65);
    goto LABEL_36;
  }
  if (v75)
  {
LABEL_36:
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v72, v73, *(void *)(*(void *)(v77 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v72, v73, v65);
  __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v65);
LABEL_37:
  v63[*(int *)(v70 + 24)] = v64[*(int *)(v70 + 24)];
  v5[v34[15]] = v6[v34[15]];
  *(void *)&v5[v34[16]] = *(void *)&v6[v34[16]];
  swift_retain();
  swift_release();
  uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 24);
  v78(&v85[a3[6]], &a2[a3[6]], v65);
  v78(&v85[a3[7]], &a2[a3[7]], v65);
  *(void *)&v85[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  uint64_t v79 = a3[9];
  uint64_t v80 = &v85[v79];
  uint64_t v81 = &a2[v79];
  *(void *)uint64_t v80 = *(void *)v81;
  *((void *)v80 + 1) = *((void *)v81 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v85[a3[10]] = a2[a3[10]];
  *(void *)&v85[a3[11]] = *(void *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v85[a3[12]] = a2[a3[12]];
  return v85;
}

uint64_t outlined destroy of CaptionSectioner.Caption()
{
  uint64_t v1 = OUTLINED_FUNCTION_49_2();
  v2(v1);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return v0;
}

uint64_t outlined destroy of Participant.RemoteIdentifiers(uint64_t a1)
{
  return a1;
}

char *initializeWithTake for CaptionSectioner.Caption(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a3[5];
  uint64_t v4 = &a1[v3];
  uint64_t v5 = &a2[v3];
  uint64_t v6 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v4, v5, v14);
      goto LABEL_5;
    case 4u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v4, v5, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      memcpy(&v4[*(int *)(v8 + 48)], &v5[*(int *)(v8 + 48)], 0x150uLL);
      uint64_t v9 = *(int *)(v8 + 64);
      uint64_t v10 = &v4[v9];
      uint64_t v11 = &v5[v9];
      long long v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v12;
      long long v13 = *((_OWORD *)v11 + 3);
      *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
      *((_OWORD *)v10 + 3) = v13;
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v4, v5, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  long long v15 = (int *)type metadata accessor for Participant(0);
  uint64_t v16 = v15[5];
  uint64_t v17 = &v4[v16];
  uint64_t v18 = &v5[v16];
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = v15[6];
  long long v21 = &v4[v20];
  long long v22 = &v5[v20];
  *(_DWORD *)long long v21 = *(_DWORD *)v22;
  void v21[4] = v22[4];
  uint64_t v23 = v15[7];
  long long v24 = &v4[v23];
  uint64_t v25 = &v5[v23];
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)long long v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((void *)v24 + 4) = *((void *)v25 + 4);
  *(void *)&v4[v15[8]] = *(void *)&v5[v15[8]];
  *(_OWORD *)&v4[v15[9]] = *(_OWORD *)&v5[v15[9]];
  v4[v15[10]] = v5[v15[10]];
  *(void *)&v4[v15[11]] = *(void *)&v5[v15[11]];
  *(void *)&v4[v15[12]] = *(void *)&v5[v15[12]];
  v4[v15[13]] = v5[v15[13]];
  uint64_t v27 = v15[14];
  uint64_t v28 = &v4[v27];
  uint64_t v29 = &v5[v27];
  uint64_t v30 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  uint64_t v32 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v42 = v28;
  long long v34 = &v28[v33];
  uint64_t v35 = &v29[v33];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v29[v33], 1, v30))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    uint64_t v37 = *(void *)(v30 - 8);
  }
  else
  {
    uint64_t v37 = *(void *)(v30 - 8);
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v30);
  }
  v42[*(int *)(v32 + 24)] = v29[*(int *)(v32 + 24)];
  v4[v15[15]] = v5[v15[15]];
  *(void *)&v4[v15[16]] = *(void *)&v5[v15[16]];
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v38(&a1[a3[6]], &a2[a3[6]], v30);
  v38(&a1[a3[7]], &a2[a3[7]], v30);
  uint64_t v39 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(_OWORD *)&a1[v39] = *(_OWORD *)&a2[v39];
  uint64_t v40 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(void *)&a1[v40] = *(void *)&a2[v40];
  a1[a3[12]] = a2[a3[12]];
  return a1;
}

char *assignWithTake for CaptionSectioner.Caption(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  if (a1 != a2)
  {
    outlined destroy of CaptionSectioner.Caption();
    uint64_t v7 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v15 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v5, v6, v15);
        goto LABEL_5;
      case 4u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&v5[*(int *)(v9 + 48)], &v6[*(int *)(v9 + 48)], 0x150uLL);
        uint64_t v10 = *(int *)(v9 + 64);
        uint64_t v11 = &v5[v10];
        long long v12 = &v6[v10];
        long long v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        long long v14 = *((_OWORD *)v12 + 3);
        *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
        *((_OWORD *)v11 + 3) = v14;
LABEL_5:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
  }
  uint64_t v16 = (int *)type metadata accessor for Participant(0);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  uint64_t v20 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  uint64_t v21 = v16[6];
  long long v22 = &v5[v21];
  uint64_t v23 = &v6[v21];
  *long long v22 = *v23;
  v22[1] = v23[1];
  v22[2] = v23[2];
  v22[3] = v23[3];
  v22[4] = v23[4];
  uint64_t v24 = v16[7];
  uint64_t v25 = (uint64_t)&v5[v24];
  long long v26 = &v6[v24];
  uint64_t v27 = *(void **)&v5[v24];
  if (v27)
  {
    if (*(void *)v26)
    {
      *(void *)uint64_t v25 = *(void *)v26;

      *(void *)(v25 + 8) = *((void *)v26 + 1);
      *(unsigned char *)(v25 + 16) = v26[16];
      uint64_t v28 = *((void *)v26 + 4);
      *(void *)(v25 + 24) = *((void *)v26 + 3);
      *(void *)(v25 + 32) = v28;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Participant.RemoteIdentifiers(v25);
  }
  long long v29 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v29;
  *(void *)(v25 + 32) = *((void *)v26 + 4);
LABEL_11:
  *(void *)&v5[v16[8]] = *(void *)&v6[v16[8]];
  swift_bridgeObjectRelease();
  uint64_t v30 = v16[9];
  uint64_t v31 = &v5[v30];
  uint64_t v32 = &v6[v30];
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = v34;
  *((void *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  v5[v16[10]] = v6[v16[10]];
  *(void *)&v5[v16[11]] = *(void *)&v6[v16[11]];
  swift_bridgeObjectRelease();
  uint64_t v35 = v16[12];
  uint64_t v36 = *(void **)&v5[v35];
  *(void *)&v5[v35] = *(void *)&v6[v35];

  v5[v16[13]] = v6[v16[13]];
  uint64_t v37 = v16[14];
  uint64_t v38 = &v5[v37];
  uint64_t v39 = &v6[v37];
  uint64_t v40 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v38, 1, v40);
  int v42 = __swift_getEnumTagSinglePayload((uint64_t)v39, 1, v40);
  if (EnumTagSinglePayload)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
      __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v40);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v43 = *(void *)(v40 - 8);
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v40);
LABEL_16:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v38, v39, v40);
LABEL_17:
  uint64_t v45 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v46 = *(int *)(v45 + 20);
  id v47 = &v38[v46];
  id v61 = v39;
  uint64_t v48 = &v39[v46];
  int v49 = __swift_getEnumTagSinglePayload((uint64_t)&v38[v46], 1, v40);
  int v50 = __swift_getEnumTagSinglePayload((uint64_t)v48, 1, v40);
  if (!v49)
  {
    uint64_t v51 = *(void *)(v40 - 8);
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v47, v48, v40);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v40);
    goto LABEL_22;
  }
  if (v50)
  {
LABEL_22:
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v47, v48, v40);
  __swift_storeEnumTagSinglePayload((uint64_t)v47, 0, 1, v40);
LABEL_23:
  v38[*(int *)(v45 + 24)] = v61[*(int *)(v45 + 24)];
  v5[v16[15]] = v6[v16[15]];
  *(void *)&v5[v16[16]] = *(void *)&v6[v16[16]];
  swift_release();
  long long v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 40);
  v53(&a1[a3[6]], &a2[a3[6]], v40);
  v53(&a1[a3[7]], &a2[a3[7]], v40);
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  uint64_t v54 = a3[9];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = (uint64_t *)&a2[v54];
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(void *)&a1[v59] = *(void *)&a2[v59];
  swift_bridgeObjectRelease();
  a1[a3[12]] = a2[a3[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for CaptionSectioner.Caption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3057AC4);
}

uint64_t sub_1C3057AC4()
{
  uint64_t v3 = OUTLINED_FUNCTION_55_1();
  type metadata accessor for Participant(v3);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v5 + 84) == v0)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v2[5];
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) != v0) {
      return OUTLINED_FUNCTION_46_0(*(void *)(v1 + v2[9] + 8));
    }
    uint64_t v6 = v8;
    uint64_t v7 = v2[6];
  }
  return __swift_getEnumTagSinglePayload(v1 + v7, v0, v6);
}

uint64_t storeEnumTagSinglePayload for CaptionSectioner.Caption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3057B78);
}

void sub_1C3057B78()
{
  uint64_t v4 = OUTLINED_FUNCTION_30_6();
  type metadata accessor for Participant(v4);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v2[5];
  }
  else
  {
    type metadata accessor for Date();
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v10 + 84) != v3)
    {
      *(void *)(v1 + v2[9] + 8) = (v0 - 1);
      return;
    }
    uint64_t v7 = v9;
    uint64_t v8 = v2[6];
  }
  __swift_storeEnumTagSinglePayload(v1 + v8, v0, v0, v7);
}

uint64_t type metadata completion function for CaptionSectioner.Caption()
{
  uint64_t result = type metadata accessor for Participant(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CaptionSectioner.Caption.Visibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3057DF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for CaptionSectioner.Caption.Visibility()
{
}

void *initializeBufferWithCopyOfBuffer for CaptionSectioner.SpeakerSection(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v15 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v73 = a3;
    int v74 = a2;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(v10, v11, v13);
        goto LABEL_18;
      case 4u:
        uint64_t v16 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16))(v10, v11, v16);
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v17 = *(int *)(v69 + 48);
        uint64_t v18 = &v10[v17];
        uint64_t v19 = &v11[v17];
        *(_OWORD *)uint64_t v18 = *(_OWORD *)&v11[v17];
        uint64_t v20 = *(void *)&v11[v17 + 16];
        uint64_t v21 = *(void *)&v11[v17 + 24];
        *((void *)v18 + 2) = v20;
        *((void *)v18 + 3) = v21;
        *((_WORD *)v18 + 16) = *((_WORD *)v19 + 16);
        *((void *)v18 + 5) = *((void *)v19 + 5);
        v18[48] = v19[48];
        *(_OWORD *)(v18 + 56) = *(_OWORD *)(v19 + 56);
        *(_OWORD *)(v18 + 72) = *(_OWORD *)(v19 + 72);
        v18[88] = v19[88];
        v18[89] = v19[89];
        uint64_t v70 = v19 + 96;
        uint64_t v71 = v18 + 96;
        uint64_t v22 = *((void *)v19 + 15);
        swift_bridgeObjectRetain();
        if (v22)
        {
          if (v22 == 1)
          {
            uint64_t v24 = v19 + 96;
            uint64_t v23 = v18 + 96;
            size_t v25 = 209;
            goto LABEL_12;
          }
          uint64_t v27 = *((void *)v19 + 16);
          *((void *)v18 + 15) = v22;
          *((void *)v18 + 16) = v27;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v22 - 8))(v71, v70, v22);
        }
        else
        {
          long long v26 = *((_OWORD *)v19 + 7);
          *uint64_t v71 = *v70;
          *((_OWORD *)v18 + 7) = v26;
          *((void *)v18 + 16) = *((void *)v19 + 16);
        }
        *((_DWORD *)v18 + 34) = *((_DWORD *)v19 + 34);
        long long v28 = *((_OWORD *)v19 + 10);
        *((_OWORD *)v18 + 9) = *((_OWORD *)v19 + 9);
        *((_OWORD *)v18 + 10) = v28;
        *((_OWORD *)v18 + 11) = *((_OWORD *)v19 + 11);
        v18[192] = v19[192];
        uint64_t v23 = v18 + 208;
        uint64_t v24 = v19 + 208;
        *((void *)v18 + 25) = *((void *)v19 + 25);
        size_t v25 = 97;
LABEL_12:
        memcpy(v23, v24, v25);
        uint64_t v29 = *((void *)v19 + 39);
        if (v29)
        {
          uint64_t v30 = *((void *)v19 + 40);
          uint64_t v31 = *((void *)v19 + 41);
          *((void *)v18 + 39) = v29;
          *((void *)v18 + 40) = v30;
          *((void *)v18 + 41) = v31;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v18 + 312) = *(_OWORD *)(v19 + 312);
          *((void *)v18 + 41) = *((void *)v19 + 41);
        }
        uint64_t v32 = *(int *)(v69 + 64);
        uint64_t v33 = &v10[v32];
        uint64_t v34 = &v11[v32];
        uint64_t v35 = *((void *)v34 + 1);
        if (v35)
        {
          *(void *)uint64_t v33 = *(void *)v34;
          *((void *)v33 + 1) = v35;
          uint64_t v36 = *((void *)v34 + 3);
          *((void *)v33 + 2) = *((void *)v34 + 2);
          *((void *)v33 + 3) = v36;
          v33[32] = v34[32];
          *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
          *((void *)v33 + 7) = *((void *)v34 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v37 = *((_OWORD *)v34 + 1);
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *((_OWORD *)v33 + 1) = v37;
          long long v38 = *((_OWORD *)v34 + 3);
          *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
          *((_OWORD *)v33 + 3) = v38;
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
LABEL_19:
        uint64_t v39 = (int *)type metadata accessor for Participant(0);
        v8(&v10[v39[5]], &v11[v39[5]], v7);
        uint64_t v40 = v39[6];
        uint64_t v41 = &v10[v40];
        int v42 = &v11[v40];
        v41[4] = v42[4];
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        uint64_t v43 = v39[7];
        uint64_t v44 = &v10[v43];
        uint64_t v45 = &v11[v43];
        uint64_t v46 = *(void **)v45;
        uint64_t v72 = a1;
        if (*(void *)v45)
        {
          uint64_t v47 = *((void *)v45 + 1);
          *(void *)uint64_t v44 = v46;
          *((void *)v44 + 1) = v47;
          v44[16] = v45[16];
          uint64_t v48 = *((void *)v45 + 4);
          *((void *)v44 + 3) = *((void *)v45 + 3);
          *((void *)v44 + 4) = v48;
          id v49 = v46;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v50 = *((_OWORD *)v45 + 1);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          *((_OWORD *)v44 + 1) = v50;
          *((void *)v44 + 4) = *((void *)v45 + 4);
        }
        *(void *)&v10[v39[8]] = *(void *)&v11[v39[8]];
        uint64_t v51 = v39[9];
        uint64_t v52 = &v10[v51];
        long long v53 = &v11[v51];
        uint64_t v54 = v53[1];
        *uint64_t v52 = *v53;
        v52[1] = v54;
        v10[v39[10]] = v11[v39[10]];
        *(void *)&v10[v39[11]] = *(void *)&v11[v39[11]];
        uint64_t v55 = v39[12];
        uint64_t v56 = *(void **)&v11[v55];
        *(void *)&v10[v55] = v56;
        v10[v39[13]] = v11[v39[13]];
        uint64_t v57 = v39[14];
        uint64_t v58 = &v10[v57];
        uint64_t v59 = &v11[v57];
        uint64_t v60 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v61 = v56;
        if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v60))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
        }
        uint64_t v15 = v72;
        uint64_t v63 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v64 = *(int *)(v63 + 20);
        uint64_t v65 = &v58[v64];
        uint64_t v66 = &v59[v64];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v59[v64], 1, v60))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v65, v66, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v60);
        }
        v58[*(int *)(v63 + 24)] = v59[*(int *)(v63 + 24)];
        v10[v39[15]] = v11[v39[15]];
        *(void *)&v10[v39[16]] = *(void *)&v11[v39[16]];
        *(void *)((char *)v72 + *(int *)(v73 + 24)) = *(void *)((char *)v74 + *(int *)(v73 + 24));
        swift_retain();
        swift_bridgeObjectRetain();
        break;
      default:
        memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
        goto LABEL_19;
    }
  }
  return v15;
}

uint64_t destroy for CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      break;
    case 4u:
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v6, v14);
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v16 = v6 + *(int *)(v15 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v16 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v16 + 96);
      }
      if (*(void *)(v16 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v6 + *(int *)(v15 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  uint64_t v8 = (int *)type metadata accessor for Participant(0);
  v5(v6 + v8[5], v4);
  uint64_t v9 = (id *)(v6 + v8[7]);
  if (*v9)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v10 = v6 + v8[14];
  uint64_t v11 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  uint64_t v12 = v10 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v12, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v12, v11);
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v69 = a3;
  uint64_t v70 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v12 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
      goto LABEL_16;
    case 4u:
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v14 = *(int *)(v68 + 48);
      uint64_t v15 = &v9[v14];
      uint64_t v16 = &v10[v14];
      *(_OWORD *)uint64_t v15 = *(_OWORD *)&v10[v14];
      uint64_t v17 = *(void *)&v10[v14 + 16];
      uint64_t v18 = *(void *)&v10[v14 + 24];
      *((void *)v15 + 2) = v17;
      *((void *)v15 + 3) = v18;
      *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      v15[48] = v16[48];
      *(_OWORD *)(v15 + 56) = *(_OWORD *)(v16 + 56);
      *(_OWORD *)(v15 + 72) = *(_OWORD *)(v16 + 72);
      v15[88] = v16[88];
      v15[89] = v16[89];
      uint64_t v66 = v16 + 96;
      uint64_t v67 = v15 + 96;
      uint64_t v19 = *((void *)v16 + 15);
      swift_bridgeObjectRetain();
      if (v19)
      {
        if (v19 == 1)
        {
          uint64_t v21 = v16 + 96;
          uint64_t v20 = v15 + 96;
          size_t v22 = 209;
          goto LABEL_10;
        }
        uint64_t v24 = *((void *)v16 + 16);
        *((void *)v15 + 15) = v19;
        *((void *)v15 + 16) = v24;
        (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v19 - 8))(v67, v66, v19);
      }
      else
      {
        long long v23 = *((_OWORD *)v16 + 7);
        _OWORD *v67 = *v66;
        *((_OWORD *)v15 + 7) = v23;
        *((void *)v15 + 16) = *((void *)v16 + 16);
      }
      *((_DWORD *)v15 + 34) = *((_DWORD *)v16 + 34);
      long long v25 = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 9) = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 10) = v25;
      *((_OWORD *)v15 + 11) = *((_OWORD *)v16 + 11);
      v15[192] = v16[192];
      uint64_t v20 = v15 + 208;
      uint64_t v21 = v16 + 208;
      *((void *)v15 + 25) = *((void *)v16 + 25);
      size_t v22 = 97;
LABEL_10:
      memcpy(v20, v21, v22);
      uint64_t v26 = *((void *)v16 + 39);
      if (v26)
      {
        uint64_t v27 = *((void *)v16 + 40);
        uint64_t v28 = *((void *)v16 + 41);
        *((void *)v15 + 39) = v26;
        *((void *)v15 + 40) = v27;
        *((void *)v15 + 41) = v28;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v15 + 312) = *(_OWORD *)(v16 + 312);
        *((void *)v15 + 41) = *((void *)v16 + 41);
      }
      uint64_t v29 = *(int *)(v68 + 64);
      uint64_t v30 = &v9[v29];
      uint64_t v31 = &v10[v29];
      uint64_t v32 = *((void *)v31 + 1);
      if (v32)
      {
        *(void *)uint64_t v30 = *(void *)v31;
        *((void *)v30 + 1) = v32;
        uint64_t v33 = *((void *)v31 + 3);
        *((void *)v30 + 2) = *((void *)v31 + 2);
        *((void *)v30 + 3) = v33;
        v30[32] = v31[32];
        *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
        *((void *)v30 + 7) = *((void *)v31 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v34 = *((_OWORD *)v31 + 1);
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
        *((_OWORD *)v30 + 1) = v34;
        long long v35 = *((_OWORD *)v31 + 3);
        *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
        *((_OWORD *)v30 + 3) = v35;
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_17:
      uint64_t v36 = (int *)type metadata accessor for Participant(0);
      v7((uint64_t)&v9[v36[5]], (uint64_t)&v10[v36[5]], v6);
      uint64_t v37 = v36[6];
      long long v38 = &v9[v37];
      uint64_t v39 = &v10[v37];
      v38[4] = v39[4];
      *(_DWORD *)long long v38 = *(_DWORD *)v39;
      uint64_t v40 = v36[7];
      uint64_t v41 = &v9[v40];
      int v42 = &v10[v40];
      uint64_t v43 = *(void **)v42;
      uint64_t v71 = a1;
      if (*(void *)v42)
      {
        uint64_t v44 = *((void *)v42 + 1);
        *(void *)uint64_t v41 = v43;
        *((void *)v41 + 1) = v44;
        v41[16] = v42[16];
        uint64_t v45 = *((void *)v42 + 4);
        *((void *)v41 + 3) = *((void *)v42 + 3);
        *((void *)v41 + 4) = v45;
        id v46 = v43;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v47 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v47;
        *((void *)v41 + 4) = *((void *)v42 + 4);
      }
      *(void *)&v9[v36[8]] = *(void *)&v10[v36[8]];
      uint64_t v48 = v36[9];
      id v49 = &v9[v48];
      long long v50 = &v10[v48];
      uint64_t v51 = v50[1];
      *id v49 = *v50;
      v49[1] = v51;
      v9[v36[10]] = v10[v36[10]];
      *(void *)&v9[v36[11]] = *(void *)&v10[v36[11]];
      uint64_t v52 = v36[12];
      long long v53 = *(void **)&v10[v52];
      *(void *)&v9[v52] = v53;
      v9[v36[13]] = v10[v36[13]];
      uint64_t v54 = v36[14];
      uint64_t v55 = &v9[v54];
      uint64_t v56 = &v10[v54];
      uint64_t v57 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v58 = v53;
      if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v57);
      }
      uint64_t v60 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v61 = *(int *)(v60 + 20);
      uint64_t v62 = &v55[v61];
      uint64_t v63 = &v56[v61];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v56[v61], 1, v57))
      {
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v62, v63, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v57);
      }
      v55[*(int *)(v60 + 24)] = v56[*(int *)(v60 + 24)];
      v9[v36[15]] = v10[v36[15]];
      *(void *)&v9[v36[16]] = *(void *)&v10[v36[16]];
      *(void *)(v71 + *(int *)(v69 + 24)) = *(void *)(v70 + *(int *)(v69 + 24));
      swift_retain();
      swift_bridgeObjectRetain();
      return v71;
    default:
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      goto LABEL_17;
  }
}

uint64_t assignWithCopy for CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v80 = a3;
  uint64_t v81 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v82 = a1;
  if (a1 != a2)
  {
    outlined destroy of CaptionSectioner.Caption();
    uint64_t v11 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v12 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
        goto LABEL_17;
      case 4u:
        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
        uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v14 = *(int *)(v79 + 48);
        uint64_t v15 = &v9[v14];
        uint64_t v16 = &v10[v14];
        *(_OWORD *)uint64_t v15 = *(_OWORD *)&v10[v14];
        *((void *)v15 + 2) = *(void *)&v10[v14 + 16];
        uint64_t v17 = *(void *)&v10[v14 + 24];
        *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
        *((void *)v15 + 3) = v17;
        *((void *)v15 + 5) = *((void *)v16 + 5);
        v15[48] = v16[48];
        long long v18 = *(_OWORD *)(v16 + 72);
        long long v19 = *(_OWORD *)(v16 + 56);
        v15[88] = v16[88];
        *(_OWORD *)(v15 + 56) = v19;
        *(_OWORD *)(v15 + 72) = v18;
        v15[89] = v16[89];
        uint64_t v78 = v15 + 96;
        uint64_t v20 = *((void *)v16 + 15);
        swift_bridgeObjectRetain();
        if (v20)
        {
          if (v20 == 1)
          {
            uint64_t v21 = v15 + 96;
            size_t v22 = v16 + 96;
            size_t v23 = 209;
            goto LABEL_11;
          }
          *((void *)v15 + 15) = v20;
          *((void *)v15 + 16) = *((void *)v16 + 16);
          (**(void (***)(_OWORD *, uint64_t, uint64_t))(v20 - 8))(v78, (uint64_t)(v16 + 96), v20);
        }
        else
        {
          long long v24 = *((_OWORD *)v16 + 6);
          long long v25 = *((_OWORD *)v16 + 7);
          *((void *)v15 + 16) = *((void *)v16 + 16);
          *uint64_t v78 = v24;
          *((_OWORD *)v15 + 7) = v25;
        }
        *((_DWORD *)v15 + 34) = *((_DWORD *)v16 + 34);
        *((void *)v15 + 18) = *((void *)v16 + 18);
        *((void *)v15 + 19) = *((void *)v16 + 19);
        long long v26 = *((_OWORD *)v16 + 10);
        long long v27 = *((_OWORD *)v16 + 11);
        v15[192] = v16[192];
        *((_OWORD *)v15 + 10) = v26;
        *((_OWORD *)v15 + 11) = v27;
        *((void *)v15 + 25) = *((void *)v16 + 25);
        uint64_t v21 = v15 + 208;
        size_t v22 = v16 + 208;
        size_t v23 = 97;
LABEL_11:
        memcpy(v21, v22, v23);
        uint64_t v28 = *((void *)v16 + 39);
        if (v28)
        {
          uint64_t v29 = *((void *)v16 + 40);
          *((void *)v15 + 39) = v28;
          *((void *)v15 + 40) = v29;
          *((void *)v15 + 41) = *((void *)v16 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v30 = *(_OWORD *)(v16 + 312);
          *((void *)v15 + 41) = *((void *)v16 + 41);
          *(_OWORD *)(v15 + 312) = v30;
        }
        uint64_t v31 = *(int *)(v79 + 64);
        uint64_t v32 = &v9[v31];
        uint64_t v33 = &v10[v31];
        if (*((void *)v33 + 1))
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *((void *)v32 + 1) = *((void *)v33 + 1);
          *((void *)v32 + 2) = *((void *)v33 + 2);
          *((void *)v32 + 3) = *((void *)v33 + 3);
          char v32[32] = v33[32];
          *((void *)v32 + 5) = *((void *)v33 + 5);
          *((void *)v32 + 6) = *((void *)v33 + 6);
          *((void *)v32 + 7) = *((void *)v33 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v34 = *(_OWORD *)v33;
          long long v35 = *((_OWORD *)v33 + 1);
          long long v36 = *((_OWORD *)v33 + 3);
          *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
          *((_OWORD *)v32 + 3) = v36;
          *(_OWORD *)uint64_t v32 = v34;
          *((_OWORD *)v32 + 1) = v35;
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        break;
    }
  }
  uint64_t v37 = (int *)type metadata accessor for Participant(0);
  v7((uint64_t)&v9[v37[5]], (uint64_t)&v10[v37[5]], v6);
  uint64_t v38 = v37[6];
  uint64_t v39 = &v9[v38];
  uint64_t v40 = &v10[v38];
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  v39[2] = v40[2];
  v39[3] = v40[3];
  v39[4] = v40[4];
  uint64_t v41 = v37[7];
  uint64_t v42 = (uint64_t)&v9[v41];
  uint64_t v43 = &v10[v41];
  uint64_t v44 = *(void **)&v9[v41];
  uint64_t v45 = *(void **)&v10[v41];
  if (v44)
  {
    if (v45)
    {
      *(void *)uint64_t v42 = v45;
      id v46 = v45;

      uint64_t v47 = *((void *)v43 + 1);
      *(unsigned char *)(v42 + 16) = v43[16];
      *(void *)(v42 + 8) = v47;
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      *(void *)(v42 + 32) = *((void *)v43 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Participant.RemoteIdentifiers(v42);
      uint64_t v50 = *((void *)v43 + 4);
      long long v51 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v51;
      *(void *)(v42 + 32) = v50;
    }
  }
  else if (v45)
  {
    *(void *)uint64_t v42 = v45;
    uint64_t v48 = *((void *)v43 + 1);
    *(unsigned char *)(v42 + 16) = v43[16];
    *(void *)(v42 + 8) = v48;
    *(void *)(v42 + 24) = *((void *)v43 + 3);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    id v49 = v45;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)v43;
    long long v53 = *((_OWORD *)v43 + 1);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    *(_OWORD *)uint64_t v42 = v52;
    *(_OWORD *)(v42 + 16) = v53;
  }
  *(void *)&v9[v37[8]] = *(void *)&v10[v37[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v37[9];
  uint64_t v55 = &v9[v54];
  uint64_t v56 = &v10[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[v37[10]] = v10[v37[10]];
  *(void *)&v9[v37[11]] = *(void *)&v10[v37[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v37[12];
  id v58 = *(void **)&v9[v57];
  uint64_t v59 = *(void **)&v10[v57];
  *(void *)&v9[v57] = v59;
  id v60 = v59;

  v9[v37[13]] = v10[v37[13]];
  uint64_t v61 = v37[14];
  uint64_t v62 = &v9[v61];
  uint64_t v63 = &v10[v61];
  uint64_t v64 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v62, 1, v64);
  int v66 = __swift_getEnumTagSinglePayload((uint64_t)v63, 1, v64);
  if (EnumTagSinglePayload)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v64);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v67 = *(void *)(v64 - 8);
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v64);
LABEL_30:
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v62, v63, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v62, v63, v64);
LABEL_31:
  uint64_t v69 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v70 = *(int *)(v69 + 20);
  uint64_t v71 = &v62[v70];
  uint64_t v72 = &v63[v70];
  int v73 = __swift_getEnumTagSinglePayload((uint64_t)&v62[v70], 1, v64);
  int v74 = __swift_getEnumTagSinglePayload((uint64_t)v72, 1, v64);
  if (!v73)
  {
    uint64_t v75 = *(void *)(v64 - 8);
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v71, v72, v64);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v71, v64);
    goto LABEL_36;
  }
  if (v74)
  {
LABEL_36:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v71, v72, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v71, v72, v64);
  __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v64);
LABEL_37:
  v62[*(int *)(v69 + 24)] = v63[*(int *)(v69 + 24)];
  v9[v37[15]] = v10[v37[15]];
  *(void *)&v9[v37[16]] = *(void *)&v10[v37[16]];
  swift_retain();
  swift_release();
  *(void *)(v82 + *(int *)(v80 + 24)) = *(void *)(v81 + *(int *)(v80 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v82;
}

uint64_t initializeWithTake for CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v39 = a3;
  uint64_t v40 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v9, v10, v19);
      goto LABEL_5;
    case 4u:
      uint64_t v12 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      memcpy(&v9[*(int *)(v13 + 48)], &v10[*(int *)(v13 + 48)], 0x150uLL);
      uint64_t v14 = *(int *)(v13 + 64);
      uint64_t v15 = &v9[v14];
      uint64_t v16 = &v10[v14];
      long long v17 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v17;
      long long v18 = *((_OWORD *)v16 + 3);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v18;
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      break;
  }
  uint64_t v20 = (int *)type metadata accessor for Participant(0);
  v7((uint64_t)&v9[v20[5]], (uint64_t)&v10[v20[5]], v6);
  uint64_t v21 = v20[6];
  size_t v22 = &v9[v21];
  size_t v23 = &v10[v21];
  *(_DWORD *)size_t v22 = *(_DWORD *)v23;
  v22[4] = v23[4];
  uint64_t v24 = v20[7];
  long long v25 = &v9[v24];
  long long v26 = &v10[v24];
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)long long v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((void *)v25 + 4) = *((void *)v26 + 4);
  *(void *)&v9[v20[8]] = *(void *)&v10[v20[8]];
  *(_OWORD *)&v9[v20[9]] = *(_OWORD *)&v10[v20[9]];
  v9[v20[10]] = v10[v20[10]];
  *(void *)&v9[v20[11]] = *(void *)&v10[v20[11]];
  *(void *)&v9[v20[12]] = *(void *)&v10[v20[12]];
  v9[v20[13]] = v10[v20[13]];
  uint64_t v28 = v20[14];
  uint64_t v29 = &v9[v28];
  long long v30 = &v10[v28];
  uint64_t v31 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
    __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v31);
  }
  uint64_t v33 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v34 = *(int *)(v33 + 20);
  long long v35 = &v29[v34];
  long long v36 = &v30[v34];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v30[v34], 1, v31))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v35, v36, v31);
    __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v31);
  }
  v29[*(int *)(v33 + 24)] = v30[*(int *)(v33 + 24)];
  v9[v20[15]] = v10[v20[15]];
  *(void *)&v9[v20[16]] = *(void *)&v10[v20[16]];
  *(void *)(a1 + *(int *)(v39 + 24)) = *(void *)(v40 + *(int *)(v39 + 24));
  return a1;
}

uint64_t assignWithTake for CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v56 = a1;
  if (a1 != a2)
  {
    outlined destroy of CaptionSectioner.Caption();
    uint64_t v11 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v19 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v9, v10, v19);
        goto LABEL_5;
      case 4u:
        uint64_t v12 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&v9[*(int *)(v13 + 48)], &v10[*(int *)(v13 + 48)], 0x150uLL);
        uint64_t v14 = *(int *)(v13 + 64);
        uint64_t v15 = &v9[v14];
        uint64_t v16 = &v10[v14];
        long long v17 = *((_OWORD *)v16 + 1);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
        *((_OWORD *)v15 + 1) = v17;
        long long v18 = *((_OWORD *)v16 + 3);
        *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
        *((_OWORD *)v15 + 3) = v18;
LABEL_5:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        break;
    }
  }
  uint64_t v20 = (int *)type metadata accessor for Participant(0);
  v7((uint64_t)&v9[v20[5]], (uint64_t)&v10[v20[5]], v6);
  uint64_t v21 = v20[6];
  size_t v22 = &v9[v21];
  size_t v23 = &v10[v21];
  *size_t v22 = *v23;
  v22[1] = v23[1];
  v22[2] = v23[2];
  v22[3] = v23[3];
  v22[4] = v23[4];
  uint64_t v24 = v20[7];
  uint64_t v25 = (uint64_t)&v9[v24];
  long long v26 = &v10[v24];
  long long v27 = *(void **)&v9[v24];
  if (v27)
  {
    if (*(void *)v26)
    {
      *(void *)uint64_t v25 = *(void *)v26;

      *(void *)(v25 + 8) = *((void *)v26 + 1);
      *(unsigned char *)(v25 + 16) = v26[16];
      uint64_t v28 = *((void *)v26 + 4);
      *(void *)(v25 + 24) = *((void *)v26 + 3);
      *(void *)(v25 + 32) = v28;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Participant.RemoteIdentifiers(v25);
  }
  long long v29 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v29;
  *(void *)(v25 + 32) = *((void *)v26 + 4);
LABEL_11:
  *(void *)&v9[v20[8]] = *(void *)&v10[v20[8]];
  swift_bridgeObjectRelease();
  uint64_t v30 = v20[9];
  uint64_t v31 = &v9[v30];
  uint64_t v32 = &v10[v30];
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = v34;
  *((void *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  v9[v20[10]] = v10[v20[10]];
  *(void *)&v9[v20[11]] = *(void *)&v10[v20[11]];
  swift_bridgeObjectRelease();
  uint64_t v35 = v20[12];
  long long v36 = *(void **)&v9[v35];
  *(void *)&v9[v35] = *(void *)&v10[v35];

  v9[v20[13]] = v10[v20[13]];
  uint64_t v37 = v20[14];
  uint64_t v38 = &v9[v37];
  uint64_t v39 = &v10[v37];
  uint64_t v40 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v38, 1, v40);
  int v42 = __swift_getEnumTagSinglePayload((uint64_t)v39, 1, v40);
  if (EnumTagSinglePayload)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
      __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v40);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v43 = *(void *)(v40 - 8);
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v40);
LABEL_16:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v38, v39, v40);
LABEL_17:
  uint64_t v45 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v46 = *(int *)(v45 + 20);
  uint64_t v47 = &v38[v46];
  uint64_t v48 = &v39[v46];
  int v49 = __swift_getEnumTagSinglePayload((uint64_t)&v38[v46], 1, v40);
  int v50 = __swift_getEnumTagSinglePayload((uint64_t)v48, 1, v40);
  if (!v49)
  {
    uint64_t v51 = *(void *)(v40 - 8);
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v47, v48, v40);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v40);
    goto LABEL_22;
  }
  if (v50)
  {
LABEL_22:
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v47, v48, v40);
  __swift_storeEnumTagSinglePayload((uint64_t)v47, 0, 1, v40);
LABEL_23:
  v38[*(int *)(v45 + 24)] = v39[*(int *)(v45 + 24)];
  v9[v20[15]] = v10[v20[15]];
  *(void *)&v9[v20[16]] = *(void *)&v10[v20[16]];
  swift_release();
  *(void *)(v56 + *(int *)(v54 + 24)) = *(void *)(v55 + *(int *)(v54 + 24));
  swift_bridgeObjectRelease();
  return v56;
}

uint64_t getEnumTagSinglePayload for CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C305A5AC);
}

uint64_t sub_1C305A5AC()
{
  uint64_t v3 = OUTLINED_FUNCTION_55_1();
  type metadata accessor for CaptionSectioner.SectionID(v3);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v5 + 84) == v0)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v1;
  }
  else
  {
    type metadata accessor for Participant(0);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) != v0) {
      return OUTLINED_FUNCTION_46_0(*(void *)(v1 + *(int *)(v2 + 24)));
    }
    uint64_t v6 = v8;
    uint64_t v7 = v1 + *(int *)(v2 + 20);
  }
  return __swift_getEnumTagSinglePayload(v7, v0, v6);
}

uint64_t storeEnumTagSinglePayload for CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C305A65C);
}

void sub_1C305A65C()
{
  uint64_t v4 = OUTLINED_FUNCTION_30_6();
  type metadata accessor for CaptionSectioner.SectionID(v4);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v1;
  }
  else
  {
    type metadata accessor for Participant(0);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v10 + 84) != v3)
    {
      *(void *)(v1 + *(int *)(v2 + 24)) = (v0 - 1);
      return;
    }
    uint64_t v7 = v9;
    uint64_t v8 = v1 + *(int *)(v2 + 20);
  }
  __swift_storeEnumTagSinglePayload(v8, v0, v0, v7);
}

uint64_t type metadata completion function for CaptionSectioner.SpeakerSection()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Participant(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for CaptionSectioner.CaptionID()
{
}

uint64_t initializeBufferWithCopyOfBuffer for CaptionSectioner.SectionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for CaptionSectioner.SectionID(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for CaptionSectioner.SectionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for CaptionSectioner.SectionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for CaptionSectioner.SectionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for CaptionSectioner.SectionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CaptionSectioner.SectionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C305AA50);
}

uint64_t sub_1C305AA50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CaptionSectioner.SectionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C305AAAC);
}

uint64_t sub_1C305AAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CaptionSectioner.SectionID()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for FindMatchByWalking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 80);
}

uint64_t destroy for FindMatchByWalking()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FindMatchByWalking(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for FindMatchByWalking(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FindMatchByWalking(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FindMatchByWalking(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FindMatchByWalking(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for FindMatchByWalking()
{
  return swift_getGenericMetadata();
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  uint64_t v0 = OUTLINED_FUNCTION_7_24();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_32();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1C8774500);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v126 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v119 = *(void *)(v126 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v126);
  unint64_t v116 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  long long v127 = (char *)&v110 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  long long v123 = (char *)&v110 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v122 = (char *)&v110 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v11) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v11, 1, a1);
      }
      return;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  Swift::Int v13 = v12;
  uint64_t v112 = specialized static Array._allocateUninitialized(_:)(v11 / 2);
  uint64_t v113 = v11;
  unint64_t v118 = v14;
  if (v11 <= 0)
  {
    long long v17 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v52 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_101:
    if (v52 < 2) {
      goto LABEL_115;
    }
    uint64_t v103 = *a1;
    while (1)
    {
      unint64_t v104 = v52 - 2;
      if (v52 < 2) {
        break;
      }
      if (!v103) {
        goto LABEL_147;
      }
      id v105 = v17;
      uint64_t v106 = *(void *)&v17[16 * v104 + 32];
      uint64_t v107 = *(void *)&v17[16 * v52 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v103 + *(void *)(v119 + 72) * v106, v103 + *(void *)(v119 + 72) * *(void *)&v17[16 * v52 + 16], v103 + *(void *)(v119 + 72) * v107, v118);
      if (v2) {
        goto LABEL_113;
      }
      if (v107 < v106) {
        goto LABEL_134;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v105 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
      }
      if (v104 >= *((void *)v105 + 2)) {
        goto LABEL_135;
      }
      uint64_t v108 = &v105[16 * v104 + 32];
      *(void *)uint64_t v108 = v106;
      *((void *)v108 + 1) = v107;
      unint64_t v109 = *((void *)v105 + 2);
      if (v52 > v109) {
        goto LABEL_136;
      }
      memmove(&v105[16 * v52 + 16], &v105[16 * v52 + 32], 16 * (v109 - v52));
      *((void *)v105 + 2) = v109 - 1;
      unint64_t v52 = v109 - 1;
      long long v17 = v105;
      if (v109 <= 2) {
        goto LABEL_115;
      }
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  Swift::Int v15 = v11;
  Swift::Int v111 = v13;
  Swift::Int v16 = 0;
  long long v17 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v18 = v15;
  long long v125 = a1;
  while (1)
  {
    uint64_t v19 = v16;
    Swift::Int v20 = v16 + 1;
    if (v16 + 1 >= v18)
    {
      Swift::Int v25 = v16 + 1;
    }
    else
    {
      uint64_t v21 = *a1;
      uint64_t v22 = *(void *)(v119 + 72);
      uint64_t v117 = v19;
      uint64_t v23 = v22;
      uint64_t v120 = v21;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      LODWORD(v124) = static Date.< infix(_:_:)();
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      uint64_t v24 = v23;
      uint64_t v19 = v117;
      Swift::Int v25 = v117 + 2;
      uint64_t v128 = v24;
      if (v117 + 2 < v18)
      {
        id v114 = v17;
        uint64_t v121 = v24 * v20;
        uint64_t v26 = v120;
        while (1)
        {
          Swift::Int v27 = v25;
          _s15ConversationKit11ParticipantVWOcTm_0();
          _s15ConversationKit11ParticipantVWOcTm_0();
          int v28 = static Date.< infix(_:_:)();
          outlined destroy of CaptionSectioner.Caption();
          outlined destroy of CaptionSectioner.Caption();
          if ((v124 ^ v28)) {
            break;
          }
          Swift::Int v25 = v27 + 1;
          v26 += v128;
          if (v27 + 1 >= v18)
          {
            Swift::Int v25 = v18;
            long long v17 = v114;
            a1 = v125;
            uint64_t v19 = v117;
            goto LABEL_12;
          }
        }
        long long v17 = v114;
        a1 = v125;
        Swift::Int v25 = v27;
        uint64_t v19 = v117;
      }
LABEL_12:
      if (v124)
      {
        if (v25 < v19) {
          goto LABEL_140;
        }
        if (v19 < v25)
        {
          uint64_t v121 = v18;
          id v114 = v17;
          uint64_t v29 = 0;
          uint64_t v30 = v128;
          uint64_t v31 = v128 * (v25 - 1);
          uint64_t v32 = v19;
          uint64_t v33 = v25 * v128;
          uint64_t v34 = v32;
          uint64_t v35 = v32 * v128;
          do
          {
            if (v34 != v25 + v29 - 1)
            {
              uint64_t v36 = v120;
              if (!v120) {
                goto LABEL_146;
              }
              unint64_t v37 = v120 + v35;
              Swift::Int v124 = v120 + v31;
              outlined init with take of Participant();
              if (v35 < v31 || v37 >= v36 + v33)
              {
                swift_arrayInitWithTakeFrontToBack();
                uint64_t v30 = v128;
              }
              else
              {
                uint64_t v30 = v128;
                if (v35 != v31) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              outlined init with take of Participant();
            }
            ++v34;
            --v29;
            v31 -= v30;
            v33 -= v30;
            v35 += v30;
          }
          while (v34 < v25 + v29);
          long long v17 = v114;
          a1 = v125;
          uint64_t v19 = v117;
          Swift::Int v18 = v121;
        }
      }
    }
    if (v25 < v18)
    {
      if (__OFSUB__(v25, v19)) {
        goto LABEL_138;
      }
      if (v25 - v19 < v111)
      {
        if (__OFADD__(v19, v111)) {
          goto LABEL_141;
        }
        if (v19 + v111 >= v18) {
          Swift::Int v39 = v18;
        }
        else {
          Swift::Int v39 = v19 + v111;
        }
        if (v39 < v19) {
          goto LABEL_142;
        }
        if (v25 != v39)
        {
          uint64_t v117 = v19;
          id v114 = v17;
          Swift::Int v115 = v39;
          uint64_t v110 = v2;
          uint64_t v40 = *(void *)(v119 + 72);
          uint64_t v41 = v40 * (v25 - 1);
          uint64_t v120 = v40;
          uint64_t v42 = v25 * v40;
          do
          {
            uint64_t v43 = 0;
            uint64_t v44 = v117;
            Swift::Int v124 = v25;
            uint64_t v121 = v42;
            while (1)
            {
              uint64_t v128 = v44;
              uint64_t v45 = v125;
              _s15ConversationKit11ParticipantVWOcTm_0();
              _s15ConversationKit11ParticipantVWOcTm_0();
              char v46 = static Date.< infix(_:_:)();
              outlined destroy of CaptionSectioner.Caption();
              outlined destroy of CaptionSectioner.Caption();
              if ((v46 & 1) == 0) {
                break;
              }
              if (!*v45) {
                goto LABEL_144;
              }
              uint64_t v47 = v121;
              outlined init with take of Participant();
              swift_arrayInitWithTakeFrontToBack();
              outlined init with take of Participant();
              v43 -= v120;
              uint64_t v44 = v128 + 1;
              Swift::Int v48 = v124;
              if (v124 == v128 + 1) {
                goto LABEL_45;
              }
            }
            Swift::Int v48 = v124;
            uint64_t v47 = v121;
LABEL_45:
            Swift::Int v25 = v48 + 1;
            v41 += v120;
            uint64_t v42 = v47 + v120;
          }
          while (v25 != v115);
          Swift::Int v25 = v115;
          uint64_t v2 = v110;
          long long v17 = v114;
          a1 = v125;
          uint64_t v19 = v117;
        }
      }
    }
    if (v25 < v19) {
      goto LABEL_137;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v124 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v51 = *((void *)v17 + 2);
    unint64_t v50 = *((void *)v17 + 3);
    unint64_t v52 = v51 + 1;
    if (v51 >= v50 >> 1) {
      long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v52;
    long long v53 = v17 + 32;
    uint64_t v54 = &v17[16 * v51 + 32];
    Swift::Int v55 = v124;
    *(void *)uint64_t v54 = v19;
    *((void *)v54 + 1) = v55;
    if (v51) {
      break;
    }
    unint64_t v52 = 1;
LABEL_95:
    Swift::Int v18 = a1[1];
    Swift::Int v16 = v124;
    if (v124 >= v18) {
      goto LABEL_101;
    }
  }
  while (1)
  {
    unint64_t v56 = v52 - 1;
    if (v52 >= 4)
    {
      uint64_t v61 = &v53[16 * v52];
      uint64_t v62 = *((void *)v61 - 8);
      uint64_t v63 = *((void *)v61 - 7);
      BOOL v67 = __OFSUB__(v63, v62);
      uint64_t v64 = v63 - v62;
      if (v67) {
        goto LABEL_122;
      }
      uint64_t v66 = *((void *)v61 - 6);
      uint64_t v65 = *((void *)v61 - 5);
      BOOL v67 = __OFSUB__(v65, v66);
      uint64_t v59 = v65 - v66;
      char v60 = v67;
      if (v67) {
        goto LABEL_123;
      }
      unint64_t v68 = v52 - 2;
      uint64_t v69 = &v53[16 * v52 - 32];
      uint64_t v71 = *(void *)v69;
      uint64_t v70 = *((void *)v69 + 1);
      BOOL v67 = __OFSUB__(v70, v71);
      uint64_t v72 = v70 - v71;
      if (v67) {
        goto LABEL_124;
      }
      BOOL v67 = __OFADD__(v59, v72);
      uint64_t v73 = v59 + v72;
      if (v67) {
        goto LABEL_126;
      }
      if (v73 >= v64)
      {
        uint64_t v91 = &v53[16 * v56];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v67 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v67) {
          goto LABEL_132;
        }
        BOOL v84 = v59 < v94;
        goto LABEL_84;
      }
    }
    else
    {
      if (v52 != 3)
      {
        uint64_t v85 = *((void *)v17 + 4);
        uint64_t v86 = *((void *)v17 + 5);
        BOOL v67 = __OFSUB__(v86, v85);
        uint64_t v78 = v86 - v85;
        char v79 = v67;
        goto LABEL_78;
      }
      uint64_t v58 = *((void *)v17 + 4);
      uint64_t v57 = *((void *)v17 + 5);
      BOOL v67 = __OFSUB__(v57, v58);
      uint64_t v59 = v57 - v58;
      char v60 = v67;
    }
    if (v60) {
      goto LABEL_125;
    }
    unint64_t v68 = v52 - 2;
    int v74 = &v53[16 * v52 - 32];
    uint64_t v76 = *(void *)v74;
    uint64_t v75 = *((void *)v74 + 1);
    BOOL v77 = __OFSUB__(v75, v76);
    uint64_t v78 = v75 - v76;
    char v79 = v77;
    if (v77) {
      goto LABEL_127;
    }
    uint64_t v80 = &v53[16 * v56];
    uint64_t v82 = *(void *)v80;
    uint64_t v81 = *((void *)v80 + 1);
    BOOL v67 = __OFSUB__(v81, v82);
    uint64_t v83 = v81 - v82;
    if (v67) {
      goto LABEL_129;
    }
    if (__OFADD__(v78, v83)) {
      goto LABEL_131;
    }
    if (v78 + v83 >= v59)
    {
      BOOL v84 = v59 < v83;
LABEL_84:
      if (v84) {
        unint64_t v56 = v68;
      }
      goto LABEL_86;
    }
LABEL_78:
    if (v79) {
      goto LABEL_128;
    }
    UIMenuElementSize v87 = &v53[16 * v56];
    uint64_t v89 = *(void *)v87;
    uint64_t v88 = *((void *)v87 + 1);
    BOOL v67 = __OFSUB__(v88, v89);
    uint64_t v90 = v88 - v89;
    if (v67) {
      goto LABEL_130;
    }
    if (v90 < v78) {
      goto LABEL_95;
    }
LABEL_86:
    unint64_t v95 = v56 - 1;
    if (v56 - 1 >= v52)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    uint64_t v96 = *a1;
    if (!*a1) {
      goto LABEL_145;
    }
    uint64_t v97 = v17;
    id v98 = &v53[16 * v95];
    uint64_t v99 = *(void *)v98;
    uint64_t v100 = &v53[16 * v56];
    uint64_t v101 = *((void *)v100 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)(v96 + *(void *)(v119 + 72) * *(void *)v98, v96 + *(void *)(v119 + 72) * *(void *)v100, v96 + *(void *)(v119 + 72) * v101, v118);
    if (v2) {
      break;
    }
    if (v101 < v99) {
      goto LABEL_119;
    }
    if (v56 > *((void *)v97 + 2)) {
      goto LABEL_120;
    }
    *(void *)id v98 = v99;
    *(void *)&v53[16 * v95 + 8] = v101;
    unint64_t v102 = *((void *)v97 + 2);
    if (v56 >= v102) {
      goto LABEL_121;
    }
    long long v17 = v97;
    unint64_t v52 = v102 - 1;
    memmove(&v53[16 * v56], v100 + 16, 16 * (v102 - 1 - v56));
    *((void *)v97 + 2) = v102 - 1;
    a1 = v125;
    if (v102 <= 2) {
      goto LABEL_95;
    }
  }
LABEL_113:
  swift_bridgeObjectRelease();
  if (v113 >= -1) {
    goto LABEL_116;
  }
  __break(1u);
LABEL_115:
  swift_bridgeObjectRelease();
  if (v113 >= -1)
  {
LABEL_116:
    *(void *)(v112 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  char *v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  Swift::Int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  uint64_t v2 = v1;
  uint64_t v142 = type metadata accessor for TranscriptionViewModel.Caption(0);
  uint64_t v135 = *(void *)(v142 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v142);
  uint64_t v132 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v143 = (uint64_t)&v126 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v139 = (uint64_t)&v126 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v138 = (uint64_t)&v126 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v11) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v11, 1, a1);
      }
      return;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  Swift::Int v13 = v12;
  long long v129 = specialized static Array._allocateUninitialized(_:)(v11 / 2);
  uint64_t v130 = v11;
  uint64_t v134 = v14;
  if (v11 <= 0)
  {
    long long v17 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v68 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_101:
    if (v68 < 2) {
      goto LABEL_115;
    }
    uint64_t v119 = *a1;
    while (1)
    {
      uint64_t v120 = v68 - 2;
      if (v68 < 2) {
        break;
      }
      if (!v119) {
        goto LABEL_147;
      }
      uint64_t v121 = v17;
      uint64_t v122 = *(void *)&v17[16 * v120 + 32];
      long long v123 = *(void *)&v17[16 * v68 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v119 + *(void *)(v135 + 72) * v122, v119 + *(void *)(v135 + 72) * *(void *)&v17[16 * v68 + 16], v119 + *(void *)(v135 + 72) * v123, v134);
      if (v2) {
        goto LABEL_113;
      }
      if (v123 < v122) {
        goto LABEL_134;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
      }
      if (v120 >= *((void *)v121 + 2)) {
        goto LABEL_135;
      }
      Swift::Int v124 = &v121[16 * v120 + 32];
      *(void *)Swift::Int v124 = v122;
      *((void *)v124 + 1) = v123;
      long long v125 = *((void *)v121 + 2);
      if (v68 > v125) {
        goto LABEL_136;
      }
      memmove(&v121[16 * v68 + 16], &v121[16 * v68 + 32], 16 * (v125 - v68));
      *((void *)v121 + 2) = v125 - 1;
      unint64_t v68 = v125 - 1;
      long long v17 = v121;
      if (v125 <= 2) {
        goto LABEL_115;
      }
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  Swift::Int v15 = v11;
  uint64_t v128 = v13;
  Swift::Int v16 = 0;
  long long v17 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v18 = v15;
  uint64_t v141 = a1;
  while (1)
  {
    uint64_t v19 = v16;
    Swift::Int v20 = v16 + 1;
    if (v16 + 1 >= v18)
    {
      uint64_t v30 = v16 + 1;
    }
    else
    {
      uint64_t v21 = *a1;
      uint64_t v22 = *(void *)(v135 + 72);
      uint64_t v23 = *a1 + v22 * v20;
      uint64_t v133 = v19;
      uint64_t v24 = v22;
      Swift::Int v25 = v21;
      uint64_t v131 = v21;
      uint64_t v26 = v138;
      outlined init with copy of Participant.Caption(v23, v138, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      Swift::Int v27 = v25 + v24 * v133;
      int v28 = v139;
      outlined init with copy of Participant.Caption(v27, v139, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      LODWORD(v140) = static Date.< infix(_:_:)();
      outlined destroy of Participant.Caption(v28, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      outlined destroy of Participant.Caption(v26, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      uint64_t v29 = v24;
      uint64_t v19 = v133;
      uint64_t v30 = v133 + 2;
      uint64_t v144 = v29;
      if (v133 + 2 < v18)
      {
        uint64_t v31 = v131;
        uint64_t v136 = v29 * v30;
        uint64_t v137 = v29 * v20;
        while (1)
        {
          uint64_t v32 = v18;
          uint64_t v33 = v30;
          uint64_t v34 = v138;
          outlined init with copy of Participant.Caption(v31 + v136, v138, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
          uint64_t v35 = v139;
          outlined init with copy of Participant.Caption(v31 + v137, v139, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
          uint64_t v36 = static Date.< infix(_:_:)();
          outlined destroy of Participant.Caption(v35, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
          outlined destroy of Participant.Caption(v34, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
          if ((v140 ^ v36)) {
            break;
          }
          ++v30;
          v31 += v144;
          Swift::Int v18 = v32;
          if (v33 + 1 >= v32)
          {
            uint64_t v30 = v32;
            a1 = v141;
            uint64_t v19 = v133;
            goto LABEL_12;
          }
        }
        a1 = v141;
        uint64_t v19 = v133;
        Swift::Int v18 = v32;
      }
LABEL_12:
      if (v140)
      {
        if (v30 < v19) {
          goto LABEL_140;
        }
        if (v19 < v30)
        {
          uint64_t v137 = v18;
          long long v127 = v17;
          unint64_t v37 = 0;
          uint64_t v38 = v144;
          Swift::Int v39 = v144 * (v30 - 1);
          uint64_t v40 = v19;
          uint64_t v41 = v30 * v144;
          uint64_t v42 = v40;
          uint64_t v43 = v40 * v144;
          do
          {
            if (v42 != v30 + v37 - 1)
            {
              uint64_t v44 = v30;
              uint64_t v45 = v131;
              if (!v131) {
                goto LABEL_146;
              }
              char v46 = v131 + v43;
              uint64_t v140 = v131 + v39;
              outlined init with take of TranscriptionViewModel.Caption(v131 + v43, v132);
              if (v43 < v39 || v46 >= v45 + v41)
              {
                Swift::Int v48 = v140;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                Swift::Int v48 = v140;
                if (v43 != v39) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              outlined init with take of TranscriptionViewModel.Caption(v132, v48);
              uint64_t v30 = v44;
              uint64_t v38 = v144;
            }
            ++v42;
            --v37;
            v39 -= v38;
            v41 -= v38;
            v43 += v38;
          }
          while (v42 < v30 + v37);
          long long v17 = v127;
          a1 = v141;
          uint64_t v19 = v133;
          Swift::Int v18 = v137;
        }
      }
    }
    if (v30 < v18)
    {
      if (__OFSUB__(v30, v19)) {
        goto LABEL_138;
      }
      if (v30 - v19 < v128)
      {
        if (__OFADD__(v19, v128)) {
          goto LABEL_141;
        }
        if (v19 + v128 >= v18) {
          int v49 = v18;
        }
        else {
          int v49 = v19 + v128;
        }
        if (v49 < v19) {
          goto LABEL_142;
        }
        if (v30 != v49)
        {
          uint64_t v133 = v19;
          uint64_t v126 = v2;
          long long v127 = v17;
          unint64_t v50 = *(void *)(v135 + 72);
          unint64_t v51 = v50 * (v30 - 1);
          uint64_t v136 = v50;
          unint64_t v52 = v30 * v50;
          uint64_t v131 = v49;
          do
          {
            long long v53 = 0;
            uint64_t v54 = v133;
            uint64_t v140 = v30;
            uint64_t v137 = v52;
            while (1)
            {
              uint64_t v144 = v54;
              Swift::Int v55 = v141;
              unint64_t v56 = *v141;
              uint64_t v57 = v52 + v53 + *v141;
              uint64_t v58 = v138;
              outlined init with copy of Participant.Caption(v57, v138, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
              uint64_t v59 = v51;
              char v60 = v51 + v53 + v56;
              uint64_t v61 = v139;
              outlined init with copy of Participant.Caption(v60, v139, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
              LOBYTE(v56) = static Date.< infix(_:_:)();
              outlined destroy of Participant.Caption(v61, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
              outlined destroy of Participant.Caption(v58, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
              if ((v56 & 1) == 0) {
                break;
              }
              uint64_t v62 = *v55;
              if (!*v55) {
                goto LABEL_144;
              }
              unint64_t v52 = v137;
              unint64_t v51 = v59;
              uint64_t v63 = v62 + v59 + v53;
              outlined init with take of TranscriptionViewModel.Caption(v62 + v137 + v53, v143);
              swift_arrayInitWithTakeFrontToBack();
              outlined init with take of TranscriptionViewModel.Caption(v143, v63);
              v53 -= v136;
              uint64_t v54 = v144 + 1;
              uint64_t v64 = v140;
              if (v140 == v144 + 1) {
                goto LABEL_45;
              }
            }
            uint64_t v64 = v140;
            unint64_t v51 = v59;
            unint64_t v52 = v137;
LABEL_45:
            uint64_t v30 = v64 + 1;
            v51 += v136;
            v52 += v136;
          }
          while (v30 != v131);
          uint64_t v30 = v131;
          uint64_t v2 = v126;
          long long v17 = v127;
          a1 = v141;
          uint64_t v19 = v133;
        }
      }
    }
    if (v30 < v19) {
      goto LABEL_137;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v140 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    BOOL v67 = *((void *)v17 + 2);
    uint64_t v66 = *((void *)v17 + 3);
    unint64_t v68 = v67 + 1;
    if (v67 >= v66 >> 1) {
      long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v68;
    uint64_t v69 = v17 + 32;
    uint64_t v70 = &v17[16 * v67 + 32];
    uint64_t v71 = v140;
    *(void *)uint64_t v70 = v19;
    *((void *)v70 + 1) = v71;
    if (v67) {
      break;
    }
    unint64_t v68 = 1;
LABEL_95:
    Swift::Int v18 = a1[1];
    Swift::Int v16 = v140;
    if (v140 >= v18) {
      goto LABEL_101;
    }
  }
  while (1)
  {
    uint64_t v72 = v68 - 1;
    if (v68 >= 4)
    {
      BOOL v77 = &v69[16 * v68];
      uint64_t v78 = *((void *)v77 - 8);
      char v79 = *((void *)v77 - 7);
      uint64_t v83 = __OFSUB__(v79, v78);
      uint64_t v80 = v79 - v78;
      if (v83) {
        goto LABEL_122;
      }
      uint64_t v82 = *((void *)v77 - 6);
      uint64_t v81 = *((void *)v77 - 5);
      uint64_t v83 = __OFSUB__(v81, v82);
      uint64_t v75 = v81 - v82;
      uint64_t v76 = v83;
      if (v83) {
        goto LABEL_123;
      }
      BOOL v84 = v68 - 2;
      uint64_t v85 = &v69[16 * v68 - 32];
      UIMenuElementSize v87 = *(void *)v85;
      uint64_t v86 = *((void *)v85 + 1);
      uint64_t v83 = __OFSUB__(v86, v87);
      uint64_t v88 = v86 - v87;
      if (v83) {
        goto LABEL_124;
      }
      uint64_t v83 = __OFADD__(v75, v88);
      uint64_t v89 = v75 + v88;
      if (v83) {
        goto LABEL_126;
      }
      if (v89 >= v80)
      {
        uint64_t v107 = &v69[16 * v72];
        unint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        uint64_t v83 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v83) {
          goto LABEL_132;
        }
        uint64_t v100 = v75 < v110;
        goto LABEL_84;
      }
    }
    else
    {
      if (v68 != 3)
      {
        uint64_t v101 = *((void *)v17 + 4);
        unint64_t v102 = *((void *)v17 + 5);
        uint64_t v83 = __OFSUB__(v102, v101);
        uint64_t v94 = v102 - v101;
        unint64_t v95 = v83;
        goto LABEL_78;
      }
      int v74 = *((void *)v17 + 4);
      uint64_t v73 = *((void *)v17 + 5);
      uint64_t v83 = __OFSUB__(v73, v74);
      uint64_t v75 = v73 - v74;
      uint64_t v76 = v83;
    }
    if (v76) {
      goto LABEL_125;
    }
    BOOL v84 = v68 - 2;
    uint64_t v90 = &v69[16 * v68 - 32];
    uint64_t v92 = *(void *)v90;
    uint64_t v91 = *((void *)v90 + 1);
    uint64_t v93 = __OFSUB__(v91, v92);
    uint64_t v94 = v91 - v92;
    unint64_t v95 = v93;
    if (v93) {
      goto LABEL_127;
    }
    uint64_t v96 = &v69[16 * v72];
    id v98 = *(void *)v96;
    uint64_t v97 = *((void *)v96 + 1);
    uint64_t v83 = __OFSUB__(v97, v98);
    uint64_t v99 = v97 - v98;
    if (v83) {
      goto LABEL_129;
    }
    if (__OFADD__(v94, v99)) {
      goto LABEL_131;
    }
    if (v94 + v99 >= v75)
    {
      uint64_t v100 = v75 < v99;
LABEL_84:
      if (v100) {
        uint64_t v72 = v84;
      }
      goto LABEL_86;
    }
LABEL_78:
    if (v95) {
      goto LABEL_128;
    }
    uint64_t v103 = &v69[16 * v72];
    id v105 = *(void *)v103;
    unint64_t v104 = *((void *)v103 + 1);
    uint64_t v83 = __OFSUB__(v104, v105);
    uint64_t v106 = v104 - v105;
    if (v83) {
      goto LABEL_130;
    }
    if (v106 < v94) {
      goto LABEL_95;
    }
LABEL_86:
    Swift::Int v111 = v72 - 1;
    if (v72 - 1 >= v68)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    uint64_t v112 = *a1;
    if (!*a1) {
      goto LABEL_145;
    }
    uint64_t v113 = v17;
    id v114 = &v69[16 * v111];
    Swift::Int v115 = *(void *)v114;
    unint64_t v116 = &v69[16 * v72];
    uint64_t v117 = *((void *)v116 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)(v112 + *(void *)(v135 + 72) * *(void *)v114, v112 + *(void *)(v135 + 72) * *(void *)v116, v112 + *(void *)(v135 + 72) * v117, v134);
    if (v2) {
      break;
    }
    if (v117 < v115) {
      goto LABEL_119;
    }
    if (v72 > *((void *)v113 + 2)) {
      goto LABEL_120;
    }
    *(void *)id v114 = v115;
    *(void *)&v69[16 * v111 + 8] = v117;
    unint64_t v118 = *((void *)v113 + 2);
    if (v72 >= v118) {
      goto LABEL_121;
    }
    long long v17 = v113;
    unint64_t v68 = v118 - 1;
    memmove(&v69[16 * v72], v116 + 16, 16 * (v118 - 1 - v72));
    *((void *)v113 + 2) = v118 - 1;
    a1 = v141;
    if (v118 <= 2) {
      goto LABEL_95;
    }
  }
LABEL_113:
  swift_bridgeObjectRelease();
  if (v130 >= -1) {
    goto LABEL_116;
  }
  __break(1u);
LABEL_115:
  swift_bridgeObjectRelease();
  if (v130 >= -1)
  {
LABEL_116:
    *(void *)(v129 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t active;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Swift::Int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;

  uint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
      }
      return;
    }
    goto LABEL_131;
  }
  uint64_t v121 = v4;
  uint64_t v128 = v1;
  uint64_t v119 = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v120 = v3;
  long long v125 = v5;
  if (v3 < 1)
  {
    uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v52 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_94:
    if (v52 < 2)
    {
LABEL_105:
      swift_bridgeObjectRelease();
      if (v120 >= -1)
      {
        *(void *)(v119 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_136;
    }
    unint64_t v109 = *v2;
    while (1)
    {
      uint64_t v110 = v52 - 2;
      if (v52 < 2) {
        break;
      }
      if (!v109) {
        goto LABEL_139;
      }
      uint64_t v126 = v7;
      Swift::Int v111 = *(void *)&v7[16 * v110 + 32];
      uint64_t v112 = *(void *)&v7[16 * v52 + 24];
      uint64_t v113 = *(void *)&v7[16 * v52 + 16];
      id v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      Swift::Int v115 = v128;
      specialized _merge<A>(low:mid:high:buffer:by:)(v109 + *(void *)(*(void *)(v114 - 8) + 72) * v111, v109 + *(void *)(*(void *)(v114 - 8) + 72) * v113, v109 + *(void *)(*(void *)(v114 - 8) + 72) * v112, v125);
      uint64_t v128 = v115;
      if (v115) {
        goto LABEL_107;
      }
      if (v112 < v111) {
        goto LABEL_126;
      }
      uint64_t v7 = v126;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
      }
      if (v110 >= *((void *)v7 + 2)) {
        goto LABEL_127;
      }
      unint64_t v116 = &v7[16 * v110 + 32];
      *(void *)unint64_t v116 = v111;
      *((void *)v116 + 1) = v112;
      uint64_t v117 = *((void *)v7 + 2);
      if (v52 > v117) {
        goto LABEL_128;
      }
      memmove(&v7[16 * v52 + 16], &v7[16 * v52 + 32], 16 * (v117 - v52));
      *((void *)v7 + 2) = v117 - 1;
      unint64_t v52 = v117 - 1;
      if (v117 <= 2) {
        goto LABEL_105;
      }
    }
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v8 = v3;
  uint64_t v133 = v2;
  while (1)
  {
    uint64_t v126 = v7;
    long long v127 = v8;
    uint64_t v9 = v6;
    uint64_t v10 = v6 + 1;
    long long v129 = v6;
    if (v6 + 1 >= v8)
    {
      ++v6;
    }
    else
    {
      Swift::Int v11 = *v2;
      Swift::Int v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      uint64_t v132 = &v119;
      Swift::Int v13 = *(uint64_t **)(*(void *)(v12 - 8) + 72);
      unint64_t v14 = *(uint64_t **)(*(void *)(v12 - 8) + 64);
      MEMORY[0x1F4188790](v11 + (void)v13 * v10);
      Swift::Int v15 = (char *)&v119 - (((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of Conversation?(v16, (uint64_t)v15, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      uint64_t v131 = v14;
      MEMORY[0x1F4188790](v11 + (void)v13 * v9);
      outlined init with copy of Conversation?(v17, (uint64_t)v15, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      Swift::Int v18 = *(int *)(v12 + 36);
      uint64_t v19 = *(float *)&v15[v18];
      uint64_t v130 = v12;
      Swift::Int v20 = *(int *)(v12 + 48);
      uint64_t v21 = v19 * *(float *)&v15[v20];
      uint64_t v22 = *(float *)&v15[v18] * *(float *)&v15[v20];
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      active = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      uint64_t v8 = v127;
      uint64_t v6 = v9 + 2;
      uint64_t v122 = v11;
      uint64_t v132 = v13;
      if (v9 + 2 < v127)
      {
        uint64_t v24 = v11;
        long long v123 = (uint64_t *)((void)v13 * v6);
        Swift::Int v124 = (void)v13 * v10;
        while (1)
        {
          Swift::Int v25 = v6;
          uint64_t v26 = v131;
          MEMORY[0x1F4188790]((char *)v123 + v24);
          Swift::Int v27 = (char *)&v119 - (((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of Conversation?(v28, (uint64_t)v27, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
          MEMORY[0x1F4188790](v24 + v124);
          outlined init with copy of Conversation?(v29, (uint64_t)v27, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v27, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
          active = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v27, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
          if (v22 < v21) {
            break;
          }
          uint64_t v6 = v25 + 1;
          Swift::Int v13 = v132;
          v24 += (uint64_t)v132;
          uint64_t v8 = v127;
          if (v6 >= v127)
          {
            uint64_t v6 = v127;
            uint64_t v9 = v129;
            goto LABEL_12;
          }
        }
        uint64_t v6 = v25;
        uint64_t v9 = v129;
        uint64_t v8 = v127;
        Swift::Int v13 = v132;
      }
LABEL_12:
      uint64_t v2 = v133;
      if (v22 < v21)
      {
        if (v6 < v9) {
          goto LABEL_133;
        }
        if (v9 < v6)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (void)v13 * (v6 - 1);
          uint64_t v32 = v6 * (void)v13;
          uint64_t v33 = v9;
          uint64_t v34 = v9 * (void)v13;
          do
          {
            if (v33 != v6 + v30 - 1)
            {
              uint64_t v35 = v122;
              if (!v122) {
                goto LABEL_138;
              }
              uint64_t v36 = v6;
              long long v123 = &v119;
              unint64_t v37 = v122 + v34;
              Swift::Int v124 = v122 + v31;
              MEMORY[0x1F4188790](active);
              Swift::Int v39 = (char *)&v119 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with take of MostActiveParticipantsController<UUID>.ActivityDetails(v35 + v34, (uint64_t)v39, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
              if (v34 < v31 || v37 >= v35 + v32)
              {
                swift_arrayInitWithTakeFrontToBack();
                Swift::Int v13 = v132;
              }
              else
              {
                Swift::Int v13 = v132;
                if (v34 != v31) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              active = outlined init with take of MostActiveParticipantsController<UUID>.ActivityDetails((uint64_t)v39, v124, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
              uint64_t v6 = v36;
            }
            ++v33;
            --v30;
            v31 -= (uint64_t)v13;
            v32 -= (uint64_t)v13;
            v34 += (uint64_t)v13;
          }
          while (v33 < v6 + v30);
          uint64_t v2 = v133;
          uint64_t v9 = v129;
          uint64_t v8 = v127;
        }
      }
    }
    if (v6 < v8)
    {
      if (__OFSUB__(v6, v9)) {
        goto LABEL_130;
      }
      if (v6 - v9 < v121)
      {
        uint64_t v41 = v9 + v121;
        if (__OFADD__(v9, v121)) {
          goto LABEL_134;
        }
        if (v41 >= v127) {
          uint64_t v41 = v127;
        }
        if (v41 < v9) {
          goto LABEL_135;
        }
        Swift::Int v124 = v41;
        if (v6 != v41)
        {
          do
          {
            long long v127 = v6;
            uint64_t v42 = v6;
            uint64_t v43 = *v2;
            uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
            uint64_t v132 = &v119;
            uint64_t v45 = *(void *)(*(void *)(v44 - 8) + 72);
            char v46 = *(void *)(*(void *)(v44 - 8) + 64);
            MEMORY[0x1F4188790](v43 + v45 * v6);
            uint64_t v47 = (char *)&v119 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of Conversation?(v48, (uint64_t)v47, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
            uint64_t v130 = v42 - 1;
            uint64_t v131 = &v119;
            MEMORY[0x1F4188790](v43 + v45 * (v42 - 1));
            outlined init with copy of Conversation?(v49, (uint64_t)v47, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v47, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
            outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v47, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
            uint64_t v2 = v133;
            uint64_t v9 = v129;
            uint64_t v6 = v127 + 1;
          }
          while (v127 + 1 != v124);
          uint64_t v6 = v124;
        }
      }
    }
    if (v6 < v9) {
      goto LABEL_129;
    }
    uint64_t v7 = v126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
    }
    unint64_t v51 = *((void *)v7 + 2);
    unint64_t v50 = *((void *)v7 + 3);
    unint64_t v52 = v51 + 1;
    if (v51 >= v50 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v52;
    long long v53 = v7 + 32;
    uint64_t v54 = &v7[16 * v51 + 32];
    *(void *)uint64_t v54 = v129;
    *((void *)v54 + 1) = v6;
    if (v51) {
      break;
    }
    unint64_t v52 = 1;
LABEL_88:
    uint64_t v8 = v2[1];
    if (v6 >= v8) {
      goto LABEL_94;
    }
  }
  uint64_t v126 = v7;
  long long v127 = v6;
  while (1)
  {
    Swift::Int v55 = v52 - 1;
    if (v52 >= 4)
    {
      char v60 = &v53[16 * v52];
      uint64_t v61 = *((void *)v60 - 8);
      uint64_t v62 = *((void *)v60 - 7);
      uint64_t v66 = __OFSUB__(v62, v61);
      uint64_t v63 = v62 - v61;
      if (v66) {
        goto LABEL_114;
      }
      uint64_t v65 = *((void *)v60 - 6);
      uint64_t v64 = *((void *)v60 - 5);
      uint64_t v66 = __OFSUB__(v64, v65);
      uint64_t v58 = v64 - v65;
      uint64_t v59 = v66;
      if (v66) {
        goto LABEL_115;
      }
      BOOL v67 = v52 - 2;
      unint64_t v68 = &v53[16 * v52 - 32];
      uint64_t v70 = *(void *)v68;
      uint64_t v69 = *((void *)v68 + 1);
      uint64_t v66 = __OFSUB__(v69, v70);
      uint64_t v71 = v69 - v70;
      if (v66) {
        goto LABEL_116;
      }
      uint64_t v66 = __OFADD__(v58, v71);
      uint64_t v72 = v58 + v71;
      if (v66) {
        goto LABEL_118;
      }
      if (v72 >= v63)
      {
        uint64_t v90 = &v53[16 * v55];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v66 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v66) {
          goto LABEL_124;
        }
        uint64_t v83 = v58 < v93;
        goto LABEL_77;
      }
    }
    else
    {
      if (v52 != 3)
      {
        BOOL v84 = *((void *)v7 + 4);
        uint64_t v85 = *((void *)v7 + 5);
        uint64_t v66 = __OFSUB__(v85, v84);
        BOOL v77 = v85 - v84;
        uint64_t v78 = v66;
        goto LABEL_71;
      }
      uint64_t v57 = *((void *)v7 + 4);
      unint64_t v56 = *((void *)v7 + 5);
      uint64_t v66 = __OFSUB__(v56, v57);
      uint64_t v58 = v56 - v57;
      uint64_t v59 = v66;
    }
    if (v59) {
      goto LABEL_117;
    }
    BOOL v67 = v52 - 2;
    uint64_t v73 = &v53[16 * v52 - 32];
    uint64_t v75 = *(void *)v73;
    int v74 = *((void *)v73 + 1);
    uint64_t v76 = __OFSUB__(v74, v75);
    BOOL v77 = v74 - v75;
    uint64_t v78 = v76;
    if (v76) {
      goto LABEL_119;
    }
    char v79 = &v53[16 * v55];
    uint64_t v81 = *(void *)v79;
    uint64_t v80 = *((void *)v79 + 1);
    uint64_t v66 = __OFSUB__(v80, v81);
    uint64_t v82 = v80 - v81;
    if (v66) {
      goto LABEL_121;
    }
    if (__OFADD__(v77, v82)) {
      goto LABEL_123;
    }
    if (v77 + v82 >= v58)
    {
      uint64_t v83 = v58 < v82;
LABEL_77:
      if (v83) {
        Swift::Int v55 = v67;
      }
      goto LABEL_79;
    }
LABEL_71:
    if (v78) {
      goto LABEL_120;
    }
    uint64_t v86 = &v53[16 * v55];
    uint64_t v88 = *(void *)v86;
    UIMenuElementSize v87 = *((void *)v86 + 1);
    uint64_t v66 = __OFSUB__(v87, v88);
    uint64_t v89 = v87 - v88;
    if (v66) {
      goto LABEL_122;
    }
    if (v89 < v77) {
      goto LABEL_88;
    }
LABEL_79:
    uint64_t v94 = v55 - 1;
    if (v55 - 1 >= v52)
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    unint64_t v95 = *v2;
    if (!*v2) {
      goto LABEL_137;
    }
    uint64_t v96 = v53;
    uint64_t v97 = &v53[16 * v94];
    id v98 = *(void *)v97;
    uint64_t v99 = v96;
    uint64_t v100 = v55;
    uint64_t v101 = &v96[16 * v55];
    unint64_t v102 = *(void *)v101;
    uint64_t v103 = *((void *)v101 + 1);
    unint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
    id v105 = v128;
    specialized _merge<A>(low:mid:high:buffer:by:)(v95 + *(void *)(*(void *)(v104 - 8) + 72) * v98, v95 + *(void *)(*(void *)(v104 - 8) + 72) * v102, v95 + *(void *)(*(void *)(v104 - 8) + 72) * v103, v125);
    if (v105) {
      break;
    }
    if (v103 < v98) {
      goto LABEL_111;
    }
    uint64_t v106 = v126;
    if (v100 > *((void *)v126 + 2)) {
      goto LABEL_112;
    }
    uint64_t v107 = v100;
    *(void *)uint64_t v97 = v98;
    *(void *)&v99[16 * v94 + 8] = v103;
    uint64_t v108 = *((void *)v106 + 2);
    if (v100 >= v108) {
      goto LABEL_113;
    }
    long long v53 = v99;
    uint64_t v7 = v106;
    uint64_t v128 = 0;
    unint64_t v52 = v108 - 1;
    memmove(v101, v101 + 16, 16 * (v108 - 1 - v107));
    *((void *)v106 + 2) = v108 - 1;
    uint64_t v2 = v133;
    uint64_t v6 = v127;
    if (v108 <= 2) {
      goto LABEL_88;
    }
  }
LABEL_107:
  unint64_t v118 = v120;
  swift_bridgeObjectRelease();
  if (v118 < -1) {
    goto LABEL_132;
  }
  *(void *)(v119 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  char *v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  Swift::Int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  uint64_t v2 = v1;
  uint64_t v142 = type metadata accessor for Participant(0);
  uint64_t v135 = *(void *)(v142 - 8);
  MEMORY[0x1F4188790](v142);
  uint64_t v132 = (uint64_t)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v143 = (uint64_t)&v126 - v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v139 = (uint64_t)&v126 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v138 = (uint64_t)&v126 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v11) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v11, 1, a1);
      }
      return;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  Swift::Int v13 = v12;
  long long v129 = specialized static Array._allocateUninitialized(_:)(v11 / 2);
  uint64_t v130 = v11;
  uint64_t v134 = v14;
  if (v11 <= 0)
  {
    long long v17 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v68 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_101:
    if (v68 < 2) {
      goto LABEL_115;
    }
    uint64_t v119 = *a1;
    while (1)
    {
      uint64_t v120 = v68 - 2;
      if (v68 < 2) {
        break;
      }
      if (!v119) {
        goto LABEL_147;
      }
      uint64_t v121 = v17;
      uint64_t v122 = *(void *)&v17[16 * v120 + 32];
      long long v123 = *(void *)&v17[16 * v68 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v119 + *(void *)(v135 + 72) * v122, v119 + *(void *)(v135 + 72) * *(void *)&v17[16 * v68 + 16], v119 + *(void *)(v135 + 72) * v123, v134);
      if (v2) {
        goto LABEL_113;
      }
      if (v123 < v122) {
        goto LABEL_134;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
      }
      if (v120 >= *((void *)v121 + 2)) {
        goto LABEL_135;
      }
      Swift::Int v124 = &v121[16 * v120 + 32];
      *(void *)Swift::Int v124 = v122;
      *((void *)v124 + 1) = v123;
      long long v125 = *((void *)v121 + 2);
      if (v68 > v125) {
        goto LABEL_136;
      }
      memmove(&v121[16 * v68 + 16], &v121[16 * v68 + 32], 16 * (v125 - v68));
      *((void *)v121 + 2) = v125 - 1;
      unint64_t v68 = v125 - 1;
      long long v17 = v121;
      if (v125 <= 2) {
        goto LABEL_115;
      }
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  Swift::Int v15 = v11;
  uint64_t v128 = v13;
  Swift::Int v16 = 0;
  long long v17 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v18 = v15;
  uint64_t v141 = a1;
  while (1)
  {
    uint64_t v19 = v16;
    Swift::Int v20 = v16 + 1;
    if (v16 + 1 >= v18)
    {
      uint64_t v30 = v16 + 1;
    }
    else
    {
      uint64_t v21 = *a1;
      uint64_t v22 = *(void *)(v135 + 72);
      uint64_t v23 = *a1 + v22 * v20;
      uint64_t v133 = v19;
      uint64_t v24 = v22;
      Swift::Int v25 = v21;
      uint64_t v131 = v21;
      uint64_t v26 = v138;
      outlined init with copy of Participant(v23, v138, (void (*)(void))type metadata accessor for Participant);
      Swift::Int v27 = v25 + v24 * v133;
      int v28 = v139;
      outlined init with copy of Participant(v27, v139, (void (*)(void))type metadata accessor for Participant);
      LODWORD(v140) = MEMORY[0x1C876F0D0](v26 + *(int *)(v142 + 20), v28 + *(int *)(v142 + 20));
      _s15ConversationKit11ParticipantVWOhTm_11(v28, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_11(v26, (void (*)(void))type metadata accessor for Participant);
      uint64_t v29 = v24;
      uint64_t v19 = v133;
      uint64_t v30 = v133 + 2;
      uint64_t v144 = v29;
      if (v133 + 2 < v18)
      {
        uint64_t v31 = v131;
        uint64_t v136 = v29 * v30;
        uint64_t v137 = v29 * v20;
        while (1)
        {
          uint64_t v32 = v18;
          uint64_t v33 = v30;
          uint64_t v34 = v138;
          outlined init with copy of Participant(v31 + v136, v138, (void (*)(void))type metadata accessor for Participant);
          uint64_t v35 = v139;
          outlined init with copy of Participant(v31 + v137, v139, (void (*)(void))type metadata accessor for Participant);
          uint64_t v36 = MEMORY[0x1C876F0D0](v34 + *(int *)(v142 + 20), v35 + *(int *)(v142 + 20));
          _s15ConversationKit11ParticipantVWOhTm_11(v35, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOhTm_11(v34, (void (*)(void))type metadata accessor for Participant);
          if ((v140 ^ v36)) {
            break;
          }
          ++v30;
          v31 += v144;
          Swift::Int v18 = v32;
          if (v33 + 1 >= v32)
          {
            uint64_t v30 = v32;
            a1 = v141;
            uint64_t v19 = v133;
            goto LABEL_12;
          }
        }
        a1 = v141;
        uint64_t v19 = v133;
        Swift::Int v18 = v32;
      }
LABEL_12:
      if (v140)
      {
        if (v30 < v19) {
          goto LABEL_140;
        }
        if (v19 < v30)
        {
          uint64_t v137 = v18;
          long long v127 = v17;
          unint64_t v37 = 0;
          uint64_t v38 = v144;
          Swift::Int v39 = v144 * (v30 - 1);
          uint64_t v40 = v19;
          uint64_t v41 = v30 * v144;
          uint64_t v42 = v40;
          uint64_t v43 = v40 * v144;
          do
          {
            if (v42 != v30 + v37 - 1)
            {
              uint64_t v44 = v30;
              uint64_t v45 = v131;
              if (!v131) {
                goto LABEL_146;
              }
              char v46 = v131 + v43;
              uint64_t v140 = v131 + v39;
              outlined init with take of Participant(v131 + v43, v132);
              if (v43 < v39 || v46 >= v45 + v41)
              {
                Swift::Int v48 = v140;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                Swift::Int v48 = v140;
                if (v43 != v39) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              outlined init with take of Participant(v132, v48);
              uint64_t v30 = v44;
              uint64_t v38 = v144;
            }
            ++v42;
            --v37;
            v39 -= v38;
            v41 -= v38;
            v43 += v38;
          }
          while (v42 < v30 + v37);
          long long v17 = v127;
          a1 = v141;
          uint64_t v19 = v133;
          Swift::Int v18 = v137;
        }
      }
    }
    if (v30 < v18)
    {
      if (__OFSUB__(v30, v19)) {
        goto LABEL_138;
      }
      if (v30 - v19 < v128)
      {
        if (__OFADD__(v19, v128)) {
          goto LABEL_141;
        }
        if (v19 + v128 >= v18) {
          int v49 = v18;
        }
        else {
          int v49 = v19 + v128;
        }
        if (v49 < v19) {
          goto LABEL_142;
        }
        if (v30 != v49)
        {
          uint64_t v133 = v19;
          uint64_t v126 = v2;
          long long v127 = v17;
          unint64_t v50 = *(void *)(v135 + 72);
          unint64_t v51 = v50 * (v30 - 1);
          uint64_t v136 = v50;
          unint64_t v52 = v30 * v50;
          uint64_t v131 = v49;
          do
          {
            long long v53 = 0;
            uint64_t v54 = v133;
            uint64_t v140 = v30;
            uint64_t v137 = v52;
            while (1)
            {
              uint64_t v144 = v54;
              Swift::Int v55 = v141;
              unint64_t v56 = *v141;
              uint64_t v57 = v52 + v53 + *v141;
              uint64_t v58 = v138;
              outlined init with copy of Participant(v57, v138, (void (*)(void))type metadata accessor for Participant);
              uint64_t v59 = v51;
              char v60 = v51 + v53 + v56;
              uint64_t v61 = v139;
              outlined init with copy of Participant(v60, v139, (void (*)(void))type metadata accessor for Participant);
              LOBYTE(v56) = MEMORY[0x1C876F0D0](v58 + *(int *)(v142 + 20), v61 + *(int *)(v142 + 20));
              _s15ConversationKit11ParticipantVWOhTm_11(v61, (void (*)(void))type metadata accessor for Participant);
              _s15ConversationKit11ParticipantVWOhTm_11(v58, (void (*)(void))type metadata accessor for Participant);
              if ((v56 & 1) == 0) {
                break;
              }
              uint64_t v62 = *v55;
              if (!*v55) {
                goto LABEL_144;
              }
              unint64_t v52 = v137;
              unint64_t v51 = v59;
              uint64_t v63 = v62 + v59 + v53;
              outlined init with take of Participant(v62 + v137 + v53, v143);
              swift_arrayInitWithTakeFrontToBack();
              outlined init with take of Participant(v143, v63);
              v53 -= v136;
              uint64_t v54 = v144 + 1;
              uint64_t v64 = v140;
              if (v140 == v144 + 1) {
                goto LABEL_45;
              }
            }
            uint64_t v64 = v140;
            unint64_t v51 = v59;
            unint64_t v52 = v137;
LABEL_45:
            uint64_t v30 = v64 + 1;
            v51 += v136;
            v52 += v136;
          }
          while (v30 != v131);
          uint64_t v30 = v131;
          uint64_t v2 = v126;
          long long v17 = v127;
          a1 = v141;
          uint64_t v19 = v133;
        }
      }
    }
    if (v30 < v19) {
      goto LABEL_137;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v140 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    BOOL v67 = *((void *)v17 + 2);
    uint64_t v66 = *((void *)v17 + 3);
    unint64_t v68 = v67 + 1;
    if (v67 >= v66 >> 1) {
      long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v68;
    uint64_t v69 = v17 + 32;
    uint64_t v70 = &v17[16 * v67 + 32];
    uint64_t v71 = v140;
    *(void *)uint64_t v70 = v19;
    *((void *)v70 + 1) = v71;
    if (v67) {
      break;
    }
    unint64_t v68 = 1;
LABEL_95:
    Swift::Int v18 = a1[1];
    Swift::Int v16 = v140;
    if (v140 >= v18) {
      goto LABEL_101;
    }
  }
  while (1)
  {
    uint64_t v72 = v68 - 1;
    if (v68 >= 4)
    {
      BOOL v77 = &v69[16 * v68];
      uint64_t v78 = *((void *)v77 - 8);
      char v79 = *((void *)v77 - 7);
      uint64_t v83 = __OFSUB__(v79, v78);
      uint64_t v80 = v79 - v78;
      if (v83) {
        goto LABEL_122;
      }
      uint64_t v82 = *((void *)v77 - 6);
      uint64_t v81 = *((void *)v77 - 5);
      uint64_t v83 = __OFSUB__(v81, v82);
      uint64_t v75 = v81 - v82;
      uint64_t v76 = v83;
      if (v83) {
        goto LABEL_123;
      }
      BOOL v84 = v68 - 2;
      uint64_t v85 = &v69[16 * v68 - 32];
      UIMenuElementSize v87 = *(void *)v85;
      uint64_t v86 = *((void *)v85 + 1);
      uint64_t v83 = __OFSUB__(v86, v87);
      uint64_t v88 = v86 - v87;
      if (v83) {
        goto LABEL_124;
      }
      uint64_t v83 = __OFADD__(v75, v88);
      uint64_t v89 = v75 + v88;
      if (v83) {
        goto LABEL_126;
      }
      if (v89 >= v80)
      {
        uint64_t v107 = &v69[16 * v72];
        unint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        uint64_t v83 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v83) {
          goto LABEL_132;
        }
        uint64_t v100 = v75 < v110;
        goto LABEL_84;
      }
    }
    else
    {
      if (v68 != 3)
      {
        uint64_t v101 = *((void *)v17 + 4);
        unint64_t v102 = *((void *)v17 + 5);
        uint64_t v83 = __OFSUB__(v102, v101);
        uint64_t v94 = v102 - v101;
        unint64_t v95 = v83;
        goto LABEL_78;
      }
      int v74 = *((void *)v17 + 4);
      uint64_t v73 = *((void *)v17 + 5);
      uint64_t v83 = __OFSUB__(v73, v74);
      uint64_t v75 = v73 - v74;
      uint64_t v76 = v83;
    }
    if (v76) {
      goto LABEL_125;
    }
    BOOL v84 = v68 - 2;
    uint64_t v90 = &v69[16 * v68 - 32];
    uint64_t v92 = *(void *)v90;
    uint64_t v91 = *((void *)v90 + 1);
    uint64_t v93 = __OFSUB__(v91, v92);
    uint64_t v94 = v91 - v92;
    unint64_t v95 = v93;
    if (v93) {
      goto LABEL_127;
    }
    uint64_t v96 = &v69[16 * v72];
    id v98 = *(void *)v96;
    uint64_t v97 = *((void *)v96 + 1);
    uint64_t v83 = __OFSUB__(v97, v98);
    uint64_t v99 = v97 - v98;
    if (v83) {
      goto LABEL_129;
    }
    if (__OFADD__(v94, v99)) {
      goto LABEL_131;
    }
    if (v94 + v99 >= v75)
    {
      uint64_t v100 = v75 < v99;
LABEL_84:
      if (v100) {
        uint64_t v72 = v84;
      }
      goto LABEL_86;
    }
LABEL_78:
    if (v95) {
      goto LABEL_128;
    }
    uint64_t v103 = &v69[16 * v72];
    id v105 = *(void *)v103;
    unint64_t v104 = *((void *)v103 + 1);
    uint64_t v83 = __OFSUB__(v104, v105);
    uint64_t v106 = v104 - v105;
    if (v83) {
      goto LABEL_130;
    }
    if (v106 < v94) {
      goto LABEL_95;
    }
LABEL_86:
    Swift::Int v111 = v72 - 1;
    if (v72 - 1 >= v68)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    uint64_t v112 = *a1;
    if (!*a1) {
      goto LABEL_145;
    }
    uint64_t v113 = v17;
    id v114 = &v69[16 * v111];
    Swift::Int v115 = *(void *)v114;
    unint64_t v116 = &v69[16 * v72];
    uint64_t v117 = *((void *)v116 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)(v112 + *(void *)(v135 + 72) * *(void *)v114, v112 + *(void *)(v135 + 72) * *(void *)v116, v112 + *(void *)(v135 + 72) * v117, v134);
    if (v2) {
      break;
    }
    if (v117 < v115) {
      goto LABEL_119;
    }
    if (v72 > *((void *)v113 + 2)) {
      goto LABEL_120;
    }
    *(void *)id v114 = v115;
    *(void *)&v69[16 * v111 + 8] = v117;
    unint64_t v118 = *((void *)v113 + 2);
    if (v72 >= v118) {
      goto LABEL_121;
    }
    long long v17 = v113;
    unint64_t v68 = v118 - 1;
    memmove(&v69[16 * v72], v116 + 16, 16 * (v118 - 1 - v72));
    *((void *)v113 + 2) = v118 - 1;
    a1 = v141;
    if (v118 <= 2) {
      goto LABEL_95;
    }
  }
LABEL_113:
  swift_bridgeObjectRelease();
  if (v130 >= -1) {
    goto LABEL_116;
  }
  __break(1u);
LABEL_115:
  swift_bridgeObjectRelease();
  if (v130 >= -1)
  {
LABEL_116:
    *(void *)(v129 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v18 = a1;
  uint64_t v21 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v7 = MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v20 = a3;
  uint64_t v17 = a2;
  if (a3 != a2)
  {
    uint64_t v12 = *(void *)(v11 + 72);
    uint64_t v24 = v12 * (v20 - 1);
    uint64_t v19 = v12;
    uint64_t v23 = v12 * v20;
    while (2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v18;
      do
      {
        _s15ConversationKit11ParticipantVWOcTm_0();
        _s15ConversationKit11ParticipantVWOcTm_0();
        char v15 = static Date.< infix(_:_:)();
        outlined destroy of CaptionSectioner.Caption();
        uint64_t result = outlined destroy of CaptionSectioner.Caption();
        if ((v15 & 1) == 0) {
          break;
        }
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        outlined init with take of Participant();
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = outlined init with take of Participant();
        v13 -= v19;
        ++v14;
      }
      while (v20 != v14);
      v24 += v19;
      v23 += v19;
      if (++v20 != v17) {
        continue;
      }
      break;
    }
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  Swift::Int v25 = a1;
  int v28 = type metadata accessor for TranscriptionViewModel.Caption(0);
  uint64_t v7 = MEMORY[0x1F4188790](v28);
  uint64_t v29 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t result = MEMORY[0x1F4188790](v9);
  char v15 = (char *)&v23 - v14;
  Swift::Int v27 = a3;
  uint64_t v24 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v31 = v16 * (v27 - 1);
    uint64_t v26 = v16;
    uint64_t v30 = v16 * v27;
    while (2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v25;
      do
      {
        uint64_t v19 = *a4;
        uint64_t v20 = a4;
        outlined init with copy of Participant.Caption(v30 + v17 + *a4, (uint64_t)v15, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        outlined init with copy of Participant.Caption(v31 + v17 + v19, (uint64_t)v11, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        LOBYTE(v19) = static Date.< infix(_:_:)();
        outlined destroy of Participant.Caption((uint64_t)v11, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        uint64_t result = outlined destroy of Participant.Caption((uint64_t)v15, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
        if ((v19 & 1) == 0) {
          break;
        }
        uint64_t v21 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        uint64_t v22 = v21 + v31 + v17;
        outlined init with take of TranscriptionViewModel.Caption(v21 + v30 + v17, v29);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = outlined init with take of TranscriptionViewModel.Caption(v29, v22);
        v17 -= v26;
        ++v18;
        a4 = v20;
      }
      while (v27 != v18);
      v31 += v26;
      v30 += v26;
      if (++v27 != v24) {
        continue;
      }
      break;
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;

  uint64_t v43 = a4;
  uint64_t v36 = a1;
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v41 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v45 = (char *)&v34 - v10;
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v40 = a3;
  uint64_t v35 = a2;
  if (a3 != a2)
  {
    char v15 = *(void *)(v12 + 72);
    uint64_t v16 = v15 * (v40 - 1);
    unint64_t v37 = (char *)&v34 - v13;
    uint64_t v38 = v15;
    uint64_t v44 = v15 * v40;
    while (2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v36;
      Swift::Int v39 = v16;
      while (1)
      {
        uint64_t v42 = v44 + v17;
        _s15ConversationKit11ParticipantVWOcTm_9();
        _s15ConversationKit11ParticipantVWOcTm_9();
        uint64_t v19 = *(int *)(v6 + 28);
        uint64_t v20 = *(void **)&v14[v19];
        if (v20)
        {
          uint64_t v21 = objc_msgSend(v20, sel_value);
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;

          uint64_t v19 = *(int *)(v6 + 28);
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v24 = 0xE000000000000000;
        }
        Swift::Int v25 = v6;
        uint64_t v26 = *(void **)&v45[v19];
        if (v26)
        {
          Swift::Int v27 = objc_msgSend(v26, sel_value);
          int v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v30 = v29;
        }
        else
        {
          int v28 = 0;
          uint64_t v30 = 0xE000000000000000;
        }
        if (v28 == v22 && v30 == v24) {
          break;
        }
        uint64_t v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _s15ConversationKit11ParticipantVWOhTm_6();
        uint64_t v14 = v37;
        uint64_t result = _s15ConversationKit11ParticipantVWOhTm_6();
        uint64_t v6 = v25;
        uint64_t v33 = v39;
        if (v32)
        {
          if (!*v43)
          {
            __break(1u);
            return result;
          }
          _s15ConversationKit11ParticipantVWObTm_3();
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = _s15ConversationKit11ParticipantVWObTm_3();
          v17 -= v38;
          if (v40 != ++v18) {
            continue;
          }
        }
        goto LABEL_19;
      }
      swift_bridgeObjectRelease_n();
      _s15ConversationKit11ParticipantVWOhTm_6();
      uint64_t v14 = v37;
      uint64_t result = _s15ConversationKit11ParticipantVWOhTm_6();
      uint64_t v6 = v25;
      uint64_t v33 = v39;
LABEL_19:
      uint64_t v16 = v33 + v38;
      v44 += v38;
      if (++v40 != v35) {
        continue;
      }
      break;
    }
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  int v28 = a1;
  uint64_t v29 = type metadata accessor for Participant.Caption(0);
  uint64_t v7 = MEMORY[0x1F4188790](v29);
  uint64_t v36 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v32 = (char *)&v26 - v10;
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v31 = (char *)&v26 - v13;
  uint64_t v35 = a3;
  Swift::Int v27 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    char v15 = v14 * (v35 - 1);
    uint64_t v33 = v14;
    uint64_t v16 = v14 * v35;
    uint64_t v30 = a4;
    while (2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v28;
      uint64_t v34 = v16;
      do
      {
        uint64_t v19 = (uint64_t *)v31;
        outlined init with copy of Participant.State();
        uint64_t v20 = v15;
        uint64_t v21 = (uint64_t *)v32;
        outlined init with copy of Participant.State();
        unint64_t v37 = *v19;
        uint64_t v22 = *v21;
        uint64_t v23 = (uint64_t)v21;
        char v15 = v20;
        _s15ConversationKit11ParticipantVWOhTm_7(v23, (void (*)(void))type metadata accessor for Participant.Caption);
        uint64_t v24 = (uint64_t)v19;
        Swift::Int v25 = v34;
        uint64_t result = _s15ConversationKit11ParticipantVWOhTm_7(v24, (void (*)(void))type metadata accessor for Participant.Caption);
        if (v37 >= v22) {
          break;
        }
        if (!*v30)
        {
          __break(1u);
          return result;
        }
        _s15ConversationKit11ParticipantVWObTm_5();
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = _s15ConversationKit11ParticipantVWObTm_5();
        v17 -= v33;
        ++v18;
      }
      while (v35 != v18);
      char v15 = v20 + v33;
      uint64_t v16 = v25 + v33;
      if (++v35 != v27) {
        continue;
      }
      break;
    }
  }
  return result;
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v46 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v8 = MEMORY[0x1F4188790](v46);
  uint64_t v45 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v44 = (char *)&v38 - v10;
  uint64_t v12 = *(void *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  int64_t v13 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_76;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_77;
  }
  uint64_t v17 = v13 / v12;
  uint64_t v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v15 / v12, a4);
    uint64_t v26 = v18 * v12;
    unint64_t v19 = a4 + v18 * v12;
    if (v26 < 1 || a1 >= a2) {
      goto LABEL_70;
    }
    unint64_t v41 = a1;
    uint64_t v42 = -v12;
    uint64_t v39 = v12;
    unint64_t v40 = a4;
    while (1)
    {
      unint64_t v28 = a3;
      uint64_t v29 = v42;
      unint64_t v30 = a3 + v42;
      unint64_t v43 = v19 + v42;
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      char v31 = static Date.< infix(_:_:)();
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      if (v31)
      {
        BOOL v32 = a3 < a2 || v30 >= a2;
        a3 = v30;
        if (!v32)
        {
          unint64_t v34 = v41;
          if (v28 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 += v29;
          goto LABEL_65;
        }
        swift_arrayInitWithTakeFrontToBack();
        a2 += v29;
      }
      else
      {
        BOOL v33 = a3 < v19 || v30 >= v19;
        a3 = v30;
        if (!v33)
        {
          unint64_t v34 = v41;
          if (v28 == v19)
          {
            unint64_t v19 = v43;
          }
          else
          {
            unint64_t v19 = v43;
            swift_arrayInitWithTakeBackToFront();
          }
LABEL_65:
          uint64_t v12 = v39;
          a4 = v40;
          goto LABEL_66;
        }
        unint64_t v19 = v43;
        swift_arrayInitWithTakeFrontToBack();
      }
      uint64_t v12 = v39;
      a4 = v40;
      unint64_t v34 = v41;
LABEL_66:
      if (v19 <= a4 || a2 <= v34) {
        goto LABEL_70;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v13 / v12, a4);
  unint64_t v19 = a4 + v17 * v12;
  if (v17 * v12 >= 1 && a2 < a3)
  {
    unint64_t v43 = a4 + v17 * v12;
    do
    {
      _s15ConversationKit11ParticipantVWOcTm_0();
      _s15ConversationKit11ParticipantVWOcTm_0();
      char v21 = static Date.< infix(_:_:)();
      outlined destroy of CaptionSectioner.Caption();
      outlined destroy of CaptionSectioner.Caption();
      if (v21)
      {
        unint64_t v22 = a2 + v12;
        if (a1 < a2 || a1 >= v22)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        if (a1 < a4 || a1 >= a4 + v12)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v22 = a2;
        a4 += v12;
      }
      unint64_t v19 = v43;
      a1 += v12;
      BOOL v25 = a4 >= v43 || v22 >= a3;
      a2 = v22;
    }
    while (!v25);
  }
  a2 = a1;
LABEL_70:
  int64_t v36 = v19 - a4;
  if (v12 != -1 || v36 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v36 / v12, a2);
    return;
  }
LABEL_78:
  __break(1u);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  int64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  unint64_t v52 = type metadata accessor for TranscriptionViewModel.Caption(0);
  uint64_t v8 = MEMORY[0x1F4188790](v52);
  unint64_t v51 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v50 = (uint64_t)&v44 - v10;
  uint64_t v12 = *(void *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  int64_t v13 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_76;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_77;
  }
  uint64_t v17 = v13 / v12;
  uint64_t v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v15 / v12, a4);
    unint64_t v28 = v18 * v12;
    unint64_t v19 = a4 + v18 * v12;
    if (v28 < 1 || a1 >= a2) {
      goto LABEL_70;
    }
    uint64_t v47 = a1;
    Swift::Int v48 = -v12;
    uint64_t v45 = v12;
    uint64_t v46 = a4;
    while (1)
    {
      unint64_t v30 = a3;
      char v31 = v48;
      BOOL v32 = a3 + v48;
      int v49 = v19 + v48;
      BOOL v33 = v50;
      outlined init with copy of Participant.Caption(v19 + v48, v50, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      unint64_t v34 = a2 + v31;
      uint64_t v35 = a2 + v31;
      int64_t v36 = v51;
      outlined init with copy of Participant.Caption(v35, v51, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      unint64_t v37 = static Date.< infix(_:_:)();
      outlined destroy of Participant.Caption(v36, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      outlined destroy of Participant.Caption(v33, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      if (v37)
      {
        uint64_t v38 = v30 < a2 || v32 >= a2;
        a3 = v32;
        if (!v38)
        {
          unint64_t v40 = v47;
          if (v30 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v34;
          goto LABEL_65;
        }
        swift_arrayInitWithTakeFrontToBack();
        a2 = v34;
      }
      else
      {
        uint64_t v39 = v30 < v19 || v32 >= v19;
        a3 = v32;
        if (!v39)
        {
          unint64_t v40 = v47;
          if (v30 == v19)
          {
            unint64_t v19 = v49;
          }
          else
          {
            unint64_t v19 = v49;
            swift_arrayInitWithTakeBackToFront();
          }
LABEL_65:
          uint64_t v12 = v45;
          a4 = v46;
          goto LABEL_66;
        }
        unint64_t v19 = v49;
        swift_arrayInitWithTakeFrontToBack();
      }
      uint64_t v12 = v45;
      a4 = v46;
      unint64_t v40 = v47;
LABEL_66:
      if (v19 <= a4 || a2 <= v40) {
        goto LABEL_70;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v13 / v12, a4);
  unint64_t v19 = a4 + v17 * v12;
  if (v17 * v12 >= 1 && a2 < a3)
  {
    int v49 = a4 + v17 * v12;
    do
    {
      char v21 = v50;
      outlined init with copy of Participant.Caption(a2, v50, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      unint64_t v22 = v51;
      outlined init with copy of Participant.Caption(a4, v51, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      uint64_t v23 = static Date.< infix(_:_:)();
      outlined destroy of Participant.Caption(v22, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      outlined destroy of Participant.Caption(v21, (void (*)(void))type metadata accessor for TranscriptionViewModel.Caption);
      if (v23)
      {
        uint64_t v24 = a2 + v12;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        if (a1 < a4 || a1 >= a4 + v12)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v24 = a2;
        a4 += v12;
      }
      unint64_t v19 = v49;
      a1 += v12;
      Swift::Int v27 = a4 >= v49 || v24 >= a3;
      a2 = v24;
    }
    while (!v27);
  }
  a2 = a1;
LABEL_70:
  uint64_t v42 = v19 - a4;
  if (v12 != -1 || v42 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v42 / v12, a2);
    return;
  }
LABEL_78:
  __break(1u);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  int64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  unint64_t v53;
  int64_t v56;
  int64_t v58;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;

  uint64_t v66 = type metadata accessor for Participant(0);
  uint64_t v8 = MEMORY[0x1F4188790](v66);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v60 - v10;
  MEMORY[0x1F4188790](v9);
  int64_t v13 = MEMORY[0x1F4188790]((char *)&v60 - v12);
  uint64_t v16 = (char *)&v60 - v15;
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  unint64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_86;
  }
  char v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_87;
  }
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  uint64_t v69 = v18;
  if (v19 / v18 < v21 / v18)
  {
    unint64_t v68 = v13;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v19 / v18, a4);
    BOOL v25 = a4 + v23 * v18;
    if (v23 * v18 >= 1 && a2 < a3)
    {
      while (1)
      {
        Swift::Int v27 = v25;
        _s15ConversationKit11ParticipantVWOcTm_11(a2, (uint64_t)v16, (void (*)(void))type metadata accessor for Participant);
        unint64_t v28 = (uint64_t)v16;
        uint64_t v29 = v68;
        _s15ConversationKit11ParticipantVWOcTm_11(a4, v68, (void (*)(void))type metadata accessor for Participant);
        unint64_t v30 = v70;
        char v31 = closure #1 in Array<A>.sortForInCallControls()(v28, v29);
        uint64_t v70 = v30;
        if (v30) {
          break;
        }
        BOOL v32 = v31;
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v29, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantV5StateOWOhTm_0(v28, (void (*)(void))type metadata accessor for Participant);
        uint64_t v16 = (char *)v28;
        if (v32)
        {
          uint64_t v18 = v69;
          BOOL v33 = a1 < a2 || a1 >= a2 + v69;
          BOOL v25 = v27;
          if (v33)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (a1 != a2)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 += v18;
        }
        else
        {
          uint64_t v18 = v69;
          unint64_t v34 = a1 < a4 || a1 >= a4 + v69;
          BOOL v25 = v27;
          if (v34)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (a1 != a4)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a4 += v18;
        }
        a1 += v18;
        if (a4 >= v25 || a2 >= a3) {
          goto LABEL_16;
        }
      }
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v29, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantV5StateOWOhTm_0(v28, (void (*)(void))type metadata accessor for Participant);
      unint64_t v56 = v27 - a4;
      if (v18 != -1 || v56 != 0x8000000000000000)
      {
        uint64_t v39 = v56 / v18;
        unint64_t v40 = a4;
        unint64_t v41 = a1;
        goto LABEL_50;
      }
      goto LABEL_89;
    }
LABEL_16:
    a2 = a1;
    goto LABEL_45;
  }
  uint64_t v64 = v11;
  uint64_t v65 = v14;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v21 / v18, a4);
  uint64_t v35 = v24 * v18;
  BOOL v25 = a4 + v24 * v18;
  if (v35 < 1 || a1 >= a2)
  {
LABEL_45:
    unint64_t v37 = v25 - a4;
    if (v18 != -1 || v37 != 0x8000000000000000)
    {
      uint64_t v39 = v37 / v18;
      unint64_t v40 = a4;
      unint64_t v41 = a2;
LABEL_50:
      specialized UnsafeMutablePointer.moveInitialize(from:count:)(v40, v39, v41);
      return;
    }
    goto LABEL_88;
  }
  uint64_t v42 = -v18;
  unint64_t v43 = v70;
  uint64_t v62 = a4;
  uint64_t v63 = a1;
  uint64_t v61 = -v18;
  while (1)
  {
    uint64_t v44 = v43;
    uint64_t v45 = a4;
    uint64_t v46 = a2;
    unint64_t v68 = v25;
    v25 += v42;
    uint64_t v47 = v42;
    Swift::Int v48 = (uint64_t)v64;
    _s15ConversationKit11ParticipantVWOcTm_11(v25, (uint64_t)v64, (void (*)(void))type metadata accessor for Participant);
    BOOL v67 = v46;
    int v49 = v46 + v47;
    unint64_t v50 = v65;
    _s15ConversationKit11ParticipantVWOcTm_11(v49, v65, (void (*)(void))type metadata accessor for Participant);
    unint64_t v51 = closure #1 in Array<A>.sortForInCallControls()(v48, v50);
    if (v44) {
      break;
    }
    unint64_t v52 = v51;
    uint64_t v70 = 0;
    long long v53 = a3 + v47;
    _s15ConversationKit11ParticipantV5StateOWOhTm_0(v50, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantV5StateOWOhTm_0(v48, (void (*)(void))type metadata accessor for Participant);
    if (v52)
    {
      if (a3 < v67 || v53 >= v67)
      {
        swift_arrayInitWithTakeFrontToBack();
        a2 = v49;
        a4 = v62;
        unint64_t v43 = v70;
        BOOL v25 = v68;
        uint64_t v18 = v69;
      }
      else
      {
        a4 = v62;
        BOOL v25 = v68;
        uint64_t v18 = v69;
        if (a3 != v67) {
          swift_arrayInitWithTakeBackToFront();
        }
        a2 = v49;
        unint64_t v43 = v70;
      }
    }
    else
    {
      if (a3 < v68 || v53 >= v68)
      {
        swift_arrayInitWithTakeFrontToBack();
        a4 = v62;
        unint64_t v43 = v70;
        uint64_t v18 = v69;
      }
      else
      {
        a4 = v62;
        uint64_t v18 = v69;
        if (a3 != v68) {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v43 = v70;
      }
      a2 = v67;
    }
    if (v25 > a4)
    {
      a3 = v53;
      uint64_t v42 = v61;
      if (a2 > v63) {
        continue;
      }
    }
    goto LABEL_45;
  }
  _s15ConversationKit11ParticipantV5StateOWOhTm_0(v50, (void (*)(void))type metadata accessor for Participant);
  _s15ConversationKit11ParticipantV5StateOWOhTm_0(v48, (void (*)(void))type metadata accessor for Participant);
  uint64_t v58 = v68 - v45;
  if (v69 != -1 || v58 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v45, v58 / v69, v67);
    return;
  }
LABEL_90:
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  double v47;
  double v48;
  double *v49;
  double *v50;
  BOOL v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v58;
  BOOL v60;
  uint64_t v61;
  double *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  double *v68;
  double *v69;
  unint64_t v70;
  double v71;
  uint64_t v72;
  double v73;
  double *v74;
  BOOL v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v84;
  void v86[2];
  char *v87;
  uint64_t v88;
  unint64_t v89;
  double *v90;
  double *v91;
  double *v92;
  double *v93;
  double *v94;
  unint64_t v95;
  double *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned char v100[40];
  char v101;
  unsigned char v102[40];
  char v103;
  double *v104;

  uint64_t v5 = v4;
  uint64_t v97 = type metadata accessor for HUDActivityManager.BannerUpdate(0);
  MEMORY[0x1F4188790](v97);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v86 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v92 = (double *)((char *)v86 - v14);
  MEMORY[0x1F4188790](v15);
  MEMORY[0x1F4188790]((char *)v86 - v16);
  unint64_t v104 = (double *)((char *)v86 - v17);
  MEMORY[0x1F4188790](v18);
  uint64_t v90 = (double *)((char *)v86 - v19);
  MEMORY[0x1F4188790](v20);
  MEMORY[0x1F4188790](v21);
  uint64_t v91 = (double *)((char *)v86 - v22);
  MEMORY[0x1F4188790](v23);
  uint64_t v96 = (double *)((char *)v86 - v24);
  MEMORY[0x1F4188790](v25);
  MEMORY[0x1F4188790](v26);
  unint64_t v28 = (double *)((char *)v86 - v27);
  MEMORY[0x1F4188790](v29);
  uint64_t v35 = (double *)((char *)v86 - v34);
  unint64_t v37 = *(void *)(v36 + 72);
  if (!v37)
  {
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  uint64_t v38 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v37 == -1) {
    goto LABEL_101;
  }
  unint64_t v40 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v37 == -1) {
    goto LABEL_102;
  }
  uint64_t v94 = (double *)v32;
  v86[1] = v5;
  uint64_t v42 = v38 / v37;
  unint64_t v43 = v40 / v37;
  uint64_t v99 = v37;
  if (v38 / v37 >= v40 / v37)
  {
    uint64_t v91 = (double *)v30;
    UIMenuElementSize v87 = v12;
    uint64_t v88 = v33;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v40 / v37, a4);
    uint64_t v61 = v43 * v37;
    uint64_t v44 = a4 + v43 * v37;
    if (v61 >= 1 && a1 < a2)
    {
      unint64_t v95 = a4;
      id v98 = -v37;
      uint64_t v63 = v90;
      uint64_t v93 = v104 + 1;
      uint64_t v94 = v90 + 1;
      uint64_t v96 = (double *)v102;
      do
      {
        uint64_t v64 = a3;
        uint64_t v65 = v98;
        uint64_t v66 = v44 + v98;
        outlined init with copy of HUDActivityManager.BannerUpdate(v44 + v98, (uint64_t)v63);
        BOOL v67 = a2 + v65;
        outlined init with copy of HUDActivityManager.BannerUpdate(v67, (uint64_t)v104);
        outlined init with copy of ConversationControlsType((uint64_t)v94, (uint64_t)v100);
        outlined init with copy of ConversationControlsType((uint64_t)v93, (uint64_t)v96);
        if (v101)
        {
          unint64_t v68 = v92;
          if (v103)
          {
            uint64_t v69 = v63;
            uint64_t v70 = v44;
            uint64_t v71 = *v69;
            uint64_t v72 = (uint64_t)v104;
            uint64_t v73 = *v104;
            int v74 = v91;
            outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v69, (uint64_t)v91);
            outlined init with copy of HUDActivityManager.BannerUpdate(v72, (uint64_t)v68);
            if (v71 >= v73)
            {
              uint64_t v89 = v70;
              uint64_t v76 = *v74;
              BOOL v77 = *v68;
              uint64_t v78 = (uint64_t)v87;
              outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v74, (uint64_t)v87);
              char v79 = (uint64_t)v68;
              uint64_t v80 = v88;
              outlined init with copy of HUDActivityManager.BannerUpdate(v79, v88);
              uint64_t v75 = v76 == v77 && Date.compare(_:)() == -1;
              uint64_t v63 = v90;
              outlined destroy of HUDActivityManager.BannerUpdate(v80);
              outlined destroy of HUDActivityManager.BannerUpdate(v78);
              uint64_t v44 = v89;
              unint64_t v68 = v92;
            }
            else
            {
              uint64_t v75 = 1;
              uint64_t v44 = v70;
              uint64_t v63 = v90;
            }
            outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v68);
            outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v91);
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v100, &demangling cache variable for type metadata for (ConversationControlsType, ConversationControlsType));
          }
          else
          {
            outlined destroy of ConversationControlsType((uint64_t)v96);
            outlined destroy of ConversationControlsType((uint64_t)v100);
            uint64_t v75 = 1;
          }
        }
        else if (v103)
        {
          outlined destroy of ConversationControlsType((uint64_t)v100);
          outlined destroy of ConversationControlsType((uint64_t)v96);
          uint64_t v75 = 0;
        }
        else
        {
          uint64_t v75 = *v63 < *v104;
          outlined destroy of ConversationControlsType((uint64_t)v96);
          outlined destroy of ConversationControlsType((uint64_t)v100);
        }
        a3 = v64 + v98;
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v104);
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v63);
        if (v75)
        {
          if (v64 < a2 || a3 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v64 != a2)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v67;
        }
        else
        {
          if (v64 < v44 || a3 >= v44)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v64 != v44)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v44 = v66;
        }
      }
      while (v44 > v95 && a2 > a1);
      a4 = v95;
    }
  }
  else
  {
    uint64_t v92 = (double *)v31;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v42, a4);
    uint64_t v44 = a4 + v42 * v37;
    if (v42 * v37 >= 1 && a2 < a3)
    {
      uint64_t v46 = (uint64_t)(v35 + 1);
      id v98 = (uint64_t)(v28 + 1);
      unint64_t v104 = (double *)v102;
      uint64_t v93 = v35 + 1;
      do
      {
        outlined init with copy of HUDActivityManager.BannerUpdate(a2, (uint64_t)v35);
        outlined init with copy of HUDActivityManager.BannerUpdate(a4, (uint64_t)v28);
        outlined init with copy of ConversationControlsType(v46, (uint64_t)v100);
        outlined init with copy of ConversationControlsType(v98, (uint64_t)v104);
        if (v101)
        {
          if (!v103)
          {
            outlined destroy of ConversationControlsType((uint64_t)v104);
            outlined destroy of ConversationControlsType((uint64_t)v100);
            outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v28);
            outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v35);
            goto LABEL_30;
          }
          uint64_t v47 = *v35;
          Swift::Int v48 = *v28;
          int v49 = v94;
          outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v35, (uint64_t)v94);
          unint64_t v50 = v96;
          outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v28, (uint64_t)v96);
          if (v47 >= v48)
          {
            unint64_t v95 = a4;
            unint64_t v52 = *v49;
            long long v53 = *v50;
            uint64_t v54 = (uint64_t)v91;
            outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v49, (uint64_t)v91);
            Swift::Int v55 = (uint64_t)v92;
            outlined init with copy of HUDActivityManager.BannerUpdate((uint64_t)v50, (uint64_t)v92);
            unint64_t v51 = v52 == v53 && Date.compare(_:)() == -1;
            outlined destroy of HUDActivityManager.BannerUpdate(v55);
            outlined destroy of HUDActivityManager.BannerUpdate(v54);
            a4 = v95;
          }
          else
          {
            unint64_t v51 = 1;
          }
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v96);
          outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v94);
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v100, &demangling cache variable for type metadata for (ConversationControlsType, ConversationControlsType));
          uint64_t v46 = (uint64_t)v93;
        }
        else
        {
          if (v103)
          {
            outlined destroy of ConversationControlsType((uint64_t)v100);
            outlined destroy of ConversationControlsType((uint64_t)v104);
            outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v28);
            outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v35);
LABEL_36:
            uint64_t v58 = a4;
            a4 += v99;
            if (a1 < v58 || a1 >= a4)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a1 != v58)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v56 = a2;
            goto LABEL_47;
          }
          unint64_t v51 = *v35 < *v28;
          outlined destroy of ConversationControlsType((uint64_t)v104);
          outlined destroy of ConversationControlsType((uint64_t)v100);
        }
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v28);
        outlined destroy of HUDActivityManager.BannerUpdate((uint64_t)v35);
        if (!v51) {
          goto LABEL_36;
        }
LABEL_30:
        unint64_t v56 = a2 + v99;
        if (a1 < a2 || a1 >= v56)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_47:
        a1 += v99;
        char v60 = a4 >= v44 || v56 >= a3;
        a2 = v56;
      }
      while (!v60);
    }
    a2 = a1;
  }
  BOOL v84 = v44 - a4;
  if (v99 != -1 || v84 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v84 / v99, a2);
    return;
  }
LABEL_103:
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  unint64_t v34;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v43;
  int64_t v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;

  uint64_t v54 = type metadata accessor for Participant.Caption(0);
  uint64_t v9 = MEMORY[0x1F4188790](v54);
  unint64_t v56 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  Swift::Int v55 = (char *)&v46 - v11;
  int64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_78;
  }
  uint64_t v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_79;
  }
  uint64_t v18 = v14 / v13;
  unint64_t v19 = v16 / v13;
  if (v14 / v13 >= v16 / v13)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v16 / v13, a4);
    char v21 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2) {
      goto LABEL_72;
    }
    uint64_t v47 = v4;
    Swift::Int v48 = a1;
    unint64_t v50 = v13;
    unint64_t v51 = -v13;
    uint64_t v24 = a3;
    int v49 = a4;
    while (1)
    {
      BOOL v25 = v24;
      uint64_t v26 = v51;
      v24 += v51;
      long long v53 = v21 + v51;
      Swift::Int v27 = a2;
      unint64_t v28 = (uint64_t *)v55;
      outlined init with copy of Participant.State();
      unint64_t v52 = v27 + v26;
      uint64_t v29 = (uint64_t *)v56;
      outlined init with copy of Participant.State();
      unint64_t v30 = *v28;
      char v31 = *v29;
      _s15ConversationKit11ParticipantVWOhTm_7((uint64_t)v29, (void (*)(void))type metadata accessor for Participant.Caption);
      _s15ConversationKit11ParticipantVWOhTm_7((uint64_t)v28, (void (*)(void))type metadata accessor for Participant.Caption);
      if (v30 >= v31)
      {
        BOOL v33 = v25 < v21 || v24 >= v21;
        a2 = v27;
        if (!v33)
        {
          a4 = v49;
          int64_t v13 = v50;
          unint64_t v34 = v48;
          if (v25 == v21)
          {
            char v21 = v53;
            goto LABEL_43;
          }
          char v21 = v53;
LABEL_40:
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_43;
        }
        char v21 = v53;
      }
      else
      {
        if (v25 >= v27 && v24 < v27)
        {
          a4 = v49;
          int64_t v13 = v50;
          unint64_t v34 = v48;
          if (v25 == v27)
          {
            a2 = v52;
            goto LABEL_43;
          }
          a2 = v52;
          goto LABEL_40;
        }
        a2 = v52;
      }
      swift_arrayInitWithTakeFrontToBack();
      a4 = v49;
      int64_t v13 = v50;
      unint64_t v34 = v48;
LABEL_43:
      if (v21 <= a4 || a2 <= v34) {
        goto LABEL_72;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v14 / v13, a4);
  uint64_t v20 = v18 * v13;
  char v21 = a4 + v18 * v13;
  long long v53 = a3;
  if (v20 < 1 || a2 >= a3)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v47 = v4;
    unint64_t v52 = v21;
    int64_t v36 = (uint64_t *)v55;
    unint64_t v37 = (uint64_t *)v56;
    do
    {
      outlined init with copy of Participant.State();
      outlined init with copy of Participant.State();
      uint64_t v38 = *v36;
      uint64_t v39 = *v37;
      _s15ConversationKit11ParticipantVWOhTm_7((uint64_t)v37, (void (*)(void))type metadata accessor for Participant.Caption);
      _s15ConversationKit11ParticipantVWOhTm_7((uint64_t)v36, (void (*)(void))type metadata accessor for Participant.Caption);
      if (v38 >= v39)
      {
        if (a1 < a4 || a1 >= a4 + v13)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v40 = a2;
        a4 += v13;
      }
      else
      {
        unint64_t v40 = a2 + v13;
        if (a1 < a2 || a1 >= v40)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      char v21 = v52;
      a1 += v13;
      unint64_t v43 = a4 >= v52 || v40 >= v53;
      a2 = v40;
    }
    while (!v43);
    a2 = a1;
  }
LABEL_72:
  uint64_t v44 = v21 - a4;
  if (v13 != -1 || v44 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v44 / v13, a2);
    return;
  }
LABEL_80:
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  int64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int EnumTagSinglePayload;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  id *v69;
  id *v70;
  id *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  id v76;
  Class isa;
  id v78;
  id *v79;
  id *v80;
  id *v81;
  id *v82;
  id *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  id *v93;
  void *v94;
  char *v95;
  id *v96;
  id *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  id v102;
  Class v103;
  id v104;
  id *v105;
  id *v106;
  id *v107;
  id *v108;
  id *v109;
  uint64_t v110;
  id *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v115;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  id *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  int EnumCaseMultiPayload;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  void *v147;
  id v148;
  uint64_t v149;
  id *v150;
  id *v151;
  id *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  id *v157;
  id v158;
  Class v159;
  id v160;
  id *v161;
  id *v162;
  id *v163;
  id *v164;
  id *v165;
  id *v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char *v171;
  uint64_t (*v172)(char *, char *, uint64_t);
  uint64_t v173;
  void (*v174)(char *, uint64_t);
  uint64_t v175;
  id *v176;
  void *v177;
  id v178;
  id *v179;
  id *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  id v185;
  Class v186;
  id v187;
  id *v188;
  id *v189;
  id *v190;
  id *v191;
  id *v192;
  uint64_t v193;
  id *v194;
  uint64_t v195;
  unint64_t v196;
  id v200[2];
  id *v201;
  id *v202;
  char *v203;
  uint64_t v204;
  id *v205;
  id *v206;
  unint64_t v207;
  unint64_t v208;
  id *v209;
  unint64_t v210;
  id *v211;
  uint64_t v212;
  id *v213;
  id *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  id *v218;
  uint64_t v219;
  unint64_t v220;
  id *v221;
  id *v222;
  id *v223;
  id *v224;
  id *v225;
  unint64_t v226;

  v220 = a4;
  v226 = a1;
  v219 = type metadata accessor for Participant.State(0);
  uint64_t v6 = MEMORY[0x1F4188790](v219);
  uint64_t v8 = (char *)v200 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  v205 = (id *)((char *)v200 - v10);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  int64_t v13 = (id *)((char *)v200 - v12);
  MEMORY[0x1F4188790](v11);
  v210 = (unint64_t)v200 - v14;
  int64_t v15 = type metadata accessor for Participant(0);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  v218 = (id *)((char *)v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v214 = (id *)((char *)v200 - v19);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v204 = (uint64_t)v200 - v21;
  unint64_t v22 = MEMORY[0x1F4188790](v20);
  v217 = (uint64_t)v200 - v23;
  MEMORY[0x1F4188790](v22);
  v213 = (id *)((char *)v200 - v24);
  v215 = *(void *)(v25 + 72);
  if (!v215)
  {
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  uint64_t v26 = a2 - v226;
  if (a2 - v226 == 0x8000000000000000 && v215 == -1) {
    goto LABEL_142;
  }
  unint64_t v28 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v215 == -1) {
    goto LABEL_143;
  }
  v209 = v13;
  unint64_t v30 = v26 / v215;
  char v31 = v28 / v215;
  v212 = v15;
  if (v26 / v215 < v28 / v215)
  {
    BOOL v32 = v220;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v226, v30, v220);
    BOOL v33 = v32 + v30 * v215;
    if (v30 * v215 < 1 || a2 >= a3)
    {
LABEL_17:
      a2 = v226;
      goto LABEL_23;
    }
    v208 = v32 + v30 * v215;
    v207 = a3;
    while (1)
    {
      uint64_t v39 = (uint64_t)v213;
      _s15ConversationKit11ParticipantVWOcTm_17(a2, (uint64_t)v213);
      _s15ConversationKit11ParticipantVWOcTm_17(v220, v217);
      unint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      v218 = v200;
      unint64_t v41 = *(void *)(*(void *)(v40 - 8) + 64);
      MEMORY[0x1F4188790](v40 - 8);
      uint64_t v42 = (char *)v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v43 = v210;
      _s15ConversationKit11ParticipantVWOcTm_17(v39, v210);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v45 = v43 + *(int *)(v44 + 48);
        outlined consume of Participant.CopresenceInfo?(*(void *)(v43 + *(int *)(v44 + 64)), *(void *)(v43 + *(int *)(v44 + 64) + 8));
        uint64_t v46 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 32))((char *)v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0), v43, v46);
        outlined destroy of Participant.MediaInfo(v45);
        uint64_t v47 = (char *)v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
        Swift::Int v48 = 0;
        int v49 = v46;
      }
      else
      {
        _s15ConversationKit11ParticipantVWOhTm_11(v43, (void (*)(void))type metadata accessor for Participant.State);
        int v49 = type metadata accessor for Date();
        uint64_t v47 = (char *)v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
        Swift::Int v48 = 1;
      }
      unint64_t v50 = __swift_storeEnumTagSinglePayload((uint64_t)v47, v48, 1, v49);
      unint64_t v51 = (uint64_t)v209;
      v214 = v200;
      MEMORY[0x1F4188790](v50);
      unint64_t v52 = (char *)v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_17(v217, v51);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        long long v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v54 = v51 + *(int *)(v53 + 48);
        outlined consume of Participant.CopresenceInfo?(*(void *)(v51 + *(int *)(v53 + 64)), *(void *)(v51 + *(int *)(v53 + 64) + 8));
        Swift::Int v55 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 32))(v52, v51, v55);
        outlined destroy of Participant.MediaInfo(v54);
        unint64_t v56 = (uint64_t)v52;
        uint64_t v57 = 0;
      }
      else
      {
        _s15ConversationKit11ParticipantVWOhTm_11(v51, (void (*)(void))type metadata accessor for Participant.State);
        Swift::Int v55 = type metadata accessor for Date();
        unint64_t v56 = (uint64_t)v52;
        uint64_t v57 = 1;
      }
      __swift_storeEnumTagSinglePayload(v56, v57, 1, v55);
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
      v211 = v200;
      uint64_t v59 = MEMORY[0x1F4188790](v58 - 8);
      uint64_t v61 = (char *)v200 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v62 = (uint64_t)&v61[*(int *)(v59 + 56)];
      outlined init with take of Date?((uint64_t)v42, (uint64_t)v61);
      outlined init with take of Date?((uint64_t)v52, v62);
      type metadata accessor for Date();
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v61, 1, v55);
      uint64_t v64 = __swift_getEnumTagSinglePayload(v62, 1, v55);
      if (EnumTagSinglePayload == 1) {
        break;
      }
      BOOL v84 = *(void *)(v55 - 8);
      uint64_t v85 = v84;
      if (v64 == 1)
      {
        (*(void (**)(char *, uint64_t))(v84 + 8))(v61, v55);
        _s15ConversationKit11ParticipantVWOhTm_11(v217, (void (*)(void))type metadata accessor for Participant);
        _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v213, (void (*)(void))type metadata accessor for Participant);
        a3 = v207;
        goto LABEL_60;
      }
      v216 = a2;
      v206 = v200;
      uint64_t v86 = *(void *)(v84 + 64);
      MEMORY[0x1F4188790](v64);
      UIMenuElementSize v87 = (char *)v200 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v88 = *(uint64_t (**)(char *, char *, uint64_t))(v85 + 32);
      uint64_t v89 = v88(v87, v61, v55);
      v205 = v200;
      MEMORY[0x1F4188790](v89);
      v88(v87, (char *)v62, v55);
      BOOL v33 = v208;
      uint64_t v90 = static Date.< infix(_:_:)();
      uint64_t v91 = *(void (**)(char *, uint64_t))(v85 + 8);
      v91(v87, v55);
      v91(v87, v55);
LABEL_59:
      a3 = v207;
      _s15ConversationKit11ParticipantVWOhTm_11(v217, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v213, (void (*)(void))type metadata accessor for Participant);
      a2 = v216;
      if ((v90 & 1) == 0) {
        goto LABEL_66;
      }
LABEL_60:
      uint64_t v113 = a2 + v215;
      if (v226 < a2 || v226 >= v113)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v226 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
LABEL_77:
      v226 += v215;
      uint64_t v117 = v220 >= v33 || v113 >= a3;
      a2 = v113;
      if (v117) {
        goto LABEL_17;
      }
    }
    if (v64 != 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v62, (uint64_t *)&demangling cache variable for type metadata for Date?);
      _s15ConversationKit11ParticipantVWOhTm_11(v217, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v213, (void (*)(void))type metadata accessor for Participant);
LABEL_66:
      Swift::Int v115 = v220 + v215;
      if (v226 < v220 || v226 >= v115)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v226 != v220)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v113 = a2;
      v220 = v115;
      goto LABEL_77;
    }
    uint64_t v65 = v212;
    uint64_t v66 = *(id *)((char *)v213 + *(int *)(v212 + 28));
    if (v66)
    {
      BOOL v67 = v66;
      unint64_t v68 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v67);
      if (v69)
      {
        uint64_t v70 = (id *)v68;
        uint64_t v71 = v69;
        if (objc_msgSend(v67, sel_shouldHideContact))
        {
          v206 = v70;
          uint64_t v72 = type metadata accessor for PersonNameComponents();
          v205 = v200;
          uint64_t v73 = *(void *)(v72 - 8);
          MEMORY[0x1F4188790](v72);
          uint64_t v75 = (char *)v200 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          PersonNameComponents.givenName.setter();
          PersonNameComponents.familyName.setter();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v76 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          uint64_t v78 = objc_msgSend(v76, sel_stringFromPersonNameComponents_, isa);

          char v79 = (id *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v81 = v80;

          (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
          v223 = v79;
          v224 = v81;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          uint64_t v82 = 0;
          uint64_t v65 = v212;
          uint64_t v83 = v206;
LABEL_49:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v221 = v83;
          v222 = v71;
          uint64_t v94 = *(void **)(v217 + *(int *)(v65 + 28));
          v216 = a2;
          v206 = v71;
          if (v94)
          {
            unint64_t v95 = v94;
            v205 = (id *)outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v95);
            if (v96)
            {
              uint64_t v97 = v96;
              if (objc_msgSend(v95, sel_shouldHideContact))
              {
                v203 = v95;
                id v98 = type metadata accessor for PersonNameComponents();
                uint64_t v99 = *(void *)(v98 - 8);
                MEMORY[0x1F4188790](v98);
                uint64_t v101 = (char *)v200 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
                swift_bridgeObjectRetain();
                PersonNameComponents.init()();
                PersonNameComponents.givenName.setter();
                PersonNameComponents.familyName.setter();
                BOOL v33 = v208;
                if (one-time initialization token for initials != -1) {
                  swift_once();
                }
                swift_beginAccess();
                unint64_t v102 = (id)static NSPersonNameComponentsFormatter.initials;
                uint64_t v103 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                unint64_t v104 = objc_msgSend(v102, sel_stringFromPersonNameComponents_, v103);

                id v105 = (id *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v107 = v106;

                (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
                v223 = v105;
                v224 = v107;
                lazy protocol witness table accessor for type String and conformance String();
                StringProtocol.localizedUppercase.getter();

                swift_bridgeObjectRelease();
                uint64_t v108 = 0;
                unint64_t v109 = v205;
                goto LABEL_58;
              }

              swift_bridgeObjectRelease();
            }
            else
            {
            }
          }
          uint64_t v110 = v204;
          _s15ConversationKit11ParticipantVWOcTm_17(v217, v204);
          swift_retain();
          ParticipantContactDetailsCache.contactDetails(for:)();
          uint64_t v108 = v223;
          unint64_t v109 = v224;
          uint64_t v97 = v225;
          Swift::Int v111 = v223;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          _s15ConversationKit11ParticipantVWOhTm_11(v110, (void (*)(void))type metadata accessor for Participant);
          BOOL v33 = v208;
LABEL_58:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v223 = v109;
          v224 = v97;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v112 = StringProtocol.localizedCompare<A>(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v90 = v112 == 1;
          goto LABEL_59;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    v205 = (id *)type metadata accessor for Participant;
    uint64_t v92 = v204;
    _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v213, v204);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    uint64_t v82 = v223;
    v206 = v224;
    uint64_t v71 = v225;
    uint64_t v93 = v223;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v83 = v206;
    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_11(v92, (void (*)(void))v205);
    goto LABEL_49;
  }
  uint64_t v35 = v220;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v28 / v215, v220);
  BOOL v33 = v35 + v31 * v215;
  if (v31 * v215 >= 1 && v226 < a2)
  {
    v217 = -v215;
    v203 = v8;
    while (1)
    {
      v210 = a3;
      unint64_t v118 = v217;
      v207 = v33 + v217;
      uint64_t v119 = (uint64_t)v214;
      _s15ConversationKit11ParticipantVWOcTm_17(v33 + v217, (uint64_t)v214);
      v206 = (id *)(a2 + v118);
      _s15ConversationKit11ParticipantVWOcTm_17(a2 + v118, (uint64_t)v218);
      uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      v213 = v200;
      uint64_t v121 = *(void *)(*(void *)(v120 - 8) + 64);
      MEMORY[0x1F4188790](v120 - 8);
      uint64_t v122 = (char *)v200 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
      long long v123 = v205;
      _s15ConversationKit11ParticipantVWOcTm_17(v119, (uint64_t)v205);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        Swift::Int v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        long long v125 = (uint64_t)v123 + *(int *)(v124 + 48);
        outlined consume of Participant.CopresenceInfo?(*(uint64_t *)((char *)v123 + *(int *)(v124 + 64)), *(uint64_t *)((char *)v123 + *(int *)(v124 + 64) + 8));
        uint64_t v126 = type metadata accessor for Date();
        long long v127 = v123;
        uint64_t v128 = v126;
        (*(void (**)(char *, id *, uint64_t))(*(void *)(v126 - 8) + 32))((char *)v200 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0), v127, v126);
        outlined destroy of Participant.MediaInfo(v125);
        long long v129 = (char *)v200 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v130 = 0;
        uint64_t v131 = v128;
      }
      else
      {
        _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v123, (void (*)(void))type metadata accessor for Participant.State);
        uint64_t v131 = type metadata accessor for Date();
        long long v129 = (char *)v200 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v130 = 1;
      }
      uint64_t v132 = __swift_storeEnumTagSinglePayload((uint64_t)v129, v130, 1, v131);
      MEMORY[0x1F4188790](v132);
      uint64_t v133 = (char *)v200 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v218, (uint64_t)v8);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v216 = a2;
      v211 = v200;
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v136 = (uint64_t)&v8[*(int *)(v135 + 48)];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v8[*(int *)(v135 + 64)], *(void *)&v8[*(int *)(v135 + 64) + 8]);
        uint64_t v137 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32))(v133, v8, v137);
        outlined destroy of Participant.MediaInfo(v136);
        uint64_t v138 = (uint64_t)v133;
        uint64_t v139 = 0;
      }
      else
      {
        _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v8, (void (*)(void))type metadata accessor for Participant.State);
        uint64_t v137 = type metadata accessor for Date();
        uint64_t v138 = (uint64_t)v133;
        uint64_t v139 = 1;
      }
      __swift_storeEnumTagSinglePayload(v138, v139, 1, v137);
      uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
      v209 = v200;
      uint64_t v141 = MEMORY[0x1F4188790](v140 - 8);
      uint64_t v143 = (char *)v200 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v144 = (uint64_t)&v143[*(int *)(v141 + 56)];
      outlined init with take of Date?((uint64_t)v122, (uint64_t)v143);
      outlined init with take of Date?((uint64_t)v133, v144);
      type metadata accessor for Date();
      uint64_t v145 = __swift_getEnumTagSinglePayload((uint64_t)v143, 1, v137);
      uint64_t v146 = __swift_getEnumTagSinglePayload(v144, 1, v137);
      if (v145 == 1) {
        break;
      }
      id v167 = *(void *)(v137 - 8);
      id v168 = v167;
      if (v146 == 1)
      {
        (*(void (**)(char *, uint64_t))(v167 + 8))(v143, v137);
        id v169 = 1;
      }
      else
      {
        v202 = v200;
        uint64_t v170 = *(void *)(v167 + 64);
        MEMORY[0x1F4188790](v146);
        v208 = v33;
        id v171 = (char *)v200 - ((v170 + 15) & 0xFFFFFFFFFFFFFFF0);
        v172 = *(uint64_t (**)(char *, char *, uint64_t))(v168 + 32);
        uint64_t v173 = v172(v171, v143, v137);
        v201 = v200;
        MEMORY[0x1F4188790](v173);
        BOOL v33 = v208;
        v172(v171, (char *)v144, v137);
        uint64_t v8 = v203;
        id v169 = static Date.< infix(_:_:)();
        v174 = *(void (**)(char *, uint64_t))(v168 + 8);
        v174(v171, v137);
        v174(v171, v137);
      }
      a2 = v216;
      int64_t v15 = v212;
LABEL_115:
      v196 = v210;
      a3 = v210 + v217;
      _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v218, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_11((uint64_t)v214, (void (*)(void))type metadata accessor for Participant);
      if (v169)
      {
        if (v196 >= a2 && a3 < a2)
        {
          if (v196 == a2)
          {
            a2 = (unint64_t)v206;
            goto LABEL_136;
          }
          a2 = (unint64_t)v206;
          goto LABEL_133;
        }
        a2 = (unint64_t)v206;
      }
      else
      {
        if (v196 >= v33 && a3 < v33)
        {
          if (v196 == v33)
          {
            BOOL v33 = v207;
            goto LABEL_136;
          }
          BOOL v33 = v207;
LABEL_133:
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_136;
        }
        BOOL v33 = v207;
      }
      swift_arrayInitWithTakeFrontToBack();
LABEL_136:
      if (v33 <= v220 || a2 <= v226) {
        goto LABEL_23;
      }
    }
    if (v146 != 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v144, (uint64_t *)&demangling cache variable for type metadata for Date?);
      id v169 = 0;
      a2 = v216;
      goto LABEL_115;
    }
    uint64_t v147 = *(id *)((char *)v214 + *(int *)(v15 + 28));
    v208 = v33;
    if (v147)
    {
      double v148 = v147;
      int v149 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v148);
      if (v150)
      {
        char v151 = (id *)v149;
        long long v152 = v150;
        if (objc_msgSend(v148, sel_shouldHideContact))
        {
          v202 = v151;
          char v153 = type metadata accessor for PersonNameComponents();
          id v154 = *(void *)(v153 - 8);
          MEMORY[0x1F4188790](v153);
          CGRect v156 = (char *)v200 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0);
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          PersonNameComponents.givenName.setter();
          PersonNameComponents.familyName.setter();
          char v157 = v152;
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v158 = (id)static NSPersonNameComponentsFormatter.initials;
          uint64_t v159 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          uint64_t v160 = objc_msgSend(v158, sel_stringFromPersonNameComponents_, v159);

          uint64_t v161 = (id *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          CGRect v163 = v162;

          (*(void (**)(char *, uint64_t))(v154 + 8))(v156, v153);
          v223 = v161;
          v224 = v163;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          CGRect v164 = 0;
          uint64_t v165 = v157;
          id v166 = v202;
          int64_t v15 = v212;
LABEL_105:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v221 = v166;
          v222 = v165;
          uint64_t v177 = *(id *)((char *)v218 + *(int *)(v15 + 28));
          v202 = v165;
          if (v177)
          {
            v178 = v177;
            v201 = (id *)outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v178);
            if (v179)
            {
              v180 = v179;
              if (objc_msgSend(v178, sel_shouldHideContact))
              {
                v200[0] = v178;
                uint64_t v181 = type metadata accessor for PersonNameComponents();
                v182 = *(void *)(v181 - 8);
                MEMORY[0x1F4188790](v181);
                long long v184 = (char *)v200 - ((v183 + 15) & 0xFFFFFFFFFFFFFFF0);
                swift_bridgeObjectRetain();
                PersonNameComponents.init()();
                PersonNameComponents.givenName.setter();
                PersonNameComponents.familyName.setter();
                BOOL v33 = v208;
                if (one-time initialization token for initials != -1) {
                  swift_once();
                }
                swift_beginAccess();
                long long v185 = (id)static NSPersonNameComponentsFormatter.initials;
                long long v186 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                long long v187 = objc_msgSend(v185, sel_stringFromPersonNameComponents_, v186);

                long long v188 = (id *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                long long v190 = v189;

                (*(void (**)(char *, uint64_t))(v182 + 8))(v184, v181);
                v223 = v188;
                v224 = v190;
                lazy protocol witness table accessor for type String and conformance String();
                StringProtocol.localizedUppercase.getter();

                swift_bridgeObjectRelease();
                v191 = 0;
                v192 = v201;
                goto LABEL_114;
              }

              swift_bridgeObjectRelease();
            }
            else
            {
            }
          }
          long long v193 = v204;
          _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v218, v204);
          swift_retain();
          ParticipantContactDetailsCache.contactDetails(for:)();
          v191 = v223;
          v192 = v224;
          v180 = v225;
          v194 = v223;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          _s15ConversationKit11ParticipantVWOhTm_11(v193, (void (*)(void))type metadata accessor for Participant);
          BOOL v33 = v208;
LABEL_114:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v223 = v192;
          v224 = v180;
          lazy protocol witness table accessor for type String and conformance String();
          v195 = StringProtocol.localizedCompare<A>(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v169 = v195 == 1;
          a2 = v216;
          int64_t v15 = v212;
          uint64_t v8 = v203;
          goto LABEL_115;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    id v175 = v204;
    _s15ConversationKit11ParticipantVWOcTm_17((uint64_t)v214, v204);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    CGRect v164 = v223;
    v202 = v224;
    uint64_t v165 = v225;
    v176 = v223;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    id v166 = v202;
    _s15ConversationKit11ParticipantVWOhTm_11(v175, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_105;
  }
LABEL_23:
  unint64_t v37 = v33 - v220;
  if (v215 != -1 || v37 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v220, v37 / v215, a2);
    return;
  }
LABEL_144:
  __break(1u);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(char *, void);
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t (*v30)(char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t (**v45)(char *, uint64_t);
  void (*v46)(char *, unint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t (*v50)(char *, uint64_t);
  unint64_t v53;
  uint64_t v55;
  uint64_t v57;
  unint64_t v58;
  uint64_t (**v59)(char *, uint64_t);
  uint64_t v60;
  void (*v61)(char *, unint64_t, uint64_t);
  unint64_t v62;
  uint64_t (**v63)(char *, uint64_t);
  unint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;

  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  if (!v10)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v11 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v10 == -1) {
    goto LABEL_76;
  }
  int64_t v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v10 == -1) {
    goto LABEL_77;
  }
  int64_t v15 = v8;
  uint64_t v16 = v11 / v10;
  uint64_t v17 = v13 / v10;
  unint64_t v68 = *(void *)(*(void *)(v8 - 8) + 72);
  if (v11 / v10 >= v13 / v10)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v13 / v10, a4);
    uint64_t v20 = (void (**)(char *, void))(a4 + v17 * v10);
    if (v17 * v10 < 1 || a1 >= a2) {
      goto LABEL_70;
    }
    uint64_t v62 = -v10;
    unint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    unint64_t v40 = v9 + 16;
    char v60 = *(void *)(v40 + 48);
    uint64_t v61 = v41;
    BOOL v67 = v40;
    uint64_t v58 = a4;
    uint64_t v59 = (uint64_t (**)(char *, uint64_t))(v40 - 8);
    uint64_t v69 = a1;
    while (1)
    {
      uint64_t v66 = &v57;
      uint64_t v42 = v62;
      uint64_t v64 = a3;
      uint64_t v70 = a3 + v62;
      unint64_t v43 = v60;
      MEMORY[0x1F4188790](v38);
      uint64_t v44 = (char *)&v57 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v63 = v45;
      uint64_t v46 = v61;
      uint64_t v47 = ((uint64_t (*)(char *))v61)(v44);
      uint64_t v65 = &v57;
      Swift::Int v48 = a2 + v42;
      MEMORY[0x1F4188790](v47);
      v46(v44, a2 + v42, v15);
      _s10Foundation4UUIDVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1F418BF68]);
      int v49 = dispatch thunk of static Comparable.< infix(_:_:)();
      unint64_t v50 = *v59;
      (*v59)(v44, v15);
      uint64_t v38 = v50(v44, v15);
      if (v49) {
        break;
      }
      a3 = v70;
      if (v64 < (unint64_t)v20 || v70 >= (unint64_t)v20)
      {
        uint64_t v20 = (void (**)(char *, void))v63;
        uint64_t v38 = swift_arrayInitWithTakeFrontToBack();
LABEL_59:
        a4 = v58;
        uint64_t v10 = v68;
        long long v53 = v69;
        goto LABEL_66;
      }
      a4 = v58;
      uint64_t v10 = v68;
      long long v53 = v69;
      if ((void (**)(char *, void))v64 == v20)
      {
        uint64_t v20 = (void (**)(char *, void))v63;
      }
      else
      {
        uint64_t v20 = (void (**)(char *, void))v63;
        uint64_t v38 = swift_arrayInitWithTakeBackToFront();
      }
LABEL_66:
      if ((unint64_t)v20 <= a4 || a2 <= v53) {
        goto LABEL_70;
      }
    }
    a3 = v70;
    if (v64 >= a2 && v70 < a2)
    {
      a4 = v58;
      uint64_t v10 = v68;
      long long v53 = v69;
      if (v64 != a2) {
        uint64_t v38 = swift_arrayInitWithTakeBackToFront();
      }
      a2 = v48;
      goto LABEL_66;
    }
    uint64_t v38 = swift_arrayInitWithTakeFrontToBack();
    a2 += v42;
    goto LABEL_59;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v11 / v10, a4);
  unint64_t v19 = v16 * v10;
  uint64_t v20 = (void (**)(char *, void))(a4 + v16 * v10);
  if (v19 >= 1 && a2 < a3)
  {
    uint64_t v23 = *(uint64_t **)(v9 + 16);
    unint64_t v22 = v9 + 16;
    uint64_t v64 = *(void *)(v22 + 48);
    uint64_t v65 = v23;
    BOOL v67 = v22;
    uint64_t v62 = (unint64_t)v20;
    uint64_t v63 = (uint64_t (**)(char *, uint64_t))(v22 - 8);
    uint64_t v70 = a3;
    do
    {
      uint64_t v69 = a1;
      uint64_t v66 = &v57;
      uint64_t v24 = v64;
      MEMORY[0x1F4188790](v18);
      BOOL v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v26 = a4;
      Swift::Int v27 = v65;
      unint64_t v28 = ((uint64_t (*)(char *, unint64_t, uint64_t))v65)(v25, a2, v15);
      MEMORY[0x1F4188790](v28);
      ((void (*)(char *, unint64_t, uint64_t))v27)(v25, v26, v15);
      _s10Foundation4UUIDVACSQAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1F418BF68]);
      uint64_t v29 = dispatch thunk of static Comparable.< infix(_:_:)();
      unint64_t v30 = *v63;
      (*v63)(v25, v15);
      uint64_t v18 = v30(v25, v15);
      if (v29)
      {
        uint64_t v10 = v68;
        char v31 = v69;
        BOOL v32 = a2 + v68;
        BOOL v33 = v69 < a2 || v69 >= v32;
        a4 = v26;
        if (!v33)
        {
          int64_t v36 = v70;
          if (v69 != a2) {
            uint64_t v18 = swift_arrayInitWithTakeBackToFront();
          }
          goto LABEL_35;
        }
        uint64_t v18 = swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        uint64_t v10 = v68;
        char v31 = v69;
        a4 = v26 + v68;
        unint64_t v34 = v69 < v26 || v69 >= a4;
        uint64_t v35 = v26;
        if (!v34)
        {
          int64_t v36 = v70;
          if (v69 != v35) {
            uint64_t v18 = swift_arrayInitWithTakeBackToFront();
          }
          BOOL v32 = a2;
          goto LABEL_35;
        }
        uint64_t v18 = swift_arrayInitWithTakeFrontToBack();
        BOOL v32 = a2;
      }
      int64_t v36 = v70;
LABEL_35:
      uint64_t v20 = (void (**)(char *, void))v62;
      a1 = v31 + v10;
      unint64_t v37 = a4 >= v62 || v32 >= v36;
      a2 = v32;
    }
    while (!v37);
  }
  a2 = a1;
LABEL_70:
  Swift::Int v55 = (uint64_t)v20 - a4;
  if (v10 != -1 || v55 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v55 / v10, a2);
    return;
  }
LABEL_78:
  __break(1u);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v34;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int EnumTagSinglePayload;
  char *v58;
  char *v59;
  char v60;
  void (*v61)(char *, uint64_t);
  unint64_t v62;
  uint64_t v63;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char v86;
  void (*v87)(char *, uint64_t);
  unint64_t v88;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;

  unint64_t v109 = type metadata accessor for Participant.State(0);
  uint64_t v8 = MEMORY[0x1F4188790](v109);
  uint64_t v93 = (uint64_t)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v92 - v11;
  int64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v96 = (char *)&v92 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v101 = (unint64_t)&v92 - v15;
  uint64_t v103 = type metadata accessor for Participant(0);
  uint64_t v16 = MEMORY[0x1F4188790](v103);
  uint64_t v108 = (uint64_t *)((char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  id v105 = (uint64_t *)((char *)&v92 - v19);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v107 = (unint64_t)&v92 - v21;
  MEMORY[0x1F4188790](v20);
  unint64_t v104 = (uint64_t *)((char *)&v92 - v22);
  uint64_t v24 = *(void *)(v23 + 72);
  if (!v24)
  {
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  uint64_t v99 = a1;
  BOOL v25 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v24 == -1) {
    goto LABEL_97;
  }
  Swift::Int v27 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v24 == -1) {
    goto LABEL_98;
  }
  uint64_t v29 = v25 / v24;
  unint64_t v30 = v27 / v24;
  id v98 = v24;
  if (v25 / v24 >= v27 / v24)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v27 / v24, a4);
    unint64_t v34 = v30 * v24;
    BOOL v32 = (char *)(a4 + v30 * v24);
    if (v34 < 1 || v99 >= a2) {
      goto LABEL_22;
    }
    BOOL v67 = -v24;
    uint64_t v96 = v12;
    uint64_t v97 = (uint64_t *)v67;
    uint64_t v106 = a4;
    while (1)
    {
      uint64_t v107 = a3;
      uint64_t v110 = (unint64_t)v32;
      unint64_t v68 = (uint64_t)&v32[v67];
      unint64_t v102 = &v32[v67];
      uint64_t v69 = (uint64_t)v105;
      _s15ConversationKit11ParticipantVWOcTm_19(v68, (uint64_t)v105);
      uint64_t v101 = a2 + v67;
      _s15ConversationKit11ParticipantVWOcTm_19(a2 + v67, (uint64_t)v108);
      uint64_t v70 = type metadata accessor for Date();
      unint64_t v104 = &v92;
      uint64_t v71 = *(void **)(v70 - 8);
      uint64_t v72 = v71[8];
      MEMORY[0x1F4188790](v70);
      uint64_t v100 = (char *)&v92 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      int v74 = *(void *)(*(void *)(v73 - 8) + 64);
      MEMORY[0x1F4188790](v73 - 8);
      _s15ConversationKit11ParticipantVWOcTm_19(v69, (uint64_t)v12);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v76 = *(int *)(v75 + 48);
        Swift::Int v111 = a2;
        BOOL v77 = &v12[v76];
        outlined consume of Participant.CopresenceInfo?(*(void *)&v12[*(int *)(v75 + 64)], *(void *)&v12[*(int *)(v75 + 64) + 8]);
        unint64_t v95 = (void (*)(char *, char *, uint64_t))v71[4];
        v95((char *)&v92 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v70);
        uint64_t v78 = (uint64_t)v77;
        a2 = v111;
        outlined destroy of Participant.MediaInfo(v78);
        __swift_storeEnumTagSinglePayload((uint64_t)&v92 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v70);
        if (__swift_getEnumTagSinglePayload((uint64_t)&v92 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v70) != 1)
        {
          char v79 = ((uint64_t (*)(char *, char *, uint64_t))v95)(v100, (char *)&v92 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), v70);
          uint64_t v94 = &v92;
          uint64_t v80 = MEMORY[0x1F4188790](v79);
          uint64_t v81 = (char *)&v92 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
          MEMORY[0x1F4188790](v80);
          uint64_t v82 = (char *)&v92 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v83 = v93;
          _s15ConversationKit11ParticipantVWOcTm_19((uint64_t)v108, v93);
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            BOOL v84 = v83 + *(int *)(v75 + 48);
            outlined consume of Participant.CopresenceInfo?(*(void *)(v83 + *(int *)(v75 + 64)), *(void *)(v83 + *(int *)(v75 + 64) + 8));
            v95(v82, (char *)v83, v70);
            outlined destroy of Participant.MediaInfo(v84);
            __swift_storeEnumTagSinglePayload((uint64_t)v82, 0, 1, v70);
            if (__swift_getEnumTagSinglePayload((uint64_t)v82, 1, v70) != 1)
            {
              v95(v81, v82, v70);
              uint64_t v85 = v100;
              uint64_t v86 = static Date.< infix(_:_:)();
              UIMenuElementSize v87 = (void (*)(char *, uint64_t))v71[1];
              v87(v81, v70);
              v87(v85, v70);
LABEL_70:
              a2 = v111;
              uint64_t v12 = v96;
              goto LABEL_71;
            }
          }
          else
          {
            _s15ConversationKit11ParticipantVWOhTm_13(v83, (void (*)(void))type metadata accessor for Participant.State);
            __swift_storeEnumTagSinglePayload((uint64_t)v82, 1, 1, v70);
          }
          ((void (*)(char *, uint64_t))v71[1])(v100, v70);
          outlined destroy of SystemUpdateNotice?((uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for Date?);
          uint64_t v86 = 0;
          goto LABEL_70;
        }
      }
      else
      {
        _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v12, (void (*)(void))type metadata accessor for Participant.State);
        __swift_storeEnumTagSinglePayload((uint64_t)&v92 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v70);
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)&v92 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v86 = 0;
      uint64_t v12 = v96;
LABEL_71:
      BOOL v67 = (uint64_t)v97;
      uint64_t v88 = v107;
      a3 = (unint64_t)v97 + v107;
      _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v108, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v105, (void (*)(void))type metadata accessor for Participant);
      a4 = v106;
      if (v86)
      {
        if (v88 < a2 || a3 >= a2)
        {
          a2 = v101;
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v88 == a2)
        {
          a2 = v101;
        }
        else
        {
          a2 = v101;
          swift_arrayInitWithTakeBackToFront();
        }
        BOOL v32 = (char *)v110;
      }
      else if (v88 < v110 || a3 >= v110)
      {
        BOOL v32 = v102;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        BOOL v32 = v102;
        if (v88 != v110) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      if ((unint64_t)v32 <= a4 || a2 <= v99) {
        goto LABEL_22;
      }
    }
  }
  char v31 = v99;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v99, v25 / v24, a4);
  BOOL v32 = (char *)(a4 + v29 * v24);
  if (v29 * v24 >= 1 && a2 < a3)
  {
    uint64_t v110 = a4 + v29 * v24;
    uint64_t v100 = (char *)a3;
    while (1)
    {
      Swift::Int v111 = a2;
      uint64_t v38 = (uint64_t)v104;
      _s15ConversationKit11ParticipantVWOcTm_19(a2, (uint64_t)v104);
      _s15ConversationKit11ParticipantVWOcTm_19(a4, v107);
      uint64_t v39 = type metadata accessor for Date();
      id v105 = &v92;
      unint64_t v40 = *(void *)(v39 - 8);
      unint64_t v41 = *(void *)(v40 + 64);
      MEMORY[0x1F4188790](v39);
      unint64_t v102 = (char *)&v92 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v108 = &v92;
      unint64_t v43 = *(void *)(*(void *)(v42 - 8) + 64);
      MEMORY[0x1F4188790](v42 - 8);
      uint64_t v44 = v101;
      _s15ConversationKit11ParticipantVWOcTm_19(v38, v101);
      if (swift_getEnumCaseMultiPayload() != 4) {
        break;
      }
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v46 = *(int *)(v45 + 48);
      uint64_t v106 = a4;
      uint64_t v47 = v44 + v46;
      outlined consume of Participant.CopresenceInfo?(*(void *)(v44 + *(int *)(v45 + 64)), *(void *)(v44 + *(int *)(v45 + 64) + 8));
      uint64_t v99 = v40;
      Swift::Int v48 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 32);
      v48((char *)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), v44, v39);
      int v49 = v47;
      a4 = v106;
      outlined destroy of Participant.MediaInfo(v49);
      __swift_storeEnumTagSinglePayload((uint64_t)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v39);
      if (__swift_getEnumTagSinglePayload((uint64_t)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v39) == 1) {
        goto LABEL_39;
      }
      unint64_t v50 = ((uint64_t (*)(char *, char *, uint64_t))v48)(v102, (char *)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), v39);
      uint64_t v108 = &v92;
      unint64_t v51 = MEMORY[0x1F4188790](v50);
      unint64_t v52 = (char *)&v92 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v97 = &v92;
      MEMORY[0x1F4188790](v51);
      long long v53 = (char *)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v54 = (uint64_t)v96;
      _s15ConversationKit11ParticipantVWOcTm_19(v107, (uint64_t)v96);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        _s15ConversationKit11ParticipantVWOhTm_13(v54, (void (*)(void))type metadata accessor for Participant.State);
        __swift_storeEnumTagSinglePayload((uint64_t)v53, 1, 1, v39);
        uint64_t v58 = v100;
LABEL_58:
        (*(void (**)(char *, uint64_t))(v99 + 8))(v102, v39);
        outlined destroy of SystemUpdateNotice?((uint64_t)v53, (uint64_t *)&demangling cache variable for type metadata for Date?);
        goto LABEL_40;
      }
      Swift::Int v55 = v54 + *(int *)(v45 + 48);
      outlined consume of Participant.CopresenceInfo?(*(void *)(v54 + *(int *)(v45 + 64)), *(void *)(v54 + *(int *)(v45 + 64) + 8));
      v48(v53, v54, v39);
      unint64_t v56 = v55;
      a4 = v106;
      outlined destroy of Participant.MediaInfo(v56);
      __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v39);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v53, 1, v39);
      uint64_t v58 = v100;
      if (EnumTagSinglePayload == 1) {
        goto LABEL_58;
      }
      v48(v52, (uint64_t)v53, v39);
      uint64_t v59 = v102;
      char v60 = static Date.< infix(_:_:)();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v99 + 8);
      v61(v52, v39);
      v61(v59, v39);
      _s15ConversationKit11ParticipantVWOhTm_13(v107, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v104, (void (*)(void))type metadata accessor for Participant);
      uint64_t v62 = v111;
      uint64_t v63 = v98;
      if ((v60 & 1) == 0) {
        goto LABEL_41;
      }
      a2 = v111 + v98;
      if (v31 >= v111 && v31 < a2)
      {
        BOOL v32 = (char *)v110;
        if (v31 != v111) {
          swift_arrayInitWithTakeBackToFront();
        }
        goto LABEL_51;
      }
      swift_arrayInitWithTakeFrontToBack();
LABEL_50:
      BOOL v32 = (char *)v110;
LABEL_51:
      v31 += v63;
      if (a4 >= (unint64_t)v32 || a2 >= (unint64_t)v58) {
        goto LABEL_16;
      }
    }
    _s15ConversationKit11ParticipantVWOhTm_13(v44, (void (*)(void))type metadata accessor for Participant.State);
    __swift_storeEnumTagSinglePayload((uint64_t)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v39);
LABEL_39:
    outlined destroy of SystemUpdateNotice?((uint64_t)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v58 = v100;
LABEL_40:
    _s15ConversationKit11ParticipantVWOhTm_13(v107, (void (*)(void))type metadata accessor for Participant);
    _s15ConversationKit11ParticipantVWOhTm_13((uint64_t)v104, (void (*)(void))type metadata accessor for Participant);
    uint64_t v62 = v111;
    uint64_t v63 = v98;
LABEL_41:
    if (v31 < a4 || v31 >= a4 + v63)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v31 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a2 = v62;
    a4 += v63;
    goto LABEL_50;
  }
LABEL_16:
  a2 = v31;
LABEL_22:
  int64_t v36 = &v32[-a4];
  if (v98 != -1 || v36 != (char *)0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, (uint64_t)v36 / v98, a2);
    return;
  }
LABEL_99:
  __break(1u);
}

{
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  int64_t v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;

  unint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
  uint64_t v8 = *(void *)(v52 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  if (!v9)
  {
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v10 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v9 == -1) {
    goto LABEL_56;
  }
  uint64_t v12 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v9 == -1) {
    goto LABEL_57;
  }
  unint64_t v51 = a3;
  uint64_t v14 = v10 / v9;
  int64_t v15 = v12 / v9;
  Swift::Int v48 = v9;
  if (v10 / v9 < v12 / v9)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v10 / v9);
    uint64_t v17 = a4 + v14 * v9;
    if (v14 * v9 >= 1 && a2 < v51)
    {
      unint64_t v19 = *(uint64_t **)(v8 + 64);
      int v49 = a4 + v14 * v9;
      unint64_t v50 = v19;
      do
      {
        uint64_t v20 = v50;
        MEMORY[0x1F4188790](v16);
        char v21 = a4;
        unint64_t v22 = (char *)&v43 - (((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v23 = outlined init with copy of Conversation?(a2, (uint64_t)v22, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
        MEMORY[0x1F4188790](v23);
        outlined init with copy of Conversation?(a4, (uint64_t)v22, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
        uint64_t v16 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v22, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
        uint64_t v24 = v48;
        a4 += v48;
        if (a1 < v21 || a1 >= a4)
        {
          uint64_t v16 = swift_arrayInitWithTakeFrontToBack();
          uint64_t v26 = a2;
          Swift::Int v27 = v51;
        }
        else
        {
          Swift::Int v27 = v51;
          if (a1 != v21) {
            uint64_t v16 = swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v26 = a2;
        }
        uint64_t v17 = v49;
        a1 += v24;
        unint64_t v28 = a4 >= v49 || v26 >= v27;
        a2 = v26;
      }
      while (!v28);
    }
    goto LABEL_49;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v12 / v9);
  uint64_t v17 = a4 + v15 * v9;
  if (v15 * v9 >= 1 && a1 < a2)
  {
    uint64_t v47 = -v9;
    unint64_t v30 = *(void *)(v8 + 64);
    uint64_t v45 = a4;
    uint64_t v46 = v30;
    char v31 = v51;
    uint64_t v44 = a1;
    do
    {
      unint64_t v50 = &v43;
      BOOL v32 = v31;
      BOOL v33 = v46;
      unint64_t v34 = v47;
      unint64_t v51 = v31 + v47;
      MEMORY[0x1F4188790](v17 + v47);
      uint64_t v35 = (char *)&v43 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
      int v49 = v36;
      unint64_t v37 = outlined init with copy of Conversation?(v36, (uint64_t)v35, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      MEMORY[0x1F4188790](v37);
      outlined init with copy of Conversation?(a2 + v34, (uint64_t)v35, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v35, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v35, &demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
      char v31 = v51;
      if (v32 < v17 || v51 >= v17)
      {
        uint64_t v17 = v49;
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v39 = v44;
        a4 = v45;
      }
      else
      {
        uint64_t v39 = v44;
        a4 = v45;
        if (v32 == v17)
        {
          uint64_t v17 = v49;
        }
        else
        {
          uint64_t v17 = v49;
          swift_arrayInitWithTakeBackToFront();
        }
      }
    }
    while (v17 > a4 && a2 > v39);
LABEL_49:
    uint64_t v9 = v48;
  }
  unint64_t v41 = v17 - a4;
  if (v9 != -1 || v41 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v41 / v9);
    return;
  }
LABEL_58:
  __break(1u);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  int64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  unint64_t v52 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v52);
  unint64_t v51 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v50 = (uint64_t)&v44 - v10;
  uint64_t v12 = *(void *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  int64_t v13 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_76;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1) {
    goto LABEL_77;
  }
  uint64_t v17 = v13 / v12;
  uint64_t v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v15 / v12, a4);
    unint64_t v28 = v18 * v12;
    unint64_t v19 = a4 + v18 * v12;
    if (v28 < 1 || a1 >= a2) {
      goto LABEL_70;
    }
    uint64_t v47 = a1;
    Swift::Int v48 = -v12;
    uint64_t v45 = v12;
    uint64_t v46 = a4;
    while (1)
    {
      unint64_t v30 = a3;
      char v31 = v48;
      BOOL v32 = a3 + v48;
      int v49 = v19 + v48;
      BOOL v33 = v50;
      outlined init with copy of Participant(v19 + v48, v50, (void (*)(void))type metadata accessor for Participant);
      unint64_t v34 = a2 + v31;
      uint64_t v35 = a2 + v31;
      int64_t v36 = v51;
      outlined init with copy of Participant(v35, v51, (void (*)(void))type metadata accessor for Participant);
      unint64_t v37 = MEMORY[0x1C876F0D0](v33 + *(int *)(v52 + 20), v36 + *(int *)(v52 + 20));
      _s15ConversationKit11ParticipantVWOhTm_11(v36, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_11(v33, (void (*)(void))type metadata accessor for Participant);
      if (v37)
      {
        uint64_t v38 = v30 < a2 || v32 >= a2;
        a3 = v32;
        if (!v38)
        {
          unint64_t v40 = v47;
          if (v30 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v34;
          goto LABEL_65;
        }
        swift_arrayInitWithTakeFrontToBack();
        a2 = v34;
      }
      else
      {
        uint64_t v39 = v30 < v19 || v32 >= v19;
        a3 = v32;
        if (!v39)
        {
          unint64_t v40 = v47;
          if (v30 == v19)
          {
            unint64_t v19 = v49;
          }
          else
          {
            unint64_t v19 = v49;
            swift_arrayInitWithTakeBackToFront();
          }
LABEL_65:
          uint64_t v12 = v45;
          a4 = v46;
          goto LABEL_66;
        }
        unint64_t v19 = v49;
        swift_arrayInitWithTakeFrontToBack();
      }
      uint64_t v12 = v45;
      a4 = v46;
      unint64_t v40 = v47;
LABEL_66:
      if (v19 <= a4 || a2 <= v40) {
        goto LABEL_70;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v13 / v12, a4);
  unint64_t v19 = a4 + v17 * v12;
  if (v17 * v12 >= 1 && a2 < a3)
  {
    int v49 = a4 + v17 * v12;
    do
    {
      char v21 = v50;
      outlined init with copy of Participant(a2, v50, (void (*)(void))type metadata accessor for Participant);
      unint64_t v22 = v51;
      outlined init with copy of Participant(a4, v51, (void (*)(void))type metadata accessor for Participant);
      uint64_t v23 = MEMORY[0x1C876F0D0](v21 + *(int *)(v52 + 20), v22 + *(int *)(v52 + 20));
      _s15ConversationKit11ParticipantVWOhTm_11(v22, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOhTm_11(v21, (void (*)(void))type metadata accessor for Participant);
      if (v23)
      {
        uint64_t v24 = a2 + v12;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        if (a1 < a4 || a1 >= a4 + v12)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v24 = a2;
        a4 += v12;
      }
      unint64_t v19 = v49;
      a1 += v12;
      Swift::Int v27 = a4 >= v49 || v24 >= a3;
      a2 = v24;
    }
    while (!v27);
  }
  a2 = a1;
LABEL_70:
  uint64_t v42 = v19 - a4;
  if (v12 != -1 || v42 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v42 / v12, a2);
    return;
  }
LABEL_78:
  __break(1u);
}

uint64_t outlined consume of Set<TUHandle>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C305C0BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of (offset: Int, element: CaptionSectioner.Caption)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CaptionSectioner.Caption)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CaptionSectioner.Caption?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.Caption?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in CaptionSectioner.gatherAndSortCaptions()@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return closure #1 in closure #1 in CaptionSectioner.gatherAndSortCaptions()(a1, *(void *)(v2 + 24), a2);
}

uint64_t outlined copy of Participant.CaptionInfo?(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void OUTLINED_FUNCTION_41_4()
{
  static Participant.== infix(_:_:)();
}

uint64_t CallScreening.CallStateObserver.logger.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t CallScreening.CallStateObserver.stateMachine.getter()
{
  type metadata accessor for CallScreening.CallStateObserver();
  return swift_retain();
}

uint64_t type metadata accessor for CallScreening.CallStateObserver()
{
  uint64_t result = type metadata singleton initialization cache for CallScreening.CallStateObserver;
  if (!type metadata singleton initialization cache for CallScreening.CallStateObserver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CallScreening.CallStateObserver.statusService.getter()
{
  type metadata accessor for CallScreening.CallStateObserver();
  return swift_retain();
}

uint64_t CallScreening.CallStateObserver.start(onCallStatusUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CallScreening.CallStateObserver();
  uint64_t v6 = OUTLINED_FUNCTION_1(v5);
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v15 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v15);
  outlined init with copy of CallScreening.CallStateObserver(v2, (uint64_t)v11);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v16 = static MainActor.shared.getter();
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = MEMORY[0x1E4FBCFD8];
  *(void *)(v19 + 16) = v16;
  *(void *)(v19 + 24) = v20;
  outlined init with take of CallScreening.CallStateObserver((uint64_t)v11, v19 + v17);
  char v21 = (void *)(v19 + v18);
  *char v21 = a1;
  v21[1] = a2;
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
}

uint64_t closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[23] = a5;
  unsigned char v6[24] = a6;
  v6[22] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>);
  v6[25] = v7;
  v6[26] = *(void *)(v7 - 8);
  v6[27] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>.Iterator);
  v6[28] = v8;
  v6[29] = *(void *)(v8 - 8);
  v6[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CallScreening.CallStateObserver();
  v6[31] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[32] = v10;
  v6[33] = *(void *)(v10 + 64);
  v6[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[35] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v6[36] = v11;
  v6[37] = *(void *)(v11 - 8);
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v6[41] = type metadata accessor for MainActor();
  v6[42] = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[43] = v13;
  v6[44] = v12;
  return MEMORY[0x1F4188298](closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v13, v12);
}

uint64_t closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)()
{
  OUTLINED_FUNCTION_11_2();
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[22];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[45] = v5;
  v0[46] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_15_3(&dword_1C2F90000, v6, v8, "Started listening to call state changes for StateMachine");
    OUTLINED_FUNCTION_5_39();
  }
  uint64_t v9 = v0[40];
  uint64_t v11 = v0[36];
  uint64_t v10 = v0[37];
  uint64_t v13 = v0[34];
  uint64_t v12 = v0[35];
  uint64_t v30 = v0[32];
  uint64_t v14 = v0[27];
  uint64_t v33 = v0[26];
  uint64_t v31 = v0[31];
  uint64_t v32 = v0[25];
  uint64_t v15 = v0[22];

  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v0[47] = v16;
  v0[48] = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v9, v11);
  uint64_t v17 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v12, 1, 1, v17);
  outlined init with copy of CallScreening.CallStateObserver(v15, v13);
  uint64_t v18 = static MainActor.shared.getter();
  unint64_t v19 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = MEMORY[0x1E4FBCFD8];
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v21;
  outlined init with take of CallScreening.CallStateObserver(v13, v20 + v19);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  v0[18] = *(void *)(*(void *)(v15 + *(int *)(v31 + 24)) + 16);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<AnsweringMachineCallStatus, Never>);
  uint64_t v23 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<AnsweringMachineCallStatus, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<AnsweringMachineCallStatus, Never>);
  MEMORY[0x1C8770AF0](v22, v23);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v14, v32);
  v0[49] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>.Iterator);
  uint64_t v24 = swift_task_alloc();
  BOOL v25 = (void *)OUTLINED_FUNCTION_16_13(v24);
  *BOOL v25 = v26;
  v25[1] = closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
  OUTLINED_FUNCTION_7_6();
  return MEMORY[0x1F4187C78](v27);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 408) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 392);
  if (v0)
  {
    if (v5)
    {
      swift_getObjectType();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    uint64_t v10 = closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
  }
  else
  {
    if (v5)
    {
      swift_getObjectType();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v9;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    uint64_t v10 = closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
  }
  return MEMORY[0x1F4188298](v10, v6, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  return MEMORY[0x1F4188298](closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  *(void *)(v0 + 416) = v1;
  *(void *)(v0 + 424) = v2;
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  *(void *)(v0 + 432) = v3;
  *(void *)(v0 + 440) = v4;
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  *(void *)(v0 + 448) = v5;
  *(void *)(v0 + 456) = v6;
  os_log_type_t v7 = *(unsigned char *)(v0 + 120);
  *(unsigned char *)(v0 + 65) = v7;
  if (v2)
  {
    uint64_t v8 = *(void *)(v0 + 248);
    *(void *)(v0 + 16) = v1;
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v3;
    *(void *)(v0 + 40) = v4;
    *(unsigned char *)(v0 + 48) = v5;
    *(unsigned char *)(v0 + 49) = BYTE1(v5) & 1;
    *(unsigned char *)(v0 + 50) = BYTE2(v5) & 1;
    *(unsigned char *)(v0 + 51) = BYTE3(v5) & 1;
    *(void *)(v0 + 56) = v6;
    *(unsigned char *)(v0 + 64) = v7 & 1;
    *(_DWORD *)(v0 + 68) = *(_DWORD *)(v8 + 20);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v9;
    *uint64_t v9 = v0;
    v9[1] = closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
    return CKStateMachine<>.update(with:)();
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 176);
    (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
    swift_release();
    v11(v12, v14, v13);
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_15_3(&dword_1C2F90000, v15, v17, "Stopped listening to call state changes for StateMachine");
      OUTLINED_FUNCTION_5_39();
    }
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    unint64_t v19 = *(void *)(v0 + 312);
    uint64_t v20 = *(void *)(v0 + 288);

    v18(v19, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v21();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v11)(void *);
  uint64_t v12;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  v3[59] = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined consume of AnsweringMachineCallStatus?(v3[52], v3[53]);
    os_log_type_t v7 = v3[43];
    uint64_t v8 = v3[44];
    return MEMORY[0x1F4188298](closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v7, v8);
  }
  else
  {
    uint64_t v11 = (uint64_t (*)(void *))(v3[23] + *(int *)v3[23]);
    uint64_t v9 = (void *)swift_task_alloc();
    v3[60] = v9;
    *uint64_t v9 = v5;
    v9[1] = closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
    return v11(v3 + 2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 152) = *(void *)(v0 + 408);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = (void *)*v0;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = v1[53];
  uint64_t v5 = v1[52];
  uint64_t v6 = (void *)*v0;
  OUTLINED_FUNCTION_13_1();
  *os_log_type_t v7 = v6;
  swift_task_dealloc();
  outlined consume of AnsweringMachineCallStatus?(v5, v4);
  uint64_t v8 = v1[44];
  uint64_t v9 = v1[43];
  return MEMORY[0x1F4188298](closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v9, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  *(void *)(v0 + 392) = static MainActor.shared.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>.Iterator);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_16_13(v1);
  *uint64_t v2 = v3;
  v2[1] = closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
  uint64_t v4 = OUTLINED_FUNCTION_14_13();
  return MEMORY[0x1F4187C78](v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 488) = *(void *)(*(void *)(v0 + 176) + *(int *)(v0 + 68));
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  v0[16] = specialized CKStateMachine.description.getter();
  v0[17] = v1;
  v0[62] = v1;
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[44];
  return MEMORY[0x1F4188298](closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v2, v3);
}

uint64_t closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_11_2();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v29 = *(void **)(v26 + 472);
  (*(void (**)(void, void, void))(v26 + 360))(*(void *)(v26 + 304), *(void *)(v26 + 176), *(void *)(v26 + 288));
  id v30 = v29;
  swift_bridgeObjectRetain();
  id v31 = v29;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = *(void *)(v26 + 496);
    uint64_t v35 = *(void *)(v26 + 128);
    int64_t v36 = *(void **)(v26 + 472);
    Swift::Int v55 = *(void (**)(uint64_t, uint64_t))(v26 + 376);
    uint64_t v53 = *(void *)(v26 + 288);
    uint64_t v54 = *(void *)(v26 + 304);
    uint64_t v37 = swift_slowAlloc();
    unint64_t v52 = (void *)swift_slowAlloc();
    a15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v26 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 12) = 2112;
    id v38 = v36;
    uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v26 + 168) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v52 = v39;

    OUTLINED_FUNCTION_11_6(&dword_1C2F90000, v40, v41, "Failed to update %{public}s and recieved error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    v55(v54, v53);
  }
  else
  {
    uint64_t v42 = *(void **)(v26 + 472);
    unint64_t v43 = *(void (**)(uint64_t, uint64_t))(v26 + 376);
    uint64_t v44 = *(void *)(v26 + 304);
    uint64_t v45 = *(void *)(v26 + 288);

    swift_bridgeObjectRelease_n();
    v43(v44, v45);
  }
  *(void *)(v26 + 392) = static MainActor.shared.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<AnsweringMachineCallStatus, Never>>.Iterator);
  uint64_t v46 = swift_task_alloc();
  uint64_t v47 = (void *)OUTLINED_FUNCTION_16_13(v46);
  *uint64_t v47 = v48;
  v47[1] = closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_7_6();
  return MEMORY[0x1F4187C78](v49);
}

uint64_t outlined init with copy of CallScreening.CallStateObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CallScreening.CallStateObserver();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C305D7CC()
{
  type metadata accessor for CallScreening.CallStateObserver();
  OUTLINED_FUNCTION_1_6();
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(unint64_t))(v3 + 8))(v0 + v2);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of CallScreening.CallStateObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CallScreening.CallStateObserver();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)()
{
  uint64_t v2 = type metadata accessor for CallScreening.CallStateObserver();
  OUTLINED_FUNCTION_1(v2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = v0 + v7;
  uint64_t v9 = (uint64_t *)(v0 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *uint64_t v12 = v1;
  v12[1] = partial apply for closure #1 in CallRecordingService.stopRecording(call:completion:);
  uint64_t v13 = OUTLINED_FUNCTION_18_10();
  return closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)(v13, v14, v15, v8, v10, v11);
}

uint64_t closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a4;
  uint64_t v5 = type metadata accessor for Logger();
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[18] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[19] = v7;
  v4[20] = v6;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v7, v6);
}

uint64_t closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 168) = v5;
  *(void *)(v0 + 176) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_15_3(&dword_1C2F90000, v6, v8, "Injecting all current calls to Answering Machine");
    OUTLINED_FUNCTION_5_39();
  }
  uint64_t v9 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 120);

  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(void *)(v0 + 184) = v12;
  *(void *)(v0 + 192) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v9, v10);
  uint64_t v13 = type metadata accessor for CallScreening.CallStateObserver();
  uint64_t v14 = CallStatusService.currentStatusForAllCalls()();
  *(void *)(v0 + 200) = v14;
  uint64_t v15 = *(void *)(v14 + 16);
  *(void *)(v0 + 208) = v15;
  if (v15)
  {
    *(_DWORD *)(v0 + 68) = *(_DWORD *)(v13 + 20);
    *(void *)(v0 + 216) = 0;
    long long v17 = *(_OWORD *)(v14 + 48);
    long long v16 = *(_OWORD *)(v14 + 64);
    long long v18 = *(_OWORD *)(v14 + 32);
    *(unsigned char *)(v0 + 64) = *(unsigned char *)(v14 + 80);
    *(_OWORD *)(v0 + 32) = v17;
    *(_OWORD *)(v0 + 48) = v16;
    *(_OWORD *)(v0 + 16) = v18;
    outlined retain of AnsweringMachineCallStatus(v0 + 16);
    unint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v19;
    *unint64_t v19 = v0;
    v19[1] = closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
    return CKStateMachine<>.update(with:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v21();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = v3 + 16;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 232) = v0;
  swift_task_dealloc();
  outlined release of AnsweringMachineCallStatus(v5);
  uint64_t v6 = *(void *)(v2 + 160);
  os_log_type_t v7 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v8 = closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
  }
  else {
    uint64_t v8 = closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
  }
  return MEMORY[0x1F4188298](v8, v7, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = v0[27] + 1;
  if (v1 == v0[26])
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v2();
  }
  else
  {
    OUTLINED_FUNCTION_0_24(v1);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[28] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
    return CKStateMachine<>.update(with:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 104) + *(int *)(v0 + 68));
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  v0[9] = specialized CKStateMachine.description.getter();
  v0[10] = v1;
  v0[31] = v1;
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  return MEMORY[0x1F4188298](closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:), v2, v3);
}

uint64_t closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_11_2();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v29 = *(void **)(v26 + 232);
  (*(void (**)(void, void, void))(v26 + 168))(*(void *)(v26 + 128), *(void *)(v26 + 104), *(void *)(v26 + 112));
  id v30 = v29;
  swift_bridgeObjectRetain();
  id v31 = v29;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = *(void *)(v26 + 248);
    uint64_t v35 = *(void *)(v26 + 72);
    int64_t v36 = *(void **)(v26 + 232);
    a13 = *(void (**)(uint64_t, uint64_t))(v26 + 184);
    a14 = *(void *)(v26 + 192);
    a11 = *(void *)(v26 + 112);
    a12 = *(void *)(v26 + 128);
    uint64_t v37 = swift_slowAlloc();
    a9 = (void *)swift_slowAlloc();
    a10 = swift_slowAlloc();
    a15 = a10;
    *(_DWORD *)uint64_t v37 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v26 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 12) = 2112;
    id v38 = v36;
    uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v26 + 96) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a9 = v39;

    OUTLINED_FUNCTION_11_6(&dword_1C2F90000, v40, v41, "Failed to update %{public}s and recieved error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_5_39();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_5_39();
    OUTLINED_FUNCTION_3();

    a13(a12, a11);
  }
  else
  {
    uint64_t v42 = *(void **)(v26 + 232);
    unint64_t v43 = *(void (**)(uint64_t, uint64_t))(v26 + 184);
    uint64_t v44 = *(void *)(v26 + 128);
    uint64_t v45 = *(void *)(v26 + 112);

    swift_bridgeObjectRelease_n();
    v43(v44, v45);
  }
  uint64_t v46 = *(void *)(v26 + 216) + 1;
  if (v46 == *(void *)(v26 + 208))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_7_6();
    return v48(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  else
  {
    OUTLINED_FUNCTION_0_24(v46);
    unint64_t v56 = (void *)swift_task_alloc();
    *(void *)(v26 + 224) = v56;
    void *v56 = v26;
    v56[1] = closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:);
    OUTLINED_FUNCTION_7_6();
    return CKStateMachine<>.update(with:)();
  }
}

uint64_t CallScreening.CallStateObserver.init(logger:stateMachine:statusService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a4, a1);
  uint64_t result = type metadata accessor for CallScreening.CallStateObserver();
  *(void *)(a4 + *(int *)(result + 20)) = a2;
  *(void *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CallScreening.CallStateObserver(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for CallScreening.CallStateObserver(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CallScreening.CallStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CallScreening.CallStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CallScreening.CallStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for CallScreening.CallStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallScreening.CallStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C305E7C8);
}

uint64_t sub_1C305E7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CallScreening.CallStateObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C305E868);
}

void sub_1C305E868(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for CallScreening.CallStateObserver()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C305E98C()
{
  type metadata accessor for CallScreening.CallStateObserver();
  OUTLINED_FUNCTION_1_6();
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0();
  (*(void (**)(unint64_t))(v3 + 8))(v0 + v2);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = *(void *)(type metadata accessor for CallScreening.CallStateObserver() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in CallRecordingService.startRecording(call:completion:);
  uint64_t v5 = OUTLINED_FUNCTION_18_10();
  return closure #1 in closure #1 in CallScreening.CallStateObserver.start(onCallStatusUpdate:)(v5, v6, v7, v3);
}

uint64_t outlined consume of AnsweringMachineCallStatus?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall MomentsBackedViewControllerProtocol.setupMomentsViewsIfNecessary()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(v1 + 24))();
  if (v4)
  {
    id v9 = v4;
    id v5 = objc_msgSend(v4, sel_superview);

    if (!v5)
    {
      uint64_t v6 = OUTLINED_FUNCTION_3_45();
      if (v7(v6))
      {
        objc_msgSend(v9, sel_setUserInteractionEnabled_, 0);
        objc_msgSend(v9, sel_setAutoresizingMask_, 18);
        uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
        objc_msgSend(v8, sel_addSubview_, v9);
      }
    }
  }
}

Swift::Void __swiftcall MomentsBackedViewControllerProtocol.setupFlashViewsIfNecessary()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 16);
  uint64_t v3 = (void *)v2();
  id v4 = objc_msgSend(v3, sel_superview);

  if (v4) {
    goto LABEL_9;
  }
  uint64_t v5 = OUTLINED_FUNCTION_3_45();
  if ((v6(v5) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v7 = OUTLINED_FUNCTION_0_25();
  uint64_t v8 = (void *)((uint64_t (*)(uint64_t))v2)(v7);
  objc_msgSend(v8, sel_setUserInteractionEnabled_, 0);

  uint64_t v9 = OUTLINED_FUNCTION_0_25();
  uint64_t v10 = (void *)((uint64_t (*)(uint64_t))v2)(v9);
  objc_msgSend(v10, sel_setAutoresizingMask_, 18);

  uint64_t v11 = *(uint64_t (**)(uint64_t))(v1 + 8);
  uint64_t v12 = OUTLINED_FUNCTION_4_36();
  uint64_t v13 = v11(v12);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    uint64_t v15 = OUTLINED_FUNCTION_0_25();
    long long v16 = (void *)((uint64_t (*)(uint64_t))v2)(v15);
    objc_msgSend(v14, sel_addSubview_, v16);
  }
  uint64_t v17 = OUTLINED_FUNCTION_4_36();
  uint64_t v18 = v11(v17);
  if (v18)
  {
    unint64_t v19 = (void *)v18;
    uint64_t v20 = OUTLINED_FUNCTION_0_25();
    objc_msgSend(v19, sel_bringSubviewToFront_, ((uint64_t (*)(uint64_t))v2)(v20));

    OUTLINED_FUNCTION_22();
  }
  else
  {
LABEL_9:
    OUTLINED_FUNCTION_22();
  }
}

Swift::Void __swiftcall MomentsBackedViewControllerProtocol.bringMomentsAndFlashViewsToFrontIfNecessary()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  if (((*(uint64_t (**)(void))(v1 + 32))() & 1) != 0
    && (uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v4, v3)) != 0)
  {
    uint64_t v22 = v5;
    id v6 = objc_msgSend(v5, sel_superview);

    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t))(v3 + 16);
      uint64_t v8 = OUTLINED_FUNCTION_0_25();
      uint64_t v9 = (void *)v7(v8);
      id v10 = objc_msgSend(v9, sel_superview);

      if (v10)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v4, v3);
        if (v11)
        {
          uint64_t v12 = (void *)v11;
          uint64_t v13 = OUTLINED_FUNCTION_2_30();
          uint64_t v14 = (void *)v2(v13);
          objc_msgSend(v14, sel_insertSubview_belowSubview_, v22, v12);
        }
        else
        {
          uint64_t v15 = OUTLINED_FUNCTION_2_30();
          uint64_t v12 = (void *)v2(v15);
          objc_msgSend(v12, sel_bringSubviewToFront_, v22);
        }

        uint64_t v16 = ((uint64_t (*)(uint64_t, uint64_t))v2)(v4, v3);
        if (v16)
        {
          uint64_t v17 = (void *)v16;
          uint64_t v18 = OUTLINED_FUNCTION_0_25();
          unint64_t v19 = (void *)v7(v18);
          objc_msgSend(v17, sel_bringSubviewToFront_, v19);
        }
      }
    }
    OUTLINED_FUNCTION_22();
  }
  else
  {
    OUTLINED_FUNCTION_22();
  }
}

Swift::Void __swiftcall MomentsBackedViewControllerProtocol.remoteDidTakePhoto()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(v1 + 16))();
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v6 = (void *)swift_allocObject();
  void v6[2] = v3;
  void v6[3] = v2;
  v6[4] = v5;
  uint64_t v7 = *(void (**)(void (*)(), void *))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x50);
  swift_retain();
  v7(partial apply for closure #1 in MomentsBackedViewControllerProtocol.remoteDidTakePhoto(), v6);

  swift_release();
  swift_release();
}

void closure #1 in MomentsBackedViewControllerProtocol.remoteDidTakePhoto()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  if (MEMORY[0x1C8776240](v5))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      id v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x68))();

        (*(void (**)(uint64_t, uint64_t, uint64_t))((*v12 & *v13) + 0x98))(2, v8, v9);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1C305F1EC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C305F224()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in MomentsBackedViewControllerProtocol.remoteDidTakePhoto()()
{
  closure #1 in MomentsBackedViewControllerProtocol.remoteDidTakePhoto()(v0[4], v0[2], v0[3]);
}

uint64_t dispatch thunk of MomentsBackedViewControllerProtocol.underlyingView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MomentsBackedViewControllerProtocol.flashView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MomentsBackedViewControllerProtocol.insulatingView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MomentsBackedViewControllerProtocol.hasInitializedMomentsViews.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MomentsBackedViewControllerProtocol.localLivePhotoAlertView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MomentsBackedViewControllerProtocol.shouldShowActionTypePhotoCapture.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MomentsBackedViewControllerProtocol.nameForPhotoIndicator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

BOOL static RecentsHeaderButtonsView.Action.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void RecentsHeaderButtonsView.Action.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int RecentsHeaderButtonsView.Action.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RecentsHeaderButtonsView.Action(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static RecentsHeaderButtonsView.Action.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RecentsHeaderButtonsView.Action()
{
  return RecentsHeaderButtonsView.Action.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance RecentsHeaderButtonsView.Action(uint64_t a1)
{
  RecentsHeaderButtonsView.Action.hash(into:)(a1, *v1);
}

uint64_t *RecentsHeaderButtonsView.Constants.topMargin.unsafeMutableAddressor()
{
  if (one-time initialization token for topMargin != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.topMargin;
}

double static RecentsHeaderButtonsView.Constants.topMargin.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for topMargin, (uint64_t)&static RecentsHeaderButtonsView.Constants.topMargin);
}

uint64_t *RecentsHeaderButtonsView.Constants.estimatedHeight.unsafeMutableAddressor()
{
  if (one-time initialization token for estimatedHeight != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.estimatedHeight;
}

double static RecentsHeaderButtonsView.Constants.estimatedHeight.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for estimatedHeight, (uint64_t)&static RecentsHeaderButtonsView.Constants.estimatedHeight);
}

uint64_t *RecentsHeaderButtonsView.Constants.stackViewSpacing.unsafeMutableAddressor()
{
  if (one-time initialization token for stackViewSpacing != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.stackViewSpacing;
}

double static RecentsHeaderButtonsView.Constants.stackViewSpacing.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for stackViewSpacing, (uint64_t)&static RecentsHeaderButtonsView.Constants.stackViewSpacing);
}

void one-time initialization function for buttonTextToImagePadding()
{
  static RecentsHeaderButtonsView.Constants.buttonTextToImagePadding = 0x4000000000000000;
}

uint64_t *RecentsHeaderButtonsView.Constants.buttonTextToImagePadding.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonTextToImagePadding != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.buttonTextToImagePadding;
}

double static RecentsHeaderButtonsView.Constants.buttonTextToImagePadding.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for buttonTextToImagePadding, (uint64_t)&static RecentsHeaderButtonsView.Constants.buttonTextToImagePadding);
}

uint64_t *RecentsHeaderButtonsView.Constants.buttonContentVerticalPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonContentVerticalPadding != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.buttonContentVerticalPadding;
}

double static RecentsHeaderButtonsView.Constants.buttonContentVerticalPadding.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for buttonContentVerticalPadding, (uint64_t)&static RecentsHeaderButtonsView.Constants.buttonContentVerticalPadding);
}

uint64_t *RecentsHeaderButtonsView.Constants.imageReservation.unsafeMutableAddressor()
{
  if (one-time initialization token for imageReservation != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.imageReservation;
}

double static RecentsHeaderButtonsView.Constants.imageReservation.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for imageReservation, (uint64_t)&static RecentsHeaderButtonsView.Constants.imageReservation);
}

void one-time initialization function for topButtonPaddingMac()
{
  static RecentsHeaderButtonsView.Constants.topButtonPaddingMac = 0x4014000000000000;
}

uint64_t *RecentsHeaderButtonsView.Constants.topButtonPaddingMac.unsafeMutableAddressor()
{
  if (one-time initialization token for topButtonPaddingMac != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.topButtonPaddingMac;
}

double static RecentsHeaderButtonsView.Constants.topButtonPaddingMac.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for topButtonPaddingMac, (uint64_t)&static RecentsHeaderButtonsView.Constants.topButtonPaddingMac);
}

void one-time initialization function for bottomButtonPaddingMac()
{
  static RecentsHeaderButtonsView.Constants.bottomButtonPaddingMac = 0x401C000000000000;
}

uint64_t *RecentsHeaderButtonsView.Constants.bottomButtonPaddingMac.unsafeMutableAddressor()
{
  if (one-time initialization token for bottomButtonPaddingMac != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.bottomButtonPaddingMac;
}

double static RecentsHeaderButtonsView.Constants.bottomButtonPaddingMac.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for bottomButtonPaddingMac, (uint64_t)&static RecentsHeaderButtonsView.Constants.bottomButtonPaddingMac);
}

void one-time initialization function for buttonCornerRadiusMac()
{
  static RecentsHeaderButtonsView.Constants.buttonCornerRadiusMac = 0x4014000000000000;
}

uint64_t *RecentsHeaderButtonsView.Constants.buttonCornerRadiusMac.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonCornerRadiusMac != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.buttonCornerRadiusMac;
}

double static RecentsHeaderButtonsView.Constants.buttonCornerRadiusMac.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for buttonCornerRadiusMac, (uint64_t)&static RecentsHeaderButtonsView.Constants.buttonCornerRadiusMac);
}

void one-time initialization function for horizontalButtonPaddingMac()
{
  static RecentsHeaderButtonsView.Constants.horizontalButtonPaddingMac = 0x4024000000000000;
}

uint64_t *RecentsHeaderButtonsView.Constants.horizontalButtonPaddingMac.unsafeMutableAddressor()
{
  if (one-time initialization token for horizontalButtonPaddingMac != -1) {
    swift_once();
  }
  return &static RecentsHeaderButtonsView.Constants.horizontalButtonPaddingMac;
}

double static RecentsHeaderButtonsView.Constants.horizontalButtonPaddingMac.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for horizontalButtonPaddingMac, (uint64_t)&static RecentsHeaderButtonsView.Constants.horizontalButtonPaddingMac);
}

uint64_t key path getter for RecentsHeaderButtonsView.delegate : RecentsHeaderButtonsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t key path setter for RecentsHeaderButtonsView.delegate : RecentsHeaderButtonsView(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8);
  uint64_t v5 = swift_unknownObjectRetain();
  return v4(v5, v2, v3);
}

uint64_t RecentsHeaderButtonsView.delegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t (*RecentsHeaderButtonsView.delegate.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for RecentsHeaderButtonsView.createLinkButton : RecentsHeaderButtonsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

void key path setter for RecentsHeaderButtonsView.createLinkButton : RecentsHeaderButtonsView(id *a1)
{
}

void RecentsHeaderButtonsView.createLinkButton.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v1;
  *uint64_t v1 = a1;
}

uint64_t key path getter for RecentsHeaderButtonsView.bottomAnchorConstraint : RecentsHeaderButtonsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

void key path setter for RecentsHeaderButtonsView.bottomAnchorConstraint : RecentsHeaderButtonsView(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  RecentsHeaderButtonsView.bottomAnchorConstraint.setter(v1);
}

uint64_t key path getter for RecentsHeaderButtonsView.buttonsView : RecentsHeaderButtonsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x118))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsHeaderButtonsView.buttonsView : RecentsHeaderButtonsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x120))(*a1);
}

void RecentsHeaderButtonsView.buttonsView.setter(uint64_t a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView____lazy_storage___buttonsView);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView____lazy_storage___buttonsView) = a1;
}

void (*RecentsHeaderButtonsView.buttonsView.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = RecentsHeaderButtonsView.buttonsView.getter();
  return RecentsHeaderButtonsView.buttonsView.modify;
}

void RecentsHeaderButtonsView.buttonsView.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    RecentsHeaderButtonsView.buttonsView.setter((uint64_t)v3);
  }
  else
  {
    RecentsHeaderButtonsView.buttonsView.setter((uint64_t)v2);
  }
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.ParagraphStyleAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.ParagraphStyleAttribute>)()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.UIKitAttributes.ParagraphStyleAttribute()
{
}

id RecentsHeaderButtonsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void RecentsHeaderButtonsView.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_delegate];
  *((void *)v1 + 1) = 0;
  *((void *)v1 + 2) = 0;
  *(void *)uint64_t v1 = 0;
  id v2 = &v0[OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_headerDelegate];
  *(void *)id v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_featureFlags;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_newFaceTimeButton;
  uint64_t v5 = self;
  *(void *)&v0[v4] = objc_msgSend(v5, sel_buttonWithType_, 1);
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_createLinkButton;
  *(void *)&v0[v6] = objc_msgSend(v5, sel_buttonWithType_, 1);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_bottomAnchorConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView____lazy_storage___buttonsView] = 0;
  uint64_t v7 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView____lazy_storage___newFaceTimeButtonConfiguration];
  type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_10_2(v7);
  OUTLINED_FUNCTION_10_2((uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView____lazy_storage___createLinkButtonConfiguration]);
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_buttonTitleParagraphStyle;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0848]), sel_init);
  objc_msgSend(v9, sel_setAlignment_, 1);
  *(void *)&v0[v8] = v9;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void closure #1 in RecentsHeaderButtonsView.configure()(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xA0))())
    {
      uint64_t v7 = v6;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 8))(v5, a1 & 1, ObjectType, v7);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t RecentsHeaderButtonsView.symbolScaleValue.getter()
{
  id v1 = objc_msgSend(v0, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  uint64_t v3 = RecentsHeaderButtonsView.symbolScale(for:)();
  return v3;
}

uint64_t RecentsHeaderButtonsView.didTapNewCallButton()()
{
  return RecentsHeaderButtonsView.didTapNewCallButton()(0);
}

uint64_t RecentsHeaderButtonsView.didTapNewLinkButton()()
{
  return RecentsHeaderButtonsView.didTapNewCallButton()(1);
}

uint64_t RecentsHeaderButtonsView.didTapNewCallButton()(uint64_t result)
{
  id v2 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtC15ConversationKit24RecentsHeaderButtonsView_headerDelegate);
  if (v2)
  {
    uint64_t v3 = result;
    swift_retain();
    v2(v3);
    return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v2);
  }
  return result;
}

id RecentsHeaderButtonsView.__deallocating_deinit()
{
  return RecentsHeaderButtonsView.__deallocating_deinit(0, type metadata accessor for RecentsHeaderButtonsView);
}

id RecentsHeaderButtonsView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v5 = objc_allocWithZone(v4);
  return objc_msgSend(v5, sel_initWithFrame_, v3, v2, v1, v0);
}

id RecentsNavigationBarTitleView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for RecentsNavigationBarTitleView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id RecentsNavigationBarTitleView.__deallocating_deinit(uint64_t a1)
{
  return RecentsHeaderButtonsView.__deallocating_deinit(a1, type metadata accessor for RecentsNavigationBarTitleView);
}

id RecentsHeaderButtonsView.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t sub_1C30603D4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type RecentsHeaderButtonsView.Action and conformance RecentsHeaderButtonsView.Action()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentsHeaderButtonsView.Action and conformance RecentsHeaderButtonsView.Action;
  if (!lazy protocol witness table cache variable for type RecentsHeaderButtonsView.Action and conformance RecentsHeaderButtonsView.Action)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentsHeaderButtonsView.Action and conformance RecentsHeaderButtonsView.Action);
  }
  return result;
}

uint64_t dispatch thunk of RecentsHeaderButtonsViewDelegate.recentsHeaderButtonsView(_:didTapAction:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 8))(a1, a2 & 1);
}

uint64_t ObjC metadata update function for RecentsHeaderButtonsView()
{
  return type metadata accessor for RecentsHeaderButtonsView();
}

uint64_t method lookup function for RecentsHeaderButtonsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsHeaderButtonsView);
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.createLinkButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.bottomAnchorConstraint.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.buttonsView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.buttonsView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.buttonsView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of RecentsHeaderButtonsView.symbolScaleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

unsigned char *storeEnumTagSinglePayload for RecentsHeaderButtonsView.Action(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C306077CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentsHeaderButtonsView.Action()
{
  return &type metadata for RecentsHeaderButtonsView.Action;
}

ValueMetadata *type metadata accessor for RecentsHeaderButtonsView.Constants()
{
  return &type metadata for RecentsHeaderButtonsView.Constants;
}

uint64_t method lookup function for RecentsNavigationBarTitleView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsNavigationBarTitleView);
}

uint64_t dispatch thunk of RecentsNavigationBarTitleView.updateNavigationItemVisible(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t sub_1C3060820()
{
  return swift_release();
}

uint64_t sub_1C3060828(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1C306083C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_1C3060848()
{
}

uint64_t sub_1C3060878()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in RecentsHeaderButtonsView.configure()(char a1)
{
  closure #1 in RecentsHeaderButtonsView.configure()(a1 & 1, v1);
}

Swift::Void __swiftcall UINotificationFeedbackGenerator.shake()()
{
  objc_msgSend(v0, sel_notificationOccurred_, 0);
}

void protocol witness for ShakyMaker.shake() in conformance UINotificationFeedbackGenerator()
{
}

unint64_t protocol witness for SoundPlayer.attempt(toPlay:for:) in conformance TUCallSoundPlayer(uint64_t a1, uint64_t a2)
{
  return (unint64_t)@nonobjc TUCallSoundPlayer.attempt(toPlay:for:)(a1, a2) & 1;
}

id @nonobjc TUCallSoundPlayer.attempt(toPlay:for:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(v2, sel_attemptToPlaySoundType_forCall_, a1, a2);
}

uint64_t ScreeningSoundAndHapticsManager.__allocating_init(with:ringerStateObserver:feedbackGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v10);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = OUTLINED_FUNCTION_1_46(v12, v23);
  v14(v13);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v15);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = OUTLINED_FUNCTION_2_32(v18, v24);
  v20(v19);
  uint64_t v21 = specialized ScreeningSoundAndHapticsManager.init(with:ringerStateObserver:feedbackGenerator:)(v3, v4, a3, v8, v10, v15, v9, v16);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v21;
}

uint64_t ScreeningSoundAndHapticsManager.init(with:ringerStateObserver:feedbackGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v11);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = OUTLINED_FUNCTION_1_46(v13, v24);
  v15(v14);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = OUTLINED_FUNCTION_2_32(v19, v25);
  v21(v20);
  uint64_t v22 = specialized ScreeningSoundAndHapticsManager.init(with:ringerStateObserver:feedbackGenerator:)(v4, v5, a3, v6, v11, v16, v10, v17);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v22;
}

uint64_t ScreeningSoundAndHapticsManager.registerForUpdates()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v2, sel_addObserver_selector_name_object_, v1, sel_announcementFinishedNotification_, *MEMORY[0x1E4FADE38], 0);

  uint64_t v3 = v1 + 12;
  __swift_project_boxed_opaque_existential_1(v1 + 12, v1[15]);
  uint64_t v4 = OUTLINED_FUNCTION_3_24();
  v5(v4);
  uint64_t v7 = v1[15];
  uint64_t v6 = v1[16];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v7, v6);
}

uint64_t ScreeningSoundAndHapticsManager.deinit()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v1 = OUTLINED_FUNCTION_3_24();
  v2(v1);
  outlined destroy of Conversation?(v0 + 16, &demangling cache variable for type metadata for ShakyMaker?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  return v0;
}

uint64_t ScreeningSoundAndHapticsManager.__deallocating_deinit()
{
  ScreeningSoundAndHapticsManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t ScreeningSoundAndHapticsManager.announcementFinishedNotification(_:)(void *a1)
{
  id v2 = v1;
  if (objc_msgSend(a1, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v24, (uint64_t)v20, &demangling cache variable for type metadata for Any?);
  if (v21)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      return result;
    }
    uint64_t v4 = v23;
    uint64_t v5 = v1[15];
    uint64_t v6 = v1[16];
    __swift_project_boxed_opaque_existential_1(v1 + 12, v5);
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    if ((objc_msgSend(v4, sel_shouldSuppressRingtone) & 1) != 0 || (v7 & 1) == 0)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationKit);
      swift_retain();
      id v12 = v4;
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 67240448;
        uint64_t v16 = v2[15];
        uint64_t v17 = v2[16];
        __swift_project_boxed_opaque_existential_1(v2 + 12, v16);
        v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17) & 1;
        *(_DWORD *)uint64_t v20 = v20[0];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v15 + 8) = 1026;
        *(_DWORD *)uint64_t v20 = objc_msgSend(v12, sel_shouldSuppressRingtone);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_1C2F90000, v13, v14, "Not playing transcription started tone ringer switch: %{BOOL,public}d, suppress: %{BOOL,public}d", (uint8_t *)v15, 0xEu);
        MEMORY[0x1C87760E0](v15, -1, -1);
      }
      else
      {

        swift_release();
      }
    }
    else
    {
      uint64_t v8 = v2[10];
      uint64_t v9 = v2[11];
      __swift_project_boxed_opaque_existential_1(v2 + 7, v8);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v9 + 8))(8, v4, v8, v9);
    }
    outlined init with copy of ShakyMaker?((uint64_t)(v2 + 2), (uint64_t)v20);
    uint64_t v18 = v21;
    if (v21)
    {
      uint64_t v19 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);

      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }

    uint64_t v10 = &demangling cache variable for type metadata for ShakyMaker?;
  }
  else
  {
    uint64_t v10 = &demangling cache variable for type metadata for Any?;
  }
  return outlined destroy of Conversation?((uint64_t)v20, v10);
}

void DeviceRingerStateObserver.ringerSwitchEnabled.didset()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationKit);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136446210;
    uint64_t v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v1, v2, "Updated ringerSwitchEnabled to %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v4, -1, -1);
    MEMORY[0x1C87760E0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t DeviceRingerStateObserver.ringerSwitchEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 20);
}

void DeviceRingerStateObserver.registerRingerSwitchStateNotifications()()
{
  uint64_t v1 = v0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  os_log_type_t v2 = static OS_dispatch_queue.main.getter();
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in DeviceRingerStateObserver.registerRingerSwitchStateNotifications();
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_13;
  uint64_t v4 = _Block_copy(aBlock);
  swift_release();
  swift_beginAccess();
  LODWORD(v1) = notify_register_dispatch("com.apple.springboard.ringerstate", (int *)(v1 + 16), v2, v4);
  swift_endAccess();
  _Block_release(v4);

  if (v1)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationKit);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      aBlock[0] = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v6, v7, "Failed to observe ringer switch state with status %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v9, -1, -1);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }
  }
}

uint64_t closure #1 in DeviceRingerStateObserver.registerRingerSwitchStateNotifications()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DeviceRingerStateObserver.updateRingerSwitchState()();
    return swift_release();
  }
  return result;
}

uint64_t DeviceRingerStateObserver.unregisterRingerSwitchStateNotifications()()
{
  swift_beginAccess();
  return notify_cancel(*(_DWORD *)(v0 + 16));
}

void DeviceRingerStateObserver.updateRingerSwitchState()()
{
  uint64_t v1 = v0;
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t state64 = 0;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v0 + 16), &state64))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationKit);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      v10[0] = v6;
      *(_DWORD *)uint64_t v5 = 136446210;
      uint64_t v7 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v3, v4, "Unable to get ringer switch state, uint64_t result = %{public}s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v6, -1, -1);
      MEMORY[0x1C87760E0](v5, -1, -1);
    }

    *(unsigned char *)(v1 + 20) = 0;
  }
  else
  {
    *(unsigned char *)(v0 + 20) = state64 != 0;
  }
  DeviceRingerStateObserver.ringerSwitchEnabled.didset();
}

uint64_t DeviceRingerStateObserver.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for RingerStateObserver.ringerSwitchEnabled.getter in conformance DeviceRingerStateObserver()
{
  return DeviceRingerStateObserver.ringerSwitchEnabled.getter() & 1;
}

void protocol witness for RingerStateObserver.registerRingerSwitchStateNotifications() in conformance DeviceRingerStateObserver()
{
}

uint64_t protocol witness for RingerStateObserver.unregisterRingerSwitchStateNotifications() in conformance DeviceRingerStateObserver()
{
  return DeviceRingerStateObserver.unregisterRingerSwitchStateNotifications()();
}

void protocol witness for RingerStateObserver.updateRingerSwitchState() in conformance DeviceRingerStateObserver()
{
}

uint64_t specialized ScreeningSoundAndHapticsManager.init(with:ringerStateObserver:feedbackGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21[3] = a5;
  void v21[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  v20[3] = a6;
  v20[4] = a8;
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1(v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v16, a2, a6);
  outlined init with copy of IDSLookupManager((uint64_t)v21, a4 + 56);
  outlined init with copy of IDSLookupManager((uint64_t)v20, a4 + 96);
  if (*(void *)(a3 + 24))
  {
    outlined init with copy of ShakyMaker?(a3, a4 + 16);
  }
  else
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A00]), sel_init);
    v19[3] = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINotificationFeedbackGenerator);
    v19[4] = &protocol witness table for UINotificationFeedbackGenerator;
    v19[0] = v17;
    outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)v19, a4 + 16, &demangling cache variable for type metadata for ShakyMaker?);
  }
  ScreeningSoundAndHapticsManager.registerForUpdates()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  outlined destroy of Conversation?(a3, &demangling cache variable for type metadata for ShakyMaker?);
  return a4;
}

uint64_t dispatch thunk of SoundPlayer.attempt(toPlay:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ShakyMaker.shake()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RingerStateObserver.ringerSwitchEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RingerStateObserver.registerRingerSwitchStateNotifications()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of RingerStateObserver.unregisterRingerSwitchStateNotifications()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of RingerStateObserver.updateRingerSwitchState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for ScreeningSoundAndHapticsManager()
{
  return self;
}

uint64_t method lookup function for ScreeningSoundAndHapticsManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreeningSoundAndHapticsManager);
}

uint64_t dispatch thunk of ScreeningSoundAndHapticsManager.__allocating_init(with:ringerStateObserver:feedbackGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for DeviceRingerStateObserver()
{
  return self;
}

uint64_t sub_1C3061ADC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DeviceRingerStateObserver.registerRingerSwitchStateNotifications()()
{
  return closure #1 in DeviceRingerStateObserver.registerRingerSwitchStateNotifications()();
}

uint64_t outlined init with copy of ShakyMaker?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShakyMaker?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t CallControlsMenuViewModel.context.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

unint64_t key path getter for CallControlsMenuViewModel.context : CallControlsMenuViewModel@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CallControlsMenuViewModel.context.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t key path setter for CallControlsMenuViewModel.context : CallControlsMenuViewModel()
{
  return CallControlsMenuViewModel.context.setter();
}

unint64_t lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel;
  if (!lazy protocol witness table cache variable for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel)
  {
    type metadata accessor for CallControlsMenuViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel);
  }
  return result;
}

uint64_t type metadata accessor for CallControlsMenuViewModel()
{
  uint64_t result = type metadata singleton initialization cache for CallControlsMenuViewModel;
  if (!type metadata singleton initialization cache for CallControlsMenuViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CallControlsMenuViewModel.context.setter()
{
  return CallControlsMenuViewModel.context.setter();
}

{
  swift_getKeyPath();
  specialized CallControlsMenuViewModel.withMutation<A, B>(keyPath:_:)();
  return swift_release();
}

uint64_t CallControlsMenuViewModel.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t closure #1 in CallControlsMenuViewModel.context.setter(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 20) = v8;
  *(void *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 32) = a4;
  return result;
}

uint64_t partial apply for closure #1 in CallControlsMenuViewModel.context.setter()
{
  return closure #1 in CallControlsMenuViewModel.context.setter(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t specialized CallControlsMenuViewModel.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t CallControlsMenuViewModel.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

void (*CallControlsMenuViewModel.context.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_getKeyPath();
  void v3[4] = OBJC_IVAR____TtC15ConversationKit25CallControlsMenuViewModel___observationRegistrar;
  *uint64_t v3 = v1;
  v3[5] = lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return CallControlsMenuViewModel.context.modify;
}

void CallControlsMenuViewModel.context.modify(void **a1)
{
  uint64_t v1 = *a1;
  swift_endAccess();
  *uint64_t v1 = v1[3];
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v1);
}

uint64_t CallControlsMenuViewModel.__allocating_init(service:isAppFrontMost:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  CallControlsMenuViewModel.init(service:isAppFrontMost:)(a1, a2);
  return v4;
}

uint64_t CallControlsMenuViewModel.init(service:isAppFrontMost:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 88) = 0;
  ObservationRegistrar.init()();
  outlined init with copy of IDSLookupManager((uint64_t)a1, v2 + 40);
  *(void *)(v2 + 80) = a2;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  LODWORD(v6) = v8(v6, v7);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v11, v12);
  swift_release();
  *(_DWORD *)(v3 + 96) = v6;
  *(unsigned char *)(v3 + 100) = v9;
  *(void *)(v3 + 104) = v13;
  *(unsigned char *)(v3 + 112) = 1;
  *(_DWORD *)(v3 + 16) = v6;
  *(unsigned char *)(v3 + 20) = v9;
  *(void *)(v3 + 24) = v13;
  *(unsigned char *)(v3 + 32) = 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

Swift::Void __swiftcall CallControlsMenuViewModel.startContextObservation()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationLetMeInRequestState, Never>, AnyPublisher<Bool, Never>>);
  OUTLINED_FUNCTION_4();
  uint64_t v30 = v1;
  uint64_t v31 = v2;
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_2_3();
  uint64_t v28 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationLetMeInRequestState, Never>, AnyPublisher<Bool, Never>>, NSRunLoop>);
  OUTLINED_FUNCTION_4();
  uint64_t v32 = v4;
  uint64_t v33 = v5;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_3();
  uint64_t v29 = v6;
  OUTLINED_FUNCTION_3_22();
  uint64_t v7 = OUTLINED_FUNCTION_1_11();
  uint64_t v27 = (void *)v8(v7);
  id v37 = v27;
  OUTLINED_FUNCTION_3_22();
  uint64_t v9 = OUTLINED_FUNCTION_1_11();
  uint64_t v26 = v10(v9);
  uint64_t v36 = v26;
  OUTLINED_FUNCTION_3_22();
  uint64_t v11 = OUTLINED_FUNCTION_1_11();
  uint64_t v13 = v12(v11);
  uint64_t v34 = *(void *)(v0 + 80);
  uint64_t v35 = v13;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUCallStatus, Never>);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<InCallControlsMode, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationLetMeInRequestState, Never>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<TUCallStatus, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUCallStatus, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<InCallControlsMode, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<InCallControlsMode, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<TUConversationLetMeInRequestState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationLetMeInRequestState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  uint64_t v14 = v28;
  Publisher.combineLatest<A, B, C>(_:_:_:)();
  swift_release();
  swift_release();
  swift_release();
  id v37 = objc_msgSend(self, sel_mainRunLoop, v24, v25, v26, v27);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v15 - 8);
  id v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v18);
  type metadata accessor for NSRunLoop();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationLetMeInRequestState, Never>, AnyPublisher<Bool, Never>> and conformance Publishers.CombineLatest4<A, B, C, D>, &demangling cache variable for type metadata for Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationLetMeInRequestState, Never>, AnyPublisher<Bool, Never>>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  uint64_t v19 = v29;
  uint64_t v20 = v30;
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?((uint64_t)v17);

  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v14, v20);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for closure #1 in CallControlsMenuViewModel.startContextObservation();
  *(void *)(v22 + 24) = v21;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationLetMeInRequestState, Never>, AnyPublisher<Bool, Never>>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CombineLatest4<AnyPublisher<TUCallStatus, Never>, AnyPublisher<InCallControlsMode, Never>, AnyPublisher<TUConversationLetMeInRequestState, Never>, AnyPublisher<Bool, Never>>, NSRunLoop>);
  uint64_t v23 = v32;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v19, v23);
  CallControlsMenuViewModel.contextCancellable.setter();
}

unint64_t type metadata accessor for NSRunLoop()
{
  unint64_t result = lazy cache variable for type metadata for NSRunLoop;
  if (!lazy cache variable for type metadata for NSRunLoop)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  }
  return result;
}

uint64_t sub_1C3062784()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in CallControlsMenuViewModel.startContextObservation()(uint64_t a1, unsigned __int8 a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.sidebar);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v22 = v9;
      *(_DWORD *)uint64_t v8 = 136315906;
      type metadata accessor for TUCallStatus(0);
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      uint64_t v12 = InCallControlsMode.debugDescription.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 22) = 2080;
      type metadata accessor for TUConversationLetMeInRequestState(0);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 32) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v6, v7, "CallControlsMenuViewModel: callStatus: %s controlMode: %s letMeIn: %s isAppFrontMost: %{BOOL}d", (uint8_t *)v8, 0x26u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v9, -1, -1);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }

    uint64_t v16 = v4[8];
    uint64_t v17 = v4[9];
    __swift_project_boxed_opaque_existential_1(v4 + 5, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    uint64_t v18 = v4[8];
    uint64_t v19 = v4[9];
    __swift_project_boxed_opaque_existential_1(v4 + 5, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
    uint64_t v20 = v4[8];
    uint64_t v21 = v4[9];
    __swift_project_boxed_opaque_existential_1(v4 + 5, v20);
    (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v20, v21);
    CallControlsMenuViewModel.context.setter();
    CallControlsMenuViewModel.inCallContext.getter();
    CallControlsMenuViewModel.context.setter();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in CallControlsMenuViewModel.startContextObservation()(uint64_t a1, unsigned __int8 a2)
{
  return closure #1 in CallControlsMenuViewModel.startContextObservation()(a1, a2);
}

unint64_t CallControlsMenuViewModel.inCallContext.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned int *)(v0 + 96) | ((unint64_t)*(unsigned __int8 *)(v0 + 100) << 32);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned TUCallStatus, @unowned InCallControlsMode, @unowned TUConversationLetMeInRequestState, @unowned Bool) -> ()(unsigned int *a1, uint64_t (*a2)(void, void, void, void))
{
  return a2(*a1, *((unsigned __int8 *)a1 + 4), *((void *)a1 + 1), *((unsigned __int8 *)a1 + 16));
}

uint64_t sub_1C3062BEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned TUCallStatus, @unowned InCallControlsMode, @unowned TUConversationLetMeInRequestState, @unowned Bool) -> ()(unsigned int *a1)
{
  return thunk for @escaping @callee_guaranteed (@unowned TUCallStatus, @unowned InCallControlsMode, @unowned TUConversationLetMeInRequestState, @unowned Bool) -> ()(a1, *(uint64_t (**)(void, void, void, void))(v1 + 16));
}

uint64_t CallControlsMenuViewModel.contextCancellable.setter()
{
  return swift_release();
}

uint64_t CallControlsMenuViewModel.contextCancellable.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CallControlsMenuViewModel.contextCancellable.getter()
{
  return swift_retain();
}

uint64_t key path setter for CallControlsMenuViewModel.contextCancellable : CallControlsMenuViewModel()
{
  return CallControlsMenuViewModel.contextCancellable.setter();
}

uint64_t closure #1 in CallControlsMenuViewModel.contextCancellable.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 88) = a2;
  swift_retain();
  return swift_release();
}

unint64_t key path getter for CallControlsMenuViewModel.inCallContext : CallControlsMenuViewModel@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CallControlsMenuViewModel.inCallContext.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t key path setter for CallControlsMenuViewModel.inCallContext : CallControlsMenuViewModel()
{
  return CallControlsMenuViewModel.context.setter();
}

uint64_t CallControlsMenuViewModel.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit25CallControlsMenuViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t CallControlsMenuViewModel.__deallocating_deinit()
{
  CallControlsMenuViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for CallControlsMenuViewModel()
{
  return type metadata accessor for CallControlsMenuViewModel();
}

uint64_t type metadata completion function for CallControlsMenuViewModel()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CallControlsMenuViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallControlsMenuViewModel);
}

uint64_t dispatch thunk of CallControlsMenuViewModel.__allocating_init(service:isAppFrontMost:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1C3062FE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CallControlsMenuViewModel.contextCancellable.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in CallControlsMenuViewModel.contextCancellable.setter()
{
  return closure #1 in CallControlsMenuViewModel.contextCancellable.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in CallControlsMenuViewModel.inCallContext.setter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 28);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 40);
  *(_DWORD *)(v1 + 96) = *(_DWORD *)(v0 + 24);
  *(unsigned char *)(v1 + 100) = v2;
  *(void *)(v1 + 104) = v3;
  *(unsigned char *)(v1 + 112) = v4;
}

Swift::Void __swiftcall CaptionsViewModel.minimize(_:)(Swift::Bool a1)
{
}

uint64_t CaptionsViewModel.allowsMinimization.getter()
{
  return CaptionsViewModel.allowsMinimization.getter(CaptionsStateSource.allowsMinimization.getter);
}

uint64_t CaptionsViewModel.allowsMinimization.setter(uint64_t a1)
{
  return CaptionsViewModel.minimize(_:)(a1, (void (*)(uint64_t))CaptionsStateSource.allowsMinimization.setter);
}

uint64_t CaptionsViewModel.isGroupCall.getter()
{
  return CaptionsViewModel.allowsMinimization.getter(CaptionsStateSource.isGroupCall.getter);
}

uint64_t CaptionsViewModel.isGroupCall.setter(uint64_t a1)
{
  return CaptionsViewModel.minimize(_:)(a1, (void (*)(uint64_t))CaptionsStateSource.isGroupCall.setter);
}

uint64_t CaptionsViewModel.minimize(_:)(uint64_t a1, void (*a2)(uint64_t))
{
  CaptionsViewModel.source.getter();
  a2(a1);
  return swift_release();
}

uint64_t CaptionsViewModel.callName.getter()
{
  CaptionsViewModel.source.getter();
  uint64_t v0 = CaptionsStateSource.callName.getter();
  swift_release();
  return v0;
}

uint64_t CaptionsViewModel.callName.setter()
{
  CaptionsViewModel.source.getter();
  OUTLINED_FUNCTION_38_3();
  return swift_release();
}

void *CaptionsViewModel.groupImage.getter()
{
  CaptionsViewModel.source.getter();
  uint64_t v0 = CaptionsStateSource.groupImage.getter();
  swift_release();
  return v0;
}

uint64_t CaptionsViewModel.groupImage.setter(void *a1)
{
  CaptionsViewModel.source.getter();
  CaptionsStateSource.groupImage.setter(a1);
  return swift_release();
}

uint64_t CaptionsViewModel.languageModelDownloadingProgress.getter()
{
  CaptionsViewModel.source.getter();
  uint64_t v0 = CaptionsStateSource.languageModelDownloadingProgress.getter();
  swift_release();
  return v0;
}

uint64_t CaptionsViewModel.languageModelDownloadingProgress.setter()
{
  CaptionsViewModel.source.getter();
  CaptionsStateSource.languageModelDownloadingProgress.setter();
  return swift_release();
}

uint64_t CaptionsViewModel.updateCaptions(for:)(uint64_t a1)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_6_1();
  CaptionSectioner.update(for:)(a1);
  swift_endAccess();
  v5[0] = v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_42_4();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  CaptionsViewModel.source.getter();
  CaptionsViewModel.sectioner.getter((uint64_t)v5);
  v3._rawValue = (void *)v5[0];
  uint64_t v6 = v5[3];
  outlined release of LinearGradient((uint64_t)&v6);
  swift_release();
  CaptionsStateSource.updateSections(_:)(v3);
  swift_release();
  swift_bridgeObjectRelease();
  CaptionsViewModel.updateExpirationTimer()();
  return CaptionsViewModel.updateSuppressionTimer()();
}

uint64_t CaptionsViewModel.__allocating_init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v17 = swift_allocObject();
  CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return v17;
}

uint64_t CaptionsViewModel.onRequestMinimizeHandler.setter(uint64_t a1, uint64_t a2)
{
  return CaptionsViewModel.onRequestMinimizeHandler.setter(a1, a2, (uint64_t)&unk_1C376C6E8, (uint64_t)partial apply for closure #1 in CaptionsViewModel.onRequestMinimizeHandler.setter, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
}

uint64_t CaptionsViewModel.onRequestDismissControlsHandler.setter(uint64_t a1, uint64_t a2)
{
  return CaptionsViewModel.onRequestMinimizeHandler.setter(a1, a2, (uint64_t)&unk_1C376C710, (uint64_t)partial apply for closure #1 in CaptionsViewModel.onRequestDismissControlsHandler.setter, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?);
}

uint64_t CaptionsViewModel.onRequestMinimizeHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = v5;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  specialized CaptionsViewModel.withMutation<A, B>(keyPath:_:)(KeyPath, a4, (uint64_t)&v12, (uint64_t)&OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  a5(a1, a2);
  return swift_release();
}

Swift::Void __swiftcall CaptionsViewModel.update(with:)(Swift::OpaquePointer with)
{
  CaptionsViewModel.source.getter();
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)(v1);
  CaptionsStateSource.participants.setter();
  swift_release();
}

uint64_t CaptionsViewModel.source.getter()
{
  return swift_retain();
}

uint64_t key path getter for CaptionsViewModel.source : CaptionsViewModel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CaptionsViewModel.source.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CaptionsViewModel.source : CaptionsViewModel()
{
  uint64_t v0 = swift_retain();
  return CaptionsViewModel.source.setter(v0);
}

uint64_t CaptionsViewModel.source.setter(uint64_t a1)
{
  return CaptionsViewModel.source.setter(a1, (uint64_t)&unk_1C376C738, (uint64_t)partial apply for closure #1 in CaptionsViewModel.source.setter, MEMORY[0x1E4FBC8D0]);
}

uint64_t CaptionsViewModel.access<A>(keyPath:)(uint64_t a1)
{
  return CaptionsViewModel.access<A>(keyPath:)(a1, (uint64_t)&OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
}

uint64_t closure #1 in CaptionsViewModel.source.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  swift_retain();
  return swift_release();
}

uint64_t CaptionsViewModel.withMutation<A, B>(keyPath:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CaptionsViewModel.withMutation<A, B>(keyPath:_:)(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
}

void CaptionsViewModel.source.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsViewModel.source.modify(void **a1)
{
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = *a1;
  swift_endAccess();
  *uint64_t v1 = v1[3];
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v1);
}

uint64_t CaptionsViewModel.sectioner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v7 = *(void *)(v2 + 64);
  uint64_t v8 = *(void *)(v2 + 72);
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v2 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

double key path getter for CaptionsViewModel.sectioner : CaptionsViewModel@<D0>(uint64_t a1@<X8>)
{
  CaptionsViewModel.sectioner.getter((uint64_t)v4);
  long long v2 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v2;
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = v6;
  return result;
}

uint64_t key path setter for CaptionsViewModel.sectioner : CaptionsViewModel(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  v3[0] = *(_OWORD *)a1;
  v3[1] = v1;
  uint64_t v5 = *(void *)&v3[0];
  uint64_t v6 = *((void *)&v1 + 1);
  uint64_t v3[2] = *(_OWORD *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  outlined retain of [Participant]((uint64_t)&v5);
  outlined retain of [Participant]((uint64_t)&v6);
  swift_retain();
  return CaptionsViewModel.sectioner.setter((uint64_t *)v3);
}

uint64_t CaptionsViewModel.sectioner.setter(uint64_t *a1)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_30_7(v2, (uint64_t)partial apply for closure #1 in CaptionsViewModel.sectioner.setter, v3, (uint64_t)&OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel, (uint64_t)&protocol conformance descriptor for CaptionsViewModel, v4, v6);
  uint64_t v8 = *a1;
  outlined release of LinearGradient((uint64_t)&v8);
  uint64_t v7 = a1[3];
  outlined release of LinearGradient((uint64_t)&v7);
  swift_release();
  return swift_release();
}

__n128 CaptionsViewModel.sectioner.init@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  return result;
}

uint64_t closure #1 in CaptionsViewModel.sectioner.setter(uint64_t a1, uint64_t *a2)
{
  swift_beginAccess();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 40) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 56) = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 72) = a2[6];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[3];
  outlined retain of [Participant]((uint64_t)&v6);
  outlined retain of [Participant]((uint64_t)&v5);
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CaptionsViewModel.sectioner.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsViewModel.sectioner.modify(void **a1)
{
}

void *CaptionsViewModel.expirationTimer.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 80);
  id v2 = v1;
  return v1;
}

void key path setter for CaptionsViewModel.expirationTimer : CaptionsViewModel(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CaptionsViewModel.expirationTimer.setter(v1);
}

void closure #1 in CaptionsViewModel.expirationTimer.setter(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = a2;
  id v3 = a2;
}

void *CaptionsViewModel.suppressionTimer.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v1 = *(void **)(v0 + 88);
  id v2 = v1;
  return v1;
}

void key path setter for CaptionsViewModel.suppressionTimer : CaptionsViewModel(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CaptionsViewModel.expirationTimer.setter(v1);
}

void CaptionsViewModel.expirationTimer.setter(void *a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_27_7(KeyPath, v3, v4, (uint64_t)&OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel, (uint64_t)&protocol conformance descriptor for CaptionsViewModel, v5, v6);
  swift_release();
}

void closure #1 in CaptionsViewModel.suppressionTimer.setter(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = a2;
  id v3 = a2;
}

uint64_t CaptionsViewModel.onRequestMinimizeHandler.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*(void *)(v0 + 96));
  return OUTLINED_FUNCTION_23_0();
}

uint64_t key path getter for CaptionsViewModel.onRequestMinimizeHandler : CaptionsViewModel@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result = CaptionsViewModel.onRequestMinimizeHandler.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for CaptionsViewModel.onRequestMinimizeHandler : CaptionsViewModel(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return CaptionsViewModel.onRequestMinimizeHandler.setter((uint64_t)v4, v3);
}

uint64_t CaptionsViewModel.onRequestMinimizeHandler.init@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t closure #1 in CaptionsViewModel.onRequestMinimizeHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v6);
}

void CaptionsViewModel.onRequestMinimizeHandler.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsViewModel.onRequestMinimizeHandler.modify(void **a1)
{
}

uint64_t CaptionsViewModel.onRequestDismissControlsHandler.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*(void *)(v0 + 112));
  return OUTLINED_FUNCTION_23_0();
}

uint64_t key path getter for CaptionsViewModel.onRequestDismissControlsHandler : CaptionsViewModel@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result = CaptionsViewModel.onRequestDismissControlsHandler.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for CaptionsViewModel.onRequestDismissControlsHandler : CaptionsViewModel(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return CaptionsViewModel.onRequestDismissControlsHandler.setter((uint64_t)v4, v3);
}

uint64_t closure #1 in CaptionsViewModel.onRequestDismissControlsHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v6);
}

void CaptionsViewModel.onRequestDismissControlsHandler.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsViewModel.onRequestDismissControlsHandler.modify(void **a1)
{
}

uint64_t CaptionsStateSource.allowsMinimization.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t CaptionsStateSource.allowsMinimization.setter()
{
  return CaptionsStateSource.allowsMinimization.setter();
}

{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_27_7(KeyPath, v1, v2, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource, (uint64_t)&protocol conformance descriptor for CaptionsStateSource, v3, v5);
  return swift_release();
}

uint64_t (*CaptionsViewModel.allowsMinimization.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v1;
  CaptionsViewModel.source.getter();
  char v3 = CaptionsStateSource.allowsMinimization.getter();
  swift_release();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return CaptionsViewModel.allowsMinimization.modify;
}

uint64_t CaptionsViewModel.allowsMinimization.modify(uint64_t a1, uint64_t a2)
{
  return CaptionsViewModel.allowsMinimization.modify(a1, a2, (void (*)(uint64_t))CaptionsStateSource.allowsMinimization.setter);
}

uint64_t CaptionsViewModel.isMinimized.getter()
{
  return CaptionsViewModel.allowsMinimization.getter(CaptionsStateSource.isMinimized.getter);
}

uint64_t CaptionsViewModel.allowsMinimization.getter(uint64_t (*a1)(void))
{
  LOBYTE(a1) = a1();
  swift_release();
  return a1 & 1;
}

uint64_t CaptionsStateSource.isMinimized.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t CaptionsStateSource.isGroupCall.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t CaptionsStateSource.isGroupCall.setter()
{
  return CaptionsStateSource.allowsMinimization.setter();
}

uint64_t (*CaptionsViewModel.isGroupCall.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v1;
  CaptionsViewModel.source.getter();
  char v3 = CaptionsStateSource.isGroupCall.getter();
  swift_release();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return CaptionsViewModel.isGroupCall.modify;
}

uint64_t CaptionsViewModel.isGroupCall.modify(uint64_t a1, uint64_t a2)
{
  return CaptionsViewModel.allowsMinimization.modify(a1, a2, (void (*)(uint64_t))CaptionsStateSource.isGroupCall.setter);
}

uint64_t CaptionsViewModel.allowsMinimization.modify(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  CaptionsViewModel.source.getter();
  a3(v4);
  return swift_release();
}

uint64_t CaptionsStateSource.callName.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t CaptionsStateSource.callName.setter()
{
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_30_7(KeyPath, (uint64_t)partial apply for closure #1 in CaptionsStateSource.callName.setter, v1, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource, (uint64_t)&protocol conformance descriptor for CaptionsStateSource, v2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t (*CaptionsViewModel.callName.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  CaptionsViewModel.source.getter();
  uint64_t v3 = CaptionsStateSource.callName.getter();
  uint64_t v5 = v4;
  swift_release();
  *a1 = v3;
  a1[1] = v5;
  return CaptionsViewModel.callName.modify;
}

uint64_t CaptionsViewModel.callName.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    CaptionsViewModel.source.getter();
    OUTLINED_FUNCTION_38_3();
    swift_bridgeObjectRelease();
  }
  else
  {
    CaptionsViewModel.source.getter();
    OUTLINED_FUNCTION_38_3();
  }
  return swift_release();
}

uint64_t key path setter for CaptionsViewModel.groupImage : CaptionsViewModel(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  return CaptionsViewModel.groupImage.setter(v1);
}

void *CaptionsStateSource.groupImage.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  id v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

void CaptionsStateSource.groupImage.setter(void *a1)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_30_7(v2, (uint64_t)partial apply for closure #1 in CaptionsStateSource.groupImage.setter, v3, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource, (uint64_t)&protocol conformance descriptor for CaptionsStateSource, v4, v5);
  swift_release();
}

uint64_t (*CaptionsViewModel.groupImage.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  CaptionsViewModel.source.getter();
  uint64_t v3 = CaptionsStateSource.groupImage.getter();
  swift_release();
  *a1 = v3;
  return CaptionsViewModel.groupImage.modify;
}

uint64_t CaptionsViewModel.groupImage.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    CaptionsViewModel.source.getter();
    CaptionsStateSource.groupImage.setter(v2);
  }
  else
  {
    CaptionsViewModel.source.getter();
    CaptionsStateSource.groupImage.setter(v2);
  }
  return swift_release();
}

uint64_t key path getter for CaptionsViewModel.languageModelDownloadingProgress : CaptionsViewModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CaptionsViewModel.languageModelDownloadingProgress.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CaptionsViewModel.languageModelDownloadingProgress : CaptionsViewModel()
{
  return CaptionsViewModel.languageModelDownloadingProgress.setter();
}

uint64_t CaptionsStateSource.languageModelDownloadingProgress.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(void *)(v0 + 88);
}

uint64_t CaptionsStateSource.languageModelDownloadingProgress.setter()
{
  return CaptionsStateSource.languageModelDownloadingProgress.setter();
}

{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_27_7(KeyPath, v1, v2, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource, (uint64_t)&protocol conformance descriptor for CaptionsStateSource, v3, v5);
  return swift_release();
}

uint64_t (*CaptionsViewModel.languageModelDownloadingProgress.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  CaptionsViewModel.source.getter();
  uint64_t v3 = CaptionsStateSource.languageModelDownloadingProgress.getter();
  char v5 = v4;
  swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v5 & 1;
  return CaptionsViewModel.languageModelDownloadingProgress.modify;
}

uint64_t CaptionsViewModel.languageModelDownloadingProgress.modify()
{
  CaptionsViewModel.source.getter();
  CaptionsStateSource.languageModelDownloadingProgress.setter();
  return swift_release();
}

uint64_t CaptionsViewModel.layoutIdiom.getter@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = OUTLINED_FUNCTION_7_2();
  *a1 = *(unsigned char *)(v1 + 128);
  return result;
}

uint64_t key path getter for CaptionsViewModel.layoutIdiom : CaptionsViewModel@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CaptionsViewModel.layoutIdiom.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t key path setter for CaptionsViewModel.layoutIdiom : CaptionsViewModel()
{
  return CaptionsViewModel.layoutIdiom.setter();
}

uint64_t CaptionsViewModel.layoutIdiom.setter()
{
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_30_7(KeyPath, (uint64_t)partial apply for closure #1 in CaptionsViewModel.layoutIdiom.setter, v1, (uint64_t)&OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel, (uint64_t)&protocol conformance descriptor for CaptionsViewModel, v2, v4);
  return swift_release();
}

unsigned char *CaptionsViewModel.layoutIdiom.init@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t closure #1 in CaptionsViewModel.layoutIdiom.setter(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 128) = v3;
  return result;
}

void CaptionsViewModel.layoutIdiom.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsViewModel.layoutIdiom.modify(void **a1)
{
}

uint64_t CaptionsViewModel.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for CaptionsViewModel.cancellables : CaptionsViewModel()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return CaptionsViewModel.source.setter(v0, (uint64_t)&unk_1C376C918, (uint64_t)partial apply for closure #1 in CaptionsViewModel.cancellables.setter, MEMORY[0x1E4FBC898]);
}

uint64_t CaptionsViewModel.source.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = v4;
  uint64_t v12 = a1;
  specialized CaptionsViewModel.withMutation<A, B>(keyPath:_:)(KeyPath, a3, (uint64_t)&v10, (uint64_t)&OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  swift_release();
  return a4(a1);
}

uint64_t CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v11 = v10;
  uint64_t v48 = a8;
  int v41 = a6;
  int v42 = a5;
  uint64_t v45 = a3;
  id v46 = a4;
  uint64_t v44 = a2;
  uint64_t v39 = a1;
  int v43 = a10;
  int v47 = *a7;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)(v10 + 136) = MEMORY[0x1E4FBC860];
  ObservationRegistrar.init()();
  swift_getObjectType();
  uint64_t v40 = (*(uint64_t (**)(void))(a9 + 520))();
  uint64_t v14 = OUTLINED_FUNCTION_19_17();
  double v16 = v15(v14);
  uint64_t v17 = OUTLINED_FUNCTION_19_17();
  double v19 = v18(v17);
  uint64_t v52 = v13;
  double v53 = v16;
  double v54 = v19;
  uint64_t v55 = a1;
  uint64_t v56 = v40;
  id v38 = closure #1 in default argument 4 of CaptionSectioner.init(participants:badCaptionCountThreshold:suppressionAge:maximumAge:currentDate:);
  uint64_t v57 = closure #1 in default argument 4 of CaptionSectioner.init(participants:badCaptionCountThreshold:suppressionAge:maximumAge:currentDate:);
  uint64_t v58 = 0;
  CaptionSectioner.gatherAndSortCaptions()();
  uint64_t v21 = v20;
  type metadata accessor for Date();
  OUTLINED_FUNCTION_4();
  uint64_t v23 = v22;
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_41_5();
  Date.addingTimeInterval(_:)();
  uint64_t v28 = *(uint64_t (**)(void))(v23 + 8);
  OUTLINED_FUNCTION_25_8();
  uint64_t v29 = v28();
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_41_5();
  Date.addingTimeInterval(_:)();
  OUTLINED_FUNCTION_25_8();
  v28();
  uint64_t v50 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v50;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit16CaptionSectionerV0F0VG_AJs5NeverOTg5((uint64_t)partial apply for closure #1 in CaptionSectioner.updateCaptions(), (uint64_t)v49, v21);
  swift_bridgeObjectRelease();
  CaptionSectioner.chunkSections(sortedCaptions:)();
  v32._rawValue = v31;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_8();
  v28();
  OUTLINED_FUNCTION_25_8();
  v28();
  type metadata accessor for CaptionsStateSource(0);
  uint64_t v33 = swift_allocObject();
  CaptionsStateSource.init()();
  CaptionsStateSource.isMinimized.setter();
  CaptionsStateSource.isGroupCall.setter();
  CaptionsStateSource.allowsMinimization.setter();
  CaptionsStateSource.updateSections(_:)(v32);
  CaptionsStateSource.suppressionAge.setter();
  CaptionsStateSource.maximumAge.setter();
  CaptionsStateSource.callName.setter();
  id v34 = v46;
  id v35 = v46;
  CaptionsStateSource.groupImage.setter(v34);
  *(void *)(v11 + 16) = v33;
  *(Swift::OpaquePointer *)(v11 + 24) = v32;
  *(double *)(v11 + 32) = v16;
  *(double *)(v11 + 40) = v19;
  uint64_t v36 = v40;
  *(void *)(v11 + 48) = v39;
  *(void *)(v11 + 56) = v36;
  *(void *)(v11 + 64) = v38;
  *(void *)(v11 + 72) = 0;
  *(unsigned char *)(v11 + 128) = v47;
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  CaptionsStateSource.onRequestMinimize.setter();
  swift_release();
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  swift_retain();
  CaptionsStateSource.onRequestDismissControls.setter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  return v11;
}

uint64_t CaptionsStateSource.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CaptionsStateSource.init()();
  return v0;
}

uint64_t CaptionsStateSource.isMinimized.setter()
{
  return CaptionsStateSource.allowsMinimization.setter();
}

uint64_t type metadata accessor for CaptionsViewModel(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for CaptionsViewModel);
}

Swift::Void __swiftcall CaptionsStateSource.updateSections(_:)(Swift::OpaquePointer a1)
{
}

uint64_t CaptionsStateSource.suppressionAge.setter()
{
  return CaptionsStateSource.languageModelDownloadingProgress.setter();
}

uint64_t CaptionsStateSource.maximumAge.setter()
{
  return CaptionsStateSource.languageModelDownloadingProgress.setter();
}

uint64_t closure #1 in CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(char a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CaptionsViewModel.source.getter();
    char v3 = CaptionsStateSource.allowsMinimization.getter();
    swift_release();
    if (v3)
    {
      uint64_t v4 = (void (*)(void))CaptionsViewModel.onRequestMinimizeHandler.getter();
      if (v4)
      {
        uint64_t v5 = (uint64_t)v4;
        v4(a1 & 1);
        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t CaptionsStateSource.onRequestMinimize.setter()
{
  return CaptionsStateSource.onRequestMinimize.setter();
}

{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_27_7(KeyPath, v1, v2, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource, (uint64_t)&protocol conformance descriptor for CaptionsStateSource, v3, v5);
  swift_release();
  return swift_release();
}

uint64_t closure #2 in CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void (*)(void))CaptionsViewModel.onRequestDismissControlsHandler.getter();
    if (v1)
    {
      uint64_t v2 = (uint64_t)v1;
      v1();
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v2);
    }
    return swift_release();
  }
  return result;
}

uint64_t CaptionsStateSource.onRequestDismissControls.setter()
{
  return CaptionsStateSource.onRequestMinimize.setter();
}

uint64_t CaptionsViewModel.__allocating_init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)(void *a1, void *a2, int a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v84 = a6;
  LODWORD(v85) = a3;
  BOOL v77 = a2;
  char v8 = *a4;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v12 + 88))(&v86, v11, v12);
  uint64_t v13 = v86;
  uint64_t v14 = v87;
  char v15 = v88;
  v89[0] = v86;
  v89[1] = v87;
  char v90 = v88;
  uint64_t v16 = CallDisplayInfo.displayName.getter();
  uint64_t v18 = v17;
  outlined consume of CallDisplayInfo(v13, v14, v15);
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 104))(v19, v20);
  uint64_t v22 = a1[3];
  uint64_t v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  char v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 120))(v22, v23);
  LOBYTE(v89[0]) = v8;
  v74[2] = a5;
  swift_unknownObjectRetain();
  unsigned __int8 v25 = static Platform.current.getter() == 2;
  uint64_t v26 = swift_allocObject();
  CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(v83, v16, v18, v21, (v24 & 1) == 0, v85, (unsigned __int8 *)v89, a5, v84, v25);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CallDisplayInfo, Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  uint64_t v29 = v28;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_21();
  uint64_t v33 = v32 - v31;
  uint64_t v76 = a1;
  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v34);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 96);
  swift_retain();
  uint64_t v86 = (void *)v36(v34, v35);
  v74[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v89[0] = (id)static OS_dispatch_queue.main.getter();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  uint64_t v85 = *(void *)(*(void *)(v37 - 8) + 64);
  MEMORY[0x1F4188790](v37 - 8);
  unint64_t v75 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v39 = (char *)v74 - v75;
  uint64_t v79 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v39, 1, 1, v79);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CallDisplayInfo, Never>);
  uint64_t v84 = MEMORY[0x1E4F1AAE8];
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<CallDisplayInfo, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CallDisplayInfo, Never>);
  uint64_t v83 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  uint64_t v82 = MEMORY[0x1E4F1AAB8];
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<CallDisplayInfo, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CallDisplayInfo, Never>, OS_dispatch_queue>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v33, v27);
  swift_getKeyPath();
  uint64_t v40 = v26 + OBJC_IVAR____TtC15ConversationKit17CaptionsViewModel___observationRegistrar;
  uint64_t v86 = (void *)v26;
  uint64_t v41 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  OUTLINED_FUNCTION_39_5();
  swift_release();
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_44_4();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v78 = v26 + 136;
  OUTLINED_FUNCTION_6_1();
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  uint64_t v80 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_32_10();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UIImage?, Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_22_8(v76);
  uint64_t v43 = OUTLINED_FUNCTION_19_17();
  uint64_t v86 = (void *)v44(v43);
  uint64_t v45 = static OS_dispatch_queue.main.getter();
  uint64_t v46 = OUTLINED_FUNCTION_47_3(v45);
  MEMORY[0x1F4188790](v46);
  int v47 = (char *)v74 - v75;
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UIImage?, Never>);
  OUTLINED_FUNCTION_40_4(&lazy protocol witness table cache variable for type AnyPublisher<UIImage?, Never> and conformance AnyPublisher<A, B>);
  OUTLINED_FUNCTION_10_20();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v47, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_26_8();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UIImage?, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UIImage?, Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_24_11();
  OUTLINED_FUNCTION_48_6();
  uint64_t v48 = OUTLINED_FUNCTION_16_14();
  v49(v48);
  swift_getKeyPath();
  uint64_t v86 = (void *)v26;
  OUTLINED_FUNCTION_39_5();
  swift_release();
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_44_4();
  v74[0] = v41;
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_35_3();
  swift_endAccess();
  swift_release();
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_32_10();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v50);
  OUTLINED_FUNCTION_22_8(v76);
  uint64_t v51 = OUTLINED_FUNCTION_19_17();
  uint64_t v86 = (void *)v52(v51);
  uint64_t v53 = static OS_dispatch_queue.main.getter();
  uint64_t v54 = OUTLINED_FUNCTION_47_3(v53);
  MEMORY[0x1F4188790](v54);
  unint64_t v55 = v75;
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  OUTLINED_FUNCTION_40_4(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>);
  OUTLINED_FUNCTION_10_20();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v74 - v55, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_26_8();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Bool, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_24_11();
  OUTLINED_FUNCTION_48_6();
  uint64_t v56 = OUTLINED_FUNCTION_16_14();
  v57(v56);
  swift_getKeyPath();
  uint64_t v86 = (void *)v26;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v86 = (void *)v26;
  swift_getKeyPath();
  OUTLINED_FUNCTION_42_4();
  v74[1] = v40;
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_35_3();
  swift_endAccess();
  swift_release();
  uint64_t v86 = (void *)v26;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[Participant], Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v58);
  OUTLINED_FUNCTION_22_8(v77);
  uint64_t v59 = OUTLINED_FUNCTION_19_17();
  uint64_t v86 = (void *)v60(v59);
  uint64_t v61 = static OS_dispatch_queue.main.getter();
  uint64_t v62 = OUTLINED_FUNCTION_47_3(v61);
  MEMORY[0x1F4188790](v62);
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[Participant], Never>);
  OUTLINED_FUNCTION_40_4(&lazy protocol witness table cache variable for type AnyPublisher<[Participant], Never> and conformance AnyPublisher<A, B>);
  OUTLINED_FUNCTION_10_20();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v74 - v55, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_26_8();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<[Participant], Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[Participant], Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_24_11();
  OUTLINED_FUNCTION_48_6();
  uint64_t v63 = OUTLINED_FUNCTION_16_14();
  v64(v63);
  swift_getKeyPath();
  uint64_t v86 = (void *)v26;
  OUTLINED_FUNCTION_23_7();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_23_7();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_35_3();
  swift_endAccess();
  swift_release();
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_33_11();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Participant, Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v65);
  OUTLINED_FUNCTION_22_8(v77);
  uint64_t v66 = OUTLINED_FUNCTION_19_17();
  uint64_t v86 = (void *)v67(v66);
  uint64_t v68 = static OS_dispatch_queue.main.getter();
  uint64_t v69 = OUTLINED_FUNCTION_47_3(v68);
  MEMORY[0x1F4188790](v69);
  uint64_t v70 = (char *)v74 - v75;
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Participant, Never>);
  OUTLINED_FUNCTION_40_4(&lazy protocol witness table cache variable for type AnyPublisher<Participant, Never> and conformance AnyPublisher<A, B>);
  OUTLINED_FUNCTION_10_20();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v70, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_26_8();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Participant, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Participant, Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_24_11();
  OUTLINED_FUNCTION_48_6();
  uint64_t v71 = OUTLINED_FUNCTION_16_14();
  v72(v71);
  swift_getKeyPath();
  uint64_t v86 = (void *)v26;
  OUTLINED_FUNCTION_23_7();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v86 = (void *)v26;
  swift_getKeyPath();
  OUTLINED_FUNCTION_23_7();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v86 = (void *)v26;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_11();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  return v26;
}

uint64_t closure #1 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CallDisplayInfo.displayName.getter();
    CaptionsViewModel.source.getter();
    CaptionsStateSource.callName.setter();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v3 = v1;
    CaptionsViewModel.source.getter();
    CaptionsStateSource.groupImage.setter(v1);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CaptionsViewModel.source.getter();
    CaptionsStateSource.isGroupCall.setter();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CaptionsViewModel.source.getter();
    uint64_t v1 = swift_bridgeObjectRetain();
    specialized _ArrayProtocol.filter(_:)(v1);
    CaptionsStateSource.participants.setter();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #5 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CaptionsViewModel.updateCaptions(for:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t CaptionsStateSource.participants.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_30_7(v0, (uint64_t)partial apply for closure #1 in CaptionsStateSource.participants.setter, v1, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource, (uint64_t)&protocol conformance descriptor for CaptionsStateSource, v2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CaptionsViewModel.updateExpirationTimer()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.Caption?);
  MEMORY[0x1F4188790](v1);
  id v3 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v65 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v62 - v7;
  uint64_t v76 = type metadata accessor for CaptionSectioner.SpeakerSection(0);
  uint64_t v68 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v74 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v75 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v62 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CaptionSectioner.Caption??);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v64 = (uint64_t)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v62 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v66 = (char *)&v62 - v21;
  uint64_t v22 = CaptionsViewModel.expirationTimer.getter();
  objc_msgSend(v22, sel_invalidate);

  uint64_t v23 = (uint64_t)v3;
  uint64_t v63 = v0;
  CaptionsViewModel.source.getter();
  uint64_t v24 = CaptionsStateSource.sections.getter();
  swift_release();
  unint64_t v25 = *(void *)(v24 + 16);
  uint64_t v71 = v24;
  swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  unint64_t v72 = v25;
  uint64_t v73 = v14;
  uint64_t v69 = v23;
  uint64_t v70 = v1;
  uint64_t v27 = v76;
  while (1)
  {
    if (v26 == v25)
    {
      uint64_t v28 = 1;
      unint64_t v26 = v25;
    }
    else
    {
      if ((v26 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      if (v26 >= *(void *)(v71 + 16)) {
        goto LABEL_37;
      }
      outlined init with copy of CaptionSectioner.SpeakerSection(v71+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * v26, (uint64_t)v14, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
      uint64_t v28 = 0;
      ++v26;
    }
    uint64_t v29 = 1;
    __swift_storeEnumTagSinglePayload((uint64_t)v14, v28, 1, v27);
    uint64_t v30 = (uint64_t)v14;
    uint64_t v31 = v75;
    outlined init with take of Any?(v30, v75, &demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
    if (__swift_getEnumTagSinglePayload(v31, 1, v27) != 1)
    {
      uint64_t v32 = v74;
      outlined init with take of CaptionSectioner.SpeakerSection(v75, v74, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
      uint64_t v33 = *(void *)(v32 + *(int *)(v76 + 24));
      uint64_t v34 = *(void *)(v33 + 16);
      if (v34)
      {
        uint64_t v35 = v67;
        uint64_t v36 = v33 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
        swift_bridgeObjectRetain();
        uint64_t v37 = *(void *)(v35 + 72);
        while (1)
        {
          outlined init with copy of CaptionSectioner.SpeakerSection(v36, (uint64_t)v8, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
          if (v8[*(int *)(v4 + 48)] != 2) {
            break;
          }
          outlined destroy of CaptionSectioner.SpeakerSection((uint64_t)v8, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
          v36 += v37;
          if (!--v34) {
            goto LABEL_14;
          }
        }
        outlined init with take of CaptionSectioner.SpeakerSection((uint64_t)v8, (uint64_t)v20, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
        uint64_t v38 = (uint64_t)v20;
        uint64_t v39 = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_14:
        uint64_t v38 = (uint64_t)v20;
        uint64_t v39 = 1;
      }
      __swift_storeEnumTagSinglePayload(v38, v39, 1, v4);
      swift_bridgeObjectRelease();
      outlined destroy of CaptionSectioner.SpeakerSection(v74, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
      uint64_t v29 = 0;
      uint64_t v23 = v69;
      uint64_t v1 = v70;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v20, v29, 1, v1);
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v1) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = 1;
      uint64_t v20 = v66;
      goto LABEL_22;
    }
    outlined init with take of Any?((uint64_t)v20, v23, &demangling cache variable for type metadata for CaptionSectioner.Caption?);
    if (__swift_getEnumTagSinglePayload(v23, 1, v4) != 1) {
      break;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v23, &demangling cache variable for type metadata for CaptionSectioner.Caption?);
    unint64_t v25 = v72;
    uint64_t v14 = v73;
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = v66;
  outlined init with take of Any?(v23, (uint64_t)v66, &demangling cache variable for type metadata for CaptionSectioner.Caption?);
  uint64_t v40 = 0;
LABEL_22:
  __swift_storeEnumTagSinglePayload((uint64_t)v20, v40, 1, v1);
  swift_bridgeObjectRelease();
  uint64_t v41 = v64;
  outlined init with copy of CaptionSectioner.Caption??((uint64_t)v20, v64);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v41, 1, v1);
  uint64_t v43 = (uint64_t)v65;
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v44 = (uint64_t *)&demangling cache variable for type metadata for CaptionSectioner.Caption??;
    goto LABEL_26;
  }
  if (__swift_getEnumTagSinglePayload(v41, 1, v4) == 1)
  {
    uint64_t v44 = &demangling cache variable for type metadata for CaptionSectioner.Caption?;
LABEL_26:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v41, v44);
    if (one-time initialization token for conversationKit == -1)
    {
LABEL_27:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for CaptionSectioner.Caption??);
    }
LABEL_38:
    swift_once();
    goto LABEL_27;
  }
  outlined init with take of CaptionSectioner.SpeakerSection(v41, v43, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
  CaptionsViewModel.source.getter();
  CaptionsStateSource.maximumAge.getter();
  char v47 = v46;
  swift_release();
  if (v47)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    outlined destroy of CaptionSectioner.SpeakerSection(v43, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for CaptionSectioner.Caption??);
  }
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v51 = (char *)&v62 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSinceNow.getter();
  double v53 = v52;
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_1C3769620;
  *(double *)aBlock = v53;
  uint64_t v55 = String.init<A>(reflecting:)();
  uint64_t v57 = v56;
  *(void *)(v54 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v54 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v54 + 32) = v55;
  *(void *)(v54 + 40) = v57;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v58 = self;
  uint64_t v59 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #3 in CaptionsViewModel.updateExpirationTimer();
  aBlock[5] = v59;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  aBlock[3] = &block_descriptor_140;
  char v60 = _Block_copy(aBlock);
  swift_release();
  id v61 = objc_msgSend(v58, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v60, v53);
  _Block_release(v60);
  CaptionsViewModel.expirationTimer.setter(v61);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
  outlined destroy of CaptionSectioner.SpeakerSection(v43, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for CaptionSectioner.Caption??);
}

uint64_t CaptionsViewModel.updateSuppressionTimer()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.Caption?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CaptionSectioner.Caption(0);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = CaptionsViewModel.suppressionTimer.getter();
  objc_msgSend(v9, sel_invalidate);

  CaptionsViewModel.source.getter();
  CaptionsStateSource.suppressionAge.getter();
  char v11 = v10;
  swift_release();
  if (v11)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    return os_log(_:dso:log:type:_:)();
  }
  else
  {
    CaptionsViewModel.source.getter();
    uint64_t v12 = CaptionsStateSource.sections.getter();
    swift_release();
    specialized BidirectionalCollection.last.getter(v12, (uint64_t)v2);
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for CaptionSectioner.SpeakerSection(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v13) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v2, &demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v6);
LABEL_10:
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for CaptionSectioner.Caption?);
LABEL_11:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      return os_log(_:dso:log:type:_:)();
    }
    uint64_t v15 = *(void *)&v2[*(int *)(v13 + 24)];
    swift_bridgeObjectRetain();
    outlined destroy of CaptionSectioner.SpeakerSection((uint64_t)v2, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
    specialized BidirectionalCollection.last.getter(v15, (uint64_t)v5);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1) {
      goto LABEL_10;
    }
    outlined init with take of CaptionSectioner.SpeakerSection((uint64_t)v5, (uint64_t)v8, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    if (v8[*(int *)(v6 + 48)])
    {
      outlined destroy of CaptionSectioner.SpeakerSection((uint64_t)v8, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      goto LABEL_11;
    }
    uint64_t v16 = type metadata accessor for Date();
    v30[1] = v30;
    uint64_t v17 = *(void *)(v16 - 8);
    MEMORY[0x1F4188790](v16);
    uint64_t v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.addingTimeInterval(_:)();
    Date.timeIntervalSinceNow.getter();
    double v21 = v20;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1C3769620;
    *(double *)aBlock = v21;
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v25;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    unint64_t v26 = self;
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = partial apply for closure #1 in CaptionsViewModel.updateSuppressionTimer();
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    aBlock[3] = &block_descriptor_14;
    uint64_t v28 = _Block_copy(aBlock);
    swift_release();
    id v29 = objc_msgSend(v26, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v28, v21);
    _Block_release(v28);
    CaptionsViewModel.expirationTimer.setter(v29);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    return outlined destroy of CaptionSectioner.SpeakerSection((uint64_t)v8, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
  }
}

uint64_t partial apply for closure #1 in CaptionsViewModel.onRequestMinimizeHandler.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_31_8();
  return closure #1 in CaptionsViewModel.onRequestMinimizeHandler.setter(v0, v1, v2);
}

uint64_t partial apply for closure #1 in CaptionsViewModel.onRequestDismissControlsHandler.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_31_8();
  return closure #1 in CaptionsViewModel.onRequestDismissControlsHandler.setter(v0, v1, v2);
}

uint64_t sub_1C3067DA4()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewModel.source.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #1 in CaptionsViewModel.source.setter()
{
  return closure #1 in CaptionsViewModel.source.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in CaptionsViewModel.sectioner.setter()
{
  return closure #1 in CaptionsViewModel.sectioner.setter(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t CaptionsViewModel.updateCaptionsVisibility(animated:)(char a1)
{
  if (a1) {
    static Animation.default.getter();
  }
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in CaptionsViewModel.updateCaptionsVisibility(animated:)(uint64_t a1)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsViewModel and conformance CaptionsViewModel, (void (*)(uint64_t))type metadata accessor for CaptionsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  CaptionSectioner.updateCaptions()();
  swift_endAccess();
  v5[0] = a1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  CaptionsViewModel.source.getter();
  CaptionsViewModel.sectioner.getter((uint64_t)v5);
  v2._rawValue = (void *)v5[0];
  uint64_t v6 = v5[3];
  outlined release of LinearGradient((uint64_t)&v6);
  swift_release();
  CaptionsStateSource.updateSections(_:)(v2);
  swift_release();
  uint64_t v3 = swift_bridgeObjectRelease();
  CaptionsViewModel.updateExpirationTimer()(v3);
  return CaptionsViewModel.updateSuppressionTimer()();
}

uint64_t CaptionsStateSource.sections.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CaptionsStateSource.maximumAge.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(void *)(v0 + 72);
}

uint64_t CaptionsStateSource.suppressionAge.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_17();
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_4_17();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(void *)(v0 + 56);
}

uint64_t closure #3 in CaptionsViewModel.updateExpirationTimer()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CaptionsViewModel.updateCaptionsVisibility(animated:)(1);
    return swift_release();
  }
  return result;
}

uint64_t CaptionsViewModel.deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 96));
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 112));
  swift_bridgeObjectRelease();
  type metadata accessor for ObservationRegistrar();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = OUTLINED_FUNCTION_28_6();
  v2(v1);
  return v0;
}

uint64_t CaptionsViewModel.__deallocating_deinit()
{
  return CaptionsViewModel.__deallocating_deinit((void (*)(void))CaptionsViewModel.deinit);
}

uint64_t key path getter for CaptionsStateSource.callName : CaptionsStateSource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CaptionsStateSource.callName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CaptionsStateSource.callName : CaptionsStateSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CaptionsViewModel.callName : CaptionsViewModel(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))CaptionsStateSource.callName.setter);
}

uint64_t key path setter for CaptionsViewModel.callName : CaptionsViewModel(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t CaptionsStateSource.access<A>(keyPath:)(uint64_t a1)
{
  return CaptionsViewModel.access<A>(keyPath:)(a1, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
}

uint64_t CaptionsViewModel.access<A>(keyPath:)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t closure #1 in CaptionsStateSource.callName.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t specialized CaptionsViewModel.withMutation<A, B>(keyPath:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t CaptionsStateSource.withMutation<A, B>(keyPath:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CaptionsViewModel.withMutation<A, B>(keyPath:_:)(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
}

uint64_t CaptionsViewModel.withMutation<A, B>(keyPath:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

void CaptionsStateSource.callName.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.callName.modify(void **a1)
{
}

void *key path getter for CaptionsStateSource.groupImage : CaptionsStateSource@<X0>(void *a1@<X8>)
{
  uint64_t result = CaptionsStateSource.groupImage.getter();
  *a1 = result;
  return result;
}

void key path setter for CaptionsStateSource.groupImage : CaptionsStateSource(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  CaptionsStateSource.groupImage.setter(v1);
}

void closure #1 in CaptionsStateSource.groupImage.setter(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = a2;
  id v5 = a2;
}

void CaptionsStateSource.groupImage.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.groupImage.modify(void **a1)
{
}

uint64_t CaptionsStateSource.participants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for CaptionsStateSource.participants : CaptionsStateSource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CaptionsStateSource.participants.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CaptionsStateSource.participants : CaptionsStateSource()
{
  return CaptionsStateSource.participants.setter();
}

uint64_t closure #1 in CaptionsStateSource.participants.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void CaptionsStateSource.participants.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.participants.modify(void **a1)
{
}

uint64_t key path getter for CaptionsStateSource.sections : CaptionsStateSource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CaptionsStateSource.sections.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CaptionsStateSource.sections : CaptionsStateSource()
{
  return CaptionsStateSource.sections.setter();
}

uint64_t CaptionsStateSource.sections.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_30_7(v0, (uint64_t)partial apply for closure #1 in CaptionsStateSource.sections.setter, v1, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource, (uint64_t)&protocol conformance descriptor for CaptionsStateSource, v2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CaptionsStateSource.sections.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CaptionsStateSource.suppressionAge : CaptionsStateSource@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CaptionsStateSource.suppressionAge.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CaptionsStateSource.suppressionAge : CaptionsStateSource()
{
  return CaptionsStateSource.suppressionAge.setter();
}

uint64_t closure #1 in CaptionsStateSource.suppressionAge.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_beginAccess();
  *(void *)(a1 + 56) = a2;
  *(unsigned char *)(a1 + 64) = a3 & 1;
  return result;
}

void CaptionsStateSource.suppressionAge.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.suppressionAge.modify(void **a1)
{
}

uint64_t key path getter for CaptionsStateSource.maximumAge : CaptionsStateSource@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CaptionsStateSource.maximumAge.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CaptionsStateSource.maximumAge : CaptionsStateSource()
{
  return CaptionsStateSource.maximumAge.setter();
}

uint64_t CaptionsStateSource.maximumAge.init@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t closure #1 in CaptionsStateSource.maximumAge.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_beginAccess();
  *(void *)(a1 + 72) = a2;
  *(unsigned char *)(a1 + 80) = a3 & 1;
  return result;
}

void CaptionsStateSource.maximumAge.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.maximumAge.modify(void **a1)
{
}

uint64_t key path getter for CaptionsStateSource.isMinimized : CaptionsStateSource@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CaptionsStateSource.isMinimized.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CaptionsStateSource.isMinimized : CaptionsStateSource()
{
  return CaptionsStateSource.isMinimized.setter();
}

uint64_t closure #1 in CaptionsStateSource.isMinimized.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 81) = a2;
  return result;
}

void CaptionsStateSource.isMinimized.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.isMinimized.modify(void **a1)
{
}

uint64_t key path getter for CaptionsStateSource.isGroupCall : CaptionsStateSource@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CaptionsStateSource.isGroupCall.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CaptionsStateSource.isGroupCall : CaptionsStateSource()
{
  return CaptionsStateSource.isGroupCall.setter();
}

uint64_t CaptionsStateSource.isGroupCall.init@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t closure #1 in CaptionsStateSource.isGroupCall.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 82) = a2;
  return result;
}

void CaptionsStateSource.isGroupCall.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.isGroupCall.modify(void **a1)
{
}

uint64_t key path getter for CaptionsStateSource.languageModelDownloadingProgress : CaptionsStateSource@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CaptionsStateSource.languageModelDownloadingProgress.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CaptionsStateSource.languageModelDownloadingProgress : CaptionsStateSource()
{
  return CaptionsStateSource.languageModelDownloadingProgress.setter();
}

uint64_t closure #1 in CaptionsStateSource.languageModelDownloadingProgress.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_beginAccess();
  *(void *)(a1 + 88) = a2;
  *(unsigned char *)(a1 + 96) = a3 & 1;
  return result;
}

void CaptionsStateSource.languageModelDownloadingProgress.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.languageModelDownloadingProgress.modify(void **a1)
{
}

uint64_t key path getter for CaptionsStateSource.allowsMinimization : CaptionsStateSource@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CaptionsStateSource.allowsMinimization.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C3069474()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = CaptionsStateSource.allowsMinimization.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t key path setter for CaptionsStateSource.allowsMinimization : CaptionsStateSource()
{
  return CaptionsStateSource.allowsMinimization.setter();
}

uint64_t sub_1C30694C4(unsigned __int8 *a1)
{
  return CaptionsStateSource.allowsMinimization.setter();
}

uint64_t lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CaptionsStateSource(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for CaptionsStateSource);
}

uint64_t closure #1 in CaptionsStateSource.allowsMinimization.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 97) = a2;
  return result;
}

uint64_t partial apply for closure #1 in CaptionsStateSource.allowsMinimization.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_2();
  return closure #1 in CaptionsStateSource.allowsMinimization.setter(v0, v1);
}

uint64_t sub_1C30695C0()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = CaptionsStateSource.isMinimized.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C30695E8(unsigned __int8 *a1)
{
  return CaptionsStateSource.isMinimized.setter();
}

uint64_t sub_1C306960C()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = CaptionsStateSource.isGroupCall.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C3069634(unsigned __int8 *a1)
{
  return CaptionsStateSource.isGroupCall.setter();
}

uint64_t partial apply for closure #1 in CaptionsStateSource.isGroupCall.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_2();
  return closure #1 in CaptionsStateSource.isGroupCall.setter(v0, v1);
}

uint64_t sub_1C3069674()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsStateSource.callName.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t partial apply for closure #1 in CaptionsStateSource.callName.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_31_8();
  return closure #1 in CaptionsStateSource.callName.setter(v0, v1, v2);
}

void *sub_1C30696BC()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsStateSource.groupImage.getter();
  *uint64_t v0 = result;
  return result;
}

void partial apply for closure #1 in CaptionsStateSource.groupImage.setter()
{
  closure #1 in CaptionsStateSource.groupImage.setter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #1 in CaptionsStateSource.languageModelDownloadingProgress.setter()
{
  return closure #1 in CaptionsStateSource.languageModelDownloadingProgress.setter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t partial apply for closure #1 in CaptionsViewModel.layoutIdiom.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_2();
  return closure #1 in CaptionsViewModel.layoutIdiom.setter(v0, v1);
}

void CaptionsStateSource.allowsMinimization.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.allowsMinimization.modify(void **a1)
{
}

uint64_t CaptionsStateSource.onRequestMinimize.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t key path getter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource@<X0>(void *a1@<X8>)
{
  return key path getter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource(CaptionsStateSource.onRequestMinimize.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> (), a1);
}

uint64_t key path setter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource(a1, a2, a3, a4, (uint64_t)&unk_1F1E984F8, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ()), (uint64_t (*)(uint64_t, uint64_t))CaptionsStateSource.onRequestMinimize.setter);
}

uint64_t CaptionsStateSource.onRequestMinimize.init@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t closure #1 in CaptionsStateSource.onRequestMinimize.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = a3;
  swift_retain();
  return swift_release();
}

void CaptionsStateSource.onRequestMinimize.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.onRequestMinimize.modify(void **a1)
{
}

uint64_t CaptionsStateSource.onRequestDismissControls.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t key path getter for CaptionsStateSource.onRequestDismissControls : CaptionsStateSource@<X0>(void *a1@<X8>)
{
  return key path getter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource(CaptionsStateSource.onRequestDismissControls.getter, (uint64_t)partial apply for thunk for @callee_guaranteed () -> (), a1);
}

uint64_t key path getter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X5>, void *a3@<X8>)
{
  uint64_t v5 = a1();
  uint64_t v7 = v6;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *(void *)(result + 24) = v7;
  *a3 = a2;
  a3[1] = result;
  return result;
}

uint64_t key path setter for CaptionsStateSource.onRequestDismissControls : CaptionsStateSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource(a1, a2, a3, a4, (uint64_t)&unk_1F1E984A8, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), (uint64_t (*)(uint64_t, uint64_t))CaptionsStateSource.onRequestDismissControls.setter);
}

uint64_t key path setter for CaptionsStateSource.onRequestMinimize : CaptionsStateSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = v10;
  swift_retain();
  return a7(a6, v11);
}

uint64_t closure #1 in CaptionsStateSource.onRequestDismissControls.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 120) = a2;
  *(void *)(a1 + 128) = a3;
  swift_retain();
  return swift_release();
}

void CaptionsStateSource.onRequestDismissControls.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v0 = OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_6_26((uint64_t)v0);
  swift_getKeyPath();
  OUTLINED_FUNCTION_4_22(OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar);
  uint64_t v1 = lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_1_47(v1);
  swift_release();
  OUTLINED_FUNCTION_12_20();
  OUTLINED_FUNCTION_2_34();
  swift_release();
  OUTLINED_FUNCTION_3_47();
  OUTLINED_FUNCTION_15_0();
}

void CaptionsStateSource.onRequestDismissControls.modify(void **a1)
{
}

uint64_t CaptionsStateSource.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for CaptionsStateSource.cancellables : CaptionsStateSource()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return CaptionsStateSource.cancellables.setter(v0);
}

uint64_t CaptionsStateSource.cancellables.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = v1;
  uint64_t v7 = a1;
  specialized CaptionsViewModel.withMutation<A, B>(keyPath:_:)(KeyPath, (uint64_t)partial apply for closure #1 in CaptionsStateSource.cancellables.setter, (uint64_t)&v5, (uint64_t)&OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar, &lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CaptionsViewModel.cancellables.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 136) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void *CaptionsStateSource.init()()
{
  uint64_t v1 = (void *)v0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 80) = 1;
  *(_WORD *)(v0 + 81) = 1;
  *(void *)(v0 + 88) = 0;
  *(_WORD *)(v0 + 96) = 257;
  *(void *)(v0 + 104) = TPNumberPadCharacter.rawValue.getter;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = TPNumberPadCharacter.rawValue.getter;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 136) = v2;
  uint64_t v43 = v0 + 136;
  uint64_t v44 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>);
  swift_allocObject();
  uint64_t v3 = CurrentValueSubject.init(_:)();
  v1[18] = v3;
  uint64_t v42 = (uint64_t)v1 + OBJC_IVAR____TtC15ConversationKit19CaptionsStateSource___observationRegistrar;
  ObservationRegistrar.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Throttle<Publishers.RemoveDuplicates<Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>>, NSRunLoop>);
  OUTLINED_FUNCTION_4();
  uint64_t v40 = v4;
  uint64_t v41 = v5;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  uint64_t v37 = v7 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>>);
  OUTLINED_FUNCTION_4();
  uint64_t v38 = v8;
  uint64_t v39 = v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v36 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  uint64_t v44 = v3;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  swift_retain();
  id v45 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v18 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v21, 1, 1, v22);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v21, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>);
  Publisher.removeDuplicates(by:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  uint64_t v23 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  OUTLINED_FUNCTION_4();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_21();
  uint64_t v29 = v28 - v27;
  static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)();
  id v30 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v44 = (uint64_t)v30;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  uint64_t v32 = v37;
  uint64_t v31 = v38;
  uint64_t v33 = v36;
  Publisher.throttle<A>(for:scheduler:latest:)();

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, v23);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v31);
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Throttle<Publishers.RemoveDuplicates<Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>>, NSRunLoop> and conformance Publishers.Throttle<A, B>, &demangling cache variable for type metadata for Publishers.Throttle<Publishers.RemoveDuplicates<Publishers.ReceiveOn<CurrentValueSubject<[CaptionSectioner.SpeakerSection], Never>, OS_dispatch_queue>>, NSRunLoop>);
  uint64_t v34 = v40;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v32, v34);
  swift_getKeyPath();
  uint64_t v44 = (uint64_t)v1;
  lazy protocol witness table accessor for type CaptionsViewModel and conformance CaptionsViewModel(&lazy protocol witness table cache variable for type CaptionsStateSource and conformance CaptionsStateSource, (void (*)(uint64_t))type metadata accessor for CaptionsStateSource);
  OUTLINED_FUNCTION_42_4();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v44 = (uint64_t)v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_42_4();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v44 = (uint64_t)v1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return v1;
}

uint64_t sub_1C306A68C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(char a1)
{
  return closure #1 in CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)(a1);
}

uint64_t partial apply for closure #2 in CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)()
{
  return closure #2 in CaptionsViewModel.init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)();
}

uint64_t partial apply for closure #1 in CaptionsStateSource.isMinimized.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_46_2();
  return closure #1 in CaptionsStateSource.isMinimized.setter(v0, v1);
}

uint64_t partial apply for closure #1 in CaptionsStateSource.suppressionAge.setter()
{
  return closure #1 in CaptionsStateSource.suppressionAge.setter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t partial apply for closure #1 in CaptionsStateSource.maximumAge.setter()
{
  return closure #1 in CaptionsStateSource.maximumAge.setter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t partial apply for closure #1 in CaptionsStateSource.onRequestMinimize.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_31_8();
  return closure #1 in CaptionsStateSource.onRequestMinimize.setter(v0, v1, v2);
}

uint64_t partial apply for closure #1 in CaptionsStateSource.onRequestDismissControls.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_31_8();
  return closure #1 in CaptionsStateSource.onRequestDismissControls.setter(v0, v1, v2);
}

void outlined consume of CallDisplayInfo(void *a1, id a2, char a3)
{
  if (a3 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return;
  }
  if (a3 != 1)
  {
    if (a3) {
      return;
    }
    goto LABEL_4;
  }
}

uint64_t partial apply for closure #1 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)()
{
  return closure #1 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)();
}

uint64_t sub_1C306A7B8()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewModel.cancellables.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #2 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)(void **a1)
{
  return closure #2 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)(a1);
}

uint64_t partial apply for closure #3 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)()
{
  return closure #3 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)();
}

uint64_t partial apply for closure #4 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)()
{
  return closure #4 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)();
}

uint64_t partial apply for closure #5 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)(uint64_t a1)
{
  return closure #5 in CaptionsViewModel.init(presentationStateProvider:remoteParticipantsStateProvider:allowsMinimization:layoutIdiom:defaults:)(a1);
}

uint64_t sub_1C306A804()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsStateSource.participants.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t partial apply for closure #1 in CaptionsStateSource.participants.setter()
{
  return closure #1 in CaptionsStateSource.participants.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C306A84C()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsStateSource.sections.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t closure #1 in CaptionsStateSource.init()(uint64_t *a1, uint64_t *a2)
{
  return Array<A>.duplicateComparator(_:)(*a2, *a1);
}

uint64_t Array<A>.duplicateComparator(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v161 = type metadata accessor for Participant(0);
  uint64_t v4 = MEMORY[0x1F4188790](v161);
  uint64_t v6 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  id v166 = (char *)&v140 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v165 = (uint64_t)&v140 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v164 = (uint64_t)&v140 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v163 = (uint64_t)&v140 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v162 = (uint64_t)&v140 - v15;
  v180 = (int *)type metadata accessor for CaptionSectioner.Caption(0);
  uint64_t v170 = *((void *)v180 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v180);
  uint64_t v18 = (char *)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v140 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v167 = (uint64_t)&v140 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v140 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v169 = (uint64_t)&v140 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v168 = (uint64_t)&v140 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v182 = (uint64_t)&v140 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v181 = (uint64_t)&v140 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v37 = (uint64_t *)((char *)&v140 - v36);
  MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v140 - v38;
  uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptionSectioner.Caption?, CaptionSectioner.Caption?));
  MEMORY[0x1F4188790](v171);
  uint64_t v179 = (uint64_t)&v140 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.Caption?);
  uint64_t v42 = MEMORY[0x1F4188790](v41 - 8);
  uint64_t v176 = (uint64_t)&v140 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v172 = (uint64_t)&v140 - v44;
  uint64_t v147 = type metadata accessor for CaptionSectioner.SpeakerSection(0);
  uint64_t v45 = *(void *)(v147 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v147);
  uint64_t v154 = (uint64_t)&v140 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v46);
  uint64_t v155 = (uint64_t)&v140 - v48;
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CaptionSectioner.SpeakerSection?, CaptionSectioner.SpeakerSection?));
  MEMORY[0x1F4188790](v146);
  uint64_t v156 = (uint64_t)&v140 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
  uint64_t v51 = MEMORY[0x1F4188790](v50 - 8);
  uint64_t v150 = (uint64_t)&v140 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v54 = (char *)&v140 - v53;
  uint64_t v55 = *(void *)(a1 + 16);
  unint64_t v151 = *(void *)(a2 + 16);
  if (v151 != v55) {
    return 0;
  }
  uint64_t v145 = a2;
  swift_bridgeObjectRetain();
  uint64_t v148 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v57 = 0;
  unint64_t v58 = 0;
  char v157 = v6;
  uint64_t v59 = (uint64_t)v180;
  uint64_t v60 = v147;
  uint64_t v144 = v45;
  uint64_t v160 = v18;
  uint64_t v159 = v21;
  uint64_t v158 = v26;
  uint64_t v177 = v37;
  v178 = (uint64_t *)v39;
  uint64_t v141 = v54;
LABEL_3:
  if (v58 == v151)
  {
    uint64_t v61 = 1;
    unint64_t v143 = v151;
    unint64_t v62 = v151;
  }
  else
  {
    if (v58 >= v151) {
      goto LABEL_62;
    }
    uint64_t v63 = v145
        + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
        + *(void *)(v45 + 72) * v58;
    unint64_t v64 = v58;
    outlined init with copy of CaptionSectioner.SpeakerSection(v63, (uint64_t)v54, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
    uint64_t v61 = 0;
    unint64_t v143 = v64 + 1;
    unint64_t v62 = v151;
  }
  uint64_t v65 = 1;
  uint64_t result = __swift_storeEnumTagSinglePayload((uint64_t)v54, v61, 1, v60);
  unint64_t v66 = v62;
  if (v57 != v62)
  {
    if (v57 >= v62) {
      goto LABEL_63;
    }
    outlined init with copy of CaptionSectioner.SpeakerSection(v148+ ((*(unsigned __int8 *)(v144 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80))+ *(void *)(v144 + 72) * v57, v150, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
    uint64_t v65 = 0;
    unint64_t v66 = v57 + 1;
  }
  unint64_t v142 = v66;
  uint64_t v67 = v150;
  __swift_storeEnumTagSinglePayload(v150, v65, 1, v60);
  uint64_t v68 = v156;
  uint64_t v69 = v156 + *(int *)(v146 + 48);
  outlined init with take of Any?((uint64_t)v54, v156, &demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
  outlined init with take of Any?(v67, v69, &demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
  if (__swift_getEnumTagSinglePayload(v68, 1, v60) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v139 = 1;
    if (__swift_getEnumTagSinglePayload(v69, 1, v60) == 1) {
      return v139;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v69, &demangling cache variable for type metadata for CaptionSectioner.SpeakerSection?);
    return 0;
  }
  if (__swift_getEnumTagSinglePayload(v69, 1, v60) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of CaptionSectioner.SpeakerSection(v156, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
    return 0;
  }
  uint64_t v70 = v155;
  outlined init with take of CaptionSectioner.SpeakerSection(v156, v155, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
  uint64_t v71 = v60;
  uint64_t v72 = v154;
  outlined init with take of CaptionSectioner.SpeakerSection(v69, v154, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
  uint64_t v73 = *(int *)(v71 + 24);
  uint64_t v74 = *(void *)(v70 + v73);
  uint64_t v75 = *(void *)(v72 + v73);
  unint64_t v76 = *(void *)(v74 + 16);
  if (v76 != *(void *)(v75 + 16))
  {
LABEL_53:
    outlined destroy of CaptionSectioner.SpeakerSection(v154, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
    outlined destroy of CaptionSectioner.SpeakerSection(v155, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v153 = v74;
  swift_bridgeObjectRetain();
  uint64_t v152 = v75;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v77 = 0;
  unint64_t v78 = 0;
  uint64_t v79 = (uint64_t)v18;
  uint64_t v80 = (uint64_t)v26;
  unint64_t v149 = v76;
  while (1)
  {
    if (v78 == v76)
    {
      uint64_t v81 = 1;
      unint64_t v175 = v76;
      uint64_t v82 = v172;
      goto LABEL_18;
    }
    uint64_t v82 = v172;
    if (v78 >= *(void *)(v153 + 16)) {
      break;
    }
    unint64_t v83 = v78;
    outlined init with copy of CaptionSectioner.SpeakerSection(v153+ ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80))+ *(void *)(v170 + 72) * v78, v172, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    uint64_t v81 = 0;
    unint64_t v175 = v83 + 1;
LABEL_18:
    uint64_t v84 = 1;
    uint64_t result = __swift_storeEnumTagSinglePayload(v82, v81, 1, v59);
    unint64_t v85 = v76;
    if (v77 != v76)
    {
      if (v77 >= *(void *)(v152 + 16)) {
        goto LABEL_61;
      }
      outlined init with copy of CaptionSectioner.SpeakerSection(v152+ ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80))+ *(void *)(v170 + 72) * v77, v176, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v84 = 0;
      unint64_t v85 = v77 + 1;
    }
    unint64_t v174 = v85;
    uint64_t v26 = (char *)v80;
    uint64_t v18 = (char *)v79;
    uint64_t v86 = v82;
    uint64_t v87 = v176;
    __swift_storeEnumTagSinglePayload(v176, v84, 1, v59);
    uint64_t v88 = v179;
    uint64_t v89 = v179 + *(int *)(v171 + 48);
    outlined init with take of Any?(v86, v179, &demangling cache variable for type metadata for CaptionSectioner.Caption?);
    outlined init with take of Any?(v87, v89, &demangling cache variable for type metadata for CaptionSectioner.Caption?);
    if (__swift_getEnumTagSinglePayload(v88, 1, v59) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v89, 1, v59);
      uint64_t v60 = v147;
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of CaptionSectioner.SpeakerSection(v154, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
        uint64_t result = outlined destroy of CaptionSectioner.SpeakerSection(v155, (void (*)(void))type metadata accessor for CaptionSectioner.SpeakerSection);
        unint64_t v57 = v142;
        uint64_t v45 = v144;
        uint64_t v54 = v141;
        unint64_t v58 = v143;
        goto LABEL_3;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v89, &demangling cache variable for type metadata for CaptionSectioner.Caption?);
      goto LABEL_53;
    }
    if (__swift_getEnumTagSinglePayload(v89, 1, v59) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of CaptionSectioner.SpeakerSection(v179, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      goto LABEL_53;
    }
    char v90 = v178;
    outlined init with take of CaptionSectioner.SpeakerSection(v179, (uint64_t)v178, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    outlined init with take of CaptionSectioner.SpeakerSection(v89, (uint64_t)v37, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    uint64_t v91 = *v90;
    uint64_t v92 = *v37;
    outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v90, v181, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v37, v182, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    if (v91 != v92) {
      goto LABEL_48;
    }
    uint64_t v93 = v180[5];
    uint64_t v94 = v181 + v93;
    uint64_t v95 = v182 + v93;
    static Participant.State.== infix(_:_:)();
    char v97 = v96;
    uint64_t v98 = v162;
    outlined init with copy of CaptionSectioner.SpeakerSection(v94, v162, (void (*)(void))type metadata accessor for Participant);
    uint64_t v99 = v163;
    outlined init with copy of CaptionSectioner.SpeakerSection(v95, v163, (void (*)(void))type metadata accessor for Participant);
    if ((v97 & 1) == 0)
    {
      outlined destroy of CaptionSectioner.SpeakerSection(v99, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of CaptionSectioner.SpeakerSection(v98, (void (*)(void))type metadata accessor for Participant);
      uint64_t v102 = v164;
      outlined init with copy of CaptionSectioner.SpeakerSection(v94, v164, (void (*)(void))type metadata accessor for Participant);
      uint64_t v103 = v165;
      outlined init with copy of CaptionSectioner.SpeakerSection(v95, v165, (void (*)(void))type metadata accessor for Participant);
      uint64_t v104 = (uint64_t)v166;
LABEL_46:
      outlined destroy of CaptionSectioner.SpeakerSection(v103, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of CaptionSectioner.SpeakerSection(v102, (void (*)(void))type metadata accessor for Participant);
      outlined init with copy of CaptionSectioner.SpeakerSection(v94, v104, (void (*)(void))type metadata accessor for Participant);
      uint64_t v138 = v95;
      uint64_t v108 = (uint64_t)v157;
      outlined init with copy of CaptionSectioner.SpeakerSection(v138, (uint64_t)v157, (void (*)(void))type metadata accessor for Participant);
LABEL_47:
      outlined destroy of CaptionSectioner.SpeakerSection(v108, (void (*)(void))type metadata accessor for Participant);
      outlined destroy of CaptionSectioner.SpeakerSection(v104, (void (*)(void))type metadata accessor for Participant);
LABEL_48:
      outlined destroy of CaptionSectioner.SpeakerSection(v182, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection(v181, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v121 = (uint64_t)v178;
      uint64_t v122 = v168;
      outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v178, v168, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v123 = v169;
      outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v177, v169, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
LABEL_49:
      outlined destroy of CaptionSectioner.SpeakerSection(v122, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection(v123, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v80 = (uint64_t)v158;
      outlined init with copy of CaptionSectioner.SpeakerSection(v121, (uint64_t)v158, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v37 = v177;
      uint64_t v130 = v167;
      outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v177, v167, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v79 = (uint64_t)v160;
      uint64_t v129 = (uint64_t)v159;
LABEL_50:
      outlined destroy of CaptionSectioner.SpeakerSection(v130, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection(v80, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined init with copy of CaptionSectioner.SpeakerSection(v121, v129, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v37, v79, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
LABEL_51:
      outlined destroy of CaptionSectioner.SpeakerSection(v79, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection(v129, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection((uint64_t)v37, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection(v121, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
LABEL_52:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_53;
    }
    uint64_t v100 = v161;
    char v101 = static UUID.== infix(_:_:)();
    outlined destroy of CaptionSectioner.SpeakerSection(v99, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of CaptionSectioner.SpeakerSection(v98, (void (*)(void))type metadata accessor for Participant);
    uint64_t v102 = v164;
    outlined init with copy of CaptionSectioner.SpeakerSection(v94, v164, (void (*)(void))type metadata accessor for Participant);
    uint64_t v103 = v165;
    outlined init with copy of CaptionSectioner.SpeakerSection(v95, v165, (void (*)(void))type metadata accessor for Participant);
    uint64_t v104 = (uint64_t)v166;
    if ((v101 & 1) == 0) {
      goto LABEL_46;
    }
    BOOL v105 = *(void *)(v102 + *(int *)(v100 + 28)) != 0;
    outlined destroy of CaptionSectioner.SpeakerSection(v102, (void (*)(void))type metadata accessor for Participant);
    BOOL v106 = *(void *)(v103 + *(int *)(v100 + 28)) == 0;
    outlined destroy of CaptionSectioner.SpeakerSection(v103, (void (*)(void))type metadata accessor for Participant);
    outlined init with copy of CaptionSectioner.SpeakerSection(v94, v104, (void (*)(void))type metadata accessor for Participant);
    uint64_t v107 = v95;
    uint64_t v108 = (uint64_t)v157;
    outlined init with copy of CaptionSectioner.SpeakerSection(v107, (uint64_t)v157, (void (*)(void))type metadata accessor for Participant);
    if (((v105 ^ v106) & 1) == 0) {
      goto LABEL_47;
    }
    unint64_t v109 = (unsigned __int8 *)(v104 + *(int *)(v100 + 24));
    int v173 = *v109;
    int v110 = v109[1];
    int v111 = v109[2];
    int v112 = v109[3];
    int v113 = v109[4];
    outlined destroy of CaptionSectioner.SpeakerSection(v104, (void (*)(void))type metadata accessor for Participant);
    id v114 = (unsigned __int8 *)(v108 + *(int *)(v100 + 24));
    int v115 = *v114;
    int v116 = v114[1];
    int v117 = v114[2];
    int v118 = v114[3];
    uint64_t v119 = v108;
    int v120 = v114[4];
    outlined destroy of CaptionSectioner.SpeakerSection(v119, (void (*)(void))type metadata accessor for Participant);
    if (v173 != v115 || ((v110 ^ v116) & 1) != 0 || ((v111 ^ v117) & 1) != 0 || ((v112 ^ v118) & 1) != 0) {
      goto LABEL_48;
    }
    outlined destroy of CaptionSectioner.SpeakerSection(v182, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    outlined destroy of CaptionSectioner.SpeakerSection(v181, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    uint64_t v121 = (uint64_t)v178;
    uint64_t v122 = v168;
    outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v178, v168, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    uint64_t v123 = v169;
    outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v177, v169, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    if (v113 != v120) {
      goto LABEL_49;
    }
    uint64_t v124 = v180[9];
    uint64_t v125 = *(void *)(v122 + v124);
    uint64_t v126 = *(void *)(v122 + v124 + 8);
    long long v127 = (void *)(v123 + v124);
    BOOL v128 = v125 == *v127 && v126 == v127[1];
    uint64_t v79 = (uint64_t)v160;
    uint64_t v129 = (uint64_t)v159;
    uint64_t v130 = v167;
    uint64_t v80 = (uint64_t)v158;
    if (v128)
    {
      outlined destroy of CaptionSectioner.SpeakerSection(v122, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection(v123, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined init with copy of CaptionSectioner.SpeakerSection(v121, v80, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v37 = v177;
      outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v177, v130, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    }
    else
    {
      char v131 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of CaptionSectioner.SpeakerSection(v122, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined destroy of CaptionSectioner.SpeakerSection(v123, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      outlined init with copy of CaptionSectioner.SpeakerSection(v121, v80, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      uint64_t v37 = v177;
      outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v177, v130, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
      if ((v131 & 1) == 0) {
        goto LABEL_50;
      }
    }
    uint64_t v132 = v180;
    BOOL v133 = *(unsigned char *)(v80 + v180[12]) != 2;
    outlined destroy of CaptionSectioner.SpeakerSection(v80, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    BOOL v134 = *(unsigned char *)(v130 + v132[12]) == 2;
    outlined destroy of CaptionSectioner.SpeakerSection(v130, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    outlined init with copy of CaptionSectioner.SpeakerSection(v121, v129, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    outlined init with copy of CaptionSectioner.SpeakerSection((uint64_t)v37, v79, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    if (((v133 ^ v134) & 1) == 0) {
      goto LABEL_51;
    }
    int v135 = *(unsigned __int8 *)(v129 + v132[10]);
    outlined destroy of CaptionSectioner.SpeakerSection(v129, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    int v136 = *(unsigned __int8 *)(v79 + v132[10]);
    outlined destroy of CaptionSectioner.SpeakerSection(v79, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    outlined destroy of CaptionSectioner.SpeakerSection((uint64_t)v37, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    uint64_t result = outlined destroy of CaptionSectioner.SpeakerSection(v121, (void (*)(void))type metadata accessor for CaptionSectioner.Caption);
    unint64_t v77 = v174;
    unint64_t v78 = v175;
    BOOL v128 = v135 == v136;
    uint64_t v59 = (uint64_t)v132;
    unint64_t v76 = v149;
    if (!v128) {
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t closure #2 in CaptionsStateSource.init()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_bridgeObjectRetain();
    CaptionsStateSource.sections.setter();
    return swift_release();
  }
  return result;
}

uint64_t CaptionsStateSource.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ObservationRegistrar();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = OUTLINED_FUNCTION_28_6();
  v2(v1);
  return v0;
}

uint64_t CaptionsStateSource.__deallocating_deinit()
{
  return CaptionsViewModel.__deallocating_deinit((void (*)(void))CaptionsStateSource.deinit);
}

uint64_t CaptionsViewModel.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #2 in CaptionsStateSource.init()()
{
  return closure #2 in CaptionsStateSource.init()();
}

uint64_t sub_1C306BC00()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsStateSource.cancellables.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C306BC2C()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = CaptionsViewModel.allowsMinimization.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C306BC54(unsigned __int8 *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_34(a1);
  return CaptionsViewModel.allowsMinimization.setter(v1);
}

uint64_t sub_1C306BC78()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t v0 = CaptionsViewModel.isGroupCall.getter();
  return OUTLINED_FUNCTION_36_3(v0);
}

uint64_t sub_1C306BCA0(unsigned __int8 *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_34(a1);
  return CaptionsViewModel.isGroupCall.setter(v1);
}

uint64_t sub_1C306BCC4()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewModel.callName.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_1C306BCEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CaptionsViewModel.callName : CaptionsViewModel(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))CaptionsViewModel.callName.setter);
}

void *sub_1C306BD18()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewModel.groupImage.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t ObjC metadata update function for CaptionsViewModel()
{
  return type metadata accessor for CaptionsViewModel(0);
}

uint64_t type metadata completion function for CaptionsViewModel()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CaptionsViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CaptionsViewModel);
}

uint64_t dispatch thunk of CaptionsViewModel.__allocating_init(participants:callName:groupImage:isGroupCall:allowsMinimization:layoutIdiom:defaults:allowsSuppression:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t ObjC metadata update function for CaptionsStateSource()
{
  return type metadata accessor for CaptionsStateSource(0);
}

uint64_t type metadata completion function for CaptionsStateSource()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for CaptionsStateSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CaptionsStateSource);
}

uint64_t dispatch thunk of CaptionsStateSource.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t partial apply for closure #1 in CaptionsStateSource.sections.setter()
{
  return closure #1 in CaptionsStateSource.sections.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined init with take of CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_90();
  v5(v4);
  return a2;
}

uint64_t outlined init with copy of CaptionSectioner.SpeakerSection(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of CaptionSectioner.SpeakerSection(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_28_6();
  v4(v3);
  return a1;
}

uint64_t partial apply for closure #1 in CaptionsViewModel.cancellables.setter()
{
  return closure #1 in CaptionsViewModel.cancellables.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C306C0C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  return thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t outlined retain of [Participant](uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in CaptionsViewModel.updateSuppressionTimer()(uint64_t a1)
{
  return closure #3 in CaptionsViewModel.updateExpirationTimer()(a1, v1, "Suppress captions timer fired", 29);
}

void *sub_1C306C168()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewModel.suppressionTimer.getter();
  *uint64_t v0 = result;
  return result;
}

void partial apply for closure #1 in CaptionsViewModel.suppressionTimer.setter()
{
  closure #1 in CaptionsViewModel.suppressionTimer.setter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #1 in CaptionsViewModel.updateCaptionsVisibility(animated:)()
{
  return closure #1 in CaptionsViewModel.updateCaptionsVisibility(animated:)(v0);
}

uint64_t outlined init with copy of CaptionSectioner.Caption??(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CaptionSectioner.Caption??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in CaptionsViewModel.updateExpirationTimer()()
{
  return closure #3 in CaptionsViewModel.updateExpirationTimer()();
}

void *sub_1C306C25C()
{
  OUTLINED_FUNCTION_2_0();
  uint64_t result = CaptionsViewModel.expirationTimer.getter();
  *uint64_t v0 = result;
  return result;
}

void partial apply for closure #1 in CaptionsViewModel.expirationTimer.setter()
{
  closure #1 in CaptionsViewModel.expirationTimer.setter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #1 in CaptionsStateSource.cancellables.setter()
{
  return partial apply for closure #1 in CaptionsViewModel.cancellables.setter();
}

uint64_t OUTLINED_FUNCTION_41_5()
{
  return Date.init()();
}

uint64_t PipZoomControl.currentCameraUID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t PipZoomControl.isZoomControlVisible.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl;
  id v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl), sel_superview));

  if (v2) {
    return objc_msgSend(*(id *)(v0 + v1), sel_isHidden) ^ 1;
  }
  else {
    return 0;
  }
}

id PipZoomControl.userDeviceType.getter()
{
  id v0 = objc_msgSend(self, sel_currentDevice);
  id v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  return v1;
}

id PipZoomControl.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

char *PipZoomControl.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchGestureRecognizer;
  id v2 = objc_allocWithZone(MEMORY[0x1E4FB1AA0]);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  *(_DWORD *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor] = 1065353216;
  *(_DWORD *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomCameraSwitchFactorDefault] = 0x40000000;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControlOffset] = 0x4044000000000000;
  *(_DWORD *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor] = 1090519040;
  *(_DWORD *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactorScaler] = 1077936128;
  *(_DWORD *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor] = 0;
  uint64_t v4 = &v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *(_DWORD *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchStartZoomFactor] = 1065353216;
  *(_DWORD *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomFactorScale] = 1065353216;
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F57DF0]), sel_initWithLayoutStyle_, 4);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl] = v5;

  uint64_t v6 = (objc_class *)type metadata accessor for PipZoomControl();
  v15.receiver = v3;
  v15.super_class = v6;
  uint64_t v7 = (char *)objc_msgSendSuper2(&v15, sel_init);
  uint64_t v8 = *(void **)&v7[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl];
  uint64_t v9 = v7;
  objc_msgSend(v8, sel_setDelegate_, v9);
  _OWORD v14[3] = v6;
  v14[0] = v9;
  id v10 = objc_allocWithZone(MEMORY[0x1E4FB1AA0]);
  id v11 = @nonobjc UIPinchGestureRecognizer.init(target:action:)(v14, (uint64_t)sel_handlePinchWithSender_);
  uint64_t v12 = *(void **)&v9[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchGestureRecognizer];
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchGestureRecognizer] = v11;

  return v9;
}

uint64_t type metadata accessor for PipZoomControl()
{
  return self;
}

Swift::Void __swiftcall PipZoomControl.handlePinch(sender:)(UIPinchGestureRecognizer *sender)
{
  id v2 = [(UIPinchGestureRecognizer *)sender state];
  [(UIPinchGestureRecognizer *)sender scale];
  OUTLINED_FUNCTION_0_3();
  uint64_t v4 = *(void (**)(id))(v3 + 408);
  v4(v2);
}

uint64_t PipZoomControl.handlePinch(state:scale:)(uint64_t result, double a2)
{
  if (result == 2)
  {
    float v3 = a2;
    return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1A0))(*(float *)((char *)v2
                                                                                                + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchStartZoomFactor) * v3);
  }
  else if (result == 1)
  {
    *(_DWORD *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchStartZoomFactor) = *(_DWORD *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor);
  }
  return result;
}

Swift::Void __swiftcall PipZoomControl.zoomToFactor(zoomFactor:)(Swift::Float zoomFactor)
{
  if (*(float *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor) < zoomFactor) {
    zoomFactor = *(float *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor);
  }
  if (*(float *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor) > zoomFactor) {
    zoomFactor = *(float *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor);
  }
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor;
  *(Swift::Float *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor) = zoomFactor;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl), sel_setZoomFactor_, zoomFactor);
  id v4 = objc_msgSend(*(id *)(v1 + v3), sel_delegate);
  if (v4)
  {
    id v5 = v4;
    if (objc_msgSend(v4, sel_respondsToSelector_, sel_zoomControl_didChangeZoomFactor_interactionType_))
    {
      double v6 = *(float *)(v1 + v2);
      id v7 = *(id *)(v1 + v3);
      objc_msgSend(v5, sel_zoomControl_didChangeZoomFactor_interactionType_, v7, 1, v6);
    }
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PipZoomControl.zoomToFactor(zoomFactor:minFactor:maxFactor:)(Swift::Float zoomFactor, Swift::Float minFactor, Swift::Float maxFactor)
{
  if (maxFactor < zoomFactor) {
    zoomFactor = maxFactor;
  }
  if (zoomFactor < minFactor) {
    zoomFactor = minFactor;
  }
  (*(void (**)(float))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1A0))(*(float *)((char *)v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor)+ (float)((float)((float)(zoomFactor - minFactor) / (float)(maxFactor - minFactor))* (float)(*(float *)((char *)v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor)- *(float *)((char *)v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor))));
}

Swift::Void __swiftcall PipZoomControl.changeZoomFactor(by:direction:)(Swift::Float by, Swift::Int direction)
{
  (*(void (**)(float))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1A0))(*(float *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor)+ (float)((float)((float)direction * by)* *(float *)((char *)v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomFactorScale)));
}

BOOL PipZoomControl.hasLocalCameraUID.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID + 8) != 0;
}

Swift::Bool __swiftcall PipZoomControl.updateLocalCamera(localCameraUID:)(Swift::String localCameraUID)
{
  id v5 = v1;
  object = localCameraUID._object;
  uint64_t countAndFlagsBits = localCameraUID._countAndFlagsBits;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for AVCaptureDevice);
  swift_bridgeObjectRetain();
  id v8 = @nonobjc AVCaptureDevice.__allocating_init(uniqueID:)();
  if (!v8)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &aBlock);
      OUTLINED_FUNCTION_17_17(v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v18, v19, "PipZoomControl: No camera device found for localCameraUID=%s", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      OUTLINED_FUNCTION_6_27();
    }
    PipZoomControl.currentCameraUID.setter(0, 0);
    return 0;
  }
  uint64_t v9 = v8;
  if (objc_msgSend(v8, sel_position) != (id)1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12_4(v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &aBlock);
      OUTLINED_FUNCTION_17_17(v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v23, (os_log_type_t)v2, "PipZoomControl: Skip none back camera device with localCameraUID=%s", v25, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      OUTLINED_FUNCTION_6_27();
    }
    PipZoomControl.currentCameraUID.setter(0, 0);

    return 0;
  }
  swift_bridgeObjectRetain();
  PipZoomControl.currentCameraUID.setter(countAndFlagsBits, (uint64_t)object);
  id v10 = (char **)OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor;
  float v11 = *(float *)&v1[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor];
  id v103 = v9;
  if (v11 != 0.0)
  {
    if (one-time initialization token for default == -1) {
      goto LABEL_29;
    }
    goto LABEL_68;
  }
  id v12 = objc_msgSend(v9, sel_deviceType);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_4_38() && object == v13)
  {
    OUTLINED_FUNCTION_6_27();
LABEL_32:

    id v41 = OUTLINED_FUNCTION_9_22();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v42 & 0xC000000000000001) != 0)
    {
      OUTLINED_FUNCTION_15_15();
    }
    else
    {
      if (!*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_62;
      }
      id v43 = *(id *)(v42 + 32);
    }
    OUTLINED_FUNCTION_26_9();
    uint64_t v2 = (uint64_t)&selRef_trailingBarAlpha;
    objc_msgSend(v41, sel_floatValue);
    float v45 = v44;

    *(float *)((char *)v10 + (void)v5) = v45;
    id v41 = OUTLINED_FUNCTION_9_22();
    uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v42 & 0xC000000000000001) == 0)
    {
      if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 1uLL)
      {
        __break(1u);
        goto LABEL_65;
      }
      id v46 = *(id *)(v42 + 40);
LABEL_38:
      OUTLINED_FUNCTION_26_9();
      [v41 *(SEL *)(v2 + 272)];
      float v45 = v47;

      float v4 = v45 * *(float *)&v5[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactorScaler];
      uint64_t v3 = OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor;
      *(float *)&v5[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor] = v4;
      id v48 = OUTLINED_FUNCTION_9_22();
      uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v49 & 0xC000000000000001) != 0)
      {
        OUTLINED_FUNCTION_15_15();
LABEL_41:
        OUTLINED_FUNCTION_26_9();
        [v48 *(SEL *)(v2 + 272)];
        float v45 = v51;

        id v52 = OUTLINED_FUNCTION_9_22();
        uint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v53 & 0xC000000000000001) == 0)
        {
          OUTLINED_FUNCTION_19_18();
          if (v54)
          {
            id v55 = *(id *)(v53 + 32);
LABEL_44:
            uint64_t v56 = v55;
            float v57 = floorf(v4 / v45);
            swift_bridgeObjectRelease();
            [v56 *(SEL *)(v2 + 272)];
            float v59 = v58;

            *(float *)&v5[v3] = v57 * v59;
            goto LABEL_53;
          }
          __break(1u);
LABEL_68:
          swift_once();
LABEL_29:
          uint64_t v28 = type metadata accessor for Logger();
          __swift_project_value_buffer(v28, (uint64_t)static Log.default);
          uint64_t v29 = v5;
          id v30 = v9;
          uint64_t v31 = v29;
          id v32 = v30;
          uint64_t v33 = (void *)Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.default.getter();
          if (OUTLINED_FUNCTION_12_4(v34))
          {
            uint64_t v35 = OUTLINED_FUNCTION_9_0();
            uint64_t v102 = OUTLINED_FUNCTION_9_0();
            uint64_t aBlock = v102;
            *(_DWORD *)uint64_t v35 = 136315650;
            uint64_t v110 = (uint64_t)v32;
            id v36 = v32;
            uint64_t v37 = String.init<A>(reflecting:)();
            uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v35 + 12) = 2048;
            OUTLINED_FUNCTION_21_12(*(float *)((char *)v10 + (void)v5));
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            *(_WORD *)(v35 + 22) = 2048;
            OUTLINED_FUNCTION_16_15(OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            OUTLINED_FUNCTION_22_9(&dword_1C2F90000, v39, v40, "PipZoomControl: Zoom control update camera to %s, currentZoomFactor=%f maximumZoomFactor=%f");
            swift_arrayDestroy();
LABEL_57:
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();

LABEL_59:
            v101[2] = v5;
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
            uint64_t v102 = static OS_dispatch_queue.main.getter();
            uint64_t v82 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v108 = partial apply for closure #1 in PipZoomControl.updateLocalCamera(localCameraUID:);
            uint64_t v109 = v82;
            uint64_t aBlock = MEMORY[0x1E4F143A8];
            uint64_t v105 = 1107296256;
            BOOL v106 = thunk for @escaping @callee_guaranteed () -> ();
            uint64_t v107 = &block_descriptor_15;
            unint64_t v83 = _Block_copy(&aBlock);
            swift_release();
            uint64_t v84 = type metadata accessor for DispatchQoS();
            v101[1] = v101;
            OUTLINED_FUNCTION_4();
            uint64_t v86 = v85;
            MEMORY[0x1F4188790](v87);
            uint64_t v89 = (char *)v101 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
            static DispatchQoS.unspecified.getter();
            uint64_t v90 = type metadata accessor for DispatchWorkItemFlags();
            OUTLINED_FUNCTION_4();
            uint64_t v92 = v91;
            MEMORY[0x1F4188790](v93);
            uint64_t v95 = (char *)v101 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t aBlock = MEMORY[0x1E4FBC860];
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            dispatch thunk of SetAlgebra.init<A>(_:)();
            char v96 = (void *)v102;
            MEMORY[0x1C8773BA0](0, v89, v95, v83);
            _Block_release(v83);

            (*(void (**)(char *, uint64_t))(v92 + 8))(v95, v90);
            (*(void (**)(char *, uint64_t))(v86 + 8))(v89, v84);
            id v97 = objc_msgSend(self, sel_sharedInstance);
            id v98 = objc_msgSend(v97, sel_videoDeviceController);

            uint64_t v99 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v108 = partial apply for closure #2 in PipZoomControl.updateLocalCamera(localCameraUID:);
            uint64_t v109 = v99;
            uint64_t aBlock = MEMORY[0x1E4F143A8];
            uint64_t v105 = 1107296256;
            BOOL v106 = thunk for @escaping @callee_guaranteed (@guaranteed AVCaptureDevice?) -> ();
            uint64_t v107 = &block_descriptor_4;
            uint64_t v100 = _Block_copy(&aBlock);
            swift_release();
            objc_msgSend(v98, sel_setReapplyCameraZoom_, v100);

            _Block_release(v100);
            return 1;
          }
LABEL_58:

          goto LABEL_59;
        }
LABEL_66:
        OUTLINED_FUNCTION_24_12();
        goto LABEL_44;
      }
      if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v50 = *(id *)(v49 + 32);
        goto LABEL_41;
      }
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
LABEL_62:
    MEMORY[0x1C87744F0](1, v42);
    goto LABEL_38;
  }
  uint64_t v2 = OUTLINED_FUNCTION_3_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_32;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 == OUTLINED_FUNCTION_4_38() && object == v15)
  {

    OUTLINED_FUNCTION_6_27();
  }
  else
  {
    uint64_t v2 = OUTLINED_FUNCTION_3_1();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      *(_DWORD *)((char *)v10 + (void)v5) = 1065353216;
      goto LABEL_53;
    }
  }
  id v60 = OUTLINED_FUNCTION_9_22();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v61 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = (uint64_t)v10;
    OUTLINED_FUNCTION_15_15();
  }
  else
  {
    if (!*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_71;
    }
    uint64_t v2 = (uint64_t)v10;
    id v62 = *(id *)(v61 + 32);
  }
  OUTLINED_FUNCTION_26_9();
  id v10 = &selRef_trailingBarAlpha;
  objc_msgSend(v60, sel_floatValue);
  int v64 = v63;

  *(_DWORD *)&v5[v2] = v64;
  id v65 = OUTLINED_FUNCTION_9_22();
  uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v66 & 0xC000000000000001) != 0)
  {
LABEL_71:
    OUTLINED_FUNCTION_24_12();
    goto LABEL_52;
  }
  OUTLINED_FUNCTION_19_18();
  if (v67)
  {
    id v68 = *(id *)(v66 + 32);
LABEL_52:
    uint64_t v69 = v68;
    swift_bridgeObjectRelease();
    [v69 v10[34]];
    float v71 = v70;

    *(float *)&v5[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor] = v71
                                                                                       * *(float *)&v5[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactorScaler];
    id v10 = (char **)v2;
LABEL_53:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Log.default);
    uint64_t v73 = v5;
    id v74 = v9;
    uint64_t v31 = v73;
    id v32 = v74;
    uint64_t v33 = (void *)Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_12_4(v75))
    {
      uint64_t v76 = OUTLINED_FUNCTION_9_0();
      uint64_t aBlock = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v76 = 136315650;
      uint64_t v102 = (uint64_t)v10;
      uint64_t v110 = (uint64_t)v32;
      id v77 = v32;
      uint64_t v78 = String.init<A>(reflecting:)();
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v76 + 12) = 2048;
      OUTLINED_FUNCTION_21_12(*(float *)&v5[v102]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v76 + 22) = 2048;
      OUTLINED_FUNCTION_16_15(OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      OUTLINED_FUNCTION_22_9(&dword_1C2F90000, v80, v81, "PipZoomControl: Zoom control first time set to camera to %s. Initialize currentZoomFactor=%f, maximumZoomFactor=%f");
      swift_arrayDestroy();
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  __break(1u);
  return result;
}

id @nonobjc AVCaptureDevice.__allocating_init(uniqueID:)()
{
  uint64_t v0 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_deviceWithUniqueID_, v0);

  return v1;
}

void closure #1 in PipZoomControl.updateLocalCamera(localCameraUID:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    (*(void (**)(float))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1A0))(*(float *)((char *)v2
                                                                                      + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor));
  }
}

void closure #2 in PipZoomControl.updateLocalCamera(localCameraUID:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    PipZoomControl.reapplyCameraZoom(currentInputDevice:)(a1);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed AVCaptureDevice?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

Swift::Void __swiftcall PipZoomControl.addControl(to:above:)(UIView *to, UIView *above)
{
  uint64_t v3 = v2;
  unint64_t v6 = 0xEF64657A696C6169;
  uint64_t v7 = 0x74696E4920746F4ELL;
  [(UIView *)above frame];
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_0_3();
  uint64_t v17 = v16 + 392;
  uint64_t v18 = *(uint64_t (**)(void))(v16 + 392);
  if (v18()) {
    double v19 = 0.0;
  }
  else {
    double v19 = -36.0;
  }
  v241.origin.CGFloat x = OUTLINED_FUNCTION_7_26();
  CGFloat MinX = CGRectGetMinX(v241);
  *(double *)&uint64_t v234 = OUTLINED_FUNCTION_18_18();
  v242.origin.CGFloat x = OUTLINED_FUNCTION_7_26();
  uint64_t Width = CGRectGetWidth(v242);
  v243.origin.CGFloat x = OUTLINED_FUNCTION_7_26();
  uint64_t MidX = CGRectGetMidX(v243);
  double v23 = OUTLINED_FUNCTION_18_18();
  os_log_type_t v24 = (char **)(v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID);
  if (*(void *)(v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID + 8))
  {
    *(double *)&uint64_t v228 = v23;
    uint64_t v229 = v17;
    uint64_t v227 = *(uint64_t *)(v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControlOffset);
    uint64_t v25 = (uint64_t)*v24;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for AVCaptureDevice);
    swift_bridgeObjectRetain();
    id v26 = @nonobjc AVCaptureDevice.__allocating_init(uniqueID:)();
    if (v26)
    {
      p_inst_props = (__objc2_prop_list **)OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomFactorScale;
      *(_DWORD *)(v2 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomFactorScale) = 1065353216;
      id v235 = v26;
      id v28 = objc_msgSend(v26, sel_deviceType);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      BOOL v30 = v25 == OUTLINED_FUNCTION_4_38() && v29 == 0xEF64657A696C6169;
      uint64_t v223 = v15;
      uint64_t v224 = v13;
      uint64_t v222 = *(void *)&MinX;
      uint64_t v225 = MidX;
      uint64_t v226 = Width;
      if (v30)
      {
        OUTLINED_FUNCTION_6_27();
      }
      else
      {
        uint64_t v25 = OUTLINED_FUNCTION_3_1();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          if (v25 == OUTLINED_FUNCTION_4_38() && v31 == 0xEF64657A696C6169)
          {
            OUTLINED_FUNCTION_6_27();
          }
          else
          {
            uint64_t v33 = OUTLINED_FUNCTION_3_1();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v33 & 1) == 0)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              if (v33 == OUTLINED_FUNCTION_4_38() && v34 == 0xEF64657A696C6169)
              {

                OUTLINED_FUNCTION_6_27();
              }
              else
              {
                uint64_t v33 = OUTLINED_FUNCTION_3_1();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v33 & 1) == 0)
                {
                  p_inst_props = &OBJC_PROTOCOL___CNContactPickerDelegate.inst_props;
                  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl), sel_configureForDualDeviceWithZoomFactor_minimumZoomFactor_displayMinimumZoomFactor_maximumZoomFactor_displayMaximumZoomFactor_dualCameraSwitchOverZoomFactor_displayDualCameraSwitchOverZoomFactor_, *(float *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor), *(float *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor), *(float *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor), *(float *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor), *(float *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor), *(float *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomCameraSwitchFactorDefault), *(float *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomCameraSwitchFactorDefault));
LABEL_49:
                  uint64_t v108 = p_inst_props[332];
                  [(UIView *)to insertSubview:*(void *)((char *)v108 + v3) aboveSubview:above];
                  uint64_t v109 = self;
                  id v110 = *(id *)((char *)v108 + v3);
                  objc_msgSend(v109, sel_layoutZoomControl_forLayoutStyle_bottomBarAlignmentRect_bottomBarTransparent_shutterButtonAlignmentRect_previewViewAlignmentRect_, v110, 4, v18() == 0, MinX, *(double *)&v234 + v19, *(double *)&v226, 0.0, *(double *)&v225, v19 + *(double *)&v228 + *(double *)&v227, 0.0, v19, v9, v11, v13, v15);

                  [(UIView *)to addGestureRecognizer:*(void *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchGestureRecognizer)];
                  OUTLINED_FUNCTION_8_23();

                  return;
                }
              }
              if (one-time initialization token for default == -1)
              {
LABEL_62:
                uint64_t v137 = type metadata accessor for Logger();
                __swift_project_value_buffer(v137, (uint64_t)static Log.default);
                uint64_t v138 = Logger.logObject.getter();
                os_log_type_t v139 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v138, v139))
                {
                  uint64_t v140 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v140 = 0;
                  _os_log_impl(&dword_1C2F90000, v138, v139, "PipZoomControl: Customize zoom control UI for builtInDualWideCamera", v140, 2u);
                  OUTLINED_FUNCTION_3();
                }

                id v149 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_14_15(v141, v142, v143, v144, v145, v146, v147, v148, v182, v187, v192, v197, v202, v207, v210, v213, v215, v217,
                           v219,
                           v222,
                           v223,
                           v224,
                           v225,
                           v226,
                           v227,
                           v228,
                           v229,
                           v234,
                           v235));
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
                uint64_t v150 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                v221 = to;
                *(double *)&uint64_t v216 = v19;
                uint64_t v218 = v11;
                if ((v150 & 0xC000000000000001) != 0)
                {
                  OUTLINED_FUNCTION_24_12();
                }
                else
                {
                  OUTLINED_FUNCTION_19_18();
                  if (!v151)
                  {
                    __break(1u);
                    goto LABEL_91;
                  }
                  id v152 = *(id *)(v150 + 32);
                }
                uint64_t v153 = v152;
                swift_bridgeObjectRelease();
                to = (UIView *)&selRef_trailingBarAlpha;
                objc_msgSend(v153, sel_floatValue);
                LODWORD(v11) = v154;

                *(_DWORD *)((char *)p_inst_props + v3) = v11;
                p_inst_props = &OBJC_PROTOCOL___CNContactPickerDelegate.inst_props;
                LODWORD(MidX) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor);
                LODWORD(MinX) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor);
                LODWORD(v19) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor);
                uint64_t v150 = (uint64_t)*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl);
                id v162 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_14_15(v150, v155, v156, v157, v158, v159, v160, v161, v186, v191, v196, v201, v206, v209, v212, v214, v216, v218,
                           (uint64_t)v221,
                           v222,
                           v223,
                           v224,
                           v225,
                           v226,
                           v227,
                           v228,
                           v233,
                           v234,
                           v239));
                uint64_t v163 = OUTLINED_FUNCTION_20_9();

                if ((v163 & 0xC000000000000001) == 0)
                {
                  OUTLINED_FUNCTION_13_14();
                  if (!v164)
                  {
                    __break(1u);
                    goto LABEL_93;
                  }
                  id v165 = *(id *)(v163 + 32);
LABEL_70:
                  OUTLINED_FUNCTION_11_18();
                  objc_msgSend((id)v33, (SEL)to->_readableContentGuide);
                  LODWORD(v15) = v166;

                  id v175 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_14_15(v167, v168, v169, v170, v171, v172, v173, v174, v186, v191, v196, v201, v206, v209, v212, v214, v216, v218,
                             (uint64_t)v221,
                             v222,
                             v223,
                             v224,
                             v225,
                             v226,
                             v227,
                             v228,
                             v233,
                             v234,
                             v239));
                  uint64_t v176 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v214 = v9;
                  if ((v176 & 0xC000000000000001) == 0)
                  {
                    if (!*(void *)((v176 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    {
                      __break(1u);
                      return;
                    }
                    id v177 = *(id *)(v176 + 32);
                    goto LABEL_73;
                  }
LABEL_93:
                  OUTLINED_FUNCTION_15_15();
                  id v177 = v181;
LABEL_73:
                  swift_bridgeObjectRelease();
                  objc_msgSend(v177, (SEL)to->_readableContentGuide);
                  float v179 = v178;

                  objc_msgSend((id)v150, sel_configureForDualDeviceWithZoomFactor_minimumZoomFactor_displayMinimumZoomFactor_maximumZoomFactor_displayMaximumZoomFactor_dualCameraSwitchOverZoomFactor_displayDualCameraSwitchOverZoomFactor_, *(float *)&MidX, *(float *)&MinX, (float)(*(float *)&MinX / *(float *)&v11), *(float *)&v19, (float)(*(float *)&v19 / *(float *)&v11), *(float *)&v15, (float)(v179 / *(float *)&v11));
                  to = v221;
                  goto LABEL_48;
                }
LABEL_91:
                OUTLINED_FUNCTION_25_9();
                goto LABEL_70;
              }
LABEL_88:
              swift_once();
              goto LABEL_62;
            }
          }

          LODWORD(MidX) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor);
          LODWORD(Width) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor);
          LODWORD(MinX) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor);
          uint64_t v51 = (uint64_t)*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl);
          id v104 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_14_15(v51, v113, v114, v115, v116, v117, v118, v119, v182, v187, v192, v197, v202, v207, v210, v213, v215, v217,
                     v219,
                     v222,
                     v15,
                     v13,
                     v225,
                     v226,
                     v227,
                     v228,
                     v229,
                     v234,
                     v235));
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          uint64_t v120 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if ((v120 & 0xC000000000000001) == 0)
          {
            OUTLINED_FUNCTION_13_14();
            if (!v121)
            {
              __break(1u);
              goto LABEL_86;
            }
            id v122 = *(id *)(v120 + 32);
LABEL_56:
            OUTLINED_FUNCTION_11_18();
            p_inst_props = (__objc2_prop_list **)&selRef_trailingBarAlpha;
            objc_msgSend(v104, sel_floatValue);
            LODWORD(v15) = v123;

            id v132 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_14_15(v124, v125, v126, v127, v128, v129, v130, v131, v185, v190, v195, v200, v205, v208, v211, v214, v216, v218,
                       (uint64_t)v220,
                       v222,
                       v223,
                       v224,
                       v225,
                       v226,
                       v227,
                       v228,
                       v232,
                       v234,
                       v238));
            uint64_t v133 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if ((v133 & 0xC000000000000001) == 0)
            {
              uint64_t v33 = v229;
              if (!*(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_88;
              }
              id v134 = *(id *)(v133 + 32);
LABEL_59:
              swift_bridgeObjectRelease();
              objc_msgSend(v134, (SEL)p_inst_props[34]);
              float v136 = v135;

              objc_msgSend((id)v51, sel_configureForDualDeviceWithZoomFactor_minimumZoomFactor_displayMinimumZoomFactor_maximumZoomFactor_displayMaximumZoomFactor_dualCameraSwitchOverZoomFactor_displayDualCameraSwitchOverZoomFactor_, *(float *)&MidX, *(float *)&Width, *(float *)&Width, *(float *)&MinX, *(float *)&MinX, *(float *)&v15, v136);
              uint64_t v15 = v223;
              uint64_t v13 = v224;
              CGFloat MinX = *(double *)&v222;
              p_inst_props = (__objc2_prop_list **)(&OBJC_PROTOCOL___CNContactPickerDelegate + 56);
              goto LABEL_49;
            }
LABEL_86:
            OUTLINED_FUNCTION_15_15();
            id v134 = v180;
            goto LABEL_59;
          }
LABEL_84:
          OUTLINED_FUNCTION_25_9();
          goto LABEL_56;
        }
      }

      id v49 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_10_21(v41, v42, v43, v44, v45, v46, v47, v48, v182, v187, v192, v197, v202, v207, v210, v213, v215, v217,
                (uint64_t)to,
                *(uint64_t *)&MinX,
                v15,
                v13,
                MidX,
                Width,
                v227,
                v228,
                v229,
                v234,
                v235));
      uint64_t v50 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v51 & 0xC000000000000001) != 0)
      {
        OUTLINED_FUNCTION_24_12();
      }
      else
      {
        OUTLINED_FUNCTION_19_18();
        if (!v52)
        {
          __break(1u);
          goto LABEL_76;
        }
        id v53 = *(id *)(v51 + 32);
      }
      uint64_t v54 = v53;
      swift_bridgeObjectRelease();
      os_log_type_t v24 = &selRef_trailingBarAlpha;
      objc_msgSend(v54, sel_floatValue);
      int v56 = v55;

      HIDWORD(v211) = v56;
      *(_DWORD *)((char *)p_inst_props + v3) = v56;
      p_inst_props = &OBJC_PROTOCOL___CNContactPickerDelegate.inst_props;
      LODWORD(MidX) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor);
      LODWORD(Width) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_minimumZoomFactor);
      LODWORD(MinX) = *(_DWORD *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_maximumZoomFactor);
      uint64_t v51 = (uint64_t)*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl);
      id v64 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_10_21(v51, v57, v58, v59, v60, v61, v62, v63, v183, v188, v193, v198, v203, v208, v211, v214, v216, v218,
                (uint64_t)v220,
                v222,
                v223,
                v224,
                v225,
                v226,
                v227,
                v228,
                v230,
                v234,
                v236));
      uint64_t v65 = OUTLINED_FUNCTION_20_9();

      if ((v65 & 0xC000000000000001) == 0)
      {
        OUTLINED_FUNCTION_13_14();
        if (!v66)
        {
          __break(1u);
          goto LABEL_78;
        }
        id v67 = *(id *)(v65 + 32);
LABEL_38:
        OUTLINED_FUNCTION_11_18();
        [(id)v25 v24[34]];
        LODWORD(v211) = v68;

        id v77 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_10_21(v69, v70, v71, v72, v73, v74, v75, v76, v183, v188, v193, v198, v203, v208, v211, v214, v216, v218,
                  (uint64_t)v220,
                  v222,
                  v223,
                  v224,
                  v225,
                  v226,
                  v227,
                  v228,
                  v230,
                  v234,
                  v236));
        uint64_t v78 = OUTLINED_FUNCTION_20_9();

        if ((v78 & 0xC000000000000001) == 0)
        {
          OUTLINED_FUNCTION_13_14();
          if (!v79)
          {
            __break(1u);
            goto LABEL_81;
          }
          id v80 = *(id *)(v78 + 32);
LABEL_41:
          OUTLINED_FUNCTION_11_18();
          [(id)v25 v24[34]];
          HIDWORD(v208) = v81;

          id v90 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_10_21(v82, v83, v84, v85, v86, v87, v88, v89, v183, v188, v193, v198, v203, v208, v211, v214, v216, v218,
                    (uint64_t)v220,
                    v222,
                    v223,
                    v224,
                    v225,
                    v226,
                    v227,
                    v228,
                    v230,
                    v234,
                    v236));
          uint64_t v91 = OUTLINED_FUNCTION_20_9();

          if ((v91 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1C87744F0](1, v91);
LABEL_44:
            OUTLINED_FUNCTION_11_18();
            [(id)v25 v24[34]];
            LODWORD(v15) = v94;

            id v103 = objc_retainAutoreleasedReturnValue(OUTLINED_FUNCTION_10_21(v95, v96, v97, v98, v99, v100, v101, v102, v184, v189, v194, v199, v204, v208, v211, v214, v216, v218,
                       (uint64_t)v220,
                       v222,
                       v223,
                       v224,
                       v225,
                       v226,
                       v227,
                       v228,
                       v231,
                       v234,
                       v237));
            uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v214 = v9;
            *(double *)&uint64_t v216 = v19;
            uint64_t v218 = v11;
            if ((v50 & 0xC000000000000001) == 0)
            {
              to = v220;
              id v104 = (id)v232;
              if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 1uLL)
              {
                __break(1u);
                goto LABEL_84;
              }
              id v105 = *(id *)(v50 + 40);
LABEL_47:
              swift_bridgeObjectRelease();
              [v105 v24[34]];
              float v107 = v106;

              objc_msgSend((id)v51, sel_configureForTripleDeviceWithZoomFactor_minimumZoomFactor_displayMinimumZoomFactor_maximumZoomFactor_displayMaximumZoomFactor_switchOverZoomFactor1_displaySwitchOverZoomFactor1_switchOverZoomFactor2_displaySwitchOverZoomFactor2_, *(float *)&MidX, *(float *)&Width, (float)(*(float *)&Width / *((float *)&v211 + 1)), *(float *)&MinX, (float)(*(float *)&MinX / *((float *)&v211 + 1)), *(float *)&v211, (float)(*((float *)&v208 + 1) / *((float *)&v211 + 1)), *(float *)&v15, (float)(v107 / *((float *)&v211 + 1)));
LABEL_48:
              uint64_t v9 = v214;
              double v19 = *(double *)&v216;
              uint64_t v11 = v218;
              uint64_t v15 = v223;
              uint64_t v13 = v224;
              CGFloat MinX = *(double *)&v222;
              goto LABEL_49;
            }
LABEL_82:
            id v105 = (id)MEMORY[0x1C87744F0](1, v50);
            to = v220;
            goto LABEL_47;
          }
          OUTLINED_FUNCTION_13_14();
          if (v92 > 1)
          {
            id v93 = *(id *)(v91 + 40);
            goto LABEL_44;
          }
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }
LABEL_78:
        OUTLINED_FUNCTION_25_9();
        goto LABEL_41;
      }
LABEL_76:
      OUTLINED_FUNCTION_25_9();
      goto LABEL_38;
    }
    if (v24[1])
    {
      uint64_t v7 = (uint64_t)*v24;
      unint64_t v6 = (unint64_t)v24[1];
    }
  }
  uint64_t v36 = one-time initialization token for default;
  swift_bridgeObjectRetain();
  if (v36 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Log.default);
  swift_bridgeObjectRetain();
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v240 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v40 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v240);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v38, v39, "PipZoomControl: No camera device found for localCameraUID=%s", v40, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_6_27();
  }
  OUTLINED_FUNCTION_8_23();
}

Swift::Void __swiftcall PipZoomControl.removeControl(from:)(UIView *from)
{
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_zoomControl), sel_removeFromSuperview);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_pinchGestureRecognizer);
  [(UIView *)from removeGestureRecognizer:v3];
}

uint64_t static PipZoomControl.isZoomSupported.getter()
{
  return 1;
}

void PipZoomControl.reapplyCameraZoom(currentInputDevice:)(void *a1)
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationKit);
  id v4 = a1;
  id v5 = v1;
  id v6 = v4;
  uint64_t v7 = (char *)v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = OUTLINED_FUNCTION_9_0();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    if (*(void *)&v7[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID + 8])
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = String.init<A>(reflecting:)();
      unint64_t v15 = v14;
    }
    else
    {
      unint64_t v15 = 0xE300000000000000;
      uint64_t v13 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2080;
    if (a1)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for AVCaptureDevice);
      id v16 = v6;
      uint64_t v17 = String.init<A>(reflecting:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v8, v9, "PipZoomControl -reapplyCameraZoom currentZoomFactor: %s currentCameraUID: %s currentInputDevice: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  if (*(float *)&v7[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor] != 0.0)
  {
    OUTLINED_FUNCTION_23_8();
    if ((*(uint64_t (**)(void))(v20 + 440))())
    {
      if (a1)
      {
        id v21 = objc_msgSend(v6, sel_uniqueID);
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v25 = *(void *)&v7[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID + 8];
      if (v24)
      {
        if (!v25)
        {
          swift_bridgeObjectRelease();
          return;
        }
        if (v22 == *(void *)&v7[OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentCameraUID] && v24 == v25)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0) {
            return;
          }
        }
      }
      else if (v25)
      {
        return;
      }
      OUTLINED_FUNCTION_23_8();
      (*(void (**)(void))(v28 + 416))();
    }
  }
}

id PipZoomControl.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PipZoomControl();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void PipZoomControl.zoomControl(_:didChangeZoomFactor:interactionType:)(double a1)
{
  float v3 = a1;
  *(float *)(v1 + OBJC_IVAR____TtC15ConversationKit14PipZoomControl_currentZoomFactor) = v3;
  id v4 = objc_msgSend(self, sel_sharedInstance);
  id v5 = objc_msgSend(v4, sel_videoDeviceController);

  objc_msgSend(v5, sel_setCameraZoomFactor_, a1);
}

id @nonobjc UIPinchGestureRecognizer.init(target:action:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    id v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = *(void *)(v4 - 8);
    MEMORY[0x1F4188790](v6);
    os_log_type_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend(v2, sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1C306ECC8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in PipZoomControl.updateLocalCamera(localCameraUID:)()
{
  closure #1 in PipZoomControl.updateLocalCamera(localCameraUID:)(v0);
}

void partial apply for closure #2 in PipZoomControl.updateLocalCamera(localCameraUID:)(void *a1)
{
  closure #2 in PipZoomControl.updateLocalCamera(localCameraUID:)(a1, v1);
}

uint64_t method lookup function for PipZoomControl(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PipZoomControl);
}

uint64_t dispatch thunk of PipZoomControl.isZoomControlVisible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of PipZoomControl.userDeviceType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of PipZoomControl.handlePinch(sender:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of PipZoomControl.handlePinch(state:scale:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of PipZoomControl.zoomToFactor(zoomFactor:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of PipZoomControl.zoomToFactor(zoomFactor:minFactor:maxFactor:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PipZoomControl.changeZoomFactor(by:direction:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PipZoomControl.hasLocalCameraUID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PipZoomControl.updateLocalCamera(localCameraUID:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of PipZoomControl.addControl(to:above:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of PipZoomControl.removeControl(from:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t VideoStatusProvider.__allocating_init(callCenter:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  id v3 = objc_msgSend(a1, sel_videoDeviceController);

  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t VideoStatusProvider.init(callCenter:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_videoDeviceController);

  *(void *)(v1 + 16) = v3;
  return v1;
}

uint64_t VideoStatusProvider.hasNoVideo.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (objc_msgSend(v1, sel_isPreviewRunning)) {
    return 0;
  }
  id v3 = objc_msgSend(v1, sel_currentInputDevice);
  id v4 = v3;
  if (v3) {
    goto LABEL_6;
  }
  id v5 = VideoStatusProvider.activeDevice.getter();
  if (v5)
  {
    id v4 = v5;
LABEL_6:
    uint64_t v6 = one-time initialization token for conversationKit;
    id v7 = v3;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationKit);
    id v9 = v4;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v12 = 67109120;
      objc_msgSend(v9, sel_isSuspended);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2F90000, v10, v11, "VideoStatusProvider camera isSuspended: %{BOOL}d", v12, 8u);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }
    else
    {
    }
    id v2 = objc_msgSend(v9, sel_isSuspended);

    return (uint64_t)v2;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationKit);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1C2F90000, v15, v16, "VideoStatusProvider has no camera", v17, 2u);
    MEMORY[0x1C87760E0](v17, -1, -1);
  }

  return 1;
}

uint64_t VideoStatusProvider.videoInfoDidChange.getter()
{
  id v22 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v0 = type metadata accessor for NSNotificationCenter.Publisher();
  OUTLINED_FUNCTION_4();
  uint64_t v23 = v1;
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = NSNotificationCenter.publisher(for:object:)();
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSNotificationCenter.publisher(for:object:)();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, ()>);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MergeMany<NSNotificationCenter.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher();
  Publisher.merge(with:)();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.MergeMany<NSNotificationCenter.Publisher> and conformance Publishers.MergeMany<A>, &demangling cache variable for type metadata for Publishers.MergeMany<NSNotificationCenter.Publisher>);
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, ()> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.MergeMany<NSNotificationCenter.Publisher>, ()>);
  uint64_t v19 = Publisher.eraseToAnyPublisher()();

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v6, v0);
  v20(v6, v0);
  return v19;
}

void *VideoStatusProvider.activeDevice.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_inputDevices);
  type metadata accessor for AVCaptureDevice();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      if (objc_msgSend(v5, sel_isConnected) && (objc_msgSend(v6, sel_isSuspended) & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        return v6;
      }

      ++v4;
      if (v7 == v3) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t VideoStatusProvider.deinit()
{
  return v0;
}

uint64_t VideoStatusProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for VideoStatusProviding.hasNoVideo.getter in conformance VideoStatusProvider()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t protocol witness for VideoStatusProviding.videoInfoDidChange.getter in conformance VideoStatusProvider()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of VideoStatusProviding.hasNoVideo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VideoStatusProviding.videoInfoDidChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for VideoStatusProvider()
{
  return self;
}

uint64_t method lookup function for VideoStatusProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VideoStatusProvider);
}

uint64_t dispatch thunk of VideoStatusProvider.__allocating_init(callCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of VideoStatusProvider.hasNoVideo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of VideoStatusProvider.videoInfoDidChange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

unint64_t type metadata accessor for AVCaptureDevice()
{
  unint64_t result = lazy cache variable for type metadata for AVCaptureDevice;
  if (!lazy cache variable for type metadata for AVCaptureDevice)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AVCaptureDevice);
  }
  return result;
}

uint64_t key path getter for ConversationDetailsView.recipe : ConversationDetailsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA8))();
}

uint64_t key path setter for ConversationDetailsView.recipe : ConversationDetailsView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB0))(v6);
}

uint64_t ConversationDetailsView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_recipe;
  swift_beginAccess();
  return outlined init with copy of ConversationControlsRecipe(v3, a1);
}

uint64_t ConversationDetailsView.recipe.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_recipe;
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v3);
  swift_endAccess();
  ConversationDetailsView.updateStatus()();
  return outlined destroy of ConversationControlsRecipe(a1);
}

void (*ConversationDetailsView.recipe.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ConversationDetailsView.recipe.modify;
}

void ConversationDetailsView.recipe.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    ConversationDetailsView.updateStatus()();
  }
}

double ConversationDetailsView.titleLabelGlyphInset.getter()
{
  uint64_t v1 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110);
  unint64_t v2 = (void *)v1();
  objc_msgSend(v2, sel__tightBoundingRectOfFirstLine);
  double v4 = v3;
  double v6 = v5;

  uint64_t v7 = (void *)v1();
  objc_msgSend(v7, sel_convertPoint_toCoordinateSpace_, v0, v4, v6);
  double v9 = v8;

  return v9;
}

id ConversationDetailsView.conversationDetailsVStack.getter()
{
  return ConversationDetailsView.conversationDetailsVStack.getter(&OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationDetailsVStack, (uint64_t (*)(uint64_t))closure #1 in ConversationDetailsView.conversationDetailsVStack.getter);
}

void ConversationDetailsView.conversationDetailsVStack.setter(uint64_t a1)
{
}

uint64_t key path getter for ConversationDetailsView.conversationDetailsVStack : ConversationDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationDetailsView.conversationDetailsVStack : ConversationDetailsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

void *closure #1 in ConversationDetailsView.conversationDetailsVStack.getter(void *a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769610;
  double v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(void *)(v2 + 32) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x110))();
  *(void *)(v2 + 40) = (*(uint64_t (**)(void))((*v3 & *a1) + 0xE0))();
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v4, (Swift::OpaquePointer)v2);
  double v6 = v5;
  objc_msgSend(v5, sel_setAxis_, 1);
  objc_msgSend(v6, sel_setAlignment_, 1);
  return v6;
}

void (*ConversationDetailsView.conversationDetailsVStack.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = ConversationDetailsView.conversationDetailsVStack.getter();
  return ConversationDetailsView.conversationDetailsVStack.modify;
}

void ConversationDetailsView.conversationDetailsVStack.modify(void **a1, char a2)
{
}

uint64_t key path getter for ConversationDetailsView.conversationSubtitleHStack : ConversationDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationDetailsView.conversationSubtitleHStack : ConversationDetailsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8))(*a1);
}

id ConversationDetailsView.conversationSubtitleHStack.getter()
{
  return ConversationDetailsView.conversationDetailsVStack.getter(&OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationSubtitleHStack, (uint64_t (*)(uint64_t))closure #1 in ConversationDetailsView.conversationSubtitleHStack.getter);
}

id closure #1 in ConversationDetailsView.conversationSubtitleHStack.getter(void *a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIStackView);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769610;
  double v3 = (void *)MEMORY[0x1E4FBC8C8];
  *(void *)(v2 + 32) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x128))();
  *(void *)(v2 + 40) = (*(uint64_t (**)(void))((*v3 & *a1) + 0x140))();
  arrangedSubviews._rawValue = (void *)v2;
  specialized Array._endMutation()();
  UIStackView.__allocating_init(arrangedSubviews:)(v4, (Swift::OpaquePointer)v2);
  double v6 = v5;
  objc_msgSend(v5, sel_setAxis_, 0);
  objc_msgSend(v6, sel_setAlignment_, 2);
  objc_msgSend(v6, sel_setDistribution_, 3);
  static Layout.ConversationControls.values.getter((uint64_t)&arrangedSubviews);
  objc_msgSend(v6, sel_setSpacing_, v11);
  uint64_t v7 = *(void (**)(void))((*v3 & *a1) + 0x178);
  id v8 = v6;
  v7();
  objc_msgSend(v8, sel_setAlpha_);

  return v8;
}

void ConversationDetailsView.conversationSubtitleHStack.setter(uint64_t a1)
{
}

void (*ConversationDetailsView.conversationSubtitleHStack.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = ConversationDetailsView.conversationSubtitleHStack.getter();
  return ConversationDetailsView.conversationSubtitleHStack.modify;
}

void ConversationDetailsView.conversationSubtitleHStack.modify(void **a1, char a2)
{
}

uint64_t key path getter for ConversationDetailsView.leadingAccessoryView : ConversationDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationDetailsView.leadingAccessoryView : ConversationDetailsView(id *a1, void **a2)
{
  id v2 = *a1;
  double v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100);
  id v4 = *a1;
  return v3(v2);
}

void *ConversationDetailsView.leadingAccessoryView.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void ConversationDetailsView.leadingAccessoryView.setter(void *a1)
{
}

uint64_t (*ConversationDetailsView.leadingAccessoryView.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id ConversationDetailsView.conversationTitleLabel.getter()
{
  return ConversationDetailsView.conversationDetailsVStack.getter(&OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationTitleLabel, (uint64_t (*)(uint64_t))closure #1 in ConversationDetailsView.conversationTitleLabel.getter);
}

void ConversationDetailsView.conversationTitleLabel.setter(uint64_t a1)
{
}

uint64_t key path getter for ConversationDetailsView.conversationTitleLabel : ConversationDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationDetailsView.conversationTitleLabel : ConversationDetailsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x118))(*a1);
}

id closure #1 in ConversationDetailsView.conversationTitleLabel.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v1 = ConversationDetailsView.titleLabelFont.getter();
  objc_msgSend(v0, sel_setFont_, v1);

  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  id v2 = objc_msgSend(self, sel_labelColor);
  objc_msgSend(v0, sel_setTextColor_, v2);

  LODWORD(v3) = 1132068864;
  objc_msgSend(v0, sel_setContentCompressionResistancePriority_forAxis_, 0, v3);
  objc_msgSend(v0, sel__setWantsContentAwareTypesettingLanguage_, 1);
  return v0;
}

void (*ConversationDetailsView.conversationTitleLabel.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = ConversationDetailsView.conversationTitleLabel.getter();
  return ConversationDetailsView.conversationTitleLabel.modify;
}

void ConversationDetailsView.conversationTitleLabel.modify(void **a1, char a2)
{
}

id ConversationDetailsView.conversationSubtitleLabel.getter()
{
  return ConversationDetailsView.conversationDetailsVStack.getter(&OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationSubtitleLabel, (uint64_t (*)(uint64_t))closure #1 in ConversationDetailsView.conversationSubtitleLabel.getter);
}

void ConversationDetailsView.conversationSubtitleLabel.setter(uint64_t a1)
{
}

uint64_t key path getter for ConversationDetailsView.conversationSubtitleLabel : ConversationDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationDetailsView.conversationSubtitleLabel : ConversationDetailsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130))(*a1);
}

id closure #1 in ConversationDetailsView.conversationSubtitleLabel.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  uint64_t v1 = (void *)ConversationDetailsView.chevronLabelFont.getter();
  objc_msgSend(v0, sel_setFont_, v1);

  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  id v2 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v0, sel_setTextColor_, v2);

  LODWORD(v3) = 1132068864;
  objc_msgSend(v0, sel_setContentCompressionResistancePriority_forAxis_, 0, v3);
  objc_msgSend(v0, sel__setWantsContentAwareTypesettingLanguage_, 1);
  return v0;
}

void (*ConversationDetailsView.conversationSubtitleLabel.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = ConversationDetailsView.conversationSubtitleLabel.getter();
  return ConversationDetailsView.conversationSubtitleLabel.modify;
}

void ConversationDetailsView.conversationSubtitleLabel.modify(void **a1, char a2)
{
}

id ConversationDetailsView.chevronLabel.getter()
{
  return ConversationDetailsView.conversationDetailsVStack.getter(&OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___chevronLabel, (uint64_t (*)(uint64_t))closure #1 in ConversationDetailsView.chevronLabel.getter);
}

id ConversationDetailsView.conversationDetailsVStack.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    double v6 = (void *)a2(v2);
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void ConversationDetailsView.chevronLabel.setter(uint64_t a1)
{
}

uint64_t key path getter for ConversationDetailsView.chevronLabel : ConversationDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x140))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationDetailsView.chevronLabel : ConversationDetailsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x148))(*a1);
}

id closure #1 in ConversationDetailsView.chevronLabel.getter(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  uint64_t v3 = (void *)*MEMORY[0x1E4FB2950];
  uint64_t v17 = 0x2E6E6F7276656863;
  unint64_t v18 = 0xEF64726177726F66;
  uint64_t v19 = 1;
  uint64_t v20 = v3;
  LOWORD(v21) = 0;
  uint64_t v22 = 4;
  LOBYTE(v23) = 0;
  uint64_t v24 = 0;
  id v4 = v3;
  id v5 = static UIImage.symbolImage(for:)((uint64_t)&v17);

  swift_bridgeObjectRelease();
  if (v5)
  {
    objc_msgSend(v2, sel_setNumberOfLines_, 1, v17, v18, v19, v20, v21, v22, v23, v24);
    double v6 = (void *)ConversationDetailsView.chevronLabelFont.getter(objc_msgSend(v2, sel_setClipsToBounds_, 1));
    objc_msgSend(v2, sel_setFont_, v6);

    objc_msgSend(v2, sel_setAdjustsFontForContentSizeCategory_, 1);
    id v7 = objc_msgSend(self, sel_secondaryLabelColor);
    objc_msgSend(v2, sel_setTextColor_, v7);

    LODWORD(v8) = 1144750080;
    objc_msgSend(v2, sel_setContentCompressionResistancePriority_forAxis_, 0, v8);
    double v9 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x170);
    id v10 = v2;
    v9();
    objc_msgSend(v10, sel_setAlpha_);

    id v11 = objc_msgSend(self, sel_textAttachmentWithImage_, v5);
    unint64_t v12 = objc_msgSend(self, sel_attributedStringWithAttachment_, v11);

    objc_msgSend(v10, sel_setAttributedText_, v12);
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1C2F90000, v12, v14, "Unable to obtain chevron.forward for chevronLabel", v15, 2u);
      MEMORY[0x1C87760E0](v15, -1, -1);
    }
  }

  return v2;
}

void (*ConversationDetailsView.chevronLabel.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = ConversationDetailsView.chevronLabel.getter();
  return ConversationDetailsView.chevronLabel.modify;
}

void ConversationDetailsView.chevronLabel.modify(void **a1, char a2)
{
}

void ConversationDetailsView.conversationDetailsVStack.modify(void **a1, char a2, void (*a3)(void))
{
  id v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

uint64_t key path getter for ConversationDetailsView.conversationSubtitleBadge : ConversationDetailsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x158))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationDetailsView.conversationSubtitleBadge : ConversationDetailsView(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x160);
  id v4 = *a1;
  return v3(v2);
}

void *ConversationDetailsView.conversationSubtitleBadge.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void ConversationDetailsView.conversationSubtitleBadge.setter(void *a1)
{
}

void ConversationDetailsView.leadingAccessoryView.setter(void *a1, void *a2)
{
  id v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  id v5 = *v4;
  *id v4 = a1;
}

uint64_t (*ConversationDetailsView.conversationSubtitleBadge.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

double ConversationDetailsView.chevronLabelAlpha.getter()
{
  uint64_t v1 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v2 = v1 - 8;
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_25_10();
  v3();
  LODWORD(v2) = *(unsigned __int8 *)(v0 + *(int *)(v2 + 56));
  outlined destroy of ConversationControlsRecipe(v0);
  double result = 0.0;
  if (v2) {
    return 1.0;
  }
  return result;
}

double ConversationDetailsView.subtitleAlpha.getter()
{
  uint64_t v1 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  double v8 = (char *)&v15 - v7;
  double v9 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8);
  v9(v6);
  unint64_t v10 = *((void *)v8 + 11);
  swift_bridgeObjectRetain();
  outlined destroy of ConversationControlsRecipe((uint64_t)v8);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v12 = swift_bridgeObjectRelease();
  if (v11) {
    return 1.0;
  }
  v9(v12);
  uint64_t v13 = *(void *)&v5[*(int *)(v1 + 40)];
  outlined destroy of ConversationControlsRecipe((uint64_t)v5);
  if (v13) {
    return 1.0;
  }
  else {
    return 0.0;
  }
}

uint64_t ConversationDetailsView.durationController.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_durationController) = a1;
  return swift_release();
}

id ConversationDetailsView.frame.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationDetailsView();
  return objc_msgSendSuper2(&v2, sel_frame);
}

void ConversationDetailsView.frame.setter()
{
  OUTLINED_FUNCTION_7();
  uint64_t v4 = type metadata accessor for ConversationDetailsView();
  double v1 = OUTLINED_FUNCTION_6_2();
  objc_msgSendSuper2(v2, v3, v1, v0, v4);
  ConversationDetailsView.frame.didset();
}

void ConversationDetailsView.frame.didset()
{
  id v2 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setPreferredMaxLayoutWidth_, v1);
}

id ConversationDetailsView.__allocating_init(recipe:presentationStyle:controlsManager:)(uint64_t a1, char a2, void *a3)
{
  char v6 = a2 & 1;
  id v7 = objc_allocWithZone(v3);
  return ConversationDetailsView.init(recipe:presentationStyle:controlsManager:)(a1, v6, a3);
}

id ConversationDetailsView.init(recipe:presentationStyle:controlsManager:)(uint64_t a1, char a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationDetailsVStack] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationSubtitleHStack] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_leadingAccessoryView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationTitleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationSubtitleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___chevronLabel] = 0;
  char v6 = a2 & 1;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_conversationSubtitleBadge] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_durationController] = 0;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_recipe]);
  v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_presentationStyle] = v6;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_controlsManager] = a3;
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for ConversationDetailsView();
  id v7 = a3;
  id v8 = objc_msgSendSuper2(&v10, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  ConversationDetailsView.configureSubviews()();
  ConversationDetailsView.updateStatus()();

  outlined destroy of ConversationControlsRecipe(a1);
  return v8;
}

id ConversationDetailsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationDetailsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationDetailsVStack] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationSubtitleHStack] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_leadingAccessoryView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationTitleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___conversationSubtitleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView____lazy_storage___chevronLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_conversationSubtitleBadge] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_durationController] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ConversationDetailsView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v22.receiver = v1;
  v22.super_class = (Class)type metadata accessor for ConversationDetailsView();
  objc_msgSendSuper2(&v22, sel_traitCollectionDidChange_, isa);
  if (isa)
  {
    id v3 = isa;
    id v4 = objc_msgSend(v1, sel_traitCollection);
    id v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

    id v6 = [(objc_class *)v3 preferredContentSizeCategory];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        OUTLINED_FUNCTION_3_16();
        os_log_type_t v14 = (void *)(*(uint64_t (**)(void))(v13 + 272))();
        uint64_t v15 = ConversationDetailsView.titleLabelFont.getter();
        objc_msgSend(v14, sel_setFont_, v15);

        OUTLINED_FUNCTION_0_3();
        uint64_t v17 = (void *)(*(uint64_t (**)(void))(v16 + 296))();
        unint64_t v18 = (void *)ConversationDetailsView.chevronLabelFont.getter(v17);
        objc_msgSend(v17, sel_setFont_, v18);

        OUTLINED_FUNCTION_0_3();
        uint64_t v20 = (void *)(*(uint64_t (**)(void))(v19 + 320))();
        uint64_t v21 = ConversationDetailsView.chevronLabelFont.getter(v20);
        objc_msgSend(v20, sel_setFont_, v21);

        id v3 = (objc_class *)v21;
      }
    }
  }
}

objc_class *ConversationDetailsView.titleLabelFont.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_presentationStyle);
  id v2 = self;
  if (v1 != 1)
  {
    id v5 = objc_msgSend(v2, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
    Class isa = UIFont.withTraits(_:)(0x8002u).super.isa;

    goto LABEL_5;
  }
  double result = (objc_class *)objc_msgSend(v2, sel__preferredFontForTextStyle_weight_, *MEMORY[0x1E4FB28C8], *MEMORY[0x1E4FB09E0]);
  if (result)
  {
    Class isa = result;
LABEL_5:
    Class v6 = UIFont.caseSensitive()().super.isa;

    return v6;
  }
  __break(1u);
  return result;
}

Class ConversationDetailsView.subtitleLabelFont.getter()
{
  id v0 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
  Class isa = UIFont.withTraits(_:)(0x8000u).super.isa;

  Class v2 = UIFont.caseSensitive()().super.isa;
  return v2;
}

void ConversationDetailsView.updateStatus()()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  uint64_t v144 = (uint64_t)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v5);
  uint64_t v150 = (uint64_t *)((char *)&v144 - v6);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v7);
  int v148 = (uint64_t (*)())((char *)&v144 - v8);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v9);
  int v147 = (char *)&v144 - v10;
  OUTLINED_FUNCTION_8_1();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  os_log_type_t v14 = (char *)&v144 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (id *)((char *)&v144 - v15);
  uint64_t v17 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_0_3();
  uint64_t v19 = (uint64_t (*)(uint64_t, void *))(v18 + 272);
  uint64_t v20 = *(uint64_t (**)(void))(v18 + 272);
  uint64_t v21 = (void *)v20();
  objc_super v22 = *(void (**)(void))((*v17 & *v0) + 0xA8);
  uint64_t v23 = (*v17 & *v0) + 168;
  OUTLINED_FUNCTION_24_13();
  v22();
  id v24 = v16[10];
  outlined destroy of ConversationControlsRecipe((uint64_t)v16);
  objc_msgSend(v21, sel_setAttributedText_, v24);

  int v145 = v20;
  int v146 = v19;
  uint64_t v25 = (void *)v20();
  OUTLINED_FUNCTION_24_13();
  v22();
  uint64_t v149 = v2;
  uint64_t v26 = *(uint64_t *)((char *)v16 + *(int *)(v2 + 52));
  uint64_t v151 = v16;
  outlined destroy of ConversationControlsRecipe((uint64_t)v16);
  objc_msgSend(v25, sel_setNumberOfLines_, v26);

  OUTLINED_FUNCTION_24_13();
  v22();
  outlined init with copy of ConversationControlsType((uint64_t)v14, (uint64_t)&v155);
  LODWORD(v25) = v158;
  outlined destroy of ConversationControlsType((uint64_t)&v155);
  outlined destroy of ConversationControlsRecipe((uint64_t)v14);
  OUTLINED_FUNCTION_1_12();
  uint64_t v28 = *(uint64_t (**)(void))(v27 + 296);
  uint64_t v29 = (void *)v28();
  BOOL v30 = v29;
  uint64_t v152 = v23;
  if (!v25)
  {
    int v41 = v147;
    int v42 = v148;
    id v32 = v22;
    uint64_t v43 = (uint64_t)objc_msgSend(v29, sel_numberOfLines);

    int v44 = (void *)v28();
    if (v43 < 2)
    {
      uint64_t v52 = v28;
      OUTLINED_FUNCTION_9_23();
      v32();
      unint64_t v53 = *((void *)v42 + 11);
      swift_bridgeObjectRetain();
      outlined destroy of ConversationControlsRecipe((uint64_t)v42);
      if (v53 >> 62)
      {
        OUTLINED_FUNCTION_10_3();
        _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_20_10();
      }
      else
      {
        uint64_t v28 = *(uint64_t (**)(void))((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v28)
      {
        OUTLINED_FUNCTION_7_27();
        if ((v53 & 0xC000000000000001) != 0) {
          OUTLINED_FUNCTION_24_12();
        }
        else {
          uint64_t v54 = (uint64_t (*)(void))*(id *)(v53 + 32);
        }
        uint64_t v28 = v54;
      }
      swift_bridgeObjectRelease();
      objc_msgSend(v44, sel_setAttributedText_, v28);

      unint64_t v38 = (void *)v52();
      objc_msgSend(v38, sel_setLineBreakMode_, 4);
      goto LABEL_27;
    }
    int v45 = v28;
    OUTLINED_FUNCTION_9_23();
    v32();
    unint64_t v46 = v41[11];
    swift_bridgeObjectRetain();
    outlined destroy of ConversationControlsRecipe((uint64_t)v41);
    if (v46 >> 62)
    {
      OUTLINED_FUNCTION_10_3();
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_20_10();
      if (v28) {
        goto LABEL_12;
      }
    }
    else if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_12:
      OUTLINED_FUNCTION_7_27();
      if ((v46 & 0xC000000000000001) != 0) {
        OUTLINED_FUNCTION_24_12();
      }
      else {
        id v47 = *(id *)(v46 + 32);
      }
      OUTLINED_FUNCTION_20_10();
      id v48 = objc_msgSend((id)(v46 & 0xC000000000000001), sel_string);

      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v51 = v50;

      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    uint64_t v49 = 0;
    uint64_t v51 = (void *)0xE000000000000000;
LABEL_26:
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v155._uint64_t countAndFlagsBits = v49;
    v155._object = v51;
    swift_bridgeObjectRetain();
    v55._uint64_t countAndFlagsBits = 10;
    v55._object = (void *)0xE100000000000000;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    Class isa = NSMutableAttributedString.__allocating_init(string:)(v155).super.super.isa;
    objc_msgSend(v44, sel_setAttributedText_, isa);

    OUTLINED_FUNCTION_22_10();
    unint64_t v38 = (void *)v45();
    objc_msgSend(v38, sel_setLineBreakMode_, 0);
LABEL_27:
    uint64_t v39 = (uint64_t)v151;
    goto LABEL_28;
  }
  int v148 = v28;
  uint64_t v31 = v150;
  id v32 = v22;
  OUTLINED_FUNCTION_24_13();
  v22();
  unint64_t v33 = v31[11];
  swift_bridgeObjectRetain();
  outlined destroy of ConversationControlsRecipe((uint64_t)v31);
  if (v33 >> 62)
  {
    OUTLINED_FUNCTION_10_3();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_20_10();
  }
  else
  {
    uint64_t v31 = *(void **)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v34 = v149;
  if (v31)
  {
    OUTLINED_FUNCTION_7_27();
    if ((v33 & 0xC000000000000001) != 0) {
      OUTLINED_FUNCTION_24_12();
    }
    else {
      uint64_t v35 = *(id *)(v33 + 32);
    }
    uint64_t v31 = v35;
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_setAttributedText_, v31);

  uint64_t v36 = v148;
  uint64_t v37 = (void *)v148();
  objc_msgSend(v37, sel_setLineBreakMode_, 4);

  unint64_t v38 = (void *)v36();
  uint64_t v39 = (uint64_t)v151;
  OUTLINED_FUNCTION_14_16();
  v32();
  uint64_t v40 = *(void *)(v39 + *(int *)(v34 + 56));
  outlined destroy of ConversationControlsRecipe(v39);
  objc_msgSend(v38, sel_setNumberOfLines_, v40);
LABEL_28:

  OUTLINED_FUNCTION_4_8();
  int v58 = *(uint64_t (**)(void))(v57 + 296);
  OUTLINED_FUNCTION_23_9();
  int v59 = (void *)v58();
  OUTLINED_FUNCTION_23_9();
  int v60 = (void *)v58();
  id v61 = objc_msgSend(v60, sel_numberOfLines);

  objc_msgSend(v59, sel_setMarqueeEnabled_, v61 == (id)1);
  OUTLINED_FUNCTION_23_9();
  int v62 = (void *)v58();
  uint64_t v150 = v58;
  OUTLINED_FUNCTION_23_9();
  uint64_t v63 = v58();
  id v64 = objc_msgSend((id)v63, sel_numberOfLines);

  objc_msgSend(v62, sel_setMarqueeRunning_, v64 == (id)1);
  OUTLINED_FUNCTION_9_23();
  v32();
  outlined init with copy of ConversationControlsType(v39, (uint64_t)&v155);
  outlined destroy of ConversationControlsRecipe(v39);
  OUTLINED_FUNCTION_12_21(23);
  char v154 = 6;
  LOBYTE(v63) = static ConversationControlsType.== infix(_:_:)((uint64_t)&v155);
  outlined destroy of ConversationControlsType((uint64_t)v153);
  outlined destroy of ConversationControlsType((uint64_t)&v155);
  uint64_t v65 = v32;
  if ((v63 & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v66 = OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_controlsManager;
  OUTLINED_FUNCTION_5_40();
  int v68 = *(void (**)(void))(v67 + 624);
  id v70 = v69;
  v68();
  uint64_t v72 = v71;

  uint64_t ObjectType = swift_getObjectType();
  LODWORD(v70) = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 184))(ObjectType, v72);
  swift_unknownObjectRelease();
  if (v70 == 2)
  {
LABEL_30:
    uint64_t v74 = *(void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_durationController);
    if (v74)
    {
      int v75 = *(void (**)(uint64_t))(*(void *)v74 + 256);
      uint64_t v76 = swift_retain();
      v75(v76);
      swift_release();
    }
    ConversationDetailsView.durationController.setter(0);
    id v77 = (uint64_t (*)(void))v150;
    OUTLINED_FUNCTION_22_10();
    uint64_t v78 = (void *)v77();
    id v79 = objc_msgSend(self, sel_secondaryLabelColor);
    objc_msgSend(v78, sel_setTextColor_, v79);

    goto LABEL_33;
  }
  id v98 = *(id *)((char *)v1 + v66);
  ConversationControlsManager.heldCalls()((uint64_t)v98, v99, v100, v101, v102, v103, v104, v105, v144, (uint64_t)v145, v146, v147, v148, v149, (uint64_t)v150, (uint64_t)v151, v152, v153[0], v153[1],
    v153[2],
    v153[3],
    v153[4]);
  unint64_t v107 = v106;

  if (v107 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v108 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v77 = (uint64_t (*)(void))v150;
  uint64_t v150 = v65;
  swift_bridgeObjectRelease();
  if (v108 >= 1)
  {
    uint64_t v149 = type metadata accessor for DurationLabelController();
    OUTLINED_FUNCTION_5_40();
    id v110 = *(uint64_t (**)(void))(v109 + 624);
    id v112 = v111;
    uint64_t v113 = v110();
    uint64_t v115 = v114;

    uint64_t v116 = swift_getObjectType();
    uint64_t v156 = v116;
    uint64_t v157 = *(void *)(v115 + 8);
    uint64_t v117 = v157;
    v155._uint64_t countAndFlagsBits = v113;
    uint64_t v118 = v145();
    id v119 = objc_msgSend(self, sel_labelColor);
    uint64_t v120 = (uint64_t)v151;
    OUTLINED_FUNCTION_25_10();
    v121();
    id v122 = *(id *)(v120 + 80);
    outlined destroy of ConversationControlsRecipe(v120);
    v153[0] = v113;
    swift_unknownObjectRetain();
    uint64_t v123 = specialized DurationLabelController.__allocating_init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)(v153, v118, v119, 0, 0, v122, v149, v116, v117);
    goto LABEL_51;
  }
  OUTLINED_FUNCTION_5_40();
  int v125 = *(uint64_t (**)(void))(v124 + 624);
  id v127 = v126;
  uint64_t v128 = v125();
  uint64_t v130 = v129;

  uint64_t v131 = swift_getObjectType();
  uint64_t v156 = v131;
  uint64_t v132 = *(void *)(v130 + 8);
  uint64_t v157 = v132;
  v155._uint64_t countAndFlagsBits = v128;
  OUTLINED_FUNCTION_22_10();
  uint64_t v149 = v77();
  id v133 = objc_msgSend(self, sel_systemGreenColor);
  uint64_t v134 = v144;
  OUTLINED_FUNCTION_25_10();
  v135();
  unint64_t v136 = *(void *)(v134 + 88);
  swift_bridgeObjectRetain();
  outlined destroy of ConversationControlsRecipe(v134);
  if (v136 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v137 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v137) {
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v137 = *(void *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v137)
    {
LABEL_47:
      OUTLINED_FUNCTION_7_27();
      if ((v136 & 0xC000000000000001) != 0) {
        OUTLINED_FUNCTION_24_12();
      }
      else {
        id v138 = *(id *)(v136 + 32);
      }
      uint64_t v137 = (uint64_t)v138;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v139 = type metadata accessor for DurationLabelController();
  v153[0] = v128;
  swift_unknownObjectRetain();
  uint64_t v123 = specialized DurationLabelController.__allocating_init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)(v153, v149, v133, 0, 0, v137, v139, v131, v132);
LABEL_51:
  uint64_t v140 = v123;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
  ConversationDetailsView.durationController.setter(v140);
  uint64_t v141 = *(void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit23ConversationDetailsView_durationController);
  uint64_t v65 = (void (*)(void))v150;
  if (v141)
  {
    int v142 = *(void (**)(uint64_t))(*(void *)v141 + 248);
    uint64_t v143 = swift_retain();
    v142(v143);
    swift_release();
  }
LABEL_33:
  if (SBUIIsSystemApertureEnabled())
  {
    uint64_t v80 = (uint64_t)v151;
    OUTLINED_FUNCTION_14_16();
    v65();
    outlined init with copy of ConversationControlsType(v80, (uint64_t)&v155);
    outlined destroy of ConversationControlsRecipe(v80);
    OUTLINED_FUNCTION_12_21(16);
    char v154 = 6;
    char v81 = static ConversationControlsType.== infix(_:_:)((uint64_t)&v155);
    outlined destroy of ConversationControlsType((uint64_t)v153);
    outlined destroy of ConversationControlsType((uint64_t)&v155);
    if (v81) {
      goto LABEL_36;
    }
    uint64_t v82 = (uint64_t)v151;
    OUTLINED_FUNCTION_14_16();
    v65();
    outlined init with copy of ConversationControlsType(v82, (uint64_t)&v155);
    outlined destroy of ConversationControlsRecipe(v82);
    OUTLINED_FUNCTION_12_21(15);
    char v154 = 6;
    char v83 = static ConversationControlsType.== infix(_:_:)((uint64_t)&v155);
    outlined destroy of ConversationControlsType((uint64_t)v153);
    outlined destroy of ConversationControlsType((uint64_t)&v155);
    if (v83)
    {
LABEL_36:
      OUTLINED_FUNCTION_4_8();
      uint64_t v85 = (*(uint64_t (**)(void))(v84 + 488))();
      OUTLINED_FUNCTION_22_10();
      int v86 = (void *)v77();
      int v87 = v86;
      if (v85 >= 5) {
        uint64_t v88 = 5;
      }
      else {
        uint64_t v88 = v85;
      }
      objc_msgSend(v86, sel_setNumberOfLines_, v88);
    }
  }
  OUTLINED_FUNCTION_4_8();
  id v90 = (void *)(*(uint64_t (**)(void))(v89 + 320))();
  OUTLINED_FUNCTION_1_12();
  (*(void (**)(void))(v91 + 368))();
  objc_msgSend(v90, sel_setAlpha_);

  OUTLINED_FUNCTION_4_8();
  id v93 = *(uint64_t (**)(void))(v92 + 224);
  int v94 = (void *)v93();
  OUTLINED_FUNCTION_1_12();
  int v96 = *(void (**)(void))(v95 + 376);
  v96();
  objc_msgSend(v94, sel_setAlpha_);

  int v97 = (void *)v93();
  objc_msgSend(v97, sel_setHidden_, ((double (*)(void))v96)() == 0.0);
}

uint64_t type metadata accessor for ConversationDetailsView()
{
  uint64_t result = type metadata singleton initialization cache for ConversationDetailsView;
  if (!type metadata singleton initialization cache for ConversationDetailsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall ConversationDetailsView.updateSubtitleLeadingBadge()()
{
  uint64_t v0 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_0_3();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 344))();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    OUTLINED_FUNCTION_3_16();
    uint64_t v8 = (void *)(*(uint64_t (**)(void))(v7 + 224))();
    objc_msgSend(v8, sel_removeArrangedSubview_, v6);

    objc_msgSend(v6, sel_removeFromSuperview);
  }
  OUTLINED_FUNCTION_3_16();
  OUTLINED_FUNCTION_25_10();
  v9();
  uint64_t v10 = *(void **)&v3[*(int *)(v0 + 40)];
  if (v10)
  {
    id v11 = v10;
    outlined destroy of ConversationControlsRecipe((uint64_t)v3);
    OUTLINED_FUNCTION_0_3();
    uint64_t v13 = *(void (**)(void *))(v12 + 352);
    id v14 = v11;
    v13(v10);
    OUTLINED_FUNCTION_3_16();
    uint64_t v16 = (void *)(*(uint64_t (**)(void))(v15 + 224))();
    objc_msgSend(v16, sel_insertArrangedSubview_atIndex_, v14, 0);
  }
  else
  {
    outlined destroy of ConversationControlsRecipe((uint64_t)v3);
  }
}

void ConversationDetailsView.configureSubviews()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v3 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v4 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v0->super.super.isa) + 0xC8);
  uint64_t v5 = (void *)v4();
  [(UIView *)v2 addSubview:v5];

  OUTLINED_FUNCTION_13_15();
  uint64_t v6 = (void *)v4();
  UIView.addConstraintsToFill(_:insets:)(v2, *MEMORY[0x1E4FB12A8]);

  OUTLINED_FUNCTION_1_12();
  (*(void (**)(void))(v7 + 472))();
  if (SBUIIsSystemApertureEnabled())
  {
    OUTLINED_FUNCTION_11_5();
    uint64_t v9 = *(void (**)(void))(v8 + 168);
    OUTLINED_FUNCTION_27_8();
    v9();
    outlined init with copy of ConversationControlsType(v1, (uint64_t)v39);
    outlined destroy of ConversationControlsRecipe(v1);
    OUTLINED_FUNCTION_21_13(16);
    char v38 = 6;
    char v10 = static ConversationControlsType.== infix(_:_:)((uint64_t)v39);
    outlined destroy of ConversationControlsType((uint64_t)v37);
    outlined destroy of ConversationControlsType((uint64_t)v39);
    if (v10) {
      goto LABEL_4;
    }
    OUTLINED_FUNCTION_27_8();
    v9();
    outlined init with copy of ConversationControlsType(v1, (uint64_t)v39);
    outlined destroy of ConversationControlsRecipe(v1);
    OUTLINED_FUNCTION_21_13(15);
    char v38 = 6;
    char v11 = static ConversationControlsType.== infix(_:_:)((uint64_t)v39);
    outlined destroy of ConversationControlsType((uint64_t)v37);
    outlined destroy of ConversationControlsType((uint64_t)v39);
    if (v11)
    {
LABEL_4:
      OUTLINED_FUNCTION_11_5();
      v12 += 34;
      uint64_t v13 = *v12;
      id v14 = (void *)(*v12)();
      id v15 = objc_msgSend(v14, sel_widthAnchor);

      OUTLINED_FUNCTION_13_15();
      uint64_t v16 = (void *)v4();
      id v17 = objc_msgSend(v16, sel_widthAnchor);

      id v18 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v17);
      objc_msgSend(v18, sel_setActive_, 1);

      uint64_t v19 = (void *)v13();
      objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

      OUTLINED_FUNCTION_11_5();
      uint64_t v21 = *(uint64_t (**)(void))(v20 + 224);
      OUTLINED_FUNCTION_8_24();
      objc_super v22 = (void *)v21();
      id v23 = objc_msgSend(v22, sel_widthAnchor);

      OUTLINED_FUNCTION_13_15();
      id v24 = (void *)v4();
      id v25 = objc_msgSend(v24, sel_widthAnchor);

      id v26 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v25);
      objc_msgSend(v26, sel_setActive_, 1);

      OUTLINED_FUNCTION_8_24();
      uint64_t v27 = (void *)v21();
      id v28 = objc_msgSend(v27, sel_heightAnchor);

      OUTLINED_FUNCTION_1_12();
      BOOL v30 = (void *)(*(uint64_t (**)(void))(v29 + 296))();
      id v31 = objc_msgSend(v30, sel_heightAnchor);

      id v32 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v31);
      objc_msgSend(v32, sel_setActive_, 1);

      OUTLINED_FUNCTION_8_24();
      unint64_t v33 = (void *)v21();
      objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

      OUTLINED_FUNCTION_8_24();
      uint64_t v34 = (void *)v21();
      OUTLINED_FUNCTION_1_12();
      uint64_t v36 = (void *)(*(uint64_t (**)(void))(v35 + 320))();
      objc_msgSend(v34, sel_removeArrangedSubview_, v36);
    }
  }
}

Swift::Int __swiftcall ConversationDetailsView.enhancedEmergencySubtitleMaxNumberOfLines()()
{
  id v0 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v0, sel_bounds);
  double v2 = v1;

  double v3 = v2 * 0.6;
  OUTLINED_FUNCTION_0_3();
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(v4 + 296))();
  uint64_t v6 = outlined bridged method (ob) of @objc UILabel.text.getter(v5);
  if (v7)
  {
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  uint64_t v9 = (void *)MEMORY[0x1C87730B0](v6, v8);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769620;
  char v11 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  uint64_t v12 = ConversationDetailsView.chevronLabelFont.getter(v11);
  *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  *(void *)(inited + 40) = v12;
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
  v21.origin.CGFloat x = outlined bridged method (mnnbnnn) of @objc NSString.boundingRect(with:options:attributes:context:)(1, v3, 3.40282347e38, v13, 0, v9);
  double Height = CGRectGetHeight(v21);
  uint64_t v16 = (void *)ConversationDetailsView.chevronLabelFont.getter(v15);
  objc_msgSend(v16, sel_lineHeight);
  double v18 = v17;

  double v20 = ceil(Height / v18);
  if ((~*(void *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v20 < 9.22337204e18) {
    return (uint64_t)v20;
  }
LABEL_10:
  __break(1u);
  return result;
}

id ConversationDetailsView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void ConversationDetailsView.init(frame:)()
{
}

id ConversationDetailsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationDetailsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SystemApertureControlsStatusView.recipe.getter in conformance ConversationDetailsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t protocol witness for SystemApertureControlsStatusView.recipe.setter in conformance ConversationDetailsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

void (*protocol witness for SystemApertureControlsStatusView.recipe.modify in conformance ConversationDetailsView(void *a1))(void *a1)
{
  double v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8))();
  return protocol witness for Control.cnkContentAlpha.modify in conformance BaseButton;
}

uint64_t protocol witness for SystemApertureControlsStatusView.titleLabelGlyphInset.getter in conformance ConversationDetailsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t outlined bridged method (ob) of @objc UILabel.text.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_text);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double outlined bridged method (mnnbnnn) of @objc NSString.boundingRect(with:options:attributes:context:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, void *a6)
{
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a6, sel_boundingRectWithSize_options_attributes_context_, a1, isa, a5, a2, a3);
  double v13 = v12;

  return v13;
}

uint64_t ObjC metadata update function for ConversationDetailsView()
{
  return type metadata accessor for ConversationDetailsView();
}

uint64_t type metadata completion function for ConversationDetailsView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationDetailsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationDetailsView);
}

uint64_t dispatch thunk of ConversationDetailsView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationDetailsView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ConversationDetailsView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ConversationDetailsView.titleLabelGlyphInset.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationDetailsVStack.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationDetailsVStack.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationDetailsVStack.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleHStack.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleHStack.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleHStack.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ConversationDetailsView.leadingAccessoryView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ConversationDetailsView.leadingAccessoryView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ConversationDetailsView.leadingAccessoryView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationTitleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationTitleLabel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationTitleLabel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleLabel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleLabel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ConversationDetailsView.chevronLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ConversationDetailsView.chevronLabel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of ConversationDetailsView.chevronLabel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleBadge.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleBadge.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of ConversationDetailsView.conversationSubtitleBadge.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of ConversationDetailsView.chevronLabelAlpha.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of ConversationDetailsView.subtitleAlpha.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of ConversationDetailsView.__allocating_init(recipe:presentationStyle:controlsManager:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 432))(a1, a2 & 1);
}

uint64_t dispatch thunk of ConversationDetailsView.updateSubtitleLeadingBadge()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ConversationDetailsView.enhancedEmergencySubtitleMaxNumberOfLines()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

BOOL static DeviceInactivityObserver.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DeviceInactivityObserver.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int DeviceInactivityObserver.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DeviceInactivityObserver.State(char *a1, char *a2)
{
  return static DeviceInactivityObserver.State.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DeviceInactivityObserver.State()
{
  return DeviceInactivityObserver.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance DeviceInactivityObserver.State(uint64_t a1)
{
  DeviceInactivityObserver.State.hash(into:)(a1, *v1);
}

uint64_t DeviceInactivityObserver.inactivityTimeout.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t key path getter for DeviceInactivityObserver.state : DeviceInactivityObserver@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t key path setter for DeviceInactivityObserver.state : DeviceInactivityObserver()
{
  return DeviceInactivityObserver.state.setter();
}

uint64_t DeviceInactivityObserver.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1C3073DDC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1C3073E28()
{
  return DeviceInactivityObserver.state.setter();
}

uint64_t DeviceInactivityObserver.state.setter()
{
  return static Published.subscript.setter();
}

uint64_t key path setter for DeviceInactivityObserver.$state : DeviceInactivityObserver(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>.Publisher);
  MEMORY[0x1F4188790](v2);
  double v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return DeviceInactivityObserver.$state.setter((uint64_t)v4);
}

uint64_t DeviceInactivityObserver.$state.getter()
{
  return swift_endAccess();
}

uint64_t DeviceInactivityObserver.$state.setter(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>.Publisher);
  OUTLINED_FUNCTION_0_27();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, a1, v1);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v1);
}

uint64_t DeviceInactivityObserver.__allocating_init(inactivityTimeout:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  DeviceInactivityObserver.init(inactivityTimeout:)(a1);
  return v2;
}

uint64_t DeviceInactivityObserver.init(inactivityTimeout:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>);
  OUTLINED_FUNCTION_0_27();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_62();
  uint64_t v8 = v1 + OBJC_IVAR____TtC15ConversationKit24DeviceInactivityObserver__state;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v3, v2);
  *(void *)(v1 + 16) = IOHIDEventSystemClientCreateWithType();
  *(void *)(v1 + 24) = a1;
  DeviceInactivityObserver.registerForHIDActivity()();
  return v1;
}

Swift::Void __swiftcall DeviceInactivityObserver.invalidate()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  OUTLINED_FUNCTION_3_48();
  uint64_t v3 = v2;
  IOHIDEventSystemClientUnregisterPropertyChangedCallback();

  MEMORY[0x1F40E8AA8](v1);
}

void DeviceInactivityObserver.handleHIDActivityStateChanged()()
{
  uint64_t v1 = *(__IOHIDEventSystemClient **)(v0 + 16);
  OUTLINED_FUNCTION_3_48();
  uint64_t v3 = (__CFString *)v2;
  CFTypeRef v4 = IOHIDEventSystemClientCopyProperty(v1, v2);

  if (v4 && (uint64_t v20 = (uint64_t)v4, swift_unknownObjectRetain(), (swift_dynamicCast() & 1) != 0))
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.screenSharing);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 67109120;
      OUTLINED_FUNCTION_1_48();
      _os_log_impl(&dword_1C2F90000, v6, v7, "HID activity state changed to new value: %u", v8, 8u);
      OUTLINED_FUNCTION_3();
    }

    if (v19 > 2)
    {
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        double v18 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)double v18 = 67109120;
        OUTLINED_FUNCTION_1_48();
        _os_log_impl(&dword_1C2F90000, v16, v17, "Unknown HID activity state value: %u", v18, 8u);
        OUTLINED_FUNCTION_3();
      }
    }
    DeviceInactivityObserver.state.setter();
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.screenSharing);
    swift_unknownObjectRetain_n();
    char v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      double v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)double v12 = 136315138;
      if (v4)
      {
        swift_unknownObjectRetain();
        uint64_t v13 = String.init<A>(reflecting:)();
        unint64_t v15 = v14;
      }
      else
      {
        unint64_t v15 = 0xE300000000000000;
        uint64_t v13 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v10, v11, "Unable to get activity state from IOHIDEventSystemClient property: %s", v12, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

void DeviceInactivityObserver.registerForHIDActivity()()
{
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_18();
  IOHIDEventSystemClientSetMatching();

  type metadata accessor for OS_dispatch_queue();
  uint64_t v1 = (void *)static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_4_18();
  IOHIDEventSystemClientScheduleWithDispatchQueue();

  CFStringRef v2 = (void *)MEMORY[0x1C87730B0](0xD000000000000010, 0x80000001C3795F80);
  OUTLINED_FUNCTION_4_18();
  IOHIDEventSystemClientRegisterPropertyChangedCallback();

  uint64_t v3 = (void *)MEMORY[0x1C87730B0](0xD000000000000014, 0x80000001C3796000);
  Class v4 = UInt._bridgeToObjectiveC()().super.super.isa;
  uint64_t v5 = (__IOHIDEventSystemClient *)OUTLINED_FUNCTION_4_18();
  IOHIDEventSystemClientSetProperty(v5, v6, v4);

  DeviceInactivityObserver.handleHIDActivityStateChanged()();
}

uint64_t closure #1 in DeviceInactivityObserver.registerForHIDActivity()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_getObjectType();
  _OWORD v7[3] = result;
  v7[0] = a4;
  if (a1)
  {
    swift_unknownObjectRetain();
    swift_retain();
    DeviceInactivityObserver.handleHIDActivityStateChanged()();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc closure #1 in DeviceInactivityObserver.registerForHIDActivity()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  swift_unknownObjectRetain();
  closure #1 in DeviceInactivityObserver.registerForHIDActivity()(a1, a2, (uint64_t)v7, a4);

  return swift_unknownObjectRelease();
}

uint64_t DeviceInactivityObserver.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit24DeviceInactivityObserver__state;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>);
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

uint64_t DeviceInactivityObserver.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit24DeviceInactivityObserver__state;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DeviceInactivityObserver.State>);
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type DeviceInactivityObserver.State and conformance DeviceInactivityObserver.State()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceInactivityObserver.State and conformance DeviceInactivityObserver.State;
  if (!lazy protocol witness table cache variable for type DeviceInactivityObserver.State and conformance DeviceInactivityObserver.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceInactivityObserver.State and conformance DeviceInactivityObserver.State);
  }
  return result;
}

uint64_t sub_1C3074978(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))();
}

uint64_t ObjC metadata update function for DeviceInactivityObserver()
{
  return type metadata accessor for DeviceInactivityObserver();
}

uint64_t type metadata accessor for DeviceInactivityObserver()
{
  uint64_t result = type metadata singleton initialization cache for DeviceInactivityObserver;
  if (!type metadata singleton initialization cache for DeviceInactivityObserver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for DeviceInactivityObserver()
{
  type metadata accessor for Published<DeviceInactivityObserver.State>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for DeviceInactivityObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DeviceInactivityObserver);
}

uint64_t dispatch thunk of DeviceInactivityObserver.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of DeviceInactivityObserver.$state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DeviceInactivityObserver.__allocating_init(inactivityTimeout:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of DeviceInactivityObserver.invalidate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

void type metadata accessor for Published<DeviceInactivityObserver.State>()
{
  if (!lazy cache variable for type metadata for Published<DeviceInactivityObserver.State>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<DeviceInactivityObserver.State>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for DeviceInactivityObserver.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3074C6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceInactivityObserver.State()
{
  return &type metadata for DeviceInactivityObserver.State;
}

uint64_t key path setter for VideoMessageInboxController.callItems : VideoMessageInboxController(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 112);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t VideoMessageInboxController.callItems.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*VideoMessageInboxController.callItems.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for VideoMessageInboxController.messageDeletionHandler : VideoMessageInboxController@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [UUID]) -> ();
  a2[1] = result;
  return result;
}

uint64_t key path setter for VideoMessageInboxController.messageDeletionHandler : VideoMessageInboxController(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  unsigned int v6 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(void **)a2 + 136);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNComposeRecipient) -> (@out ()), v5);
}

uint64_t (*VideoMessageInboxController.messageDeletionHandler.getter())(uint64_t a1)
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 24);
  }
  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_20();
    swift_weakInit();
    uint64_t v4 = *(void *)(v0 + 24);
    uint64_t v2 = partial apply for closure #1 in VideoMessageInboxController.messageDeletionHandler.getter;
    *(void *)(v0 + 24) = partial apply for closure #1 in VideoMessageInboxController.messageDeletionHandler.getter;
    *(void *)(v0 + 32) = v3;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v4);
  }
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return v2;
}

uint64_t sub_1C3074F54()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in VideoMessageInboxController.messageDeletionHandler.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = VideoMessageInboxController.messageStoreController.getter();
    swift_release();
    static TaskPriority.userInitiated.getter();
    uint64_t v7 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v7);
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = 0;
    _OWORD v8[3] = 0;
    v8[4] = v6;
    v8[5] = a1;
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in VideoMessageInboxController.messageDeletionHandler.getter(uint64_t a1)
{
  return closure #1 in VideoMessageInboxController.messageDeletionHandler.getter(a1);
}

uint64_t closure #1 in closure #1 in VideoMessageInboxController.messageDeletionHandler.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 32) = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #1 in closure #1 in VideoMessageInboxController.messageDeletionHandler.getter;
  return MEMORY[0x1F41190E0](a5);
}

uint64_t closure #1 in closure #1 in VideoMessageInboxController.messageDeletionHandler.getter()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 40) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.videoMessaging);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C2F90000, v1, v2, "Successfully deleted messages", v3, 2u);
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_6();
  return v4();
}

uint64_t closure #1 in closure #1 in VideoMessageInboxController.messageDeletionHandler.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_22_2();
  a19 = v21;
  a20 = v22;
  OUTLINED_FUNCTION_55();
  a18 = v20;
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  id v23 = *(void **)(v20 + 40);
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.videoMessaging);
  id v25 = v23;
  id v26 = v23;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  BOOL v30 = *(void **)(v20 + 40);
  if (v29)
  {
    OUTLINED_FUNCTION_43_3();
    a9 = swift_slowAlloc();
    OUTLINED_FUNCTION_42_5(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v31 = String.init<A>(reflecting:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &a9);
    OUTLINED_FUNCTION_40_5(v33);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v34, v35, "Failed to delete messages with error %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_24_5();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
}

uint64_t VideoMessageInboxController.messageDeletionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v3);
}

uint64_t (*VideoMessageInboxController.messageDeletionHandler.modify(uint64_t (**a1)(uint64_t a1)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = VideoMessageInboxController.messageDeletionHandler.getter();
  a1[1] = v3;
  return VideoMessageInboxController.messageDeletionHandler.modify;
}

uint64_t VideoMessageInboxController.messageDeletionHandler.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if ((a2 & 1) == 0) {
    return VideoMessageInboxController.messageDeletionHandler.setter(*a1, v2);
  }
  swift_retain();
  VideoMessageInboxController.messageDeletionHandler.setter(v3, v2);
  return swift_release();
}

Swift::Void __swiftcall VideoMessageInboxController.deleteVideoMessageCallItems(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = *((void *)a1._rawValue + 2);
  if (v3)
  {
    rawValue = a1._rawValue;
    uint64_t v5 = type metadata accessor for RecentsCallItem(0);
    OUTLINED_FUNCTION_1(v5);
    uint64_t v7 = (uint64_t)rawValue + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v9 = *(void *)(v8 + 72);
    uint64_t v33 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v11 = *(void *)(v10 + 64);
    uint64_t v30 = v12;
    unint64_t v32 = (uint64_t (**)(char *, char *, uint64_t))(v12 + 32);
    v28[0] = rawValue;
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v37 = 0;
    uint64_t v14 = MEMORY[0x1E4FBC860];
    unint64_t v15 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
    uint64_t v31 = v9;
    uint64_t v29 = v11;
    do
    {
      uint64_t v34 = v3;
      uint64_t v35 = v14;
      uint64_t v36 = v28;
      MEMORY[0x1F4188790](v13);
      unint64_t v16 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(v15);
      uint64_t v18 = OUTLINED_FUNCTION_8(v17);
      MEMORY[0x1F4188790](v18);
      OUTLINED_FUNCTION_36_4();
      unsigned int v19 = v15;
      uint64_t v20 = v37;
      closure #1 in VideoMessageInboxController.deleteVideoMessageCallItems(_:)(v7, (uint64_t)v2);
      uint64_t v37 = v20;
      uint64_t v21 = v11;
      uint64_t v22 = v33;
      if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v33) == 1)
      {
        uint64_t v13 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v2, v19);
        uint64_t v11 = v21;
        uint64_t v14 = v35;
        unint64_t v15 = v19;
      }
      else
      {
        id v23 = *v32;
        uint64_t v24 = (*v32)((char *)v28 - v16, v2, v22);
        MEMORY[0x1F4188790](v24);
        uint64_t v2 = (char *)v28 - v16;
        v23((char *)v28 - v16, (char *)v28 - v16, v22);
        uint64_t v14 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1F418BB68], MEMORY[0x1F418BCA8], (void (*)(unint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
        }
        unint64_t v15 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
        unint64_t v26 = *(void *)(v14 + 16);
        unint64_t v25 = *(void *)(v14 + 24);
        uint64_t v11 = v29;
        if (v26 >= v25 >> 1) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1F418BB68], MEMORY[0x1F418BCA8], (void (*)(unint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
        }
        *(void *)(v14 + 16) = v26 + 1;
        uint64_t v13 = v23((char *)(v14+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v26), v2, v33);
        uint64_t v9 = v31;
      }
      v7 += v9;
      uint64_t v3 = v34 - 1;
    }
    while (v34 != 1);
    a1._rawValue = (void *)swift_bridgeObjectRelease();
    uint64_t v1 = v28[1];
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  uint64_t v27 = (void (*)(uint64_t))(*(uint64_t (**)(void *))(*(void *)v1 + 128))(a1._rawValue);
  v27(v14);
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t closure #1 in VideoMessageInboxController.deleteVideoMessageCallItems(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v47 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v46);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RecentsCallItemType(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RecentCallRecentItemMetadata(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  MEMORY[0x1F4188790](v16 - 8);
  outlined init with copy of RecentsCallItemType(a1, (uint64_t)v9, (void (*)(void))type metadata accessor for RecentsCallItemType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 2)
  {
    outlined destroy of RecentsCallItemType((uint64_t)v9, (void (*)(void))type metadata accessor for RecentsCallItemType);
LABEL_9:
    uint64_t v27 = type metadata accessor for UUID();
    __swift_storeEnumTagSinglePayload((uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v27);
    goto LABEL_12;
  }
  if ((EnumCaseMultiPayload - 3) >= 2) {
    uint64_t v19 = (uint64_t)v13;
  }
  else {
    uint64_t v19 = (uint64_t)v15;
  }
  outlined init with take of RecentCallRecentItemMetadata((uint64_t)v9, v19, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v20 = *(void **)(v19 + *(int *)(v10 + 52));
  id v21 = v20;
  outlined destroy of RecentsCallItemType(v19, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  if (!v20) {
    goto LABEL_9;
  }
  id v22 = objc_msgSend(v21, sel_messageUUID);

  MEMORY[0x1F4188790](v23);
  if (v22)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = type metadata accessor for UUID();
    unint64_t v25 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v24 = type metadata accessor for UUID();
    unint64_t v25 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v25, v26, 1, v24);
  outlined init with take of UUID?((uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v24) != 1)
  {
    uint64_t v44 = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v48, (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
    uint64_t v41 = v44;
    uint64_t v42 = 0;
    uint64_t v40 = v24;
    return __swift_storeEnumTagSinglePayload(v41, v42, 1, v40);
  }
LABEL_12:
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.videoMessaging);
  uint64_t v29 = v6;
  outlined init with copy of RecentsCallItemType(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v50 = v33;
    *(_DWORD *)unint64_t v32 = 136315138;
    int v45 = v32 + 4;
    uint64_t v34 = (uint64_t)v6;
    uint64_t v35 = v47;
    outlined init with copy of RecentsCallItemType(v34, v47, (void (*)(void))type metadata accessor for RecentsCallItem);
    __swift_storeEnumTagSinglePayload(v35, 0, 1, v46);
    uint64_t v36 = specialized >> prefix<A>(_:)();
    uint64_t v37 = (uint64_t)v29;
    unint64_t v39 = v38;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v35, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v39, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RecentsCallItemType(v37, (void (*)(void))type metadata accessor for RecentsCallItem);
    _os_log_impl(&dword_1C2F90000, v30, v31, "Ignoring request to delete a call item without a video message: %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v33, -1, -1);
    MEMORY[0x1C87760E0](v32, -1, -1);
  }
  else
  {
    outlined destroy of RecentsCallItemType((uint64_t)v6, (void (*)(void))type metadata accessor for RecentsCallItem);
  }

  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v41 = v48;
  uint64_t v42 = 1;
  return __swift_storeEnumTagSinglePayload(v41, v42, 1, v40);
}

uint64_t VideoMessageInboxController.markCallItemAsRead(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_36_4();
  uint64_t v9 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v48 = v17;
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x1F4188790](v20);
  uint64_t v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v22 = OUTLINED_FUNCTION_8(v21);
  uint64_t v24 = *(void *)(v23 + 64);
  MEMORY[0x1F4188790](v22);
  unint64_t v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RecentsCallItemType(a1, v3, (void (*)(void))type metadata accessor for RecentsCallItemType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 2)
  {
    outlined destroy of RecentsCallItemType(v3, (void (*)(void))type metadata accessor for RecentsCallItemType);
LABEL_9:
    __swift_storeEnumTagSinglePayload((uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v16);
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  if ((EnumCaseMultiPayload - 3) >= 2) {
    uint64_t v27 = (uint64_t)v13;
  }
  else {
    uint64_t v27 = (uint64_t)v15;
  }
  outlined init with take of RecentCallRecentItemMetadata(v3, v27, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v28 = *(void **)(v27 + *(int *)(v9 + 52));
  id v29 = v28;
  outlined destroy of RecentsCallItemType(v27, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  if (!v28) {
    goto LABEL_9;
  }
  id v30 = objc_msgSend(v29, sel_messageUUID);

  MEMORY[0x1F4188790](v31);
  if (v30)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v32, 1, v16);
  outlined init with take of UUID?((uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (__swift_getEnumTagSinglePayload((uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v16) == 1) {
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  uint64_t v34 = v47;
  uint64_t v35 = v48;
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v46(v47, v25, v16);
  uint64_t v36 = (uint64_t)v49;
  static TaskPriority.userInitiated.getter();
  uint64_t v37 = type metadata accessor for TaskPriority();
  uint64_t v38 = __swift_storeEnumTagSinglePayload(v36, 0, 1, v37);
  uint64_t v45 = (uint64_t)&v45;
  MEMORY[0x1F4188790](v38);
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v16);
  unint64_t v39 = (*(unsigned __int8 *)(v35 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v40 = (char *)swift_allocObject();
  *((void *)v40 + 2) = 0;
  *((void *)v40 + 3) = 0;
  *((void *)v40 + 4) = v50;
  v46(&v40[v39], (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  uint64_t v41 = &v40[(v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v42 = v52;
  *(void *)uint64_t v41 = v51;
  *((void *)v41 + 1) = v42;
  swift_retain();
  uint64_t v43 = OUTLINED_FUNCTION_23_0();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v43);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  OUTLINED_FUNCTION_50_1();
  return v44();
}

uint64_t closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v7[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:), 0, 0);
}

uint64_t closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = v0[6];
  v0[10] = VideoMessageInboxController.messageStoreController.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  uint64_t v2 = type metadata accessor for UUID();
  v0[11] = v2;
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  v0[12] = v3;
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[13] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1C3769620;
  uint64_t v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[14] = v7;
  v0[15] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v6 + v5, v1, v2);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:);
  return MEMORY[0x1F41190E8](v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  unint64_t v5 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  OUTLINED_FUNCTION_5_8();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[6];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.videoMessaging);
  unint64_t v5 = swift_task_alloc();
  v1(v5, v3, v2);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = OUTLINED_FUNCTION_46_3();
    v12(v11);
    _os_log_impl(&dword_1C2F90000, v6, v7, "Marked video message as read %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_46_3();
    v14(v13);
  }

  swift_task_dealloc();
  unint64_t v15 = v0[8];
  uint64_t v16 = v0[7];
  uint64_t v17 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_54_1(v17);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v16);
  uint64_t v18 = static MainActor.shared.getter();
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = MEMORY[0x1E4FBCFD8];
  v19[2] = v18;
  v19[3] = v20;
  v19[4] = v16;
  void v19[5] = v15;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v21();
}

uint64_t closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_22_2();
  a19 = v21;
  a20 = v22;
  OUTLINED_FUNCTION_55();
  a18 = v20;
  swift_bridgeObjectRelease();
  swift_release();
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)v20[17];
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.videoMessaging);
  id v25 = v23;
  id v26 = v23;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  id v30 = (void *)v20[17];
  if (v29)
  {
    OUTLINED_FUNCTION_43_3();
    a9 = swift_slowAlloc();
    OUTLINED_FUNCTION_42_5(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v31 = String.init<A>(reflecting:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &a9);
    OUTLINED_FUNCTION_40_5(v33);
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v34, v35, "Marking video message as read failed: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v36 = v20[8];
  uint64_t v37 = v20[7];
  uint64_t v38 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_54_1(v38);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v37);
  uint64_t v39 = static MainActor.shared.getter();
  uint64_t v40 = (void *)swift_allocObject();
  uint64_t v41 = MEMORY[0x1E4FBCFD8];
  v40[2] = v39;
  v40[3] = v41;
  v40[4] = v37;
  v40[5] = v36;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_24_5();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12);
}

uint64_t closure #1 in closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v5[3] = a4;
  v5[4] = a5;
  _OWORD v5[2] = a1;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:), v7, v6);
}

uint64_t closure #1 in closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = swift_release();
  if (v1) {
    (*(void (**)(uint64_t))(v0 + 24))(v2);
  }
  **(unsigned char **)(v0 + 16) = v1 == 0;
  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t RecentsCallItem.init(_:type:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = dispatch thunk of Message.from.getter();
  uint64_t v8 = v7;
  uint64_t v9 = self;
  uint64_t v10 = (void *)MEMORY[0x1C87730B0](v6, v8);
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v9, sel_normalizedHandleWithDestinationID_, v10);

  int v25 = a2;
  if (!v11) {
    goto LABEL_7;
  }
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  swift_retain();
  ParticipantContactDetails.init(from:cache:)(v11, v26);
  uint64_t v12 = v27;
  if (v27)
  {
    uint64_t v14 = (void *)v26[0];
    uint64_t v13 = v26[1];
    if (v26[0])
    {
      swift_bridgeObjectRetain();
      id v15 = v14;
      uint64_t v16 = v12;
      uint64_t v17 = v13;
      goto LABEL_9;
    }
    swift_bridgeObjectRetain();
    uint64_t v16 = v12;
    uint64_t v17 = v13;
  }
  else
  {
LABEL_7:
    uint64_t v13 = dispatch thunk of Message.from.getter();
    uint64_t v16 = v18;
    uint64_t v17 = 0;
    uint64_t v12 = 0;
  }
  type metadata accessor for TUHandle();
  dispatch thunk of Message.from.getter();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  id v22 = TUHandle.__allocating_init(type:value:)(v19, v20, v21);
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v22);

  uint64_t v14 = 0;
LABEL_9:
  RecentsCallItem.init(message:title:contact:messageType:)(a1, v13, v16, v15, v25, a3);
  outlined consume of ParticipantContactDetails?(v14, v17, v12);
  uint64_t v23 = type metadata accessor for RecentsCallItem(0);
  return __swift_storeEnumTagSinglePayload(a3, 0, 1, v23);
}

id TUHandle.__allocating_init(type:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](a2, a3);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithType_value_, a1, v7);

  return v8;
}

uint64_t VideoMessageInboxController.deinit()
{
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 24));
  swift_release();
  return v0;
}

uint64_t VideoMessageInboxController.__deallocating_deinit()
{
  VideoMessageInboxController.deinit();
  OUTLINED_FUNCTION_30_8();
  return swift_deallocClassInstance();
}

uint64_t VideoMessageInboxController.__allocating_init()()
{
  OUTLINED_FUNCTION_30_8();
  uint64_t v0 = swift_allocObject();
  VideoMessageInboxController.init()();
  return v0;
}

uint64_t @objc VideoMessageInboxController.messageStoreDidAddMessages(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t))
{
  a4(0);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = swift_retain();
  a5(v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

double ParticipantContactDetails.init(fromDestinationID:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = self;
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](a1, a2);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_normalizedHandleWithDestinationID_, v7);

  if (!v8) {
    goto LABEL_6;
  }
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  swift_retain();
  ParticipantContactDetails.init(from:cache:)(v8, &v13);
  uint64_t v9 = v14;
  if (v14)
  {
    double result = *(double *)&v13;
    long long v11 = v15;
    long long v12 = v16;
    *(_OWORD *)a3 = v13;
    *(void *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 24) = v11;
    *(_OWORD *)(a3 + 40) = v12;
  }
  else
  {
LABEL_6:
    *(void *)(a3 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t ParticipantContactDetails.init(from:cache:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_value);
  if (!v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = (id)MEMORY[0x1C87730B0](v5);
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v6 = objc_msgSend(v4, sel_destinationIdIsTemporary);

  if (v6)
  {

    uint64_t result = swift_release();
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    OUTLINED_FUNCTION_5_8();
    ParticipantContactDetailsCache.contactDetails(for:nickname:)();
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    id v13 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static ParticipantContactDetails.initialsFor(_:)(v14);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v10 = StringProtocol.localizedUppercase.getter();
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v14;
    a2[1] = v15;
    a2[2] = v16;
  }
  a2[3] = v8;
  a2[4] = v9;
  a2[5] = v10;
  a2[6] = v11;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 32);
  uint64_t v9 = v8;
  unint64_t v10 = v5
      + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * a1;
  return v7(v10, a2, v9);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C307778C()
{
  uint64_t v1 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v6 = (*(void *)(v5 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v6)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v8;
  id v13 = (void *)((char *)v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)OUTLINED_FUNCTION_10(v16);
  *uint64_t v17 = v18;
  v17[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)(a1, v9, v10, v11, v12, v14, v15);
}

unint64_t type metadata accessor for TUHandle()
{
  unint64_t result = lazy cache variable for type metadata for TUHandle;
  if (!lazy cache variable for type metadata for TUHandle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  }
  return result;
}

void outlined consume of ParticipantContactDetails?(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C3077A50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t method lookup function for VideoMessageInboxController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VideoMessageInboxController);
}

uint64_t dispatch thunk of VideoMessageInboxController.callItems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of VideoMessageInboxController.callItems.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of VideoMessageInboxController.callItems.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of VideoMessageInboxController.messageDeletionHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of VideoMessageInboxController.messageDeletionHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of VideoMessageInboxController.messageDeletionHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of VideoMessageInboxController.resume()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of VideoMessageInboxController.deleteVideoMessageCallItems(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of VideoMessageInboxController.markCallItemAsRead(_:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of VideoMessageInboxController.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_44_1();
  if (v3)
  {
    OUTLINED_FUNCTION_4_23();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_9_24();
      if (v5)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_3_3();
    }
  }
  else
  {
    uint64_t v4 = v2;
  }
  uint64_t v7 = *(void *)(v0 + 16);
  if (v4 <= v7) {
    uint64_t v8 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v14 = (const void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MostActiveParticipantsController<UUID>.ActivityDetails>);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails);
  OUTLINED_FUNCTION_1(v9);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (const void *)swift_allocObject();
  size_t v15 = _swift_stdlib_malloc_size(v14);
  if (!v11 || (v15 - v13 == 0x8000000000000000 ? (BOOL v16 = v11 == -1) : (BOOL v16 = 0), v16))
  {
LABEL_23:
    OUTLINED_FUNCTION_1_7();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_51_1((uint64_t)(v15 - v13) / v11);
LABEL_18:
  uint64_t v17 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails)
                  - 8);
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v7);
    OUTLINED_FUNCTION_8_25();
  }
  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_18_19();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v18, v19, v20, v21);
  }
  return (uint64_t)v14;
}

{
  return MEMORY[0x1F4184D88]();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<VideoReaction>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<InCallControlsCollectionViewController.CollectionViewSection>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_4_23();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_9_24();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_3();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v14 = (char *)OUTLINED_FUNCTION_15_2();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    uint64_t v14 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v16 = v14 + 32;
  if (a1)
  {
    a6(a4 + 32, v12, v16);
    OUTLINED_FUNCTION_8_25();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v16, a4);
  }
}

{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;

  if (a3)
  {
    OUTLINED_FUNCTION_4_23();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_9_24();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_3();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v14 = (char *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * v15 - 64;
  }
  else
  {
    uint64_t v14 = (char *)MEMORY[0x1E4FBC860];
  }
  BOOL v16 = v14 + 32;
  if (a1)
  {
    a6(a4 + 32, v12, v16);
    OUTLINED_FUNCTION_8_25();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v16, a4);
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MostActiveParticipantsController<UUID>.ActivityDetails)
                   - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    char v10 = *(void *)(v8 + 72);
    char v11 = v9 + v10 * a1;
    uint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    unint64_t v6 = &__dst[32 * v4];
    if (v5 >= v6 || &v5[32 * v4] <= __dst)
    {
      memcpy(__dst, v5, 32 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    unint64_t v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_15_16();
    goto LABEL_11;
  }
  unint64_t v5 = (char *)(a4 + a1 + 32);
  unint64_t v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_16_3();
LABEL_11:
  uint64_t result = (char *)OUTLINED_FUNCTION_33_4();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_15_16();
    goto LABEL_11;
  }
  unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v6 = &__dst[8 * v4];
  if (v5 >= v6 || &v5[8 * v4] <= __dst)
  {
    memcpy(__dst, v5, 8 * v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_16_3();
LABEL_11:
  uint64_t result = (char *)OUTLINED_FUNCTION_33_4();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 72 * a1 + 32);
    unint64_t v6 = 9 * v4;
    uint64_t v7 = &__dst[8 * v6];
    if (v5 >= v7 || &v5[8 * v6] <= __dst)
    {
      memcpy(__dst, v5, 8 * v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1C3079F6C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MessageType, [Message]>);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    __int16 v21 = *(_WORD *)(*(void *)(v5 + 48) + 2 * i);
    uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v35 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Swift::UInt16 v23 = MessageType.rawValue.getter();
    Hasher._combine(_:)(v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    *(_WORD *)(*(void *)(v7 + 48) + 2 * v27) = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v22;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_41;
    }
    if (v17 >= v11)
    {
      swift_release();
      char v3 = v33;
      uint64_t v18 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    uint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v11) {
        goto LABEL_32;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v14);
      if (!v19) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v19 - 1) & v19;
  }
  int64_t v20 = v17 + 2;
  if (v20 < v11)
  {
    unint64_t v19 = *(void *)(v34 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v14 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_42;
        }
        if (v14 >= v11) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_18;
        }
      }
    }
    int64_t v14 = v20;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  char v3 = v33;
LABEL_34:
  if (v35)
  {
    uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
    if (v32 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v32 + 63) >> 6, v18);
    }
    else {
      void *v18 = -1 << v32;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type MessageFetchOptions and conformance MessageFetchOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type MessageFetchOptions and conformance MessageFetchOptions;
  if (!lazy protocol witness table cache variable for type MessageFetchOptions and conformance MessageFetchOptions)
  {
    type metadata accessor for MessageFetchOptions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageFetchOptions and conformance MessageFetchOptions);
  }
  return result;
}

uint64_t sub_1C307A2DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [UUID]) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1C307A340()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  OUTLINED_FUNCTION_30_8();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_34_4();
  return closure #1 in closure #1 in VideoMessageInboxController.markCallItemAsRead(_:completion:)(v3, v4, v5, v6, v7);
}

uint64_t sub_1C307A464()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C307A4A4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_30_8();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in VideoMessageInboxController.messageDeletionHandler.getter()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_34_4();
  return closure #1 in closure #1 in VideoMessageInboxController.messageDeletionHandler.getter(v3, v4, v5, v6, v7);
}

uint64_t OUTLINED_FUNCTION_41_6()
{
  return swift_beginAccess();
}

id ConversationHUDControlsStatusView.__allocating_init(recipe:controlsManager:menuHostViewController:context:presentationStyle:)(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, char a6)
{
  char v12 = a6 & 1;
  id v13 = objc_allocWithZone(v6);
  return ConversationHUDControlsStatusView.init(recipe:controlsManager:menuHostViewController:context:presentationStyle:)(a1, a2, a3, a4, a5, v12);
}

BOOL static StatusViewPresentationStyle.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void StatusViewPresentationStyle.hash(into:)(uint64_t a1, char a2)
{
}

void *static StatusViewPresentationStyle.allCases.getter()
{
  return &outlined read-only object #0 of static StatusViewPresentationStyle.allCases.getter;
}

Swift::Int StatusViewPresentationStyle.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StatusViewPresentationStyle()
{
  return StatusViewPresentationStyle.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance StatusViewPresentationStyle(uint64_t a1)
{
  StatusViewPresentationStyle.hash(into:)(a1, *v1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance StatusViewPresentationStyle(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static StatusViewPresentationStyle.allCases.getter;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StatusViewPresentationStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static StatusViewPresentationStyle.== infix(_:_:)(*a1, *a2);
}

uint64_t key path getter for ConversationHUDControlsStatusView.recipe : ConversationHUDControlsStatusView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
}

uint64_t key path setter for ConversationHUDControlsStatusView.recipe : ConversationHUDControlsStatusView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0))(v6);
}

void ConversationHUDControlsStatusView.recipe.didset(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v52 - v7;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationControls);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v8);
  unint64_t v10 = v1;
  int64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  id v13 = &unk_1EBBAE000;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v53 = v3;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t aBlock = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v17 = ConversationControlsRecipe.debugDescription.getter();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ConversationControlsRecipe((uint64_t)v8);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v19 = (uint64_t)&v10[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_recipe];
    swift_beginAccess();
    outlined init with copy of ConversationControlsRecipe(v19, (uint64_t)v6);
    uint64_t v20 = ConversationControlsRecipe.debugDescription.getter();
    unint64_t v22 = v21;
    outlined destroy of ConversationControlsRecipe((uint64_t)v6);
    uint64_t v23 = v20;
    id v13 = (void *)&unk_1EBBAE000;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v11, v12, "oldRecipe:%s\nnewRecipe:%s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v16, -1, -1);
    uint64_t v24 = v15;
    uint64_t v3 = v53;
    MEMORY[0x1C87760E0](v24, -1, -1);
  }
  else
  {
    outlined destroy of ConversationControlsRecipe((uint64_t)v8);
  }
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 72);
  unint64_t v27 = &v10[v13[388]];
  swift_beginAccess();
  uint64_t v28 = *((void *)v27 + 7);
  BOOL v29 = v28 == 0;
  if (v28)
  {
    uint64_t v30 = *((void *)v27 + 9);
    if (!v25) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v30 = 0;
    if (!v25) {
      goto LABEL_14;
    }
  }
  if (v28) {
    BOOL v31 = v26 == v30;
  }
  else {
    BOOL v31 = 0;
  }
  BOOL v29 = v31;
LABEL_14:
  uint64_t v32 = *(int *)(v3 + 40);
  uint64_t v33 = a1 + v32;
  uint64_t v34 = *(void *)(a1 + v32);
  char v35 = &v27[v32];
  uint64_t v36 = *(void *)v35;
  BOOL v37 = *(void *)v35 == 0;
  if (*(void *)v35) {
    uint64_t v38 = *((void *)v35 + 2);
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = *(void *)(v33 + 16);
  swift_endAccess();
  if (v34)
  {
    if (v36) {
      BOOL v40 = v39 == v38;
    }
    else {
      BOOL v40 = 0;
    }
    BOOL v37 = v40;
  }
  uint64_t v41 = self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  BOOL v42 = !v37;
  BOOL v43 = !v29;
  double v44 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
  uint64_t v45 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6);
  unint64_t v46 = (*(unsigned __int8 *)(v54 + 80) + 26) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v45;
  *(unsigned char *)(v47 + 24) = v43;
  *(unsigned char *)(v47 + 25) = v42;
  outlined init with take of ConversationControlsRecipe((uint64_t)v6, v47 + v46);
  int v62 = partial apply for closure #1 in ConversationHUDControlsStatusView.recipe.didset;
  uint64_t v63 = v47;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v59 = 1107296256;
  int v60 = thunk for @escaping @callee_guaranteed () -> ();
  id v61 = &block_descriptor_16;
  uint64_t v48 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v49 = swift_allocObject();
  *(unsigned char *)(v49 + 16) = v43;
  *(void *)(v49 + 24) = v10;
  *(unsigned char *)(v49 + 32) = v42;
  int v62 = partial apply for closure #2 in ConversationHUDControlsStatusView.recipe.didset;
  uint64_t v63 = v49;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v59 = 1107296256;
  int v60 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  id v61 = &block_descriptor_24;
  uint64_t v50 = _Block_copy(&aBlock);
  uint64_t v51 = v10;
  swift_release();
  objc_msgSend(v41, sel_animateWithDuration_animations_completion_, v48, v50, v44);
  _Block_release(v50);
  _Block_release(v48);
}

void closure #1 in ConversationHUDControlsStatusView.recipe.didset(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  int64_t v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v68 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (id *)((char *)&v68 - v15);
  swift_beginAccess();
  uint64_t v17 = (void *)MEMORY[0x1C8776240](a1 + 16);
  if (!v17) {
    return;
  }
  unint64_t v18 = v17;
  uint64_t v19 = (void *)MEMORY[0x1E4FBC8C8];
  if (a2)
  {
    uint64_t v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x110))();
    if (v20)
    {
      unint64_t v21 = v20;
      objc_msgSend(v20, sel_setAlpha_, 0.0);
    }
  }
  int v68 = v11;
  uint64_t v69 = v8;
  if (a3)
  {
    unint64_t v22 = (void *)(*(uint64_t (**)(void))((*v19 & *v18) + 0xF8))();
    uint64_t v23 = (void *)(*(uint64_t (**)(void))((*v19 & *v22) + 0x158))();

    if (v23)
    {
      objc_msgSend(v23, sel_setAlpha_, 0.0);
    }
  }
  id v24 = objc_msgSend(*(id *)(a4 + 80), sel_string, v68, v69);
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v70 = *(void (**)(void))((*v19 & *v18) + 0x98);
  v70();
  id v28 = v16[10];
  outlined destroy of ConversationControlsRecipe((uint64_t)v16);
  id v29 = objc_msgSend(v28, sel_string);

  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  if (v25 == v30 && v27 == v32)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      uint64_t v36 = (void *)MEMORY[0x1E4FBC8C8];
      BOOL v37 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v18) + 0xF8))(v35);
      uint64_t v38 = (void *)(*(uint64_t (**)(void))((*v36 & *v37) + 0x110))();

      objc_msgSend(v38, sel_setAlpha_, 0.0);
    }
  }
  unint64_t v39 = *(void *)(a4 + 88);
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v42 = (uint64_t)v68;
  uint64_t v41 = v69;
  if (v40)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v39 & 0xC000000000000001) == 0, v39);
    if ((v39 & 0xC000000000000001) != 0) {
      id v43 = (id)MEMORY[0x1C87744F0](0, v39);
    }
    else {
      id v43 = *(id *)(v39 + 32);
    }
    double v44 = v43;
    swift_bridgeObjectRelease();
    id v45 = objc_msgSend(v44, sel_string);

    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v47;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = 0;
  }
  v70();
  unint64_t v48 = *((void *)v14 + 11);
  swift_bridgeObjectRetain();
  outlined destroy of ConversationControlsRecipe((uint64_t)v14);
  if (!(v48 >> 62))
  {
    if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_24;
    }
LABEL_39:
    uint64_t v55 = swift_bridgeObjectRelease();
    if (!v40) {
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_39;
  }
LABEL_24:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v48 & 0xC000000000000001) == 0, v48);
  if ((v48 & 0xC000000000000001) != 0) {
    id v49 = (id)MEMORY[0x1C87744F0](0, v48);
  }
  else {
    id v49 = *(id *)(v48 + 32);
  }
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  id v51 = objc_msgSend(v50, sel_string);

  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v54 = v53;

  if (!v40)
  {
    if (!v54) {
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  if (!v54)
  {
LABEL_40:
    uint64_t v55 = swift_bridgeObjectRelease();
LABEL_41:
    uint64_t v59 = (void *)MEMORY[0x1E4FBC8C8];
    int v60 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v18) + 0xF8))(v55);
    id v61 = (void *)(*(uint64_t (**)(void))((*v59 & *v60) + 0xE0))();

    objc_msgSend(v61, sel_setAlpha_, 0.0);
    goto LABEL_42;
  }
  if (v46 != v52 || v40 != v54)
  {
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v55 = swift_bridgeObjectRelease();
    if (v57) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  uint64_t v55 = swift_bridgeObjectRelease();
LABEL_42:
  int v62 = *(unsigned __int8 *)(a4 + *(int *)(v41 + 48));
  ((void (*)(uint64_t))v70)(v55);
  int v63 = *(unsigned __int8 *)(v42 + *(int *)(v41 + 48));
  uint64_t v64 = outlined destroy of ConversationControlsRecipe(v42);
  if (v62 != v63)
  {
    uint64_t v65 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v66 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v18) + 0xF8))(v64);
    uint64_t v67 = (void *)(*(uint64_t (**)(void))((*v65 & *v66) + 0x140))();

    objc_msgSend(v67, sel_setAlpha_, 0.0);
  }
}

void closure #2 in ConversationHUDControlsStatusView.recipe.didset(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (a2)
  {
    ConversationHUDControlsStatusView.updateLeadingAccessoryView()();
    uint64_t v7 = (void *)(*(uint64_t (**)(void))((*v6 & *a3) + 0x110))();
    if (v7)
    {
      uint64_t v8 = v7;
      objc_msgSend(v7, sel_setAlpha_, 0.0);
    }
  }
  if (a4)
  {
    uint64_t v9 = *(uint64_t (**)(void))((*v6 & *a3) + 0xF8);
    uint64_t v10 = (void *)v9();
    (*(void (**)(void))((*v6 & *v10) + 0x1D8))();

    int64_t v11 = (void *)v9();
    uint64_t v12 = (void *)(*(uint64_t (**)(void))((*v6 & *v11) + 0x158))();

    if (v12)
    {
      objc_msgSend(v12, sel_setAlpha_, 0.0);
    }
  }
  uint64_t v13 = self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  double v14 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17[4] = partial apply for closure #1 in closure #2 in ConversationHUDControlsStatusView.recipe.didset;
  v17[5] = v15;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1107296256;
  void v17[2] = thunk for @escaping @callee_guaranteed () -> ();
  v17[3] = &block_descriptor_28_1;
  uint64_t v16 = _Block_copy(v17);
  swift_release();
  objc_msgSend(v13, sel_animateWithDuration_animations_, v16, v14);
  _Block_release(v16);
}

void ConversationHUDControlsStatusView.updateLeadingAccessoryView()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (void *)(*(uint64_t (**)(void))((*v1 & *v0) + 0xC8))();
    objc_msgSend(v4, sel_removeArrangedSubview_, v3);

    objc_msgSend(v3, sel_removeFromSuperview);
  }
  id v5 = objc_msgSend(v0, sel_traitCollection);
  id v6 = objc_msgSend(v5, sel_preferredContentSizeCategory);

  LOBYTE(v5) = UIContentSizeCategory.isAccessibilityCategory.getter();
  if (v5)
  {
    uint64_t v7 = *(void (**)(void))((*v1 & *v0) + 0x118);
    v7(0);
  }
  else
  {
    id v8 = ConversationHUDControlsStatusView.createLeadingAccessoryView()();
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(uint64_t (**)(id))((*v1 & *v0) + 0x118);
      id v11 = v8;
      uint64_t v12 = v10(v9);
      id v13 = (id)(*(uint64_t (**)(uint64_t))((*v1 & *v0) + 0xC8))(v12);
      objc_msgSend(v13, sel_insertArrangedSubview_atIndex_, v11, 0);
    }
  }
}

void closure #1 in closure #2 in ConversationHUDControlsStatusView.recipe.didset(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v5 = (void *)MEMORY[0x1C8776240](a1 + 16);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
    id v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x110))();
    if (v8)
    {
      id v9 = v8;
      objc_msgSend(v8, sel_setAlpha_, 1.0);
    }
    uint64_t v10 = *(uint64_t (**)(void))((*v7 & *v6) + 0xF8);
    id v11 = (void *)v10();
    (*(void (**)(void))((*v7 & *v6) + 0x98))();
    (*(void (**)(char *))((*v7 & *v11) + 0xB0))(v4);

    uint64_t v12 = (void *)v10();
    id v13 = (void *)(*(uint64_t (**)(void))((*v7 & *v12) + 0x158))();

    if (v13)
    {
      objc_msgSend(v13, sel_setAlpha_, 1.0);
    }
    double v14 = (void *)v10();
    uint64_t v15 = (void *)(*(uint64_t (**)(void))((*v7 & *v14) + 0x110))();

    objc_msgSend(v15, sel_setAlpha_, 1.0);
  }
}

uint64_t ConversationHUDControlsStatusView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_recipe;
  OUTLINED_FUNCTION_2();
  return outlined init with copy of ConversationControlsRecipe(v3, a1);
}

uint64_t ConversationHUDControlsStatusView.recipe.setter(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v6 = v1 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_recipe;
  OUTLINED_FUNCTION_2();
  outlined init with copy of ConversationControlsRecipe(v6, v2);
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v6);
  swift_endAccess();
  ConversationHUDControlsStatusView.recipe.didset(v2);
  outlined destroy of ConversationControlsRecipe(a1);
  return outlined destroy of ConversationControlsRecipe(v2);
}

void (*ConversationHUDControlsStatusView.recipe.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  _OWORD v3[3] = v1;
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_8(v4);
  size_t v6 = *(void *)(v5 + 64);
  void v3[4] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[5] = v7;
  uint64_t v8 = v1 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_recipe;
  OUTLINED_FUNCTION_2();
  outlined init with copy of ConversationControlsRecipe(v8, (uint64_t)v7);
  return ConversationHUDControlsStatusView.recipe.modify;
}

void ConversationHUDControlsStatusView.recipe.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of ConversationControlsRecipe((uint64_t)v4, (uint64_t)v3);
    ConversationHUDControlsStatusView.recipe.setter((uint64_t)v3);
    outlined destroy of ConversationControlsRecipe((uint64_t)v4);
  }
  else
  {
    ConversationHUDControlsStatusView.recipe.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v2);
}

id ConversationHUDControlsStatusView.controlsManager.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_controlsManager);
}

uint64_t ConversationHUDControlsStatusView.context.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_context);
}

uint64_t key path getter for ConversationHUDControlsStatusView.conversationStatusHStack : ConversationHUDControlsStatusView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDControlsStatusView.conversationStatusHStack : ConversationHUDControlsStatusView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

id ConversationHUDControlsStatusView.conversationStatusHStack.getter()
{
  return ConversationHUDControlsStatusView.conversationStatusHStack.getter(&OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___conversationStatusHStack, (uint64_t (*)(uint64_t))closure #1 in ConversationHUDControlsStatusView.conversationStatusHStack.getter);
}

id closure #1 in ConversationHUDControlsStatusView.conversationStatusHStack.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_traitCollection);
  id v3 = objc_msgSend(v2, sel_preferredContentSizeCategory);

  char v4 = UIContentSizeCategory.isAccessibilityCategory.getter();
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  objc_msgSend(v5, sel_setAxis_, v4 & 1);
  if (v4) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = 3;
  }
  objc_msgSend(v5, sel_setAlignment_, v6);
  static Layout.ConversationControls.values.getter((uint64_t)v13);
  id v7 = objc_msgSend(v5, sel_setSpacing_, v13[15]);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  if ((v4 & 1) == 0)
  {
    id v7 = (id)(*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x110))(v7);
    if (v7)
    {
      id v9 = v7;
      objc_msgSend(v5, sel_addArrangedSubview_, v7);
    }
  }
  uint64_t v10 = (void *)(*(uint64_t (**)(id))((*v8 & *a1) + 0xF8))(v7);
  objc_msgSend(v5, sel_addArrangedSubview_, v10);

  id v11 = v5;
  if (((*(uint64_t (**)(void))((*v8 & *a1) + 0x130))() & 1) == 0)
  {
    id v11 = (void *)(*(uint64_t (**)(void))((*v8 & *a1) + 0xE0))();
    objc_msgSend(v5, sel_addArrangedSubview_, v11);
  }
  return v5;
}

void ConversationHUDControlsStatusView.conversationStatusHStack.setter(uint64_t a1)
{
}

void (*ConversationHUDControlsStatusView.conversationStatusHStack.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = ConversationHUDControlsStatusView.conversationStatusHStack.getter();
  return ConversationHUDControlsStatusView.conversationStatusHStack.modify;
}

void ConversationHUDControlsStatusView.conversationStatusHStack.modify(void **a1, char a2)
{
}

uint64_t key path getter for ConversationHUDControlsStatusView.trailingActionsView : ConversationHUDControlsStatusView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDControlsStatusView.trailingActionsView : ConversationHUDControlsStatusView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8))(*a1);
}

id ConversationHUDControlsStatusView.trailingActionsView.getter()
{
  id v2 = v0;
  uint64_t v3 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___trailingActionsView;
  uint64_t v6 = *(void **)((char *)v0
                + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___trailingActionsView);
  if (v6)
  {
    id v7 = *(id *)((char *)v0
               + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___trailingActionsView);
  }
  else
  {
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
    uint64_t v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_controlsManager);
    id v9 = (char *)v0 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_menuHostViewController;
    uint64_t v10 = (void *)MEMORY[0x1C8776240]((char *)v2+ OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_menuHostViewController);
    uint64_t v11 = *((void *)v9 + 1);
    char v12 = *((unsigned char *)v2 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_context);
    objc_allocWithZone((Class)type metadata accessor for ConversationControlsTrailingActionsView());
    id v13 = ConversationControlsTrailingActionsView.init(recipe:controlsManager:menuHostViewController:context:)(v1, v8, v10, v11, v12);
    objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    double v14 = *(void **)((char *)v2 + v5);
    *(void *)((char *)v2 + v5) = v13;
    id v7 = v13;

    uint64_t v6 = 0;
  }
  id v15 = v6;
  return v7;
}

void ConversationHUDControlsStatusView.trailingActionsView.setter(uint64_t a1)
{
}

void (*ConversationHUDControlsStatusView.trailingActionsView.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = ConversationHUDControlsStatusView.trailingActionsView.getter();
  return ConversationHUDControlsStatusView.trailingActionsView.modify;
}

void ConversationHUDControlsStatusView.trailingActionsView.modify(void **a1, char a2)
{
}

id ConversationHUDControlsStatusView.conversationDetailsView.getter()
{
  return ConversationHUDControlsStatusView.conversationStatusHStack.getter(&OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___conversationDetailsView, (uint64_t (*)(uint64_t))closure #1 in ConversationHUDControlsStatusView.conversationDetailsView.getter);
}

id ConversationHUDControlsStatusView.conversationStatusHStack.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void ConversationHUDControlsStatusView.conversationDetailsView.setter(uint64_t a1)
{
}

uint64_t key path getter for ConversationHUDControlsStatusView.conversationDetailsView : ConversationHUDControlsStatusView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDControlsStatusView.conversationDetailsView : ConversationHUDControlsStatusView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100))(*a1);
}

id closure #1 in ConversationHUDControlsStatusView.conversationDetailsView.getter(void *a1)
{
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  id v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x98))(v3);
  char v6 = *((unsigned char *)a1 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_presentationStyle);
  id v7 = *(void **)((char *)a1 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_controlsManager);
  id v8 = objc_allocWithZone((Class)type metadata accessor for ConversationDetailsView());
  id v9 = ConversationDetailsView.init(recipe:presentationStyle:controlsManager:)((uint64_t)v5, v6, v7);
  objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v9;
}

void (*ConversationHUDControlsStatusView.conversationDetailsView.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = ConversationHUDControlsStatusView.conversationDetailsView.getter();
  return ConversationHUDControlsStatusView.conversationDetailsView.modify;
}

void ConversationHUDControlsStatusView.conversationDetailsView.modify(void **a1, char a2)
{
}

void ConversationHUDControlsStatusView.conversationStatusHStack.modify(void **a1, char a2, void (*a3)(void))
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

uint64_t key path getter for ConversationHUDControlsStatusView.leadingAccessoryView : ConversationHUDControlsStatusView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationHUDControlsStatusView.leadingAccessoryView : ConversationHUDControlsStatusView(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x118);
  id v4 = *a1;
  return v3(v2);
}

void *ConversationHUDControlsStatusView.leadingAccessoryView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_leadingAccessoryView);
  OUTLINED_FUNCTION_2();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void ConversationHUDControlsStatusView.leadingAccessoryView.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_leadingAccessoryView);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*ConversationHUDControlsStatusView.leadingAccessoryView.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

double ConversationHUDControlsStatusView.conversationStatusHStackLeadingPadding.getter()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();

  double result = 0.0;
  if (!v1)
  {
    static Layout.ConversationControls.values.getter((uint64_t)v3);
    return v4;
  }
  return result;
}

uint64_t ConversationHUDControlsStatusView.needsExplicitLayoutForInfoButton.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  id v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
  LOBYTE(v1) = (*(uint64_t (**)(void))((*v1 & *v2) + 0xD0))();

  return v1 & 1;
}

id ConversationHUDControlsStatusView.init(recipe:controlsManager:menuHostViewController:context:presentationStyle:)(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, char a6)
{
  char v12 = a6 & 1;
  id v13 = &v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_menuHostViewController];
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_menuHostViewController + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___conversationStatusHStack] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___trailingActionsView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___conversationDetailsView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_leadingAccessoryView] = 0;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_recipe]);
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_controlsManager] = a2;
  v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_context] = a5;
  *((void *)v13 + 1) = a4;
  swift_unknownObjectWeakAssign();
  v6[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_presentationStyle] = v12;
  v17.receiver = v6;
  v17.super_class = (Class)type metadata accessor for ConversationHUDControlsStatusView();
  id v14 = a2;
  id v15 = objc_msgSendSuper2(&v17, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v15, sel_setupRootView, v17.receiver, v17.super_class);

  outlined destroy of ConversationControlsRecipe(a1);
  return v15;
}

id ConversationHUDControlsStatusView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationHUDControlsStatusView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_menuHostViewController + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___conversationStatusHStack] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___trailingActionsView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView____lazy_storage___conversationDetailsView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_leadingAccessoryView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ConversationHUDControlsStatusView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v20.receiver = v1;
  v20.super_class = (Class)type metadata accessor for ConversationHUDControlsStatusView();
  objc_msgSendSuper2(&v20, sel_traitCollectionDidChange_, isa);
  if (isa)
  {
    id v3 = isa;
    id v4 = objc_msgSend(v1, sel_traitCollection);
    id v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

    id v6 = [(objc_class *)v3 preferredContentSizeCategory];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        id v13 = objc_msgSend(v1, sel_traitCollection);
        id v14 = objc_msgSend(v13, sel_preferredContentSizeCategory);

        LOBYTE(v13) = UIContentSizeCategory.isAccessibilityCategory.getter();
        id v15 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC8);
        uint64_t v16 = (void *)v15();
        objc_msgSend(v16, sel_setAxis_, v13 & 1);

        objc_super v17 = (void *)v15();
        unint64_t v18 = v17;
        if (v13) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = 3;
        }
        objc_msgSend(v17, sel_setAlignment_, v19);

        ConversationHUDControlsStatusView.updateLeadingAccessoryView()();
      }
    }
  }
}

id ConversationHUDControlsStatusView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ConversationHUDControlsStatusView.init(frame:)()
{
}

id ConversationHUDControlsStatusView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationHUDControlsStatusView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void ConversationHUDControlsStatusView.setupRootView()()
{
  uint64_t v1 = v0;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1AC8]), sel_initWithDelegate_, v0);
  objc_msgSend(v0, sel_addInteraction_);
  id v2 = ConversationHUDControlsStatusView.createLeadingAccessoryView()();
  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))(v2);
  id v5 = (void *)(*(uint64_t (**)(uint64_t))((*v3 & *v0) + 0xC8))(v4);
  objc_msgSend(v1, sel_addSubview_, v5);

  if ((*(uint64_t (**)(void))((*v3 & *v1) + 0x130))())
  {
    id v6 = (void *)(*(uint64_t (**)(void))((*v3 & *v1) + 0xE0))();
    objc_msgSend(v1, sel_addSubview_, v6);
  }
  uint64_t v7 = (void *)(*(uint64_t (**)(void))((*v3 & *v1) + 0xF8))();
  (*(void (**)(void))((*v3 & *v7) + 0x1D8))();

  ConversationHUDControlsStatusView.setupLayoutConstraints()();
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_presentationStyle) == 1)
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(void))((*v3 & *v1) + 0xE0))();
    objc_msgSend(v8, sel_setHidden_, 1);
  }
}

id ConversationHUDControlsStatusView.createLeadingAccessoryView()()
{
  uint64_t v1 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  id v5 = (char *)v37 - v4;
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (id *)((char *)v37 - v7);
  id v9 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98);
  uint64_t v10 = (*MEMORY[0x1E4FBC8C8] & *v0) + 152;
  ((void (*)(uint64_t))v9)(v6);
  if (v8[7])
  {
    id v11 = v8[7];
    outlined destroy of ConversationControlsRecipe((uint64_t)v8);
    char v12 = *((unsigned char *)v0 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_presentationStyle);
    v37[1] = v10;
    uint64_t v38 = v9;
    if (v12)
    {
      double v13 = static Layout.ConversationControls.values.getter((uint64_t)v44);
      id v14 = (double *)&v46;
    }
    else
    {
      double v13 = static Layout.ConversationControls.values.getter((uint64_t)v44);
      id v14 = (double *)&v45;
    }
    double v25 = *v14;
    objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0, v13);
    uint64_t v26 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1C3769610;
    id v28 = objc_msgSend(v11, sel_heightAnchor);
    id v29 = objc_msgSend(v28, sel_constraintEqualToConstant_, v25);

    *(void *)(v27 + 32) = v29;
    id v30 = objc_msgSend(v11, sel_widthAnchor);
    id v31 = objc_msgSend(v30, sel_constraintEqualToConstant_, v25);

    *(void *)(v27 + 40) = v31;
    v43[0] = v27;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_activateConstraints_, isa);

    v38();
    outlined init with copy of ConversationControlsType((uint64_t)v5, (uint64_t)v43);
    outlined destroy of ConversationControlsRecipe((uint64_t)v5);
    outlined init with copy of ConversationControlsType((uint64_t)v43, (uint64_t)&v39);
    if (v42 == 6
      && v39 == 13
      && (int8x16_t v33 = vorrq_s8(v40, v41),
          !*(void *)&vorr_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))))
    {
      outlined destroy of ConversationControlsType((uint64_t)v43);
      id v34 = objc_msgSend(v11, sel_layer);
      objc_msgSend(v34, sel_setCornerRadius_, v25 * 0.5);

      id v35 = objc_msgSend(v11, sel_layer);
      objc_msgSend(v35, sel_setMasksToBounds_, 1);
    }
    else
    {
      outlined destroy of ConversationControlsType((uint64_t)&v39);
      outlined destroy of ConversationControlsType((uint64_t)v43);
    }
  }
  else
  {
    outlined destroy of ConversationControlsRecipe((uint64_t)v8);
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationControls);
    uint64_t v16 = v0;
    objc_super v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      unint64_t v21 = v9;
      uint64_t v22 = v20;
      v44[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      v37[0] = v19 + 4;
      ((void (*)(uint64_t))v21)(v20);
      uint64_t v23 = String.init<A>(describing:)();
      v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v17, v18, "Unable to obtain leadingAccessoryView for recipe: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v22, -1, -1);
      MEMORY[0x1C87760E0](v19, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return v11;
}

Swift::Void __swiftcall ConversationHUDControlsStatusView.setupLayoutConstraints()()
{
  uint64_t v1 = v0;
  unint64_t v48 = MEMORY[0x1E4FBC860];
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8);
  uint64_t v3 = (void *)v2();
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  OUTLINED_FUNCTION_5_41();
  uint64_t v4 = (void *)v2();
  id v5 = objc_msgSend(v4, sel_topAnchor);

  id v6 = objc_msgSend(v1, sel_topAnchor);
  id v7 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v6);

  OUTLINED_FUNCTION_5_41();
  uint64_t v8 = (void *)v2();
  id v9 = objc_msgSend(v8, sel_leadingAnchor);

  id v10 = objc_msgSend(v1, sel_leadingAnchor);
  unint64_t v11 = MEMORY[0x1E4FBC860];
  OUTLINED_FUNCTION_1_12();
  (*(void (**)(void))(v12 + 296))();
  id v13 = objc_msgSend(v9, sel_constraintEqualToAnchor_constant_, v10);

  OUTLINED_FUNCTION_5_41();
  id v14 = (void *)v2();
  id v15 = objc_msgSend(v14, sel_bottomAnchor);

  id v16 = objc_msgSend(v1, sel_bottomAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v18, 3))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v18 + 3, 1);
    specialized Array._endMutation()();
    unint64_t v11 = (unint64_t)v7;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_5;
    }
  }
  OUTLINED_FUNCTION_0_28();
LABEL_5:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v19 = v13;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_2_35();
  if (v20) {
    OUTLINED_FUNCTION_0_28();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v21 = v17;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_0_28();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v22 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_1_12();
  char v24 = (*(uint64_t (**)(void))(v23 + 304))();
  OUTLINED_FUNCTION_5_41();
  double v25 = (void *)v2();
  id v26 = objc_msgSend(v25, sel_trailingAnchor);

  if (v24)
  {
    uint64_t v27 = *(uint64_t (**)(void))((*v22 & *v1) + 0xE0);
    id v28 = (id)((*v22 & *v1) + 224);
    OUTLINED_FUNCTION_6_29();
    id v29 = (void *)v27();
    id v30 = objc_msgSend(v29, sel_leadingAnchor);

    static Layout.ConversationControls.values.getter((uint64_t)v49);
    id v46 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v30, -v50);

    OUTLINED_FUNCTION_6_29();
    id v31 = (void *)v27();
    id v32 = objc_msgSend(v31, sel_centerYAnchor);

    OUTLINED_FUNCTION_5_41();
    int8x16_t v33 = (void *)v2();
    id v34 = objc_msgSend(v33, sel_centerYAnchor);

    id v35 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v34);
    OUTLINED_FUNCTION_6_29();
    uint64_t v36 = (void *)v27();
    id v37 = objc_msgSend(v36, sel_centerXAnchor);

    id v38 = objc_msgSend(v1, sel_trailingAnchor);
    static Layout.ConversationControls.values.getter((uint64_t)v51);
    id v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_constant_, v38, v52 * -0.5);

    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v40 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (__OFADD__(v40, 3))
    {
      __break(1u);
    }
    else
    {
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v40 + 3, 1);
      specialized Array._endMutation()();
      id v28 = v46;
      MEMORY[0x1C87733A0]();
      OUTLINED_FUNCTION_2_35();
      if (!v20)
      {
LABEL_14:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v41 = v35;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_2_35();
        if (v20) {
          OUTLINED_FUNCTION_0_28();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v42 = v39;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_2_35();
        if (v20) {
          OUTLINED_FUNCTION_0_28();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        goto LABEL_22;
      }
    }
    OUTLINED_FUNCTION_0_28();
    goto LABEL_14;
  }
  id v43 = objc_msgSend(v1, sel_trailingAnchor);
  id v44 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v43);

  MEMORY[0x1C87733A0]();
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_0_28();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
LABEL_22:
  uint64_t v45 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v45, sel_activateConstraints_, isa);
}

UIPointerRegion_optional __swiftcall ConversationHUDControlsStatusView.pointerInteraction(_:regionFor:defaultRegion:)(UIPointerInteraction _, UIPointerRegionRequest regionFor, UIPointerRegion defaultRegion)
{
  id v3 = [(objc_class *)_.super.isa view];
  if (v3)
  {
    id v5 = v3;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerRegion);
    objc_msgSend(v5, sel_bounds);
    uint64_t v6 = UIPointerRegion.init(rect:identifier:)();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = (objc_class *)v6;
  result.value.super.Class isa = v7;
  result.is_nil = v4;
  return result;
}

UIPointerStyle_optional __swiftcall ConversationHUDControlsStatusView.pointerInteraction(_:styleFor:)(UIPointerInteraction _, UIPointerRegion styleFor)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIPointerShape?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_16_0();
  uint64_t v7 = type metadata accessor for UIPointerEffect();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (Class *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = 0;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_context) != 2)
  {
    if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v2
                                                                                   + OBJC_IVAR____TtC15ConversationKit33ConversationHUDControlsStatusView_controlsManager))
                                             + 0x320))(v9) & 1) != 0
      || (id v14 = [(objc_class *)_.super.isa view]) == 0)
    {
      uint64_t v13 = 0;
    }
    else
    {
      id v15 = v14;
      static Layout.ConversationControls.values.getter((uint64_t)v41);
      double v16 = *(double *)&v41[13];
      static Layout.ConversationControls.values.getter((uint64_t)&v42);
      id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B28]), sel_init);
      objc_msgSend(v15, sel_bounds);
      double v22 = UIEdgeInsetsInsetRect(v18, v19, v20, v21, -v16, -v16);
      id v26 = objc_msgSend(self, sel_bezierPathWithRect_, v22, v23, v24, v25);
      objc_msgSend(v17, sel_setVisiblePath_, v26);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITargetedPreview);
      uint64_t v27 = v15;
      uint64_t v40 = v27;
      v39.super.Class isa = (Class)v17;
      Class isa = UITargetedPreview.__allocating_init(view:parameters:)(v27, v39).super.isa;
      uint64_t v38 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
      id v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UITargetedPreview, preferredTintMode: UIPointerEffect.TintMode, prefersShadow: Bool, prefersScaledContent: Bool));
      id v30 = (char *)v12 + v29[12];
      uint64_t v31 = v29[16];
      uint64_t v32 = v29[20];
      *uint64_t v12 = isa;
      uint64_t v33 = *MEMORY[0x1E4FB0E80];
      uint64_t v34 = type metadata accessor for UIPointerEffect.TintMode();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104))(v30, v33, v34);
      *((unsigned char *)v12 + v31) = 0;
      *((unsigned char *)v12 + v32) = 0;
      (*(void (**)(Class *, void, uint64_t))(v8 + 104))(v12, *MEMORY[0x1E4FB0E78], v7);
      uint64_t v35 = type metadata accessor for UIPointerShape();
      __swift_storeEnumTagSinglePayload(v3, 1, 1, v35);
      uint64_t v36 = isa;
      uint64_t v13 = UIPointerStyle.init(effect:shape:)();
    }
  }
  id v37 = (objc_class *)v13;
  result.value.super.super.Class isa = v37;
  result.is_nil = v10;
  return result;
}

UITargetedPreview __swiftcall UITargetedPreview.__allocating_init(view:parameters:)(UIView *view, UIPreviewParameters parameters)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithView_parameters_, view, parameters.super.isa);

  return (UITargetedPreview)v4;
}

uint64_t type metadata accessor for ConversationHUDControlsStatusView()
{
  uint64_t result = type metadata singleton initialization cache for ConversationHUDControlsStatusView;
  if (!type metadata singleton initialization cache for ConversationHUDControlsStatusView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StatusViewPresentationStyle and conformance StatusViewPresentationStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type StatusViewPresentationStyle and conformance StatusViewPresentationStyle;
  if (!lazy protocol witness table cache variable for type StatusViewPresentationStyle and conformance StatusViewPresentationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatusViewPresentationStyle and conformance StatusViewPresentationStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [StatusViewPresentationStyle] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [StatusViewPresentationStyle] and conformance [A];
  if (!lazy protocol witness table cache variable for type [StatusViewPresentationStyle] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [StatusViewPresentationStyle]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [StatusViewPresentationStyle] and conformance [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for StatusViewPresentationStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C307E7C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StatusViewPresentationStyle()
{
  return &type metadata for StatusViewPresentationStyle;
}

uint64_t ObjC metadata update function for ConversationHUDControlsStatusView()
{
  return type metadata accessor for ConversationHUDControlsStatusView();
}

uint64_t type metadata completion function for ConversationHUDControlsStatusView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationHUDControlsStatusView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHUDControlsStatusView);
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.conversationStatusHStack.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.conversationStatusHStack.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.conversationStatusHStack.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.trailingActionsView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.trailingActionsView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.trailingActionsView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.conversationDetailsView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.conversationDetailsView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.conversationDetailsView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.leadingAccessoryView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.leadingAccessoryView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.leadingAccessoryView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.conversationStatusHStackLeadingPadding.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.needsExplicitLayoutForInfoButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ConversationHUDControlsStatusView.__allocating_init(recipe:controlsManager:menuHostViewController:context:presentationStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 312))(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t sub_1C307ECA8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C307ECE0()
{
  unint64_t v1 = (int *)type metadata accessor for ConversationControlsRecipe();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 26) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  uint64_t v3 = v0 + v2;
  switch(*(unsigned char *)(v0 + v2 + 40))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1(v0 + v2);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }

  unsigned int v4 = *(void **)(v3 + 56);
  if (v4)
  {
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = v3 + v1[9];
  uint64_t v6 = type metadata accessor for AttributedString();
  if (!__swift_getEnumTagSinglePayload(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  uint64_t v7 = (id *)(v3 + v1[10]);
  if (*v7)
  {
  }
  uint64_t v8 = v3 + v1[15];
  uint64_t v9 = *(unsigned __int8 *)(v8 + 40);
  if (v9 <= 0xFD) {
    outlined consume of ConversationControlsRecipe.Actions(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(void *)(v8 + 24), *(void *)(v8 + 32), v9);
  }
  uint64_t v10 = v3 + v1[17];
  if (*(unsigned __int8 *)(v10 + 16) != 255) {
    outlined consume of PreCallControlsContext(*(id *)v10);
  }
  uint64_t v11 = (id *)(v3 + v1[18]);
  if (*v11 != (id)1)
  {
  }
  return swift_deallocObject();
}

uint64_t outlined init with take of ConversationControlsRecipe(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in ConversationHUDControlsStatusView.recipe.didset()
{
  uint64_t v1 = *(void *)(type metadata accessor for ConversationControlsRecipe() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 25);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 26) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  closure #1 in ConversationHUDControlsStatusView.recipe.didset(v2, v3, v4, v5);
}

uint64_t sub_1C307EFEC()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in ConversationHUDControlsStatusView.recipe.didset(uint64_t a1)
{
  closure #2 in ConversationHUDControlsStatusView.recipe.didset(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32));
}

void partial apply for closure #1 in closure #2 in ConversationHUDControlsStatusView.recipe.didset()
{
  closure #1 in closure #2 in ConversationHUDControlsStatusView.recipe.didset(v0);
}

id ConversationHUDInCallBackdropView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id ConversationHUDInCallBackdropView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  double v1 = OUTLINED_FUNCTION_6_2();
  id v4 = objc_msgSendSuper2(v2, v3, v1, v0, ObjectType);
  id v5 = objc_msgSend(v4, sel_layer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C37696D0;
  id v7 = ConversationHUDInCallBackdropView.colorMatrixFilter.getter();
  uint64_t v8 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  *(void *)(v6 + 56) = v8;
  *(void *)(v6 + 32) = v7;
  id v9 = ConversationHUDInCallBackdropView.gaussianBlurFilter.getter();
  *(void *)(v6 + 88) = v8;
  *(void *)(v6 + 64) = v9;
  outlined bridged method (mbnn) of @objc CALayer.filters.setter(v6, v5);

  return v4;
}

id ConversationHUDInCallBackdropView.colorMatrixFilter.getter()
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = CAFilter.__allocating_init(type:)(v0, v1);
  v6[0] = xmmword_1C376D000;
  v6[1] = xmmword_1C376D010;
  void v6[2] = xmmword_1C376D020;
  void v6[3] = xmmword_1C376D030;
  v6[4] = xmmword_1C376D040;
  id v3 = objc_msgSend(self, sel_valueWithCAColorMatrix_, v6);
  id v4 = (void *)MEMORY[0x1C87730B0](0xD000000000000010, 0x80000001C3796430);
  objc_msgSend(v2, sel_setValue_forKey_, v3, v4);

  return v2;
}

id ConversationHUDInCallBackdropView.gaussianBlurFilter.getter()
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = CAFilter.__allocating_init(type:)(v0, v1);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v4 = (void *)MEMORY[0x1C87730B0](0xD000000000000013, 0x80000001C3796410);
  objc_msgSend(v2, sel_setValue_forKey_, isa, v4);

  Class v5 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  uint64_t v6 = (void *)MEMORY[0x1C87730B0](0x6461527475706E69, 0xEB00000000737569);
  objc_msgSend(v2, sel_setValue_forKey_, v5, v6);

  return v2;
}

id ConversationHUDInCallBackdropView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationHUDInCallBackdropView.init(coder:)()
{
}

uint64_t static ConversationHUDInCallBackdropView.layerClass.getter()
{
  return type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CABackdropLayer);
}

id ConversationHUDInCallBackdropView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void ConversationHUDInCallBackdropView.setCaptureGroup(_:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)ConversationHUDInCallBackdropView.backdropLayer.getter();
  if (a2) {
    uint64_t v5 = MEMORY[0x1C87730B0](a1, a2);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  objc_msgSend(v4, sel_setGroupName_);
}

uint64_t ConversationHUDInCallBackdropView.backdropLayer.getter()
{
  id v1 = objc_msgSend(v0, sel_layer);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result)
  {

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc CALayer.filters.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setFilters_, isa);
}

uint64_t type metadata accessor for ConversationHUDInCallBackdropView()
{
  return self;
}

id InCallControlsAddParticipantCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

char *InCallControlsAddParticipantCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v12 = v0;
  uint64_t ObjectType = swift_getObjectType();
  double v1 = OUTLINED_FUNCTION_6_2();
  double v4 = (char *)objc_msgSendSuper2(v2, v3, v1);
  uint64_t v5 = *(void **)&v4[OBJC_IVAR____TtC15ConversationKit22InCallControlsBaseCell_button];
  uint64_t v10 = &type metadata for SymbolImageDescribers.DrawerTable;
  uint64_t v11 = &protocol witness table for SymbolImageDescribers.DrawerTable;
  v9[0] = 1;
  id v6 = *(void (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x1D0);
  id v7 = v5;
  v6(v9);

  outlined destroy of SymbolImageDescribing?((uint64_t)v9);
  return v4;
}

id InCallControlsAddParticipantCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsAddParticipantCell.init(coder:)()
{
}

id InCallControlsAddParticipantCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InCallControlsAddParticipantCell()
{
  return self;
}

uint64_t specialized NoticeQueueStore.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t specialized NoticeQueueStore.peek()@<X0>(uint64_t a1@<X8>)
{
  objc_super v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v21 = a1;
    unint64_t v8 = 0;
    uint64_t v9 = v4 + 32;
    while (v8 < *(void *)(v4 + 16))
    {
      outlined init with copy of IDSLookupManager(v9, (uint64_t)&v23);
      __swift_project_boxed_opaque_existential_1(&v23, v24);
      uint64_t v10 = OUTLINED_FUNCTION_0_29();
      if (v11(v10))
      {
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      }
      else
      {
        outlined init with take of Notice(&v23, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_1_49();
        }
        OUTLINED_FUNCTION_3_49();
        if (v20) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        uint64_t result = OUTLINED_FUNCTION_2_36(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22);
      }
      ++v8;
      v9 += 40;
      if (v6 == v8)
      {
        uint64_t v5 = v25;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *objc_super v2 = v5;
    return specialized Collection.first.getter(v5);
  }
  return result;
}

void specialized NoticeQueueStore.pop()(uint64_t a1@<X8>)
{
  objc_super v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v21 = a1;
    unint64_t v7 = 0;
    uint64_t v8 = v4 + 32;
    while (v7 < *(void *)(v4 + 16))
    {
      outlined init with copy of IDSLookupManager(v8, (uint64_t)&v23);
      __swift_project_boxed_opaque_existential_1(&v23, v24);
      uint64_t v9 = OUTLINED_FUNCTION_0_29();
      if (v10(v9))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      }
      else
      {
        outlined init with take of Notice(&v23, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_1_49();
        }
        OUTLINED_FUNCTION_3_49();
        if (v19) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        OUTLINED_FUNCTION_2_36(v11, v12, v13, v14, v15, v16, v17, v18, v21, v22);
      }
      ++v7;
      v8 += 40;
      if (v6 == v7)
      {
        uint64_t v5 = v25;
        a1 = v21;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *objc_super v2 = v5;
    specialized Collection.first.getter(v5);
    uint64_t v20 = v24;
    outlined destroy of Notice?((uint64_t)&v23);
    if (v20)
    {
      specialized RangeReplaceableCollection.removeFirst()(a1);
    }
    else
    {
      *(void *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
}

uint64_t specialized NoticeQueueStore.flush()()
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t SimpleNoticeQueue.push(notice:)(uint64_t a1)
{
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v11);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v2 = *(void *)(*v1 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(unsigned char *))(v8 + 16))(v7);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, (uint64_t)v7, v1, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t SimpleNoticeQueue.init()()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t protocol witness for NoticeQueue.count.getter in conformance SimpleNoticeQueue()
{
  return specialized NoticeQueueStore.count.getter(*v0);
}

uint64_t protocol witness for NoticeQueue.peek() in conformance SimpleNoticeQueue@<X0>(uint64_t a1@<X8>)
{
  return specialized NoticeQueueStore.peek()(a1);
}

void protocol witness for NoticeQueue.pop() in conformance SimpleNoticeQueue(uint64_t a1@<X8>)
{
}

uint64_t CoalescingNoticeQueue.push(notice:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return specialized CoalescingNoticeQueue.push(notice:)((uint64_t)v4, v1, v2, v3);
}

uint64_t CoalescingNoticeQueue.init()()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t protocol witness for NoticeQueue.push(notice:) in conformance CoalescingNoticeQueue(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return specialized CoalescingNoticeQueue.push(notice:)((uint64_t)v4, v1, v2, v3);
}

uint64_t protocol witness for NoticeQueue.peek() in conformance CoalescingNoticeQueue@<X0>(uint64_t a1@<X8>)
{
  return specialized NoticeQueueStore.peek()(a1);
}

void protocol witness for NoticeQueue.pop() in conformance CoalescingNoticeQueue(uint64_t a1@<X8>)
{
}

uint64_t ReplacingNoticeQueue.push(notice:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Notice>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  outlined init with copy of IDSLookupManager(a1, v3 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *double v1 = v3;
  return result;
}

uint64_t ReplacingNoticeQueue.init()()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t protocol witness for NoticeQueue.peek() in conformance ReplacingNoticeQueue@<X0>(uint64_t a1@<X8>)
{
  return specialized NoticeQueueStore.peek()(a1);
}

void protocol witness for NoticeQueue.pop() in conformance ReplacingNoticeQueue(uint64_t a1@<X8>)
{
}

uint64_t specialized CoalescingNoticeQueue.push(notice:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  v57[3] = a3;
  v57[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(boxed_opaque_existential_1, a1, v5);
  uint64_t v9 = *a2;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  v50[0] = MEMORY[0x1E4FBC860];
  uint64_t v11 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v46 = v5;
    uint64_t v47 = v4;
    unint64_t v12 = 0;
    uint64_t v13 = v9 + 32;
    uint64_t v4 = 40;
    while (v12 < *(void *)(v9 + 16))
    {
      outlined init with copy of IDSLookupManager(v13, (uint64_t)&v54);
      uint64_t v14 = v55;
      uint64_t v15 = v56;
      __swift_project_boxed_opaque_existential_1(&v54, v55);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v14, v15))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      }
      else
      {
        outlined init with take of Notice(&v54, (uint64_t)&v51);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        uint64_t v16 = v50[0];
        unint64_t v17 = *(void *)(v50[0] + 16);
        if (v17 >= *(void *)(v50[0] + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v16 = v50[0];
        }
        *(void *)(v16 + 16) = v17 + 1;
        outlined init with take of Notice(&v51, v16 + 40 * v17 + 32);
      }
      ++v12;
      v13 += 40;
      if (v11 == v12)
      {
        uint64_t v10 = v50[0];
        uint64_t v4 = v47;
        uint64_t v5 = v46;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v10;
  specialized BidirectionalCollection.last.getter(v10, (uint64_t)&v51);
  if (!v52)
  {
    outlined destroy of Notice?((uint64_t)&v51);
LABEL_20:
    outlined init with copy of IDSLookupManager((uint64_t)v57, (uint64_t)&v54);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v31 = *(void *)(*a2 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
    uint64_t v32 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v54, v55);
    MEMORY[0x1F4188790](v32);
    uint64_t v34 = (char *)&v45 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v35 + 16))(v34);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, (uint64_t)v34, a2, v5, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  }
  outlined init with take of Notice(&v51, (uint64_t)&v54);
  uint64_t v18 = v55;
  uint64_t v19 = v56;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v54, v55);
  if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 208))(v57, v18, v19) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    goto LABEL_20;
  }
  unint64_t v12 = v5;
  if (one-time initialization token for conversationControls != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationControls);
  outlined init with copy of IDSLookupManager((uint64_t)v57, (uint64_t)&v51);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v50[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315394;
    __swift_project_boxed_opaque_existential_1(&v51, v52);
    uint64_t v25 = (*(uint64_t (**)(unint64_t, uint64_t))(v4 + 120))(v12, v4);
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    *(_WORD *)(v23 + 12) = 2080;
    swift_beginAccess();
    uint64_t v27 = v55;
    uint64_t v28 = v56;
    __swift_project_boxed_opaque_existential_1(&v54, v55);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 120))(v27, v28);
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v21, v22, "Coalesced notice:%s into existingNotice:%s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v24, -1, -1);
    MEMORY[0x1C87760E0](v23, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  }

  specialized RangeReplaceableCollection<>.removeLast()((uint64_t)&v51);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  swift_beginAccess();
  outlined init with copy of IDSLookupManager((uint64_t)&v54, (uint64_t)&v51);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v36 = *(void *)(*a2 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
  uint64_t v37 = v52;
  uint64_t v38 = v53;
  uint64_t v39 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v51, v52);
  MEMORY[0x1F4188790](v39);
  id v41 = (char *)&v45 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v42 + 16))(v41);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, (uint64_t)v41, a2, v37, v38);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  uint64_t v43 = *a2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  *a2 = v43;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of Notice(&v12, v10 + 40 * a1 + 32);
}

uint64_t dispatch thunk of NoticeQueue.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NoticeQueue.push(notice:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of NoticeQueue.peek()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of NoticeQueue.pop()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of NoticeQueue.flush()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void type metadata accessor for SimpleNoticeQueue()
{
}

void type metadata accessor for CoalescingNoticeQueue()
{
}

void type metadata accessor for ReplacingNoticeQueue()
{
}

uint64_t outlined destroy of Notice?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notice?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AudioVisualizationView.audioVisualizationLayer.getter()
{
  id v1 = objc_msgSend(v0, sel_layer);
  type metadata accessor for AudioVisualizationLayer();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {

    uint64_t result = OUTLINED_FUNCTION_0_30();
    __break(1u);
  }
  return result;
}

id AudioVisualizationView.__allocating_init(colorStyle:)(unsigned __int8 *a1)
{
  id v3 = objc_allocWithZone(v1);
  return AudioVisualizationView.init(colorStyle:)(a1);
}

id AudioVisualizationView.init(colorStyle:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit22AudioVisualizationView_gradient] = MEMORY[0x1E4FBC860];
  v1[OBJC_IVAR____TtC15ConversationKit22AudioVisualizationView_colorStyle] = v2;
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for AudioVisualizationView();
  id v3 = objc_msgSendSuper2(&v10, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v4 = v3;
  if (v2 == 1)
  {
    id v5 = v3;
    uint64_t v6 = (void *)AudioVisualizationView.audioVisualizationLayer.getter();
    if (one-time initialization token for overlayContent != -1) {
      swift_once();
    }
    unint64_t v7 = (void *)static Colors.ParticipantViews.overlayContent;
    id v8 = (id)static Colors.ParticipantViews.overlayContent;
    AudioVisualizationLayer.color.setter(v7);
  }
  return v4;
}

uint64_t type metadata accessor for AudioVisualizationView()
{
  return self;
}

id AudioVisualizationView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AudioVisualizationView.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22AudioVisualizationView_gradient] = MEMORY[0x1E4FBC860];

  OUTLINED_FUNCTION_0_30();
  __break(1u);
}

id AudioVisualizationView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void AudioVisualizationView.init(frame:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22AudioVisualizationView_gradient] = MEMORY[0x1E4FBC860];

  OUTLINED_FUNCTION_0_30();
  __break(1u);
}

id AudioVisualizationView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void AudioVisualizationView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit22AudioVisualizationView_gradient] = MEMORY[0x1E4FBC860];

  OUTLINED_FUNCTION_0_30();
  __break(1u);
}

void key path getter for AudioVisualizationView.scale : AudioVisualizationView(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
}

uint64_t key path setter for AudioVisualizationView.scale : AudioVisualizationView(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78))(*a1);
}

float AudioVisualizationView.scale.getter()
{
  uint64_t v0 = (char *)AudioVisualizationView.audioVisualizationLayer.getter();
  id v1 = (float *)&v0[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale];
  swift_beginAccess();
  float v2 = *v1;

  return v2;
}

void AudioVisualizationView.scale.setter(float a1)
{
  float v2 = (char *)AudioVisualizationView.audioVisualizationLayer.getter();
  id v3 = (float *)&v2[OBJC_IVAR____TtC15ConversationKit23AudioVisualizationLayer_scale];
  swift_beginAccess();
  *id v3 = a1;
}

void (*AudioVisualizationView.scale.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = AudioVisualizationView.scale.getter();
  return AudioVisualizationView.scale.modify;
}

void AudioVisualizationView.scale.modify(uint64_t a1)
{
}

uint64_t key path getter for AudioVisualizationView.gradient : AudioVisualizationView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AudioVisualizationView.gradient : AudioVisualizationView(uint64_t a1, void **a2)
{
  float v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void AudioVisualizationView.gradient.didset()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit22AudioVisualizationView_colorStyle) & 1) == 0)
  {
    uint64_t v1 = (void *)AudioVisualizationView.audioVisualizationLayer.getter();
    swift_beginAccess();
    unint64_t v2 = swift_bridgeObjectRetain();
    specialized Array<A>.interpolatedColor(percent:)(v2, 0.25);
    id v4 = v3;
    swift_bridgeObjectRelease();
    id v5 = UIColor.screenBlendedColor.getter();

    AudioVisualizationLayer.color.setter(v5);
  }
}

void specialized Array<A>.interpolatedColor(percent:)(unint64_t a1, double a2)
{
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v28) {
      goto LABEL_17;
    }
  }
  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_17;
  }
  unint64_t v5 = a1 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v6 = (id)MEMORY[0x1C87744F0](0, a1);
  }
  else {
    id v6 = *(id *)(a1 + 32);
  }
  unint64_t v7 = v6;
  double v8 = UIColor.hslaComponents.getter();
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;

  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_9;
    }
LABEL_17:
    id v29 = objc_msgSend(self, sel_clearColor);
    id v30 = v29;
    return;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_17;
  }
LABEL_9:
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v17, v5 == 0, a1);
    double v31 = v14;
    if (v5) {
      id v18 = (id)MEMORY[0x1C87744F0](v17, a1);
    }
    else {
      id v18 = *(id *)(a1 + 8 * v17 + 32);
    }
    uint64_t v19 = v18;
    double v20 = UIColor.hslaComponents.getter();
    double v22 = v21;
    double v24 = v23;
    double v26 = v25;

    id v27 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
    objc_msgSend(v27, sel_initWithHue_saturation_brightness_alpha_, (1.0 - a2) * v8 + v20 * a2, (1.0 - a2) * v10 + v22 * a2, (1.0 - a2) * v12 + v24 * a2, (1.0 - a2) * v31 + v26 * a2);
  }
}

uint64_t AudioVisualizationView.gradient.getter()
{
  return swift_bridgeObjectRetain();
}

void AudioVisualizationView.gradient.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit22AudioVisualizationView_gradient);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  AudioVisualizationView.gradient.didset();
}

void (*AudioVisualizationView.gradient.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return AudioVisualizationView.gradient.modify;
}

void AudioVisualizationView.gradient.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    AudioVisualizationView.gradient.didset();
  }
}

Swift::Void __swiftcall AudioVisualizationView.startAnimation()()
{
}

Swift::Void __swiftcall AudioVisualizationView.stopAnimation()()
{
}

void AudioVisualizationView.startAnimation()(void (*a1)(void))
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *unint64_t v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBE8], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    unint64_t v7 = (void *)AudioVisualizationView.audioVisualizationLayer.getter();
    a1();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static AudioVisualizationView.layerClass.getter()
{
  return type metadata accessor for AudioVisualizationLayer();
}

id AudioVisualizationView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioVisualizationView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for AudioVisualizationView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioVisualizationView);
}

uint64_t dispatch thunk of AudioVisualizationView.__allocating_init(colorStyle:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AudioVisualizationView.scale.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AudioVisualizationView.scale.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AudioVisualizationView.scale.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AudioVisualizationView.gradient.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AudioVisualizationView.gradient.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AudioVisualizationView.gradient.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AudioVisualizationView.startAnimation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AudioVisualizationView.stopAnimation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t CallRecordingButtonViewModel.__allocating_init(_:_:_:)()
{
  OUTLINED_FUNCTION_8_8();
  uint64_t v0 = swift_allocObject();
  CallRecordingButtonViewModel.init(_:_:_:)();
  return v0;
}

Swift::Void __swiftcall CallRecordingButtonViewModel.startRecordingButtonTapped()()
{
  if (CallRecordingButtonViewModel.educationScreenShown.getter())
  {
    *(unsigned char *)(v0 + 48) = 1;
    CallRecordingButtonViewModel.updateButtonState()();
    CallRecordingButtonViewModel.startRecordingCountdown()();
  }
  else
  {
    OUTLINED_FUNCTION_2();
    uint64_t v1 = MEMORY[0x1C8776240](v0 + 16);
    if (v1)
    {
      objc_super v2 = (void *)v1;
      uint64_t v3 = *(void *)(v0 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    }
  }
}

void CallRecordingButtonViewModel.recordingAvailability.setter(int a1)
{
  OUTLINED_FUNCTION_11_0();
  *(_DWORD *)(v1 + 52) = a1;
  CallRecordingButtonViewModel.updateButtonState()();
}

Swift::Void __swiftcall CallRecordingButtonViewModel.updateCallUUID(_:)(Swift::String a1)
{
  v1[2] = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
}

void CallRecordingButtonViewModel.educationScreenShown.setter(char a1)
{
  id v3 = objc_msgSend(self, sel_standardUserDefaults);
  id v4 = (id)MEMORY[0x1C87730B0](*(void *)(v1 + 64), *(void *)(v1 + 72));
  objc_msgSend(v3, sel_setBool_forKey_, a1 & 1, v4);
}

Swift::Void __swiftcall CallRecordingButtonViewModel.startRecordingCountdown()()
{
  id v0 = objc_msgSend(self, sel_defaultCenter);
  id v1 = v0;
  if (one-time initialization token for startCallRecordingCountdownNotification != -1)
  {
    swift_once();
    id v0 = v1;
  }
  objc_msgSend(v0, sel_postNotificationName_object_, static NSNotificationName.startCallRecordingCountdownNotification, 0);
}

uint64_t CallRecordingButtonViewModel.delegate.getter()
{
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v0 + 16);
}

void CallRecordingButtonViewModel.delegate.setter(void *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_11_0();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
}

void (*CallRecordingButtonViewModel.delegate.modify(void *a1))(id **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  _OWORD v3[3] = v4;
  void v3[4] = v5;
  return CallRecordingButtonViewModel.delegate.modify;
}

void CallRecordingButtonViewModel.delegate.modify(id **a1, char a2)
{
  id v3 = *a1;
  id v4 = (*a1)[3];
  *((void *)(*a1)[5] + 3) = (*a1)[4];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v3);
}

uint64_t CallRecordingButtonViewModel.recordingAvailability.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned int *)(v0 + 52);
}

uint64_t key path getter for CallRecordingButtonViewModel.recordingAvailability : CallRecordingButtonViewModel@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 52);
  return result;
}

void CallRecordingButtonViewModel.updateButtonState()()
{
  id v1 = objc_msgSend(self, sel_sharedInstance);
  id v2 = objc_msgSend(v1, sel_currentCalls);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62) {
    goto LABEL_30;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (v3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v5 - 4, v3) : *(id *)(v3 + 8 * v5);
      unint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_callUUID);
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      if (v10 == *(void *)(v0 + 32) && v12 == *(void *)(v0 + 40))
      {
        swift_release();
        swift_bridgeObjectRelease();
LABEL_17:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned int v17 = objc_msgSend(v7, sel_status);
        unsigned __int8 v16 = 0;
        uint64_t v15 = v17;
        goto LABEL_18;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v14)
      {
        swift_release();
        goto LABEL_17;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_30:
    swift_retain();
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = 0;
  unint64_t v7 = 0;
  unsigned __int8 v16 = 1;
LABEL_18:
  v29[50] = v16;
  char v18 = specialized Sequence<>.contains(_:)(v15 | ((unint64_t)v16 << 32), (uint64_t)&outlined read-only object #0 of CallRecordingButtonViewModel.updateButtonState());
  OUTLINED_FUNCTION_2();
  unsigned __int8 v19 = *(unsigned char *)(v0 + 60);
  unsigned __int8 v20 = *(unsigned char *)(v0 + 48) ^ 1;
  OUTLINED_FUNCTION_2();
  int v21 = *(_DWORD *)(v0 + 52);
  char v22 = v18 ^ 1;
  if (v21 != 3) {
    char v22 = 0;
  }
  BOOL v23 = v21 == 1 || !((v7 != 0) & v20 & v19);
  if (v21 == 1) {
    char v24 = 0;
  }
  else {
    char v24 = v22;
  }
  OUTLINED_FUNCTION_2();
  uint64_t v25 = MEMORY[0x1C8776240](v0 + 16);
  if (v25)
  {
    double v26 = (void *)v25;
    uint64_t v27 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType();
    v29[0] = v24 & 1;
    v29[1] = v23;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16))(v29, ObjectType, v27);
  }
}

uint64_t (*CallRecordingButtonViewModel.recordingAvailability.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_9();
  return CallRecordingButtonViewModel.recordingAvailability.modify;
}

unint64_t CallRecordingButtonViewModel.recordingState.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32);
}

uint64_t key path getter for CallRecordingButtonViewModel.recordingState : CallRecordingButtonViewModel@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 60);
  *(_DWORD *)a2 = *(_DWORD *)(v3 + 56);
  *(unsigned char *)(a2 + 4) = v5;
  return result;
}

void key path setter for CallRecordingButtonViewModel.recordingState : CallRecordingButtonViewModel(unsigned int *a1)
{
}

void CallRecordingButtonViewModel.recordingState.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_11_0();
  *(_DWORD *)(v1 + 56) = a1;
  *(unsigned char *)(v1 + 60) = BYTE4(a1) & 1;
  CallRecordingButtonViewModel.updateButtonState()();
}

uint64_t (*CallRecordingButtonViewModel.recordingState.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_9();
  return CallRecordingButtonViewModel.recordingAvailability.modify;
}

void CallRecordingButtonViewModel.recordingAvailability.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    CallRecordingButtonViewModel.updateButtonState()();
  }
}

uint64_t CallRecordingButtonViewModel.educationScreenShown.getter()
{
  id v1 = objc_msgSend(self, sel_standardUserDefaults);
  id v2 = (void *)MEMORY[0x1C87730B0](*(void *)(v0 + 64), *(void *)(v0 + 72));
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of Any?((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v5;
    }
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  return result;
}

void (*CallRecordingButtonViewModel.educationScreenShown.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = CallRecordingButtonViewModel.educationScreenShown.getter() & 1;
  return CallRecordingButtonViewModel.educationScreenShown.modify;
}

void CallRecordingButtonViewModel.educationScreenShown.modify(uint64_t a1)
{
}

uint64_t CallRecordingButtonViewModel.init(_:_:_:)()
{
  OUTLINED_FUNCTION_8_8();
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 60) = 1;
  *(void *)(v1 + 64) = 0xD000000000000030;
  *(void *)(v1 + 72) = 0x80000001C37965D0;
  *(void *)(v1 + 80) = MEMORY[0x1E4FBC870];
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 52) = v2;
  OUTLINED_FUNCTION_11_0();
  *(_DWORD *)(v1 + 56) = v0;
  *(unsigned char *)(v1 + 60) = BYTE4(v0) & 1;
  CallRecordingButtonViewModel.observeNotification()();
  CallRecordingButtonViewModel.updateButtonState()();
  return v1;
}

Swift::Void __swiftcall CallRecordingButtonViewModel.observeNotification()()
{
  uint64_t v1 = v0;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  OUTLINED_FUNCTION_4();
  uint64_t v50 = v2;
  uint64_t v59 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_5_10();
  uint64_t v58 = v5;
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  uint64_t v57 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_5_10();
  uint64_t v55 = v13;
  uint64_t v15 = v14 - v13;
  id v54 = self;
  id v16 = objc_msgSend(v54, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v51 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v62 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v45 = (char *)((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v19 = (char *)((char *)v44 - v45);
  uint64_t v53 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v53);
  v44[2] = lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher();
  unint64_t v52 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  Publisher.receive<A>(on:options:)();
  outlined destroy of Conversation?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  unsigned __int8 v20 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  uint64_t v60 = v10 + 8;
  v20(v15, v8);
  uint64_t v21 = OUTLINED_FUNCTION_20();
  uint64_t v61 = v1;
  swift_weakInit();
  unint64_t v22 = lazy protocol witness table accessor for type Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>();
  uint64_t v23 = v56;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  char v24 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v50 += 8;
  v24(v7, v23);
  OUTLINED_FUNCTION_1_50();
  AnyCancellable.store(in:)();
  swift_endAccess();
  uint64_t v25 = swift_release();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_6_30();
  MEMORY[0x1F4188790](v26);
  id v27 = objc_msgSend((id)OUTLINED_FUNCTION_7_28(), sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  id v62 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v49 = v18;
  MEMORY[0x1F4188790](v62);
  uint64_t v28 = (char *)((char *)v44 - v45);
  OUTLINED_FUNCTION_3_50();
  Publisher.receive<A>(on:options:)();
  outlined destroy of Conversation?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  v44[1] = v8;
  uint64_t v48 = v20;
  v20(v23, v8);
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  uint64_t v29 = v56;
  unint64_t v47 = v22;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v46 = v24;
  v24(v21, v29);
  OUTLINED_FUNCTION_1_50();
  AnyCancellable.store(in:)();
  swift_endAccess();
  uint64_t v30 = swift_release();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_6_30();
  MEMORY[0x1F4188790](v31);
  id v32 = objc_msgSend((id)OUTLINED_FUNCTION_7_28(), sel_defaultCenter);
  if (one-time initialization token for startCallRecordingStateFailedNotification != -1) {
    swift_once();
  }
  NSNotificationCenter.publisher(for:object:)();

  id v62 = (id)static OS_dispatch_queue.main.getter();
  MEMORY[0x1F4188790](v62);
  uint64_t v33 = (char *)((char *)v44 - v45);
  OUTLINED_FUNCTION_3_50();
  Publisher.receive<A>(on:options:)();
  outlined destroy of Conversation?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  OUTLINED_FUNCTION_4_39();
  v34();
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  uint64_t v35 = v56;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v46(v21, v35);
  OUTLINED_FUNCTION_1_50();
  AnyCancellable.store(in:)();
  swift_endAccess();
  uint64_t v36 = swift_release();
  uint64_t v45 = (char *)v44;
  uint64_t v37 = MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)v44 - v58;
  MEMORY[0x1F4188790](v37);
  id v39 = objc_msgSend(v54, sel_defaultCenter);
  if (one-time initialization token for startCallRecordingStateCancelledNotification != -1) {
    swift_once();
  }
  NSNotificationCenter.publisher(for:object:)();

  id v62 = (id)static OS_dispatch_queue.main.getter();
  MEMORY[0x1F4188790](v62);
  OUTLINED_FUNCTION_5_10();
  uint64_t v42 = v40 - v41;
  __swift_storeEnumTagSinglePayload(v40 - v41, 1, 1, v53);
  Publisher.receive<A>(on:options:)();
  outlined destroy of Conversation?(v42, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  OUTLINED_FUNCTION_4_39();
  v43();
  OUTLINED_FUNCTION_20();
  swift_weakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v46((uint64_t)v38, v35);
  OUTLINED_FUNCTION_1_50();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
}

void closure #1 in CallRecordingButtonViewModel.observeNotification()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    Notification.object.getter();
    if (!v13)
    {
      swift_release();
      outlined destroy of Conversation?((uint64_t)v12, &demangling cache variable for type metadata for Any?);
      return;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      return;
    }
    id v2 = objc_msgSend(v11, sel_callUUID);
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == *(void *)(v1 + 32) && v5 == *(void *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
LABEL_17:
        swift_release();

        return;
      }
    }
    *(unsigned char *)(v1 + 48) = 0;
    id v8 = objc_msgSend(v11, sel_recordingSession);
    uint64_t v9 = v8;
    if (v8)
    {
      unsigned int v10 = objc_msgSend(v8, sel_recordingState);
    }
    else
    {
      unsigned int v10 = 0;
    }
    swift_beginAccess();
    *(_DWORD *)(v1 + 56) = v10;
    *(unsigned char *)(v1 + 60) = v9 == 0;
    CallRecordingButtonViewModel.updateButtonState()();
    goto LABEL_17;
  }
}

void closure #2 in CallRecordingButtonViewModel.observeNotification()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    Notification.object.getter();
    if (!v14)
    {
      swift_release();
      outlined destroy of Conversation?((uint64_t)v13, &demangling cache variable for type metadata for Any?);
      return;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      return;
    }
    id v2 = objc_msgSend(v12, sel_callUUID);
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == *(void *)(v1 + 32) && v5 == *(void *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
LABEL_17:
        swift_release();

        return;
      }
    }
    unsigned int v8 = objc_msgSend(v12, sel_recordingAvailability);
    swift_beginAccess();
    *(_DWORD *)(v1 + 52) = v8;
    CallRecordingButtonViewModel.updateButtonState()();
    id v9 = objc_msgSend(v12, sel_recordingSession);
    unsigned int v10 = v9;
    if (v9)
    {
      unsigned int v11 = objc_msgSend(v9, sel_recordingState);
    }
    else
    {
      unsigned int v11 = 0;
    }
    swift_beginAccess();
    *(_DWORD *)(v1 + 56) = v11;
    *(unsigned char *)(v1 + 60) = v10 == 0;
    CallRecordingButtonViewModel.updateButtonState()();
    goto LABEL_17;
  }
}

uint64_t closure #3 in CallRecordingButtonViewModel.observeNotification()(uint64_t a1, uint64_t a2, const char *a3)
{
  OUTLINED_FUNCTION_2();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    if (one-time initialization token for recordingSession != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.recordingSession);
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_1C2F90000, v7, v8, a3, v9, 2u);
      MEMORY[0x1C87760E0](v9, -1, -1);
    }

    *(unsigned char *)(v5 + 48) = 0;
    CallRecordingButtonViewModel.updateButtonState()();
    return swift_release();
  }
  return result;
}

uint64_t CallRecordingButtonViewModel.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CallRecordingButtonViewModel.__deallocating_deinit()
{
  CallRecordingButtonViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3082E78()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallRecordingButtonViewModel.observeNotification()()
{
}

unint64_t lazy protocol witness table accessor for type Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>;
  if (!lazy protocol witness table cache variable for type Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>);
  }
  return result;
}

void partial apply for closure #2 in CallRecordingButtonViewModel.observeNotification()()
{
}

uint64_t partial apply for closure #3 in CallRecordingButtonViewModel.observeNotification()(uint64_t a1)
{
  return closure #3 in CallRecordingButtonViewModel.observeNotification()(a1, v1, "Start call recording failed. Resetting recording button state.");
}

uint64_t partial apply for closure #4 in CallRecordingButtonViewModel.observeNotification()(uint64_t a1)
{
  return closure #3 in CallRecordingButtonViewModel.observeNotification()(a1, v1, "Start call recording cancelled. Resetting recording button state.");
}

void sub_1C3082F68(int *a1)
{
}

uint64_t sub_1C3082F98@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CallRecordingButtonViewModel.educationScreenShown.getter();
  *a1 = result & 1;
  return result;
}

void sub_1C3082FC8(char *a1)
{
}

uint64_t type metadata accessor for CallRecordingButtonViewModel()
{
  return self;
}

uint64_t method lookup function for CallRecordingButtonViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallRecordingButtonViewModel);
}

uint64_t dispatch thunk of CallRecordingButtonViewModel.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v4 + 136))(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32));
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  return OUTLINED_FUNCTION_35_4();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_29();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_29();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return String.hash(into:)();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_29();
}

{
  return String.hash(into:)();
}

{
  return OUTLINED_FUNCTION_35_4();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_29();
}

{
  char v0;
  uint64_t vars8;

  OUTLINED_FUNCTION_36_5();
  switch(v0)
  {
    case 1:
      goto LABEL_4;
    case 2:
    case 4:
      OUTLINED_FUNCTION_80_0();
      break;
    case 3:
      OUTLINED_FUNCTION_71_0();
LABEL_4:
      OUTLINED_FUNCTION_47_5();
      break;
    case 5:
    case 6:
      OUTLINED_FUNCTION_36_5();
      break;
    default:
      break;
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_29();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(int a1, Swift::UInt32 a2)
{
}

void specialized RawRepresentable<>.hash(into:)(int a1, Swift::UInt a2)
{
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 5:
      OUTLINED_FUNCTION_80_0();
      break;
    default:
      break;
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 2:
    case 6:
      OUTLINED_FUNCTION_80_0();
      break;
    default:
      break;
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  id v2;
  uint64_t vars8;

  id v2 = VideoReaction.rawValue.getter(a2);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 1:
    case 3:
    case 4:
      OUTLINED_FUNCTION_80_0();
      break;
    case 2:
      OUTLINED_FUNCTION_71_0();
      OUTLINED_FUNCTION_47_5();
      break;
    default:
      break;
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 1:
    case 3:
      OUTLINED_FUNCTION_80_0();
      break;
    default:
      break;
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
}

{
  Hasher._combine(_:)((a2 & 1) - 3);
}

{
  Hasher._combine(_:)(qword_1C376E278[a2]);
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ImageNames.Staging.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ImageNames.ParticipantView.rawValue.getter);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t RemoteControlRequest.date.getter@<X0>(uint64_t a1@<X8>)
{
  return RemoteControlRequest.date.getter(type metadata accessor for RemoteControlRequest, MEMORY[0x1F418B9F8], a1);
}

uint64_t type metadata accessor for RemoteControlRequest(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteControlRequest);
}

uint64_t RemoteControlRequest.hash(into:)()
{
  return OUTLINED_FUNCTION_22_11();
}

uint64_t static RemoteControlRequest.== infix(_:_:)()
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for RemoteControlRequest(0);
  return static Date.== infix(_:_:)() & 1;
}

uint64_t RemoteControlRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t RemoteControlRequest.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int RemoteControlRequest.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t RemoteControlRequest.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1702125924;
  }
  else {
    return 1684632949;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RemoteControlRequest.CodingKeys()
{
  return RemoteControlRequest.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance RemoteControlRequest.CodingKeys(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RemoteControlRequest.CodingKeys()
{
  return RemoteControlRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RemoteControlRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = RemoteControlRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RemoteControlRequest.CodingKeys()
{
  return protocol witness for ParticipantVideoProvider.token.getter in conformance TUVideoDeviceController();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RemoteControlRequest.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RemoteControlRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t RemoteControlRequest.encode(to:)()
{
  OUTLINED_FUNCTION_40_6();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlRequest.CodingKeys>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_26_10();
  lazy protocol witness table accessor for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys();
  OUTLINED_FUNCTION_20_11();
  char v12 = 0;
  uint64_t v4 = type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  OUTLINED_FUNCTION_16_16(v1, (uint64_t)&v12, v2, v4);
  if (!v0)
  {
    type metadata accessor for RemoteControlRequest(0);
    uint64_t v5 = OUTLINED_FUNCTION_43_4();
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
    uint64_t v6 = OUTLINED_FUNCTION_50_4();
    OUTLINED_FUNCTION_16_16(v6, v7, v8, v5);
  }
  uint64_t v9 = OUTLINED_FUNCTION_46_4();
  return v10(v9);
}

unint64_t lazy protocol witness table accessor for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys);
  }
  return result;
}

Swift::Int RemoteControlRequest.hashValue.getter()
{
  return Hasher._finalize()();
}

void RemoteControlRequest.init(from:)()
{
  OUTLINED_FUNCTION_15_17();
  uint64_t v3 = v2;
  uint64_t v28 = v4;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlRequest.CodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = OUTLINED_FUNCTION_25_7();
  uint64_t v9 = type metadata accessor for RemoteControlRequest(v8);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_64();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type RemoteControlRequest.CodingKeys and conformance RemoteControlRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  else
  {
    uint64_t v24 = v9;
    uint64_t v25 = v1;
    uint64_t v27 = v6;
    type metadata accessor for UUID();
    uint64_t v26 = v23;
    OUTLINED_FUNCTION_4();
    uint64_t v12 = v11;
    MEMORY[0x1F4188790](v13);
    OUTLINED_FUNCTION_62();
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
    OUTLINED_FUNCTION_42_6();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v23[1] = v12;
    uint64_t v14 = v25;
    OUTLINED_FUNCTION_63_0();
    v15();
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v26 = v23;
    OUTLINED_FUNCTION_4();
    v23[0] = v17;
    MEMORY[0x1F4188790](v18);
    OUTLINED_FUNCTION_21();
    uint64_t v21 = v20 - v19;
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_26_2();
    v22();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23[0] + 32))(v14 + *(int *)(v24 + 20), v21, v16);
    OUTLINED_FUNCTION_31_10();
    outlined init with copy of RemoteControlRequest();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    outlined destroy of RemoteControlRequest(v14, (void (*)(void))type metadata accessor for RemoteControlRequest);
  }
  OUTLINED_FUNCTION_14_17();
}

uint64_t RemoteControlRequest.init(uuid:date:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_19_19();
  v3();
  type metadata accessor for RemoteControlRequest(0);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_55_3();
  return v5(v4, a2);
}

void protocol witness for Decodable.init(from:) in conformance RemoteControlRequest()
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RemoteControlRequest()
{
  return RemoteControlRequest.encode(to:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RemoteControlRequest()
{
  return Hasher._finalize()();
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t RemoteControlResponse.requestUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return RemoteControlRequest.date.getter(type metadata accessor for RemoteControlResponse, MEMORY[0x1F418BB80], a1);
}

uint64_t RemoteControlRequest.date.getter@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  a2(0);
  OUTLINED_FUNCTION_0();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  return v9(a3, v6, v7);
}

uint64_t type metadata accessor for RemoteControlResponse(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteControlResponse);
}

uint64_t RemoteControlResponse.date.getter()
{
  type metadata accessor for RemoteControlResponse(0);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t RemoteControlResponse.allowControl.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RemoteControlResponse(0) + 28));
}

void RemoteControlResponse.hash(into:)()
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for RemoteControlResponse(0);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 28)));
}

uint64_t static RemoteControlResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v5 = type metadata accessor for RemoteControlResponse(0),
        OUTLINED_FUNCTION_60_1(v5),
        (static UUID.== infix(_:_:)() & 1) != 0)
    && (static Date.== infix(_:_:)() & 1) != 0)
  {
    char v6 = *(unsigned char *)(a1 + *(int *)(v2 + 28)) ^ *(unsigned char *)(a2 + *(int *)(v2 + 28)) ^ 1;
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t RemoteControlResponse.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x5574736575716572 && a2 == 0xEB00000000444955;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 1702125924 && a2 == 0xE400000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x6E6F43776F6C6C61 && a2 == 0xEC0000006C6F7274)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t RemoteControlResponse.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t RemoteControlResponse.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 1684632949;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x5574736575716572;
      break;
    case 2:
      uint64_t result = 1702125924;
      break;
    case 3:
      uint64_t result = 0x6E6F43776F6C6C61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RemoteControlResponse.CodingKeys()
{
  return RemoteControlResponse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RemoteControlResponse.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = RemoteControlResponse.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RemoteControlResponse.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RemoteControlResponse.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

void RemoteControlResponse.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_15_17();
  a23 = v26;
  a24 = v27;
  OUTLINED_FUNCTION_40_6();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlResponse.CodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v30 = v29;
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_26_10();
  lazy protocol witness table accessor for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys();
  OUTLINED_FUNCTION_20_11();
  a14 = 0;
  uint64_t v34 = type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  OUTLINED_FUNCTION_16_16(v25, (uint64_t)&a14, v28, v34);
  if (!v24)
  {
    uint64_t v35 = type metadata accessor for RemoteControlResponse(0);
    uint64_t v36 = v25 + *(int *)(v35 + 20);
    a13 = 1;
    OUTLINED_FUNCTION_16_16(v36, (uint64_t)&a13, v28, v34);
    uint64_t v37 = v25 + *(int *)(v35 + 24);
    a12 = 2;
    uint64_t v38 = type metadata accessor for Date();
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
    OUTLINED_FUNCTION_16_16(v37, (uint64_t)&a12, v28, v38);
    a11 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v28);
  OUTLINED_FUNCTION_14_17();
}

unint64_t lazy protocol witness table accessor for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys);
  }
  return result;
}

Swift::Int RemoteControlResponse.hashValue.getter()
{
  OUTLINED_FUNCTION_7_1();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  OUTLINED_FUNCTION_59_2();
  uint64_t v1 = type metadata accessor for RemoteControlResponse(0);
  OUTLINED_FUNCTION_59_2();
  type metadata accessor for Date();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 28)));
  return Hasher._finalize()();
}

void RemoteControlResponse.init(from:)()
{
  OUTLINED_FUNCTION_15_17();
  uint64_t v4 = v3;
  uint64_t v35 = v5;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlResponse.CodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_17_0();
  uint64_t v9 = type metadata accessor for RemoteControlResponse(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_5_1();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type RemoteControlResponse.CodingKeys and conformance RemoteControlResponse.CodingKeys();
  uint64_t v36 = v0;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    uint64_t v32 = v4;
    uint64_t v33 = v7;
    uint64_t v30 = v9;
    uint64_t v31 = v2;
    type metadata accessor for UUID();
    uint64_t v34 = &v28;
    OUTLINED_FUNCTION_4();
    uint64_t v12 = v11;
    uint64_t v14 = *(void *)(v13 + 64);
    MEMORY[0x1F4188790](v15);
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
    OUTLINED_FUNCTION_57_1();
    uint64_t v28 = *(void *)(v12 + 32);
    uint64_t v29 = v12 + 32;
    OUTLINED_FUNCTION_63_0();
    v16();
    OUTLINED_FUNCTION_31_10();
    uint64_t v34 = &v28;
    MEMORY[0x1F4188790](v17);
    uint64_t v18 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    OUTLINED_FUNCTION_57_1();
    uint64_t v19 = v30;
    OUTLINED_FUNCTION_63_0();
    v20();
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v34 = &v28;
    OUTLINED_FUNCTION_4();
    uint64_t v23 = v22;
    MEMORY[0x1F4188790](v24);
    OUTLINED_FUNCTION_62();
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
    uint64_t v29 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v28 = v12;
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v31 + *(int *)(v19 + 24), v18, v21);
    OUTLINED_FUNCTION_31_10();
    LOBYTE(v12) = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_26_2();
    v25();
    *(unsigned char *)(v31 + *(int *)(v19 + 28)) = v12 & 1;
    outlined init with copy of RemoteControlRequest();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    uint64_t v26 = OUTLINED_FUNCTION_35();
    outlined destroy of RemoteControlRequest(v26, v27);
  }
  OUTLINED_FUNCTION_14_17();
}

uint64_t RemoteControlResponse.init(uuid:requestUUID:date:allowControl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v10(a4, a1, v8);
  uint64_t v11 = type metadata accessor for RemoteControlResponse(0);
  v10(a4 + *(int *)(v11 + 20), a2, v8);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_19_19();
  uint64_t result = v12();
  *(unsigned char *)(a4 + *(int *)(v11 + 28)) = a3;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance RemoteControlResponse()
{
}

#error "1C308565C: call analysis failed (funcsize=6)"

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RemoteControlResponse(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 28)));
  return Hasher._finalize()();
}

uint64_t outlined init with copy of RemoteControlRequest()
{
  uint64_t v2 = OUTLINED_FUNCTION_9_21();
  v3(v2);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v1);
  return v0;
}

uint64_t outlined destroy of RemoteControlRequest(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t RemoteControlSuspensionReason.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_65_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    OUTLINED_FUNCTION_65_0();
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (v5 == 2) {
      char v6 = 2;
    }
    else {
      char v6 = v5 == 1;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RemoteControlSuspensionReason@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return RemoteControlSuspensionReason.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RemoteControlSuspensionReason()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RemoteControlRequest.uuid.getter()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t RemoteControlSuspendRequest.date.getter@<X0>(uint64_t a1@<X8>)
{
  return RemoteControlRequest.date.getter(type metadata accessor for RemoteControlSuspendRequest, MEMORY[0x1F418B9F8], a1);
}

uint64_t type metadata accessor for RemoteControlSuspendRequest(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteControlSuspendRequest);
}

uint64_t RemoteControlSuspendRequest.reason.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for RemoteControlSuspendRequest(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

void RemoteControlSuspendRequest.hash(into:)()
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for RemoteControlSuspendRequest(0);
  OUTLINED_FUNCTION_23_11();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 24)));
}

BOOL static RemoteControlSuspendRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v5 = type metadata accessor for RemoteControlSuspendRequest(0),
        OUTLINED_FUNCTION_60_1(v5),
        (static Date.== infix(_:_:)() & 1) != 0))
  {
    return *(unsigned __int8 *)(a1 + *(int *)(v2 + 24)) == *(unsigned __int8 *)(a2 + *(int *)(v2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t RemoteControlSuspendRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1702125924 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t RemoteControlSuspendRequest.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t RemoteControlSuspendRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 1684632949;
  }
  if (a1 == 1) {
    return 1702125924;
  }
  return 0x6E6F73616572;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RemoteControlSuspendRequest.CodingKeys()
{
  return RemoteControlSuspendRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RemoteControlSuspendRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = RemoteControlSuspendRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RemoteControlSuspendRequest.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RemoteControlSuspendRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlSuspendRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlSuspendRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t RemoteControlSuspendRequest.encode(to:)()
{
  OUTLINED_FUNCTION_40_6();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlSuspendRequest.CodingKeys>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_26_10();
  lazy protocol witness table accessor for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys();
  OUTLINED_FUNCTION_20_11();
  char v15 = 0;
  uint64_t v4 = type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  OUTLINED_FUNCTION_16_16(v1, (uint64_t)&v15, v2, v4);
  if (!v0)
  {
    uint64_t v5 = type metadata accessor for RemoteControlSuspendRequest(0);
    uint64_t v6 = OUTLINED_FUNCTION_43_4();
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
    uint64_t v7 = OUTLINED_FUNCTION_50_4();
    OUTLINED_FUNCTION_16_16(v7, v8, v9, v6);
    v14[0] = *(unsigned char *)(v1 + *(int *)(v5 + 24));
    char v13 = 2;
    lazy protocol witness table accessor for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason();
    OUTLINED_FUNCTION_16_16((uint64_t)v14, (uint64_t)&v13, v2, (uint64_t)&type metadata for RemoteControlSuspensionReason);
  }
  uint64_t v10 = OUTLINED_FUNCTION_46_4();
  return v11(v10);
}

Swift::Int RemoteControlSuspendRequest.hashValue.getter()
{
  OUTLINED_FUNCTION_7_1();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for RemoteControlSuspendRequest(0);
  OUTLINED_FUNCTION_23_11();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

void RemoteControlSuspendRequest.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  OUTLINED_FUNCTION_15_17();
  char v15 = v14;
  uint64_t v38 = v16;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlSuspendRequest.CodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v20 = OUTLINED_FUNCTION_25_7();
  uint64_t v21 = type metadata accessor for RemoteControlSuspendRequest(v20);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_64();
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  lazy protocol witness table accessor for type RemoteControlSuspendRequest.CodingKeys and conformance RemoteControlSuspendRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v36 = v13;
    uint64_t v37 = v18;
    uint64_t v35 = v21;
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v24 = v23;
    MEMORY[0x1F4188790](v25);
    OUTLINED_FUNCTION_5_1();
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
    OUTLINED_FUNCTION_42_6();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34[1] = v24;
    OUTLINED_FUNCTION_63_0();
    v26();
    uint64_t v27 = type metadata accessor for Date();
    _OWORD v34[2] = v34;
    OUTLINED_FUNCTION_4();
    uint64_t v29 = v28;
    MEMORY[0x1F4188790](v30);
    OUTLINED_FUNCTION_5_1();
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34[0] = v29;
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 32))(v36 + *(int *)(v35 + 20), 0, v27);
    lazy protocol witness table accessor for type RemoteControlSuspensionReason and conformance RemoteControlSuspensionReason();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_26_2();
    v32(v31);
    uint64_t v33 = v36;
    *(unsigned char *)(v36 + *(int *)(v35 + 24)) = a12;
    outlined init with copy of RemoteControlRequest();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    outlined destroy of RemoteControlRequest(v33, (void (*)(void))type metadata accessor for RemoteControlSuspendRequest);
  }
  OUTLINED_FUNCTION_14_17();
}

uint64_t RemoteControlSuspendRequest.init(uuid:date:reason:)@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  char v5 = *a2;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_19_19();
  v6();
  uint64_t v7 = type metadata accessor for RemoteControlSuspendRequest(0);
  uint64_t v8 = a3 + *(int *)(v7 + 20);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(v8, a1);
  *(unsigned char *)(a3 + *(int *)(v7 + 24)) = v5;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance RemoteControlSuspendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  RemoteControlSuspendRequest.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RemoteControlSuspendRequest()
{
  return RemoteControlSuspendRequest.encode(to:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RemoteControlSuspendRequest(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

void RemoteControlMessage.hash(into:)()
{
  uint64_t v2 = type metadata accessor for RemoteControlSuspendRequest(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_64();
  uint64_t v4 = type metadata accessor for RemoteControlResponse(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = OUTLINED_FUNCTION_25_7();
  type metadata accessor for RemoteControlRequest(v6);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  type metadata accessor for RemoteControlMessage(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  outlined init with copy of RemoteControlRequest();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of RemoteControlRequest();
      Hasher._combine(_:)(1uLL);
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
      OUTLINED_FUNCTION_59_2();
      OUTLINED_FUNCTION_59_2();
      type metadata accessor for Date();
      _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
      OUTLINED_FUNCTION_22_11();
      Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(v4 + 28)));
      uint64_t v13 = type metadata accessor for RemoteControlResponse;
      uint64_t v14 = v1;
      goto LABEL_9;
    case 2u:
      OUTLINED_FUNCTION_51_2();
      Swift::UInt v12 = 2;
      goto LABEL_8;
    case 3u:
      OUTLINED_FUNCTION_51_2();
      Swift::UInt v12 = 3;
      goto LABEL_8;
    case 4u:
      outlined init with take of RemoteControlRequest();
      Hasher._combine(_:)(4uLL);
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for Date();
      _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
      OUTLINED_FUNCTION_22_11();
      Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v2 + 24)));
      uint64_t v13 = type metadata accessor for RemoteControlSuspendRequest;
      uint64_t v14 = v0;
      goto LABEL_9;
    case 5u:
      OUTLINED_FUNCTION_51_2();
      Swift::UInt v12 = 5;
      goto LABEL_8;
    case 6u:
      Hasher._combine(_:)(6uLL);
      return;
    default:
      OUTLINED_FUNCTION_51_2();
      Swift::UInt v12 = 0;
LABEL_8:
      Hasher._combine(_:)(v12);
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB88]);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for Date();
      _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9F0]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v13 = type metadata accessor for RemoteControlRequest;
      uint64_t v14 = v10;
LABEL_9:
      outlined destroy of RemoteControlRequest(v14, (void (*)(void))v13);
      return;
  }
}

uint64_t static RemoteControlMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v53 = type metadata accessor for RemoteControlSuspendRequest(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_2_3();
  uint64_t v59 = v6;
  uint64_t v7 = OUTLINED_FUNCTION_30_9();
  uint64_t v54 = type metadata accessor for RemoteControlResponse(v7);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v56 = v9;
  uint64_t v10 = OUTLINED_FUNCTION_30_9();
  uint64_t v60 = type metadata accessor for RemoteControlRequest(v10);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_10_5();
  uint64_t v55 = v12;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v13);
  uint64_t v58 = (char *)&v51 - v14;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v15);
  uint64_t v57 = (char *)&v51 - v16;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v17);
  unint64_t v52 = (char *)&v51 - v18;
  uint64_t v19 = OUTLINED_FUNCTION_30_9();
  type metadata accessor for RemoteControlMessage(v19);
  OUTLINED_FUNCTION_0();
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_53_1();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_52();
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v51 - v27;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_54_2();
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v51 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlMessage, RemoteControlMessage));
  MEMORY[0x1F4188790](v32 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v35 = v34 - v33;
  outlined init with copy of RemoteControlRequest();
  outlined init with copy of RemoteControlRequest();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of RemoteControlRequest();
      if (OUTLINED_FUNCTION_18_20() != 1)
      {
        uint64_t v36 = type metadata accessor for RemoteControlResponse;
        uint64_t v37 = v2;
        goto LABEL_34;
      }
      uint64_t v43 = v56;
      outlined init with take of RemoteControlRequest();
      if ((static UUID.== infix(_:_:)() & 1) == 0
        || (static UUID.== infix(_:_:)() & 1) == 0
        || (static Date.== infix(_:_:)() & 1) == 0
        || *(unsigned __int8 *)(v2 + *(int *)(v54 + 28)) != *(unsigned __int8 *)(v43 + *(int *)(v54 + 28)))
      {
        id v44 = type metadata accessor for RemoteControlResponse;
        outlined destroy of RemoteControlRequest(v43, (void (*)(void))type metadata accessor for RemoteControlResponse);
        uint64_t v45 = v2;
        goto LABEL_43;
      }
      uint64_t v39 = type metadata accessor for RemoteControlResponse;
      outlined destroy of RemoteControlRequest(v43, (void (*)(void))type metadata accessor for RemoteControlResponse);
      uint64_t v40 = v2;
      goto LABEL_48;
    case 2u:
      outlined init with copy of RemoteControlRequest();
      if (OUTLINED_FUNCTION_18_20() != 2)
      {
        uint64_t v36 = type metadata accessor for RemoteControlRequest;
        uint64_t v37 = (uint64_t)v28;
        goto LABEL_34;
      }
      uint64_t v38 = (uint64_t)v57;
      outlined init with take of RemoteControlRequest();
      if (static UUID.== infix(_:_:)())
      {
        OUTLINED_FUNCTION_62_0();
        if (static Date.== infix(_:_:)())
        {
          uint64_t v39 = type metadata accessor for RemoteControlRequest;
          outlined destroy of RemoteControlRequest(v38, (void (*)(void))type metadata accessor for RemoteControlRequest);
          uint64_t v40 = (uint64_t)v28;
          goto LABEL_48;
        }
      }
      id v44 = type metadata accessor for RemoteControlRequest;
      outlined destroy of RemoteControlRequest(v38, (void (*)(void))type metadata accessor for RemoteControlRequest);
      uint64_t v45 = (uint64_t)v28;
      goto LABEL_43;
    case 3u:
      outlined init with copy of RemoteControlRequest();
      if (OUTLINED_FUNCTION_18_20() != 3)
      {
        uint64_t v36 = type metadata accessor for RemoteControlRequest;
        uint64_t v37 = v3;
        goto LABEL_34;
      }
      uint64_t v41 = (uint64_t)v58;
      outlined init with take of RemoteControlRequest();
      if (static UUID.== infix(_:_:)())
      {
        OUTLINED_FUNCTION_62_0();
        if (static Date.== infix(_:_:)())
        {
          uint64_t v39 = type metadata accessor for RemoteControlRequest;
          outlined destroy of RemoteControlRequest(v41, (void (*)(void))type metadata accessor for RemoteControlRequest);
          uint64_t v40 = v3;
          goto LABEL_48;
        }
      }
      id v44 = type metadata accessor for RemoteControlRequest;
      outlined destroy of RemoteControlRequest(v41, (void (*)(void))type metadata accessor for RemoteControlRequest);
      uint64_t v45 = v3;
      goto LABEL_43;
    case 4u:
      outlined init with copy of RemoteControlRequest();
      if (OUTLINED_FUNCTION_18_20() != 4)
      {
        uint64_t v36 = type metadata accessor for RemoteControlSuspendRequest;
        uint64_t v37 = v4;
        goto LABEL_34;
      }
      uint64_t v42 = v59;
      outlined init with take of RemoteControlRequest();
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && (static Date.== infix(_:_:)() & 1) != 0
        && *(unsigned __int8 *)(v4 + *(int *)(v53 + 24)) == *(unsigned __int8 *)(v42 + *(int *)(v53 + 24)))
      {
        uint64_t v39 = type metadata accessor for RemoteControlSuspendRequest;
        outlined destroy of RemoteControlRequest(v42, (void (*)(void))type metadata accessor for RemoteControlSuspendRequest);
        uint64_t v40 = v4;
        goto LABEL_48;
      }
      id v44 = type metadata accessor for RemoteControlSuspendRequest;
      outlined destroy of RemoteControlRequest(v42, (void (*)(void))type metadata accessor for RemoteControlSuspendRequest);
      uint64_t v45 = v4;
      goto LABEL_43;
    case 5u:
      outlined init with copy of RemoteControlRequest();
      if (OUTLINED_FUNCTION_18_20() != 5)
      {
        uint64_t v36 = type metadata accessor for RemoteControlRequest;
        uint64_t v37 = (uint64_t)v23;
        goto LABEL_34;
      }
      uint64_t v46 = v55;
      outlined init with take of RemoteControlRequest();
      if (static UUID.== infix(_:_:)())
      {
        OUTLINED_FUNCTION_62_0();
        if (static Date.== infix(_:_:)())
        {
          uint64_t v39 = type metadata accessor for RemoteControlRequest;
          outlined destroy of RemoteControlRequest(v46, (void (*)(void))type metadata accessor for RemoteControlRequest);
          uint64_t v40 = (uint64_t)v23;
LABEL_48:
          uint64_t v48 = v39;
          goto LABEL_49;
        }
      }
      id v44 = type metadata accessor for RemoteControlRequest;
      outlined destroy of RemoteControlRequest(v46, (void (*)(void))type metadata accessor for RemoteControlRequest);
      uint64_t v45 = (uint64_t)v23;
LABEL_43:
      uint64_t v49 = v44;
      goto LABEL_44;
    case 6u:
      if (OUTLINED_FUNCTION_18_20() == 6) {
        goto LABEL_50;
      }
      goto LABEL_35;
    default:
      outlined init with copy of RemoteControlRequest();
      if (OUTLINED_FUNCTION_18_20())
      {
        uint64_t v36 = type metadata accessor for RemoteControlRequest;
        uint64_t v37 = (uint64_t)v31;
LABEL_34:
        outlined destroy of RemoteControlRequest(v37, (void (*)(void))v36);
LABEL_35:
        outlined destroy of (RemoteControlMessage, RemoteControlMessage)(v35);
        return 0;
      }
      uint64_t v47 = (uint64_t)v52;
      outlined init with take of RemoteControlRequest();
      if ((static UUID.== infix(_:_:)() & 1) == 0
        || (OUTLINED_FUNCTION_62_0(), (static Date.== infix(_:_:)() & 1) == 0))
      {
        outlined destroy of RemoteControlRequest(v47, (void (*)(void))type metadata accessor for RemoteControlRequest);
        uint64_t v45 = OUTLINED_FUNCTION_35();
LABEL_44:
        outlined destroy of RemoteControlRequest(v45, (void (*)(void))v49);
        outlined destroy of RemoteControlRequest(v35, (void (*)(void))type metadata accessor for RemoteControlMessage);
        return 0;
      }
      outlined destroy of RemoteControlRequest(v47, (void (*)(void))type metadata accessor for RemoteControlRequest);
      uint64_t v40 = OUTLINED_FUNCTION_35();
LABEL_49:
      outlined destroy of RemoteControlRequest(v40, (void (*)(void))v48);
LABEL_50:
      outlined destroy of RemoteControlRequest(v35, (void (*)(void))type metadata accessor for RemoteControlMessage);
      return 1;
  }
}

uint64_t RemoteControlMessage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74736575716572 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65526C65636E6163 && a2 == 0xED00007473657571;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x72746E6F43646E65 && a2 == 0xEA00000000006C6FLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x43646E6570737573 && a2 == 0xEE006C6F72746E6FLL;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6F43656D75736572 && a2 == 0xED00006C6F72746ELL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000015 && a2 == 0x80000001C37966F0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v11) {
                return 6;
              }
              else {
                return 7;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t RemoteControlMessage.CodingKeys.init(intValue:)()
{
  return 7;
}

unint64_t RemoteControlMessage.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x74736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x65736E6F70736572;
      break;
    case 2:
      unint64_t result = 0x65526C65636E6163;
      break;
    case 3:
      unint64_t result = 0x72746E6F43646E65;
      break;
    case 4:
      unint64_t result = 0x43646E6570737573;
      break;
    case 5:
      unint64_t result = 0x6F43656D75736572;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

void RemoteControlMessage.EndControlCodingKeys.hash(into:)()
{
}

uint64_t RemoteControlMessage.EndControlCodingKeys.stringValue.getter()
{
  return 12383;
}

uint64_t RemoteControlMessage.PlaybackServerMessageCodingKeys.init(stringValue:)()
{
  return 1;
}

uint64_t RemoteControlMessage.CancelRequestCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int RemoteControlMessage.CancelRequestCodingKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RemoteControlMessage.CancelRequestCodingKeys()
{
  return RemoteControlMessage.CancelRequestCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.CancelRequestCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.CancelRequestCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RemoteControlMessage.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance RemoteControlMessage.CodingKeys(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance RemoteControlMessage.CodingKeys()
{
  return RemoteControlMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RemoteControlMessage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = RemoteControlMessage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RemoteControlMessage.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RemoteControlMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RemoteControlMessage.EndControlCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = RemoteControlMessage.CancelRequestCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.EndControlCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.EndControlCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RemoteControlMessage.PlaybackServerMessageCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RemoteControlMessage.PlaybackServerMessageCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RemoteControlMessage.PlaybackServerMessageCodingKeys()
{
  return protocol witness for ParticipantVideoProvider.token.getter in conformance TUVideoDeviceController();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RemoteControlMessage.PlaybackServerMessageCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = OUTLINED_FUNCTION_4_3();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.PlaybackServerMessageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.PlaybackServerMessageCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.RequestCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.RequestCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.ResponseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.ResponseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.ResumeControlCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.ResumeControlCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteControlMessage.SuspendControlCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RemoteControlMessage.SuspendControlCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

void RemoteControlMessage.encode(to:)()
{
  OUTLINED_FUNCTION_15_17();
  uint64_t v98 = v2;
  uint64_t v99 = v1;
  uint64_t v5 = v4;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.PlaybackServerMessageCodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v90 = v6;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_29_12(v8, v71[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.ResumeControlCodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v92 = v10;
  uint64_t v93 = v9;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_28_7(v11, v71[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.SuspendControlCodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v88 = v13;
  uint64_t v89 = v12;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_27_10(v14, v71[0]);
  uint64_t v85 = type metadata accessor for RemoteControlSuspendRequest(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_3();
  uint64_t v87 = v16;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.EndControlCodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v84 = v17;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_2_3();
  uint64_t v83 = v19;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.CancelRequestCodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v81 = v20;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_2_3();
  uint64_t v80 = v22;
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.ResponseCodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v78 = v23;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_2_3();
  uint64_t v77 = v25;
  uint64_t v26 = OUTLINED_FUNCTION_30_9();
  uint64_t v75 = type metadata accessor for RemoteControlResponse(v26);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_2_3();
  uint64_t v76 = v28;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.RequestCodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v73 = v29;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_2_3();
  v71[1] = v31;
  uint64_t v32 = OUTLINED_FUNCTION_30_9();
  uint64_t v94 = type metadata accessor for RemoteControlRequest(v32);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v33);
  OUTLINED_FUNCTION_10_5();
  uint64_t v72 = v34;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_54_2();
  uint64_t v37 = MEMORY[0x1F4188790](v36);
  uint64_t v39 = (char *)v71 - v38;
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)v71 - v40;
  type metadata accessor for RemoteControlMessage(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RemoteControlMessage.CodingKeys>);
  OUTLINED_FUNCTION_4();
  int v96 = v43;
  uint64_t v97 = v44;
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_17_0();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys();
  uint64_t v95 = v0;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of RemoteControlRequest();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v52 = v76;
      outlined init with take of RemoteControlRequest();
      lazy protocol witness table accessor for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys();
      OUTLINED_FUNCTION_64_0();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlResponse and conformance RemoteControlResponse, (void (*)(uint64_t))type metadata accessor for RemoteControlResponse);
      OUTLINED_FUNCTION_48_8(v52, v53, v79, v75);
      OUTLINED_FUNCTION_26_2();
      v54();
      uint64_t v55 = type metadata accessor for RemoteControlResponse;
      uint64_t v56 = v52;
      goto LABEL_5;
    case 2u:
      outlined init with take of RemoteControlRequest();
      lazy protocol witness table accessor for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys();
      OUTLINED_FUNCTION_64_0();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      OUTLINED_FUNCTION_58_1((uint64_t)v39, v57);
      OUTLINED_FUNCTION_26_2();
      v58();
      uint64_t v55 = type metadata accessor for RemoteControlRequest;
      uint64_t v56 = (uint64_t)v39;
LABEL_5:
      outlined destroy of RemoteControlRequest(v56, (void (*)(void))v55);
      OUTLINED_FUNCTION_66_1();
      uint64_t v50 = (char *)v3;
      goto LABEL_11;
    case 3u:
      outlined init with take of RemoteControlRequest();
      lazy protocol witness table accessor for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys();
      OUTLINED_FUNCTION_24_14();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      OUTLINED_FUNCTION_58_1(v3, v59);
      OUTLINED_FUNCTION_26_2();
      v60();
      uint64_t v61 = type metadata accessor for RemoteControlRequest;
      uint64_t v62 = v3;
      goto LABEL_10;
    case 4u:
      uint64_t v63 = v87;
      outlined init with take of RemoteControlRequest();
      lazy protocol witness table accessor for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys();
      OUTLINED_FUNCTION_24_14();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlSuspendRequest and conformance RemoteControlSuspendRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlSuspendRequest);
      OUTLINED_FUNCTION_48_8(v63, v64, v89, v85);
      OUTLINED_FUNCTION_26_2();
      v65();
      uint64_t v66 = type metadata accessor for RemoteControlSuspendRequest;
      goto LABEL_9;
    case 5u:
      uint64_t v63 = v72;
      outlined init with take of RemoteControlRequest();
      lazy protocol witness table accessor for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys();
      OUTLINED_FUNCTION_24_14();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      OUTLINED_FUNCTION_48_8(v63, v67, v93, v94);
      OUTLINED_FUNCTION_26_2();
      v68();
      uint64_t v66 = type metadata accessor for RemoteControlRequest;
LABEL_9:
      uint64_t v61 = v66;
      uint64_t v62 = v63;
LABEL_10:
      outlined destroy of RemoteControlRequest(v62, (void (*)(void))v61);
      OUTLINED_FUNCTION_66_1();
      uint64_t v50 = v39;
LABEL_11:
      uint64_t v51 = v0;
      goto LABEL_12;
    case 6u:
      lazy protocol witness table accessor for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      OUTLINED_FUNCTION_26_2();
      v69();
      OUTLINED_FUNCTION_66_1();
      OUTLINED_FUNCTION_26_2();
      v70();
      goto LABEL_13;
    default:
      outlined init with take of RemoteControlRequest();
      lazy protocol witness table accessor for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys();
      uint64_t v45 = v95;
      uint64_t v46 = v96;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      OUTLINED_FUNCTION_48_8((uint64_t)v41, v47, v74, v94);
      OUTLINED_FUNCTION_26_2();
      v48();
      outlined destroy of RemoteControlRequest((uint64_t)v41, (void (*)(void))type metadata accessor for RemoteControlRequest);
      OUTLINED_FUNCTION_66_1();
      uint64_t v50 = v45;
      uint64_t v51 = v46;
LABEL_12:
      v49(v50, v51);
LABEL_13:
      OUTLINED_FUNCTION_14_17();
      return;
  }
}

Swift::Int RemoteControlMessage.hashValue.getter()
{
  return Hasher._finalize()();
}

void RemoteControlMessage.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  OUTLINED_FUNCTION_15_17();
  a26 = v30;
  a27 = v31;
  uint64_t v123 = v27;
  uint64_t v33 = v32;
  v116[26] = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.PlaybackServerMessageCodingKeys>);
  OUTLINED_FUNCTION_4();
  v116[16] = v36;
  v116[17] = v35;
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_28_7(v37, v116[0]);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.ResumeControlCodingKeys>);
  OUTLINED_FUNCTION_4();
  v116[18] = v38;
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_2_3();
  v116[27] = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.SuspendControlCodingKeys>);
  OUTLINED_FUNCTION_4();
  v116[14] = v42;
  v116[15] = v41;
  MEMORY[0x1F4188790](v41);
  OUTLINED_FUNCTION_2_3();
  v116[24] = v43;
  v116[13] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.EndControlCodingKeys>);
  OUTLINED_FUNCTION_4();
  v116[12] = v44;
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_2_3();
  v116[23] = v46;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.CancelRequestCodingKeys>);
  OUTLINED_FUNCTION_4();
  v116[11] = v47;
  MEMORY[0x1F4188790](v48);
  OUTLINED_FUNCTION_2_3();
  v116[22] = v49;
  v116[10] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.ResponseCodingKeys>);
  OUTLINED_FUNCTION_4();
  v116[9] = v50;
  MEMORY[0x1F4188790](v51);
  OUTLINED_FUNCTION_29_12(v52, v116[0]);
  v116[8] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.RequestCodingKeys>);
  OUTLINED_FUNCTION_4();
  v116[7] = v53;
  MEMORY[0x1F4188790](v54);
  OUTLINED_FUNCTION_27_10(v55, v116[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RemoteControlMessage.CodingKeys>);
  OUTLINED_FUNCTION_4();
  uint64_t v117 = v57;
  uint64_t v118 = v56;
  MEMORY[0x1F4188790](v56);
  OUTLINED_FUNCTION_21();
  uint64_t v60 = v59 - v58;
  uint64_t v121 = type metadata accessor for RemoteControlMessage(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v61);
  OUTLINED_FUNCTION_10_5();
  v116[19] = v62;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v63);
  v116[6] = (uint64_t)v116 - v64;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v65);
  OUTLINED_FUNCTION_52();
  MEMORY[0x1F4188790](v66);
  OUTLINED_FUNCTION_53_1();
  uint64_t v68 = MEMORY[0x1F4188790](v67);
  id v70 = (char *)v116 - v69;
  uint64_t v71 = MEMORY[0x1F4188790](v68);
  uint64_t v73 = (char *)v116 - v72;
  MEMORY[0x1F4188790](v71);
  uint64_t v75 = (char *)v116 - v74;
  uint64_t v76 = v33[3];
  id v122 = v33;
  __swift_project_boxed_opaque_existential_1(v33, v76);
  lazy protocol witness table accessor for type RemoteControlMessage.CodingKeys and conformance RemoteControlMessage.CodingKeys();
  uint64_t v77 = v123;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v77) {
    goto LABEL_7;
  }
  v116[2] = (uint64_t)v73;
  v116[3] = (uint64_t)v70;
  v116[5] = v29;
  v116[4] = v28;
  uint64_t v78 = v120;
  uint64_t v123 = v75;
  uint64_t v79 = v118;
  uint64_t v80 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v81 = *(void *)(v80 + 16);
  if (!v81
    || (v116[1] = 0,
        uint64_t v82 = *(unsigned __int8 *)(v80 + 32),
        specialized ArraySlice.subscript.getter(1, v81, v80, v80 + 32, 0, (2 * v81) | 1),
        uint64_t v84 = v83,
        unint64_t v86 = v85,
        swift_bridgeObjectRelease(),
        v84 != v86 >> 1))
  {
    uint64_t v87 = v117;
    uint64_t v88 = v121;
    uint64_t v89 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v91 = v90;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v91 = v88;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v89 - 8) + 104))(v91, *MEMORY[0x1E4FBBA70], v89);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v60, v79);
LABEL_7:
    uint64_t v78 = (uint64_t)v122;
    goto LABEL_8;
  }
  switch(v82)
  {
    case 1:
      a12 = 1;
      lazy protocol witness table accessor for type RemoteControlMessage.ResponseCodingKeys and conformance RemoteControlMessage.ResponseCodingKeys();
      OUTLINED_FUNCTION_6_31((uint64_t)&unk_1F1E98DC0, (uint64_t)&a12);
      OUTLINED_FUNCTION_32_12();
      type metadata accessor for RemoteControlResponse(0);
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlResponse and conformance RemoteControlResponse, (void (*)(uint64_t))type metadata accessor for RemoteControlResponse);
      OUTLINED_FUNCTION_25_11();
      OUTLINED_FUNCTION_39_6();
      OUTLINED_FUNCTION_44_5();
      OUTLINED_FUNCTION_26_2();
      v92();
      swift_unknownObjectRelease();
      uint64_t v93 = OUTLINED_FUNCTION_5_42();
      v94(v93);
      goto LABEL_20;
    case 2:
      a13 = 2;
      lazy protocol witness table accessor for type RemoteControlMessage.CancelRequestCodingKeys and conformance RemoteControlMessage.CancelRequestCodingKeys();
      OUTLINED_FUNCTION_6_31((uint64_t)&unk_1F1E98E50, (uint64_t)&a13);
      OUTLINED_FUNCTION_32_12();
      OUTLINED_FUNCTION_61_0();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (v84)
      {
        OUTLINED_FUNCTION_26_2();
        v95();
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_26_2();
        v96();
        break;
      }
      OUTLINED_FUNCTION_26_2();
      v102();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_26_2();
      v103();
      goto LABEL_20;
    case 3:
      a14 = 3;
      lazy protocol witness table accessor for type RemoteControlMessage.EndControlCodingKeys and conformance RemoteControlMessage.EndControlCodingKeys();
      OUTLINED_FUNCTION_6_31((uint64_t)&unk_1F1E98EE0, (uint64_t)&a14);
      OUTLINED_FUNCTION_32_12();
      OUTLINED_FUNCTION_61_0();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      OUTLINED_FUNCTION_25_11();
      OUTLINED_FUNCTION_39_6();
      OUTLINED_FUNCTION_44_5();
      OUTLINED_FUNCTION_26_2();
      v104();
      swift_unknownObjectRelease();
      uint64_t v105 = OUTLINED_FUNCTION_5_42();
      v106(v105);
      goto LABEL_20;
    case 4:
      a15 = 4;
      lazy protocol witness table accessor for type RemoteControlMessage.SuspendControlCodingKeys and conformance RemoteControlMessage.SuspendControlCodingKeys();
      OUTLINED_FUNCTION_6_31((uint64_t)&unk_1F1E98F70, (uint64_t)&a15);
      OUTLINED_FUNCTION_32_12();
      type metadata accessor for RemoteControlSuspendRequest(0);
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlSuspendRequest and conformance RemoteControlSuspendRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlSuspendRequest);
      OUTLINED_FUNCTION_25_11();
      OUTLINED_FUNCTION_39_6();
      OUTLINED_FUNCTION_44_5();
      OUTLINED_FUNCTION_26_2();
      v107();
      swift_unknownObjectRelease();
      uint64_t v108 = OUTLINED_FUNCTION_5_42();
      v109(v108);
      goto LABEL_20;
    case 5:
      a16 = 5;
      lazy protocol witness table accessor for type RemoteControlMessage.ResumeControlCodingKeys and conformance RemoteControlMessage.ResumeControlCodingKeys();
      OUTLINED_FUNCTION_6_31((uint64_t)&unk_1F1E99000, (uint64_t)&a16);
      OUTLINED_FUNCTION_32_12();
      OUTLINED_FUNCTION_61_0();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_44_5();
      if (v84)
      {
        OUTLINED_FUNCTION_26_2();
        v97();
        swift_unknownObjectRelease();
        uint64_t v98 = OUTLINED_FUNCTION_5_42();
        v99(v98);
      }
      else
      {
        OUTLINED_FUNCTION_26_2();
        v113();
        swift_unknownObjectRelease();
        uint64_t v114 = OUTLINED_FUNCTION_5_42();
        v115(v114);
LABEL_20:
        swift_storeEnumTagMultiPayload();
        outlined init with take of RemoteControlRequest();
LABEL_21:
        outlined init with take of RemoteControlRequest();
      }
      break;
    case 6:
      a17 = 6;
      lazy protocol witness table accessor for type RemoteControlMessage.PlaybackServerMessageCodingKeys and conformance RemoteControlMessage.PlaybackServerMessageCodingKeys();
      OUTLINED_FUNCTION_6_31((uint64_t)&unk_1F1E99020, (uint64_t)&a17);
      OUTLINED_FUNCTION_32_12();
      OUTLINED_FUNCTION_26_2();
      v100();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_26_2();
      v101();
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
    default:
      a11 = 0;
      lazy protocol witness table accessor for type RemoteControlMessage.RequestCodingKeys and conformance RemoteControlMessage.RequestCodingKeys();
      OUTLINED_FUNCTION_6_31((uint64_t)&unk_1F1E98D30, (uint64_t)&a11);
      OUTLINED_FUNCTION_61_0();
      lazy protocol witness table accessor for type RemoteControlRequest and conformance RemoteControlRequest(&lazy protocol witness table cache variable for type RemoteControlRequest and conformance RemoteControlRequest, (void (*)(uint64_t))type metadata accessor for RemoteControlRequest);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_44_5();
      OUTLINED_FUNCTION_26_2();
      v110();
      swift_unknownObjectRelease();
      uint64_t v111 = OUTLINED_FUNCTION_5_42();
      v112(v111);
      swift_storeEnumTagMultiPayload();
      outlined init with take of RemoteControlRequest();
      uint64_t v78 = (uint64_t)v122;
      goto LABEL_21;
  }
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1(v78);
  OUTLINED_FUNCTION_14_17();
}