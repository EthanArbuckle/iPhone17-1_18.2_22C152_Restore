uint64_t closure #1 in closure #1 in ScreenSharingSpectatorModalOverlay.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumTagSinglePayload;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  long long v114;
  long long v115;
  long long v116;
  long long v117;
  long long v118;

  v113 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>);
  MEMORY[0x1F4188790](v3 - 8);
  v103 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>);
  v5 = MEMORY[0x1F4188790](v111);
  v102 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v101 = (uint64_t)&v94 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?);
  v9 = MEMORY[0x1F4188790](v8 - 8);
  v112 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v110 = (uint64_t)&v94 - v11;
  v12 = type metadata accessor for UserInterfaceSizeClass();
  v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  v99 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  v16 = MEMORY[0x1F4188790](v15);
  v18 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  v20 = (char *)&v94 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  v22 = MEMORY[0x1F4188790](v21 - 8);
  v109 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1F4188790](v22);
  v105 = (char *)&v94 - v25;
  v26 = MEMORY[0x1F4188790](v24);
  v108 = (char *)&v94 - v27;
  v28 = MEMORY[0x1F4188790](v26);
  v30 = (char *)&v94 - v29;
  v31 = MEMORY[0x1F4188790](v28);
  v33 = (char *)&v94 - v32;
  MEMORY[0x1F4188790](v31);
  v35 = (char *)&v94 - v34;
  v36 = ScreenSharingSpectatorModalOverlay.title.getter();
  v38 = (unsigned int *)MEMORY[0x1E4F3DA58];
  if (!v37)
  {
    v106 = 0;
    v107 = 0;
    v46 = 0;
    v104 = 0;
    v47 = (uint64_t)v109;
    goto LABEL_13;
  }
  v107 = v18;
  *(void *)&v114 = v36;
  *((void *)&v114 + 1) = v37;
  lazy protocol witness table accessor for type String and conformance String();
  v96 = Text.init<A>(_:)();
  v95 = v39;
  LODWORD(v106) = v40;
  v97 = v41;
  specialized Environment.wrappedValue.getter();
  v42 = *v38;
  v100 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v33, v42, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v12);
  v43 = (uint64_t)&v20[*(int *)(v15 + 48)];
  outlined init with copy of FeatureEligibility?((uint64_t)v35, (uint64_t)v20, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined init with copy of FeatureEligibility?((uint64_t)v33, v43, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v12);
  v98 = v15;
  if (EnumTagSinglePayload != 1)
  {
    outlined init with copy of FeatureEligibility?((uint64_t)v20, (uint64_t)v30, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload(v43, 1, v12) != 1)
    {
      v48 = v100;
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 32);
      v104 = a1;
      v50 = v99;
      v49(v99, v43, v12);
      lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
      v51 = dispatch thunk of static Equatable.== infix(_:_:)();
      v52 = *(void (**)(char *, uint64_t))(v48 + 8);
      v52(v50, v12);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v33, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v35, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v52(v30, v12);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      v18 = v107;
      v45 = v109;
      if (v51) {
        goto LABEL_10;
      }
LABEL_11:
      static Font.title3.getter();
      static Font.Weight.medium.getter();
      goto LABEL_12;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v33, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v35, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v30, v12);
LABEL_8:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    v18 = v107;
    v45 = v109;
    goto LABEL_11;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v33, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v35, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  if (__swift_getEnumTagSinglePayload(v43, 1, v12) != 1) {
    goto LABEL_8;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  v18 = v107;
  v45 = v109;
LABEL_10:
  static Font.title2.getter();
  static Font.Weight.semibold.getter();
LABEL_12:
  Font.weight(_:)();
  swift_release();
  v53 = v106 & 1;
  v54 = v96;
  v55 = v95;
  v56 = Text.font(_:)();
  v106 = v57;
  v107 = (char *)v56;
  v59 = v58;
  v104 = v60;
  swift_release();
  v46 = v59 & 1;
  outlined consume of Text.Storage(v54, v55, v53);
  swift_bridgeObjectRelease();
  v13 = v100;
  v15 = v98;
  v47 = (uint64_t)v45;
LABEL_13:
  v61 = (uint64_t)v105;
  v62 = ScreenSharingSpectatorModalOverlay.statusText.getter();
  v64 = (uint64_t)v108;
  if (v63)
  {
    *(void *)&v114 = v62;
    *((void *)&v114 + 1) = v63;
    lazy protocol witness table accessor for type String and conformance String();
    v109 = (char *)Text.init<A>(_:)();
    v105 = v65;
    LODWORD(v100) = v66;
    specialized Environment.wrappedValue.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v61, *MEMORY[0x1E4F3DA58], v12);
    __swift_storeEnumTagSinglePayload(v61, 0, 1, v12);
    v67 = (uint64_t)&v18[*(int *)(v15 + 48)];
    outlined init with copy of FeatureEligibility?(v64, (uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined init with copy of FeatureEligibility?(v61, v67, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v12) == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v61, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v64, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (__swift_getEnumTagSinglePayload(v67, 1, v12) == 1)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
LABEL_22:
        static Font.body.getter();
LABEL_24:
        v73 = v100 & 1;
        v74 = (uint64_t)v109;
        v75 = (uint64_t)v105;
        v76 = Text.font(_:)();
        v78 = v77;
        v80 = v79;
        v82 = v81;
        swift_release();
        outlined consume of Text.Storage(v74, v75, v73);
        swift_bridgeObjectRelease();
        v114 = xmmword_1C376FD60;
        v115 = xmmword_1C376FD70;
        v116 = xmmword_1C376FD80;
        v117 = xmmword_1C376FD90;
        v118 = xmmword_1C376D040;
        v83 = (uint64_t)v103;
        View._colorMatrix(_:)();
        v69 = v111;
        v84 = v102;
        outlined init with copy of FeatureEligibility?(v83, (uint64_t)&v102[*(int *)(v111 + 36)], &demangling cache variable for type metadata for _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>);
        *(void *)v84 = v76;
        *((void *)v84 + 1) = v78;
        v84[16] = v80 & 1;
        *((void *)v84 + 3) = v82;
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v83, &demangling cache variable for type metadata for _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>);
        v85 = (uint64_t)v84;
        v86 = v101;
        outlined init with take of Any?(v85, v101, &demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>);
        v70 = v110;
        outlined init with take of Any?(v86, v110, &demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>);
        v68 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      outlined init with copy of FeatureEligibility?((uint64_t)v18, v47, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (__swift_getEnumTagSinglePayload(v67, 1, v12) != 1)
      {
        v71 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v99, v67, v12);
        lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
        LODWORD(v98) = dispatch thunk of static Equatable.== infix(_:_:)();
        v72 = *(void (**)(char *, uint64_t))(v13 + 8);
        v72(v71, v12);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v61, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v64, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        v72((char *)v47, v12);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        if (v98) {
          goto LABEL_22;
        }
LABEL_23:
        static Font.subheadline.getter();
        static Font.Weight.regular.getter();
        Font.weight(_:)();
        swift_release();
        goto LABEL_24;
      }
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v61, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v64, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v47, v12);
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
    goto LABEL_23;
  }
  v68 = 1;
  v70 = v110;
  v69 = v111;
LABEL_25:
  __swift_storeEnumTagSinglePayload(v70, v68, 1, v69);
  v87 = v112;
  outlined init with copy of FeatureEligibility?(v70, v112, &demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?);
  v88 = v113;
  v90 = v106;
  v89 = (uint64_t)v107;
  *v113 = v107;
  v88[1] = v90;
  v91 = v104;
  v88[2] = v46;
  v88[3] = v91;
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?));
  outlined init with copy of FeatureEligibility?(v87, (uint64_t)v88 + *(int *)(v92 + 48), &demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?);
  outlined copy of Text?(v89, v90, v46, v91);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v70, &demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v87, &demangling cache variable for type metadata for ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?);
  return outlined consume of Text?(v89, v90, v46, v91);
}

uint64_t ScreenSharingSpectatorModalOverlay.init()@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  swift_storeEnumTagMultiPayload();
  v2 = (char *)a1 + *(int *)(type metadata accessor for ScreenSharingSpectatorModalOverlay(0) + 20);
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t result = Environment.init<A>(_:)();
  *(void *)v2 = result;
  v2[8] = v4 & 1;
  return result;
}

uint64_t ScreenSharingOverlayPlatterButtonStyle.init()@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ScreenSharingSpectatorModalOverlay.init(horizontalSizeClass:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of Any?(a1, a2, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  uint64_t v3 = a2 + *(int *)(type metadata accessor for ScreenSharingSpectatorModalOverlay(0) + 20);
  type metadata accessor for ScreenSharingSpectatorViewModel();
  lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  uint64_t result = Environment.init<A>(_:)();
  *(void *)uint64_t v3 = result;
  *(unsigned char *)(v3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_1C31146E0()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t key path setter for EnvironmentValues.controlSize : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ControlSize();
  MEMORY[0x1F4188790](v2);
  char v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return MEMORY[0x1C8771340](v4);
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C31147FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  return EnvironmentValues.font.setter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_BackdropEffectPlaceholder, _BlurEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_BackdropEffectPlaceholder, _BlurEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_BackdropEffectPlaceholder, _BlurEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_BackdropEffectPlaceholder, _BlurEffect>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_BackdropEffectPlaceholder, _BlurEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for ScreenSharingSpectatorModalOverlay(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ScreenSharingSpectatorModalOverlay);
}

uint64_t lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in ModalOverlayTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for View in ActivityIndicator()
{
  return lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ActivityIndicator and conformance ActivityIndicator, (void (*)(uint64_t))type metadata accessor for ActivityIndicator);
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in ScreenSharingOverlayPlatterButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ScreenSharingSpectatorModalOverlay()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ModalOverlayTransition()
{
  return &type metadata for ModalOverlayTransition;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActivityIndicator(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ControlSize();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for ActivityIndicator(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ControlSize();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for ActivityIndicator(void *a1, void *a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ControlSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithCopy for ActivityIndicator(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<ControlSize>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ControlSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

char *initializeWithTake for ActivityIndicator(char *a1, char *a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ControlSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for ActivityIndicator(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<ControlSize>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ControlSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivityIndicator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3114F94);
}

uint64_t sub_1C3114F94()
{
  OUTLINED_FUNCTION_86();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>);
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for ActivityIndicator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3114FF0);
}

uint64_t sub_1C3114FF0()
{
  OUTLINED_FUNCTION_86();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ControlSize>);
  uint64_t v0 = OUTLINED_FUNCTION_23_18();
  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

void type metadata completion function for ActivityIndicator()
{
  type metadata accessor for Environment<ControlSize>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<ControlSize>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ControlSize>.Content)
  {
    type metadata accessor for ControlSize();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ControlSize>.Content);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ScreenSharingOverlayPlatterButtonStyle(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v5))
      {
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v5);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ScreenSharingOverlayPlatterButtonStyle(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t result = __swift_getEnumTagSinglePayload(a1, 1, v2);
    if (!result)
    {
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
      return v4(a1, v2);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for ScreenSharingOverlayPlatterButtonStyle(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v4))
    {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v4);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for ScreenSharingOverlayPlatterButtonStyle(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v4);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ScreenSharingOverlayPlatterButtonStyle(void *a1, const void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v5))
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ScreenSharingOverlayPlatterButtonStyle(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v5))
      {
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v5);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingOverlayPlatterButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3115808);
}

uint64_t sub_1C3115808()
{
  OUTLINED_FUNCTION_86();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingOverlayPlatterButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3115864);
}

uint64_t sub_1C3115864()
{
  OUTLINED_FUNCTION_86();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  uint64_t v0 = OUTLINED_FUNCTION_23_18();
  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t type metadata accessor for ScreenSharingOverlayPlatterButtonStyle(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ScreenSharingOverlayPlatterButtonStyle);
}

void type metadata completion function for ScreenSharingOverlayPlatterButtonStyle()
{
  type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ScreenSharingSpectatorModalOverlay(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    uint64_t v13 = *(void *)v12;
    LOBYTE(v12) = v12[8];
    *(void *)v11 = v13;
    v11[8] = (char)v12;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for ScreenSharingSpectatorModalOverlay(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(a1, 1, v2)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
    }
  }
  else
  {
    swift_release();
  }
  return swift_release();
}

void *initializeWithCopy for ScreenSharingSpectatorModalOverlay(void *a1, void *a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  *(void *)uint64_t v9 = v11;
  v9[8] = (char)v10;
  swift_retain();
  return a1;
}

void *assignWithCopy for ScreenSharingSpectatorModalOverlay(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  *(void *)uint64_t v9 = v11;
  v9[8] = (char)v10;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for ScreenSharingSpectatorModalOverlay(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  return a1;
}

char *assignWithTake for ScreenSharingSpectatorModalOverlay(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(void *)v11;
  LOBYTE(v11) = v11[8];
  *(void *)uint64_t v10 = v12;
  v10[8] = (char)v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingSpectatorModalOverlay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3116110);
}

uint64_t sub_1C3116110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 > 1) {
      return (v9 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ScreenSharingSpectatorModalOverlay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31161B4);
}

void sub_1C31161B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  OUTLINED_FUNCTION_86();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = OUTLINED_FUNCTION_23_18();
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
  else
  {
    *(unsigned char *)(v5 + *(int *)(a4 + 20) + 8) = -v4;
  }
}

void type metadata completion function for ScreenSharingSpectatorModalOverlay()
{
  type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1C31162C8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type PlaceholderContentView<ModalOverlayTransition> and conformance PlaceholderContentView<A>, &demangling cache variable for type metadata for PlaceholderContentView<ModalOverlayTransition>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>, _ContentShapeModifier<Capsule>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>, _ContentShapeModifier<Capsule>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>, _ContentShapeModifier<Capsule>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>, _ContentShapeModifier<Capsule>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ContentShapeModifier<Capsule> and conformance _ContentShapeModifier<A>, &demangling cache variable for type metadata for _ContentShapeModifier<Capsule>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>, _ContentShapeModifier<Capsule>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, _FlexFrameLayout>, _BackgroundModifier<ModifiedContent<Capsule, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<ModalOverlayTransition>, _OpacityEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass((unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, MEMORY[0x1E4F3DB78]);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>, _AnimationModifier<RemoteControlState>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>, _AnimationModifier<RemoteControlState>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>, _AnimationModifier<RemoteControlState>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>, _AnimationModifier<RemoteControlState>>);
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<RemoteControlState> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<RemoteControlState>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>, _AnimationModifier<RemoteControlState>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ParticipantAvatar, _FrameLayout>, ModifiedContent<Spacer, _FrameLayout>, IDView<VStack<TupleView<(Text?, ModifiedContent<Text, _BackdropEffect<<<opaque return type of View._colorMatrix(_:)>>.0>>?)>>, RemoteControlState>, ModifiedContent<Spacer, _FrameLayout>, ModifiedContent<_ConditionalContent<_ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>, ZStack<ModifiedContent<ActivityIndicator, _EnvironmentKeyWritingModifier<ControlSize>>>>, _FlexFrameLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
  id v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t outlined retain of _ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>(uint64_t a1)
{
  return a1;
}

id outlined copy of _ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, char a12)
{
  if (a12)
  {
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a1, a2 & 1);
    return a4;
  }
  else
  {
    return outlined copy of _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(a1, a2, a3, a4);
  }
}

id outlined copy of _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a1, a2 & 1);
  return a4;
}

uint64_t outlined retain of HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  swift_retain();
  id v3 = v2;
  return a1;
}

uint64_t outlined retain of ModifiedContent<Text, _PaddingLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Text.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of Text.Storage(uint64_t a1)
{
  return a1;
}

void *outlined copy of ParticipantContactDetails?(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v3 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with copy of Capsule(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of Capsule(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
    type metadata accessor for ScreenSharingOverlayPlatterButtonStyle(255);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass(&lazy protocol witness table cache variable for type ScreenSharingOverlayPlatterButtonStyle and conformance ScreenSharingOverlayPlatterButtonStyle, (void (*)(uint64_t))type metadata accessor for ScreenSharingOverlayPlatterButtonStyle);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t sub_1C3116C98()
{
  uint64_t v1 = *(void *)(type metadata accessor for ScreenSharingSpectatorModalOverlay(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v0 + v2, 1, v3)) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of ActivityIndicator(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_90();
  v5(v4);
  return a2;
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorModalOverlay.statusView.getter()
{
  type metadata accessor for ScreenSharingSpectatorModalOverlay(0);
  return closure #1 in ScreenSharingSpectatorModalOverlay.statusView.getter();
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *OUTLINED_FUNCTION_41_8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char __src)
{
  return memcpy(a1, &__src, 0x70uLL);
}

uint64_t ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = objc_msgSend(self, sel_tu_contactStoreConfigurationForConversation_, a1);
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v8);

  id v10 = objc_msgSend(a1, sel_mergedRemoteMembers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationMember and conformance NSObject();
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = specialized Set.count.getter(v11);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_18:
    id v41 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
    id v42 = a2;
    id v43 = a5;
    ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v9, v17, a2, v43);
    id v45 = v44;
    id v46 = objc_msgSend(v45, sel_avatarViewController);
    uint64_t v47 = a4;
    if (!a4)
    {
      a3 = TUConversation.participantListDisplayName.getter();
      uint64_t v47 = v48;
    }
    uint64_t v49 = outlined bridged method (pb) of @objc TUConversation.messagesGroupPhotoData.getter(a1);
    unint64_t v51 = v50;
    id v52 = objc_msgSend(v45, sel_contacts);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v53 = objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
    id v54 = @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(a3, v47, v49, v51);
    objc_msgSend(v46, sel_updateViewWithGroupIdentity_, v54);

    return (uint64_t)v45;
  }
  uint64_t v13 = v12;
  v55 = a5;
  v56 = a2;
  uint64_t v63 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v16 = 1;
  }
  else
  {
    uint64_t result = specialized _NativeSet.startIndex.getter(v11);
    char v16 = v18 & 1;
  }
  uint64_t v60 = result;
  uint64_t v61 = v15;
  char v62 = v16;
  if ((v13 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v20 = v60;
      uint64_t v19 = v61;
      char v21 = v62;
      uint64_t v22 = OUTLINED_FUNCTION_5_51();
      specialized Set.subscript.getter(v22, v23, v24, v25, &lazy cache variable for type metadata for TUConversationMember);
      v27 = v26;
      id v28 = objc_msgSend(v26, sel_handle);
      unsigned __int8 v29 = objc_msgSend(v28, sel_shouldHideContact);

      if (v29)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_initWithContact_, 0);
      }
      else
      {
        id v30 = objc_msgSend(v27, sel_handle);
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v30);

        v27 = v30;
      }

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if ((v11 & 0xC000000000000001) != 0)
      {
        if ((v21 & 1) == 0) {
          goto LABEL_22;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationMember>.Index);
        v40 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v40(v59, 0);
      }
      else
      {
        int64_t v31 = OUTLINED_FUNCTION_5_51();
        int64_t v35 = specialized _NativeSet.index(after:)(v31, v32, v33, v34);
        uint64_t v37 = v36;
        char v39 = v38;
        outlined consume of Set<TUHandle>.Index._Variant(v20, v19, v21);
        uint64_t v60 = v35;
        uint64_t v61 = v37;
        char v62 = v39 & 1;
      }
      --v13;
    }
    while (v13);
    outlined consume of Set<TUHandle>.Index._Variant(v60, v61, v62);
    uint64_t v17 = v63;
    swift_bridgeObjectRelease();
    a5 = v55;
    a2 = v56;
    goto LABEL_18;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TUConversationMember and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject);
  }
  return result;
}

uint64_t ConversationControlsBadgingAvatarViewController.__allocating_init(contactStore:handle:badgeImage:)(void *a1, void *a2, void *a3)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1C3769830;
    unsigned __int8 v7 = objc_msgSend(a2, sel_shouldHideContact);
    id v8 = objc_allocWithZone(MEMORY[0x1E4F1BA40]);
    if (v7) {
      id v9 = objc_msgSend(v8, sel_initWithContact_, 0);
    }
    else {
      id v9 = objc_msgSend(v8, sel__initWithHandle_, a2);
    }
    *(void *)(v6 + 32) = v9;
    specialized Array._endMutation()();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  id v10 = objc_msgSend(self, sel_clearColor);
  id v11 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
  ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(a1, v6, a3, v10);
  uint64_t v13 = v12;

  return v13;
}

void ConversationControlsBadgingAvatarViewController.__allocating_init(contactStore:participants:badgeImage:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v20[1] = a1;
  char v21 = a3;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  v20[0] = a2;
  uint64_t v12 = a2 + ((v11 + 32) & ~v11);
  uint64_t v13 = *(void *)(v7 + 72);
  do
  {
    outlined init with copy of Participant(v12, (uint64_t)v9);
    v14 = *(void **)&v9[*(int *)(v6 + 28)];
    if (!v14) {
      goto LABEL_6;
    }
    id v15 = v14;
    if (objc_msgSend(v15, sel_shouldHideContact, v20[0]))
    {

LABEL_6:
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_initWithContact_, 0);
      goto LABEL_8;
    }
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v15);

LABEL_8:
    outlined destroy of Participant((uint64_t)v9);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v12 += v13;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  a3 = v21;
LABEL_11:
  id v16 = objc_msgSend(self, sel_clearColor);
  id v17 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
  char v18 = (void *)OUTLINED_FUNCTION_4_18();
  ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v18, v19, a3, v16);
}

id ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:activeRemoteParticipant:badgeImage:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t ObjectType = swift_getObjectType();
  return specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:activeRemoteParticipant:badgeImage:)(a1, a3, a4, v4, ObjectType, a2);
}

void ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:badgeImage:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ObjectType = swift_getObjectType();
  specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:badgeImage:)(a1, a3, v3, ObjectType, a2);
}

uint64_t ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t ObjectType = swift_getObjectType();
  return specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(a1, a3, a4, a5, v5, ObjectType, a2);
}

void static ConversationControlsBadgingAvatarViewController.hasAvatar(for:)()
{
  self;
  uint64_t v0 = swift_dynamicCastObjCClass();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    swift_unknownObjectRetain();
    uint64_t v2 = outlined bridged method (pb) of @objc TUCall.contactIdentifiers.getter(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (*(void *)(v2 + 16))
      {
        id v4 = objc_msgSend(self, sel_tu_contactStoreConfigurationForCall_, v1);
        id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v4);

        uint64_t v6 = *(void *)(v3 + 16);
        if (v6)
        {
          swift_bridgeObjectRetain();
          uint64_t v7 = (void **)(v3 + 40);
          do
          {
            uint64_t v9 = (uint64_t)*(v7 - 1);
            uint64_t v8 = *v7;
            swift_bridgeObjectRetain();
            v10._countAndFlagsBits = v9;
            v10._object = v8;
            LOBYTE(v9) = CNContactStore.hasImage(forContactId:)(v10);
            swift_bridgeObjectRelease();
            if (v9) {
              break;
            }
            v7 += 2;
            --v6;
          }
          while (v6);

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationControls);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      char v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v21 = 0;
      _os_log_impl(&dword_1C2F90000, v19, v20, "hasAvatar: call has no contactIdentifiers", v21, 2u);
      MEMORY[0x1C87760E0](v21, -1, -1);
    }

    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationControls);
    swift_unknownObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_getObjectType();
      uint64_t v16 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v12, v13, "hasAvatar: Unexpected call type: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v15, -1, -1);
      MEMORY[0x1C87760E0](v14, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
LABEL_23:
  OUTLINED_FUNCTION_1_0();
}

void ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = objc_msgSend(self, sel_settingsWithContactStore_threeDTouchEnabled_, a1, 0);
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for ConversationControlsBadgingAvatarViewController();
  id v9 = objc_msgSendSuper2(&v14, sel_initWithSettings_, v8);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  id v10 = v9;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setContacts_, isa);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CNBadgingAvatarBadgeStyleSettings);
  id v12 = CNBadgingAvatarBadgeStyleSettings.__allocating_init(position:color:backgroundColor:cropStyle:)(2, 0, 0, 1);
  objc_msgSend(v10, sel_setBadgeStyleSettings_, v12);

  id v13 = objc_msgSend(v10, sel_badgeStyleSettings);
  objc_msgSend(v13, sel_setBackgroundColor_, a4);

  objc_msgSend(v10, sel_setBadgeImage_, a3);
  OUTLINED_FUNCTION_1_0();
}

Swift::Int ConversationControlsBadgingAvatarViewController.hash(callUUID:)()
{
  uint64_t v1 = v0;
  Hasher.init()();
  id v2 = objc_msgSend(v0, sel_contacts);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::UInt v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  UUID.uuidString.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v5 = (UIImage *)objc_msgSend(v1, sel_badgeImage);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = UIImagePNGRepresentation(v5);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      Swift::UInt v12 = Data.count.getter();
      Hasher._combine(_:)(v12);

      outlined consume of Data._Representation(v9, v11);
    }
    else
    {
    }
  }
  memcpy(__dst, v14, sizeof(__dst));
  return Hasher.finalize()();
}

id ConversationControlsBadgingAvatarViewController.__allocating_init(settings:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithSettings_, a1);

  return v3;
}

void ConversationControlsBadgingAvatarViewController.init(settings:)()
{
}

id ConversationControlsBadgingAvatarViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationControlsBadgingAvatarViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CNBadgingAvatarBadgeStyleSettings.__allocating_init(position:color:backgroundColor:cropStyle:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithPosition_color_backgroundColor_cropStyle_, a1, a2, a3, a4);

  return v6;
}

id @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    uint64_t v7 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (a4 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a3, a4);
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  Class v9 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v4, sel_initGroupWithName_photo_contacts_, v7, isa, v9);

  return v10;
}

uint64_t outlined bridged method (pb) of @objc TUConversation.messagesGroupPhotoData.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_messagesGroupPhotoData);
  if (!v1) {
    return 0;
  }
  objc_super v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc TUCall.contactIdentifiers.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_contactIdentifiers);
  if (!v1) {
    return 0;
  }
  objc_super v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized Set.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 < 0 || (OUTLINED_FUNCTION_0_40(), v5 ^ v6 | v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_2_46();
  if ((v9 & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v8 + 36) != v7)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v10 = *(void *)(v8 + 48);
  uint64_t v11 = v10 + *(void *)(*(void *)(type metadata accessor for Participant(0) - 8) + 72) * a1;
  outlined init with copy of Participant(v11, a2);
}

{
  char v4;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t vars8;

  if (a1 < 0 || (OUTLINED_FUNCTION_0_40(), v5 ^ v6 | v4))
  {
    __break(1u);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_2_46();
  if ((v9 & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v8 + 36) != v7)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v10 = *(void *)(v8 + 48);
  uint64_t v11 = type metadata accessor for Participant();
  Swift::UInt v12 = *(void *)(v11 - 8);
  id v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  objc_super v14 = v10 + *(void *)(v12 + 72) * a1;
  v13(a2, v14, v11);
}

void specialized Set.subscript.getter(uint64_t a1, int a2, char a3, uint64_t a4)
{
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for TUHandle);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for TUScreenSharingRequest);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for TUConversationParticipant);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for SGURL);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for CHHandle);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for TUConversation);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for TUConversationLink);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for UIScene);
}

uint64_t type metadata accessor for ConversationControlsBadgingAvatarViewController()
{
  return self;
}

void specialized Set.subscript.getter(uint64_t a1, int a2, char a3, uint64_t a4, void *a5)
{
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      uint64_t v7 = OUTLINED_FUNCTION_4_18();
      MEMORY[0x1C8774390](v7);
      OUTLINED_FUNCTION_4_49();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_1_0();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  OUTLINED_FUNCTION_4_18();
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_4_18();
  __CocoaSet.Index.element.getter();
  OUTLINED_FUNCTION_4_49();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v21;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v10 = v8 & ~v9;
  OUTLINED_FUNCTION_3_60();
  if ((v11 & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v10);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v9;
    do
    {
      uint64_t v10 = (v10 + 1) & v14;
      OUTLINED_FUNCTION_3_60();
      if ((v15 & 1) == 0) {
        goto LABEL_23;
      }
      id v16 = *(id *)(*(void *)(a4 + 48) + 8 * v10);
      char v17 = static NSObject.== infix(_:_:)();
    }
    while ((v17 & 1) == 0);
  }

LABEL_17:
  OUTLINED_FUNCTION_1_0();
  id v20 = v18;
}

void specialized Set.subscript.getter(uint64_t a1)
{
  if (a1 < 0 || (OUTLINED_FUNCTION_0_40(), v5 ^ v6 | v4))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(v3 + 8 * (v1 >> 6) + 56) >> v1) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(v3 + 36) == v2)
  {
    swift_bridgeObjectRetain();
    return;
  }
LABEL_8:
  __break(1u);
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || 1 << *(unsigned char *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    uint64_t v4 = *(void *)(a3 + 48) + 24 * result;
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v5 = *(void *)(v4 + 16);
    *(unsigned char *)a4 = *(unsigned char *)v4;
    *(void *)(a4 + 8) = v6;
    *(void *)(a4 + 16) = v5;
    return swift_bridgeObjectRetain();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

id specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:activeRemoteParticipant:badgeImage:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 216))(a5, a6))
  {
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_init);
    id v12 = objc_msgSend(a2, sel_name);
    if (!v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v12 = (id)MEMORY[0x1C87730B0](v13);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v11, sel_setNickname_, v12);

    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 464);
    uint64_t v55 = a1;
    char v15 = (void *)v14(a5, a6);
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v15);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1C3769830;
    *(void *)(v17 + 32) = v11;
    uint64_t v60 = v17;
    specialized Array._endMutation()();
    uint64_t v18 = self;
    id v58 = a3;
    id v19 = v16;
    id v20 = v11;
    id v21 = objc_msgSend(v18, sel_clearColor);
    id v22 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
    ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v19, v60, a3, v21);
    char v24 = v23;
    uint64_t v25 = type metadata accessor for URL();
    v57 = &v52;
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(void *)(v26 + 64);
    MEMORY[0x1F4188790](v25);
    unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v54 = (char *)&v52 - v28;
    id v29 = v24;
    id v30 = objc_msgSend(a2, sel_imageURL);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
    unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
    int64_t v35 = (char *)&v52 - v34;
    id v59 = v20;
    uint64_t v56 = v36;
    if (v30)
    {
      MEMORY[0x1F4188790](v32);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v53 = v26;
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v37(v35, (char *)&v52 - v28, v25);
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v25);
      if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, v25) != 1)
      {
        char v38 = v54;
        v37(v54, v35, v25);
        uint64_t v39 = Data.init(contentsOf:options:)();
        unint64_t v41 = v40;
        id v42 = &selRef_trailingBarAlpha;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v25);
LABEL_10:
        id v43 = [a2 v42[234]];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;

        outlined copy of Data?(v39, v41);
        id v47 = objc_msgSend(v29, sel_contacts);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v48 = objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
        id v49 = @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(v44, v46, v39, v41);
        id v50 = objc_msgSend(v29, sel_avatarViewController);

        objc_msgSend(v50, sel_updateViewWithGroupIdentity_, v49);
        swift_unknownObjectRelease();

        outlined consume of Data?(v39, v41);
        return v29;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)&v52 - v34, 1, 1, v25);
    }
    outlined destroy of URL?((uint64_t)v35);
    unint64_t v41 = 0xF000000000000000;
    uint64_t v39 = 0;
    id v42 = &selRef_trailingBarAlpha;
    goto LABEL_10;
  }
  swift_unknownObjectRelease();

  return 0;
}

void specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:badgeImage:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 216))(a4, a5) & 1) == 0
    || (self, (uint64_t v8 = swift_dynamicCastObjCClass()) == 0))
  {
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v9 = (uint64_t *)v8;
  v79 = (uint64_t *)a2;
  swift_unknownObjectRetain();
  v78 = v9;
  id v10 = objc_msgSend(v9, sel_channelDisplayName);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  uint64_t v80 = v11;
  uint64_t v81 = v13;
  uint64_t v77 = v13;
  uint64_t v14 = type metadata accessor for CharacterSet();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v18 = StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v19 = specialized Collection.prefix(_:)(2, v18);
  id v21 = v20;
  uint64_t v23 = v22;
  unint64_t v25 = v24;
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_init);
  uint64_t v27 = (v25 >> 1) - v23;
  if (!__OFSUB__(v25 >> 1, v23))
  {
    unint64_t v28 = v26;
    uint64_t v75 = v19;
    uint64_t v76 = v11;
    if (v27 <= 0)
    {
      uint64_t v31 = 0;
      uint64_t v30 = 0xE000000000000000;
    }
    else
    {
      if (v23 > 0 || v25 < 2) {
        goto LABEL_28;
      }
      uint64_t v31 = *v21;
      uint64_t v30 = v21[1];
      swift_bridgeObjectRetain();
    }
    outlined bridged method (mbnn) of @objc CNMutableContact.firstName.setter(v31, v30, v28);
    if (v27 < 2)
    {
      uint64_t v34 = 0;
      uint64_t v33 = 0xE000000000000000;
    }
    else
    {
      if (v23 > 1 || v25 < 4) {
        goto LABEL_29;
      }
      uint64_t v34 = v21[2];
      uint64_t v33 = v21[3];
      swift_bridgeObjectRetain();
    }
    outlined bridged method (mbnn) of @objc CNMutableContact.lastName.setter(v34, v33, v28);
    int64_t v35 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 464))(a4, a5);
    id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v35);

    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v37 = swift_allocObject();
    long long v74 = xmmword_1C3769830;
    *(_OWORD *)(v37 + 16) = xmmword_1C3769830;
    *(void *)(v37 + 32) = v28;
    uint64_t v80 = v37;
    specialized Array._endMutation()();
    uint64_t v38 = v80;
    uint64_t v39 = self;
    unint64_t v40 = v79;
    v72 = v79;
    id v41 = v36;
    id v73 = v28;
    id v42 = objc_msgSend(v39, sel_clearColor);
    id v43 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
    ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v41, v38, v40, v42);
    uint64_t v45 = v44;
    uint64_t v46 = type metadata accessor for URL();
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v48 = *(void *)(v47 + 64);
    MEMORY[0x1F4188790](v46);
    unint64_t v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
    v70 = (char *)&v68 - v49;
    id v50 = v45;
    id v51 = objc_msgSend(v78, sel_imageURL);
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v79 = &v68;
    uint64_t v53 = MEMORY[0x1F4188790](v52 - 8);
    unint64_t v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v56 = (char *)&v68 - v55;
    if (v51)
    {
      v78 = &v68;
      MEMORY[0x1F4188790](v53);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v69 = v47;
      v57 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      v57(v56, (char *)&v68 - v49, v46);
      __swift_storeEnumTagSinglePayload((uint64_t)v56, 0, 1, v46);
      if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v46) != 1)
      {
        id v58 = v70;
        v57(v70, v56, v46);
        uint64_t v59 = Data.init(contentsOf:options:)();
        unint64_t v61 = v60;
        uint64_t v62 = v77;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v58, v46);
LABEL_26:
        uint64_t v63 = swift_allocObject();
        *(_OWORD *)(v63 + 16) = v74;
        v64 = v73;
        *(void *)(v63 + 32) = v73;
        uint64_t v80 = v63;
        specialized Array._endMutation()();
        objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
        id v65 = v64;
        outlined copy of Data?(v59, v61);
        id v66 = @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(v76, v62, v59, v61);
        id v67 = objc_msgSend(v50, sel_avatarViewController);

        objc_msgSend(v67, sel_updateViewWithGroupIdentity_, v66);
        swift_unknownObjectRelease();

        outlined consume of Data?(v59, v61);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        return;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)&v68 - v55, 1, 1, v46);
    }
    outlined destroy of URL?((uint64_t)v56);
    unint64_t v61 = 0xF000000000000000;
    uint64_t v59 = 0;
    uint64_t v62 = v77;
    goto LABEL_26;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = a3;
  if (a2)
  {
    uint64_t v10 = ConversationControlsBadgingAvatarViewController.__allocating_init(conversation:badgeImage:displayName:badgeBackgroundColor:)(a2, a3, 0, 0, a4);
LABEL_23:
    uint64_t v47 = v10;
    swift_unknownObjectRelease();
    return v47;
  }
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a7 + 464))(a6, a7);
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v13);

  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 168))(a6, a7);
  uint64_t v16 = specialized Set.count.getter(v15);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_22:
    id v46 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
    ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v14, v21, v8, v7);
    goto LABEL_23;
  }
  uint64_t v17 = v16;
  uint64_t v56 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v20 = 1;
  }
  else
  {
    uint64_t result = specialized _NativeSet.startIndex.getter(v15);
    char v20 = v22 & 1;
  }
  id v48 = v14;
  unint64_t v49 = v8;
  id v50 = v7;
  uint64_t v51 = a1;
  uint64_t v53 = result;
  uint64_t v54 = v19;
  char v55 = v20;
  if ((v17 & 0x8000000000000000) == 0)
  {
    do
    {
      uint64_t v23 = v53;
      uint64_t v24 = v54;
      char v25 = v55;
      uint64_t v26 = OUTLINED_FUNCTION_7_41();
      specialized Set.subscript.getter(v26, v27, v28, v29, &lazy cache variable for type metadata for TUHandle);
      uint64_t v31 = v30;
      unsigned int v32 = objc_msgSend(v30, sel_shouldHideContact);
      id v33 = objc_allocWithZone(MEMORY[0x1E4F1BA40]);
      if (v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v31;
      }
      int64_t v35 = &selRef_initWithContact_;
      if (!v32) {
        int64_t v35 = &selRef__initWithHandle_;
      }
      objc_msgSend(v33, *v35, v34, v48, v49, v50, v51);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if ((v15 & 0xC000000000000001) != 0)
      {
        if ((v25 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>.Index);
        uint64_t v45 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v45(v52, 0);
      }
      else
      {
        int64_t v36 = OUTLINED_FUNCTION_7_41();
        int64_t v40 = specialized _NativeSet.index(after:)(v36, v37, v38, v39);
        uint64_t v42 = v41;
        char v44 = v43;
        outlined consume of Set<TUHandle>.Index._Variant(v23, v24, v25);
        uint64_t v53 = v40;
        uint64_t v54 = v42;
        char v55 = v44 & 1;
      }
      --v17;
    }
    while (v17);
    outlined consume of Set<TUHandle>.Index._Variant(v53, v54, v55);
    uint64_t v21 = v56;
    swift_bridgeObjectRelease();
    uint64_t v7 = v50;
    id v14 = v48;
    uint64_t v8 = v49;
    goto LABEL_22;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t method lookup function for ConversationControlsBadgingAvatarViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsBadgingAvatarViewController);
}

uint64_t dispatch thunk of ConversationControlsBadgingAvatarViewController.hash(callUUID:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

void *specialized Sequence.first(where:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      unint64_t v3 = v1 & 0xC000000000000001;
      uint64_t v4 = 4;
      char v5 = &selRef_trailingBarAlpha;
      unint64_t v19 = v1;
      while (1)
      {
        if (v3) {
          id v6 = (id)MEMORY[0x1C87744F0](v4 - 4, v1);
        }
        else {
          id v6 = *(id *)(v1 + 8 * v4);
        }
        uint64_t v7 = v6;
        uint64_t v8 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        if ([v6 v5[380]]) {
          break;
        }

LABEL_24:
        ++v4;
        if (v8 == v2) {
          goto LABEL_31;
        }
      }
      uint64_t v9 = v2;
      uint64_t v10 = outlined bridged method (pb) of @objc FBSDisplayLayoutElement.bundleIdentifier.getter(v7);
      uint64_t v12 = v11;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v14 = *(void *)(Strong + 24);
        uint64_t v15 = *(void *)(Strong + 32);
        swift_bridgeObjectRetain();
        swift_release();
        if (v12)
        {
          if (v15)
          {
            if (v10 == v14 && v12 == v15)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_28;
            }
            char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v17) {
              goto LABEL_26;
            }

            goto LABEL_23;
          }
        }
        else if (!v15)
        {
LABEL_26:
          swift_release();
LABEL_28:
          swift_bridgeObjectRelease();
          return v7;
        }
      }
      else if (!v12)
      {
        goto LABEL_26;
      }

      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v2 = v9;
      unint64_t v1 = v19;
      char v5 = &selRef_trailingBarAlpha;
      goto LABEL_24;
    }
  }
LABEL_31:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;

  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v3 = 4;
    while (1)
    {
      uint64_t v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      char v5 = v4;
      id v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      if (objc_msgSend(v4, sel_isEligibleForScreening))
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v24 = a4;
  char v25 = a1;
  uint64_t v26 = a3;
  uint64_t v22 = *(void *)(a2 - 8);
  uint64_t v23 = a2;
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v7);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v17, v19);
  uint64_t v20 = 1;
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v11) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v25(v15, v9);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (v5) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v9, v23);
    }
    uint64_t v20 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a5, v20, 1, v26);
}

id @nonobjc NSMapTable.__allocating_init(keyOptions:valueOptions:)(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_mapTableWithKeyOptions_valueOptions_, a1, a2);
  return v2;
}

uint64_t OSAllocatedUnfairLock.init(uncheckedState:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for os_unfair_lock_s(255);
  type metadata accessor for ManagedBuffer();
  uint64_t v4 = static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t AudioCallManager.CallsCache.calls.getter()
{
  uint64_t v1 = v0[2];
  long long v2 = *(_OWORD *)(*v0 + 96);
  long long v7 = *(_OWORD *)(*v0 + 80);
  long long v8 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSMapTable);
  uint64_t v4 = type metadata accessor for Array();
  OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)((void (*)(uint64_t))partial apply for closure #1 in AudioCallManager.CallsCache.calls.getter, (uint64_t)v6, v1, v3, v4);
  return v9;
}

uint64_t closure #1 in AudioCallManager.CallsCache.calls.getter@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v6 = objc_msgSend(*a1, sel_objectEnumerator);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSEnumerator?);
  uint64_t v3 = type metadata accessor for Array();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in AudioCallManager.CallsCache.calls.getter, MEMORY[0x1E4FBC248], v3, v4, (uint64_t)&v7);

  uint64_t result = v7;
  if (!v7) {
    uint64_t result = static Array._allocateUninitialized(_:)();
  }
  *a2 = result;
  return result;
}

uint64_t closure #1 in closure #1 in AudioCallManager.CallsCache.calls.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSEnumerator);
  lazy protocol witness table accessor for type NSEnumerator and conformance NSEnumerator();
  uint64_t result = Sequence.compactMap<A>(_:)();
  *a1 = result;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in AudioCallManager.CallsCache.calls.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v4);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    *a2 = 0;
  }
  return result;
}

void AudioCallManager.CallsCache.addCall(_:)(uint64_t a1)
{
}

void closure #1 in AudioCallManager.CallsCache.addCall(_:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a1;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a3, a6);
  uint64_t v9 = (void *)MEMORY[0x1C87730B0](v8);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setObject_forKey_, a2, v9);
}

void AudioCallManager.CallsCache.removeCall(_:)(uint64_t a1)
{
}

void AudioCallManager.CallsCache.addCall(_:)(uint64_t a1, void (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_3_2();
  uint64_t v4 = *(void *)(v2 + 16);
  long long v6 = *(_OWORD *)(v5 + 96);
  v9[1] = *(_OWORD *)(v5 + 80);
  v9[2] = v6;
  uint64_t v10 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSMapTable);
  OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)(a2, (uint64_t)v9, v4, v8, MEMORY[0x1E4FBC848] + 8);
}

void closure #1 in AudioCallManager.CallsCache.removeCall(_:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v6 = *a1;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a3, a6);
  uint64_t v8 = (void *)MEMORY[0x1C87730B0](v7);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_removeObjectForKey_, v8);
}

uint64_t AudioCallManager.CallsCache.deinit()
{
  swift_release();
  return v0;
}

uint64_t AudioCallManager.CallsCache.__deallocating_deinit()
{
  AudioCallManager.CallsCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t AudioCallManager.CallsCache.__allocating_init()()
{
  return AudioCallManager.CallsCache.init()();
}

uint64_t AudioCallManager.CallsCache.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSMapTable);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v3 = @nonobjc NSMapTable.__allocating_init(keyOptions:valueOptions:)(0, 5);
  *(void *)(v0 + 16) = OSAllocatedUnfairLock.init(uncheckedState:)((uint64_t)&v3, v1);
  return v0;
}

uint64_t AudioCallManager.callsCache.getter()
{
  return swift_retain();
}

uint64_t AudioCallManager.foregroundRingingCall.setter(char a1)
{
  uint64_t result = AudioCallManager.callResolver.getter();
  if (result)
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v4 + 16))(a1 & 1, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t AudioCallManager.foregroundRingingCall.getter()
{
  uint64_t result = AudioCallManager.callResolver.getter();
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    swift_unknownObjectRelease();
    return v2 & 1;
  }
  return result;
}

uint64_t (*AudioCallManager.foregroundRingingCall.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = AudioCallManager.foregroundRingingCall.getter() & 1;
  return AudioCallManager.foregroundRingingCall.modify;
}

uint64_t AudioCallManager.foregroundRingingCall.modify(uint64_t a1)
{
  return AudioCallManager.foregroundRingingCall.setter(*(unsigned char *)(a1 + 8));
}

uint64_t AudioCallManager.isICSInBackground.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v5);
  long long v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v1;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5);
  swift_retain();
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v4, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v9 = v10;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = &async function pointer to partial apply for closure #1 in AudioCallManager.isICSInBackground.didset;
  *(void *)(v11 + 24) = v6;
  if (v9 | v8)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v8;
    v13[3] = v9;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in AudioCallManager.isICSInBackground.didset()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return AudioCallManager.resolveAndPresent()();
}

uint64_t AudioCallManager.isICSInBackground.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AudioCallManager.isICSInBackground.setter(char a1)
{
  OUTLINED_FUNCTION_11_0();
  *(unsigned char *)(v1 + 32) = a1;
  return AudioCallManager.isICSInBackground.didset();
}

uint64_t (*AudioCallManager.isICSInBackground.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_9();
  return AudioCallManager.isICSInBackground.modify;
}

uint64_t AudioCallManager.isICSInBackground.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return AudioCallManager.isICSInBackground.didset();
  }
  return result;
}

uint64_t AudioCallManager.isWatchedAppInBackground.getter()
{
  OUTLINED_FUNCTION_2();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t AudioCallManager.isWatchedAppInBackground.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_11_0();
  *(unsigned char *)(v1 + 33) = a1;
  return result;
}

uint64_t (*AudioCallManager.isWatchedAppInBackground.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path setter for AudioCallManager.callCoordinator : <A>AudioCallManager<A>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  return AudioCallManager.callCoordinator.setter(v2, v1);
}

uint64_t AudioCallManager.callCoordinator.getter()
{
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v0 + 40);
}

uint64_t AudioCallManager.callCoordinator.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_11_0();
  *(void *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t AudioCallManager.callResolver.getter()
{
  return MEMORY[0x1C8776240](v0 + 56);
}

uint64_t AudioCallManager.callPresenter.getter()
{
  return MEMORY[0x1C8776240](v0 + 72);
}

uint64_t AudioCallManager.processUpdateTask.setter(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t AudioCallManager.__allocating_init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v19 = *(void *)(*(void *)v7 + 80);
  uint64_t v18 = *(void *)(*(void *)v7 + 88);
  uint64_t v10 = *(void *)(*(void *)v7 + 96);
  uint64_t v11 = *(void *)(*(void *)v7 + 104);
  type metadata accessor for AudioCallManager.CallsCache();
  *(void *)(v7 + 16) = AudioCallManager.CallsCache.__allocating_init()();
  *(void *)(v7 + 24) = 0;
  *(_WORD *)(v7 + 32) = 1;
  *(void *)(v7 + 48) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 80) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for ProcessWatcherStream();
  swift_allocObject();
  *(void *)(v7 + 88) = ProcessWatcherStream.init()();
  *(void *)(v7 + 96) = 0;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v7 + 48) = a2;
  swift_unknownObjectWeakAssign();
  *(void *)(v7 + 64) = a5;
  swift_unknownObjectWeakAssign();
  *(void *)(v7 + 80) = a7;
  swift_unknownObjectWeakAssign();
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v19;
  v13[3] = v18;
  void v13[4] = v10;
  v13[5] = v11;
  v13[6] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<TUCall, Never>);
  lazy protocol witness table accessor for type PassthroughSubject<TUCall, Never> and conformance PassthroughSubject<A, B>();
  uint64_t v14 = Publisher<>.sink(receiveValue:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  *(void *)(v8 + 24) = v14;
  swift_release();
  return v8;
}

uint64_t type metadata accessor for AudioCallManager.CallsCache()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ProcessWatcherStream()
{
  uint64_t result = type metadata singleton initialization cache for ProcessWatcherStream;
  if (!type metadata singleton initialization cache for ProcessWatcherStream) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *a1;
  uint64_t v15 = v22;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
  id v16 = v15;
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v18 = v21;
    uint64_t v19 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = 0;
    v20[3] = 0;
    v20[4] = a3;
    v20[5] = a4;
    v20[6] = a5;
    v20[7] = a6;
    v20[8] = a2;
    v20[9] = v18;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:), 0, 0);
}

uint64_t closure #1 in closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_2();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v2;
    void *v2 = v0;
    v2[1] = closure #1 in closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:);
    return AudioCallManager.updateWithCall(_:)();
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    OUTLINED_FUNCTION_6();
    return v4();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 64) == 0;
  OUTLINED_FUNCTION_6();
  return v1();
}

uint64_t AudioCallManager.resolveAndPresent()()
{
  *(void *)(v1 + 112) = v0;
  OUTLINED_FUNCTION_3_2();
  *(void *)(v1 + 120) = v2;
  return MEMORY[0x1F4188298](AudioCallManager.resolveAndPresent(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::Bool IsNativeType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  uint64_t v18;

  char v17 = v0;
  uint64_t v1 = (void *)v0[15];
  AudioCallManager.callsCache.getter();
  uint64_t v2 = AudioCallManager.CallsCache.calls.getter();
  swift_release();
  v0[12] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  uint64_t v4 = v1[10];
  v3[2] = v4;
  uint64_t v15 = v1[11];
  v3[3] = v15;
  uint64_t v14 = v1[12];
  v3[4] = v14;
  uint64_t v5 = v1[13];
  v3[5] = v5;
  type metadata accessor for Array();
  swift_getWitnessTable();
  _ArrayProtocol.filter(_:)();
  swift_task_dealloc();
  AudioCallManager.callsCache.getter();
  long long v6 = AudioCallManager.CallsCache.calls.getter();
  swift_release();
  v0[13] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v7[2] = v4;
  v7[3] = v15;
  v7[4] = v14;
  v7[5] = v5;
  _ArrayProtocol.filter(_:)();
  swift_task_dealloc();
  uint64_t v8 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v9 = Array.startIndex.getter();
  swift_bridgeObjectRelease();
  for (i = v9; v9 != MEMORY[0x1C87734C0](v8, v4); uint64_t v9 = i)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      uint64_t v13 = *(void *)(v8 + 32 + 8 * v9);
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v13 = _ArrayBuffer._getElementSlowPath(_:)();
    }
    swift_bridgeObjectRetain();
    MEMORY[0x1C87734E0](&i, v8, v4);
    swift_bridgeObjectRelease();
    AudioCallManager.callsCache.getter();
    AudioCallManager.CallsCache.removeCall(_:)(v13);
    swift_release();
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[16] = v10;
  *uint64_t v10 = v0;
  v10[1] = AudioCallManager.resolveAndPresent();
  return AudioCallManager.resolveCallDisplay()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  void *v2 = v1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AudioCallManager.resolveAndPresent(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  AudioCallManager.presentCallsUsingPresentation(_:)(v0 + 16);
  outlined destroy of CallsPresentation(v0 + 16);
  OUTLINED_FUNCTION_6();
  return v1();
}

BOOL closure #1 in AudioCallManager.resolveAndPresent()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a2, a3);
  uint64_t v6 = specialized Set.count.getter(v5);
  swift_bridgeObjectRelease();
  return v6 > 1;
}

BOOL closure #2 in AudioCallManager.resolveAndPresent()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t))(a3 + 184);
  return v5(a2, a3) == 5 || v5(a2, a3) == 6;
}

uint64_t AudioCallManager.updateWithCall(_:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[2] = v2;
  v1[3] = v0;
  OUTLINED_FUNCTION_3_2();
  v1[4] = v3;
  type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v5;
  v1[7] = v4;
  return MEMORY[0x1F4188298](AudioCallManager.updateWithCall(_:), v5, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  AudioCallManager.callsCache.getter();
  AudioCallManager.CallsCache.addCall(_:)(v2);
  swift_release();
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)(v1 + 88) + 160))(*(void *)(v1 + 80));
  LOBYTE(v2) = objc_msgSend(v3, sel_isSystemProvider);

  if ((v2 & 1) == 0) {
    AudioCallManager.watchProcessForCall(_:)();
  }
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = AudioCallManager.updateWithCall(_:);
  return AudioCallManager.resolveAndPresent()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_2_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 48);
  return MEMORY[0x1F4188298](AudioCallManager.updateWithCall(_:), v5, v4);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t AudioCallManager.watchProcessForCall(_:)()
{
  uint64_t v38 = *v0;
  uint64_t v1 = v38;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v40 = (uint64_t)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v39 = v8;
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v41 = (char *)&v36 - v14;
  uint64_t v15 = *(void *)(v1 + 88);
  id v16 = *(unsigned int (**)(uint64_t))(v15 + 184);
  uint64_t v17 = *(void *)(v1 + 80);
  uint64_t v18 = OUTLINED_FUNCTION_20_18();
  if (v16(v18) == 6 || (uint64_t v19 = OUTLINED_FUNCTION_20_18(), v16(v19) == 6))
  {
    return AudioCallManager.processUpdateTask.setter(0);
  }
  else
  {
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 160))(v17, v15);
    id v22 = objc_msgSend(v21, sel_bundleIdentifier);

    if (v22)
    {
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      swift_retain();
      swift_bridgeObjectRetain();
      ProcessWatcherStream.watchProcessForBundleIdentifier(_:)(v23, v25, (uint64_t)v6);
      swift_bridgeObjectRelease();
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
      swift_bridgeObjectRelease();
      swift_release();
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
      {
        uint64_t v26 = v39;
        int v27 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
        uint64_t v36 = v39 + 32;
        int v37 = v27;
        v27(v41, v6, v7);
        uint64_t v28 = type metadata accessor for TaskPriority();
        __swift_storeEnumTagSinglePayload(v40, 1, 1, v28);
        uint64_t v29 = swift_allocObject();
        swift_weakInit();
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v13, v41, v7);
        type metadata accessor for MainActor();
        swift_retain();
        uint64_t v30 = static MainActor.shared.getter();
        unint64_t v31 = (*(unsigned __int8 *)(v26 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
        unsigned int v32 = (char *)swift_allocObject();
        uint64_t v33 = MEMORY[0x1E4FBCFD8];
        *((void *)v32 + 2) = v30;
        *((void *)v32 + 3) = v33;
        *((void *)v32 + 4) = v17;
        *((void *)v32 + 5) = v15;
        uint64_t v34 = v38;
        *((void *)v32 + 6) = *(void *)(v38 + 96);
        *((void *)v32 + 7) = *(void *)(v34 + 104);
        v37(&v32[v31], v13, v7);
        *(void *)&v32[(v10 + v31 + 7) & 0xFFFFFFFFFFFFFFF8] = v29;
        swift_release();
        uint64_t v35 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
        AudioCallManager.processUpdateTask.setter(v35);
        return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v7);
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v7);
    }
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<Bool>?);
  }
}

uint64_t closure #1 in AudioCallManager.watchProcessForCall(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Iterator);
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = type metadata accessor for MainActor();
  v5[17] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[18] = v8;
  v5[19] = v7;
  return MEMORY[0x1F4188298](closure #1 in AudioCallManager.watchProcessForCall(_:), v8, v7);
}

uint64_t closure #1 in AudioCallManager.watchProcessForCall(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>);
  AsyncStream.makeAsyncIterator()();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_2();
  *(void *)(v0 + 160) = static MainActor.shared.getter();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_15_25(v1);
  void *v2 = v3;
  v2[1] = closure #1 in AudioCallManager.watchProcessForCall(_:);
  uint64_t v4 = OUTLINED_FUNCTION_7_42();
  return MEMORY[0x1F4187D58](v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 144);
  return MEMORY[0x1F4188298](closure #1 in AudioCallManager.watchProcessForCall(_:), v5, v4);
}

{
  uint64_t v0;
  int v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t Strong;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 192);
  if (v1 == 2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v2();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationKit);
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 67109120;
      *(_DWORD *)(v7 + 4) = v1 & 1;
      _os_log_impl(&dword_1C2F90000, v5, v6, "ProcessWatcherStream processUpdate %{BOOL}d", (uint8_t *)v7, 8u);
      MEMORY[0x1C87760E0](v7, -1, -1);
    }

    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)Strong + 280))(Strong);
      swift_release();
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = swift_weakLoadStrong();
    if (v10)
    {
      (*(void (**)(BOOL))(*(void *)v10 + 288))((v1 & 1) == 0);
      swift_release();
    }
    if (((v1 & 1) == 0) == (v9 & 1) || (uint64_t v11 = swift_weakLoadStrong(), (*(void *)(v0 + 176) = v11) == 0))
    {
      *(void *)(v0 + 160) = static MainActor.shared.getter();
      uint64_t v13 = swift_task_alloc();
      uint64_t v14 = (void *)OUTLINED_FUNCTION_15_25(v13);
      char *v14 = v15;
      v14[1] = closure #1 in AudioCallManager.watchProcessForCall(_:);
      id v16 = OUTLINED_FUNCTION_7_42();
      return MEMORY[0x1F4187D58](v16);
    }
    else
    {
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 184) = v12;
      NSObject *v12 = v0;
      v12[1] = closure #1 in AudioCallManager.watchProcessForCall(_:);
      return AudioCallManager.resolveAndPresent()();
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_2_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 144);
  return MEMORY[0x1F4188298](closure #1 in AudioCallManager.watchProcessForCall(_:), v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  *(void *)(v0 + 160) = static MainActor.shared.getter();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_15_25(v1);
  void *v2 = v3;
  v2[1] = closure #1 in AudioCallManager.watchProcessForCall(_:);
  uint64_t v4 = OUTLINED_FUNCTION_7_42();
  return MEMORY[0x1F4187D58](v4);
}

uint64_t AudioCallManager.resolveCallDisplay()()
{
  OUTLINED_FUNCTION_17_2();
  v1[22] = v2;
  v1[23] = v0;
  OUTLINED_FUNCTION_3_2();
  v1[24] = v3;
  type metadata accessor for MainActor();
  v1[25] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](AudioCallManager.resolveCallDisplay(), v5, v4);
}

{
  uint64_t v0;
  _OWORD *v1;
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t ObjectType;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void);
  void v24[10];
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = (_OWORD *)(v0 + 16);
  uint64_t v2 = (_OWORD *)(v0 + 96);
  uint64_t v3 = (_OWORD *)(v0 + 136);
  swift_release();
  OUTLINED_FUNCTION_50();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 304))();
  if (!v5)
  {
    uint64_t v20 = *(void **)(v0 + 176);
    void *v2 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *(void *)(v0 + 128) = 0;
    *uint64_t v3 = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(void *)(v0 + 168) = 0;
    *uint64_t v1 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    outlined assign with take of CompactPresentable?(v0 + 96, v0 + 16, &demangling cache variable for type metadata for CompactPresentable?);
    outlined assign with take of CompactPresentable?(v0 + 136, v0 + 56, &demangling cache variable for type metadata for FullPresentable?);
    uint64_t v19 = v20;
    uint64_t v18 = (void *)(v0 + 16);
    goto LABEL_9;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = *(void *)(v0 + 184);
  AudioCallManager.callsCache.getter();
  AudioCallManager.CallsCache.calls.getter();
  uint64_t v10 = swift_release();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 256))(v10) & 1) != 0
    && (OUTLINED_FUNCTION_50(), ((*(uint64_t (**)(void))(v11 + 280))() & 1) != 0))
  {
    type metadata accessor for SpringBoardUtilities();
    uint64_t v12 = !static SpringBoardUtilities.checkSpringBoardState(for:)();
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (AudioCallManager.callResolver.getter())
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void **)(v0 + 176);
    uint64_t ObjectType = swift_getObjectType();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Call & CompactPresentable & FullPresentable);
    uint64_t v17 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v14 + 32))(v24, v17, v7, v8, v12, ObjectType, v14);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v18 = v24;
    uint64_t v19 = v15;
LABEL_9:
    memcpy(v19, v18, 0x50uLL);
    goto LABEL_11;
  }
  uint64_t v21 = *(void **)(v0 + 176);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 128) = 0;
  void *v2 = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *uint64_t v3 = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(void *)(v0 + 168) = 0;
  *uint64_t v1 = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  outlined assign with take of CompactPresentable?(v0 + 96, v0 + 16, &demangling cache variable for type metadata for CompactPresentable?);
  outlined assign with take of CompactPresentable?(v0 + 136, v0 + 56, &demangling cache variable for type metadata for FullPresentable?);
  memcpy(v21, (const void *)(v0 + 16), 0x50uLL);
  swift_unknownObjectRelease();
LABEL_11:
  OUTLINED_FUNCTION_6();
  return v22();
}

uint64_t CallsPresentation.init(compact:full:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[3] = 0u;
  a3[4] = 0u;
  uint64_t v4 = (uint64_t)a3 + 40;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  outlined assign with take of CompactPresentable?(a1, (uint64_t)a3, &demangling cache variable for type metadata for CompactPresentable?);
  return outlined assign with take of CompactPresentable?(a2, v4, &demangling cache variable for type metadata for FullPresentable?);
}

uint64_t AudioCallManager.presentCallsUsingPresentation(_:)(uint64_t a1)
{
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)v13, &demangling cache variable for type metadata for CompactPresentable?);
  uint64_t v2 = v14;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for CompactPresentable?);
  outlined init with copy of CallsPresentation(a1, (uint64_t)v13);
  if (v2)
  {
    outlined destroy of CallsPresentation((uint64_t)v13);
  }
  else
  {
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)&v15, (uint64_t)v11, &demangling cache variable for type metadata for FullPresentable?);
    outlined destroy of CallsPresentation((uint64_t)v13);
    uint64_t v3 = v12;
    uint64_t result = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for FullPresentable?);
    if (!v3) {
      return result;
    }
  }
  if (AudioCallManager.callPresenter.getter())
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, ObjectType, v6);
    swift_unknownObjectRelease();
  }
  uint64_t result = AudioCallManager.callPresenter.getter();
  if (result)
  {
    uint64_t v9 = v8;
    uint64_t v10 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1 + 40, v10, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t AudioCallManager.deinit()
{
  swift_release();
  swift_release();
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 40);
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 56);
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 72);
  swift_release();
  swift_release();
  return v0;
}

uint64_t AudioCallManager.__deallocating_deinit()
{
  AudioCallManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t Call.displayStyle.getter@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 184))();
  unint64_t v4 = 0x3030000010003uLL >> (8 * result);
  if (result >= 7) {
    LOBYTE(v4) = 3;
  }
  *a2 = v4;
  return result;
}

BOOL static DisplayStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DisplayStyle.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DisplayStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CallsPresentation.compact.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<DynamicTypeSize>.Content(v1, a1, &demangling cache variable for type metadata for CompactPresentable?);
}

uint64_t CallsPresentation.compact.setter(uint64_t a1)
{
  return outlined assign with take of CompactPresentable?(a1, v1, &demangling cache variable for type metadata for CompactPresentable?);
}

uint64_t (*CallsPresentation.compact.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CallsPresentation.full.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Environment<DynamicTypeSize>.Content(v1 + 40, a1, &demangling cache variable for type metadata for FullPresentable?);
}

uint64_t CallsPresentation.full.setter(uint64_t a1)
{
  return outlined assign with take of CompactPresentable?(a1, v1 + 40, &demangling cache variable for type metadata for FullPresentable?);
}

uint64_t (*CallsPresentation.full.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ProcessWatcherStream.watchProcessForBundleIdentifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation.BufferingPolicy);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v34 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v33 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v33 - v16;
  v3[3] = a1;
  v3[4] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t)v3
      + OBJC_IVAR____TtC15ConversationKitP33_3A0EEB366752F2F4FD7C097A5827E2E220ProcessWatcherStream_currentStream;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v18, (uint64_t)v17, &demangling cache variable for type metadata for AsyncStream<Bool>?);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v35, v17, v19);
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v17, &demangling cache variable for type metadata for AsyncStream<Bool>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation?);
  uint64_t v33 = swift_allocBox();
  uint64_t v21 = v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation);
  uint64_t v23 = __swift_storeEnumTagSinglePayload(v21, 1, 1, v22);
  MEMORY[0x1F4188790](v23);
  *(&v33 - 2) = v21;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBD028], v6);
  uint64_t v24 = v35;
  AsyncStream.init(_:bufferingPolicy:_:)();
  id v25 = objc_msgSend(self, sel_configurationForDefaultMainDisplayMonitor);
  objc_msgSend(v25, sel_setNeedsUserInteractivePriority_, 1);
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v33;
  *(void *)(v27 + 24) = v26;
  aBlock[4] = partial apply for closure #2 in ProcessWatcherStream.watchProcessForBundleIdentifier(_:);
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSDisplayLayoutMonitor, @guaranteed FBSDisplayLayout?, @guaranteed FBSDisplayLayoutTransitionContext?) -> ();
  aBlock[3] = &block_descriptor_24;
  uint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v25, sel_setTransitionHandler_, v28);
  _Block_release(v28);
  id v29 = objc_msgSend(self, sel_monitorWithConfiguration_, v25);

  uint64_t v30 = (void *)v3[2];
  v3[2] = v29;

  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v15, v24, v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v19);
  uint64_t v31 = v34;
  outlined init with take of AsyncStream<Bool>?((uint64_t)v15, v34);
  swift_beginAccess();
  outlined assign with take of CompactPresentable?(v31, v18, &demangling cache variable for type metadata for AsyncStream<Bool>?);
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in ProcessWatcherStream.watchProcessForBundleIdentifier(_:)(uint64_t a1, uint64_t a2)
{
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a2, &demangling cache variable for type metadata for AsyncStream<Bool>.Continuation?);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
}

uint64_t closure #2 in ProcessWatcherStream.watchProcessForBundleIdentifier(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v24[-v7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation.YieldResult);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = &v24[-v14];
  uint64_t v16 = swift_projectBox();
  if (a2)
  {
    id v17 = a2;
    id v18 = objc_msgSend(v17, sel_elements);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for FBSDisplayLayoutElement);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_retain();
    uint64_t v20 = specialized Sequence.first(where:)(v19);
    swift_bridgeObjectRelease();
    if (v20) {

    }
    swift_beginAccess();
    outlined init with copy of Environment<DynamicTypeSize>.Content(v16, (uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<Bool>.Continuation?);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation);
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v21);
    if (result != 1)
    {
      BOOL v25 = v20 != 0;
      AsyncStream.Continuation.yield(_:)();

      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
      return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v21 - 8) + 8))(v6, v21);
    }
    __break(1u);
    goto LABEL_10;
  }
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v16, (uint64_t)v8, &demangling cache variable for type metadata for AsyncStream<Bool>.Continuation?);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>.Continuation);
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v23);
  if (result == 1)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  BOOL v25 = 0;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v23 - 8) + 8))(v8, v23);
}

void thunk for @escaping @callee_guaranteed (@guaranteed FBSDisplayLayoutMonitor, @guaranteed FBSDisplayLayout?, @guaranteed FBSDisplayLayoutTransitionContext?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

uint64_t ProcessWatcherStream.deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    objc_msgSend(v1, sel_invalidate);
    uint64_t v2 = *(void **)(v0 + 16);
  }
  else
  {
    uint64_t v2 = 0;
  }

  swift_bridgeObjectRelease();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v0 + OBJC_IVAR____TtC15ConversationKitP33_3A0EEB366752F2F4FD7C097A5827E2E220ProcessWatcherStream_currentStream, &demangling cache variable for type metadata for AsyncStream<Bool>?);
  return v0;
}

uint64_t ProcessWatcherStream.__deallocating_deinit()
{
  ProcessWatcherStream.deinit();
  return swift_deallocClassInstance();
}

void *ProcessWatcherStream.init()()
{
  v0[2] = 0;
  v0[3] = 0;
  v0[4] = 0;
  uint64_t v1 = (uint64_t)v0
     + OBJC_IVAR____TtC15ConversationKitP33_3A0EEB366752F2F4FD7C097A5827E2E220ProcessWatcherStream_currentStream;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  return v0;
}

uint64_t sub_1C311D784()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C311D7BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)(void **a1)
{
  return closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

unint64_t lazy protocol witness table accessor for type PassthroughSubject<TUCall, Never> and conformance PassthroughSubject<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PassthroughSubject<TUCall, Never> and conformance PassthroughSubject<A, B>;
  if (!lazy protocol witness table cache variable for type PassthroughSubject<TUCall, Never> and conformance PassthroughSubject<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<TUCall, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<TUCall, Never> and conformance PassthroughSubject<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayStyle and conformance DisplayStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayStyle and conformance DisplayStyle;
  if (!lazy protocol witness table cache variable for type DisplayStyle and conformance DisplayStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayStyle and conformance DisplayStyle);
  }
  return result;
}

uint64_t sub_1C311D8A8()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 232))();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_1C311D8EC()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t sub_1C311D938()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 256))();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_1C311D984()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t sub_1C311D9D8()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 280))();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_1C311DA24()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t sub_1C311DA78()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 304))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t type metadata completion function for AudioCallManager()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AudioCallManager()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for AudioCallManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioCallManager);
}

uint64_t dispatch thunk of AudioCallManager.foregroundRingingCall.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of AudioCallManager.foregroundRingingCall.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of AudioCallManager.foregroundRingingCall.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of AudioCallManager.isICSInBackground.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of AudioCallManager.isICSInBackground.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of AudioCallManager.isICSInBackground.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of AudioCallManager.isWatchedAppInBackground.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of AudioCallManager.isWatchedAppInBackground.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of AudioCallManager.isWatchedAppInBackground.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of AudioCallManager.callCoordinator.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of AudioCallManager.__allocating_init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)()
{
  return (*(uint64_t (**)(void))(v0 + 400))();
}

uint64_t type metadata completion function for AudioCallManager.CallsCache()
{
  return swift_initClassMetadata2();
}

uint64_t dispatch thunk of CallCoordinator.prioritizedCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallCoordinator.incomingAudioCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallCoordinator.activeVideoCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CallCoordinator.callCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CallDisplayResolver.foregroundRingingCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallDisplayResolver.foregroundRingingCall.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CallDisplayResolver.foregroundRingingCall.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CallDisplayResolver.resolveCallPresentationFromCalls(_:using:isInBackground:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of CallDisplayResolver.activityTypeForPresentedCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unsigned char *storeEnumTagSinglePayload for DisplayStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C311DEE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayStyle()
{
  return &type metadata for DisplayStyle;
}

uint64_t dispatch thunk of CompactPresentable.callUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FullPresentable.callUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AudioCallPresenter.presentInCompactDisplay(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AudioCallPresenter.presentInFullDisplay(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t destroy for CallsPresentation(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 24)) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
  }
  if (*(void *)(v1 + 64))
  {
    return __swift_destroy_boxed_opaque_existential_1(v1 + 40);
  }
  return result;
}

uint64_t initializeWithCopy for CallsPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v7 = (_OWORD *)(a1 + 40);
  id v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  return a1;
}

uint64_t assignWithCopy for CallsPresentation(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
    goto LABEL_8;
  }
  long long v5 = *a2;
  long long v6 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_8:
  uint64_t v7 = *((void *)a2 + 8);
  if (!*(void *)(a1 + 64))
  {
    if (v7)
    {
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, (uint64_t)a2 + 40);
      return a1;
    }
LABEL_14:
    long long v8 = *(long long *)((char *)a2 + 40);
    long long v9 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *int v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for CallsPresentation(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallsPresentation(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallsPresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallsPresentation()
{
  return &type metadata for CallsPresentation;
}

uint64_t ObjC metadata update function for ProcessWatcherStream()
{
  return type metadata accessor for ProcessWatcherStream();
}

void type metadata completion function for ProcessWatcherStream()
{
  type metadata accessor for AsyncStream<Bool>?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for AsyncStream<Bool>?()
{
  if (!lazy cache variable for type metadata for AsyncStream<Bool>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncStream<Bool>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<Bool>?);
    }
  }
}

uint64_t partial apply for closure #1 in ProcessWatcherStream.watchProcessForBundleIdentifier(_:)(uint64_t a1)
{
  return closure #1 in ProcessWatcherStream.watchProcessForBundleIdentifier(_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C311E650()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ProcessWatcherStream.watchProcessForBundleIdentifier(_:)(uint64_t a1, void *a2)
{
  return closure #2 in ProcessWatcherStream.watchProcessForBundleIdentifier(_:)(a1, a2);
}

uint64_t outlined init with take of AsyncStream<Bool>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of CompactPresentable?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

uint64_t closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v2 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v2 + *MEMORY[0x1E4FBBAB0]) - 8) + 16))(a2);
}

void OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  closure #1 in OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)(a3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)a3 + 16), (os_unfair_lock_t)(a3 + ((*(unsigned int *)(*(void *)a3 + 48) + 3) & 0x1FFFFFFFCLL)), a1, a2, a4, a5, &v5);
}

void closure #1 in OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)(uint64_t a1, os_unfair_lock_t lock, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  os_unfair_lock_lock(lock);
  a3(a1);
  os_unfair_lock_unlock(lock);
  if (v7) {
    *a7 = v7;
  }
}

uint64_t outlined bridged method (pb) of @objc FBSDisplayLayoutElement.bundleIdentifier.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t partial apply for closure #1 in AudioCallManager.CallsCache.removeCall(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AudioCallManager.CallsCache.removeCall(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in AudioCallManager.CallsCache.removeCall(_:));
}

uint64_t partial apply for closure #1 in AudioCallManager.CallsCache.addCall(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AudioCallManager.CallsCache.removeCall(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in AudioCallManager.CallsCache.addCall(_:));
}

uint64_t partial apply for closure #1 in AudioCallManager.CallsCache.removeCall(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for closure #1 in AudioCallManager.CallsCache.calls.getter()
{
  OUTLINED_FUNCTION_14_6();
  return closure #1 in AudioCallManager.CallsCache.calls.getter(v0, v1);
}

uint64_t partial apply for closure #1 in closure #1 in AudioCallManager.CallsCache.calls.getter()
{
  OUTLINED_FUNCTION_14_6();
  return closure #1 in closure #1 in AudioCallManager.CallsCache.calls.getter(v0);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AudioCallManager.CallsCache.calls.getter()
{
  OUTLINED_FUNCTION_14_6();
  return closure #1 in closure #1 in closure #1 in AudioCallManager.CallsCache.calls.getter(v0, v1);
}

unint64_t lazy protocol witness table accessor for type NSEnumerator and conformance NSEnumerator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSEnumerator and conformance NSEnumerator;
  if (!lazy protocol witness table cache variable for type NSEnumerator and conformance NSEnumerator)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for NSEnumerator);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSEnumerator and conformance NSEnumerator);
  }
  return result;
}

uint64_t outlined init with copy of CallsPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of CallsPresentation(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C311EB00()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioCallManager.watchProcessForCall(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Bool>)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_10(v9);
  *uint64_t v10 = v11;
  v10[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return closure #1 in AudioCallManager.watchProcessForCall(_:)(a1, v5, v6, v7, v8);
}

BOOL partial apply for closure #1 in AudioCallManager.resolveAndPresent()()
{
  OUTLINED_FUNCTION_14_6();
  return closure #1 in AudioCallManager.resolveAndPresent()(v0, v1, v2);
}

BOOL partial apply for closure #2 in AudioCallManager.resolveAndPresent()()
{
  OUTLINED_FUNCTION_14_6();
  return closure #2 in AudioCallManager.resolveAndPresent()(v0, v1, v2);
}

uint64_t sub_1C311ED50()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v3 = v2;
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 64);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 40) = v3;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AudioCallManager.init(withCallCoordinator:andPublisher:resolvingCallsWith:presentingCallsWith:), 0, 0);
}

uint64_t partial apply for closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)(a1, a2);
}

uint64_t sub_1C311EE64()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AudioCallManager.isICSInBackground.didset()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_7_42();
  return closure #1 in AudioCallManager.isICSInBackground.didset();
}

uint64_t sub_1C311EF44()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t key path getter for InCallControlsTitleCell.delegate : InCallControlsTitleCell@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for InCallControlsTitleCell.delegate : InCallControlsTitleCell(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t InCallControlsTitleCell.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t InCallControlsTitleCell.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*InCallControlsTitleCell.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

id InCallControlsTitleCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id InCallControlsTitleCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderViewController] = 0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderVCWrapper;
  id v3 = objc_allocWithZone((Class)CNKGroupIdentityHeaderSNaPWrapper);
  double v4 = v0;
  *(void *)&v0[v2] = objc_msgSend(v3, sel_init);

  double v5 = OUTLINED_FUNCTION_6_2();
  id v8 = objc_msgSendSuper2(v6, v7, v5, v4, ObjectType);
  objc_msgSend(v8, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  return v8;
}

id InCallControlsTitleCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsTitleCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderViewController] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderVCWrapper;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)CNKGroupIdentityHeaderSNaPWrapper), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void InCallControlsTitleCell.configure(with:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIBackgroundConfiguration.listPlainCell()();
  id v7 = objc_msgSend(self, sel_clearColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  uint64_t v8 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  MEMORY[0x1C8773CE0](v6);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = a1[5];
  unint64_t v11 = a1[6];
  unint64_t v13 = a1[4];
  id v14 = objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v12, v11);
  id v15 = @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(v9, v10, v12, v11);
  uint64_t v16 = v15;
  id v17 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderViewController);
  if (!v17)
  {
    InCallControlsTitleCell.setupAvatarViewController(for:)(v15);
LABEL_12:

    return;
  }
  id v18 = v17;
  objc_msgSend(v18, sel_groupIdentityDidUpdate_, v16);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)static Features.shared) + 0xD0))() & 1) == 0) {
    goto LABEL_16;
  }
  if (!(v13 >> 62))
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      swift_bridgeObjectRetain();
LABEL_8:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v13 & 0xC000000000000001) == 0, v13);
      if ((v13 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x1C87744F0](0, v13);
      }
      else {
        id v19 = *(id *)(v13 + 32);
      }
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderVCWrapper);
      id v22 = v20;
      objc_msgSend(v21, sel_configureGroupIdentityHeaderViewController_contact_, v18, v22);

      goto LABEL_12;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 != 1)
  {
LABEL_16:

    return;
  }
  swift_bridgeObjectRetain();
  if (_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_8;
  }

  swift_bridgeObjectRelease();
}

void InCallControlsTitleCell.setupAvatarViewController(for:)(void *a1)
{
  id v3 = v1;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CNGroupIdentityInlineActionsViewConfiguration);
  id v5 = CNGroupIdentityInlineActionsViewConfiguration.__allocating_init(defaultActionItems:displaysUnavailableActionTypes:)(MEMORY[0x1E4FBC860], 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CNGroupIdentityHeaderViewController);
  id v6 = a1;
  id v7 = v5;
  id v8 = CNGroupIdentityHeaderViewController.__allocating_init(groupIdentity:actionsViewConfiguration:)(v6, v5);
  uint64_t v9 = *(void **)&v3[OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderViewController];
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderViewController] = v8;
  Class v32 = (Class)v8;

  id v10 = [(objc_class *)v32 view];
  if (v10)
  {
    unint64_t v11 = v10;
    id v12 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v12, sel_addSubview_, v11);

    objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    unint64_t v13 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1C3769580;
    id v15 = objc_msgSend(v11, sel_topAnchor);
    id v16 = OUTLINED_FUNCTION_0_41();
    id v17 = objc_msgSend(v16, sel_topAnchor);

    id v18 = OUTLINED_FUNCTION_1_63();
    *(void *)(v14 + 32) = v18;
    id v19 = objc_msgSend(v11, sel_bottomAnchor);
    id v20 = OUTLINED_FUNCTION_0_41();
    id v21 = objc_msgSend(v20, sel_bottomAnchor);

    id v22 = OUTLINED_FUNCTION_1_63();
    *(void *)(v14 + 40) = v22;
    id v23 = objc_msgSend(v11, sel_leadingAnchor);
    id v24 = OUTLINED_FUNCTION_0_41();
    id v25 = objc_msgSend(v24, sel_leadingAnchor);

    id v26 = OUTLINED_FUNCTION_1_63();
    *(void *)(v14 + 48) = v26;
    id v27 = objc_msgSend(v11, sel_trailingAnchor);
    id v28 = OUTLINED_FUNCTION_0_41();
    id v29 = objc_msgSend(v28, sel_trailingAnchor);

    id v30 = objc_msgSend(v2, sel_constraintEqualToAnchor_, v29);
    *(void *)(v14 + 56) = v30;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_activateConstraints_, isa);

    id v7 = v11;
    Class v32 = isa;
  }
}

id CNGroupIdentityInlineActionsViewConfiguration.__allocating_init(defaultActionItems:displaysUnavailableActionTypes:)(uint64_t a1, char a2)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CNGroupIdentityActionItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithDefaultActionItems_displaysUnavailableActionTypes_, isa, a2 & 1);

  return v5;
}

id CNGroupIdentityHeaderViewController.__allocating_init(groupIdentity:actionsViewConfiguration:)(void *a1, void *a2)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithGroupIdentity_actionsViewConfiguration_, a1, a2);

  return v4;
}

UICollectionViewLayoutAttributes __swiftcall InCallControlsTitleCell.preferredLayoutAttributesFitting(_:)(UICollectionViewLayoutAttributes a1)
{
  uint64_t v2 = v1;
  v17.receiver = v1;
  v17.super_class = (Class)swift_getObjectType();
  id v4 = objc_msgSendSuper2(&v17, sel_preferredLayoutAttributesFittingAttributes_, a1.super.isa);
  id v5 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit23InCallControlsTitleCell_avatarHeaderViewController];
  if (v5)
  {
    id v6 = v5;
    id v7 = objc_msgSend(v2, sel_contentView);
    objc_msgSend(v7, sel_bounds);
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    CGFloat v13 = v12;
    CGFloat v15 = v14;

    v18.origin.x = v9;
    v18.origin.y = v11;
    v18.size.width = v13;
    v18.size.height = v15;
    objc_msgSend(v6, sel_sizeForLayoutInContainerSize_, CGRectGetWidth(v18), 1.79769313e308);
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v4, sel_setBounds_);
  }
  return (UICollectionViewLayoutAttributes)v4;
}

id InCallControlsTitleCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InCallControlsTitleCell()
{
  return self;
}

id ClarityUIKeypadView.init(didEnterNumberAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  static ClarityUIMetrics.standardSpacing.getter();
  uint64_t v7 = v6;
  uint64_t v8 = closure #1 in variable initialization expression of ClarityUIKeypadView.numberPadStrings();
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADA18]), sel_init);
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = 0x4020000000000000;
  *(void *)(a3 + 40) = v7;
  *(void *)(a3 + 48) = v8;
  *(void *)(a3 + 56) = result;
  *(void *)(a3 + 64) = a1;
  *(void *)(a3 + 72) = a2;
  return result;
}

uint64_t ClarityUIKeypadView.body.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  id v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v7 = type metadata accessor for LayoutDirection();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  char v12 = &__dst[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memcpy(__dst, v3, sizeof(__dst));
  uint64_t v13 = swift_allocObject();
  memcpy((void *)(v13 + 16), v3, 0x50uLL);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E4F3CBD8], v7);
  (*(void (**)(char *, unsigned char *, uint64_t))(v9 + 16))((char *)v2 + *(int *)(v6 + 36), v12, v7);
  uint64_t *v2 = KeyPath;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v2, (uint64_t)a1 + *(int *)(v15 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
  *a1 = partial apply for closure #1 in ClarityUIKeypadView.body.getter;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v13;
  outlined retain of ClarityUIKeypadView((uint64_t)__dst);
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v2, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v7);
  return swift_release();
}

uint64_t closure #1 in ClarityUIKeypadView.body.getter@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>);
  MEMORY[0x1F4188790](v51);
  uint64_t v53 = (uint64_t)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>);
  MEMORY[0x1F4188790](v52);
  uint64_t v55 = (uint64_t)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>);
  MEMORY[0x1F4188790](v54);
  uint64_t v58 = (uint64_t)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>);
  MEMORY[0x1F4188790](v56);
  uint64_t v57 = (uint64_t)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(__dst, a2, sizeof(__dst));
  v50[1] = a1;
  ClarityUIKeypadView.horizontalSpacingBetweenButtons(_:)();
  uint64_t v13 = v12;
  double v14 = a2[4];
  GeometryProxy.size.getter();
  double v16 = v15;
  objc_super v17 = self;
  objc_msgSend(v17, sel_outerCircleDiameter);
  double v19 = (v16 + v18 * -4.0) / 3.0;
  if (v19 > v14) {
    double v14 = v19;
  }
  objc_msgSend(v17, sel_outerCircleDiameter);
  double v21 = v20 / 3.0;
  if (v21 >= v14) {
    double v22 = v14;
  }
  else {
    double v22 = v21;
  }
  *(void *)uint64_t v7 = static Alignment.center.getter();
  *((void *)v7 + 1) = v23;
  *((void *)v7 + 2) = v13;
  v7[24] = 0;
  *((double *)v7 + 4) = v22;
  v7[40] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<GridLayout, ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>);
  *(void *)&__dst[0] = ClarityUIKeypadView.numberPadCharacters.getter();
  swift_getKeyPath();
  uint64_t v24 = swift_allocObject();
  memcpy((void *)(v24 + 16), a2, 0x50uLL);
  outlined retain of ClarityUIKeypadView((uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ArraySlice<TPNumberPadCharacter>]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [ArraySlice<TPNumberPadCharacter>] and conformance [A], &demangling cache variable for type metadata for [ArraySlice<TPNumberPadCharacter>]);
  lazy protocol witness table accessor for type ArraySlice<TPNumberPadCharacter> and conformance <A> ArraySlice<A>();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>> and conformance GridRow<A>, &demangling cache variable for type metadata for GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>);
  ForEach<>.init(_:id:content:)();
  long long v25 = *((_OWORD *)a2 + 1);
  __dst[0] = *(_OWORD *)a2;
  __dst[1] = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGSize?>);
  State.wrappedValue.getter();
  double v26 = 1.0;
  if ((v62 & 1) == 0)
  {
    double v27 = v60;
    double v28 = v61;
    GeometryProxy.size.getter();
    double v30 = v29 / v27;
    GeometryProxy.size.getter();
    if (v31 / v28 >= v30) {
      double v26 = v30;
    }
    else {
      double v26 = v31 / v28;
    }
    if (v26 >= 1.0) {
      double v26 = 1.0;
    }
  }
  static UnitPoint.center.getter();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v36 = v53;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v7, v53, &demangling cache variable for type metadata for Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>);
  uint64_t v37 = v36 + *(int *)(v51 + 36);
  *(double *)uint64_t v37 = v26;
  *(double *)(v37 + 8) = v26;
  *(void *)(v37 + 16) = v33;
  *(void *)(v37 + 24) = v35;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v7, &demangling cache variable for type metadata for Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>);
  uint64_t v38 = static Alignment.center.getter();
  uint64_t v40 = v39;
  uint64_t v41 = v55;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v36, v55, &demangling cache variable for type metadata for ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>);
  uint64_t v42 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v41 + *(int *)(v52 + 36));
  *uint64_t v42 = closure #1 in closure #2 in closure #1 in ClarityUIKeypadView.body.getter;
  v42[1] = 0;
  v42[2] = (uint64_t (*)@<X0>(uint64_t@<X8>))v38;
  v42[3] = v40;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v36, &demangling cache variable for type metadata for ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>);
  GeometryProxy.size.getter();
  GeometryProxy.size.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v43 = v58;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v41, v58, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>);
  char v44 = (_OWORD *)(v43 + *(int *)(v54 + 36));
  long long v45 = __dst[1];
  *char v44 = __dst[0];
  v44[1] = v45;
  v44[2] = __dst[2];
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v41, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>);
  uint64_t v46 = swift_allocObject();
  memcpy((void *)(v46 + 16), a2, 0x50uLL);
  uint64_t v47 = v57;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v43, v57, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>);
  id v48 = (uint64_t (**)())(v47 + *(int *)(v56 + 36));
  *id v48 = partial apply for closure #3 in closure #1 in ClarityUIKeypadView.body.getter;
  v48[1] = (uint64_t (*)())v46;
  outlined retain of ClarityUIKeypadView((uint64_t)a2);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v43, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>(v47, v59);
}

id ClarityUIKeypadView.horizontalSpacingBetweenButtons(_:)()
{
  double v1 = *(double *)(v0 + 40);
  GeometryProxy.size.getter();
  double v3 = v2;
  id v4 = self;
  objc_msgSend(v4, sel_outerCircleDiameter);
  if ((v3 + v5 * -3.0) * 0.25 < v1)
  {
    GeometryProxy.size.getter();
    objc_msgSend(v4, sel_outerCircleDiameter);
  }
  return objc_msgSend(v4, sel_outerCircleDiameter);
}

uint64_t ClarityUIKeypadView.numberPadCharacters.getter()
{
  double v1 = self;
  uint64_t v2 = outlined bridged method (pb) of @objc static TPDialerNumberPad.dialerNumberPadFullCharacters()(v1);
  if (!v2)
  {
    __break(1u);
LABEL_15:
    outlined init with copy of Any((uint64_t)v33, (uint64_t)v32);
    _StringGuts.grow(_:)(52);
    v27._object = (void *)0x80000001C379A0A0;
    v27._countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v27);
    _print_unlocked<A, B>(_:_:)();
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v0 = MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of Any(v4, (uint64_t)v33);
      outlined init with copy of Any((uint64_t)v33, (uint64_t)v32);
      type metadata accessor for NSNumber();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_15;
      }
      id v5 = objc_msgSend(v31, sel_integerValue);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v0 = v7;
      }
      unint64_t v6 = *(void *)(v0 + 16);
      if (v6 >= *(void *)(v0 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v0 = v8;
      }
      *(void *)(v0 + 16) = v6 + 1;
      *(void *)(v0 + 8 * v6 + 32) = v5;
      v4 += 32;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v0 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v0 + 16) != 12)
  {
    while (1)
    {
      v33[0] = 0;
      v33[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v28._countAndFlagsBits = 0xD000000000000033;
      v28._object = (void *)0x80000001C379A0E0;
      String.append(_:)(v28);
      type metadata accessor for TPNumberPadCharacter(0);
      v30._countAndFlagsBits = MEMORY[0x1C87733E0](v0, v29);
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_16:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ArraySlice<TPNumberPadCharacter>>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C376A6F0;
  specialized MutableCollection.subscript.getter(0, 2, v0);
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v11;
  *(void *)(v9 + 48) = v12;
  *(void *)(v9 + 56) = v13;
  specialized MutableCollection.subscript.getter(3uLL, 5, v0);
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 72) = v15;
  *(void *)(v9 + 80) = v16;
  *(void *)(v9 + 88) = v17;
  specialized MutableCollection.subscript.getter(6uLL, 8, v0);
  *(void *)(v9 + 96) = v18;
  *(void *)(v9 + 104) = v19;
  *(void *)(v9 + 112) = v20;
  *(void *)(v9 + 120) = v21;
  specialized MutableCollection.subscript.getter(9uLL, 11, v0);
  *(void *)(v9 + 128) = v22;
  *(void *)(v9 + 136) = v23;
  *(void *)(v9 + 144) = v24;
  *(void *)(v9 + 152) = v25;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter@<X0>(const void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>);
  swift_getKeyPath();
  uint64_t v3 = swift_allocObject();
  memcpy((void *)(v3 + 16), a1, 0x50uLL);
  swift_unknownObjectRetain();
  outlined retain of ClarityUIKeypadView((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<TPNumberPadCharacter>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ArraySlice<TPNumberPadCharacter> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<TPNumberPadCharacter>);
  lazy protocol witness table accessor for type TPNumberPadCharacter and conformance TPNumberPadCharacter(&lazy protocol witness table cache variable for type TPNumberPadCharacter and conformance TPNumberPadCharacter, type metadata accessor for TPNumberPadCharacter);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type KeypadButtonStyle and conformance KeypadButtonStyle();
  swift_getOpaqueTypeConformance2();
  return ForEach<>.init(_:id:content:)();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v32 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v5 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<Image, _FrameLayout>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  uint64_t v27 = *(void *)(v12 - 8);
  uint64_t v28 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  MEMORY[0x1F4188790](v29);
  Swift::String v30 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = *a1;
  uint64_t v17 = swift_allocObject();
  memcpy((void *)(v17 + 16), a2, 0x50uLL);
  *(void *)(v17 + 96) = v16;
  unint64_t v33 = v16;
  uint64_t v34 = a2;
  outlined retain of ClarityUIKeypadView((uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  static AccessibilityChildBehavior.ignore.getter();
  uint64_t v18 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<Image, _FrameLayout>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<Image, _FrameLayout>>);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v32);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = a2[6];
    if (v16 < *(void *)(v20 + 16))
    {
      uint64_t v21 = v20 + 16 * v16;
      uint64_t v23 = *(id (**)(char))(v21 + 32);
      uint64_t v22 = *(void *)(v21 + 40);
      uint64_t v37 = v23;
      uint64_t v38 = v22;
      uint64_t v35 = v8;
      uint64_t v36 = v18;
      swift_getOpaqueTypeConformance2();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v24 = (uint64_t)v30;
      uint64_t v25 = v28;
      View.accessibilityLabel<A>(_:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v25);
      uint64_t v26 = swift_allocObject();
      memcpy((void *)(v26 + 16), a2, 0x50uLL);
      *(void *)(v26 + 96) = v16;
      uint64_t v37 = partial apply for closure #3 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter;
      uint64_t v38 = v26;
      outlined retain of ClarityUIKeypadView((uint64_t)a2);
      lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
      lazy protocol witness table accessor for type KeypadButtonStyle and conformance KeypadButtonStyle();
      View.buttonStyle<A>(_:)();
      swift_release();
      return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v24, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
    }
  }
  __break(1u);
  return result;
}

id closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter(uint64_t a1, unint64_t a2)
{
  id result = objc_msgSend(*(id *)(a1 + 56), sel_playSoundForDialerCharacter_, a2);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(void *)(v5 + 16) <= a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 64);
  uint64_t v7 = v5 + 16 * a2;
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 40);
  swift_bridgeObjectRetain();
  v6(v8, v9);
  return (id)swift_bridgeObjectRelease();
}

id closure #2 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.TemplateRenderingMode?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = self;
  id result = objc_msgSend(v7, sel_imageForCharacter_highlighted_whiteVersion_, a1, 0, 0);
  if (result)
  {
    Image.init(uiImage:)();
    uint64_t v9 = *MEMORY[0x1E4F3EC20];
    uint64_t v10 = type metadata accessor for Image.TemplateRenderingMode();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v6, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
    uint64_t v11 = Image.renderingMode(_:)();
    swift_release();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for Image.TemplateRenderingMode?);
    objc_msgSend(v7, sel_outerCircleDiameter);
    objc_msgSend(v7, sel_outerCircleDiameter);
    static Alignment.center.getter();
    id result = (id)_FrameLayout.init(width:height:alignment:)();
    uint64_t v12 = v16;
    char v13 = v17;
    uint64_t v14 = v18;
    char v15 = v19;
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v12;
    *(unsigned char *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v14;
    *(unsigned char *)(a2 + 32) = v15;
    *(_OWORD *)(a2 + 40) = v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in ClarityUIKeypadView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Color.clear.getter();
  uint64_t result = GeometryProxy.size.getter();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t closure #3 in closure #1 in ClarityUIKeypadView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t key path getter for EnvironmentValues.layoutDirection : EnvironmentValues()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t key path setter for EnvironmentValues.layoutDirection : EnvironmentValues(uint64_t a1)
{
  type metadata accessor for LayoutDirection();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_16_0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v1, a1);
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t closure #1 in variable initialization expression of ClarityUIKeypadView.numberPadStrings()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSString?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37703E0;
  *(void *)(inited + 32) = @"1";
  *(void *)(inited + 40) = @"2";
  *(void *)(inited + 48) = @"3";
  *(void *)(inited + 56) = @"4";
  *(void *)(inited + 64) = @"5";
  *(void *)(inited + 72) = @"6";
  *(void *)(inited + 80) = @"7";
  *(void *)(inited + 88) = @"8";
  *(void *)(inited + 96) = @"9";
  *(void *)(inited + 104) = @"*";
  *(void *)(inited + 112) = @"0";
  *(void *)(inited + 120) = @"#";
  uint64_t v30 = inited;
  specialized Array._endMutation()();
  uint64_t v1 = @"1";
  uint64_t v2 = @"2";
  uint64_t v3 = @"3";
  uint64_t v4 = @"4";
  uint64_t v5 = @"5";
  uint64_t v6 = @"6";
  uint64_t v7 = @"7";
  uint64_t v8 = @"8";
  uint64_t v9 = @"9";
  uint64_t v10 = @"*";
  uint64_t v11 = @"0";
  uint64_t v12 = @"#";
  char v13 = @"1";
  uint64_t v14 = @"2";
  char v15 = @"3";
  uint64_t v16 = @"4";
  char v17 = @"5";
  uint64_t v18 = @"6";
  char v19 = @"7";
  long long v20 = @"8";
  uint64_t v21 = @"9";
  uint64_t v22 = @"*";
  uint64_t v23 = @"0";
  uint64_t v24 = @"#";
  uint64_t v25 = MEMORY[0x1E4FBC860];
  for (uint64_t i = 32; i != 128; i += 8)
  {
    uint64_t v27 = *(void **)(v30 + i);
    if (v27)
    {
      id v28 = v27;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();
    }
  }
  swift_bridgeObjectRelease();

  return v25;
}

uint64_t partial apply for closure #1 in ClarityUIKeypadView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ClarityUIKeypadView.body.getter(a1, (double *)(v2 + 16), a2);
}

uint64_t sub_1C31216A8()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t outlined retain of ClarityUIKeypadView(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_retain();
  return a1;
}

uint64_t key path getter for KeypadButtonStyle.onStateChanged : KeypadButtonStyle@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return swift_retain();
}

uint64_t key path setter for KeypadButtonStyle.onStateChanged : KeypadButtonStyle(uint64_t *a1, uint64_t (**a2)(char a1))
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  a2[1] = (uint64_t (*)(char))v5;
  return result;
}

uint64_t KeypadButtonStyle.onStateChanged.getter(uint64_t a1)
{
  return a1;
}

uint64_t KeypadButtonStyle.onStateChanged.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*KeypadButtonStyle.onStateChanged.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t KeypadButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeypadButtonStyleView<Color>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ButtonStyleConfiguration();
  OUTLINED_FUNCTION_0();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 16))(v9, a1);
  uint64_t v11 = static Color.clarityUIButtonBackground.getter();
  uint64_t v12 = static Color.primary.getter();
  *(void *)&v9[*(int *)(v6 + 36)] = v11;
  *(void *)&v9[*(int *)(v6 + 40)] = v12;
  v15[15] = ButtonStyleConfiguration.isPressed.getter() & 1;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type KeypadButtonStyleView<Color> and conformance KeypadButtonStyleView<A>, &demangling cache variable for type metadata for KeypadButtonStyleView<Color>);
  swift_retain();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v9, &demangling cache variable for type metadata for KeypadButtonStyleView<Color>);
}

uint64_t KeypadButtonStyleView.init(configuration:background:foregroundColor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for ButtonStyleConfiguration();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(a5, a1);
  uint64_t v11 = type metadata accessor for KeypadButtonStyleView();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v11 + 36), a2, a4);
  *(void *)(a5 + *(int *)(v11 + 40)) = a3;
  return result;
}

uint64_t partial apply for closure #1 in KeypadButtonStyle.makeBody(configuration:)(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void))(v2 + 16))(*a2);
}

uint64_t type metadata accessor for KeypadButtonStyleView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance KeypadButtonStyle(uint64_t a1)
{
  return KeypadButtonStyle.makeBody(configuration:)(a1, *v1, v1[1]);
}

uint64_t KeypadButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v29 = v4;
  type metadata accessor for _BackgroundStyleModifier();
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _OverlayModifier<Color>);
  OUTLINED_FUNCTION_25_13();
  type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
  OUTLINED_FUNCTION_25_13();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v45 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = MEMORY[0x1E4F3CC28];
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<Color>);
  v28[2] = v6;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
  v28[1] = v5;
  uint64_t v7 = swift_getWitnessTable();
  unint64_t v8 = lazy protocol witness table accessor for type Circle and conformance Circle();
  uint64_t v37 = v5;
  uint64_t v38 = MEMORY[0x1E4F3ED28];
  uint64_t v39 = v7;
  unint64_t v40 = v8;
  uint64_t v9 = type metadata accessor for PlatterShadowedContent();
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v28 - v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v28 - v22;
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v32 = v30;
  uint64_t v33 = v29;
  uint64_t v34 = v2;
  PlatterShadowedContent.init(shape:isPressed:content:)();
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v24 = swift_getWitnessTable();
  static UnitPoint.center.getter();
  View.scaleEffect(_:anchor:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  uint64_t v35 = v24;
  uint64_t v36 = MEMORY[0x1E4F3C7E0];
  uint64_t v25 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21, v15, v25);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v21, v15);
  static ViewBuilder.buildExpression<A>(_:)(v23, v15, v25);
  return ((uint64_t (*)(char *, uint64_t))v26)(v23, v15);
}

unint64_t lazy protocol witness table accessor for type Circle and conformance Circle()
{
  unint64_t result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Circle and conformance Circle;
  if (!lazy protocol witness table cache variable for type Circle and conformance Circle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Circle and conformance Circle);
  }
  return result;
}

uint64_t closure #1 in KeypadButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v33 = (char *)&v31 - v11;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _OverlayModifier<Color>);
  uint64_t v37 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v34 = (char *)&v31 - v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v32 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v38 = (char *)&v31 - v15;
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ButtonStyleConfiguration.Label>);
  ButtonStyleConfiguration.label.getter();
  uint64_t v31 = type metadata accessor for KeypadButtonStyleView();
  uint64_t v16 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>);
  default argument 1 of View.background<A>(_:ignoresSafeAreaEdges:)(v7, a2, v16, a3);
  uint64_t v17 = v33;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v9, &demangling cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>);
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = v16;
  uint64_t v51 = WitnessTable;
  uint64_t v19 = swift_getWitnessTable();
  default argument 6 of View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v10, MEMORY[0x1E4F3EB98], v19, MEMORY[0x1E4F3EB88]);
  uint64_t v20 = v34;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v10);
  uint64_t v21 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<Color>);
  uint64_t v48 = v19;
  uint64_t v49 = v21;
  uint64_t v22 = v37;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = v35;
  View.foregroundColor(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v22);
  uint64_t v25 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
  uint64_t v46 = v23;
  uint64_t v47 = v25;
  uint64_t v26 = v32;
  uint64_t v27 = swift_getWitnessTable();
  id v28 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v24, v26, v27);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v41 + 8);
  v29(v24, v26);
  static ViewBuilder.buildExpression<A>(_:)(v28, v26, v27);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, v26);
}

uint64_t partial apply for closure #1 in KeypadButtonStyleView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in KeypadButtonStyleView.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIKeypadView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in KeypadButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in KeypadButtonStyleView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #2 in closure #1 in KeypadButtonStyleView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  if (ButtonStyleConfiguration.isPressed.getter()) {
    uint64_t result = static Color.clarityUIPressedButtonOverlay.getter();
  }
  else {
    uint64_t result = static Color.clear.getter();
  }
  *a1 = result;
  return result;
}

uint64_t destroy for ClarityUIKeypadView(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ClarityUIKeypadView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  *(void *)(a1 + 72) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  id v4 = (id)v6;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ClarityUIKeypadView(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)*((void *)a2 + 7);
  long long v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v5;
  id v7 = v5;

  uint64_t v8 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ClarityUIKeypadView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClarityUIKeypadView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 48);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClarityUIKeypadView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIKeypadView()
{
  return &type metadata for ClarityUIKeypadView;
}

void *initializeBufferWithCopyOfBuffer for KeypadButtonStyle(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for KeypadButtonStyle()
{
  return swift_release();
}

void *assignWithCopy for KeypadButtonStyle(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for KeypadButtonStyle(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeypadButtonStyle(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeypadButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeypadButtonStyle()
{
  return &type metadata for KeypadButtonStyle;
}

uint64_t type metadata completion function for KeypadButtonStyleView()
{
  uint64_t result = type metadata accessor for ButtonStyleConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeypadButtonStyleView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v7 + 64) + v10;
  uint64_t v13 = *(void *)(v9 + 64) + 7;
  unsigned int v14 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  int v15 = (*(_DWORD *)(v7 + 80) | v10) & 0x100000;
  if (v14 > 7 || v15 != 0 || ((v13 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    uint64_t v19 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    unint64_t v20 = ((unint64_t)a2 + v12) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v19, v20, v8);
    *(void *)((v13 + (((unint64_t)a1 + v12) & v19)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + v20) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for KeypadButtonStyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((*(void *)(v5 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  return swift_release();
}

uint64_t initializeWithCopy for KeypadButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v13, v14);
  *(void *)((*(void *)(v10 + 48) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 48)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for KeypadButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v13, v14);
  *(void *)((*(void *)(v10 + 40) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 40)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for KeypadButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v13, v14);
  *(void *)((*(void *)(v10 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 32)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for KeypadButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v13, v14);
  *(void *)((*(void *)(v10 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 24)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeypadButtonStyleView(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 64);
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v6;
  uint64_t v15 = *(void *)(*(void *)(v6 - 8) + 64) + v12;
  uint64_t v16 = v13 + 7;
  if (v11 < a2)
  {
    unint64_t v17 = ((v16 + (v15 & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v18 = v17 & 0xFFFFFFF8;
    if ((v17 & 0xFFFFFFF8) != 0) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = a2 - v11 + 1;
    }
    if (v19 >= 0x10000) {
      unsigned int v20 = 4;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v19 < 0x100) {
      unsigned int v20 = 1;
    }
    if (v19 >= 2) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    switch(v21)
    {
      case 1:
        int v22 = *((unsigned __int8 *)a1 + v17);
        if (!v22) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v22 = *(unsigned __int16 *)((char *)a1 + v17);
        if (v22) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C3123258);
      case 4:
        int v22 = *(int *)((char *)a1 + v17);
        if (!v22) {
          break;
        }
LABEL_24:
        int v24 = v22 - 1;
        if (v18)
        {
          int v24 = 0;
          int v25 = *a1;
        }
        else
        {
          int v25 = 0;
        }
        return v11 + (v25 | v24) + 1;
      default:
        break;
    }
  }
  if (v7 == v11)
  {
    uint64_t v26 = (uint64_t)a1;
    uint64_t v10 = v7;
    uint64_t v8 = v14;
LABEL_30:
    return __swift_getEnumTagSinglePayload(v26, v10, v8);
  }
  uint64_t v26 = ((unint64_t)a1 + v15) & ~v12;
  if (v10 == v11) {
    goto LABEL_30;
  }
  unint64_t v27 = *(void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8);
  if (v27 >= 0xFFFFFFFF) {
    LODWORD(v27) = -1;
  }
  return (v27 + 1);
}

void storeEnumTagSinglePayload for KeypadButtonStyleView(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v9 = *(unsigned int *)(*(void *)(v8 - 8) + 84);
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  if (v12 <= v9) {
    unsigned int v13 = *(_DWORD *)(*(void *)(v8 - 8) + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + v14;
  uint64_t v16 = *(void *)(v11 + 64) + 7;
  size_t v17 = ((v16 + (v15 & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v13 >= a3)
  {
    int v20 = 0;
  }
  else
  {
    if (((v16 + (v15 & ~v14)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = a3 - v13 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
  }
  if (a2 > v13)
  {
    if (((v16 + (v15 & ~v14)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v21 = a2 - v13;
    }
    else {
      int v21 = 1;
    }
    if (((v16 + (v15 & ~v14)) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v22 = ~v13 + a2;
      bzero(a1, v17);
      *a1 = v22;
    }
    switch(v20)
    {
      case 1:
        *((unsigned char *)a1 + v17) = v21;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v17) = v21;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)((char *)a1 + v17) = v21;
        return;
      default:
        return;
    }
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)((char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x1C31234D4);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (!a2) {
        return;
      }
LABEL_34:
      if (v9 == v13)
      {
        uint64_t v23 = (uint64_t)a1;
        uint64_t v24 = a2;
        uint64_t v10 = v8;
      }
      else
      {
        uint64_t v23 = ((unint64_t)a1 + v15) & ~v14;
        if (v12 != v13)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v25 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v25 = (a2 - 1);
          }
          *(void *)((v16 + v23) & 0xFFFFFFFFFFFFFFF8) = v25;
          return;
        }
        uint64_t v24 = a2;
        uint64_t v9 = v12;
      }
      __swift_storeEnumTagSinglePayload(v23, v24, v9, v10);
      return;
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<LayoutDirection> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C31235C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C3123658()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for CalculatedSizePreferenceKey()
{
  return &unk_1F1E9AE48;
}

void *CalculatedSizePreferenceKey.defaultValue.unsafeMutableAddressor()
{
  return &static CalculatedSizePreferenceKey.defaultValue;
}

double specialized static CalculatedSizePreferenceKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(long long *__return_ptr))
{
  a2(&v4);
  if ((v5 & 1) == 0)
  {
    double result = *(double *)&v4;
    *(_OWORD *)a1 = v4;
    *(unsigned char *)(a1 + 16) = 0;
  }
  return result;
}

__n128 protocol witness for static PreferenceKey.defaultValue.getter in conformance CalculatedSizePreferenceKey@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = (__n128 *)CalculatedSizePreferenceKey.defaultValue.unsafeMutableAddressor();
  unsigned __int8 v3 = v2[1].n128_u8[0];
  __n128 result = *v2;
  *a1 = *v2;
  a1[1].n128_u8[0] = v3;
  return result;
}

uint64_t protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance CalculatedSizePreferenceKey()
{
  return MEMORY[0x1F40F85C8]();
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance CalculatedSizePreferenceKey()
{
  return MEMORY[0x1F40F85C8]();
}

uint64_t sub_1C3123918()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in KeypadButtonStyleView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in closure #1 in KeypadButtonStyleView.body.getter(a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter((const void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ArraySlice<TPNumberPadCharacter> and conformance <A> ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<TPNumberPadCharacter> and conformance <A> ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<TPNumberPadCharacter> and conformance <A> ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<TPNumberPadCharacter>);
    lazy protocol witness table accessor for type TPNumberPadCharacter and conformance TPNumberPadCharacter(&lazy protocol witness table cache variable for type TPNumberPadCharacter and conformance TPNumberPadCharacter, type metadata accessor for TPNumberPadCharacter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<TPNumberPadCharacter> and conformance <A> ArraySlice<A>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in ClarityUIKeypadView.body.getter()
{
  return closure #3 in closure #1 in ClarityUIKeypadView.body.getter();
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Grid<ForEach<[ArraySlice<TPNumberPadCharacter>], ArraySlice<TPNumberPadCharacter>, GridRow<ForEach<ArraySlice<TPNumberPadCharacter>, TPNumberPadCharacter, <<opaque return type of View.buttonStyle<A>(_:)>>.0>>>>, _ScaleEffect>, _OverlayModifier<GeometryReader<ModifiedContent<Color, _PreferenceWritingModifier<CalculatedSizePreferenceKey>>>>>, _FrameLayout>, _PreferenceActionModifier<CalculatedSizePreferenceKey>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter(a1, (void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<Image, _FrameLayout>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<Image, _FrameLayout>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<Image, _FrameLayout>>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type TPNumberPadCharacter and conformance TPNumberPadCharacter((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(VideoReactionButtonRow, VideoReactionButtonRow)>>, _EnvironmentKeyWritingModifier<VideoReactionPickerViewModel?>>, _AppearanceActionModifier>, _PaddingLayout>, _FrameLayout>, _BackgroundModifier<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<ThoughtBubble, Material>, _InsettableBackgroundShapeModifier<Color, ThoughtBubble>>, _ShadowEffect>, _AnimationModifier<Bool>>>>>, _CoordinateSpaceModifier<String>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(VideoReactionButtonRow, VideoReactionButtonRow)>>, _EnvironmentKeyWritingModifier<VideoReactionPickerViewModel?>>, _AppearanceActionModifier>, _PaddingLayout>, _FrameLayout>, _BackgroundModifier<GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<ThoughtBubble, Material>, _InsettableBackgroundShapeModifier<Color, ThoughtBubble>>, _ShadowEffect>, _AnimationModifier<Bool>>>>>, _CoordinateSpaceModifier<String>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type VideoReactionButtonStyle and conformance VideoReactionButtonStyle((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(StrokeShapeView<Path, ForegroundStyle, EmptyView>, (<<opaque return type of View.onChange<A>(of:initial:_:)>>.0)?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _FrameLayout>, _ClipEffect<RoundedRectangle>>, _AnimationModifier<Bool>>, _AnimationModifier<ShutterButtonStyle.InnerStyle>>, _AnimationModifier<Bool>>)>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<Path, ForegroundStyle, EmptyView>, (<<opaque return type of View.onChange<A>(of:initial:_:)>>.0)?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _FrameLayout>, _ClipEffect<RoundedRectangle>>, _AnimationModifier<Bool>>, _AnimationModifier<ShutterButtonStyle.InnerStyle>>, _AnimationModifier<Bool>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ShutterModel and conformance ShutterModel((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TPNumberPadCharacter and conformance TPNumberPadCharacter(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeypadButtonStyle and conformance KeypadButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type KeypadButtonStyle and conformance KeypadButtonStyle;
  if (!lazy protocol witness table cache variable for type KeypadButtonStyle and conformance KeypadButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeypadButtonStyle and conformance KeypadButtonStyle);
  }
  return result;
}

id partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter()
{
  return closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter(v0 + 16, *(void *)(v0 + 96));
}

id partial apply for closure #2 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _FrameLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t objectdestroyTm_3()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

id partial apply for closure #3 in closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIKeypadView.body.getter(char a1)
{
  uint64_t v2 = &selRef_playSoundForDialerCharacter_;
  if ((a1 & 1) == 0) {
    uint64_t v2 = &selRef_stopSoundForDialerCharacter_;
  }
  return objc_msgSend(*(id *)(v1 + 72), *v2, *(void *)(v1 + 96));
}

uint64_t outlined bridged method (pb) of @objc static TPDialerNumberPad.dialerNumberPadFullCharacters()(void *a1)
{
  id v1 = objc_msgSend(a1, sel_dialerNumberPadFullCharacters);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

id PictureInPictureWrapperView._touchInsets.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PictureInPictureWrapperView();
  return objc_msgSendSuper2(&v2, sel__touchInsets);
}

void PictureInPictureWrapperView._touchInsets.setter(double a1, double a2, double a3, double a4)
{
  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for PictureInPictureWrapperView();
  objc_msgSendSuper2(&v9, sel__setTouchInsets_, a1, a2, a3, a4);
  PictureInPictureWrapperView._touchInsets.didset();
}

void PictureInPictureWrapperView.layoutSubviews()()
{
  id v1 = objc_msgSend(v0, sel_subviews);
  type metadata accessor for UIView();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_9;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v4 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x1C87744F0](v4, v2);
    }
    else {
      id v5 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v6 = v5;
    ++v4;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v6, sel_setFrame_);
  }
  while (v3 != v4);
LABEL_9:
  swift_bridgeObjectRelease();
}

id PictureInPictureWrapperView.addSubview(_:)(void *a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for PictureInPictureWrapperView();
  objc_msgSendSuper2(&v4, sel_addSubview_, a1);
  objc_msgSend(v1, sel_bounds);
  return objc_msgSend(a1, sel_setFrame_);
}

void PictureInPictureWrapperView._touchInsets.didset()
{
  id v1 = objc_msgSend(v0, sel_superview);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v0, sel__touchInsets);
    objc_msgSend(v2, sel__setTouchInsets_);
  }
}

id PictureInPictureWrapperView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for PictureInPictureWrapperView();
  return objc_msgSendSuper2(&v10, sel_initWithFrame_, a1, a2, a3, a4);
}

id PictureInPictureWrapperView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for PictureInPictureWrapperView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id PictureInPictureWrapperView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PictureInPictureWrapperView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id PictureInPictureWrapperViewController.wrappedViewController.getter()
{
  return *(id *)(v0 + direct field offset for PictureInPictureWrapperViewController.wrappedViewController);
}

void key path getter for PictureInPictureWrapperViewController.touchInsets : <A>PictureInPictureWrapperViewController<A>(void **a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
}

uint64_t key path setter for PictureInPictureWrapperViewController.touchInsets : <A>PictureInPictureWrapperViewController<A>(double *a1, void **a2)
{
  return (*(uint64_t (**)(double, double, double, double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70))(*a1, a1[1], a1[2], a1[3]);
}

void PictureInPictureWrapperViewController.touchInsets.didset()
{
  id v1 = objc_msgSend(v0, sel_viewIfLoaded);
  if (v1)
  {
    objc_super v2 = v1;
    uint64_t v3 = (double *)&v0[direct field offset for PictureInPictureWrapperViewController.touchInsets];
    swift_beginAccess();
    objc_msgSend(v2, sel__setTouchInsets_, *v3, v3[1], v3[2], v3[3]);
  }
  id v4 = objc_msgSend(*(id *)&v0[direct field offset for PictureInPictureWrapperViewController.wrappedViewController], sel_viewIfLoaded);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (double *)&v0[direct field offset for PictureInPictureWrapperViewController.touchInsets];
    swift_beginAccess();
    objc_msgSend(v5, sel__setTouchInsets_, *v6, v6[1], v6[2], v6[3]);
  }
}

double PictureInPictureWrapperViewController.touchInsets.getter()
{
  uint64_t v1 = v0 + direct field offset for PictureInPictureWrapperViewController.touchInsets;
  swift_beginAccess();
  return *(double *)v1;
}

void PictureInPictureWrapperViewController.touchInsets.setter(double a1, double a2, double a3, double a4)
{
  objc_super v9 = (double *)(v4 + direct field offset for PictureInPictureWrapperViewController.touchInsets);
  swift_beginAccess();
  *objc_super v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  _OWORD v9[3] = a4;
  PictureInPictureWrapperViewController.touchInsets.didset();
}

void (*PictureInPictureWrapperViewController.touchInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PictureInPictureWrapperViewController.touchInsets.modify;
}

void PictureInPictureWrapperViewController.touchInsets.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    PictureInPictureWrapperViewController.touchInsets.didset();
  }
}

id PictureInPictureWrapperViewController.__allocating_init(wrappedViewController:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return PictureInPictureWrapperViewController.init(wrappedViewController:)(a1);
}

id PictureInPictureWrapperViewController.init(wrappedViewController:)(uint64_t a1)
{
  objc_super v2 = (_OWORD *)(v1 + direct field offset for PictureInPictureWrapperViewController.touchInsets);
  long long v3 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
  _OWORD *v2 = *MEMORY[0x1E4FB2848];
  v2[1] = v3;
  *(void *)(v1 + direct field offset for PictureInPictureWrapperViewController.wrappedViewController) = a1;
  OUTLINED_FUNCTION_2_47();
  return objc_msgSendSuper2(&v5, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t type metadata accessor for PictureInPictureWrapperViewController()
{
  return __swift_instantiateGenericMetadata();
}

id PictureInPictureWrapperViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PictureInPictureWrapperViewController.init(coder:)()
{
  uint64_t v1 = &v0[direct field offset for PictureInPictureWrapperViewController.touchInsets];
  long long v2 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
  *(_OWORD *)uint64_t v1 = *MEMORY[0x1E4FB2848];
  *((_OWORD *)v1 + 1) = v2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc PictureInPictureWrapperViewController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  PictureInPictureWrapperViewController.init(coder:)();
}

id PictureInPictureWrapperViewController.updatePreferredContentSize()()
{
  objc_msgSend(*(id *)&v0[direct field offset for PictureInPictureWrapperViewController.wrappedViewController], sel_preferredContentSize);
  return objc_msgSend(v0, sel_setPreferredContentSize_);
}

Swift::Void __swiftcall PictureInPictureWrapperViewController.loadView()()
{
  id v1 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PictureInPictureWrapperView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, sel_setView_, v1);

  long long v2 = *(void **)&v0[direct field offset for PictureInPictureWrapperViewController.wrappedViewController];
  objc_msgSend(v2, sel_willMoveToParentViewController_, v0);
  id v3 = OUTLINED_FUNCTION_3_62();
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v3;
  id v5 = objc_msgSend(v2, sel_view);
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = v5;
  objc_msgSend(v4, sel_addSubview_, v5);

  objc_msgSend(v0, sel_addChildViewController_, v2);
  objc_msgSend(v2, sel_didMoveToParentViewController_, v0);
  id v7 = objc_msgSend(v2, sel_view);
  if (!v7)
  {
LABEL_9:
    __break(1u);
    return;
  }
  id v8 = v7;
  objc_msgSend(v7, sel_setAutoresizingMask_, 0);
}

uint64_t type metadata accessor for PictureInPictureWrapperView()
{
  return self;
}

void @objc PictureInPictureWrapperViewController.loadView()(void *a1)
{
  id v1 = a1;
  PictureInPictureWrapperViewController.loadView()();
}

Swift::Void __swiftcall PictureInPictureWrapperViewController.viewDidLoad()()
{
  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_2_47();
  objc_msgSendSuper2(&v7, sel_viewDidLoad);
  PictureInPictureWrapperViewController.updatePreferredContentSize()();
  id v2 = objc_msgSend(v0, sel_view);
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void (**)(void))((*v1 & *v0) + 0x68);
    v4();
    objc_msgSend(v3, sel__setTouchInsets_);

    id v5 = objc_msgSend(*(id *)((char *)v0 + direct field offset for PictureInPictureWrapperViewController.wrappedViewController), sel_view);
    if (v5)
    {
      uint64_t v6 = v5;
      v4();
      objc_msgSend(v6, sel__setTouchInsets_);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void @objc PictureInPictureWrapperViewController.viewDidLoad()(void *a1)
{
  id v1 = a1;
  PictureInPictureWrapperViewController.viewDidLoad()();
}

id PictureInPictureWrapperViewController.preferredContentSizeDidChange(forChildContentContainer:)(uint64_t a1)
{
  OUTLINED_FUNCTION_2_47();
  objc_msgSendSuper2(&v3, sel_preferredContentSizeDidChangeForChildContentContainer_, a1);
  return PictureInPictureWrapperViewController.updatePreferredContentSize()();
}

void @objc PictureInPictureWrapperViewController.preferredContentSizeDidChange(forChildContentContainer:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectRetain();
  id v5 = a1;
  PictureInPictureWrapperViewController.preferredContentSizeDidChange(forChildContentContainer:)(a3);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall PictureInPictureWrapperViewController.handlePictureInPictureRestored()()
{
  PictureInPictureWrapperViewController.updatePreferredContentSize()();
  id v1 = objc_msgSend(*(id *)(v0 + direct field offset for PictureInPictureWrapperViewController.wrappedViewController), sel_view);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_setAutoresizingMask_, 0);
  }
  else
  {
    __break(1u);
  }
}

__C::CGRect __swiftcall PictureInPictureWrapperViewController.frameForRestoreAnimation()()
{
  id v0 = OUTLINED_FUNCTION_3_62();
  if (!v0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v5 = v0;
  id v6 = objc_msgSend(v0, sel_window);

  if (!v6 || (id v7 = objc_msgSend(v6, sel_windowScene), v6, !v7))
  {
    id v13 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v13, sel__referenceBounds);
    OUTLINED_FUNCTION_38();
    goto LABEL_8;
  }
  id v8 = objc_msgSend(v7, sel_screen);
  id v9 = objc_msgSend(v8, sel_fixedCoordinateSpace);

  id v10 = OUTLINED_FUNCTION_3_62();
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = v10;
  objc_msgSend(v10, sel_bounds);
  OUTLINED_FUNCTION_38();

  id v12 = OUTLINED_FUNCTION_3_62();
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v13 = v12;
  double v14 = OUTLINED_FUNCTION_41();
  objc_msgSend(v15, v16, v13, v14);
  OUTLINED_FUNCTION_38();

  swift_unknownObjectRelease();
LABEL_8:

  double v1 = OUTLINED_FUNCTION_41();
LABEL_12:
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

double @objc PictureInPictureWrapperViewController.frameForRestoreAnimation()(void *a1)
{
  id v1 = a1;
  *(void *)&double v2 = (unint64_t)PictureInPictureWrapperViewController.frameForRestoreAnimation()();

  return v2;
}

CGSize __swiftcall PictureInPictureWrapperViewController.preferredPiPContentAspectRatio()()
{
  objc_msgSend(*(id *)(v0 + direct field offset for PictureInPictureWrapperViewController.wrappedViewController), sel_preferredPiPContentAspectRatio);
  result.height = v2;
  result.width = v1;
  return result;
}

double @objc PictureInPictureWrapperViewController.preferredPiPContentAspectRatio()(void *a1)
{
  id v1 = a1;
  *(void *)&double v2 = *(_OWORD *)&PictureInPictureWrapperViewController.preferredPiPContentAspectRatio()();

  return v2;
}

void __swiftcall PictureInPictureWrapperViewController.viewControllerForPiP()(UIViewController_optional *__return_ptr retstr)
{
  id v2 = *(id *)(v1 + direct field offset for PictureInPictureWrapperViewController.wrappedViewController);
}

id @objc PictureInPictureWrapperViewController.viewControllerForPiP()@<X0>(UIViewController_optional *a1@<X8>)
{
  PictureInPictureWrapperViewController.viewControllerForPiP()(a1);
  return v1;
}

Swift::Bool __swiftcall PictureInPictureWrapperViewController.restoreViewControllerHierarchyWhenExitingPiP()()
{
  return 1;
}

uint64_t @objc PictureInPictureWrapperViewController.restoreViewControllerHierarchyWhenExitingPiP()()
{
  return 1;
}

id PictureInPictureWrapperViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  double v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void PictureInPictureWrapperViewController.init(nibName:bundle:)()
{
}

void @objc PictureInPictureWrapperViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v5 = a4;
  PictureInPictureWrapperViewController.init(nibName:bundle:)();
}

id PictureInPictureWrapperViewController.__deallocating_deinit()
{
  OUTLINED_FUNCTION_2_47();
  return objc_msgSendSuper2(&v1, sel_dealloc);
}

void @objc PictureInPictureWrapperViewController.__ivar_destroyer(uint64_t a1)
{
}

uint64_t base witness table accessor for View in PictureInPictureWrapper<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance PictureInPictureWrapper<A>(uint64_t a1)
{
  return PictureInPictureWrapper.makeUIViewController(context:)(a1, *v1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PictureInPictureWrapper<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F40FAB70](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PictureInPictureWrapper<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F40FAB28](a1, a2, a3, WitnessTable);
}

void protocol witness for View.body.getter in conformance PictureInPictureWrapper<A>()
{
}

uint64_t sub_1C3125260()
{
  return 8;
}

void *sub_1C312526C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for PictureInPictureWrapperViewController()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PictureInPictureWrapperViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PictureInPictureWrapperViewController);
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.touchInsets.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.touchInsets.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.touchInsets.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.__allocating_init(wrappedViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.handlePictureInPictureRestored()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.frameForRestoreAnimation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.preferredPiPContentAspectRatio()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.viewControllerForPiP()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of PictureInPictureWrapperViewController.restoreViewControllerHierarchyWhenExitingPiP()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t type metadata accessor for PictureInPictureWrapper()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

uint64_t specialized SyncedScreeningAlphaGradientView.AnimatedState.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Double>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  double v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._minOpacity;
  uint64_t v11 = 0;
  Published.init(initialValue:)();
  id v6 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  v6(v5, v4, v1);
  uint64_t v7 = v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._maxOpacity;
  uint64_t v11 = 0;
  Published.init(initialValue:)();
  v6(v7, v4, v1);
  uint64_t v8 = v0 + direct field offset for SyncedScreeningAlphaGradientView.AnimatedState._unitStart;
  uint64_t v11 = 0;
  Published.init(initialValue:)();
  v6(v8, v4, v1);
  return v0;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in variable initialization expression of SyncedScreeningAlphaGradientView._viewState()
{
  return specialized SyncedScreeningAlphaGradientView.AnimatedState.init()();
}

uint64_t one-time initialization function for positionalData()
{
  type metadata accessor for PositionalData();
  swift_allocObject();
  uint64_t result = PositionalData.init()();
  static TranscriptionViewComposer.positionalData = result;
  return result;
}

uint64_t *TranscriptionViewComposer.positionalData.unsafeMutableAddressor()
{
  if (one-time initialization token for positionalData != -1) {
    swift_once();
  }
  return &static TranscriptionViewComposer.positionalData;
}

uint64_t static TranscriptionViewComposer.positionalData.getter()
{
  if (one-time initialization token for positionalData != -1) {
    swift_once();
  }
  return swift_retain();
}

void __swiftcall TranscriptionViewComposer.compose()(UIViewController *__return_ptr retstr)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v60 = *(void *)(v1 - 8);
  uint64_t v61 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v59 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioCallMiddleContainerView<TranscriptionView>);
  uint64_t v3 = MEMORY[0x1F4188790](v57);
  uint64_t v58 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v56 - v5;
  uint64_t v7 = (int *)type metadata accessor for TranscriptionView();
  MEMORY[0x1F4188790](v7);
  id v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  uint64_t v10 = self;
  swift_retain();
  id v11 = objc_msgSend(v10, sel_sharedInstance);
  id v12 = objc_msgSend(v11, sel_screeningCall);

  if (v12)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v13 = *(uint64_t (**)(id))(*(void *)static CallScreeningRTTHelper.shared + 184);
    id v14 = v12;
    char v15 = v13(v12);

    if (v15)
    {
      id v16 = objc_msgSend(self, sel_viewControllerForCall_, v14);

      if (v16)
      {
        swift_release();
        return;
      }
    }
    else
    {
    }
  }
  uint64_t v56 = v6;
  uint64_t v17 = one-time initialization token for positionalData;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = static TranscriptionViewComposer.positionalData;
  int v19 = self;
  swift_retain();
  id v20 = objc_msgSend(v19, sel_conversationKit);
  v62._object = (void *)0xE000000000000000;
  v21._object = (void *)0x80000001C379A2C0;
  v21._countAndFlagsBits = 0xD000000000000025;
  v22.value._countAndFlagsBits = 0x61737265766E6F43;
  v22.value._object = (void *)0xEF74694B6E6F6974;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v62._countAndFlagsBits = 0;
  Swift::String v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v62);

  *(_DWORD *)id v9 = 0x10000;
  uint64_t v25 = (uint64_t *)&v9[v7[6]];
  *uint64_t v25 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for TranscriptionViewModel(0);
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  swift_retain();
  *((void *)v9 + 1) = ObservedObject.init(wrappedValue:)();
  *((void *)v9 + 2) = v26;
  *(void *)&v9[v7[7]] = v18;
  *(Swift::String *)&v9[v7[8]] = v24;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  swift_retain_n();
  id v27 = OUTLINED_FUNCTION_0_42();
  UIFontDescriptorSymbolicTraits v28 = *(_DWORD *)v9;
  Class isa = UIFont.withTraits(_:)(*(_DWORD *)v9).super.isa;

  [(objc_class *)isa pointSize];
  double v31 = v30;

  v32.n128_f64[0] = v31 + v31;
  (*(void (**)(__n128))(*(void *)v18 + 328))(v32);
  swift_release();
  swift_release_n();
  uint64_t v33 = (uint64_t)v56;
  outlined init with copy of TranscriptionView((uint64_t)v9, (uint64_t)v56);
  uint64_t v34 = (uint64_t *)(v33 + *(int *)(v57 + 36));
  swift_retain();
  uint64_t v35 = v33;
  *uint64_t v34 = ObservedObject.init(wrappedValue:)();
  v34[1] = v36;
  uint64_t v37 = v58;
  outlined init with copy of AudioCallMiddleContainerView<TranscriptionView>(v33, v58);
  id v38 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaskSizingLockScreenHostingController<AudioCallMiddleContainerView<TranscriptionView>>));
  uint64_t v39 = (void *)specialized MaskSizingLockScreenHostingController.init(rootView:)(v37);
  id v40 = OUTLINED_FUNCTION_0_42();
  Class v41 = UIFont.withTraits(_:)(v28).super.isa;

  [(objc_class *)v41 pointSize];
  double v43 = v42;

  uint64_t v44 = *(void (**)(uint64_t))(*(void *)static TranscriptionViewComposer.positionalData + 248);
  uint64_t v45 = swift_retain();
  uint64_t v46 = v59;
  v44(v45);
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v47 = v61;
  uint64_t v48 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v47);
  id v49 = objc_allocWithZone((Class)type metadata accessor for BlurryMaskView());
  uint64_t v50 = BlurryMaskView.init(textSize:isBottomVisiblePublisher:)(v48, v43);
  id v51 = objc_msgSend(v39, sel_view);
  if (v51)
  {
    uint64_t v52 = v51;
    objc_msgSend(v51, sel_setMaskView_, v50);

    id v53 = objc_msgSend(v39, sel_view);
    if (v53)
    {
      uint64_t v54 = v53;
      id v55 = objc_msgSend(self, sel_clearColor);
      objc_msgSend(v54, sel_setBackgroundColor_, v55);
      swift_release();

      outlined destroy of AudioCallMiddleContainerView<TranscriptionView>(v35);
      outlined destroy of TranscriptionView((uint64_t)v9);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t MaskSizingLockScreenHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return MaskSizingLockScreenHostingController.init(rootView:)(a1);
}

void __swiftcall TranscriptionViewComposer.composeBackground(with:)(UIViewController *__return_ptr retstr, UIView *with)
{
  uint64_t v2 = one-time initialization token for positionalData;
  id v3 = with;
  if (v2 != -1) {
    swift_once();
  }
  type metadata accessor for PositionalData();
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PositionalData and conformance PositionalData, (void (*)(uint64_t))type metadata accessor for PositionalData);
  swift_retain();
  uint64_t v4 = ObservedObject.init(wrappedValue:)();
  uint64_t v6 = v5;
  id v7 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockScreenHostingController<SyncedScreeningAlphaGradientView<UIView>>));
  LOBYTE(v11) = 0;
  id v8 = objc_msgSend((id)UIHostingController.init(rootView:)(), sel_view, v3, 0x3FD3333333333333, 0, 0x3FD3333333333333, 0x3FE0000000000000, 0, 0x3FF0000000000000, v4, v6, specialized implicit closure #2 in implicit closure #1 in variable initialization expression of SyncedScreeningAlphaGradientView._viewState, 0, v11);
  if (v8)
  {
    id v9 = v8;
    id v10 = objc_msgSend(self, sel_clearColor);
    objc_msgSend(v9, sel_setBackgroundColor_, v10);
  }
  else
  {
    __break(1u);
  }
}

id TranscriptionViewComposer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id TranscriptionViewComposer.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TranscriptionViewComposer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CNKTranscriptionViewComposerFactory.makeViewComposer()()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for TranscriptionViewComposer());
  return objc_msgSend(v0, sel_init);
}

CNKTranscriptionViewComposerFactory __swiftcall CNKTranscriptionViewComposerFactory.init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (CNKTranscriptionViewComposerFactory)objc_msgSend(v0, sel_init);
}

id CNKTranscriptionViewComposerFactory.init()()
{
  v1.super_class = (Class)CNKTranscriptionViewComposerFactory;
  return objc_msgSendSuper2(&v1, sel_init);
}

void MaskSizingLockScreenHostingController.viewDidLayoutSubviews()()
{
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for MaskSizingLockScreenHostingController();
  objc_msgSendSuper2(&v17, sel_viewDidLayoutSubviews);
  id v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_super v2 = v1;
  id v3 = objc_msgSend(v1, sel_maskView);

  if (!v3) {
    return;
  }
  id v4 = objc_msgSend(v0, sel_view);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, sel_maskView);

  if (!v6) {
    return;
  }
  id v7 = objc_msgSend(v0, sel_view);
  if (!v7)
  {
LABEL_10:
    __break(1u);
    return;
  }
  id v8 = v7;
  objc_msgSend(v7, sel_bounds);
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;

  objc_msgSend(v6, sel_setFrame_, v10, v12, v14, v16);
}

void @objc MaskSizingLockScreenHostingController.viewDidLayoutSubviews()(void *a1)
{
  id v1 = a1;
  MaskSizingLockScreenHostingController.viewDidLayoutSubviews()();
}

uint64_t specialized MaskSizingLockScreenHostingController.init(rootView:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioCallMiddleContainerView<TranscriptionView>);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  id v7 = (char *)&v10 - v6;
  outlined init with copy of AudioCallMiddleContainerView<TranscriptionView>(a1, (uint64_t)&v10 - v6);
  outlined init with copy of AudioCallMiddleContainerView<TranscriptionView>((uint64_t)v7, (uint64_t)v5);
  uint64_t v8 = UIHostingController.init(rootView:)();
  outlined destroy of AudioCallMiddleContainerView<TranscriptionView>((uint64_t)v7);
  outlined destroy of AudioCallMiddleContainerView<TranscriptionView>(a1);
  return v8;
}

uint64_t MaskSizingLockScreenHostingController.init(rootView:)(uint64_t a1)
{
  uint64_t v3 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + class metadata base offset for MaskSizingLockScreenHostingController);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, a1, v3);
  uint64_t v7 = LockScreenHostingController.init(rootView:)((uint64_t)v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return v7;
}

void *MaskSizingLockScreenHostingController.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return MaskSizingLockScreenHostingController.init(coder:rootView:)(a1, a2);
}

void *MaskSizingLockScreenHostingController.init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + class metadata base offset for MaskSizingLockScreenHostingController);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *))(v6 + 16))((char *)&v13 - v7);
  uint64_t v9 = LockScreenHostingController.init(coder:rootView:)(a1, (uint64_t)v8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  id v11 = v9;
  v10(a2, v5);
  if (v9) {

  }
  return v9;
}

id MaskSizingLockScreenHostingController.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for MaskSizingLockScreenHostingController();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc MaskSizingLockScreenHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return MaskSizingLockScreenHostingController.init(coder:)(a3);
}

id MaskSizingLockScreenHostingController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MaskSizingLockScreenHostingController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void BlurryMaskView.isBottomVisible.didset(char a1)
{
  if (*(unsigned char *)(v1
                + OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_isBottomVisible) != (a1 & 1))
    BlurryMaskView.updateBottomMaskAlpha(_:)();
}

void BlurryMaskView.isBottomVisible.setter(char a1)
{
  char v2 = *(unsigned char *)(v1
                + OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_isBottomVisible);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_isBottomVisible) = a1;
  BlurryMaskView.isBottomVisible.didset(v2);
}

char *BlurryMaskView.init(textSize:isBottomVisiblePublisher:)(uint64_t a1, double a2)
{
  uint64_t v29 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_subscription] = 0;
  v2[OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_isBottomVisible] = 1;
  *(double *)&v2[OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_textSize] = a2;
  uint64_t v7 = (objc_class *)type metadata accessor for BlurryMaskView();
  v35.receiver = v2;
  v35.super_class = v7;
  id v8 = objc_msgSendSuper2(&v35, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v9 = self;
  uint64_t v10 = (char *)v8;
  id v11 = objc_msgSend(v9, sel_clearColor);
  objc_msgSend(v10, sel_setBackgroundColor_, v11);

  id v12 = objc_msgSend(v10, sel_layer);
  self;
  UIFontDescriptorSymbolicTraits v28 = (void *)swift_dynamicCastObjCClassUnconditional();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769580;
  *(void *)(inited + 32) = objc_msgSend(v9, sel_clearColor);
  *(void *)(inited + 40) = objc_msgSend(v9, sel_blackColor);
  *(void *)(inited + 48) = objc_msgSend(v9, sel_blackColor);
  *(void *)(inited + 56) = objc_msgSend(v9, sel_clearColor);
  *(void *)&long long v32 = inited;
  specialized Array._endMutation()();
  uint64_t v14 = v32;
  uint64_t v34 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v15 = 0;
  uint64_t v16 = v34;
  do
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v17 = (id)MEMORY[0x1C87744F0](v15, v14);
    }
    else {
      id v17 = *(id *)(v14 + 8 * v15 + 32);
    }
    uint64_t v18 = v17;
    id v19 = objc_msgSend(v17, sel_CGColor);
    type metadata accessor for CGColorRef(0);
    uint64_t v33 = v20;

    *(void *)&long long v32 = v19;
    uint64_t v34 = v16;
    unint64_t v21 = *(void *)(v16 + 16);
    if (v21 >= *(void *)(v16 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v16 = v34;
    }
    ++v15;
    *(void *)(v16 + 16) = v21 + 1;
    outlined init with take of Any(&v32, (_OWORD *)(v16 + 32 * v21 + 32));
  }
  while (v15 != 4);
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc CAGradientLayer.colors.setter(v16, v28);

  id v22 = objc_msgSend(v10, sel_layer);
  self;
  Swift::String v23 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v24 = BlurryMaskView.gradientLocations(_:)();
  outlined bridged method (mbnn) of @objc CAGradientLayer.locations.setter(v24, v23);

  *(void *)&long long v32 = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  Publisher<>.removeDuplicates()();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  uint64_t v25 = v31;
  uint64_t v26 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v25);
  *(void *)&v10[OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_subscription] = v26;
  swift_release();
  return v10;
}

void closure #2 in BlurryMaskView.init(textSize:isBottomVisiblePublisher:)(char *a1, uint64_t a2)
{
  char v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    BlurryMaskView.isBottomVisible.setter(v2);
  }
}

uint64_t static BlurryMaskView.layerClass.getter()
{
  return type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAGradientLayer);
}

void BlurryMaskView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_subscription] = 0;
  v0[OBJC_IVAR____TtC15ConversationKitP33_C6AB3F6AF7BA5A9D493CD75E954C450614BlurryMaskView_isBottomVisible] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void BlurryMaskView.layoutSubviews()()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for BlurryMaskView();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  id v1 = objc_msgSend(v0, sel_layer);
  self;
  char v2 = (void *)swift_dynamicCastObjCClassUnconditional();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);
}

void BlurryMaskView.updateBottomMaskAlpha(_:)()
{
  id v1 = v0;
  char v2 = self;
  objc_msgSend(v2, sel_begin);
  uint64_t v3 = BlurryMaskView.gradientLocations(_:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CABasicAnimation);
  id v11 = @nonobjc CABasicAnimation.__allocating_init(keyPath:)(0x6E6F697461636F6CLL, 0xE900000000000073);
  objc_msgSend(v11, sel_setFillMode_, *MEMORY[0x1E4F39FA8]);
  id v4 = objc_msgSend(v0, sel_layer);
  self;
  uint64_t v5 = (void *)swift_dynamicCastObjCClassUnconditional();
  if (outlined bridged method (ob) of @objc CAGradientLayer.locations.getter(v5))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }
  objc_msgSend(v11, sel_setFromValue_, v6.super.isa);
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, sel_setToValue_, isa);

  objc_msgSend(v11, sel_setDuration_, 0.1);
  id v8 = objc_msgSend(v1, sel_layer);
  self;
  uint64_t v9 = (void *)swift_dynamicCastObjCClassUnconditional();
  outlined bridged method (mbnn) of @objc CAGradientLayer.locations.setter(v3, v9);

  id v10 = objc_msgSend(v1, sel_layer);
  self;
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_addAnimation_forKey_, v11, 0);

  objc_msgSend(v2, sel_commit);
}

uint64_t BlurryMaskView.gradientLocations(_:)()
{
  BlurryMaskView.gradientStop(_:)();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  CGFloat._bridgeToObjectiveC()();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  CGFloat._bridgeToObjectiveC()();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  CGFloat._bridgeToObjectiveC()();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  CGFloat._bridgeToObjectiveC()();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  return v1;
}

id BlurryMaskView.gradientStop(_:)()
{
  objc_msgSend(v0, sel_bounds);
  return objc_msgSend(v0, sel_bounds);
}

void BlurryMaskView.init(frame:)()
{
}

id BlurryMaskView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BlurryMaskView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t outlined init with copy of TranscriptionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AudioCallMiddleContainerView<TranscriptionView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioCallMiddleContainerView<TranscriptionView>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BlurryMaskView()
{
  return self;
}

uint64_t outlined destroy of AudioCallMiddleContainerView<TranscriptionView>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioCallMiddleContainerView<TranscriptionView>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of TranscriptionView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptionView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TranscriptionViewComposer()
{
  return self;
}

uint64_t type metadata accessor for CNKTranscriptionViewComposerFactory(uint64_t a1)
{
  return type metadata accessor for NSObject(a1, &lazy cache variable for type metadata for CNKTranscriptionViewComposerFactory);
}

uint64_t type metadata completion function for MaskSizingLockScreenHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MaskSizingLockScreenHostingController()
{
  return __swift_instantiateGenericMetadata();
}

void outlined bridged method (mbnn) of @objc CAGradientLayer.locations.setter(uint64_t a1, void *a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setLocations_, isa);
}

uint64_t outlined bridged method (ob) of @objc CAGradientLayer.locations.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_locations);

  if (!v2) {
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1C3127940()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in BlurryMaskView.init(textSize:isBottomVisiblePublisher:)(char *a1)
{
  closure #2 in BlurryMaskView.init(textSize:isBottomVisiblePublisher:)(a1, v1);
}

uint64_t CNKCommand.debugDescription.getter()
{
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CNKCommand()
{
  return CNKCommand.debugDescription.getter();
}

uint64_t CNKCommand.isAvailableWhileLocked.getter(unint64_t a1)
{
  if (a1 < 0x16) {
    return (0x3F6EFCu >> a1) & 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Unknown enum case", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  return 0;
}

BOOL static CallStatus.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void *CallStatus.notFound.unsafeMutableAddressor()
{
  return &static CallStatus.notFound;
}

uint64_t static CallStatus.notFound.getter()
{
  return 6;
}

void CallStatus.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int CallStatus.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CallStatus(char *a1, char *a2)
{
  return static CallStatus.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CallStatus()
{
  return CallStatus.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CallStatus(uint64_t a1)
{
  CallStatus.hash(into:)(a1, *v1);
}

uint64_t TUCallStatus.init(_:)(uint64_t result)
{
  return result;
}

uint64_t CallStatus.init(_:)(uint64_t result)
{
  if (result >= 7)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t AnsweringMachineCallStatus.updateSource.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnsweringMachineCallStatus.updateSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.updateSource.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnsweringMachineCallStatus.callUUID.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnsweringMachineCallStatus.callUUID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.callUUID.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnsweringMachineCallStatus.status.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AnsweringMachineCallStatus.status.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.status.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnsweringMachineCallStatus.isScreening.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t AnsweringMachineCallStatus.isScreening.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.isScreening.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnsweringMachineCallStatus.isScreeningDueToUserInteraction.getter()
{
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t AnsweringMachineCallStatus.isScreeningDueToUserInteraction.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 34) = result;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.isScreeningDueToUserInteraction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnsweringMachineCallStatus.callIsEligibleForScreening.getter()
{
  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t AnsweringMachineCallStatus.callIsEligibleForScreening.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 35) = result;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.callIsEligibleForScreening.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnsweringMachineCallStatus.streamToken.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t AnsweringMachineCallStatus.streamToken.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.streamToken.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnsweringMachineCallStatus.announcementHasFinished.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t AnsweringMachineCallStatus.announcementHasFinished.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*AnsweringMachineCallStatus.announcementHasFinished.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t static AnsweringMachineCallStatus.notFound(updateSource:callUUID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(_DWORD *)(a5 + 32) = 6;
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __swiftcall AnsweringMachineCallStatus.init(updateSource:callUUID:status:isScreening:isScreeningDueToUserInteraction:callIsEligibleForScreening:streamToken:announcementHasFinished:)(ConversationKit::AnsweringMachineCallStatus *__return_ptr retstr, Swift::String updateSource, Swift::String callUUID, ConversationKit::CallStatus status, Swift::Bool isScreening, Swift::Bool isScreeningDueToUserInteraction, Swift::Bool callIsEligibleForScreening, Swift::Int streamToken, Swift::Bool announcementHasFinished)
{
  retstr->updateSource = updateSource;
  retstr->callUUID = callUUID;
  retstr->status = status;
  retstr->isScreening = isScreening;
  retstr->isScreeningDueToUserInteraction = isScreeningDueToUserInteraction;
  retstr->callIsEligibleForScreening = callIsEligibleForScreening;
  retstr->streamToken = streamToken;
  retstr->announcementHasFinished = announcementHasFinished;
}

uint64_t AnsweringMachineCallStatus.description.getter()
{
  _StringGuts.grow(_:)(199);
  OUTLINED_FUNCTION_0_43(0xD000000000000029, (uint64_t)"AnsweringMachineCallStatus(updateSource: ");
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x55556C6C6163202CLL;
  v4._object = (void *)0xEC000000203A4449;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + 16);
  NSArray v6 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x737574617473202CLL;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x657263537369202CLL;
  v9._object = (void *)0xEF203A676E696E65;
  String.append(_:)(v9);
  if (*(unsigned char *)(v0 + 33)) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 33)) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_43(0xD000000000000021, (uint64_t)", screeningDueToUserInteraction: ");
  if (*(unsigned char *)(v0 + 34)) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 34)) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_43(0xD00000000000001ELL, (uint64_t)", callIsEligibleForScreening: ");
  if (*(unsigned char *)(v0 + 35)) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 35)) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x6D6165727473202CLL;
  v19._object = (void *)0xEF203A6E656B6F54;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x80000001C379A5F0;
  v21._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v21);
  if (*(unsigned char *)(v0 + 48)) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 48)) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t lazy protocol witness table accessor for type CallStatus and conformance CallStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type CallStatus and conformance CallStatus;
  if (!lazy protocol witness table cache variable for type CallStatus and conformance CallStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallStatus and conformance CallStatus);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CallStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31284D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallStatus()
{
  return &type metadata for CallStatus;
}

uint64_t destroy for AnsweringMachineCallStatus()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnsweringMachineCallStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnsweringMachineCallStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AnsweringMachineCallStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnsweringMachineCallStatus(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnsweringMachineCallStatus(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnsweringMachineCallStatus()
{
  return &type metadata for AnsweringMachineCallStatus;
}

uint64_t static AmbientState.isPresented.getter()
{
  return static AmbientState.isPresented;
}

uint64_t static AmbientState.isPresented.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static AmbientState.isPresented = a1;
  return result;
}

uint64_t (*static AmbientState.isPresented.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t AmbientState.deinit()
{
  return v0;
}

uint64_t AmbientState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AmbientState.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AmbientState.init()()
{
  return v0;
}

uint64_t type metadata accessor for AmbientState()
{
  return self;
}

uint64_t method lookup function for AmbientState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AmbientState);
}

uint64_t dispatch thunk of AmbientState.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void *LinkDetailHeaderView.ElementKind.unsafeMutableAddressor()
{
  return &static LinkDetailHeaderView.ElementKind;
}

unint64_t static LinkDetailHeaderView.ElementKind.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t key path getter for LinkDetailHeaderView.invitedMemberHandles : LinkDetailHeaderView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LinkDetailHeaderView.invitedMemberHandles : LinkDetailHeaderView(uint64_t a1, void **a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t LinkDetailHeaderView.invitedMemberHandles.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t LinkDetailHeaderView.invitedMemberHandles.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t (*LinkDetailHeaderView.invitedMemberHandles.modify(void *a1))()
{
  unint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  v2[6] = OUTLINED_FUNCTION_16_4(KeyPath);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for LinkDetailHeaderView.$invitedMemberHandles : LinkDetailHeaderView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
}

uint64_t key path setter for LinkDetailHeaderView.$invitedMemberHandles : LinkDetailHeaderView(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TUHandle>?>.Publisher);
  MEMORY[0x1F4188790](v4);
  unsigned int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8))(v6);
}

uint64_t LinkDetailHeaderView.$invitedMemberHandles.getter()
{
  return LinkDetailHeaderView.$invitedMemberHandles.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView__invitedMemberHandles, &demangling cache variable for type metadata for Published<Set<TUHandle>?>);
}

uint64_t LinkDetailHeaderView.$invitedMemberHandles.setter(uint64_t a1)
{
  return LinkDetailHeaderView.$invitedMemberHandles.setter(a1, &demangling cache variable for type metadata for Published<Set<TUHandle>?>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView__invitedMemberHandles, &demangling cache variable for type metadata for Published<Set<TUHandle>?>);
}

void (*LinkDetailHeaderView.$invitedMemberHandles.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TUHandle>?>.Publisher);
  OUTLINED_FUNCTION_5_5(v4);
  v3[5] = v5;
  size_t v7 = *(void *)(v6 + 64);
  v3[6] = malloc(v7);
  v3[7] = malloc(v7);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TUHandle>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return LinkDetailHeaderView.$invitedMemberHandles.modify;
}

void LinkDetailHeaderView.$invitedMemberHandles.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for LinkDetailHeaderView.title : LinkDetailHeaderView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for LinkDetailHeaderView.title : LinkDetailHeaderView(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t LinkDetailHeaderView.title.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void LinkDetailHeaderView.title.setter()
{
  OUTLINED_FUNCTION_13_26();
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  static Published.subscript.setter();
  OUTLINED_FUNCTION_12_2();
}

uint64_t (*LinkDetailHeaderView.title.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  v2[6] = OUTLINED_FUNCTION_16_4(KeyPath);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

void LinkDetailHeaderView.invitedMemberHandles.modify(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t key path getter for LinkDetailHeaderView.$title : LinkDetailHeaderView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
}

uint64_t key path setter for LinkDetailHeaderView.$title : LinkDetailHeaderView(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8))(v6);
}

uint64_t LinkDetailHeaderView.$title.getter()
{
  return LinkDetailHeaderView.$invitedMemberHandles.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView__title, (uint64_t *)&demangling cache variable for type metadata for Published<String?>);
}

uint64_t LinkDetailHeaderView.$invitedMemberHandles.getter(uint64_t a1, uint64_t *a2)
{
  return swift_endAccess();
}

uint64_t LinkDetailHeaderView.$title.setter(uint64_t a1)
{
  return LinkDetailHeaderView.$invitedMemberHandles.setter(a1, &demangling cache variable for type metadata for Published<String?>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView__title, (uint64_t *)&demangling cache variable for type metadata for Published<String?>);
}

uint64_t LinkDetailHeaderView.$invitedMemberHandles.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v6);
}

void (*LinkDetailHeaderView.$title.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  OUTLINED_FUNCTION_5_5(v4);
  v3[5] = v5;
  size_t v7 = *(void *)(v6 + 64);
  v3[6] = malloc(v7);
  v3[7] = malloc(v7);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<String?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return LinkDetailHeaderView.$title.modify;
}

void LinkDetailHeaderView.$title.modify(uint64_t a1, char a2)
{
}

void LinkDetailHeaderView.$invitedMemberHandles.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(*(void *)a1 + 48);
  uint64_t v6 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v7 = v4[4];
    uint64_t v8 = v4[5];
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 48), v6, v7);
    a3(v5);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 56));
  }
  free(v6);
  free(v5);
  free(v4);
}

uint64_t *LinkDetailHeaderView.Layout.estimatedHeight.unsafeMutableAddressor()
{
  if (one-time initialization token for estimatedHeight != -1) {
    swift_once();
  }
  return &static LinkDetailHeaderView.Layout.estimatedHeight;
}

double static LinkDetailHeaderView.Layout.estimatedHeight.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for estimatedHeight, (uint64_t)&static LinkDetailHeaderView.Layout.estimatedHeight);
}

void one-time initialization function for imageDiameter()
{
  static LinkDetailHeaderView.Layout.imageDiameter = 0x4056800000000000;
}

uint64_t *LinkDetailHeaderView.Layout.imageDiameter.unsafeMutableAddressor()
{
  if (one-time initialization token for imageDiameter != -1) {
    swift_once();
  }
  return &static LinkDetailHeaderView.Layout.imageDiameter;
}

double static LinkDetailHeaderView.Layout.imageDiameter.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for imageDiameter, (uint64_t)&static LinkDetailHeaderView.Layout.imageDiameter);
}

void *LinkDetailHeaderView.Layout.linkDetailImageToLinkLabelVerticalPadding.unsafeMutableAddressor()
{
  return &static LinkDetailHeaderView.Layout.linkDetailImageToLinkLabelVerticalPadding;
}

double static LinkDetailHeaderView.Layout.linkDetailImageToLinkLabelVerticalPadding.getter()
{
  return 10.0;
}

void one-time initialization function for linkLabelToCollectionViewVerticalPadding()
{
  static LinkDetailHeaderView.Layout.linkLabelToCollectionViewVerticalPadding = 0x4044000000000000;
}

uint64_t *LinkDetailHeaderView.Layout.linkLabelToCollectionViewVerticalPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for linkLabelToCollectionViewVerticalPadding != -1) {
    swift_once();
  }
  return &static LinkDetailHeaderView.Layout.linkLabelToCollectionViewVerticalPadding;
}

double static LinkDetailHeaderView.Layout.linkLabelToCollectionViewVerticalPadding.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for linkLabelToCollectionViewVerticalPadding, (uint64_t)&static LinkDetailHeaderView.Layout.linkLabelToCollectionViewVerticalPadding);
}

void one-time initialization function for titleEdgeInset()
{
  static LinkDetailHeaderView.Layout.titleEdgeInset = 0x4030000000000000;
}

uint64_t *LinkDetailHeaderView.Layout.titleEdgeInset.unsafeMutableAddressor()
{
  if (one-time initialization token for titleEdgeInset != -1) {
    swift_once();
  }
  return &static LinkDetailHeaderView.Layout.titleEdgeInset;
}

double static LinkDetailHeaderView.Layout.titleEdgeInset.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for titleEdgeInset, (uint64_t)&static LinkDetailHeaderView.Layout.titleEdgeInset);
}

void LinkDetailHeaderView.avatarController.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_avatarController);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_avatarController) = a1;
}

id LinkDetailHeaderView.linkLabel.getter()
{
  return LinkDetailHeaderView.linkLabel.getter(&OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView____lazy_storage___linkLabel, (uint64_t (*)(void))closure #1 in LinkDetailHeaderView.linkLabel.getter);
}

id closure #1 in LinkDetailHeaderView.linkLabel.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  id v1 = objc_msgSend(self, sel__preferredFontForTextStyle_weight_, *MEMORY[0x1E4FB2988], *MEMORY[0x1E4FB09B8]);
  objc_msgSend(v0, sel_setFont_, v1);

  objc_msgSend(v0, sel_setTextAlignment_, 1);
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_labelColor);
  objc_msgSend(v3, sel_setTintColor_, v4);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v3, sel_setNumberOfLines_, 2);
  return v3;
}

id LinkDetailHeaderView.linkDetailImage.getter()
{
  return LinkDetailHeaderView.linkLabel.getter(&OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView____lazy_storage___linkDetailImage, (uint64_t (*)(void))closure #1 in LinkDetailHeaderView.linkDetailImage.getter);
}

id LinkDetailHeaderView.linkLabel.getter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2();
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in LinkDetailHeaderView.linkDetailImage.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  objc_msgSend(v0, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v1 = objc_msgSend(v0, sel_layer);
  if (one-time initialization token for imageDiameter != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_setCornerRadius_, *(double *)&static LinkDetailHeaderView.Layout.imageDiameter * 0.5);

  id v2 = objc_msgSend(self, sel_effectWithStyle_, 8);
  id v3 = objc_msgSend(self, sel_effectForBlurEffect_style_, v2, 6);

  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v3);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v5 = objc_msgSend(v4, sel_layer);
  id v6 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v6, sel_cornerRadius);
  double v8 = v7;

  objc_msgSend(v5, sel_setCornerRadius_, v8);
  objc_msgSend(v4, sel_setClipsToBounds_, 1);
  id v9 = objc_msgSend(v4, sel_contentView);
  uint64_t v10 = self;
  id v11 = objc_msgSend(v10, sel_whiteColor);
  objc_msgSend(v9, sel_setBackgroundColor_, v11);

  objc_msgSend(v0, sel_addSubview_, v4);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v12 = objc_msgSend(self, sel_configurationWithTextStyle_, *MEMORY[0x1E4FB2988]);
  id v13 = @nonobjc UIImage.__allocating_init(systemName:withConfiguration:)(1802398060, 0xE400000000000000, v12);
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v13);

  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v15 = objc_msgSend(v10, sel_whiteColor);
  objc_msgSend(v14, sel_setTintColor_, v15);

  objc_msgSend(v0, sel_addSubview_, v14);
  uint64_t v16 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C37709C0;
  id v18 = objc_msgSend(v4, sel_topAnchor);
  id v19 = objc_msgSend(v0, sel_topAnchor);
  id v20 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v19);

  *(void *)(v17 + 32) = v20;
  id v21 = objc_msgSend(v4, sel_bottomAnchor);
  id v22 = objc_msgSend(v0, sel_bottomAnchor);
  id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

  *(void *)(v17 + 40) = v23;
  id v24 = objc_msgSend(v4, sel_leadingAnchor);
  id v25 = objc_msgSend(v0, sel_leadingAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  *(void *)(v17 + 48) = v26;
  id v27 = objc_msgSend(v4, sel_trailingAnchor);
  id v28 = objc_msgSend(v0, sel_trailingAnchor);
  id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  *(void *)(v17 + 56) = v29;
  id v30 = objc_msgSend(v14, sel_centerXAnchor);
  id v31 = objc_msgSend(v0, sel_centerXAnchor);
  id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  *(void *)(v17 + 64) = v32;
  id v33 = objc_msgSend(v14, sel_centerYAnchor);
  id v34 = objc_msgSend(v0, sel_centerYAnchor);
  id v35 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v34);

  *(void *)(v17 + 72) = v35;
  id v36 = objc_msgSend(v0, sel_widthAnchor);
  id v37 = objc_msgSend(v36, sel_constraintEqualToConstant_, *(double *)&static LinkDetailHeaderView.Layout.imageDiameter);

  *(void *)(v17 + 80) = v37;
  id v38 = objc_msgSend(v0, sel_heightAnchor);
  id v39 = objc_msgSend(v38, sel_constraintEqualToConstant_, *(double *)&static LinkDetailHeaderView.Layout.imageDiameter);

  *(void *)(v17 + 88) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_activateConstraints_, isa);

  return v0;
}

id LinkDetailHeaderView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void *LinkDetailHeaderView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<String?>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TUHandle>?>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  id v3 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>?);
  Published.init(initialValue:)();
  uint64_t v4 = OUTLINED_FUNCTION_22_18();
  v5(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  Published.init(initialValue:)();
  uint64_t v6 = OUTLINED_FUNCTION_20_19();
  v7(v6);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_cancellables] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_avatarController] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView____lazy_storage___linkLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView____lazy_storage___linkDetailImage] = 0;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_constraintsForAvatarViewVisible;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSLayoutConstraint]);
  *(void *)&v3[v9] = Dictionary.init(dictionaryLiteral:)();

  uint64_t v19 = type metadata accessor for LinkDetailHeaderView();
  double v10 = OUTLINED_FUNCTION_6_2();
  id v13 = objc_msgSendSuper2(v11, v12, v10, v3, v19, 0, 0);
  id v14 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v13) + 0x160);
  id v15 = v13;
  v14();
  LinkDetailHeaderView.setupDisplayProperties()();
  if ((v8 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v16 = v18;
  }
  else
  {
    unint64_t v16 = MEMORY[0x1E4FBC870];
  }
  LinkDetailHeaderView.populateHeaderImage(with:)(v16);

  swift_bridgeObjectRelease();
  return v15;
}

uint64_t type metadata accessor for LinkDetailHeaderView()
{
  uint64_t result = type metadata singleton initialization cache for LinkDetailHeaderView;
  if (!type metadata singleton initialization cache for LinkDetailHeaderView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id LinkDetailHeaderView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void LinkDetailHeaderView.init(coder:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<String?>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TUHandle>?>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>?);
  Published.init(initialValue:)();
  uint64_t v3 = OUTLINED_FUNCTION_22_18();
  v4(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  Published.init(initialValue:)();
  uint64_t v5 = OUTLINED_FUNCTION_20_19();
  v6(v5);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_cancellables] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_avatarController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView____lazy_storage___linkLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView____lazy_storage___linkDetailImage] = 0;
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_constraintsForAvatarViewVisible;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSLayoutConstraint]);
  *(void *)&v0[v7] = Dictionary.init(dictionaryLiteral:)();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall LinkDetailHeaderView.setupViews()()
{
  uint64_t v1 = v0;
  id v2 = LinkDetailHeaderView.linkDetailImage.getter();
  objc_msgSend(v1, sel_addSubview_, v2);

  OUTLINED_FUNCTION_19_24();
  objc_msgSend(v1, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769F40;
  id v4 = LinkDetailHeaderView.linkDetailImage.getter();
  id v5 = objc_msgSend(v4, sel_topAnchor);

  id v6 = objc_msgSend(v1, sel_safeAreaLayoutGuide);
  id v7 = objc_msgSend(v6, sel_topAnchor);

  id v8 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v7);
  *(void *)(v3 + 32) = v8;
  id v9 = LinkDetailHeaderView.linkDetailImage.getter();
  id v10 = objc_msgSend(v9, sel_centerXAnchor);

  id v11 = objc_msgSend(v1, sel_centerXAnchor);
  id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  *(void *)(v3 + 40) = v12;
  id v13 = objc_msgSend(OUTLINED_FUNCTION_19_24(), sel_topAnchor);

  id v14 = LinkDetailHeaderView.linkDetailImage.getter();
  id v15 = objc_msgSend(v14, sel_bottomAnchor);

  id v16 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v15, 10.0);
  *(void *)(v3 + 48) = v16;
  specialized Array._endMutation()();
  uint64_t v17 = &v1[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_constraintsForAvatarViewVisible];
  OUTLINED_FUNCTION_6_1();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  swift_endAccess();
  unint64_t v18 = self;
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C3769580;
  id v20 = objc_msgSend(OUTLINED_FUNCTION_19_24(), sel_centerXAnchor);

  id v21 = objc_msgSend(v1, sel_centerXAnchor);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v19 + 32) = v22;
  id v23 = LinkDetailHeaderView.linkLabel.getter();
  id v24 = objc_msgSend(v23, sel_leadingAnchor);

  id v25 = objc_msgSend(v1, sel_leadingAnchor);
  if (one-time initialization token for titleEdgeInset != -1) {
    swift_once();
  }
  id v26 = objc_msgSend(v24, sel_constraintGreaterThanOrEqualToAnchor_constant_, v25, *(double *)&static LinkDetailHeaderView.Layout.titleEdgeInset);

  *(void *)(v19 + 40) = v26;
  id v27 = objc_msgSend(OUTLINED_FUNCTION_19_24(), sel_trailingAnchor);

  id v28 = objc_msgSend(v1, sel_trailingAnchor);
  id v29 = objc_msgSend(v27, sel_constraintLessThanOrEqualToAnchor_constant_, v28, -*(double *)&static LinkDetailHeaderView.Layout.titleEdgeInset);

  *(void *)(v19 + 48) = v29;
  id v30 = LinkDetailHeaderView.linkLabel.getter();
  id v31 = objc_msgSend(v30, sel_bottomAnchor);

  id v32 = objc_msgSend(v1, sel_bottomAnchor);
  if (one-time initialization token for linkLabelToCollectionViewVerticalPadding != -1) {
    swift_once();
  }
  id v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_constant_, v32, -*(double *)&static LinkDetailHeaderView.Layout.linkLabelToCollectionViewVerticalPadding);

  *(void *)(v19 + 56) = v33;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_activateConstraints_, isa);

  OUTLINED_FUNCTION_6_1();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  swift_endAccess();
  OUTLINED_FUNCTION_16();
}

uint64_t LinkDetailHeaderView.setupDisplayProperties()()
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<TUHandle>?>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))(v9);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String?>.Publisher);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v5);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  uint64_t v12 = swift_release();
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))(v12);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<Set<TUHandle>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<TUHandle>?>.Publisher);
  uint64_t v13 = v15;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v13);
  OUTLINED_FUNCTION_6_1();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

void closure #1 in LinkDetailHeaderView.setupDisplayProperties()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    id v7 = LinkDetailHeaderView.linkLabel.getter();
    if (v3) {
      uint64_t v8 = (void *)MEMORY[0x1C87730B0](v2, v3);
    }
    else {
      uint64_t v8 = 0;
    }
    objc_msgSend(v7, sel_setText_, v8);
  }
}

void closure #2 in LinkDetailHeaderView.setupDisplayProperties()(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    if (v2) {
      LinkDetailHeaderView.populateHeaderImage(with:)(v2);
    }
  }
}

void LinkDetailHeaderView.populateHeaderImage(with:)(unint64_t a1)
{
  uint64_t v2 = v1;
  v61[5] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C3769830;
  *(void *)(v7 + 32) = objc_msgSend(self, sel_descriptorForRequiredKeys);
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v61[0] = 0;
  id v9 = objc_msgSend(v4, sel_tu_contactsForHandles_keyDescriptors_error_, isa, v8, v61);

  id v10 = v61[0];
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v12 = v10;
  }
  else
  {
    id v13 = v61[0];
    id v14 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v11 = 0;
  }
  uint64_t v57 = 0;
  unint64_t v59 = MEMORY[0x1E4FBC860];
  uint64_t v58 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    a1 = (unint64_t)v61[0];
    uint64_t v15 = v61[1];
    uint64_t v16 = (uint64_t)v61[2];
    int64_t v17 = (int64_t)v61[3];
    unint64_t v18 = (unint64_t)v61[4];
  }
  else
  {
    uint64_t v19 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v15 = (void *)(a1 + 56);
    uint64_t v16 = ~v19;
    uint64_t v20 = -v19;
    if (v20 < 64) {
      uint64_t v21 = ~(-1 << v20);
    }
    else {
      uint64_t v21 = -1;
    }
    unint64_t v18 = v21 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v17 = 0;
  }
  int64_t v22 = (unint64_t)(v16 + 64) >> 6;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v18)
  {
    uint64_t v23 = (v18 - 1) & v18;
    unint64_t v24 = __clz(__rbit64(v18)) | (v17 << 6);
    int64_t v25 = v17;
LABEL_25:
    id v26 = *(id *)(*(void *)(a1 + 48) + 8 * v24);
    if (v26)
    {
      while (1)
      {
        if (!v11 || !*(void *)(v11 + 16)) {
          goto LABEL_44;
        }
        swift_bridgeObjectRetain();
        id v29 = v26;
        uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29);
        if ((v31 & 1) == 0) {
          break;
        }
        unint64_t v32 = *(void *)(*(void *)(v11 + 56) + 8 * v30);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        if (v32 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v37) {
            goto LABEL_43;
          }
        }
        else if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_43;
        }
        if ((v32 & 0xC000000000000001) != 0)
        {
          id v33 = (id)MEMORY[0x1C87744F0](0, v32);
        }
        else
        {
          if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_65;
          }
          id v33 = *(id *)(v32 + 32);
        }
        id v34 = v33;
        swift_bridgeObjectRelease();
        id v35 = v34;
LABEL_45:
        double v43 = v35;
        MEMORY[0x1C87733A0](v35);
        if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        int64_t v17 = v25;
        unint64_t v18 = v23;
        if ((a1 & 0x8000000000000000) == 0) {
          goto LABEL_11;
        }
LABEL_13:
        if (__CocoaSet.Iterator.next()())
        {
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v26 = v60;
          swift_unknownObjectRelease();
          int64_t v25 = v17;
          uint64_t v23 = v18;
          if (v60) {
            continue;
          }
        }
        goto LABEL_50;
      }

LABEL_43:
      swift_bridgeObjectRelease();
LABEL_44:
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      uint64_t v38 = outlined bridged method (pb) of @objc TUHandle.normalizedValue.getter(v26);
      uint64_t v40 = v39;
      uint64_t v41 = outlined bridged method (pb) of @objc TUHandle.normalizedValue.getter(v26);
      id v35 = @nonobjc CNContact.init(displayName:emailOrPhoneNumber:)(v38, v40, v41, v42);
      goto LABEL_45;
    }
    goto LABEL_50;
  }
  int64_t v25 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v25 < v22)
  {
    unint64_t v27 = v15[v25];
    if (!v27)
    {
      int64_t v28 = v17 + 2;
      if (v17 + 2 >= v22) {
        goto LABEL_50;
      }
      unint64_t v27 = v15[v28];
      if (v27) {
        goto LABEL_23;
      }
      int64_t v28 = v17 + 3;
      if (v17 + 3 >= v22) {
        goto LABEL_50;
      }
      unint64_t v27 = v15[v28];
      if (v27)
      {
LABEL_23:
        int64_t v25 = v28;
      }
      else
      {
        int64_t v25 = v17 + 4;
        if (v17 + 4 >= v22) {
          goto LABEL_50;
        }
        unint64_t v27 = v15[v25];
        if (!v27)
        {
          uint64_t v36 = v17 + 5;
          do
          {
            if (v36 >= v22) {
              goto LABEL_50;
            }
            unint64_t v27 = v15[v36++];
          }
          while (!v27);
          int64_t v25 = v36 - 1;
        }
      }
    }
    uint64_t v23 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v25 << 6);
    goto LABEL_25;
  }
LABEL_50:
  outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
  swift_bridgeObjectRelease();
  if (!(v59 >> 62))
  {
    uint64_t v44 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_52;
  }
LABEL_66:
  swift_bridgeObjectRetain();
  uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v44 < 1)
  {
    id v49 = *(void **)(v58 + OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_avatarController);
    if (v49)
    {
      id v50 = objc_msgSend(v49, sel_view, 0);
      if (!v50) {
        goto LABEL_70;
      }
      id v51 = v50;
      objc_msgSend(v50, sel_setHidden_, 1);
    }
    id v48 = LinkDetailHeaderView.linkDetailImage.getter();
    objc_msgSend(v48, sel_setHidden_, 0, v57);
LABEL_61:

    uint64_t v52 = (uint64_t *)(v58 + OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_constraintsForAvatarViewVisible);
    swift_beginAccess();
    if (specialized Dictionary.subscript.getter(v44 < 1, *v52))
    {
      char v53 = v44 > 0;
      uint64_t v54 = self;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      Class v55 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v54, sel_deactivateConstraints_, v55);

      if (specialized Dictionary.subscript.getter(v53, *v52))
      {
        swift_bridgeObjectRelease();
        Class v56 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v54, sel_activateConstraints_, v56);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  LinkDetailHeaderView.updateAvatarController(with:)();
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void **)(v58 + OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_avatarController);
  if (!v45)
  {
LABEL_56:
    id v48 = LinkDetailHeaderView.linkDetailImage.getter();
    objc_msgSend(v48, sel_setHidden_, 1, v57);
    goto LABEL_61;
  }
  id v46 = objc_msgSend(v45, sel_view, 0);
  if (v46)
  {
    uint64_t v47 = v46;
    objc_msgSend(v46, sel_setHidden_, 0);

    goto LABEL_56;
  }
  __break(1u);
LABEL_70:
  __break(1u);
}

void LinkDetailHeaderView.updateAvatarController(with:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit20LinkDetailHeaderView_avatarController];
  if (v2)
  {
    objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
    id v3 = v2;
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_15_26();
    objc_msgSend(v3, sel_groupIdentityDidUpdate_, @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(v4, v5, v6, v7));

    OUTLINED_FUNCTION_16();

    return;
  }
  id v10 = objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
  swift_bridgeObjectRetain();
  uint64_t v11 = OUTLINED_FUNCTION_15_26();
  id v15 = @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(v11, v12, v13, v14);
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BBB8]), sel_initWithGroup_, v15);
  id v17 = objc_msgSend(v16, sel_view);
  if (!v17)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v18 = v17;
  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v19 = v16;
  LinkDetailHeaderView.avatarController.setter((uint64_t)v16);
  id v20 = OUTLINED_FUNCTION_10_30();
  if (!v20)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v21 = v20;
  objc_msgSend(v1, sel_addSubview_, v20);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1C3769600;
  id v23 = LinkDetailHeaderView.linkLabel.getter();
  id v24 = objc_msgSend(v23, sel_topAnchor);

  id v25 = OUTLINED_FUNCTION_10_30();
  if (!v25)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v26 = v25;
  id v27 = objc_msgSend(v25, sel_bottomAnchor);

  id v28 = objc_msgSend(v24, sel_constraintEqualToAnchor_constant_, v27, 0.0);
  *(void *)(v22 + 32) = v28;
  id v29 = OUTLINED_FUNCTION_10_30();
  if (!v29)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v30 = v29;
  id v31 = objc_msgSend(v29, sel_topAnchor);

  id v32 = objc_msgSend(v1, sel_safeAreaLayoutGuide);
  id v33 = objc_msgSend(v32, sel_topAnchor);

  id v34 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v33);
  *(void *)(v22 + 40) = v34;
  id v35 = OUTLINED_FUNCTION_10_30();
  if (!v35)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v36 = v35;
  id v37 = objc_msgSend(v35, sel_leadingAnchor);

  id v38 = objc_msgSend(v1, sel_safeAreaLayoutGuide);
  id v39 = objc_msgSend(v38, sel_leadingAnchor);

  id v40 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v39);
  *(void *)(v22 + 48) = v40;
  id v41 = OUTLINED_FUNCTION_10_30();
  if (!v41)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v42 = v41;
  id v43 = objc_msgSend(v41, sel_trailingAnchor);

  id v44 = objc_msgSend(v1, sel_safeAreaLayoutGuide);
  id v45 = objc_msgSend(v44, sel_trailingAnchor);

  id v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v45);
  *(void *)(v22 + 56) = v46;
  id v47 = OUTLINED_FUNCTION_10_30();
  if (!v47)
  {
LABEL_21:
    __break(1u);
    return;
  }
  id v48 = v47;
  id v49 = objc_msgSend(v47, sel_heightAnchor);

  if (one-time initialization token for imageDiameter != -1) {
    swift_once();
  }
  id v50 = objc_msgSend(v49, sel_constraintEqualToConstant_, *(double *)&static LinkDetailHeaderView.Layout.imageDiameter);

  *(void *)(v22 + 64) = v50;
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_6_1();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  swift_endAccess();

  OUTLINED_FUNCTION_16();
}

id LinkDetailHeaderView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkDetailHeaderView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

#error "1C312BB74: call analysis failed (funcsize=19)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, a4, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, a4, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

#error "1C312BC90: call analysis failed (funcsize=37)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1)
{
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_11_25();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1);
  OUTLINED_FUNCTION_2_48(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return swift_bridgeObjectRelease();
}

#error "1C312BD48: call analysis failed (funcsize=23)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

#error "1C312BDBC: call analysis failed (funcsize=23)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, double a2, double a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_11_25();
  unint64_t v6 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3);
  OUTLINED_FUNCTION_2_48(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
  return swift_bridgeObjectRelease();
}

#error "1C312C018: call analysis failed (funcsize=23)"

#error "1C312C0C8: call analysis failed (funcsize=32)"

#error "1C312C13C: call analysis failed (funcsize=23)"

#error "1C312C214: call analysis failed (funcsize=23)"

uint64_t ObjC metadata update function for LinkDetailHeaderView()
{
  return type metadata accessor for LinkDetailHeaderView();
}

void type metadata completion function for LinkDetailHeaderView()
{
  type metadata accessor for Published<Set<TUHandle>?>(319, &lazy cache variable for type metadata for Published<Set<TUHandle>?>, &demangling cache variable for type metadata for Set<TUHandle>?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<TUHandle>?>(319, (unint64_t *)&lazy cache variable for type metadata for Published<String?>, &demangling cache variable for type metadata for String?);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for LinkDetailHeaderView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkDetailHeaderView);
}

uint64_t dispatch thunk of LinkDetailHeaderView.invitedMemberHandles.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.invitedMemberHandles.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.invitedMemberHandles.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.$invitedMemberHandles.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.$invitedMemberHandles.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.$invitedMemberHandles.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.title.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.title.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.title.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.$title.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.$title.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.$title.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of LinkDetailHeaderView.setupViews()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

void type metadata accessor for Published<Set<TUHandle>?>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for LinkDetailHeaderView.Layout()
{
  return &type metadata for LinkDetailHeaderView.Layout;
}

unint64_t lazy protocol witness table accessor for type TUHandle and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUHandle and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUHandle and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
  }
  return result;
}

uint64_t sub_1C312C71C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in LinkDetailHeaderView.setupDisplayProperties()(uint64_t *a1)
{
  closure #1 in LinkDetailHeaderView.setupDisplayProperties()(a1, v1);
}

void partial apply for closure #2 in LinkDetailHeaderView.setupDisplayProperties()(unint64_t *a1)
{
  closure #2 in LinkDetailHeaderView.setupDisplayProperties()(a1, v1);
}

uint64_t ParticipantContactDetails.init(handle:cache:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  ParticipantContactDetailsCache.contactDetails(for:nickname:)();
  id v8 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ParticipantContactDetails.initialsFor(_:)(v9);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v4 = StringProtocol.localizedUppercase.getter();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v13;
  a2[5] = v4;
  a2[6] = v6;
  return result;
}

id ParticipantContactDetails.contact.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void ParticipantContactDetails.contact.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t (*ParticipantContactDetails.contact.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantContactDetails.displayName.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ParticipantContactDetails.displayName.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v0;
  return result;
}

uint64_t (*ParticipantContactDetails.displayName.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantContactDetails.shortName.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ParticipantContactDetails.shortName.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  return result;
}

uint64_t (*ParticipantContactDetails.shortName.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantContactDetails.initials.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t ParticipantContactDetails.initials.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  return result;
}

uint64_t (*ParticipantContactDetails.initials.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

BOOL ParticipantContactDetails.usesMonogram.getter()
{
  return *v0 && (unint64_t)(String.count.getter() - 1) < 2;
}

uint64_t static ParticipantContactDetails.defaultMeContactDetails.getter@<X0>(void *a1@<X8>)
{
  id v4 = objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_0_23(17741, 0xE200000000000000);
  OUTLINED_FUNCTION_42_1();

  *a1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B8F8]), sel_init, 0xE000000000000000);
  a1[1] = v1;
  a1[2] = v2;
  a1[3] = v1;
  a1[4] = v2;
  a1[5] = v1;
  a1[6] = v2;
  return swift_bridgeObjectRetain_n();
}

uint64_t ParticipantContactDetails.init(contact:displayName:shortName:initials:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t ParticipantContactDetails.init(contact:displayName:shortName:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  static ParticipantContactDetails.initialsFor(_:)(a1);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v12 = StringProtocol.localizedUppercase.getter();
  uint64_t v14 = v13;
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  a6[5] = v12;
  a6[6] = v14;
  return result;
}

uint64_t static ParticipantContactDetails.initialsFor(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for PersonNameComponents();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_5_52();
  if (a1)
  {
    id v7 = objc_msgSend(a1, sel_givenName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    PersonNameComponents.givenName.setter();
    id v8 = objc_msgSend(a1, sel_familyName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    PersonNameComponents.givenName.setter();
  }
  OUTLINED_FUNCTION_24_2();
  PersonNameComponents.familyName.setter();
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v9 = (id)static NSPersonNameComponentsFormatter.initials;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(v9, sel_stringFromPersonNameComponents_, isa);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  return OUTLINED_FUNCTION_24_2();
}

void ParticipantContactDetails.init(meCard:)(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = a1;
  static ParticipantContactDetails.initialsFor(_:)(a1);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = StringProtocol.localizedUppercase.getter();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();

  *a2 = a1;
  a2[1] = v5;
  a2[2] = v7;
  a2[3] = v5;
  a2[4] = v7;
  a2[5] = v5;
  a2[6] = v7;
}

uint64_t ParticipantContactDetails.init(participant:cache:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  ParticipantContactDetailsCache.contactDetails(for:)();
  id v4 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t result = outlined destroy of Participant(a1);
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  return result;
}

void ParticipantContactDetailsCache.contactDetails(for:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  v137 = v3;
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v4 - 8);
  v135 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  v140 = v7;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v129 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v129 - v15;
  v138 = v0;
  id v17 = (void *)ParticipantContactDetailsCache.key(for:)(v2);
  v136 = v17;
  if (!v17) {
    goto LABEL_7;
  }
  unint64_t v18 = (void *)v138[3];
  uint64_t v0 = v17;
  id v19 = (char *)objc_msgSend(v18, sel_objectForKey_, v0);
  if (!v19)
  {

    goto LABEL_7;
  }
  id v20 = v19;
  v134 = v6;
  uint64_t v21 = *(void **)&v19[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details];
  uint64_t v22 = *(void *)&v19[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                      + 8];
  uint64_t v23 = *(void *)&v19[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                      + 16];
  *(void *)&long long v131 = *(void *)&v19[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                                   + 24];
  id v24 = *(void **)&v19[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                     + 32];
  uint64_t v130 = *(void *)&v19[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                       + 40];
  uint64_t v25 = *(void *)&v19[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                      + 48];
  id v132 = v21;
  id v129 = v21;
  swift_bridgeObjectRetain();
  id v139 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  uint64_t v133 = v22;
  id v26 = (void *)MEMORY[0x1C87730B0](v22, v23);
  LOBYTE(v24) = objc_msgSend(v26, sel_destinationIdIsTemporary);

  outlined init with copy of Participant(v2, (uint64_t)v16);
  if ((v24 & 1) == 0)
  {
    outlined destroy of Participant((uint64_t)v16);
    goto LABEL_56;
  }
  uint64_t v27 = *(void *)&v16[v134[9] + 8];
  outlined destroy of Participant((uint64_t)v16);
  if (!v27)
  {
LABEL_56:

    v83 = v137;
    uint64_t v84 = v133;
    void *v137 = v132;
    v83[1] = v84;
    uint64_t v85 = v131;
    v83[2] = v23;
    v83[3] = v85;
    uint64_t v86 = v130;
    v83[4] = v139;
    v83[5] = v86;
    v83[6] = v25;
    goto LABEL_70;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v6 = v134;
LABEL_7:
  id v28 = *(void **)(v2 + v6[7]);
  if (v28)
  {
    id v132 = v28;
    id v29 = objc_msgSend(v132, sel_value);
    if (!v29)
    {
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v0 = v31;
      id v29 = (id)MEMORY[0x1C87730B0](v30);
      swift_bridgeObjectRelease();
    }
    LODWORD(v133) = objc_msgSend(v29, sel_destinationIdIsPseudonym);

    uint64_t v32 = v6[11];
    v134 = (int *)v2;
    uint64_t v33 = *(void *)(v2 + v32);
    id v34 = (void *)(v33 + 56);
    uint64_t v35 = 1 << *(unsigned char *)(v33 + 32);
    uint64_t v36 = -1;
    if (v35 < 64) {
      uint64_t v36 = ~(-1 << v35);
    }
    unint64_t v37 = v36 & *(void *)(v33 + 56);
    id v139 = (id)((unint64_t)(v35 + 63) >> 6);
    swift_bridgeObjectRetain_n();
    uint64_t v38 = 0;
    if (!v37) {
      goto LABEL_14;
    }
LABEL_13:
    unint64_t v39 = __clz(__rbit64(v37));
    v37 &= v37 - 1;
    for (unint64_t i = v39 | (v38 << 6); ; unint64_t i = __clz(__rbit64(v42)) + (v38 << 6))
    {
      outlined init with copy of Participant(*(void *)(v33 + 48) + v140[9] * i, (uint64_t)v14);
      outlined init with take of Participant((uint64_t)v14, (uint64_t)v11);
      id v51 = *(void **)&v11[v6[7]];
      if (v51)
      {
        id v52 = objc_msgSend(v51, sel_value);
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v0 = v6;
        uint64_t v55 = v54;

        Class v56 = (void *)MEMORY[0x1C87730B0](v53, v55);
        uint64_t v6 = (int *)v0;
        swift_bridgeObjectRelease();
        LOBYTE(v53) = objc_msgSend(v56, sel_destinationIdIsPseudonym);

        if ((v53 & 1) == 0)
        {
          swift_release();
          uint64_t v71 = (uint64_t)v135;
          outlined init with take of Participant((uint64_t)v11, (uint64_t)v135);
          uint64_t v72 = v71;
          uint64_t v73 = 0;
          goto LABEL_45;
        }
      }
      outlined destroy of Participant((uint64_t)v11);
      if (v37) {
        goto LABEL_13;
      }
LABEL_14:
      uint64_t v41 = v38 + 1;
      if (__OFADD__(v38, 1))
      {
        __break(1u);
        goto LABEL_75;
      }
      if (v41 >= (uint64_t)v139) {
        goto LABEL_44;
      }
      unint64_t v42 = v34[v41];
      ++v38;
      if (!v42)
      {
        uint64_t v38 = v41 + 1;
        OUTLINED_FUNCTION_13_27();
        if (v44 == v45) {
          goto LABEL_44;
        }
        unint64_t v42 = v34[v38];
        if (!v42)
        {
          uint64_t v38 = v43 + 2;
          OUTLINED_FUNCTION_13_27();
          if (v44 == v45) {
            goto LABEL_44;
          }
          unint64_t v42 = v34[v38];
          if (!v42)
          {
            uint64_t v38 = v46 + 3;
            OUTLINED_FUNCTION_13_27();
            if (v44 == v45) {
              goto LABEL_44;
            }
            unint64_t v42 = v34[v38];
            if (!v42)
            {
              uint64_t v38 = v47 + 4;
              OUTLINED_FUNCTION_13_27();
              if (v44 == v45) {
                goto LABEL_44;
              }
              unint64_t v42 = v34[v38];
              if (!v42)
              {
                uint64_t v49 = v48 + 5;
                if (v49 >= (uint64_t)v139)
                {
LABEL_44:
                  swift_release();
                  uint64_t v71 = (uint64_t)v135;
                  uint64_t v72 = (uint64_t)v135;
                  uint64_t v73 = 1;
LABEL_45:
                  __swift_storeEnumTagSinglePayload(v72, v73, 1, (uint64_t)v6);
                  swift_bridgeObjectRelease();
                  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v71, 1, (uint64_t)v6);
                  uint64_t v75 = v134;
                  if (EnumTagSinglePayload != 1)
                  {
                    id v76 = *(id *)(v71 + v6[7]);
                    if (v76) {
                      id v77 = v76;
                    }
                    outlined destroy of Participant(v71);
                    if (v133)
                    {
                      if (!v76) {
                        goto LABEL_57;
                      }
                      id v76 = v76;
                      ParticipantContactDetailsCache.contactDetails(for:nickname:)();
                    }
                    else
                    {
LABEL_53:
                      OUTLINED_FUNCTION_15_27();
                      id v78 = v132;
                      ParticipantContactDetailsCache.contactDetails(for:nickname:)();
                    }
                    int v70 = 0;
                    id v62 = v141;
                    id v67 = v142;
                    uint64_t v69 = v143;
                    uint64_t v79 = v144;
                    uint64_t v81 = v145;
                    uint64_t v80 = v146;
                    uint64_t v82 = v147;
                    goto LABEL_64;
                  }
                  outlined destroy of Participant?(v71);
                  if ((v133 & 1) == 0)
                  {
                    id v76 = 0;
                    goto LABEL_53;
                  }
LABEL_57:
                  v87 = *(void **)((char *)v75 + v6[12]);
                  if (v87)
                  {
                    v140 = v87;
                    ParticipantContactDetailsCache.contactDetails(for:nickname:)();
                    v88 = v142;
                    id v139 = v141;
                    uint64_t v89 = v143;
                    v90 = v145;
                    uint64_t v133 = v147;
                    v134 = (int *)v144;
                    v91 = self;
                    id v92 = objc_msgSend(v91, sel_conversationKit);
                    OUTLINED_FUNCTION_0_23(0x40255F454259414DLL, 0xEF4543495645445FLL);

                    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
                    uint64_t v94 = OUTLINED_FUNCTION_25_15();
                    long long v131 = xmmword_1C3769620;
                    *(_OWORD *)(v94 + 16) = xmmword_1C3769620;
                    uint64_t v95 = MEMORY[0x1E4FBB1A0];
                    *(void *)(v94 + 56) = MEMORY[0x1E4FBB1A0];
                    unint64_t v96 = lazy protocol witness table accessor for type String and conformance String();
                    *(void *)(v94 + 64) = v96;
                    *(void *)(v94 + 32) = v88;
                    *(void *)(v94 + 40) = v89;
                    v135 = (char *)v89;
                    swift_bridgeObjectRetain();
                    id v67 = (id)String.init(format:_:)();
                    uint64_t v69 = v97;
                    swift_bridgeObjectRelease();
                    id v98 = objc_msgSend(v91, sel_conversationKit);
                    OUTLINED_FUNCTION_11_1(0x40255F454259414DLL, 0xEF4543495645445FLL);

                    uint64_t v99 = OUTLINED_FUNCTION_25_15();
                    *(_OWORD *)(v99 + 16) = v131;
                    *(void *)(v99 + 56) = v95;
                    *(void *)(v99 + 64) = v96;
                    *(void *)(v99 + 32) = v134;
                    *(void *)(v99 + 40) = v90;
                    v134 = v90;
                    swift_bridgeObjectRetain();
                    uint64_t v79 = String.init(format:_:)();
                    *(void *)&long long v131 = v100;
                    swift_bridgeObjectRelease();
                    uint64_t v101 = type metadata accessor for PersonNameComponents();
                    OUTLINED_FUNCTION_4();
                    uint64_t v103 = v102;
                    MEMORY[0x1F4188790](v104);
                    OUTLINED_FUNCTION_5_52();
                    PersonNameComponents.givenName.setter();
                    PersonNameComponents.familyName.setter();
                    if (one-time initialization token for initials != -1) {
                      swift_once();
                    }
                    swift_beginAccess();
                    id v105 = (id)static NSPersonNameComponentsFormatter.initials;
                    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                    id v107 = objc_msgSend(v105, sel_stringFromPersonNameComponents_, isa);

                    v108 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v110 = v109;

                    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v93, v101);
                    id v141 = v108;
                    v142 = v110;
                    lazy protocol witness table accessor for type String and conformance String();
                    uint64_t v80 = StringProtocol.localizedUppercase.getter();
                    uint64_t v82 = v111;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                    int v70 = 0;
                    id v62 = 0;
                    uint64_t v81 = (int *)v131;
                    goto LABEL_64;
                  }
                  OUTLINED_FUNCTION_15_27();
                  id v128 = v132;
                  v127 = v138;
                  ParticipantContactDetailsCache.contactDetails(for:nickname:)();

                  id v62 = v141;
                  v140 = v142;
                  uint64_t v69 = v143;
                  uint64_t v79 = v144;
                  uint64_t v81 = v145;
                  uint64_t v80 = v146;
                  uint64_t v82 = v147;
                  id v124 = v136;
                  if (v136)
                  {
                    v123 = v145;
                    LODWORD(v139) = 0;
                    v126 = v137;
LABEL_66:

                    id v67 = v140;
                    int v70 = (int)v139;
                    uint64_t v81 = v123;
                  }
                  else
                  {
                    int v70 = 0;
                    v126 = v137;
                    id v67 = v140;
                  }
                  goto LABEL_68;
                }
                unint64_t v42 = v34[v49];
                if (!v42)
                {
                  while (1)
                  {
                    uint64_t v38 = v49 + 1;
                    if (__OFADD__(v49, 1)) {
                      break;
                    }
                    OUTLINED_FUNCTION_13_27();
                    if (v44 == v45) {
                      goto LABEL_44;
                    }
                    unint64_t v42 = v34[v38];
                    uint64_t v49 = v50 + 1;
                    if (v42) {
                      goto LABEL_36;
                    }
                  }
LABEL_75:
                  __break(1u);
LABEL_76:
                  swift_once();
LABEL_62:
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
                  uint64_t v113 = OUTLINED_FUNCTION_25_15();
                  *(_OWORD *)(v113 + 16) = xmmword_1C3769620;
                  id v141 = v0;
                  v114 = v0;
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
                  uint64_t v115 = String.init<A>(reflecting:)();
                  uint64_t v117 = v116;
                  *(void *)(v113 + 56) = MEMORY[0x1E4FBB1A0];
                  *(void *)(v113 + 64) = lazy protocol witness table accessor for type String and conformance String();
                  *(void *)(v113 + 32) = v115;
                  *(void *)(v113 + 40) = v117;
                  static os_log_type_t.default.getter();
                  os_log(_:dso:log:type:_:)();
                  swift_bridgeObjectRelease();
                  id v118 = objc_msgSend(self, sel_conversationKit);
                  id v67 = (id)OUTLINED_FUNCTION_11_1(17741, 0xE200000000000000);
                  uint64_t v69 = v119;

                  id v62 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B8F8]), sel_init);
                  swift_bridgeObjectRetain_n();
                  swift_unknownObjectRelease();

                  int v70 = 0;
                  goto LABEL_63;
                }
                uint64_t v38 = v49;
              }
            }
          }
        }
      }
LABEL_36:
      unint64_t v37 = (v42 - 1) & v42;
    }
  }
  uint64_t v57 = (void *)v138[2];
  id v34 = objc_msgSend(self, sel_settingsWithContactStore_, v57);
  id v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB40]), sel_initWithSettings_, v34);
  id v59 = objc_msgSend(v58, sel_descriptorForRequiredKeys);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1C3769830;
  *(void *)(v60 + 32) = v59;
  id v141 = (id)v60;
  specialized Array._endMutation()();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class v61 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v141 = 0;
  id v62 = objc_msgSend(v57, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, v61, &v141);

  id v63 = v141;
  if (!v62)
  {
    id v112 = v141;
    uint64_t v0 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationKit != -1) {
      goto LABEL_76;
    }
    goto LABEL_62;
  }
  v64 = (char *)v62;
  id v65 = v63;
  id v141 = (id)static ParticipantContactDetails.initialsFor(_:)(v62);
  v142 = v66;
  lazy protocol witness table accessor for type String and conformance String();
  id v67 = (id)StringProtocol.localizedUppercase.getter();
  uint64_t v69 = v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRelease();

  v135 = v64;
  int v70 = 1;
LABEL_63:
  uint64_t v79 = (uint64_t)v67;
  uint64_t v81 = (int *)v69;
  uint64_t v80 = (uint64_t)v67;
  uint64_t v82 = v69;
LABEL_64:
  v120 = v136;
  if (v136)
  {
    LODWORD(v139) = v70;
    v121 = (void *)v138[3];
    type metadata accessor for ParticipantContactDetailsCache.BoxedDetails();
    id v141 = v62;
    v142 = v67;
    v140 = v67;
    uint64_t v143 = v69;
    uint64_t v144 = v79;
    v145 = v81;
    uint64_t v146 = v80;
    uint64_t v147 = v82;
    id v122 = v62;
    swift_bridgeObjectRetain();
    v123 = v81;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v124 = v120;
    id v125 = ParticipantContactDetailsCache.BoxedDetails.__allocating_init(details:)((uint64_t)&v141);
    objc_msgSend(v121, sel_setObject_forKey_, v125, v124);

    v126 = v137;
    v127 = v135;
    goto LABEL_66;
  }
  v126 = v137;
  v127 = v135;
LABEL_68:
  void *v126 = v62;
  v126[1] = v67;
  v126[2] = v69;
  v126[3] = v79;
  v126[4] = v81;
  v126[5] = v80;
  v126[6] = v82;
  if (v70) {

  }
LABEL_70:
  OUTLINED_FUNCTION_28();
}

void ParticipantContactDetailsCache.contactDetails(for:nickname:)()
{
  OUTLINED_FUNCTION_31();
  unint64_t v116 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = ParticipantContactDetailsCache.key(for:)(v4);
  uint64_t v9 = (void *)v0[3];
  uint64_t v10 = (char *)objc_msgSend(v9, sel_objectForKey_, v8);
  id v118 = v7;
  uint64_t v119 = (void *)v8;
  uint64_t v111 = v9;
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v113 = v5;
    uint64_t v12 = *(void **)&v10[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details];
    uint64_t v13 = *(void *)&v10[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                        + 8];
    unint64_t v14 = *(void *)&v10[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                        + 16];
    uint64_t v109 = *(void *)&v10[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                         + 24];
    uint64_t v110 = v3;
    unint64_t v16 = *(void *)&v10[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                        + 32];
    uint64_t v15 = *(void *)&v10[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                        + 40];
    uint64_t v17 = *(void *)&v10[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details
                        + 48];
    id v108 = v12;
    swift_bridgeObjectRetain();
    unint64_t v18 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    uint64_t v3 = v13;
    id v19 = (void *)MEMORY[0x1C87730B0](v13, v14);
    LODWORD(v16) = objc_msgSend(v19, sel_destinationIdIsTemporary);

    if (!v16 || !v116)
    {

      uint64_t v41 = v109;
      uint64_t v7 = v118;
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v7 = v118;
    uint64_t v3 = v110;
    uint64_t v5 = v113;
  }
  id v20 = objc_msgSend(v5, sel_value);
  if (!v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = (id)MEMORY[0x1C87730B0](v21);
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v22 = objc_msgSend(v20, sel_destinationIdIsPseudonym);

  if ((v22 & 1) == 0)
  {
    uint64_t v25 = (void *)v0[2];
    id v26 = objc_msgSend(v5, sel_value);
    if (!v26)
    {
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v26 = (id)MEMORY[0x1C87730B0](v27);
      swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1C3769830;
    *(void *)(v28 + 32) = objc_msgSend(self, sel_descriptorForRequiredKeys);
    uint64_t v120 = v28;
    specialized Array._endMutation()();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v30 = objc_msgSend(v25, sel_contactForDestinationId_keysToFetch_, v26, isa);

    if (!v30)
    {
      if (v116)
      {
        uint64_t v54 = one-time initialization token for conversationKit;
        swift_bridgeObjectRetain();
        if (v54 != -1) {
          swift_once();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v55 = OUTLINED_FUNCTION_25_15();
        *(_OWORD *)(v55 + 16) = xmmword_1C3769620;
        uint64_t v120 = (uint64_t)v5;
        uint64_t v56 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        id v57 = v5;
        String.init<A>(reflecting:)();
        OUTLINED_FUNCTION_42_1();
        *(void *)(v55 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v55 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v55 + 32) = v56;
        *(void *)(v55 + 40) = v26;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v12 = 0;
        unint64_t v18 = v116;
        uint64_t v58 = v3;
        unint64_t v14 = v116;
      }
      else
      {
        id v80 = TUHandle.formattedPhoneNumber.getter();
        if (v81)
        {
          uint64_t v3 = (uint64_t)v80;
          unint64_t v18 = v81;
          if (one-time initialization token for conversationKit != -1) {
            swift_once();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v82 = OUTLINED_FUNCTION_25_15();
          *(_OWORD *)(v82 + 16) = xmmword_1C3769620;
          uint64_t v120 = (uint64_t)v5;
          uint64_t v83 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
          id v84 = v5;
          String.init<A>(reflecting:)();
          OUTLINED_FUNCTION_42_1();
          *(void *)(v82 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v82 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v82 + 32) = v83;
          *(void *)(v82 + 40) = v26;
          static os_log_type_t.default.getter();
          OUTLINED_FUNCTION_10_31();
          swift_bridgeObjectRelease();
        }
        else
        {
          if (one-time initialization token for conversationKit != -1) {
            swift_once();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v90 = OUTLINED_FUNCTION_25_15();
          *(_OWORD *)(v90 + 16) = xmmword_1C3769620;
          uint64_t v120 = (uint64_t)v5;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
          id v91 = v5;
          uint64_t v92 = String.init<A>(reflecting:)();
          uint64_t v94 = v93;
          *(void *)(v90 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v90 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v90 + 32) = v92;
          *(void *)(v90 + 40) = v94;
          static os_log_type_t.default.getter();
          OUTLINED_FUNCTION_10_31();
          swift_bridgeObjectRelease();
          id v95 = objc_msgSend(v91, sel_value);
          uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v18 = v96;
        }
        swift_bridgeObjectRetain();
        uint64_t v12 = 0;
        uint64_t v58 = v3;
        unint64_t v14 = v18;
      }
      goto LABEL_53;
    }
    uint64_t v115 = v5;
    id v117 = v30;
    id v31 = v30;
    uint64_t v32 = outlined bridged method (pb) of @objc CNContact.displayName.getter(v31);
    if (v33)
    {
      uint64_t v120 = v32;
      uint64_t v121 = v33;
      uint64_t v34 = type metadata accessor for CharacterSet();
      OUTLINED_FUNCTION_4();
      uint64_t v36 = v35;
      MEMORY[0x1F4188790](v37);
      OUTLINED_FUNCTION_6_43();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v38 = StringProtocol.trimmingCharacters(in:)();
      unint64_t v40 = v39;
      (*(void (**)(void *, uint64_t))(v36 + 8))(v25, v34);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = 0;
      unint64_t v40 = 0xE000000000000000;
    }
    id v59 = objc_msgSend(v31, sel_givenName);
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v61;

    uint64_t v120 = v60;
    uint64_t v121 = v62;
    uint64_t v63 = type metadata accessor for CharacterSet();
    OUTLINED_FUNCTION_4();
    uint64_t v65 = v64;
    MEMORY[0x1F4188790](v66);
    OUTLINED_FUNCTION_6_43();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v67 = StringProtocol.trimmingCharacters(in:)();
    unint64_t v18 = v68;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v62, v63);
    swift_bridgeObjectRelease();
    uint64_t v69 = v38;
    if ((v40 & 0x2000000000000000) != 0) {
      uint64_t v70 = HIBYTE(v40) & 0xF;
    }
    else {
      uint64_t v70 = v38 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v71 = v67;
    unint64_t v72 = v40;
    unint64_t v14 = v18;
    if ((v18 & 0x2000000000000000) != 0) {
      uint64_t v73 = HIBYTE(v18) & 0xF;
    }
    else {
      uint64_t v73 = v67 & 0xFFFFFFFFFFFFLL;
    }
    id v74 = TUHandle.formattedPhoneNumber.getter();
    unint64_t v76 = v75;
    if (v70)
    {
      unint64_t v77 = v72;

      swift_bridgeObjectRelease();
      if (v73)
      {
        uint64_t v12 = v117;
        uint64_t v58 = v71;
        unint64_t v14 = v77;
        uint64_t v3 = v69;
        id v30 = v117;
LABEL_53:
        id v104 = v30;
        static ParticipantContactDetails.initialsFor(_:)(v12);
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v15 = StringProtocol.localizedUppercase.getter();
        uint64_t v17 = v105;
        swift_bridgeObjectRelease();
        type metadata accessor for ParticipantContactDetailsCache.BoxedDetails();
        uint64_t v120 = (uint64_t)v12;
        uint64_t v121 = v3;
        unint64_t v122 = v14;
        uint64_t v123 = v58;
        unint64_t v124 = v18;
        uint64_t v125 = v15;
        uint64_t v126 = v17;
        id v106 = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v107 = ParticipantContactDetailsCache.BoxedDetails.__allocating_init(details:)((uint64_t)&v120);
        objc_msgSend(v111, sel_setObject_forKey_, v107, v119);

        uint64_t v41 = v58;
        uint64_t v7 = v118;
        goto LABEL_54;
      }
      swift_bridgeObjectRelease();
      unint64_t v14 = v72;
      swift_bridgeObjectRetain();
      uint64_t v3 = v38;
      uint64_t v58 = v38;
      unint64_t v18 = v77;
    }
    else
    {
      uint64_t v78 = (uint64_t)v74;
      uint64_t v79 = MEMORY[0x1E4FBB1A0];
      swift_bridgeObjectRelease();
      if (v73)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v3 = v71;
        uint64_t v58 = v71;
      }
      else
      {
        swift_bridgeObjectRelease();
        if (v76)
        {
          if (one-time initialization token for conversationKit != -1) {
            swift_once();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v85 = OUTLINED_FUNCTION_25_15();
          *(_OWORD *)(v85 + 16) = xmmword_1C3769620;
          uint64_t v120 = (uint64_t)v31;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
          uint64_t v86 = v31;
          uint64_t v87 = String.init<A>(reflecting:)();
          uint64_t v89 = v88;
          *(void *)(v85 + 56) = v79;
          *(void *)(v85 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v85 + 32) = v87;
          *(void *)(v85 + 40) = v89;
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRetain();
          uint64_t v58 = v78;
          unint64_t v18 = v76;
          uint64_t v3 = v78;
          unint64_t v14 = v76;
        }
        else
        {
          if (one-time initialization token for conversationKit != -1) {
            swift_once();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v97 = OUTLINED_FUNCTION_25_15();
          *(_OWORD *)(v97 + 16) = xmmword_1C3769620;
          uint64_t v120 = (uint64_t)v31;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
          uint64_t v98 = String.init<A>(reflecting:)();
          uint64_t v100 = v99;
          *(void *)(v97 + 56) = v79;
          *(void *)(v97 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v97 + 32) = v98;
          *(void *)(v97 + 40) = v100;
          static os_log_type_t.default.getter();
          OUTLINED_FUNCTION_10_31();
          swift_bridgeObjectRelease();
          id v101 = objc_msgSend(v115, sel_value);
          uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v18 = v103;

          swift_bridgeObjectRetain();
          uint64_t v58 = v102;
          uint64_t v3 = v102;
          unint64_t v14 = v18;
        }
      }
    }
    id v30 = v117;
    uint64_t v12 = v117;
    goto LABEL_53;
  }
  if (v116)
  {
    uint64_t v23 = v116;
    uint64_t v24 = v3;
    uint64_t v112 = v3;
    unint64_t v114 = v116;
  }
  else
  {
    unint64_t v42 = self;
    uint64_t v0 = objc_msgSend(v42, sel_conversationKit);
    uint64_t v112 = OUTLINED_FUNCTION_0_23(0x5F4E574F4E4B4E55, 0xEE00454349564544);
    unint64_t v114 = v43;

    id v44 = objc_msgSend(v42, sel_conversationKit);
    uint64_t v24 = OUTLINED_FUNCTION_11_1(0x5F4E574F4E4B4E55, 0xEE00454349564544);
    uint64_t v23 = v45;
  }
  uint64_t v46 = type metadata accessor for PersonNameComponents();
  OUTLINED_FUNCTION_4();
  uint64_t v48 = v47;
  MEMORY[0x1F4188790](v49);
  OUTLINED_FUNCTION_60();
  swift_bridgeObjectRetain_n();
  PersonNameComponents.init()();
  PersonNameComponents.givenName.setter();
  PersonNameComponents.familyName.setter();
  if (one-time initialization token for initials != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v50 = (id)static NSPersonNameComponentsFormatter.initials;
  Class v51 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v52 = objc_msgSend(v50, sel_stringFromPersonNameComponents_, v51);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(void *, uint64_t))(v48 + 8))(v0, v46);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v15 = StringProtocol.localizedUppercase.getter();
  uint64_t v17 = v53;

  swift_bridgeObjectRelease();
  uint64_t v12 = 0;
  uint64_t v41 = v24;
  unint64_t v18 = v23;
  uint64_t v3 = v112;
  unint64_t v14 = v114;
LABEL_54:
  *uint64_t v7 = v12;
  v7[1] = v3;
  v7[2] = v14;
  v7[3] = v41;
  v7[4] = v18;
  v7[5] = v15;
  v7[6] = v17;
  OUTLINED_FUNCTION_28();
}

uint64_t ParticipantContactDetails.init(handle:conversation:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  specialized static ParticipantContactDetailsCache.cache(for:)(a2);
  ParticipantContactDetailsCache.contactDetails(for:nickname:)();
  id v9 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ParticipantContactDetails.initialsFor(_:)(v11);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = StringProtocol.localizedUppercase.getter();
  uint64_t v7 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  a3[3] = v14;
  a3[4] = v15;
  a3[5] = v5;
  a3[6] = v7;
  return result;
}

uint64_t static ParticipantContactDetailsCache.cache(for:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return specialized static ParticipantContactDetailsCache.cache(for:)((uint64_t)v3, v1, v2);
}

void ParticipantContactDetails.init(handle:call:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for ParticipantContactDetailsCache();
  unint64_t v6 = lazy protocol witness table accessor for type TUCall and conformance TUCall();
  if (one-time initialization token for queue != -1) {
    unint64_t v6 = swift_once();
  }
  MEMORY[0x1F4188790](v6);
  OS_dispatch_queue.sync<A>(execute:)();
  ParticipantContactDetailsCache.contactDetails(for:nickname:)();
  id v10 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ParticipantContactDetails.initialsFor(_:)(v11);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v7 = StringProtocol.localizedUppercase.getter();
  uint64_t v9 = v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v5 = v11;
  v5[1] = v12;
  v5[2] = v13;
  v5[3] = v14;
  v5[4] = v15;
  v5[5] = v7;
  v5[6] = v9;
  OUTLINED_FUNCTION_28();
}

uint64_t static ParticipantContactDetailsCache.cache(for:)()
{
  OUTLINED_FUNCTION_4_15();
  swift_getObjectType();
  return specialized static ParticipantContactDetailsCache.cache(for:)();
}

uint64_t ParticipantContactDetails.hash(into:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = *v0;
  if (*v0)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  OUTLINED_FUNCTION_28();
  return swift_bridgeObjectRelease();
}

uint64_t static ParticipantContactDetails.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  if (*(void *)a1)
  {
    if (v8)
    {
      uint64_t v26 = *(void *)(a2 + 48);
      uint64_t v27 = *(void *)(a2 + 40);
      uint64_t v28 = *(void *)(a1 + 48);
      uint64_t v29 = *(void *)(a1 + 40);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 24);
      uint64_t v13 = *(void *)(a1 + 32);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      id v14 = v8;
      id v15 = v2;
      char v16 = static NSObject.== infix(_:_:)();

      uint64_t v6 = v13;
      uint64_t v10 = v12;
      uint64_t v11 = v25;
      if (v16) {
        goto LABEL_4;
      }
    }
    return 0;
  }
  uint64_t v26 = *(void *)(a2 + 48);
  uint64_t v27 = *(void *)(a2 + 40);
  uint64_t v28 = *(void *)(a1 + 48);
  uint64_t v29 = *(void *)(a1 + 40);
  if (v8) {
    return 0;
  }
LABEL_4:
  BOOL v17 = v3 == v7 && v4 == v9;
  if (v17
    || (v18 = v6, v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = v18, v20 = v19, uint64_t result = 0, (v20 & 1) != 0))
  {
    BOOL v22 = v5 == v10 && v6 == v11;
    if (v22 || (v23 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v23 & 1) != 0))
    {
      if (v29 == v27 && v28 == v26)
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

Swift::Int ParticipantContactDetails.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantContactDetails()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void *one-time initialization function for faceTime()
{
  type metadata accessor for ParticipantContactDetailsCache();
  id v0 = (id)TUPreferredFaceTimeBundleIdentifier();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_42_1();

  OUTLINED_FUNCTION_24_2();
  uint64_t result = (void *)ParticipantContactDetailsCache.__allocating_init(bundleIdentifier:)();
  static ParticipantContactDetailsCache.faceTime = result;
  return result;
}

{
  void *result;
  char v1;

  type metadata accessor for ReportSpamManager();
  uint64_t v1 = 1;
  uint64_t result = ReportSpamManager.__allocating_init(idsServiceType:)(&v1);
  static ReportSpamManager.faceTime = (uint64_t)result;
  return result;
}

uint64_t ParticipantContactDetailsCache.__allocating_init(bundleIdentifier:)()
{
  OUTLINED_FUNCTION_4_15();
  id v2 = self;
  uint64_t v3 = (void *)MEMORY[0x1C87730B0](v1, v0);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_tu_contactStoreConfigurationForBundleIdentifier_, v3);

  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v4);
  uint64_t v6 = swift_allocObject();
  ParticipantContactDetailsCache.init(contactStore:)((uint64_t)v5);
  return v6;
}

uint64_t static ParticipantContactDetailsCache.faceTime.getter()
{
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t one-time initialization function for queue()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v0 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v0 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v1);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_60();
  (*(void (**)(uint64_t, void))(v3 + 104))(v1, *MEMORY[0x1E4FBCC50]);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static ParticipantContactDetailsCache.queue = result;
  return result;
}

uint64_t one-time initialization function for cachesByBundleIdentifiers()
{
  type metadata accessor for ParticipantContactDetailsCache();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static ParticipantContactDetailsCache.cachesByBundleIdentifiers = result;
  return result;
}

uint64_t closure #1 in static ParticipantContactDetailsCache.cache(for:)@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 160);
  uint64_t v6 = (void *)v5(ObjectType, a1);
  uint64_t v7 = outlined bridged method (ob) of @objc TUCallProvider.bundleIdentifier.getter(v6);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v11 = (void *)v5(ObjectType, a1);
    id v12 = objc_msgSend(v11, sel_identifier);

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v13;
  }
  id v14 = static ParticipantContactDetailsCache.queue_cache(forBundleIdentifier:)(v9, v10);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v14;
  return result;
}

void *static ParticipantContactDetailsCache.queue_cache(forBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  uint64_t v8 = static ParticipantContactDetailsCache.queue;
  *uint64_t v7 = static ParticipantContactDetailsCache.queue;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBE8], v4);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  id v10 = (id)TUPreferredFaceTimeBundleIdentifier();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v11 == a1 && v13 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    if (one-time initialization token for faceTime == -1)
    {
LABEL_15:
      BOOL v17 = static ParticipantContactDetailsCache.faceTime;
      swift_retain();
      return v17;
    }
LABEL_19:
    swift_once();
    goto LABEL_15;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_14;
  }
  if (one-time initialization token for cachesByBundleIdentifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v16 = static ParticipantContactDetailsCache.cachesByBundleIdentifiers;
  swift_bridgeObjectRetain();
  BOOL v17 = (void *)specialized Dictionary.subscript.getter(a1, a2, v16);
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!v17)
  {
    swift_bridgeObjectRetain();
    BOOL v17 = (void *)ParticipantContactDetailsCache.__allocating_init(bundleIdentifier:)();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v19 = swift_retain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v19, a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  return v17;
}

uint64_t closure #1 in static ParticipantContactDetailsCache.cache(for:)@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 256))(v3, v4);
  uint64_t v7 = static ParticipantContactDetailsCache.queue_cache(forBundleIdentifier:)(v5, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v7;
  return result;
}

uint64_t static ParticipantContactDetailsCache.resetAll()()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in static ParticipantContactDetailsCache.resetAll();
  *(void *)(v2 + 24) = v1;
  v8[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v8[5] = v2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_25;
  uint64_t v3 = _Block_copy(v8);
  swift_retain();
  swift_release();
  uint64_t v4 = OUTLINED_FUNCTION_24_2();
  dispatch_sync(v4, v5);
  _Block_release(v3);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static ParticipantContactDetailsCache.resetAll()()
{
  if (one-time initialization token for faceTime == -1) {
    goto LABEL_2;
  }
LABEL_28:
  swift_once();
LABEL_2:
  objc_msgSend(*((id *)static ParticipantContactDetailsCache.faceTime + 3), sel_removeAllObjects);
  if (one-time initialization token for cachesByBundleIdentifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  specialized _NativeDictionary.makeIterator()(v12, static ParticipantContactDetailsCache.cachesByBundleIdentifiers);
  uint64_t v0 = v12[0];
  uint64_t v1 = v12[1];
  int64_t v2 = v12[3];
  unint64_t v3 = v12[4];
  int64_t v4 = (unint64_t)(v12[2] + 64) >> 6;
  swift_bridgeObjectRetain_n();
  if (v3)
  {
LABEL_5:
    unint64_t v5 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    unint64_t v6 = v5 | (v2 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v7 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v7 >= v4) {
      goto LABEL_26;
    }
    unint64_t v8 = *(void *)(v1 + 8 * v7);
    int64_t v9 = v2 + 1;
    if (!v8)
    {
      int64_t v9 = v2 + 2;
      if (v2 + 2 >= v4) {
        goto LABEL_26;
      }
      unint64_t v8 = *(void *)(v1 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v2 + 3;
        if (v2 + 3 >= v4) {
          goto LABEL_26;
        }
        unint64_t v8 = *(void *)(v1 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v2 + 4;
          if (v2 + 4 >= v4) {
            goto LABEL_26;
          }
          unint64_t v8 = *(void *)(v1 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v2 + 5;
            if (v2 + 5 >= v4) {
              goto LABEL_26;
            }
            unint64_t v8 = *(void *)(v1 + 8 * v9);
            if (!v8)
            {
              int64_t v9 = v2 + 6;
              if (v2 + 6 >= v4) {
                goto LABEL_26;
              }
              unint64_t v8 = *(void *)(v1 + 8 * v9);
              if (!v8) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_23:
    unint64_t v3 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
    int64_t v2 = v9;
LABEL_24:
    objc_msgSend(*(id *)(*(void *)(*(void *)(v0 + 56) + 8 * v6) + 24), sel_removeAllObjects);
    if (v3) {
      goto LABEL_5;
    }
  }
  int64_t v10 = v2 + 7;
  while (v10 < v4)
  {
    unint64_t v8 = *(void *)(v1 + 8 * v10++);
    if (v8)
    {
      int64_t v9 = v10 - 1;
      goto LABEL_23;
    }
  }
LABEL_26:
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Void __swiftcall ParticipantContactDetailsCache.reset()()
{
  objc_msgSend(*(id *)(v0 + 24), sel_removeAllObjects);
}

id ParticipantContactDetailsCache.BoxedDetails.__allocating_init(details:)(uint64_t a1)
{
  unint64_t v3 = (char *)objc_allocWithZone(v1);
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  int64_t v7 = &v3[OBJC_IVAR____TtCC15ConversationKit30ParticipantContactDetailsCacheP33_84AC34FA5CB4344A8378F61D97FA6ADC12BoxedDetails_details];
  *(_OWORD *)int64_t v7 = *(_OWORD *)a1;
  *((_OWORD *)v7 + 1) = v5;
  *((_OWORD *)v7 + 2) = v4;
  *((void *)v7 + 6) = v6;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

void ParticipantContactDetailsCache.BoxedDetails.init()()
{
}

uint64_t ParticipantContactDetailsCache.__allocating_init(contactStore:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  ParticipantContactDetailsCache.init(contactStore:)(a1);
  return v2;
}

uint64_t ParticipantContactDetailsCache.init(contactStore:)(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C990]), sel_init);
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = v3;
  return v1;
}

uint64_t ParticipantContactDetailsCache.key(for:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v2 - 8);
  long long v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Participant(0);
  uint64_t v6 = *(void **)(a1 + *(int *)(v5 + 28));
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = ParticipantContactDetailsCache.key(for:)(v7);
  }
  else
  {
    uint64_t v9 = v5;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
    outlined init with copy of Participant(a1, (uint64_t)v4);
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v9);
    uint64_t v11 = specialized >> prefix<A>(_:)();
    uint64_t v13 = v12;
    outlined destroy of Participant?((uint64_t)v4);
    *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t ParticipantContactDetailsCache.key(for:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_value);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v2 = StringProtocol.localizedLowercase.getter();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = MEMORY[0x1C87730B0](v2, v4);
  swift_bridgeObjectRelease();
  return v5;
}

id TUHandle.formattedPhoneNumber.getter()
{
  if (objc_msgSend(v0, sel_type) != (id)2) {
    return (id)OUTLINED_FUNCTION_24_2();
  }
  id result = objc_msgSend(v0, sel_value);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)PNCopyBestGuessCountryCodeForNumber();

    if (!v3) {
      return (id)OUTLINED_FUNCTION_24_2();
    }
    id result = objc_msgSend(v0, sel_value);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = (void *)CFPhoneNumberCreate();

      if (v5)
      {
        uint64_t String = CFPhoneNumberCreateString();
        if (String)
        {
          id v7 = (void *)String;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          return (id)OUTLINED_FUNCTION_24_2();
        }
      }
      return (id)OUTLINED_FUNCTION_24_2();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ParticipantContactDetailsCache.deinit()
{
  return v0;
}

uint64_t ParticipantContactDetailsCache.__deallocating_deinit()
{
  ParticipantContactDetailsCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticipantContactDetailsCache.BoxedDetails()
{
  return self;
}

uint64_t outlined destroy of Participant?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined bridged method (pb) of @objc CNContact.displayName.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_displayName);
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_35();
}

uint64_t specialized static ParticipantContactDetailsCache.cache(for:)(void *a1)
{
  type metadata accessor for ParticipantContactDetailsCache();
  v6[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  v6[4] = &protocol witness table for TUConversation;
  v6[0] = a1;
  uint64_t v2 = one-time initialization token for queue;
  id v3 = a1;
  if (v2 != -1) {
    id v3 = (id)swift_once();
  }
  MEMORY[0x1F4188790](v3);
  OS_dispatch_queue.sync<A>(execute:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v5;
}

uint64_t specialized static ParticipantContactDetailsCache.cache(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_4_15();
  v11[3] = v5;
  v11[4] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  uint64_t v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, v3, a3);
  if (one-time initialization token for queue != -1) {
    uint64_t v8 = swift_once();
  }
  MEMORY[0x1F4188790](v8);
  OS_dispatch_queue.sync<A>(execute:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v10;
}

uint64_t type metadata accessor for ParticipantContactDetailsCache()
{
  return self;
}

uint64_t partial apply for closure #1 in static ParticipantContactDetailsCache.cache(for:)@<X0>(void *a1@<X8>)
{
  return closure #1 in static ParticipantContactDetailsCache.cache(for:)(*(void *)(v1 + 32), a1);
}

{
  uint64_t v1;

  return closure #1 in static ParticipantContactDetailsCache.cache(for:)(*(void **)(v1 + 24), a1);
}

uint64_t specialized static ParticipantContactDetailsCache.cache(for:)()
{
  OUTLINED_FUNCTION_4_15();
  if (one-time initialization token for queue != -1) {
    uint64_t v0 = swift_once();
  }
  MEMORY[0x1F4188790](v0);
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

uint64_t sub_1C31305AC()
{
  return OUTLINED_FUNCTION_7_44();
}

uint64_t partial apply for closure #1 in static ParticipantContactDetailsCache.resetAll()()
{
  return closure #1 in static ParticipantContactDetailsCache.resetAll()();
}

uint64_t sub_1C31305C0()
{
  return OUTLINED_FUNCTION_7_44();
}

unint64_t lazy protocol witness table accessor for type ParticipantContactDetails and conformance ParticipantContactDetails()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantContactDetails and conformance ParticipantContactDetails;
  if (!lazy protocol witness table cache variable for type ParticipantContactDetails and conformance ParticipantContactDetails)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantContactDetails and conformance ParticipantContactDetails);
  }
  return result;
}

uint64_t destroy for ParticipantContactDetails(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ParticipantContactDetails(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(void *)(a2 + 48);
  id v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticipantContactDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ParticipantContactDetails(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantContactDetails(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantContactDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantContactDetails()
{
  return &type metadata for ParticipantContactDetails;
}

uint64_t method lookup function for ParticipantContactDetailsCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantContactDetailsCache);
}

uint64_t dispatch thunk of ParticipantContactDetailsCache.__allocating_init(contactStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t closure #1 in static ParticipantContactDetailsCache.cache(for:)partial apply@<X0>(void *a1@<X8>)
{
  return partial apply for closure #1 in static ParticipantContactDetailsCache.cache(for:)(a1);
}

{
  return partial apply for closure #1 in static ParticipantContactDetailsCache.cache(for:)(a1);
}

Swift::Void __swiftcall CallControlsMenuViewController.checkForDynamicState()()
{
  id v1 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuView.getter);
  objc_msgSend(v1, sel_frame);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;

  uint64_t v10 = (void *)MEMORY[0x1C8776240](&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingView]);
  uint64_t v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, sel_frame);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  v29[0] = v3;
  v29[1] = v5;
  v29[2] = v7;
  v29[3] = v9;
  v29[4] = v13;
  v29[5] = v15;
  v29[6] = v17;
  v29[7] = v19;
  BOOL v30 = v11 == 0;
  char v31 = 0;
  CallControlsMenuViewController.dodgingFrames.setter((uint64_t)v29);
  id v20 = objc_msgSend(v0, sel_view);
  if (v20)
  {
    uint64_t v21 = v20;
    id v22 = objc_msgSend(v20, sel_window);

    if (v22)
    {
      objc_msgSend(v22, sel_frame);
      uint64_t v24 = v23;
      uint64_t v26 = v25;

      uint64_t v27 = v24;
      uint64_t v28 = v26;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    CallControlsMenuViewController.windowSize.setter(v27, v28, v22 == 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t CallControlsMenuViewController.isOneToOneModeEnabled.setter(char a1)
{
  return CallControlsMenuViewController.isOneToOneModeEnabled.setter(a1, &OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled, (uint64_t (*)(uint64_t))CallControlsMenuViewController.isOneToOneModeEnabled.didset);
}

UILayoutGuide __swiftcall CallControlsMenuViewController.updateViewDependencies(containingView:topCornerView:dodgingView:)(UIView *containingView, UIView_optional *topCornerView, UIView *dodgingView)
{
  uint64_t v4 = v3;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  [(UIView *)containingView addLayoutGuide:v6];
  id v7 = objc_msgSend(v6, sel_topAnchor);
  uint64_t v8 = [(UIView *)containingView topAnchor];
  id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v8, 40.0);

  id v10 = objc_msgSend(v6, sel_bottomAnchor);
  uint64_t v11 = [(UIView *)containingView bottomAnchor];
  id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v11, -16.0);

  uint64_t v13 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C3769580;
  *(void *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = v12;
  id v15 = v9;
  id v40 = v12;
  id v16 = objc_msgSend(v6, sel_leadingAnchor);
  uint64_t v17 = [(UIView *)containingView leadingAnchor];
  id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v17, 20.0);

  *(void *)(v14 + 48) = v18;
  id v19 = objc_msgSend(v6, sel_trailingAnchor);
  id v20 = [(UIView *)containingView trailingAnchor];
  id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v20, -16.0);

  *(void *)(v14 + 56) = v21;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_activateConstraints_, isa);

  swift_unknownObjectWeakAssign();
  uint64_t v23 = topCornerView;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  if (topCornerView)
  {
    uint64_t v24 = topCornerView;
    id v25 = objc_msgSend(v6, sel_topAnchor);
    id v26 = [(UIView_optional *)v24 bottomAnchor];
    uint64_t v23 = (UIView_optional *)objc_msgSend(v25, sel_constraintEqualToAnchor_constant_, v26, 20.0);
  }
  uint64_t v27 = (void *)(v4 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topConstraints);
  uint64_t v28 = *(void **)(v4 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topConstraints);
  uint64_t v29 = *(void **)(v4 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topConstraints + 8);
  void *v27 = v15;
  v27[1] = v23;
  id v30 = v15;
  outlined consume of ConversationControlsRecipe.View?(v28, v29);
  id v31 = objc_msgSend(v6, sel_bottomAnchor);
  id v32 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuView.getter);
  id v33 = objc_msgSend(v32, sel_topAnchor);

  id v34 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v33);
  uint64_t v35 = (void *)(v4 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_bottomConstraints);
  uint64_t v36 = *(void **)(v4 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_bottomConstraints);
  uint64_t v37 = *(void **)(v4 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_bottomConstraints + 8);
  *uint64_t v35 = v40;
  v35[1] = v34;
  outlined consume of ConversationControlsRecipe.View?(v36, v37);
  return (UILayoutGuide)v6;
}

id CallControlsMenuViewController.__allocating_init(controlsManager:isScreenLocked:rosterViewProvider:service:sidebarStateStream:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return CallControlsMenuViewController.init(controlsManager:isScreenLocked:rosterViewProvider:service:sidebarStateStream:)(a1, a2, a3, a4, a5, a6);
}

uint64_t CallControlsMenuViewController.isHidden.setter(char a1)
{
  return CallControlsMenuViewController.isOneToOneModeEnabled.setter(a1, &OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden, (uint64_t (*)(uint64_t))CallControlsMenuViewController.isHidden.didset);
}

uint64_t CallControlsMenuViewController.isOneToOneModeEnabled.setter(char a1, void *a2, uint64_t (*a3)(uint64_t))
{
  id v6 = (unsigned char *)(v3 + *a2);
  swift_beginAccess();
  uint64_t v7 = *v6;
  *id v6 = a1;
  return a3(v7);
}

id CallControlsMenuViewController.init(controlsManager:isScreenLocked:rosterViewProvider:service:sidebarStateStream:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  OUTLINED_FUNCTION_7_0((uint64_t)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater]);
  v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden] = 0;
  v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled] = 1;
  id v13 = &v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize];
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  uint64_t v14 = &v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topConstraints];
  void *v14 = 0;
  v14[1] = 0;
  id v15 = &v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_bottomConstraints];
  *id v15 = 0;
  v15[1] = 0;
  id v16 = &v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingFrames];
  *(_OWORD *)id v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  v16[64] = 0;
  v16[65] = 1;
  uint64_t v17 = &v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___screenShareService];
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((void *)v17 + 4) = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuViewModel] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuShadowView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_menuBlurTrailingConstraint] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_cancellables] = MEMORY[0x1E4FBC860];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v18 = OUTLINED_FUNCTION_7_0((uint64_t)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_rosterViewProvider]);
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_controlsManager] = a1;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isScreenLocked] = a2;
  *(void *)(v18 + 8) = a4;
  swift_unknownObjectWeakAssign();
  outlined init with copy of IDSLookupManager(a5, (uint64_t)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service]);
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sidebarStateStream] = a6;
  v22.receiver = v6;
  v22.super_class = ObjectType;
  id v19 = a1;
  swift_retain();
  id v20 = objc_msgSendSuper2(&v22, sel_initWithNibName_bundle_, 0, 0);

  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v20;
}

id CallControlsMenuViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CallControlsMenuViewController.init(coder:)()
{
  OUTLINED_FUNCTION_7_0((uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater]);
  v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled] = 1;
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topConstraints];
  void *v2 = 0;
  v2[1] = 0;
  id v3 = &v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_bottomConstraints];
  *id v3 = 0;
  v3[1] = 0;
  uint64_t v4 = &v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingFrames];
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 0;
  v4[65] = 1;
  uint64_t v5 = &v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___screenShareService];
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((void *)v5 + 4) = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuViewModel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuShadowView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_menuBlurTrailingConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_cancellables] = MEMORY[0x1E4FBC860];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  OUTLINED_FUNCTION_7_0((uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_rosterViewProvider]);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CallControlsMenuViewController.viewDidLoad()()
{
  id v1 = v0;
  v77.receiver = v0;
  v77.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v77, sel_viewDidLoad);
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service + 24];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service + 32];
  __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service], v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  CallControlsMenuViewController.blurConfiguration(conversationState:)(v4, (uint64_t)v78);
  id v5 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  id v6 = objc_msgSend(v5, sel_trailingAnchor);

  id v7 = OUTLINED_FUNCTION_6_10();
  if (!v7)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_trailingAnchor);

  id v10 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v9, v79);
  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_menuBlurTrailingConstraint];
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_menuBlurTrailingConstraint] = v10;
  id v12 = v10;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C3769580;
  id v14 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  id v15 = objc_msgSend(v14, sel_topAnchor);

  id v16 = OUTLINED_FUNCTION_6_10();
  if (!v16)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v17 = v16;
  id v18 = objc_msgSend(v16, sel_topAnchor);

  id v19 = OUTLINED_FUNCTION_4_51();
  *(void *)(v13 + 32) = v19;
  id v20 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  id v21 = objc_msgSend(v20, sel_leadingAnchor);

  id v22 = OUTLINED_FUNCTION_6_10();
  if (!v22)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v23 = v22;
  id v24 = objc_msgSend(v22, sel_leadingAnchor);

  id v25 = OUTLINED_FUNCTION_4_51();
  *(void *)(v13 + 40) = v25;
  *(void *)(v13 + 48) = v12;
  id v74 = v12;
  id v26 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  id v27 = objc_msgSend(v26, sel_bottomAnchor);

  id v28 = OUTLINED_FUNCTION_6_10();
  if (!v28)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v29 = v28;
  id v30 = objc_msgSend(v28, sel_bottomAnchor);

  id v31 = OUTLINED_FUNCTION_4_51();
  *(void *)(v13 + 56) = v31;
  unint64_t v76 = v13;
  specialized Array._endMutation()();
  id v32 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuShadowView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuShadowView.getter);
  id v33 = objc_msgSend(v32, sel_topAnchor);

  id v34 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  id v35 = objc_msgSend(v34, (SEL)&selRef_insertAttributedString_atIndex_ + 3);

  id v75 = objc_msgSend(v33, (SEL)0x1F74DE2EELL, v35);
  id v36 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuShadowView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuShadowView.getter);
  id v37 = objc_msgSend(v36, sel_trailingAnchor);

  id v38 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  id v39 = objc_msgSend(v38, sel_trailingAnchor);

  id v40 = objc_msgSend(v37, (SEL)0x1F74DE2EELL, v39);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v41, 2))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v41 + 2, 1);
    specialized Array._endMutation()();
    unint64_t v13 = (unint64_t)v75;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_9;
    }
  }
  OUTLINED_FUNCTION_1_4();
LABEL_9:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v42 = v40;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_1_4();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v43 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuView.getter);
  id v44 = objc_msgSend(v43, sel_topAnchor);

  id v45 = OUTLINED_FUNCTION_6_10();
  if (!v45) {
    goto LABEL_36;
  }
  uint64_t v46 = v45;
  id v47 = objc_msgSend(v45, sel_topAnchor);

  id v48 = objc_msgSend(v44, sel_constraintEqualToAnchor_constant_, v47, 10.0);
  id v49 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuView.getter);
  id v50 = objc_msgSend(v49, sel_leadingAnchor);

  id v51 = OUTLINED_FUNCTION_6_10();
  if (!v51)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  id v52 = v51;
  id v53 = objc_msgSend(v51, sel_leadingAnchor);

  id v54 = OUTLINED_FUNCTION_5_53();
  id v55 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuView.getter);
  id v56 = objc_msgSend(v55, sel_trailingAnchor);

  id v57 = OUTLINED_FUNCTION_6_10();
  if (!v57)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v58 = v57;
  id v59 = objc_msgSend(v57, sel_trailingAnchor);

  id v60 = OUTLINED_FUNCTION_5_53();
  id v61 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuView.getter);
  id v62 = objc_msgSend(v61, sel_bottomAnchor);

  id v63 = OUTLINED_FUNCTION_6_10();
  if (!v63)
  {
LABEL_39:
    __break(1u);
    return;
  }
  uint64_t v64 = v63;
  id v65 = objc_msgSend(v63, sel_bottomAnchor);

  id v66 = OUTLINED_FUNCTION_5_53();
  if (v76 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v67 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v67, 4))
  {
    __break(1u);
    goto LABEL_31;
  }
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v67 + 4, 1);
  specialized Array._endMutation()();
  id v48 = v48;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v68) {
LABEL_31:
  }
    OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v69 = v54;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v68) {
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v70 = v60;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v68) {
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v71 = v66;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_1_66();
  if (v68) {
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_8_34();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  unint64_t v72 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v72, sel_activateConstraints_, isa);

  CallControlsMenuViewController.menuViewModel.getter();
  CallControlsMenuViewModel.startContextObservation()();
  swift_release();
  CallControlsMenuViewController.observeState()();

  outlined release of CallControlsMenuViewController.BlurConfiguration((uint64_t)v78, (void (*)(void, void, void, void, void, void))outlined consume of VariableBlurMask);
}

uint64_t CallControlsMenuViewController.blurConfiguration(conversationState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v5 = (unsigned char *)(v2 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled);
  swift_beginAccess();
  if ((*v5 & 1) == 0 && a1 != 1)
  {
    double v6 = 5.0;
    char v7 = 64;
    uint64_t result = 0x4034000000000000;
    double v9 = 6.0;
LABEL_6:
    *(double *)a2 = v9;
    *(void *)(a2 + 8) = result;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(unsigned char *)(a2 + 48) = v7;
    *(double *)(a2 + 56) = v6;
    return result;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v10 = objc_msgSend(self, sel_conversationKit);
  uint64_t result = (uint64_t)@nonobjc UIImage.init(named:in:)(0xD000000000000016, 0x80000001C379AC90, v10);
  if (result)
  {
    char v7 = 0x80;
    double v6 = 90.0;
    double v9 = 1.15;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

id CallControlsMenuViewController.menuBlurView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    double v6 = (void *)a2(v2);
    char v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

uint64_t CallControlsMenuViewController.menuViewModel.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuViewModel;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuViewModel))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuViewModel);
  }
  else
  {
    uint64_t v3 = v0;
    outlined init with copy of IDSLookupManager(v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service, (uint64_t)v6);
    uint64_t v4 = CallControlsMenuViewController.isAppFrontMost.getter();
    type metadata accessor for CallControlsMenuViewModel();
    swift_allocObject();
    uint64_t v2 = CallControlsMenuViewModel.init(service:isAppFrontMost:)(v6, v4);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t CallControlsMenuViewController.observeState()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CombineLatest<AnyPublisher<SidebarState, Never>, AnyPublisher<TUConversationState, Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v21 = v1;
  uint64_t v22 = v2;
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CombineLatest<AnyPublisher<SidebarState, Never>, AnyPublisher<TUConversationState, Never>>, NSRunLoop>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = (id)SidebarStateStream.states.getter();
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service + 24);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service), v10);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v10, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SidebarState, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<SidebarState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<SidebarState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<TUConversationState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationState, Never>);
  Publisher.combineLatest<A>(_:)();
  swift_release();
  swift_release();
  id v25 = objc_msgSend(self, sel_mainRunLoop);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v14);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.CombineLatest<AnyPublisher<SidebarState, Never>, AnyPublisher<TUConversationState, Never>> and conformance Publishers.CombineLatest<A, B>, &demangling cache variable for type metadata for Publishers.CombineLatest<AnyPublisher<SidebarState, Never>, AnyPublisher<TUConversationState, Never>>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  uint64_t v15 = v21;
  Publisher.receive<A>(on:options:)();
  outlined destroy of Conversation?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v15);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in CallControlsMenuViewController.observeState();
  *(void *)(v17 + 24) = v16;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.CombineLatest<AnyPublisher<SidebarState, Never>, AnyPublisher<TUConversationState, Never>>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CombineLatest<AnyPublisher<SidebarState, Never>, AnyPublisher<TUConversationState, Never>>, NSRunLoop>);
  uint64_t v18 = v23;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v18);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

Swift::Void __swiftcall CallControlsMenuViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_viewDidAppear_, a1);
}

uint64_t key path getter for CallControlsMenuViewController.sizeUpdater : CallControlsMenuViewController@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for CallControlsMenuViewController.sizeUpdater : CallControlsMenuViewController(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t CallControlsMenuViewController.sizeUpdater.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t CallControlsMenuViewController.sizeUpdater.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CallControlsMenuViewController.sizeUpdater.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t CallControlsMenuViewController.isHidden.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for CallControlsMenuViewController.isHidden : CallControlsMenuViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void CallControlsMenuViewController.isHidden.didset(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = &v1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden];
  swift_beginAccess();
  if (*v3 != v2)
  {
    id v4 = objc_msgSend(v1, sel_view);
    if (v4)
    {
      uint64_t v5 = v4;
      objc_msgSend(v4, sel_setHidden_, 0);

      CallControlsMenuViewController.updateDogingState(animated:)(0);
      uint64_t v6 = self;
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v1;
      uint64_t v17 = partial apply for closure #1 in CallControlsMenuViewController.isHidden.didset;
      uint64_t v18 = v7;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v14 = 1107296256;
      uint64_t v15 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v16 = &block_descriptor_19;
      id v8 = _Block_copy(&aBlock);
      uint64_t v9 = v1;
      swift_release();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v9;
      uint64_t v17 = partial apply for closure #2 in CallControlsMenuViewController.isHidden.didset;
      uint64_t v18 = v10;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v14 = 1107296256;
      uint64_t v15 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v16 = &block_descriptor_25_0;
      uint64_t v11 = _Block_copy(&aBlock);
      uint64_t v12 = v9;
      swift_release();
      objc_msgSend(v6, sel_animateWithDuration_animations_completion_, v8, v11, 0.2);
      _Block_release(v11);
      _Block_release(v8);
    }
    else
    {
      __break(1u);
    }
  }
}

void CallControlsMenuViewController.updateDogingState(animated:)(char a1)
{
  uint64_t v2 = v1;
  char v4 = SidebarStateStream.currentState.getter() & 1;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service + 24);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service), *(void *)(v2 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service + 24));
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
  CallControlsMenuViewController.updateBlur(sidebarState:conversationState:)(v4, v7);
  id v8 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden);
  swift_beginAccess();
  if (*v8)
  {
    char v9 = CallControlsMenuViewController.updateTopConstraints(dodging:)(0, &OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topConstraints);
    char v10 = 0;
    if (v9) {
      goto LABEL_7;
    }
LABEL_6:
    if ((CallControlsMenuViewController.updateTopConstraints(dodging:)(v10 & 1, &OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_bottomConstraints) & 1) == 0)return; {
    goto LABEL_7;
    }
  }
  char v11 = CallControlsMenuViewController.shouldDodgeTop()();
  if ((CallControlsMenuViewController.updateTopConstraints(dodging:)(v11 & 1, &OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topConstraints) & 1) == 0)
  {
    char v10 = CallControlsMenuViewController.shouldDodgeBottom()();
    goto LABEL_6;
  }
LABEL_7:
  if (a1)
  {
    uint64_t v12 = (void *)MEMORY[0x1C8776240](v2 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_containingView);
    if (v12)
    {
      unint64_t v13 = v12;
      objc_msgSend(v12, sel_setNeedsLayout);
      if (one-time initialization token for springParameters != -1) {
        swift_once();
      }
      v16[0] = static Animation.ConversationControls.springParameters;
      v16[1] = xmmword_1EA37ECE0;
      v16[2] = xmmword_1EA37ECF0;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v13;
      id v15 = v13;
      specialized static UIView.animate(with:delay:animations:completion:)((double *)v16, 0, 0, (uint64_t (*)())partial apply for closure #1 in CallControlsMenuViewController.updateDogingState(animated:), v14, 0, 0);
      swift_release();
    }
  }
}

void closure #1 in CallControlsMenuViewController.isHidden.didset(char *a1)
{
  id v2 = objc_msgSend(a1, sel_view);
  if (v2)
  {
    uint64_t v3 = v2;
    char v4 = &a1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden];
    swift_beginAccess();
    double v5 = 1.0;
    if (*v4) {
      double v5 = 0.0;
    }
    objc_msgSend(v3, sel_setAlpha_, v5);
  }
  else
  {
    __break(1u);
  }
}

void closure #2 in CallControlsMenuViewController.isHidden.didset(int a1, char *a2)
{
  id v3 = objc_msgSend(a2, sel_view);
  if (v3)
  {
    char v4 = v3;
    double v5 = (unsigned __int8 *)&a2[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isHidden];
    swift_beginAccess();
    objc_msgSend(v4, sel_setHidden_, *v5);
  }
  else
  {
    __break(1u);
  }
}

void (*CallControlsMenuViewController.isHidden.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  OUTLINED_FUNCTION_6_44();
  *((unsigned char *)v3 + 32) = *v1;
  return CallControlsMenuViewController.isHidden.modify;
}

void CallControlsMenuViewController.isHidden.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CallControlsMenuViewController.isOneToOneModeEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t key path getter for CallControlsMenuViewController.isOneToOneModeEnabled : CallControlsMenuViewController@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

void CallControlsMenuViewController.isOneToOneModeEnabled.didset(char a1)
{
  int v2 = a1 & 1;
  id v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled);
  swift_beginAccess();
  if (*v3 != v2) {
    CallControlsMenuViewController.updateDogingState(animated:)(0);
  }
}

void (*CallControlsMenuViewController.isOneToOneModeEnabled.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  OUTLINED_FUNCTION_6_44();
  *((unsigned char *)v3 + 32) = *v1;
  return CallControlsMenuViewController.isOneToOneModeEnabled.modify;
}

void CallControlsMenuViewController.isOneToOneModeEnabled.modify(uint64_t a1, uint64_t a2)
{
}

void CallControlsMenuViewController.isHidden.modify(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 32));
  free(v3);
}

void CallControlsMenuViewController.dodgingFrames.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingFrames;
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingFrames, (uint64_t)v4, &demangling cache variable for type metadata for (menuFrame: CGRect, dogingFrame: CGRect?)?);
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(a1, v3, &demangling cache variable for type metadata for (menuFrame: CGRect, dogingFrame: CGRect?)?);
  CallControlsMenuViewController.dodgingFrames.didset((uint64_t)v4);
}

uint64_t CallControlsMenuViewController.windowSize.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize + 8);
  char v7 = *(unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize + 16);
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  return CallControlsMenuViewController.windowSize.didset(v5, v6, v7);
}

uint64_t CallControlsMenuViewController.windowSize.didset(uint64_t result, uint64_t a2, char a3)
{
  if (a3)
  {
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize + 16)) {
      return result;
    }
    double v4 = *(double *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize);
    double v5 = *(double *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize + 8);
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize + 16) & 1) == 0)
  {
    double v4 = *(double *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize);
    double v5 = *(double *)(v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize + 8);
    if (*(double *)&result != v4
      || *(double *)&a2 != *(double *)(v3
                                     + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_windowSize
                                     + 8))
    {
LABEL_11:
      uint64_t v7 = v3 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sizeUpdater;
      swift_beginAccess();
      *(double *)&uint64_t result = COERCE_DOUBLE(MEMORY[0x1C8776240](v7));
      if (*(double *)&result != 0.0)
      {
        uint64_t v8 = *(void *)(v7 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, double, double))(v8 + 8))(ObjectType, v8, v4, v5);
        *(double *)&uint64_t result = COERCE_DOUBLE(swift_unknownObjectRelease());
      }
    }
  }
  return result;
}

void CallControlsMenuViewController.dodgingFrames.didset(uint64_t a1)
{
  outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?(a1, (uint64_t)v11, &demangling cache variable for type metadata for (menuFrame: CGRect, dogingFrame: CGRect?)?);
  if ((v14 & 1) == 0)
  {
    uint64_t v2 = v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingFrames;
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingFrames + 65) & 1) == 0)
    {
      CGFloat v3 = *(double *)v11;
      CGFloat v4 = *(double *)&v11[1];
      CGFloat v5 = *(double *)&v11[2];
      CGFloat v6 = *(double *)&v11[3];
      CGFloat v8 = *(double *)(v2 + 16);
      CGFloat v7 = *(double *)(v2 + 24);
      CGFloat v10 = *(double *)v2;
      CGFloat v9 = *(double *)(v2 + 8);
      if (v13)
      {
        if ((*(unsigned char *)(v2 + 64) & 1) == 0)
        {
LABEL_9:
          CallControlsMenuViewController.updateDogingState(animated:)(1);
          return;
        }
      }
      else if ((*(unsigned char *)(v2 + 64) & 1) != 0 || !CGRectEqualToRect(v12, *(CGRect *)(v2 + 32)))
      {
        goto LABEL_9;
      }
      v15.origin.x = v3;
      v15.origin.y = v4;
      v15.size.width = v5;
      v15.size.height = v6;
      v16.origin.x = v10;
      v16.origin.y = v9;
      v16.size.width = v8;
      v16.size.height = v7;
      if (CGRectEqualToRect(v15, v16)) {
        return;
      }
      goto LABEL_9;
    }
  }
}

uint64_t CallControlsMenuViewController.screenShareService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___screenShareService;
  swift_beginAccess();
  outlined init with copy of ScreenShareCallControlsService?(v3, (uint64_t)&v10);
  if (!v11)
  {
    outlined destroy of Conversation?((uint64_t)&v10, &demangling cache variable for type metadata for ScreenShareCallControlsService?);
    CGFloat v4 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_controlsManager);
    uint64_t v5 = type metadata accessor for InCallScreenShareCallControlsService();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    uint64_t v11 = v5;
    CGRect v12 = &protocol witness table for InCallScreenShareCallControlsService;
    *(void *)&long long v10 = v6;
    outlined init with copy of IDSLookupManager((uint64_t)&v10, (uint64_t)v9);
    swift_beginAccess();
    id v7 = v4;
    outlined assign with take of ScreenShareCallControlsService?((uint64_t)v9, v3);
    swift_endAccess();
  }
  return outlined init with take of Notice(&v10, a1);
}

uint64_t CallControlsMenuViewController.isAppFrontMost.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<Bool>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6[15] = 1;
  Just.init(_:)();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Just<Bool> and conformance Just<A>, &demangling cache variable for type metadata for Just<Bool>);
  uint64_t v4 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

id closure #1 in CallControlsMenuViewController.menuBlurView.getter(char *a1)
{
  uint64_t v2 = &a1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service];
  uint64_t v3 = *((void *)v2 + 3);
  uint64_t v4 = *((void *)v2 + 4);
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  CallControlsMenuViewController.blurConfiguration(conversationState:)(v5, (uint64_t)&v11);
  double v6 = v11;
  outlined init with take of VariableBlurMask((uint64_t)&v12, (uint64_t)v13);
  id v7 = objc_allocWithZone((Class)type metadata accessor for VariableBlurUIView());
  outlined release of CallControlsMenuViewController.BlurConfiguration((uint64_t)&v11, (void (*)(void, void, void, void, void, void))outlined copy of VariableBlurMask);
  id v8 = VariableBlurUIView.init(radius:blurMask:)((uint64_t)v13, v6);
  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v8, sel_setUserInteractionEnabled_, 0);
  id result = objc_msgSend(a1, sel_view);
  if (result)
  {
    long long v10 = result;
    objc_msgSend(result, sel_addSubview_, v8);

    outlined release of CallControlsMenuViewController.BlurConfiguration((uint64_t)&v11, (void (*)(void, void, void, void, void, void))outlined consume of VariableBlurMask);
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id closure #1 in CallControlsMenuViewController.menuShadowView.getter(void *a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v2 = objc_msgSend(self, sel_conversationKit);
  id v3 = @nonobjc UIImage.init(named:in:)(0xD000000000000016, 0x80000001C379AC90, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_imageFlippedForRightToLeftLayoutDirection);
  }
  else
  {
    id v5 = 0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_initWithImage_, v5);
  objc_msgSend(v6, sel_setAlpha_, 0.2);
  objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v6, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v6, sel_setContentMode_, 10);
  UIView.setCHCRPriority(_:)((__C::UILayoutPriority)1132068864);
  id result = objc_msgSend(a1, sel_view);
  if (result)
  {
    id v8 = result;
    objc_msgSend(result, sel_addSubview_, v6);

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id closure #1 in CallControlsMenuViewController.menuView.getter(char *a1)
{
  uint64_t v2 = type metadata accessor for UIHostingControllerSizingOptions();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = type metadata accessor for CallControlsMenuView();
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  id v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  id v8 = &v20[-v7];
  CallControlsMenuViewController.menuViewModel.getter();
  outlined init with copy of IDSLookupManager((uint64_t)&a1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_service], (uint64_t)v21);
  CallControlsMenuViewController.screenShareService.getter((uint64_t)v20);
  uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_sidebarStateStream];
  uint64_t v10 = *(void *)&a1[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isScreenLocked];
  swift_retain();
  swift_retain();
  CallControlsMenuView.init(viewModel:service:screenShareService:sidebarStateStream:isScreenLocked:)((uint64_t)v21, (uint64_t)v20, v9, v10, (uint64_t)v8);
  outlined init with copy of CallControlsMenuView((uint64_t)v8, (uint64_t)v6);
  id v11 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIHostingController<CallControlsMenuView>));
  uint64_t v12 = (void *)UIHostingController.init(rootView:)();
  UIHostingController.safeAreaRegions.setter();
  static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
  dispatch thunk of UIHostingController.sizingOptions.setter();
  objc_msgSend(a1, sel_addChildViewController_, v12);
  id result = objc_msgSend(a1, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  char v14 = result;
  id result = objc_msgSend(v12, sel_view);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  CGRect v15 = result;
  objc_msgSend(v14, sel_addSubview_, result);

  objc_msgSend(v12, sel_didMoveToParentViewController_, a1);
  id result = objc_msgSend(v12, sel_view);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  CGRect v16 = result;
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id result = objc_msgSend(v12, sel_view);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v17 = result;
  id v18 = objc_msgSend(self, sel_clearColor);
  objc_msgSend(v17, sel_setBackgroundColor_, v18);

  id result = objc_msgSend(v12, sel_view);
  if (result)
  {
    id v19 = result;
    outlined destroy of CallControlsMenuView((uint64_t)v8);

    return v19;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CallControlsMenuViewController.shouldDodgeTop()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled);
  swift_beginAccess();
  if (*v2 != 1
    || (uint64_t v3 = MEMORY[0x1C8776240](v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_containingView)) == 0)
  {
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  uint64_t v4 = (UIView *)v3;
  uint64_t v5 = v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topCornerView;
  id v6 = (void *)MEMORY[0x1C8776240](v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_topCornerView);
  uint64_t v7 = (uint64_t)v6;
  if (v6)
  {
    unsigned __int8 v8 = objc_msgSend(v6, sel_isHidden);

    if (v8) {
      goto LABEL_11;
    }
    uint64_t v9 = (void *)MEMORY[0x1C8776240](v5);
    uint64_t v7 = (uint64_t)v9;
    if (!v9) {
      goto LABEL_12;
    }
    objc_msgSend(v9, sel_alpha);
    double v11 = v10;

    if (v11 <= 0.0) {
      goto LABEL_11;
    }
    uint64_t v7 = MEMORY[0x1C8776240](v1 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingView);
    if (!v7) {
      goto LABEL_12;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    UIPopoverPresentationControllerSourceItem.frame(in:)(&v17, v4);

    outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v17, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
    if (v22)
    {
LABEL_11:
      LOBYTE(v7) = 0;
      goto LABEL_12;
    }
    CGFloat v12 = *(double *)v21;
    CGFloat v13 = *(double *)&v21[1];
    CGFloat v15 = *(double *)&v21[2];
    CGFloat v14 = *(double *)&v21[3];
    uint64_t v7 = MEMORY[0x1C8776240](v5);
    if (v7)
    {
      UIPopoverPresentationControllerSourceItem.frame(in:)(&v18, v4);

      outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v18, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      if ((v20 & 1) == 0)
      {
        LOBYTE(v7) = CallControlsMenuViewController.shouldDodge(top:bottom:threshold:)(v19[0], v19[1], v19[2], v19[3], v12, v13, v15, v14, 20.0);
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
LABEL_12:

  return v7 & 1;
}

BOOL CallControlsMenuViewController.shouldDodge(top:bottom:threshold:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  if (CGRectIntersectsRect(*(CGRect *)&a1, *(CGRect *)&a5)) {
    return 1;
  }
  CGFloat rect = a8;
  v32.origin.x = a5;
  v32.origin.y = a6;
  v32.size.width = a7;
  v32.size.height = a8;
  double MinY = CGRectGetMinY(v32);
  v33.origin.x = a1;
  v33.origin.y = a2;
  v33.size.width = a3;
  v33.size.height = a4;
  double v27 = MinY - CGRectGetMaxY(v33);
  if (v27 < 0.0 || v27 > a9) {
    return 0;
  }
  v34.origin.x = a1;
  v34.origin.y = a2;
  v34.size.width = a3;
  v34.size.height = a4;
  double MinX = CGRectGetMinX(v34);
  v35.origin.x = a5;
  v35.origin.y = a6;
  v35.size.width = a7;
  v35.size.height = rect;
  if (MinX >= CGRectGetMaxX(v35)) {
    return 0;
  }
  v36.origin.x = a1;
  v36.origin.y = a2;
  v36.size.width = a3;
  v36.size.height = a4;
  double MaxX = CGRectGetMaxX(v36);
  v37.origin.x = a5;
  v37.origin.y = a6;
  v37.size.width = a7;
  v37.size.height = rect;
  return CGRectGetMinX(v37) < MaxX;
}

uint64_t CallControlsMenuViewController.shouldDodgeBottom()()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_isOneToOneModeEnabled);
  swift_beginAccess();
  if (*v1 == 1
    && (uint64_t v2 = MEMORY[0x1C8776240](v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_containingView)) != 0)
  {
    uint64_t v3 = (UIView *)v2;
    uint64_t v4 = MEMORY[0x1C8776240](v0 + OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_dodgingView);
    if (v4)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      UIPopoverPresentationControllerSourceItem.frame(in:)(&v11, v3);

      outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v11, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      if (v16) {
        goto LABEL_6;
      }
      CGFloat v5 = *(double *)v15;
      CGFloat v6 = *(double *)&v15[1];
      CGFloat v7 = *(double *)&v15[2];
      CGFloat v8 = *(double *)&v15[3];
      id v9 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuView.getter);
      UIPopoverPresentationControllerSourceItem.frame(in:)(&v12, v3);

      outlined init with take of SystemApertureIconFactory.SystemApertureIconSet?((uint64_t)&v12, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      if (v14) {
LABEL_6:
      }
        LOBYTE(v4) = 0;
      else {
        LOBYTE(v4) = CallControlsMenuViewController.shouldDodge(top:bottom:threshold:)(v5, v6, v7, v8, v13[0], v13[1], v13[2], v13[3], 0.0);
      }
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4 & 1;
}

uint64_t CallControlsMenuViewController.updateTopConstraints(dodging:)(char a1, void *a2)
{
  uint64_t v4 = (id *)(v2 + *a2);
  id v5 = *v4;
  if (a1)
  {
    if (v5 && objc_msgSend(v5, sel_isActive))
    {
      if (!*v4) {
        return 1;
      }
      objc_msgSend(*v4, sel_setActive_, 0);
      if (!*v4) {
        return 1;
      }
      id v6 = v4[1];
      if (!v6) {
        return 1;
      }
      goto LABEL_14;
    }
  }
  else if (v5 && (objc_msgSend(v5, sel_isActive) & 1) == 0)
  {
    id v6 = *v4;
    if (!*v4) {
      return 1;
    }
    if (v4[1])
    {
      objc_msgSend(v4[1], sel_setActive_, 0);
      id v6 = *v4;
      if (!*v4) {
        return 1;
      }
    }
LABEL_14:
    uint64_t v7 = 1;
    objc_msgSend(v6, sel_setActive_, 1);
    return v7;
  }
  return 0;
}

double CallControlsMenuViewController.BlurConfiguration.radius.getter()
{
  return *(double *)v0;
}

void CallControlsMenuViewController.BlurConfiguration.radius.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*CallControlsMenuViewController.BlurConfiguration.radius.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CallControlsMenuViewController.BlurConfiguration.mask.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of VariableBlurMask(v1 + 8, a1);
}

uint64_t CallControlsMenuViewController.BlurConfiguration.mask.setter(uint64_t a1)
{
  return outlined assign with take of VariableBlurMask(a1, v1 + 8);
}

uint64_t (*CallControlsMenuViewController.BlurConfiguration.mask.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double CallControlsMenuViewController.BlurConfiguration.trailingPadding.getter()
{
  return *(double *)(v0 + 56);
}

void CallControlsMenuViewController.BlurConfiguration.trailingPadding.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*CallControlsMenuViewController.BlurConfiguration.trailingPadding.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

__n128 CallControlsMenuViewController.BlurConfiguration.init(radius:mask:trailingPadding:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  outlined init with take of VariableBlurMask(a1, (uint64_t)v11);
  uint64_t v7 = v12;
  char v8 = v13;
  __n128 result = (__n128)v11[0];
  long long v10 = v11[1];
  *(double *)a2 = a3;
  *(__n128 *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 24) = v10;
  *(void *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 48) = v8;
  *(double *)(a2 + 56) = a4;
  return result;
}

void CallControlsMenuViewController.updateBlur(sidebarState:conversationState:)(char a1, uint64_t a2)
{
  CallControlsMenuViewController.blurConfiguration(conversationState:)(a2, (uint64_t)&v18);
  int v4 = a1 & 1;
  if (v4) {
    double v5 = 0.2;
  }
  else {
    double v5 = 0.0;
  }
  id v6 = self;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v2;
  *(unsigned char *)(v7 + 24) = v4;
  aBlock[4] = partial apply for closure #1 in CallControlsMenuViewController.updateBlur(sidebarState:conversationState:);
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_26;
  char v8 = _Block_copy(aBlock);
  id v9 = v2;
  swift_release();
  objc_msgSend(v6, sel_animateWithDuration_delay_options_animations_completion_, 0, v8, 0, v5, v5);
  _Block_release(v8);
  long long v10 = (char *)CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  uint64_t v11 = v18;
  uint64_t v12 = &v10[OBJC_IVAR____TtC15ConversationKit18VariableBlurUIView_radius];
  swift_beginAccess();
  *(void *)uint64_t v12 = v11;
  VariableBlurUIView.setupLayers()();

  id v13 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  outlined init with take of VariableBlurMask((uint64_t)v19, (uint64_t)aBlock);
  outlined release of CallControlsMenuViewController.BlurConfiguration((uint64_t)&v18, (void (*)(void, void, void, void, void, void))outlined copy of VariableBlurMask);
  VariableBlurUIView.blurMask.setter((uint64_t)aBlock);

  char v14 = *(void **)&v9[OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController_menuBlurTrailingConstraint];
  if (v14)
  {
    double v15 = *(double *)&v19[6];
    id v16 = v14;
    objc_msgSend(v16, sel_setConstant_, v15);
    outlined release of CallControlsMenuViewController.BlurConfiguration((uint64_t)&v18, (void (*)(void, void, void, void, void, void))outlined consume of VariableBlurMask);
  }
  else
  {
    outlined release of CallControlsMenuViewController.BlurConfiguration((uint64_t)&v18, (void (*)(void, void, void, void, void, void))outlined consume of VariableBlurMask);
  }
}

void closure #1 in CallControlsMenuViewController.updateBlur(sidebarState:conversationState:)(uint64_t a1, char a2)
{
  id v3 = CallControlsMenuViewController.menuBlurView.getter(&OBJC_IVAR____TtC15ConversationKit30CallControlsMenuViewController____lazy_storage___menuBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsMenuViewController.menuBlurView.getter);
  id v5 = v3;
  double v4 = 0.0;
  if ((a2 & 1) == 0) {
    double v4 = 1.0;
  }
  objc_msgSend(v3, sel_setAlpha_, v4);
}

void closure #1 in CallControlsMenuViewController.observeState()(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    CallControlsMenuViewController.updateBlur(sidebarState:conversationState:)(a1 & 1, a2);
  }
}

id CallControlsMenuViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  double v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CallControlsMenuViewController.init(nibName:bundle:)()
{
}

id CallControlsMenuViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void outlined consume of VariableBlurMask(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 0xC0) == 0x80) {
}
  }

uint64_t outlined init with copy of VariableBlurMask(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of VariableBlurMask(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of VariableBlurMask(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C31346B0(char *a1)
{
  return CallControlsMenuViewController.isHidden.setter(*a1);
}

uint64_t sub_1C31346DC(char *a1)
{
  return CallControlsMenuViewController.isOneToOneModeEnabled.setter(*a1);
}

uint64_t type metadata accessor for CallControlsMenuViewController()
{
  return self;
}

uint64_t method lookup function for CallControlsMenuViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallControlsMenuViewController);
}

uint64_t dispatch thunk of CallControlsMenuViewController.__allocating_init(controlsManager:isScreenLocked:rosterViewProvider:service:sidebarStateStream:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

id outlined copy of VariableBlurMask(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 0xC0) == 0x80) {
    return result;
  }
  return result;
}

void destroy for CallControlsMenuViewController.BlurConfiguration(uint64_t a1)
{
}

uint64_t initializeWithCopy for CallControlsMenuViewController.BlurConfiguration(uint64_t a1, uint64_t a2)
{
  double v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  outlined copy of VariableBlurMask(v4, v5, v6, v7, v8, v9);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for CallControlsMenuViewController.BlurConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  double v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  outlined copy of VariableBlurMask(v4, v5, v6, v7, v8, v9);
  long long v10 = *(void **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v15 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of VariableBlurMask(v10, v11, v12, v13, v14, v15);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for CallControlsMenuViewController.BlurConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 40);
  char v5 = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v5;
  outlined consume of VariableBlurMask(v6, v7, v8, v9, v10, v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallControlsMenuViewController.BlurConfiguration(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(unsigned char *)(a1 + 64))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      unsigned int v2 = ((*(unsigned __int8 *)(a1 + 48) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 48) >> 1) & 0x1F))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for CallControlsMenuViewController.BlurConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)(result + 40) = 0;
      *(_OWORD *)(result + 24) = 0u;
      *(_OWORD *)(result + 8) = 0u;
      *(unsigned char *)(result + 48) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallControlsMenuViewController.BlurConfiguration()
{
  return &type metadata for CallControlsMenuViewController.BlurConfiguration;
}

uint64_t sub_1C31349E0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallControlsMenuViewController.observeState()(char a1, uint64_t a2)
{
  closure #1 in CallControlsMenuViewController.observeState()(a1 & 1, a2, v2);
}

uint64_t sub_1C3134A24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned SidebarState, @unowned TUConversationState) -> ()(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, *((void *)a1 + 1));
}

uint64_t sub_1C3134A90()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in CallControlsMenuViewController.updateBlur(sidebarState:conversationState:)()
{
  closure #1 in CallControlsMenuViewController.updateBlur(sidebarState:conversationState:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t outlined release of CallControlsMenuViewController.BlurConfiguration(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1C3134B14()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in CallControlsMenuViewController.isHidden.didset()
{
  closure #1 in CallControlsMenuViewController.isHidden.didset(*(char **)(v0 + 16));
}

void partial apply for closure #2 in CallControlsMenuViewController.isHidden.didset(int a1)
{
  closure #2 in CallControlsMenuViewController.isHidden.didset(a1, *(char **)(v1 + 16));
}

id partial apply for closure #1 in CallControlsMenuViewController.updateDogingState(animated:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_layoutIfNeeded);
}

uint64_t outlined init with copy of CallControlsMenuView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CallControlsMenuView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CallControlsMenuView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CallControlsMenuView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ScreenShareCallControlsService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenShareCallControlsService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ScreenShareCallControlsService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenShareCallControlsService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4UUIDV_s5NeverOytTg5141_s15ConversationKit25RecentsListViewControllerC10didConfirm015forInterventioneF0ySo25SCUIInterventionContainer_pSg_tFy10Foundation4UUIDVXEfU_0G3Kit0ijkL0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  int v9 = EnumTagSinglePayload;
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](EnumTagSinglePayload);
    uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v6, v7);
    RecentsListViewController.showVideoPlayerForMessage(withUUID:bypassSafety:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v7);
  }

  return v9 == 1;
}

uint64_t key path getter for RecentsListViewController.macCatalystDelegate : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x190))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for RecentsListViewController.macCatalystDelegate : RecentsListViewController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x198);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t RecentsListViewController.macCatalystDelegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t RecentsListViewController.macCatalystDelegate.setter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 8) = v0;
  OUTLINED_FUNCTION_41_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*RecentsListViewController.macCatalystDelegate.modify(void *a1))()
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___FTRecentsListViewController_macCatalystDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return RecentsListViewController.macCatalystDelegate.modify;
}

void RecentsListViewController.macCatalystDelegate.modify()
{
  OUTLINED_FUNCTION_171();
  *(void *)(v0[5] + v0[6] + 8) = v0[4];
  swift_unknownObjectWeakAssign();
  if (v1)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v0);
}

uint64_t key path getter for RecentsListViewController.recentCallProvider : RecentsListViewController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A8))();
}

uint64_t key path setter for RecentsListViewController.recentCallProvider : RecentsListViewController(uint64_t a1, void **a2)
{
  outlined init with copy of RecentCallProviding & RecentsControllable(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1B0))(v4);
}

uint64_t RecentsListViewController.recentCallProvider.setter(long long *a1)
{
  id v3 = (_OWORD *)(v1 + OBJC_IVAR___FTRecentsListViewController_recentCallProvider);
  OUTLINED_FUNCTION_6_1();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  outlined init with take of RecentCallProviding & RecentsControllable(a1, v3);
  return swift_endAccess();
}

_OWORD *outlined init with take of RecentCallProviding & RecentsControllable(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t RecentsListViewController.detailControllerFactory.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of RecentCallDetailControllerFactoryProtocol?(v1 + OBJC_IVAR___FTRecentsListViewController_detailControllerFactory, a1, &demangling cache variable for type metadata for RecentCallDetailControllerFactoryProtocol?);
}

void *RecentsListViewController.avatarViewControllerSettings.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___FTRecentsListViewController_avatarViewControllerSettings);
  id v2 = v1;
  return v1;
}

id RecentsListViewController.conversationManager.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR___FTRecentsListViewController_conversationManager);
}

uint64_t key path getter for RecentsListViewController.callCreator : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1D8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.callCreator : RecentsListViewController()
{
  uint64_t v0 = swift_retain();
  return RecentsListViewController.callCreator.setter(v0);
}

uint64_t RecentsListViewController.callCreator.setter(uint64_t a1)
{
  return OUTLINED_FUNCTION_26_1(a1);
}

uint64_t key path getter for RecentsListViewController.callItemBlockContactsDelegate : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x208))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.callItemBlockContactsDelegate : RecentsListViewController(id *a1, void **a2)
{
  id v2 = *a1;
  long long v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x210);
  id v4 = *a1;
  return v3(v2);
}

void *RecentsListViewController.callItemBlockContactsDelegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void RecentsListViewController.callItemBlockContactsDelegate.setter(void *a1)
{
}

uint64_t (*RecentsListViewController.callItemBlockContactsDelegate.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t RecentsListViewController.videoMessagesSink.setter(uint64_t a1)
{
  return OUTLINED_FUNCTION_26_1(a1);
}

void RecentsListViewController.linkCoordinator.setter(uint64_t a1)
{
}

uint64_t key path getter for RecentsListViewController.faceTimeReportSpamManager : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x250))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.faceTimeReportSpamManager : RecentsListViewController(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x258);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t RecentsListViewController.faceTimeReportSpamManager.getter()
{
  return swift_retain();
}

uint64_t RecentsListViewController.faceTimeReportSpamManager.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return swift_release();
}

uint64_t (*RecentsListViewController.faceTimeReportSpamManager.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for RecentsListViewController.presentScreenTimeShield : RecentsListViewController@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x298))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUFilteredRequest) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.presentScreenTimeShield : RecentsListViewController(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUFilteredRequest) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2A0);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return v7(v6, v5);
}

uint64_t RecentsListViewController.presentScreenTimeShield.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v0 = OUTLINED_FUNCTION_23_0();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v0);
  return OUTLINED_FUNCTION_23_0();
}

uint64_t (*RecentsListViewController.presentScreenTimeShield.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return RecentsListViewController.presentScreenTimeShield.modify;
}

uint64_t RecentsListViewController.presentScreenTimeShield.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return RecentsListViewController.presentScreenTimeShield.didset();
  }
  return result;
}

uint64_t key path getter for RecentsListViewController.setPreventsApplicationTerminationWhenModal : RecentsListViewController@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2B0))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> ();
  a2[1] = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.setPreventsApplicationTerminationWhenModal : RecentsListViewController(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(void, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2B8);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out ()), v5);
}

uint64_t RecentsListViewController.setPreventsApplicationTerminationWhenModal.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t RecentsListViewController.setPreventsApplicationTerminationWhenModal.setter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return swift_release();
}

uint64_t (*RecentsListViewController.setPreventsApplicationTerminationWhenModal.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for RecentsListViewController.headerView : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2C8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.headerView : RecentsListViewController(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2D0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t (*RecentsListViewController.headerView.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id RecentsListViewController.featureFlags.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR___FTRecentsListViewController_featureFlags);
}

void *RecentsListViewController.facetimeLinkTipPopoverReferenceItem.getter()
{
  uint64_t v0 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_161();
  v1 += 89;
  id v2 = *v1;
  uint64_t result = (void *)(*v1)();
  id v4 = result;
  if (result)
  {
    objc_msgSend(result, sel_bounds);
    OUTLINED_FUNCTION_38();

    v7.origin.x = OUTLINED_FUNCTION_41();
    CGFloat Width = CGRectGetWidth(v7);
    uint64_t result = (void *)v2();
    if (result)
    {
      uint64_t v6 = result;
      (*(void (**)(void))((*v0 & *result) + 0xE8))();

      return *(void **)&Width;
    }
  }
  return result;
}

uint64_t key path getter for RecentsListViewController.dataSource : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x318))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.dataSource : RecentsListViewController()
{
  uint64_t v0 = swift_retain();
  return RecentsListViewController.dataSource.setter(v0);
}

uint64_t RecentsListViewController.dataSource.setter(uint64_t a1)
{
  return OUTLINED_FUNCTION_26_1(a1);
}

uint64_t key path getter for RecentsListViewController.collectionView : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x360))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.collectionView : RecentsListViewController(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x368))(*a1);
}

uint64_t sub_1C3135E8C()
{
  swift_unknownObjectUnownedDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void RecentsListViewController.collectionView.setter(uint64_t a1)
{
}

void (*RecentsListViewController.collectionView.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = RecentsListViewController.collectionView.getter();
  return RecentsListViewController.collectionView.modify;
}

void RecentsListViewController.collectionView.modify(void **a1, char a2)
{
}

uint64_t key path getter for RecentsListViewController.cellBackgroundConfiguration : RecentsListViewController(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x378))();
}

uint64_t key path setter for RecentsListViewController.cellBackgroundConfiguration : RecentsListViewController(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for UIBackgroundConfiguration();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x380))(v6);
}

uint64_t RecentsListViewController.cellBackgroundConfiguration.setter()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_80();
  type metadata accessor for UIBackgroundConfiguration();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_39();
  v5(v4);
  OUTLINED_FUNCTION_60_2(v1);
  uint64_t v6 = v0 + OBJC_IVAR___FTRecentsListViewController____lazy_storage___cellBackgroundConfiguration;
  OUTLINED_FUNCTION_6_1();
  outlined assign with take of Participant?(v1, v6, &demangling cache variable for type metadata for UIBackgroundConfiguration?);
  return swift_endAccess();
}

void (*RecentsListViewController.cellBackgroundConfiguration.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UIBackgroundConfiguration();
  v3[1] = v4;
  OUTLINED_FUNCTION_1(v4);
  v3[2] = v5;
  size_t v7 = *(void *)(v6 + 64);
  v3[3] = malloc(v7);
  v3[4] = malloc(v7);
  RecentsListViewController.cellBackgroundConfiguration.getter();
  return RecentsListViewController.cellBackgroundConfiguration.modify;
}

void RecentsListViewController.cellBackgroundConfiguration.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = OUTLINED_FUNCTION_24_2();
    v6(v5);
    RecentsListViewController.cellBackgroundConfiguration.setter();
    OUTLINED_FUNCTION_163();
    OUTLINED_FUNCTION_50_1();
    v7();
  }
  else
  {
    RecentsListViewController.cellBackgroundConfiguration.setter();
  }
  free(v4);
  free(v3);
  free(v2);
}

id closure #1 in closure #1 in RecentsListViewController.collectionLayoutConfiguration.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    RecentsListViewController.getSwipeActions(at:)(a1);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISwipeActionsConfiguration);
    id v6 = @nonobjc UISwipeActionsConfiguration.__allocating_init(actions:)();
  }
  else
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISwipeActionsConfiguration);
    return @nonobjc UISwipeActionsConfiguration.__allocating_init(actions:)();
  }
  return v6;
}

id @nonobjc UISwipeActionsConfiguration.__allocating_init(actions:)()
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextualAction);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_configurationWithActions_, isa);

  return v1;
}

uint64_t RecentsListViewController.getSwipeActions(at:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RecentsCallItemType(0);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RecentsCallItem(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x318))(v11);
  (*(void (**)(uint64_t))(v14 + 264))(a1);
  swift_release();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    return MEMORY[0x1E4FBC860];
  }
  _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v9, (uint64_t)v13, (void (*)(void))type metadata accessor for RecentsCallItem);
  _s15ConversationKit15RecentsCallItemVWOcTm_0((uint64_t)v13, (uint64_t)v6, (void (*)(void))type metadata accessor for RecentsCallItemType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of RecentsCallItem((uint64_t)v6, (void (*)(void))type metadata accessor for RecentsCallItemType);
  if (EnumCaseMultiPayload == 1)
  {
    outlined destroy of RecentsCallItem((uint64_t)v13, (void (*)(void))type metadata accessor for RecentsCallItem);
    return MEMORY[0x1E4FBC860];
  }
  id v17 = RecentsListViewController.deleteAction(of:)((uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1C3769830;
  *(void *)(v18 + 32) = v17;
  *(void *)&long long v29 = v18;
  specialized Array._endMutation()();
  uint64_t v32 = v29;
  id v19 = *(void **)((char *)v2 + OBJC_IVAR___FTRecentsListViewController_featureFlags);
  type metadata accessor for SpamFlowController();
  uint64_t inited = swift_initStackObject();
  uint64_t v30 = v10;
  id v31 = &protocol witness table for RecentsCallItem;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
  _s15ConversationKit15RecentsCallItemVWOcTm_0((uint64_t)v13, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for RecentsCallItem);
  outlined init with take of Notice(&v29, inited + 16);
  *(void *)(inited + 56) = v19;
  id v22 = v17;
  id v23 = v19;
  ConversationKit::SpamFlowController::Flow v24 = SpamFlowController.determineFlow()();
  if (one-time initialization token for spam != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.spam);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v28 = 134217984;
    *(void *)&long long v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v26, v27, "spamFlowController: %ld", v28, 0xCu);
    MEMORY[0x1C87760E0](v28, -1, -1);
  }

  switch(v24)
  {
    case ConversationKit_SpamFlowController_Flow_groupIntiatorReport:
    case ConversationKit_SpamFlowController_Flow_knownContact:
      outlined destroy of RecentsCallItem((uint64_t)v13, (void (*)(void))type metadata accessor for RecentsCallItem);

      swift_setDeallocating();
      SpamFlowController.__deallocating_deinit();
      break;
    default:
      RecentsListViewController.groupReportAndBlockAction(of:)();
      MEMORY[0x1C87733A0]();
      if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_setDeallocating();
      SpamFlowController.__deallocating_deinit();

      outlined destroy of RecentsCallItem((uint64_t)v13, (void (*)(void))type metadata accessor for RecentsCallItem);
      break;
  }
  return v32;
}

void RecentsListViewController.editMenu.setter(uint64_t a1)
{
}

uint64_t key path getter for RecentsListViewController.avatarViewControllerDelegate : RecentsListViewController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x480))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsListViewController.avatarViewControllerDelegate : RecentsListViewController(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x488))(*a1);
}

id AvatarViewControllerDelegateWrapper.__allocating_init(hostingViewController:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return AvatarViewControllerDelegateWrapper.init(hostingViewController:)(a1);
}

void RecentsListViewController.avatarViewControllerDelegate.setter(uint64_t a1)
{
}

void (*RecentsListViewController.avatarViewControllerDelegate.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = RecentsListViewController.avatarViewControllerDelegate.getter();
  return RecentsListViewController.avatarViewControllerDelegate.modify;
}

void RecentsListViewController.avatarViewControllerDelegate.modify(void **a1, char a2)
{
}

void RecentsListViewController.collectionView.modify(void **a1, char a2, void (*a3)(void))
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

uint64_t RecentsListViewController.pseudonymForDeferredLinkDetailPresentation.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR___FTRecentsListViewController_pseudonymForDeferredLinkDetailPresentation);
  *id v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

id RecentsListViewController.viewDidFinishInitialLoad.getter()
{
  id result = objc_msgSend(v0, sel_isViewLoaded);
  if (result)
  {
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x318))();
    OUTLINED_FUNCTION_17_8();
    id v3 = (void *)(*(uint64_t (**)(void))(v2 + 168))();
    swift_release();
    OUTLINED_FUNCTION_1_12();
    char v5 = (*(uint64_t (**)(void))(v4 + 256))();

    return (id)(v5 & 1);
  }
  return result;
}

id RecentsListViewController.__allocating_init(recentCallProvider:detailControllerFactory:contactStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = objc_allocWithZone(v3);
  uint64_t v6 = OUTLINED_FUNCTION_39();
  return RecentsListViewController.init(recentCallProvider:detailControllerFactory:contactStore:)(v6, v7, a3);
}

id RecentsListViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void RecentsListViewController.init(coder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_13_26();
  a20 = v22;
  a21 = v23;
  ConversationKit::SpamFlowController::Flow v24 = v21;
  *(void *)&v21[OBJC_IVAR___FTRecentsListViewController_macCatalystDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v25 = (uint64_t)&v21[OBJC_IVAR___FTRecentsListViewController_indexPathForMenu];
  type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_150(v25, 1);
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___callCreator] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController_callItemBlockContactsDelegate] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController_videoMessagesSink] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController_linkCoordinator] = 0;
  uint64_t v26 = OBJC_IVAR___FTRecentsListViewController_faceTimeReportSpamManager;
  type metadata accessor for ReportSpamManager();
  a13 = 1;
  *(void *)&v24[v26] = ReportSpamManager.__allocating_init(idsServiceType:)(&a13);
  uint64_t v27 = OBJC_IVAR___FTRecentsListViewController_spamAlertBuilder;
  type metadata accessor for SpamAlertBuilder();
  *(void *)&v24[v27] = swift_allocObject();
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___videoMessagingReportSpamManager] = 0;
  id v28 = &v24[OBJC_IVAR___FTRecentsListViewController_presentScreenTimeShield];
  *id v28 = 0;
  v28[1] = 0;
  long long v29 = &v24[OBJC_IVAR___FTRecentsListViewController_setPreventsApplicationTerminationWhenModal];
  *long long v29 = TPNumberPadCharacter.rawValue.getter;
  v29[1] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController_headerView] = 0;
  v24[OBJC_IVAR___FTRecentsListViewController_headerViewIsPresented] = 0;
  uint64_t v30 = OBJC_IVAR___FTRecentsListViewController_featureFlags;
  *(void *)&v24[v30] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___linkController] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___dataSource] = 0;
  id v31 = &v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___supplementaryViewProvider];
  *id v31 = 0;
  v31[1] = 0;
  uint64_t v32 = &v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___cellProvider];
  *uint64_t v32 = 0;
  v32[1] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___collectionView] = 0;
  uint64_t v33 = type metadata accessor for UIBackgroundConfiguration();
  OUTLINED_FUNCTION_13_18(v33);
  uint64_t v34 = (uint64_t)&v24[OBJC_IVAR___FTRecentsListViewController_cellRegistrationForRecentsCallItemCalls];
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.CellRegistration<RecentsCollectionViewCell, RecentsCallItem>);
  __swift_storeEnumTagSinglePayload(v34, 1, 1, v35);
  OUTLINED_FUNCTION_53_4(OBJC_IVAR___FTRecentsListViewController_cellRegistrationForRecentsSensitveCallItemCalls);
  OUTLINED_FUNCTION_53_4(OBJC_IVAR___FTRecentsListViewController_cellRegistrationForRecentsCallItemOngoingCalls);
  OUTLINED_FUNCTION_53_4(OBJC_IVAR___FTRecentsListViewController_cellRegistrationForRecentsCallItemLinks);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<UICollectionViewListCell>);
  OUTLINED_FUNCTION_13_18(v36);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICollectionView.SupplementaryRegistration<RecentsHeaderButtonsView>);
  OUTLINED_FUNCTION_13_18(v37);
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___deleteButtonItem] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___flexibleSpaceButtonItem] = 0;
  uint64_t v38 = type metadata accessor for UICollectionLayoutListConfiguration();
  OUTLINED_FUNCTION_13_18(v38);
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___editMenu] = 0;
  *(void *)&v24[OBJC_IVAR___FTRecentsListViewController____lazy_storage___avatarViewControllerDelegate] = 0;
  id v39 = &v24[OBJC_IVAR___FTRecentsListViewController_pseudonymForDeferredLinkDetailPresentation];
  *id v39 = 0;
  v39[1] = 0;
  uint64_t v40 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_13_18(v40);
  uint64_t v41 = OBJC_IVAR___FTRecentsListViewController_onboardingController;
  *(void *)&v24[v41] = objc_msgSend(objc_allocWithZone((Class)CNKCNSharedProfileOnboardingController), sel_init);
  OUTLINED_FUNCTION_150((uint64_t)&v24[OBJC_IVAR___FTRecentsListViewController_joinCallThrottlingIndexPath], 1);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

#error "1C313703C: call analysis failed (funcsize=7)"

Swift::Void __swiftcall RecentsListViewController.setupTitle()()
{
  id v1 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  unint64_t v2 = OUTLINED_FUNCTION_3_19(35);
  v3.super.Class isa = v1;
  uint64_t v7 = OUTLINED_FUNCTION_2_29(v2, v4, v5, v6, v3);
  uint64_t v9 = v8;

  outlined bridged method (mbnn) of @objc UIViewController.title.setter(v7, v9, v0, (SEL *)&selRef_setTitle_);
}

Swift::Void __swiftcall RecentsListViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  OUTLINED_FUNCTION_161();
  (*(void (**)(void))(v3 + 792))();
  OUTLINED_FUNCTION_2_10();
  (*(void (**)(void))(v4 + 304))();
  swift_release();
  OUTLINED_FUNCTION_1_12();
  (*(void (**)(void *__return_ptr))(v5 + 424))(v9);
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  uint64_t v6 = OUTLINED_FUNCTION_163();
  v7(v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for RecentsListViewController(0);
  objc_msgSendSuper2(&v8, sel_viewWillDisappear_, a1);
  RecentsListViewController.tipKitStartObservation()();
}

id RecentsListViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void RecentsListViewController.init(nibName:bundle:)()
{
}

id RecentsListViewController.__deallocating_deinit(uint64_t a1)
{
  return OUTLINED_FUNCTION_87_0(a1, (uint64_t (*)(void))type metadata accessor for RecentsListViewController);
}

uint64_t RecentItemContactsViewControllerDelegate.callItemToBlock.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15ConversationKit15RecentsCallItemVWOcTm_0(v1 + OBJC_IVAR____TtC15ConversationKit40RecentItemContactsViewControllerDelegate_callItemToBlock, a1, (void (*)(void))type metadata accessor for RecentsCallItem);
}

id RecentItemContactsViewControllerDelegate.__allocating_init(_:faceTimeReportSpamManager:)()
{
  OUTLINED_FUNCTION_4_15();
  id v1 = objc_allocWithZone(v0);
  OUTLINED_FUNCTION_30_15();
  return RecentItemContactsViewControllerDelegate.init(_:faceTimeReportSpamManager:)();
}

id RecentItemContactsViewControllerDelegate.init(_:faceTimeReportSpamManager:)()
{
  OUTLINED_FUNCTION_4_15();
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v3, (uint64_t)&v1[OBJC_IVAR____TtC15ConversationKit40RecentItemContactsViewControllerDelegate_callItemToBlock], (void (*)(void))type metadata accessor for RecentsCallItem);
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit40RecentItemContactsViewControllerDelegate_faceTimeReportSpamManager] = v0;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for RecentItemContactsViewControllerDelegate(0);
  id v4 = objc_msgSendSuper2(&v6, sel_init);
  outlined destroy of RecentsCallItem(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
  return v4;
}

Swift::Void __swiftcall RecentItemContactsViewControllerDelegate.contactViewController(_:didExecuteBlockAndReportContactAction:)(CNContactViewController_optional *_, CNContact_optional didExecuteBlockAndReportContactAction)
{
}

void specialized ReportSpamManager.reportFaceTimeCallSpam<A>(call:)()
{
  uint64_t v1 = ReportSpamManager.fetchLocalFaceTimeHandles()();
  specialized Collection.first.getter(v1);
  if (!v2)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static ReportSpamManager.logger);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v14))
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    char v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    __src[0] = v16;
    *(_DWORD *)char v15 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v17 = Set.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, __src);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v13, v14, "Could not report video message spam for call due to zero registered facetime service IMAccount %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v16, -1, -1);
    char v20 = v15;
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  RecentsCallItem.spamModel(with:)();
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v3 = ReportSpamManager.SpamDataModel.mapToDict.getter();
  outlined release of ReportSpamManager.SpamDataModel((uint64_t)__src);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static ReportSpamManager.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    __dst[0] = v8;
    *(_DWORD *)id v7 = 136315138;
    if (v3)
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyHashable : Any]);
      uint64_t v9 = String.init<A>(reflecting:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v5, v6, "ReportSpamManager: report spam, model.dictionary: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v8, -1, -1);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v21 = *(id *)(v0 + 16);
  if (v3)
  {
    v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v22.super.Class isa = 0;
  }
  unsigned int v23 = objc_msgSend(v21, sel_reportSpamMessage_, v22.super.isa, v29, __dst[0]);

  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v13, v24);
  if (v23)
  {
    if (v25)
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      os_log_type_t v27 = v24;
      id v28 = "ReportSpamManager: report spam was sent successfully";
LABEL_23:
      _os_log_impl(&dword_1C2F90000, v13, v27, v28, v26, 2u);
      char v20 = v26;
LABEL_24:
      MEMORY[0x1C87760E0](v20, -1, -1);
    }
  }
  else if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    os_log_type_t v27 = v24;
    id v28 = "ReportSpamManager: report spam was rejected for some reason";
    goto LABEL_23;
  }
}

void RecentItemContactsViewControllerDelegate.init()()
{
}

id RecentItemContactsViewControllerDelegate.__deallocating_deinit(uint64_t a1)
{
  return OUTLINED_FUNCTION_87_0(a1, (uint64_t (*)(void))type metadata accessor for RecentItemContactsViewControllerDelegate);
}

id RecentsListViewController.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void closure #1 in closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemCalls()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    id v7 = (void *)v6;
    RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(a1, a3, 0);
  }
}

void RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(uint64_t a1, uint64_t a2, int a3)
{
  objc_super v4 = v3;
  LODWORD(v105) = a3;
  uint64_t v7 = type metadata accessor for RecentsCallItem(0);
  unint64_t v103 = *(uint64_t (**)(uint64_t))(v7 - 8);
  uint64_t v8 = *((void *)v103 + 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = type metadata accessor for RecentsCallItemType(0);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RecentCallRecentItemMetadata(0);
  MEMORY[0x1F4188790](v12);
  os_log_type_t v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit15RecentsCallItemVWOcTm_0(a2, (uint64_t)v11, (void (*)(void))type metadata accessor for RecentsCallItemType);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    unint64_t v18 = type metadata accessor for RecentsCallItemType;
    uint64_t v19 = (uint64_t)v11;
    goto LABEL_37;
  }
  uint64_t v104 = a2;
  _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v11, (uint64_t)v14, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
  uint64_t v15 = *(int *)(v12 + 52);
  uint64_t v16 = *(void **)&v14[v15];
  if (!v16)
  {
LABEL_36:
    unint64_t v18 = type metadata accessor for RecentCallRecentItemMetadata;
    uint64_t v19 = (uint64_t)v14;
    goto LABEL_37;
  }
  if (v105)
  {
    uint64_t v17 = v16;
    goto LABEL_13;
  }
  char v20 = self;
  id v101 = v16;
  uint64_t v17 = (uint64_t)objc_msgSend(v20, sel_isCommunicationSafetyEnabled);
  if (v17)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v17 = (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 872))();
    if (v17)
    {
      uint64_t v17 = (uint64_t)objc_msgSend(v101, sel_isSensitive);
      if (v17)
      {
        id v21 = objc_msgSend(v101, sel_messageUUID);
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        MEMORY[0x1F4188790](v22 - 8);
        os_log_type_t v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v21)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v25 = 0;
        }
        else
        {
          uint64_t v25 = 1;
        }
        uint64_t v94 = type metadata accessor for UUID();
        __swift_storeEnumTagSinglePayload((uint64_t)v24, v25, 1, v94);
        uint64_t v95 = (uint64_t)v4 + OBJC_IVAR___FTRecentsListViewController_messageUUIDForDeferredPresentation;
        swift_beginAccess();
        outlined assign with take of Participant?((uint64_t)v24, v95, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        swift_endAccess();
        RecentsListViewController.showSafetyIntervention()();

        goto LABEL_36;
      }
    }
  }
LABEL_13:
  uint64_t v99 = v15;
  uint64_t v100 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v101 = v16;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x318))(v17);
  uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v26 + 192))();
  swift_release();
  uint64_t v28 = v104;
  if (v27)
  {
    uint64_t v29 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v30 = *(void (**)(uint64_t, void (*)(), uint64_t))(*(void *)v27 + 168);
    swift_retain();
    v30(v28, partial apply for closure #1 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:), v29);
    swift_release_n();
    swift_release();
  }
  uint64_t v102 = v4;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v31 - 8);
  uint64_t v33 = (char *)&v96 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v33, a1, v34);
  __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v34);
  v106[0] = 1;
  id v35 = objc_allocWithZone((Class)type metadata accessor for VideoMessagePlayerViewModel(0));
  VideoMessagePlayerViewModel.init(videoMessageURL:playerSpaciality:)();
  uint64_t v37 = v36;
  id v38 = objc_msgSend(self, sel_conversationKit);
  v107._object = (void *)0xE000000000000000;
  v39._object = (void *)0x80000001C379BC40;
  v39._countAndFlagsBits = 0xD000000000000018;
  v40.value._countAndFlagsBits = 0x61737265766E6F43;
  v40.value._object = (void *)0xEF74694B6E6F6974;
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  v107._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v39, v40, (NSBundle)v38, v41, v107);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1C3769620;
  id v43 = (uint64_t *)(v28 + *(int *)(v7 + 20));
  uint64_t v44 = *v43;
  unint64_t v45 = v43[1];
  *(void *)(v42 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v42 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (v45) {
    uint64_t v46 = v44;
  }
  else {
    uint64_t v46 = 0;
  }
  if (v45) {
    unint64_t v47 = v45;
  }
  else {
    unint64_t v47 = 0xE000000000000000;
  }
  *(void *)(v42 + 32) = v46;
  *(void *)(v42 + 40) = v47;
  swift_bridgeObjectRetain();
  uint64_t v48 = String.init(format:_:)();
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  id v51 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v37) + 0x188))(v48, v50);
  if (v105)
  {
    id v52 = objc_msgSend(self, sel_isCommunicationSafetyEnabled);
    uint64_t v54 = (uint64_t)v100;
    id v53 = v101;
    id v55 = &selRef_trailingBarAlpha;
    if (v52)
    {
      (*(void (**)(uint64_t))((*v51 & *v37) + 0x2A8))(1);
      id v52 = 0;
    }
  }
  else
  {
    uint64_t v54 = (uint64_t)v100;
    id v52 = *(id *)&v14[v99];
    id v53 = v101;
    id v55 = &selRef_trailingBarAlpha;
    if (v52) {
      id v52 = objc_msgSend(v52, sel_isSensitive);
    }
  }
  uint64_t v56 = v104;
  uint64_t v100 = v14;
  (*(void (**)(id))((*v51 & *v37) + 0x278))(v52);
  if ([v53 v55[476]])
  {
    if (objc_msgSend(self, sel_isCommunicationSafetyEnabled)) {
      (*(void (**)(void))((*v51 & *v37) + 0x218))(0);
    }
  }
  uint64_t v57 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v96 = type metadata accessor for RecentsCallItem;
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v56, v54, (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v58 = *((unsigned __int8 *)v103 + 80);
  uint64_t v105 = v58 | 7;
  uint64_t v97 = v8;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = v57;
  unint64_t v103 = type metadata accessor for RecentsCallItem;
  _s15ConversationKit15RecentsCallItemVWObTm_0(v54, v59 + ((v58 + 24) & ~v58), (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v60 = *v51 & *v37;
  uint64_t v61 = v56;
  uint64_t v62 = v60 + 448;
  id v63 = *(uint64_t (**)(unsigned char *))(v60 + 448);
  swift_retain();
  uint64_t v64 = (void (*)(unsigned char *, void))v63(v106);
  *(void *)(v65 + 80) = partial apply for closure #2 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:);
  *(void *)(v65 + 88) = v59;
  swift_release();
  v64(v106, 0);
  swift_release();
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v61, v54, (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v66 = (v58 + 16) & ~v58;
  v97 += v66;
  uint64_t v67 = swift_allocObject();
  char v68 = v103;
  _s15ConversationKit15RecentsCallItemVWObTm_0(v54, v67 + v66, (void (*)(void))v103);
  uint64_t v98 = v63;
  uint64_t v99 = v62;
  id v69 = (void (*)(unsigned char *, void))v63(v106);
  *(void *)(v70 + 96) = partial apply for closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:);
  *(void *)(v70 + 104) = v67;
  swift_release();
  v69(v106, 0);
  uint64_t v71 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  unint64_t v72 = (void (*)(unsigned char *, void))v63(v106);
  *uint64_t v73 = partial apply for closure #4 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:);
  v73[1] = (void (*)())v71;
  swift_release();
  v72(v106, 0);
  swift_release();
  uint64_t v74 = v104;
  id v75 = v96;
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v104, v54, (void (*)(void))v96);
  uint64_t v76 = swift_allocObject();
  _s15ConversationKit15RecentsCallItemVWObTm_0(v54, v76 + v66, (void (*)(void))v68);
  objc_super v77 = *(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v37) + 0x1F0);
  uint64_t v78 = (void (*)(unsigned char *, void))v77(v106);
  uint64_t *v79 = partial apply for closure #5 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:);
  v79[1] = (uint64_t (*)())v76;
  swift_release();
  v78(v106, 0);
  uint64_t v80 = swift_allocObject();
  unint64_t v81 = v102;
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v82 = v81;
  uint64_t v83 = (void (*)(unsigned char *, void))v77(v106);
  *(void *)(v84 + 16) = partial apply for closure #6 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:);
  *(void *)(v84 + 24) = v80;
  swift_release();
  v83(v106, 0);
  swift_release();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakDestroy();
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v74, v54, (void (*)(void))v75);
  uint64_t v85 = swift_allocObject();
  _s15ConversationKit15RecentsCallItemVWObTm_0(v54, v85 + v66, (void (*)(void))v103);
  uint64_t v86 = (void (*)(unsigned char *, void))v98(v106);
  *(void *)(v87 + 48) = partial apply for closure #8 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:);
  *(void *)(v87 + 56) = v85;
  swift_release();
  v86(v106, 0);
  objc_allocWithZone((Class)type metadata accessor for VideoMessagePlayerViewController());
  uint64_t v88 = v37;
  id v89 = VideoMessagePlayerViewController.init(viewModel:)(v88);
  if (static Platform.current.getter() == 1)
  {
    objc_msgSend(v89, sel_setModalPresentationStyle_, 0);
    objc_msgSend(v82, sel_presentViewController_animated_completion_, v89, 1, 0);

    unint64_t v18 = type metadata accessor for RecentCallRecentItemMetadata;
    uint64_t v19 = (uint64_t)v100;
  }
  else
  {
    id v90 = objc_msgSend(v82, sel_navigationController);
    uint64_t v91 = (uint64_t)v100;
    id v92 = v101;
    if (!v90)
    {
      outlined destroy of RecentsCallItem((uint64_t)v100, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);

      return;
    }
    uint64_t v93 = v90;
    objc_msgSend(v90, sel_pushViewController_animated_, v89, 1);

    unint64_t v18 = type metadata accessor for RecentCallRecentItemMetadata;
    uint64_t v19 = v91;
  }
LABEL_37:
  outlined destroy of RecentsCallItem(v19, (void (*)(void))v18);
}

void closure #2 in closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemCalls()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    RecentsListViewController.presentVoicemail(url:and:)(a1, a3);
  }
}

uint64_t RecentsListViewController.presentVoicemail(url:and:)(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = type metadata accessor for RecentsCallItemType(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit15RecentsCallItemVWOcTm_0(a2, (uint64_t)v5, (void (*)(void))type metadata accessor for RecentsCallItemType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = outlined destroy of RecentsCallItem((uint64_t)v5, (void (*)(void))type metadata accessor for RecentsCallItemType);
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    MEMORY[0x1F4188790](v8);
    unint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
    MEMORY[0x1F4188790](v12 - 8);
    unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v15 = (void *)RecentsCallItem.messageIndicatorViewModel.getter();
    if (!v15)
    {
      __swift_storeEnumTagSinglePayload((uint64_t)&v37 - v14, 1, 1, v8);
      return outlined destroy of SystemUpdateNotice?((uint64_t)&v37 - v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    }
    uint64_t v16 = v15;
    uint64_t v42 = &v37;
    id v17 = objc_msgSend(v15, sel_messageUUID);

    MEMORY[0x1F4188790](v18);
    if (v17)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = 1;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)&v37 - v14, v19, 1, v8);
    outlined init with take of ConversationControlsRecipe?((uint64_t)&v37 - v14, (uint64_t)&v37 - v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload((uint64_t)&v37 - v14, 1, v8) == 1) {
      return outlined destroy of SystemUpdateNotice?((uint64_t)&v37 - v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, (char *)&v37 - v14, v8);
    uint64_t v20 = type metadata accessor for URL();
    Swift::String v41 = &v37;
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(void *)(v21 + 64);
    MEMORY[0x1F4188790](v20);
    unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
    Swift::String_optional v40 = (char *)&v37 - v23;
    os_log_type_t v24 = self;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v26 = objc_msgSend(v24, sel_phoneAppVoicemailURLForMessageUUID_, isa);

    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
    unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v31 = (char *)&v37 - v30;
    if (v26)
    {
      Swift::String v39 = &v37;
      MEMORY[0x1F4188790](v28);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = v21;
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      v32(v31, (char *)&v37 - v23, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v20);
      if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v20) != 1)
      {
        uint64_t v33 = v40;
        v32(v40, v31, v20);
        URL._bridgeToObjectiveC()(v34);
        uint64_t v36 = v35;
        uint64_t v43 = 0;
        TUOpenURLWithError();

        (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v20);
        return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)&v37 - v30, 1, 1, v20);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return outlined destroy of SystemUpdateNotice?((uint64_t)v31, &demangling cache variable for type metadata for URL?);
  }
  return result;
}

void closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemOngoingCalls()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RecentsCallItemType(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x1C8776240](a4 + 16);
  if (v13)
  {
    unint64_t v14 = (void *)v13;
    _s15ConversationKit15RecentsCallItemVWOcTm_0(a3, (uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItemType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v61 = (UIView *)a1;
      outlined destroy of RecentsCallItem((uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItemType);
      uint64_t v15 = type metadata accessor for UUID();
      uint64_t v16 = *(void *)(v15 - 8);
      MEMORY[0x1F4188790](v15);
      uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
      uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      RecentsCallItemType.conversationUUID()(v20, v23, v24, v25, v26, v27, v28, v29, v53, v54, (uint64_t)v55, (uint64_t)v56, v57, v58, (uint64_t)v59, (uint64_t)v60, (uint64_t)v61, v62[0]);
      if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v15) == 1)
      {

        outlined destroy of SystemUpdateNotice?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v22, v15);
        id v30 = *(id *)((char *)v14 + OBJC_IVAR___FTRecentsListViewController_conversationManager);
        uint64_t v31 = (void *)TUConversationManager.conversation(with:)((uint64_t)v18);

        if (v31)
        {
          uint64_t v58 = v15;
          uint64_t v59 = v18;
          uint64_t v57 = v16;
          uint64_t v60 = &v53;
          uint64_t v32 = (void *)MEMORY[0x1E4FBC8C8];
          (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v14) + 0x378))();
          uint64_t v33 = type metadata accessor for UIBackgroundConfiguration();
          __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v33);
          uint64_t v34 = v61;
          uint64_t v35 = MEMORY[0x1C8773CE0](v9);
          uint64_t v36 = v32;
          uint64_t v37 = *(uint64_t (**)(void))((*v32 & (uint64_t)v34->super.super.isa) + 0x80);
          uint64_t v38 = (void *)((uint64_t (*)(uint64_t))v37)(v35);

          if (!v38)
          {
            Swift::String v39 = *(void **)((char *)v14 + OBJC_IVAR___FTRecentsListViewController_avatarViewControllerSettings);
            if (v39)
            {
              id v40 = objc_allocWithZone(MEMORY[0x1E4F1BB40]);
              id v56 = v39;
              id v41 = objc_msgSend(v40, sel_initWithSettings_, v56);
              uint64_t v42 = (void *)(*(uint64_t (**)(void))((*v36 & *v14) + 0x480))();
              objc_msgSend(v41, sel_setObjectViewControllerDelegate_, v42);

              uint64_t v43 = *(void (**)(id))((*v36 & (uint64_t)v34->super.super.isa) + 0x88);
              uint64_t v54 = (*v36 & (uint64_t)v34->super.super.isa) + 136;
              id v55 = v43;
              id v44 = v41;
              v55(v41);
            }
          }
          uint64_t v45 = v37();
          if (v45)
          {
            uint64_t v46 = (void *)v45;
            (*(void (**)(uint64_t *__return_ptr))((*v36 & *v14) + 0x1A8))(v62);
            uint64_t v47 = v63;
            uint64_t v48 = v64;
            __swift_project_boxed_opaque_existential_1(v62, v63);
            (*(void (**)(void *, uint64_t, uint64_t))(v48 + 56))(v31, v47, v48);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
            objc_msgSend(v46, sel_setContacts_, isa);
          }
          RecentsCollectionViewCell.configure(with:)(a3);
          uint64_t v50 = (void *)(*(uint64_t (**)(void))((*v36 & (uint64_t)v34->super.super.isa) + 0x98))();
          if (v50)
          {
            id v51 = v50;
            objc_msgSend(v50, sel_addTarget_action_forControlEvents_, v14, sel_didSelectAccessoryViewForOngoingCallWithSender_, 64);
          }
          id v52 = (void *)(*(uint64_t (**)(void))((*v36 & (uint64_t)v34->super.super.isa) + 0xB0))();
          objc_msgSend(v52, sel_addTarget_action_forControlEvents_, v14, sel_didSelectAccessoryViewForRecentCallWithSender_, 64);

          RecentsListViewController.prepareSubviewsForFilter(view:)(v34);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v58);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        }
      }
    }
    else
    {

      outlined destroy of RecentsCallItem((uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItemType);
    }
  }
}

void closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemLinks()(UIView *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x1C8776240](a4 + 16);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    RecentsCallItem.hasURL.getter();
    if (v12)
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
      (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v11) + 0x378))();
      uint64_t v14 = type metadata accessor for UIBackgroundConfiguration();
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v14);
      MEMORY[0x1C8773CE0](v9);
      RecentsCollectionViewCell.configure(with:)(a3);
      unsigned int v15 = objc_msgSend(*(id *)((char *)v11 + OBJC_IVAR___FTRecentsListViewController_featureFlags), sel_recentsCallTapTargetsEnabled);
      uint64_t v16 = (void *)(*(uint64_t (**)(void))((*v13 & (uint64_t)a1->super.super.isa) + 0xB0))();
      uint64_t v17 = v16;
      uint64_t v18 = &selRef_didSelectAccessoryViewForLinkWithSender_;
      if (v15) {
        uint64_t v18 = &selRef_didSelectAccessoryViewForRecentCallWithSender_;
      }
      objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v11, *v18, 64);

      RecentsListViewController.prepareSubviewsForFilter(view:)(a1);
    }
  }
}

void RecentsListViewController.deleteAllRecents(_:)()
{
  OUTLINED_FUNCTION_121();
  uint64_t v22 = v1;
  uint64_t v23 = v2;
  uint64_t v3 = v0;
  OUTLINED_FUNCTION_0_20();
  (*(void (**)(void *__return_ptr))(v4 + 424))(v21);
  uint64_t v5 = v21[5];
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = OUTLINED_FUNCTION_48_1();
  uint64_t v8 = v7(v6);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  RecentsListViewController.linkController.getter();
  OUTLINED_FUNCTION_2_10();
  uint64_t v11 = (*(uint64_t (**)(void))(v10 + 272))();
  swift_release();
  v21[0] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  specialized Set.init<A>(_:)();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  OUTLINED_FUNCTION_5_2();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationKit);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134218496;
    uint64_t v16 = *(void *)(v9 + 16);
    swift_bridgeObjectRelease();
    v21[0] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    uint64_t v17 = *(void *)(v11 + 16);
    swift_bridgeObjectRelease();
    v21[0] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2048;
    uint64_t v18 = *(void *)(v5 + 16);
    swift_release();
    v21[0] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2F90000, v13, v14, "Deleting %ld call items, %ld link items. Total %ld items", (uint8_t *)v15, 0x20u);
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  if (*(void *)(v11 + 16))
  {
    RecentsListViewController.linkController.getter();
    id v19 = v3;
    swift_retain();
    id v20 = v19;
    specialized RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    doRemoveAllRecents #1 () in RecentsListViewController.deleteAllRecents(_:)();
    swift_release();
  }
  OUTLINED_FUNCTION_2_22();
}

uint64_t doRemoveAllRecents #1 () in RecentsListViewController.deleteAllRecents(_:)()
{
  OUTLINED_FUNCTION_4_15();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  os_log_type_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationKit);
  uint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v4))
  {
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_168(&dword_1C2F90000, v5, v6, "Starting links deletion");
    OUTLINED_FUNCTION_3();
  }

  RecentsListViewController.linkController.getter();
  OUTLINED_FUNCTION_17_8();
  (*(void (**)(void))(v7 + 288))();
  swift_release();
  uint64_t v8 = (void *)Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_107(v9))
  {
    *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
    OUTLINED_FUNCTION_168(&dword_1C2F90000, v10, v11, "Starting recent calls deletion");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_146();
  (*(void (**)(void *__return_ptr))(v12 + 424))(v21);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v13 = OUTLINED_FUNCTION_162();
  v14(v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_105(v16))
  {
    uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1C2F90000, v15, v2, "Starting dataSource deletion", v17, 2u);
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_158();
  v18();
  OUTLINED_FUNCTION_2_10();
  (*(void (**)(uint64_t, void (*)(), void))(v19 + 288))(v0, closure #1 in doRemoveAllRecents #1 () in RecentsListViewController.deleteAllRecents(_:), 0);
  return swift_release();
}

void closure #1 in doRemoveAllRecents #1 () in RecentsListViewController.deleteAllRecents(_:)()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationKit);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v2 = 0;
    _os_log_impl(&dword_1C2F90000, oslog, v1, "Finished deleting all items from dataSource", v2, 2u);
    MEMORY[0x1C87760E0](v2, -1, -1);
  }
}

uint64_t closure #1 in RecentsListViewController.deleteAllRecents(_:)(uint64_t result)
{
  if (result) {
    return doRemoveAllRecents #1 () in RecentsListViewController.deleteAllRecents(_:)();
  }
  return result;
}

void RecentsListViewController.willEnterForegroundNotification(_:)()
{
  os_log_type_t v1 = v0;
  if (objc_msgSend(v0, sel_isViewLoaded))
  {
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.videoMessaging);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C2F90000, v3, v4, "RecentsListViewController Entering foreground", v5, 2u);
      MEMORY[0x1C87760E0](v5, -1, -1);
    }

    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v7 = *(void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x318))();
    (*(void (**)(void))(v7 + 296))();
    uint64_t v8 = swift_release();
    (*(void (**)(void *__return_ptr, uint64_t))((*v6 & *v1) + 0x1A8))(v11, v8);
    uint64_t v9 = v12;
    uint64_t v10 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v10 + 88))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    RecentsListViewController.handleDeferredVideoMessagePresentation()();
    RecentsListViewController.updateLeftBarButton()();
  }
}

uint64_t RecentsListViewController.handleDeferredVideoMessagePresentation()()
{
  os_log_type_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<[RecentsCallItem], Never>, RecentsCallItem>);
  uint64_t v63 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v62 = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (uint64_t)v0 + OBJC_IVAR___FTRecentsListViewController_messageUUIDForDeferredPresentation;
  swift_beginAccess();
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?(v9, (uint64_t)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4) == 1) {
    return outlined destroy of SystemUpdateNotice?((uint64_t)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v61((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  if (!objc_msgSend(v0, sel_isViewLoaded)) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v59 = v5 + 32;
  uint64_t v55 = v2;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.videoMessaging);
  MEMORY[0x1F4188790](v12);
  uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v60((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  LODWORD(v57) = v14;
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v56 = v5;
  uint64_t v58 = v5 + 16;
  if (v15)
  {
    uint64_t v53 = v49;
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = (void (**)(char *, uint8_t *))swift_slowAlloc();
    id v52 = v17;
    uint64_t v50 = (char *)v49;
    uint64_t v65 = v17;
    id v51 = v16;
    *(_DWORD *)os_log_type_t v16 = 136315138;
    uint64_t v54 = (uint64_t)(v16 + 4);
    MEMORY[0x1F4188790](v17);
    uint64_t v18 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v60(v18, (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v4);
    uint64_t v19 = specialized >> prefix<A>(_:)((uint64_t)v18);
    unint64_t v21 = v20;
    outlined destroy of SystemUpdateNotice?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, (uint64_t *)&v65);
    uint64_t v5 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v54 = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v22((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    uint64_t v23 = v51;
    _os_log_impl(&dword_1C2F90000, v13, (os_log_type_t)v57, "Waiting for video message to load. uuid %s", v51, 0xCu);
    uint64_t v24 = v52;
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v24, -1, -1);
    MEMORY[0x1C87760E0](v23, -1, -1);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v54 = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v25((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }

  uint64_t v26 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CompactMap<AnyPublisher<[RecentsCallItem], Never>, RecentsCallItem>, NSRunLoop>);
  uint64_t v53 = v49;
  uint64_t v27 = (void (**)(char *, uint8_t *))*((void *)v26 - 1);
  id v51 = v26;
  id v52 = v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v57 = (char *)v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x318))(v28);
  uint64_t v31 = (void (**)(char *, uint8_t *))(*(uint64_t (**)(uint64_t))(*(void *)v30 + 160))(v30);
  uint64_t v32 = swift_release();
  uint64_t v65 = v31;
  MEMORY[0x1F4188790](v32);
  uint64_t v50 = (char *)((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (char *)((char *)v49 - v50);
  v60((char *)((char *)v49 - v50), (char *)((char *)v49 - v50), v4);
  uint64_t v34 = *(unsigned __int8 *)(v5 + 80);
  v49[1] = v34 | 7;
  uint64_t v35 = swift_allocObject();
  v61((char *)(v35 + ((v34 + 16) & ~v34)), v33, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[RecentsCallItem], Never>);
  type metadata accessor for RecentsCallItem(0);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<[RecentsCallItem], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[RecentsCallItem], Never>);
  uint64_t v36 = v62;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v65 = (void (**)(char *, uint8_t *))objc_msgSend(self, sel_mainRunLoop);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  v49[0] = v49;
  MEMORY[0x1F4188790](v37 - 8);
  Swift::String v39 = (char *)v49 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v39, 1, 1, v40);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<[RecentsCallItem], Never>, RecentsCallItem> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<[RecentsCallItem], Never>, RecentsCallItem>);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  uint64_t v41 = v55;
  Publisher.receive<A>(on:options:)();
  outlined destroy of SystemUpdateNotice?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v41);
  uint64_t v42 = swift_allocObject();
  uint64_t v43 = swift_unknownObjectWeakInit();
  MEMORY[0x1F4188790](v43);
  id v44 = (char *)((char *)v49 - v50);
  v60((char *)((char *)v49 - v50), (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v42;
  v61((char *)(v45 + ((v34 + 24) & ~v34)), v44, v4);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.CompactMap<AnyPublisher<[RecentsCallItem], Never>, RecentsCallItem>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CompactMap<AnyPublisher<[RecentsCallItem], Never>, RecentsCallItem>, NSRunLoop>);
  uint64_t v46 = v51;
  uint64_t v47 = v57;
  uint64_t v48 = Publisher<>.sink(receiveValue:)();
  swift_release();
  v52[1](v47, v46);
  RecentsListViewController.videoMessagesSink.setter(v48);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))((char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
}

id RecentsListViewController.didEnterBackgroundNotification(_:)()
{
  os_log_type_t v1 = v0;
  id result = objc_msgSend(v0, sel_isViewLoaded);
  if (result)
  {
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.videoMessaging);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1C2F90000, v4, v5, "RecentsListViewController didEnter background", v6, 2u);
      MEMORY[0x1C87760E0](v6, -1, -1);
    }

    uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v8 = *(void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x318))();
    (*(void (**)(void))(v8 + 304))();
    uint64_t v9 = swift_release();
    (*(void (**)(void *__return_ptr, uint64_t))((*v7 & *v1) + 0x1A8))(v12, v9);
    uint64_t v10 = v13;
    uint64_t v11 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return (id)RecentsListViewController.clearDeferredVideoMessagePresetation()();
  }
  return result;
}

uint64_t RecentsListViewController.clearDeferredVideoMessagePresetation()()
{
  RecentsListViewController.videoMessagesSink.setter(0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR___FTRecentsListViewController_messageUUIDForDeferredPresentation;
  swift_beginAccess();
  outlined assign with take of Participant?((uint64_t)v3, v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

Swift::Void __swiftcall RecentsListViewController.didSelectAccessoryViewForOngoingCall(sender:)(UIButton *sender)
{
}

uint64_t RecentsListViewController.collectionViewIndexPath(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  OUTLINED_FUNCTION_0_20();
  v4 += 108;
  uint64_t v5 = *v4;
  uint64_t v6 = (void *)(*v4)();
  objc_msgSend(a1, sel_convertPoint_toCoordinateSpace_, v6, 0.0, 0.0);
  double v8 = v7;
  double v10 = v9;

  uint64_t v11 = (void *)v5();
  id v12 = objc_msgSend(v11, sel_indexPathForItemAtPoint_, v8, v10);

  if (v12)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1;
  }
  uint64_t v14 = type metadata accessor for IndexPath();
  return __swift_storeEnumTagSinglePayload(a2, v13, 1, v14);
}

void RecentsListViewController.joinCall(at:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  uint64_t v6 = OUTLINED_FUNCTION_8(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_62();
  RecentsListViewController.recentsCallItem(at:)();
  OUTLINED_FUNCTION_33_0(v0, 1, v7);
  if (v22)
  {
    outlined destroy of SystemUpdateNotice?(v0, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    goto LABEL_20;
  }
  uint64_t v81 = v2;
  _s15ConversationKit15RecentsCallItemVWObTm_0(v0, v2, (void (*)(void))type metadata accessor for RecentsCallItem);
  uint64_t v83 = v1;
  double v9 = (void *)(v1 + OBJC_IVAR___FTRecentsListViewController_joinCallThrottlingIndexPath);
  OUTLINED_FUNCTION_2();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v80 = (char *)v71;
  uint64_t v11 = OUTLINED_FUNCTION_8(v10);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = type metadata accessor for IndexPath();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v76 = *(void *)(v16 + 16);
  objc_super v77 = (void (*)(void, void))v4;
  OUTLINED_FUNCTION_61_1();
  v17();
  OUTLINED_FUNCTION_60_2((uint64_t)v71 - v14);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (IndexPath?, IndexPath?));
  double v79 = v71;
  uint64_t v19 = OUTLINED_FUNCTION_8(v18);
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_118();
  uint64_t v21 = v4 + *(int *)(v20 + 56);
  uint64_t v78 = (uint64_t)v9;
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?((uint64_t)v9, v4, &demangling cache variable for type metadata for IndexPath?);
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?((uint64_t)v71 - v14, v21, &demangling cache variable for type metadata for IndexPath?);
  uint64_t v23 = OUTLINED_FUNCTION_33_0(v4, 1, v15);
  uint64_t v82 = v13;
  if (!v22)
  {
    double v9 = v71;
    MEMORY[0x1F4188790](v23);
    uint64_t v24 = OUTLINED_FUNCTION_101();
    outlined init with copy of RecentCallDetailControllerFactoryProtocol?(v24, v25, v26);
    uint64_t v28 = OUTLINED_FUNCTION_33_0(v21, 1, v15);
    if (!v27)
    {
      id v75 = v71;
      MEMORY[0x1F4188790](v28);
      OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_30_15();
      OUTLINED_FUNCTION_63_0();
      v30();
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1F418BF80]);
      LODWORD(v74) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v31 = *(void (**)(void))(v16 + 8);
      OUTLINED_FUNCTION_110_0();
      v31();
      outlined destroy of SystemUpdateNotice?((uint64_t)v71 - v14, &demangling cache variable for type metadata for IndexPath?);
      OUTLINED_FUNCTION_110_0();
      v31();
      outlined destroy of SystemUpdateNotice?(v4, &demangling cache variable for type metadata for IndexPath?);
      OUTLINED_FUNCTION_56_3();
      uint64_t v13 = v82;
      if (v74) {
        goto LABEL_14;
      }
LABEL_19:
      MEMORY[0x1F4188790](v32);
      uint64_t v80 = (char *)((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      Swift::String v39 = (char *)((char *)v71 - v80);
      OUTLINED_FUNCTION_61_1();
      v40();
      OUTLINED_FUNCTION_60_2((uint64_t)v39);
      uint64_t v41 = (void *)v78;
      OUTLINED_FUNCTION_6_1();
      uint64_t v42 = OUTLINED_FUNCTION_34_9();
      outlined assign with take of Participant?(v42, v43, v44);
      swift_endAccess();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v78 = static OS_dispatch_queue.main.getter();
      uint64_t v45 = type metadata accessor for DispatchTime();
      double v79 = v71;
      uint64_t v76 = v45;
      uint64_t v46 = *(void *)(v45 - 8);
      MEMORY[0x1F4188790](v45);
      OUTLINED_FUNCTION_119_0();
      uint64_t v74 = v9;
      MEMORY[0x1F4188790](v47);
      uint64_t v49 = (char *)v71 - v48;
      static DispatchTime.now()();
      uint64_t v50 = type metadata accessor for DispatchTimeInterval();
      OUTLINED_FUNCTION_4();
      uint64_t v52 = v51;
      MEMORY[0x1F4188790](v53);
      OUTLINED_FUNCTION_16_0();
      *uint64_t v41 = 300;
      (*(void (**)(void *, void, uint64_t))(v52 + 104))(v41, *MEMORY[0x1E4FBCAC0], v50);
      DispatchTime.advanced(by:)();
      uint64_t v54 = OUTLINED_FUNCTION_30_15();
      v55(v54);
      uint64_t v56 = *(void (**)(void, void))(v46 + 8);
      id v75 = (void *)(v46 + 8);
      objc_super v77 = v56;
      v56(v49, v45);
      uint64_t v57 = OUTLINED_FUNCTION_20();
      swift_unknownObjectWeakInit();
      v84[4] = partial apply for closure #1 in RecentsListViewController.joinCall(at:);
      v84[5] = v57;
      v84[0] = MEMORY[0x1E4F143A8];
      v84[1] = 1107296256;
      v84[2] = thunk for @escaping @callee_guaranteed () -> ();
      v84[3] = &block_descriptor_27;
      uint64_t v58 = _Block_copy(v84);
      swift_release();
      uint64_t v72 = type metadata accessor for DispatchQoS();
      uint64_t v73 = v71;
      OUTLINED_FUNCTION_4();
      uint64_t v60 = v59;
      MEMORY[0x1F4188790](v61);
      uint64_t v63 = (char *)v71 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
      static DispatchQoS.unspecified.getter();
      type metadata accessor for DispatchWorkItemFlags();
      v71[1] = v71;
      OUTLINED_FUNCTION_4();
      MEMORY[0x1F4188790](v64);
      OUTLINED_FUNCTION_16_0();
      v84[0] = MEMORY[0x1E4FBC860];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF58]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v65 = (void *)v78;
      MEMORY[0x1C8773B10](v74, v63, v41, v58);
      _Block_release(v58);

      OUTLINED_FUNCTION_30_15();
      OUTLINED_FUNCTION_139();
      v66();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v72);
      OUTLINED_FUNCTION_26_2();
      uint64_t v68 = v67();
      MEMORY[0x1F4188790](v68);
      id v69 = (char *)((char *)v71 - v80);
      __swift_storeEnumTagSinglePayload((char *)v71 - v80, 1, 1, v15);
      uint64_t v70 = v81;
      OUTLINED_FUNCTION_74();
      RecentsListViewController.joinCall(for:indexPath:)();
      outlined destroy of SystemUpdateNotice?((uint64_t)v69, &demangling cache variable for type metadata for IndexPath?);
      outlined destroy of RecentsCallItem(v70, (void (*)(void))type metadata accessor for RecentsCallItem);
      goto LABEL_20;
    }
    outlined destroy of SystemUpdateNotice?((uint64_t)v71 - v14, &demangling cache variable for type metadata for IndexPath?);
    OUTLINED_FUNCTION_110_0();
    v29();
    uint64_t v13 = v82;
LABEL_12:
    outlined destroy of SystemUpdateNotice?(v4, (uint64_t *)&demangling cache variable for type metadata for (IndexPath?, IndexPath?));
    OUTLINED_FUNCTION_56_3();
    goto LABEL_19;
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v71 - v14, &demangling cache variable for type metadata for IndexPath?);
  OUTLINED_FUNCTION_33_0(v21, 1, v15);
  if (!v22) {
    goto LABEL_12;
  }
  outlined destroy of SystemUpdateNotice?(v4, &demangling cache variable for type metadata for IndexPath?);
  OUTLINED_FUNCTION_56_3();
LABEL_14:
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = OUTLINED_FUNCTION_30(v33, (uint64_t)static Logger.conversationKit);
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v37 = v81;
  if (v36)
  {
    uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_1C2F90000, v34, v35, "[Recents] Ignore second join call request.", v38, 2u);
    OUTLINED_FUNCTION_3();
  }

  outlined destroy of RecentsCallItem(v37, (void (*)(void))type metadata accessor for RecentsCallItem);
LABEL_20:
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall RecentsListViewController.didSelectAccessoryViewForRecentCall(sender:)(UIButton *sender)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_62();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_18_6();
  RecentsListViewController.collectionViewIndexPath(for:)(sender, v11);
  OUTLINED_FUNCTION_33_0(v3, 1, v5);
  if (v12)
  {
    outlined destroy of SystemUpdateNotice?(v3, &demangling cache variable for type metadata for IndexPath?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v13 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v13 + 16) = xmmword_1C3769620;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
    unint64_t v14 = sender;
    uint64_t v15 = String.init<A>(reflecting:)();
    uint64_t v17 = v16;
    *(void *)(v13 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v13 + 32) = v15;
    *(void *)(v13 + 40) = v17;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_163();
    OUTLINED_FUNCTION_63_0();
    v18();
    if (objc_msgSend(*(id *)(v1 + OBJC_IVAR___FTRecentsListViewController_featureFlags), sel_recentsCallTapTargetsEnabled))
    {
      RecentsListViewController.joinCall(at:)();
    }
    else
    {
      uint64_t v19 = OUTLINED_FUNCTION_74();
      RecentsListViewController.showDetailsAtIndexPath(_:from:)(v19);
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
  }
}

uint64_t RecentsListViewController.showDetailsAtIndexPath(_:from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.InvalidationReason?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecentsListViewController.recentsCallItem(at:)();
  uint64_t v8 = type metadata accessor for RecentsCallItem(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  }
  else
  {
    RecentsCallItem.conversationLink.getter();
    uint64_t v9 = v13;
    outlined destroy of RecentsCallItem((uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItem);
    if (v9)
    {
      outlined consume of ConversationLink?(v9);
      return RecentsListViewController.showLinkDetailViewController(at:)(a1);
    }
  }
  UIView.windowRect.getter((uint64_t)&v12);
  outlined init with take of ConversationControlsRecipe?((uint64_t)&v12, (uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  RecentsListViewController.showRecentCallDetailsViewController(at:sourceRect:)(a1);
  uint64_t v11 = type metadata accessor for Tips.InvalidationReason();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v11);
  RecentsListViewController.tipKitDismissTip(_:)((uint64_t)v4);
  return outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for Tips.InvalidationReason?);
}

Swift::Void __swiftcall RecentsListViewController.didSelectAccessoryViewForLink(sender:)(UIButton *sender)
{
}

void RecentsListViewController.didSelectAccessoryViewForOngoingCall(sender:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_27_3();
  uint64_t v5 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_64();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v8 = OUTLINED_FUNCTION_8(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_5_1();
  RecentsListViewController.collectionViewIndexPath(for:)(v0, v2);
  OUTLINED_FUNCTION_33_0(v2, 1, v5);
  if (v9)
  {
    outlined destroy of SystemUpdateNotice?(v2, &demangling cache variable for type metadata for IndexPath?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIButton);
    id v11 = v0;
    uint64_t v12 = String.init<A>(reflecting:)();
    uint64_t v14 = v13;
    *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v10 + 32) = v12;
    *(void *)(v10 + 40) = v14;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_63_0();
    v15();
    v4(v1);
    uint64_t v16 = OUTLINED_FUNCTION_102();
    v17(v16);
  }
  OUTLINED_FUNCTION_15_0();
}

uint64_t RecentsListViewController.showLinkDetailViewController(at:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecentsListViewController.recentsCallItem(at:)();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  }
  else
  {
    _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItem);
    RecentsCallItem.conversationLink.getter();
    uint64_t v8 = v19;
    outlined consume of ConversationLink?(v19);
    if (v8)
    {
      RecentsListViewController.showLinkDetailViewController(for:)((uint64_t)v7);
      return outlined destroy of RecentsCallItem((uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItem);
    }
    outlined destroy of RecentsCallItem((uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItem);
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a1, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v14);
  uint64_t v15 = specialized >> prefix<A>(_:)((uint64_t)v13);
  uint64_t v17 = v16;
  outlined destroy of SystemUpdateNotice?((uint64_t)v13, &demangling cache variable for type metadata for IndexPath?);
  *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v10 + 32) = v15;
  *(void *)(v10 + 40) = v17;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

void RecentsListViewController.didTapNewCallButton()()
{
  uint64_t v1 = v0;
  if (TUIsBareMakoAccount())
  {
    RecentsListViewController.showMakoUserAlert()();
  }
  else
  {
    char v13 = 0;
    id v2 = objc_allocWithZone((Class)type metadata accessor for PeoplePickerViewController());
    PeoplePickerViewController.init(style:existingAddresses:currentConversation:stagedActivity:setPreventsApplicationTerminationWhenModal:)(&v13, 0, 0, 0, (uint64_t)TPNumberPadCharacter.rawValue.getter, 0);
    uint64_t v4 = v3;
    uint64_t v5 = *(void (**)(void *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x368);
    id v6 = v1;
    v5(v1, &protocol witness table for RecentsListViewController);
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB19E8]), sel_initWithRootViewController_, v4);
    objc_msgSend(v12, sel_setDefinesPresentationContext_, 0);
    id v7 = objc_msgSend(v6, sel_traitCollection);
    id v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

    if (v8 == (id)5) {
      uint64_t v9 = -2;
    }
    else {
      uint64_t v9 = 6;
    }
    objc_msgSend(v12, sel_setModalPresentationStyle_, v9);
    id v10 = objc_msgSend(v6, sel_navigationController);
    if (v10)
    {
      uint64_t v11 = v10;
      objc_msgSend(v10, sel_presentViewController_animated_completion_, v12, 1, 0);
    }
  }
}

void RecentsListViewController.showMakoUserAlert()()
{
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_conversationKit);
  v31._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001C379B980;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x61737265766E6F43;
  v4.value._object = (void *)0xEF74694B6E6F6974;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0;
  Swift::String v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v31);

  unsigned int v7 = objc_msgSend(*(id *)&v0[OBJC_IVAR___FTRecentsListViewController_featureFlags], sel_appleAccountRebrandEnabled);
  id v8 = objc_msgSend(v1, sel_conversationKit);
  if (v7)
  {
    unint64_t v9 = 0xD00000000000001FLL;
    unint64_t v28 = 0xE000000000000000;
    id v10 = "MAKO_ALERT_MESSAGE_APPLEACCOUNT";
  }
  else
  {
    unint64_t v9 = 0xD000000000000012;
    unint64_t v28 = 0xE000000000000000;
    id v10 = "MAKO_ALERT_MESSAGE";
  }
  unint64_t v11 = (unint64_t)(v10 - 32) | 0x8000000000000000;
  v12.value._countAndFlagsBits = 0x61737265766E6F43;
  v12.value._object = (void *)0xEF74694B6E6F6974;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  uint64_t v14 = 0;
  Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v9, v12, (NSBundle)v8, v13, *(Swift::String *)(&v28 - 1));

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v16 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v6._countAndFlagsBits, (uint64_t)v6._object, v15._countAndFlagsBits, (uint64_t)v15._object, 1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v17 = objc_msgSend(v1, sel_conversationKit);
  v18._countAndFlagsBits = 0xD000000000000018;
  v32._object = (void *)0xE000000000000000;
  v18._object = (void *)0x80000001C379B9C0;
  v19.value._countAndFlagsBits = 0x61737265766E6F43;
  v19.value._object = (void *)0xEF74694B6E6F6974;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v32);

  id v22 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v21._countAndFlagsBits, (uint64_t)v21._object, 0, (uint64_t)closure #1 in RecentsListViewController.showMakoUserAlert(), 0);
  id v23 = objc_msgSend(v1, sel_conversationKit);
  v33._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0x4C45434E4143;
  v24._object = (void *)0xE600000000000000;
  v25.value._countAndFlagsBits = 0x61737265766E6F43;
  v25.value._object = (void *)0xEF74694B6E6F6974;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0;
  Swift::String v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v33);

  id v29 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v27._countAndFlagsBits, (uint64_t)v27._object, 1, 0, 0);
  objc_msgSend(v16, sel_addAction_, v22);
  objc_msgSend(v16, sel_addAction_, v29);
  objc_msgSend(v0, sel_presentViewController_animated_completion_, v16, 1, 0);
}

void RecentsListViewController.didTapNewLinkButton(from:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.InvalidationReason?);
  MEMORY[0x1F4188790](v3 - 8);
  Swift::String v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *MEMORY[0x1E4F422A0];
  uint64_t v7 = type metadata accessor for Tips.InvalidationReason();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  RecentsListViewController.tipKitDismissTip(_:)((uint64_t)v5);
  outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for Tips.InvalidationReason?);
  id v8 = (objc_class *)type metadata accessor for LinkCreationCoordinator();
  unint64_t v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit23LinkCreationCoordinator_shareSheetViewController] = 0;
  id v10 = &v9[OBJC_IVAR____TtC15ConversationKit23LinkCreationCoordinator_conversationLink];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)id v10 = 0;
  unint64_t v11 = &v9[OBJC_IVAR____TtC15ConversationKit23LinkCreationCoordinator_parentViewController];
  swift_beginAccess();
  *((void *)v11 + 1) = &protocol witness table for RecentsListViewController;
  swift_unknownObjectUnownedInit();
  v17.receiver = v9;
  v17.super_class = v8;
  id v12 = objc_msgSendSuper2(&v17, sel_init);
  RecentsListViewController.linkCoordinator.setter((uint64_t)v12);
  Swift::String v13 = *(void **)(v1 + OBJC_IVAR___FTRecentsListViewController_linkCoordinator);
  if (v13)
  {
    uint64_t v14 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v13) + 0xB8);
    Swift::String v15 = v13;
    v14(a1);
  }
}

uint64_t RecentsListViewController.recentsCallItem(at:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_0_20();
  uint64_t v6 = (*(uint64_t (**)(void))(v5 + 792))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  uint64_t v7 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_138();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10 + v0, v2, v7);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 280))(v10);
  swift_release();
  swift_bridgeObjectRelease();
  specialized Collection.first.getter(v11, v4);
  OUTLINED_FUNCTION_15_0();
  return swift_bridgeObjectRelease();
}

uint64_t RecentsListViewController.showRecentCallDetailsViewController(at:sourceRect:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecentsListViewController.recentsCallItem(at:)();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
    MEMORY[0x1F4188790](v9 - 8);
    uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v12 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, a1, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v12);
    uint64_t v13 = specialized >> prefix<A>(_:)((uint64_t)v11);
    uint64_t v15 = v14;
    outlined destroy of SystemUpdateNotice?((uint64_t)v11, &demangling cache variable for type metadata for IndexPath?);
    *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v8 + 32) = v13;
    *(void *)(v8 + 40) = v15;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItem);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationKit);
    Swift::String v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      Swift::String v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v20 = 0;
      _os_log_impl(&dword_1C2F90000, v18, v19, "showRecentCallDetailsViewController", v20, 2u);
      MEMORY[0x1C87760E0](v20, -1, -1);
    }

    RecentsListViewController.presentDetailsView(for:sourceRect:sourceView:)((uint64_t)v7);
    return outlined destroy of RecentsCallItem((uint64_t)v7, (void (*)(void))type metadata accessor for RecentsCallItem);
  }
}

void RecentsListViewController.deleteRecentCalls(_:preparationHandler:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v102 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v108 = v9;
  uint64_t v111 = type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = OUTLINED_FUNCTION_79_1();
  uint64_t v12 = OUTLINED_FUNCTION_1(v11);
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_10_5();
  uint64_t v109 = v15;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_8_4();
  uint64_t v107 = v17;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_8_4();
  uint64_t v100 = v19;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_8_4();
  uint64_t v103 = v21;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_8_4();
  uint64_t v106 = v23;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v24);
  Swift::String v26 = (char *)&v94 - v25;
  uint64_t v27 = OUTLINED_FUNCTION_20();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t v104 = v27;
  *(void *)(v27 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v105 = OUTLINED_FUNCTION_20();
  *(void *)(v105 + 16) = v28;
  uint64_t v29 = *(void *)(v7 + 16);
  if (v29)
  {
    uint64_t v95 = v0;
    uint64_t v96 = v5;
    uint64_t v97 = v3;
    unint64_t v110 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v30 = v7 + v110;
    uint64_t v31 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    uint64_t v32 = MEMORY[0x1E4FBC860];
    uint64_t v33 = v108;
    uint64_t v98 = v7;
    while (1)
    {
      _s15ConversationKit15RecentsCallItemVWOcTm_0(v30, (uint64_t)v26, (void (*)(void))type metadata accessor for RecentsCallItem);
      uint64_t v34 = OUTLINED_FUNCTION_101();
      _s15ConversationKit15RecentsCallItemVWOcTm_0(v34, v35, v36);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          outlined destroy of RecentsCallItem((uint64_t)v26, (void (*)(void))type metadata accessor for RecentsCallItem);
          Swift::String v39 = type metadata accessor for RecentsCallItemType;
          uint64_t v40 = (uint64_t)v1;
          goto LABEL_35;
        case 2u:

          swift_bridgeObjectRelease();
          swift_release();
          _s15ConversationKit15RecentsCallItemVWOcTm_0((uint64_t)v26, v107, (void (*)(void))type metadata accessor for RecentsCallItem);
          uint64_t v54 = v105;
          uint64_t v55 = *(void *)(v105 + 16);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v54 + 16) = v55;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v82 = OUTLINED_FUNCTION_43_7();
            OUTLINED_FUNCTION_62_1(v82);
          }
          OUTLINED_FUNCTION_132();
          if (v45)
          {
            uint64_t v83 = OUTLINED_FUNCTION_44_7(v57);
            OUTLINED_FUNCTION_62_1(v83);
          }
          OUTLINED_FUNCTION_72_0();
          _s15ConversationKit15RecentsCallItemVWObTm_0(v107, v58, (void (*)(void))type metadata accessor for RecentsCallItem);
          outlined destroy of RecentsCallItem((uint64_t)v26, (void (*)(void))type metadata accessor for RecentsCallItem);
          uint64_t v33 = v108;
          goto LABEL_36;
        case 3u:
        case 4u:
          outlined destroy of RecentsCallItem((uint64_t)v1, (void (*)(void))type metadata accessor for RecentsCallItemType);
          _s15ConversationKit15RecentsCallItemVWOcTm_0((uint64_t)v26, v109, (void (*)(void))type metadata accessor for RecentsCallItem);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v32 = OUTLINED_FUNCTION_131();
          }
          unint64_t v38 = *(void *)(v32 + 16);
          unint64_t v37 = *(void *)(v32 + 24);
          if (v38 >= v37 >> 1) {
            uint64_t v32 = OUTLINED_FUNCTION_130(v37);
          }
          *(void *)(v32 + 16) = v38 + 1;
          _s15ConversationKit15RecentsCallItemVWObTm_0(v109, v32 + v110 + v38 * v31, (void (*)(void))type metadata accessor for RecentsCallItem);
          Swift::String v39 = type metadata accessor for RecentsCallItem;
          uint64_t v40 = (uint64_t)v26;
          goto LABEL_35;
        default:
          _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v1, v33, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
          _s15ConversationKit15RecentsCallItemVWOcTm_0((uint64_t)v26, v106, (void (*)(void))type metadata accessor for RecentsCallItem);
          uint64_t v41 = v104;
          uint64_t v42 = *(void *)(v104 + 16);
          char v43 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v41 + 16) = v42;
          if ((v43 & 1) == 0) {
            *(void *)(v104 + 16) = OUTLINED_FUNCTION_43_7();
          }
          OUTLINED_FUNCTION_132();
          if (v45)
          {
            uint64_t v81 = OUTLINED_FUNCTION_44_7(v44);
            *(void *)(v104 + 16) = v81;
          }
          OUTLINED_FUNCTION_72_0();
          _s15ConversationKit15RecentsCallItemVWObTm_0(v106, v46, (void (*)(void))type metadata accessor for RecentsCallItem);
          uint64_t v47 = v102;
          uint64_t v48 = v108;
          if (*(void *)(v108 + *(int *)(v102 + 44)))
          {
            _s15ConversationKit15RecentsCallItemVWOcTm_0((uint64_t)v26, v103, (void (*)(void))type metadata accessor for RecentsCallItem);
            uint64_t v49 = v105;
            uint64_t v50 = *(void *)(v105 + 16);
            char v51 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v49 + 16) = v50;
            if ((v51 & 1) == 0)
            {
              uint64_t v84 = OUTLINED_FUNCTION_43_7();
              OUTLINED_FUNCTION_62_1(v84);
            }
            OUTLINED_FUNCTION_132();
            if (v45)
            {
              uint64_t v85 = OUTLINED_FUNCTION_44_7(v52);
              OUTLINED_FUNCTION_62_1(v85);
            }
            OUTLINED_FUNCTION_72_0();
            _s15ConversationKit15RecentsCallItemVWObTm_0(v103, v53, (void (*)(void))type metadata accessor for RecentsCallItem);
            goto LABEL_33;
          }
          uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          id v101 = &v94;
          uint64_t v60 = OUTLINED_FUNCTION_8(v59);
          uint64_t v62 = *(void *)(v61 + 64);
          MEMORY[0x1F4188790](v60);
          uint64_t v63 = v47;
          unint64_t v64 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v65 = v48;
          uint64_t v66 = (char *)&v94 - v64;
          uint64_t v67 = *(void **)(v65 + *(int *)(v63 + 52));
          if (!v67)
          {
            uint64_t v72 = type metadata accessor for UUID();
            OUTLINED_FUNCTION_25_1((uint64_t)&v94 - v64, v73, v74, v72);
LABEL_32:
            outlined destroy of SystemUpdateNotice?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_33:
            outlined destroy of RecentsCallItem((uint64_t)v26, (void (*)(void))type metadata accessor for RecentsCallItem);
            Swift::String v39 = type metadata accessor for RecentCallRecentItemMetadata;
            uint64_t v33 = v108;
            goto LABEL_34;
          }
          id v68 = objc_msgSend(v67, sel_messageUUID);
          uint64_t v99 = &v94;
          if (MEMORY[0x1F4188790](v68))
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v69 = type metadata accessor for UUID();
            uint64_t v70 = (char *)&v94 - v64;
            uint64_t v71 = 0;
          }
          else
          {
            uint64_t v69 = type metadata accessor for UUID();
            uint64_t v70 = (char *)&v94 - v64;
            uint64_t v71 = 1;
          }
          __swift_storeEnumTagSinglePayload((uint64_t)v70, v71, 1, v69);
          uint64_t v75 = OUTLINED_FUNCTION_162();
          outlined init with take of ConversationControlsRecipe?(v75, v76, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          type metadata accessor for UUID();
          OUTLINED_FUNCTION_33_0((uint64_t)v66, 1, v69);
          uint64_t v7 = v98;
          if (v77) {
            goto LABEL_32;
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          _s15ConversationKit15RecentsCallItemVWOcTm_0((uint64_t)v26, v100, (void (*)(void))type metadata accessor for RecentsCallItem);
          char v78 = swift_isUniquelyReferenced_nonNull_native();
          if ((v78 & 1) == 0) {
            uint64_t v32 = OUTLINED_FUNCTION_131();
          }
          uint64_t v33 = v108;
          unint64_t v80 = *(void *)(v32 + 16);
          unint64_t v79 = *(void *)(v32 + 24);
          if (v80 >= v79 >> 1) {
            uint64_t v32 = OUTLINED_FUNCTION_130(v79);
          }
          *(void *)(v32 + 16) = v80 + 1;
          _s15ConversationKit15RecentsCallItemVWObTm_0(v100, v32 + v110 + v80 * v31, (void (*)(void))type metadata accessor for RecentsCallItem);
          outlined destroy of RecentsCallItem((uint64_t)v26, (void (*)(void))type metadata accessor for RecentsCallItem);
          Swift::String v39 = type metadata accessor for RecentCallRecentItemMetadata;
LABEL_34:
          uint64_t v40 = v33;
LABEL_35:
          outlined destroy of RecentsCallItem(v40, (void (*)(void))v39);
LABEL_36:
          v30 += v31;
          if (!--v29)
          {
            swift_bridgeObjectRelease();
            uint64_t v86 = v105;
            uint64_t v28 = *(void *)(v105 + 16);
            uint64_t v5 = v96;
            uint64_t v3 = v97;
            uint64_t v0 = v95;
            goto LABEL_44;
          }
          break;
      }
    }
  }
  uint64_t v32 = v28;
  uint64_t v86 = v105;
LABEL_44:
  uint64_t v87 = v104;
  if (*(void *)(v28 + 16))
  {
    uint64_t v88 = RecentsListViewController.linkController.getter();
    swift_bridgeObjectRetain();
    id v89 = v0;
    uint64_t v90 = OUTLINED_FUNCTION_102();
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v90);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v91 = swift_bridgeObjectRetain();
    specialized RecentsLinkController.showDeleteConfirmationIfRequired(for:isRemovingAllRecents:from:completionHandler:)(v91, 0, (uint64_t)v89, v88, (uint64_t)v89, v5, v3, v87, v86, v32, v7, v93, v94, (uint64_t)v95, v96, v97, v98, (uint64_t)v99, v100,
      (uint64_t)v101,
      v102,
      v103,
      v104);
    swift_release();
  }
  else
  {
    uint64_t v92 = swift_bridgeObjectRetain();
    removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(v92, MEMORY[0x1E4FBC860], v32, v7, (uint64_t)v0, v5, v3, v87, v86, v93, v94, (uint64_t)v95, v96, v97, v98, (uint64_t)v99, v100, (uint64_t)v101, v102,
      v103,
      v104,
      v105,
      v106);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28();
}

uint64_t removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v39 = v29;
  uint64_t v31 = v30;
  OUTLINED_FUNCTION_158();
  v32();
  uint64_t v33 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = v33;
  v34[3] = v28;
  v34[4] = v26;
  v34[5] = v24;
  v34[6] = a23;
  v34[7] = v31;
  OUTLINED_FUNCTION_3_2();
  BOOL v36 = *(void (**)(uint64_t, void (*)(), void *))(v35 + 288);
  swift_retain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v28);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v36(v39, partial apply for closure #1 in removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:), v34);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_22();
  return swift_release();
}

void closure #1 in removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a1 + 16;
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x1C8776240](v8);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    if (a2) {
      a2(1);
    }
    uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x1A8))(v22);
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    swift_beginAccess();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 80);
    uint64_t v15 = swift_bridgeObjectRetain();
    v14(v15, v12, v13);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    uint64_t v16 = RecentsListViewController.linkController.getter();
    swift_beginAccess();
    uint64_t v17 = *(void (**)(uint64_t))(*(void *)v16 + 296);
    uint64_t v18 = swift_bridgeObjectRetain();
    v17(v18);
    swift_release();
    uint64_t v19 = swift_bridgeObjectRelease();
    uint64_t v20 = (*(uint64_t (**)(uint64_t))((*v11 & *v10) + 0x318))(v19);
    uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v20 + 192))();
    swift_release();
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v21 + 160))(a6);
      swift_release();
    }
  }
}

uint64_t specialized closure #1 in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    OUTLINED_FUNCTION_2();
    uint64_t v15 = *(void *)(a5 + 16);
    OUTLINED_FUNCTION_2();
    uint64_t v16 = *(void *)(a6 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(v15, v16, a7, a8, a2, (uint64_t)a3, a4, a5, a6, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
      v27,
      v28,
      v29,
      v30);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else if (a3)
  {
    return a3(0);
  }
  return result;
}

#error "1C313E378: call analysis failed (funcsize=350)"

void RecentsListViewController.presentReportJunkAlert(_:completion:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v29 = self;
  uint64_t v30 = (objc_class *)objc_msgSend(v29, sel_conversationKit);
  unint64_t v31 = OUTLINED_FUNCTION_3_19(25);
  v32.super.Class isa = v30;
  uint64_t v36 = OUTLINED_FUNCTION_2_29(v31, v33, v34, v35, v32);
  uint64_t v38 = v37;

  uint64_t v39 = specialized ParticipantsViewController.participantsViewControllerDelegate.getter();
  id v78 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v39, v40, v36, v38, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  uint64_t v41 = (objc_class *)objc_msgSend(v29, (SEL)&selRef_viewIfLoaded + 1);
  OUTLINED_FUNCTION_13_11();
  OUTLINED_FUNCTION_7_7();
  v42.super.Class isa = v41;
  uint64_t v47 = OUTLINED_FUNCTION_2_29(v43, v44, v45, v46, v42);
  uint64_t v49 = v48;

  uint64_t v50 = (void *)swift_allocObject();
  void v50[2] = v22;
  v50[3] = v28;
  v50[4] = v26;
  v50[5] = v24;
  id v51 = v22;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_174();
  id v52 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v47, v49, 2, (uint64_t)partial apply for closure #1 in RecentsListViewController.presentReportJunkAlert(_:completion:), (uint64_t)v50);
  uint64_t v53 = (objc_class *)objc_msgSend(v29, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  OUTLINED_FUNCTION_7_7();
  v54.super.Class isa = v53;
  OUTLINED_FUNCTION_2_29(v55, v56, v57, v58, v54);

  uint64_t v59 = (void *)swift_allocObject();
  v59[2] = v51;
  v59[3] = v28;
  v59[4] = v26;
  v59[5] = v24;
  id v60 = v51;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_174();
  uint64_t v61 = OUTLINED_FUNCTION_101();
  id v64 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v61, v62, 2, v63, (uint64_t)v59);
  uint64_t v65 = (objc_class *)objc_msgSend(v29, sel_conversationKit);
  OUTLINED_FUNCTION_13_11();
  OUTLINED_FUNCTION_7_7();
  v66.super.Class isa = v65;
  uint64_t v71 = OUTLINED_FUNCTION_2_29(v67, v68, v69, v70, v66);
  uint64_t v73 = v72;

  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = v26;
  *(void *)(v74 + 24) = v24;
  OUTLINED_FUNCTION_174();
  id v75 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v71, v73, 1, (uint64_t)partial apply for closure #3 in RecentsListViewController.presentReportJunkAlert(_:completion:), v74);
  objc_msgSend(v78, sel_addAction_, v52);
  objc_msgSend(v78, sel_addAction_, v64);
  objc_msgSend(v78, sel_addAction_, v75);
  objc_msgSend(v60, sel_presentViewController_animated_completion_, v78, 1, 0);

  OUTLINED_FUNCTION_22();
}

Swift::Void __swiftcall RecentsListViewController.reportSpamCalls(_:)(Swift::OpaquePointer a1)
{
  if (*((void *)a1._rawValue + 2))
  {
    uint64_t v2 = type metadata accessor for RecentsCallItem(0);
    OUTLINED_FUNCTION_1_1(v2);
    uint64_t v4 = (char *)a1._rawValue
       + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    if (one-time initialization token for faceTime != -1) {
      swift_once();
    }
    ReportSpamManager.reportVideoMessagingSpam(call:)((uint64_t)v4);
  }
}

uint64_t closure #1 in RecentsListViewController.presentReportJunkAlert(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  RecentsListViewController.deleteRecentCalls(_:preparationHandler:)();
  return swift_release();
}

void closure #2 in RecentsListViewController.presentReportJunkAlert(_:completion:)(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  RecentsListViewController.deleteRecentCalls(_:preparationHandler:)();
  swift_release();
  RecentsListViewController.reportSpamCalls(_:)(a3);
}

id RecentsListViewController.deleteAction(of:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RecentsCallItem(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextualAction);
  id v5 = objc_msgSend(self, sel_conversationKit);
  v19._object = (void *)0xE000000000000000;
  v6._object = (void *)0x80000001C379BB90;
  v6._countAndFlagsBits = 0xD000000000000020;
  v7.value._countAndFlagsBits = 0x61737265766E6F43;
  v7.value._object = (void *)0xEF74694B6E6F6974;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v19._countAndFlagsBits = 0;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v19);

  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  _s15ConversationKit15RecentsCallItemVWOcTm_0(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for RecentsCallItem);
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (void (*)(void))type metadata accessor for RecentsCallItem);
  id v13 = @nonobjc UIContextualAction.__allocating_init(style:title:handler:)(1, v9._countAndFlagsBits, (uint64_t)v9._object, (uint64_t)partial apply for closure #1 in RecentsListViewController.deleteAction(of:), v12);
  uint64_t v14 = self;
  uint64_t v15 = (void *)MEMORY[0x1C87730B0](0x69662E6873617274, 0xEA00000000006C6CLL);
  id v16 = objc_msgSend(v14, sel___systemImageNamedSwift_, v15);

  objc_msgSend(v13, sel_setImage_, v16);
  return v13;
}

uint64_t closure #1 in RecentsListViewController.deleteAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for RecentsCallItem(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10 - 8);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](a5 + 16);
  if (result)
  {
    uint64_t v14 = (void *)result;
    RecentsListViewController.tipKitStopObservation()();
    type metadata accessor for TPTipsHelper();
    static TPTipsHelper.taskQueue.getter();
    _s15ConversationKit15RecentsCallItemVWOcTm_0(a6, (uint64_t)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for RecentsCallItem);
    unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v17 = (void *)(v16 + ((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v17 = a3;
    v17[1] = a4;
    id v18 = v14;
    swift_retain();
    dispatch thunk of TaskQueue.async(_:)();

    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in RecentsListViewController.deleteAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RecentsListViewController.deleteAction(of:), v6, v5);
}

uint64_t closure #1 in closure #1 in RecentsListViewController.deleteAction(of:)()
{
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)v0[2];
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RecentsCallItem>);
  uint64_t v6 = OUTLINED_FUNCTION_27_3();
  uint64_t v7 = type metadata accessor for RecentsCallItem(v6);
  OUTLINED_FUNCTION_1(v7);
  OUTLINED_FUNCTION_138();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v3, v8 + v1, (void (*)(void))type metadata accessor for RecentsCallItem);
  Swift::String v9 = (void *)swift_allocObject();
  v9[2] = v5;
  _OWORD v9[3] = v4;
  void v9[4] = v2;
  v5;
  swift_retain();
  RecentsListViewController.removeRecentCallsAndReportIfNeeded(_:preparationHandler:)(v8, partial apply for closure #1 in closure #1 in closure #1 in RecentsListViewController.deleteAction(of:), v9);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t closure #1 in closure #1 in closure #1 in RecentsListViewController.deleteAction(of:)(char a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1) {
    RecentsListViewController.tipKitStartObservation()();
  }
  return a3(a1 & 1);
}

id @nonobjc UIContextualAction.__allocating_init(style:title:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v8 = (void *)MEMORY[0x1C87730B0](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  v12[4] = a4;
  void v12[5] = a5;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
  void v12[3] = &block_descriptor_137;
  Swift::String v9 = _Block_copy(v12);
  id v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_contextualActionWithStyle_title_handler_, a1, v8, v9);

  _Block_release(v9);
  swift_release();
  return v10;
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ()(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_retain();
  id v10 = a2;
  id v9 = a3;
  v6(v10, v9, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> (), v8);
  swift_release();
  swift_release();
}

void closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x1C8776240](a5 + 16);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    RecentsListViewController.tipKitStopObservation()();
    _s15ConversationKit15RecentsCallItemVWOcTm_0(a6, (uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v15 = one-time initialization token for faceTime;
    swift_retain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = static ReportSpamManager.faceTime;
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v18 = (void *)swift_allocObject();
    v18[2] = v17;
    v18[3] = a3;
    v18[4] = a4;
    swift_retain();
    swift_retain();
    id v19 = specialized SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)((uint64_t)v12, v16, (uint64_t)partial apply for closure #1 in closure #1 in RecentsListViewController.blockUnknownAction(of:), (uint64_t)v18);
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of RecentsCallItem((uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    type metadata accessor for TPTipsHelper();
    static TPTipsHelper.taskQueue.getter();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v14;
    *(void *)(v20 + 24) = v19;
    id v21 = v14;
    id v22 = v19;
    dispatch thunk of TaskQueue.async(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t closure #2 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:), v4, v3);
}

void RecentsListViewController.groupReportAndBlockAction(of:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v27 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for RecentsCallItem(0);
  uint64_t v4 = OUTLINED_FUNCTION_1(v3);
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_104_0();
  uint64_t v9 = v7 - v8;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextualAction);
  uint64_t v10 = (objc_class *)objc_msgSend(self, sel_conversationKit);
  OUTLINED_FUNCTION_7_7();
  v11.super.Class isa = v10;
  uint64_t v16 = OUTLINED_FUNCTION_2_29(v12, v13, v14, v15, v11);
  uint64_t v18 = v17;

  uint64_t v19 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v2, v9, (void (*)(void))type metadata accessor for RecentsCallItem);
  unint64_t v20 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  _s15ConversationKit15RecentsCallItemVWObTm_0(v9, v21 + v20, (void (*)(void))type metadata accessor for RecentsCallItem);
  id v22 = @nonobjc UIContextualAction.__allocating_init(style:title:handler:)(0, v16, v18, v27, v21);
  uint64_t v23 = self;
  uint64_t v24 = (void *)MEMORY[0x1C87730B0](0xD000000000000010, 0x80000001C379BA70);
  id v25 = objc_msgSend(v23, sel___systemImageNamedSwift_, v24);

  objc_msgSend(v22, sel_setImage_, v25);
  id v26 = objc_msgSend(self, sel_systemOrangeColor);
  objc_msgSend(v22, sel_setBackgroundColor_, v26);

  OUTLINED_FUNCTION_28();
}

void closure #1 in RecentsListViewController.reportAndBlockAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x1C8776240](a5 + 16);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    RecentsListViewController.tipKitStopObservation()();
    _s15ConversationKit15RecentsCallItemVWOcTm_0(a6, (uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v15 = one-time initialization token for faceTime;
    swift_retain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = static ReportSpamManager.faceTime;
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = v17;
    v18[3] = a3;
    v18[4] = a4;
    swift_retain();
    swift_retain();
    id v19 = specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)((uint64_t)v12, v16, (uint64_t)partial apply for closure #1 in closure #1 in RecentsListViewController.blockUnknownAction(of:), (uint64_t)v18);
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of RecentsCallItem((uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    type metadata accessor for TPTipsHelper();
    static TPTipsHelper.taskQueue.getter();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v14;
    *(void *)(v20 + 24) = v19;
    id v21 = v14;
    id v22 = v19;
    dispatch thunk of TaskQueue.async(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
}

void closure #1 in RecentsListViewController.blockAllAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x1C8776240](a5 + 16);
  if (v13)
  {
    uint64_t v14 = (char *)v13;
    RecentsListViewController.tipKitStopObservation()();
    uint64_t v15 = *(void *)&v14[OBJC_IVAR___FTRecentsListViewController_spamAlertBuilder];
    _s15ConversationKit15RecentsCallItemVWOcTm_0(a6, (uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v16 = one-time initialization token for faceTime;
    swift_retain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = static ReportSpamManager.faceTime;
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v19 = (void *)swift_allocObject();
    v19[2] = v18;
    v19[3] = a3;
    CGFloat v19[4] = a4;
    swift_retain();
    swift_retain();
    uint64_t v20 = (void *)specialized SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(v12, v17, partial apply for closure #1 in closure #1 in RecentsListViewController.blockAllAction(of:), v19, v15);
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of RecentsCallItem((uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    type metadata accessor for TPTipsHelper();
    static TPTipsHelper.taskQueue.getter();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v14;
    *(void *)(v21 + 24) = v20;
    id v22 = v14;
    id v23 = v20;
    dispatch thunk of TaskQueue.async(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t closure #2 in closure #1 in RecentsListViewController.blockAllAction(of:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in RecentsListViewController.blockAllAction(of:), v4, v3);
}

uint64_t closure #2 in closure #1 in RecentsListViewController.blockAllAction(of:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)v0[2];
  swift_release();
  objc_msgSend(v2, sel_presentViewController_animated_completion_, v1, 1, 0);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void closure #1 in RecentsListViewController.blockUnknownAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x1C8776240](a5 + 16);
  if (v13)
  {
    uint64_t v14 = (char *)v13;
    RecentsListViewController.tipKitStopObservation()();
    uint64_t v15 = *(void *)&v14[OBJC_IVAR___FTRecentsListViewController_spamAlertBuilder];
    _s15ConversationKit15RecentsCallItemVWOcTm_0(a6, (uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v16 = one-time initialization token for faceTime;
    swift_retain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = static ReportSpamManager.faceTime;
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v19 = (void *)swift_allocObject();
    v19[2] = v18;
    v19[3] = a3;
    CGFloat v19[4] = a4;
    swift_retain();
    swift_retain();
    uint64_t v20 = (void *)specialized SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)(v12, v17, partial apply for closure #1 in closure #1 in RecentsListViewController.blockUnknownAction(of:), v19, v15);
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of RecentsCallItem((uint64_t)v12, (void (*)(void))type metadata accessor for RecentsCallItem);
    type metadata accessor for TPTipsHelper();
    static TPTipsHelper.taskQueue.getter();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v14;
    *(void *)(v21 + 24) = v20;
    id v22 = v14;
    id v23 = v20;
    dispatch thunk of TaskQueue.async(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 16;
  OUTLINED_FUNCTION_2();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    RecentsListViewController.tipKitStartObservation()();
  }
  return a2(1);
}

void closure #1 in RecentsListViewController.joinCall(at:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
    MEMORY[0x1F4188790](v4 - 8);
    uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v7 = type metadata accessor for IndexPath();
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v7);
    uint64_t v8 = (uint64_t)v3 + OBJC_IVAR___FTRecentsListViewController_joinCallThrottlingIndexPath;
    swift_beginAccess();
    outlined assign with take of Participant?((uint64_t)v6, v8, &demangling cache variable for type metadata for IndexPath?);
    swift_endAccess();
  }
}

void RecentsListViewController.joinCall(for:indexPath:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = OUTLINED_FUNCTION_27_3();
  uint64_t v8 = type metadata accessor for RecentOngoingConversationMetadata(v7);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_5_1();
  uint64_t v56 = type metadata accessor for RecentCallRecentItemMetadata(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_10_5();
  uint64_t v57 = v11;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v51 - v13;
  type metadata accessor for RecentsCallItemType(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_23_17();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v51 - v17;
  RecentsListViewController.engaged(with:)();
  uint64_t v19 = OUTLINED_FUNCTION_24_2();
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v19, v20, v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of RecentsCallItem((uint64_t)v18, (void (*)(void))type metadata accessor for RecentsCallItemType);
  if (EnumCaseMultiPayload == 3)
  {
    RecentsCallItem.tuHandles.getter();
    specialized Collection.first.getter();
    OUTLINED_FUNCTION_5_2();
    if (!v18) {
      goto LABEL_26;
    }
    id v52 = v18;
    uint64_t v53 = v14;
    id v23 = v4;
    uint64_t v54 = v6;
    uint64_t v24 = self;
    id v25 = objc_msgSend(v24, sel_sharedInstance);
    id v26 = objc_msgSend(v25, sel_providerManager);

    id v27 = objc_msgSend(v26, sel_faceTimeProvider);
    id v28 = objc_msgSend(v27, sel_prioritizedSenderIdentities);

    id v29 = objc_msgSend(v28, sel_firstObject);
    if (v29)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v59, 0, sizeof(v59));
    }
    outlined init with take of ConversationControlsRecipe?((uint64_t)v59, (uint64_t)v60, &demangling cache variable for type metadata for Any?);
    uint64_t v55 = v2;
    if (v61)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUSenderIdentity);
      if (swift_dynamicCast()) {
        uint64_t v30 = v58;
      }
      else {
        uint64_t v30 = 0;
      }
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v60, &demangling cache variable for type metadata for Any?);
      uint64_t v30 = 0;
    }
    uint64_t v31 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v23) + 0x1D8))();
    id v32 = objc_msgSend(v24, sel_sharedInstance);
    id v33 = objc_msgSend(v32, sel_providerManager);

    id v34 = objc_msgSend(v33, sel_faceTimeProvider);
    uint64_t v35 = (void *)RecentsCallItem.contact.getter();
    uint64_t v36 = v52;
    (*(void (**)(id, uint64_t, void *, char *, void *, void, uint64_t))(*(void *)v31 + 136))(v34, 1, v35, v52, v30, 0, 8);

    uint64_t v4 = v23;
    swift_release();

    uint64_t v6 = v54;
    uint64_t v2 = v55;
    uint64_t v14 = v53;
  }
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v1, (uint64_t)v3, (void (*)(void))type metadata accessor for RecentsCallItemType);
  OUTLINED_FUNCTION_101();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v3, v2, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
      NSBundle v42 = (void *)TUConversationManager.conversation(with:)(v2);
      if (v42)
      {
        uint64_t v43 = v42;
        RecentsListViewController.joinOngoingConversation(_:)(v42);
      }
      else
      {
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v47 = OUTLINED_FUNCTION_25_15();
        *(_OWORD *)(v47 + 16) = xmmword_1C3769620;
        uint64_t v48 = specialized >> prefix<A>(_:)(v6);
        uint64_t v50 = v49;
        *(void *)(v47 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v47 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v47 + 32) = v48;
        *(void *)(v47 + 40) = v50;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
      }
      outlined destroy of RecentsCallItem(v2, (void (*)(void))type metadata accessor for RecentOngoingConversationMetadata);
      break;
    case 2u:
      uint64_t v37 = *v3;
      BOOL v44 = RecentsCallItem.wantsStagingArea.getter();
      RecentsListViewController.joinConversationLink(_:wantsStagingArea:)(v37, v44);
      goto LABEL_20;
    default:
      _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v3, (uint64_t)v14, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      RecentsCallItem.conversationLink.getter();
      uint64_t v37 = (void *)v59[0];
      uint64_t v38 = v57;
      _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v14, v57, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      if (v37)
      {
        outlined destroy of RecentsCallItem(v38, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
      }
      else
      {
        uint64_t v37 = *(void **)(v38 + *(int *)(v56 + 44));
        uint64_t v39 = (void *)OUTLINED_FUNCTION_163();
        outlined copy of ConversationLink?(v39);
        uint64_t v40 = outlined destroy of RecentsCallItem(v38, (void (*)(void))type metadata accessor for RecentCallRecentItemMetadata);
        if (!v37)
        {
          (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x1A8))(v60, v40);
          __swift_project_boxed_opaque_existential_1(v60, v61);
          uint64_t v45 = OUTLINED_FUNCTION_30_15();
          v46(v45);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
          break;
        }
      }
      BOOL v41 = RecentsCallItem.wantsStagingArea.getter();
      RecentsListViewController.joinConversationLink(_:wantsStagingArea:)(v37, v41);
LABEL_20:
      swift_release();
      swift_bridgeObjectRelease();

      break;
  }
LABEL_26:
  OUTLINED_FUNCTION_28();
}

void RecentsListViewController.engaged(with:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_27_3();
  type metadata accessor for RecentsCallItemType(v1);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (void **)((char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v0, (uint64_t)v4, (void (*)(void))type metadata accessor for RecentsCallItemType);
  OUTLINED_FUNCTION_45_4();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    uint64_t v7 = v4[2];
    v11[1] = *v4;
    _OWORD v11[2] = v5;
    void v11[3] = v7;
    ConversationLink.prevailingSuggestion.getter();
    if (v8)
    {
      uint64_t v9 = v8;
      RecentsListViewController.linkController.getter();
      OUTLINED_FUNCTION_17_8();
      (*(void (**)(void *))(v10 + 328))(v9);
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of RecentsCallItem((uint64_t)v4, (void (*)(void))type metadata accessor for RecentsCallItemType);
  }
}

void RecentsListViewController.joinConversationLink(_:wantsStagingArea:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  id v5 = a1;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v6 = v15;
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC870];
  }
  id v7 = objc_allocWithZone(MEMORY[0x1E4FADBE8]);
  id v8 = @nonobjc TUJoinConversationRequest.init(conversationLink:otherInvitedHandles:sendLetMeInRequest:)(v5, v6, 0);
  objc_msgSend(v8, sel_setVideoEnabled_, 1);
  if (one-time initialization token for joinLink != -1) {
    swift_once();
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  outlined bridged method (mbgnn) of @objc TUJoinConversationRequest.invitationPreferences.setter(v9, v8);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setWantsStagingArea_, a2 & 1);
  id v10 = objc_msgSend(v8, sel_setOriginatingUIType_, 15);
  uint64_t v11 = (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x298))(v10);
  if (v11)
  {
    uint64_t v12 = (void (*)(void))v11;
    id v13 = objc_msgSend(self, sel_sharedInstance);
    id v14 = objc_msgSend(v13, sel_callFilterController);

    LODWORD(v13) = objc_msgSend(v14, sel_shouldRestrictJoinConversationRequest_performSynchronously_, v8, 1);
    if (v13)
    {
      id v16 = v8;
      v12();

      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v12);
      goto LABEL_10;
    }
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v12);
  }
  id v16 = objc_msgSend(self, sel_sharedInstance);
  objc_msgSend(v16, sel_launchAppForJoinRequest_, v8);

LABEL_10:
}

void RecentsListViewController.joinOngoingConversation(_:)(void *a1)
{
  if (!objc_msgSend(a1, sel_state))
  {
    id v13 = TUConversation.joinConversationRequest()();
    uint64_t v14 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x298))();
    if (v14)
    {
      uint64_t v15 = (void (*)(void))v14;
      id v16 = objc_msgSend(self, sel_sharedInstance);
      id v17 = objc_msgSend(v16, sel_callFilterController);

      LODWORD(v16) = objc_msgSend(v17, sel_shouldRestrictJoinConversationRequest_performSynchronously_, v13, 1);
      if (v16)
      {
        id v20 = v13;
        v15();

        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v15);
LABEL_10:

        return;
      }
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v15);
    }
    id v20 = objc_msgSend(self, sel_sharedInstance);
    objc_msgSend(v20, sel_launchAppForJoinRequest_, v13);

    goto LABEL_10;
  }
  id v2 = objc_msgSend(self, sel_faceTimeShowInCallUIURL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v3 - 8);
  id v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v5, v9, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) != 1)
    {
      URL._bridgeToObjectiveC()(v10);
      uint64_t v12 = v11;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
      TUOpenURL();

      return;
    }
  }
  else
  {
    uint64_t v18 = type metadata accessor for URL();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v18);
  }
  __break(1u);
}

void *RecentsListViewController.conversationLink(at:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  RecentsListViewController.recentsCallItem(at:)();
  OUTLINED_FUNCTION_33_0(v0, 1, v4);
  if (v6)
  {
    outlined destroy of SystemUpdateNotice?(v0, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
    return 0;
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_34_9();
    _s15ConversationKit15RecentsCallItemVWObTm_0(v8, v9, v10);
    RecentsCallItem.conversationLink.getter();
    outlined destroy of RecentsCallItem(v1, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v7 = v13;
    if (v13)
    {
      id v11 = v13;
      outlined consume of ConversationLink?(v13);
    }
  }
  return v7;
}

Swift::Void __swiftcall RecentsListViewController.presentOnboardingViewController()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_0_20();
  if ((*(uint64_t (**)(void))(v2 + 208))())
  {
    OUTLINED_FUNCTION_59_3(v0, sel_dismissViewControllerAnimated_completion_);
    uint64_t v3 = *(void **)&v0[OBJC_IVAR___FTRecentsListViewController_onboardingController];
    uint64_t v4 = self;
    id v5 = v3;
    id v6 = objc_msgSend(v4, sel_sharedInstance);
    id v7 = objc_msgSend(v6, sel_contactStore);

    objc_msgSend(v5, sel_presentOnboardingControllerFrom_withContactStore_, v1, v7);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
  }
}

id protocol witness for PersonalNicknameMenuViewDelegate.presentOnboardingViewController() in conformance RecentsListViewController()
{
  return objc_msgSend(v0, sel_presentOnboardingViewController);
}

void RecentsListViewController.beginEditing()()
{
  objc_msgSend(v0, sel_setEditing_animated_, 1, 1);
  RecentsListViewController.updateLeftBarButton()();
}

void RecentsListViewController.endEditing()()
{
  objc_msgSend(v0, sel_setEditing_animated_, 0, 1);
  RecentsListViewController.updateLeftBarButton()();
}

id closure #1 in RecentsListViewController.editMenuItems.getter(uint64_t a1, void *a2)
{
  char v6 = 0;
  id v3 = objc_allocWithZone((Class)type metadata accessor for PersonalNicknameMenuView());
  id v4 = a2;
  return PersonalNicknameMenuView.init(displayContext:personalNicknameMenuViewDelegate:)(&v6, (uint64_t)a2, (uint64_t)&protocol witness table for RecentsListViewController);
}

void closure #1 in RecentsListViewController.selectActionItem.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  id v3 = (void *)MEMORY[0x1C8776240](v2);
  objc_msgSend(v3, sel_beginEditing);
}

id RecentsListViewController.doneEditingBarButtonItem.getter()
{
  v3[3] = type metadata accessor for RecentsListViewController(0);
  v3[0] = v0;
  objc_allocWithZone(MEMORY[0x1E4FB14A8]);
  id v1 = v0;
  return @nonobjc UIBarButtonItem.init(barButtonSystemItem:target:action:)(0, v3, (uint64_t)sel_endEditing);
}

void RecentsListViewController.didSelect(_:didSelectItemAt:)()
{
  OUTLINED_FUNCTION_13_26();
  OUTLINED_FUNCTION_143_0();
  if (objc_msgSend(*(id *)(v1 + OBJC_IVAR___FTRecentsListViewController_featureFlags), sel_recentsCallTapTargetsEnabled))
  {
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v4 = objc_msgSend(v0, sel_cellForItemAtIndexPath_, isa);

    if (!v4) {
      id v4 = v0;
    }
    RecentsListViewController.showDetailsAtIndexPath(_:from:)(v2);
  }
  else
  {
    RecentsListViewController.joinCall(at:)();
  }
  objc_msgSend(v0, sel_deselectItemAtIndexPath_animated_, IndexPath._bridgeToObjectiveC()().super.isa, 1);
  OUTLINED_FUNCTION_12_2();
}

void RecentsListViewController.collectionView(_:didSelectItemAt:)()
{
  OUTLINED_FUNCTION_143_0();
  if (objc_msgSend(v1, sel_isEditing))
  {
    id v2 = RecentsListViewController.deleteButtonItem.getter();
    outlined bridged method (pb) of @objc UICollectionView.indexPathsForSelectedItems.getter(v0);
    OUTLINED_FUNCTION_115();
    objc_msgSend(v2, sel_setEnabled_, v0 != 0);
  }
  else
  {
    OUTLINED_FUNCTION_34_9();
    RecentsListViewController.didSelect(_:didSelectItemAt:)();
  }
}

void RecentsListViewController.collectionView(_:didDeselectItemAt:)(void *a1)
{
  if (objc_msgSend(a1, sel_isEditing))
  {
    id v2 = RecentsListViewController.deleteButtonItem.getter();
    outlined bridged method (pb) of @objc UICollectionView.indexPathsForSelectedItems.getter(a1);
    OUTLINED_FUNCTION_115();
    objc_msgSend(v2, sel_setEnabled_, a1 != 0);
  }
}

void RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)()
{
  OUTLINED_FUNCTION_31();
  id v3 = v2;
  id v4 = RecentsListViewController.conversationLink(at:)();
  if (v4)
  {
    id v5 = v4;
    uint64_t v51 = v3;
    uint64_t v6 = type metadata accessor for URL();
    OUTLINED_FUNCTION_4();
    uint64_t v54 = v7;
    uint64_t v9 = *(void *)(v8 + 64);
    MEMORY[0x1F4188790](v10);
    unint64_t v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v12 = objc_msgSend(v5, sel_URL);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v14 = OUTLINED_FUNCTION_8(v13);
    MEMORY[0x1F4188790](v14);
    OUTLINED_FUNCTION_5_1();
    if (v12)
    {
      id v52 = (char *)v43 - v11;
      uint64_t v53 = v43;
      uint64_t v50 = v0;
      MEMORY[0x1F4188790](v15);
      id v16 = (char *)v43 - v11;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = v54 + 32;
      uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
      v18(v1, v16, v6);
      __swift_storeEnumTagSinglePayload(v1, 0, 1, v6);
      OUTLINED_FUNCTION_33_0(v1, 1, v6);
      if (!v19)
      {
        v18((uint64_t)v52, (char *)v1, v6);
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
        uint64_t v48 = v43;
        uint64_t v21 = OUTLINED_FUNCTION_8(v20);
        MEMORY[0x1F4188790](v21);
        id v23 = (char *)v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v24 = type metadata accessor for IndexPath();
        BOOL v44 = *(void **)(v24 - 8);
        uint64_t v46 = v44;
        id v25 = (void (*)(void))v44[2];
        uint64_t v49 = v17;
        OUTLINED_FUNCTION_61_1();
        v25();
        v43[0] = v24;
        __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v24);
        uint64_t v47 = v18;
        uint64_t v26 = (uint64_t)v50 + OBJC_IVAR___FTRecentsListViewController_indexPathForMenu;
        OUTLINED_FUNCTION_6_1();
        outlined assign with take of Participant?((uint64_t)v23, v26, &demangling cache variable for type metadata for IndexPath?);
        swift_endAccess();
        uint64_t v45 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIContextMenuConfiguration);
        uint64_t v48 = v43;
        MEMORY[0x1F4188790](v45);
        OUTLINED_FUNCTION_104_0();
        v43[1] = v27 - v28;
        uint64_t v29 = v54;
        uint64_t v30 = (*(uint64_t (**)(void))(v54 + 16))();
        uint64_t v31 = v44;
        BOOL v44 = v43;
        uint64_t v32 = v31[8];
        MEMORY[0x1F4188790](v30);
        OUTLINED_FUNCTION_61_1();
        v25();
        unint64_t v33 = (v9 + ((*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v51 = v5;
        uint64_t v35 = v46;
        unint64_t v36 = (*((unsigned __int8 *)v46 + 80) + v34 + 8) & ~(unint64_t)*((unsigned __int8 *)v46 + 80);
        uint64_t v37 = swift_allocObject();
        OUTLINED_FUNCTION_63_0();
        v38();
        uint64_t v40 = v50;
        uint64_t v39 = v51;
        *(void *)(v37 + v33) = v50;
        *(void *)(v37 + v34) = v39;
        ((void (*)(unint64_t, char *, void))v35[4])(v37 + v36, (char *)v43 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v43[0]);
        id v41 = v40;
        specialized ParticipantsViewController.participantsViewControllerDelegate.getter();
        UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)();
        OUTLINED_FUNCTION_139();
        v42();
        goto LABEL_8;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload(v1, 1, 1, v6);
    }

    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for URL?);
  }
LABEL_8:
  OUTLINED_FUNCTION_28();
}

Class closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v55 = a5;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v6 = @nonobjc UIImage.__allocating_init(systemName:)();
  uint64_t v56 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  uint64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_conversationKit);
  v59._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001C379BD20;
  v9._countAndFlagsBits = 0xD000000000000010;
  v10.value._countAndFlagsBits = 0x61737265766E6F43;
  v10.value._object = (void *)0xEF74694B6E6F6974;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v59._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v59);

  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v16 + v15, (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  id v54 = v6;
  uint64_t v53 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v17 = @nonobjc UIImage.__allocating_init(systemName:)();
  id v18 = objc_msgSend(v7, sel_conversationKit);
  v19._countAndFlagsBits = 0xD000000000000011;
  v60._object = (void *)0xE000000000000000;
  v19._object = (void *)0x80000001C379BD60;
  v20.value._countAndFlagsBits = 0x61737265766E6F43;
  v20.value._object = (void *)0xEF74694B6E6F6974;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v60._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v60);

  uint64_t v22 = swift_allocObject();
  id v23 = v50;
  swift_unknownObjectWeakInit();
  uint64_t v24 = swift_allocObject();
  id v25 = (void *)v51;
  *(void *)(v24 + 16) = v51;
  *(void *)(v24 + 24) = v22;
  id v52 = v17;
  id v26 = v25;
  uint64_t v51 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v27 = @nonobjc UIImage.__allocating_init(systemName:)();
  id v28 = objc_msgSend(v7, sel_conversationKit);
  v29._countAndFlagsBits = 0xD000000000000012;
  v61._object = (void *)0xE000000000000000;
  v29._object = (void *)0x80000001C379BD80;
  v30.value._countAndFlagsBits = 0x61737265766E6F43;
  v30.value._object = (void *)0xEF74694B6E6F6974;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  v61._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v61);

  uint64_t v32 = type metadata accessor for IndexPath();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(void *)(v33 + 64);
  MEMORY[0x1F4188790](v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)&v50 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0), v55, v32);
  unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v36 + v35, (char *)&v50 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0), v32);
  id v37 = v27;
  id v38 = v23;
  uint64_t v39 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1C3769F40;
  id v41 = (void *)v53;
  NSBundle v42 = (void *)v51;
  *(void *)(v40 + 32) = v53;
  *(void *)(v40 + 40) = v42;
  *(void *)(v40 + 48) = v39;
  UIMenuElementSize v57 = v40;
  specialized Array._endMutation()();
  UIMenuElementSize v43 = v57;
  id v44 = v41;
  id v45 = v42;
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  v58.value.super.Class isa = 0;
  v58.is_nil = 0;
  Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v46, (Swift::String_optional)0, v58, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v43, v49).super.super.isa;

  return isa;
}

void closure #1 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)()
{
  id v2 = objc_msgSend(self, sel_generalPasteboard);
  uint64_t v0 = URL.absoluteString.getter();
  outlined bridged method (mbnn) of @objc UIViewController.title.setter(v0, v1, v2, (SEL *)&selRef_setString_);
}

void closure #2 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBF0]), sel_initWithTUConversationLink_, a2);
  uint64_t v5 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUStringShareItem);
  id v6 = objc_msgSend(self, sel_conversationKit);
  v25._object = (void *)0xE000000000000000;
  v7._object = (void *)0x80000001C3799820;
  v7._countAndFlagsBits = 0xD000000000000010;
  v8.value._countAndFlagsBits = 0x61737265766E6F43;
  v8.value._object = (void *)0xEF74694B6E6F6974;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v25);

  id v11 = TUStringShareItem.__allocating_init(message:)(v10._countAndFlagsBits, (uint64_t)v10._object);
  type metadata accessor for LinkShareActivityViewController();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1C37696D0;
  uint64_t v13 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TULinkShareItem);
  *(void *)(v12 + 32) = v4;
  *(void *)(v12 + 88) = v5;
  *(void *)(v12 + 56) = v13;
  *(void *)(v12 + 64) = v11;
  id v14 = v4;
  id v15 = v11;
  id v16 = LinkShareActivityViewController.__allocating_init(activityItems:applicationActivities:)(v12, 0);
  objc_msgSend(v16, sel_setOverrideUserInterfaceStyle_, 2);
  objc_msgSend(v16, sel_setAllowsCustomPresentationStyle_, 1);
  id v17 = objc_msgSend(self, sel_currentDevice);
  id v18 = objc_msgSend(v17, sel_userInterfaceIdiom);

  if (v18 == (id)1)
  {
    swift_beginAccess();
    Swift::String v19 = (void *)MEMORY[0x1C8776240](v3);
    if (v19)
    {
      Swift::String_optional v20 = v19;
      id v21 = objc_msgSend(v19, sel_traitCollection);

      id v22 = objc_msgSend(v21, sel_horizontalSizeClass);
      if (v22 == (id)2) {
        objc_msgSend(v16, sel_setModalPresentationStyle_, 2);
      }
    }
  }
  swift_beginAccess();
  id v23 = (void *)MEMORY[0x1C8776240](v3);
  if (v23)
  {
    uint64_t v24 = v23;
    objc_msgSend(v23, sel_presentViewController_animated_completion_, v16, 1, 0);
  }
}

uint64_t closure #3 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x318))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(v8 + v7, a3, v5);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 280))(v8);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  swift_retain();
  RecentsListViewController.removeRecentCallsAndReportIfNeeded(_:preparationHandler:)(v9, partial apply for closure #1 in closure #3 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:), v10);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

void closure #1 in closure #3 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(char a1)
{
  if (a1)
  {
    id Strong = (id)swift_unknownObjectUnownedLoadStrong();
    objc_msgSend(Strong, sel_setEditing_, 0);
  }
}

void UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)()
{
  OUTLINED_FUNCTION_121();
  uint64_t v20 = v2;
  uint64_t v21 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  OUTLINED_FUNCTION_143_0();
  if (!v10)
  {
    id v11 = 0;
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v12 = 0;
    goto LABEL_6;
  }
  uint64_t v18 = v1;
  uint64_t v19 = v9;
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 1107296256;
  id v16 = thunk for @escaping @callee_guaranteed () -> (@owned UIViewController?);
  id v17 = &block_descriptor_262;
  id v11 = _Block_copy(&v14);
  swift_retain();
  swift_release();
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v18 = v7;
  uint64_t v19 = v5;
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 1107296256;
  id v16 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  id v17 = &block_descriptor_259;
  uint64_t v12 = _Block_copy(&v14);
  swift_retain();
  swift_release();
LABEL_6:
  objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_configurationWithIdentifier_previewProvider_actionProvider_, v0, v11, v12);
  uint64_t v13 = OUTLINED_FUNCTION_29_0();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v13);
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v1);
  swift_unknownObjectRelease();
  _Block_release(v12);
  _Block_release(v11);
  OUTLINED_FUNCTION_2_22();
}

UITargetedPreview_optional __swiftcall RecentsListViewController.collectionView(_:previewForHighlightingContextMenuWithConfiguration:)(UICollectionView *_, UIContextMenuConfiguration previewForHighlightingContextMenuWithConfiguration)
{
  OUTLINED_FUNCTION_31();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_16_0();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_38_7();
  uint64_t v10 = v2 + OBJC_IVAR___FTRecentsListViewController_indexPathForMenu;
  OUTLINED_FUNCTION_2();
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?(v10, v3, &demangling cache variable for type metadata for IndexPath?);
  OUTLINED_FUNCTION_33_0(v3, 1, v6);
  if (v11)
  {
    outlined destroy of SystemUpdateNotice?(v3, &demangling cache variable for type metadata for IndexPath?);
  }
  else
  {
    OUTLINED_FUNCTION_63_0();
    v12();
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v14 = objc_msgSend(v5, sel_cellForItemAtIndexPath_, isa);

    if (v14)
    {
      MEMORY[0x1F4188790](v15);
      OUTLINED_FUNCTION_104_0();
      __swift_storeEnumTagSinglePayload(v16 - v17, 1, 1, v6);
      OUTLINED_FUNCTION_6_1();
      uint64_t v18 = OUTLINED_FUNCTION_29_0();
      outlined assign with take of Participant?(v18, v19, v20);
      swift_endAccess();
      id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B28]), sel_init);
      id v22 = objc_msgSend(self, sel_clearColor);
      objc_msgSend(v21, sel_setBackgroundColor_, v22);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITargetedPreview);
      id v23 = (UIView *)OUTLINED_FUNCTION_45_4();
      UITargetedPreview.__allocating_init(view:parameters:)(v23, v24);
    }
    uint64_t v25 = OUTLINED_FUNCTION_30_15();
    v26(v25);
  }
  OUTLINED_FUNCTION_28();
  result.value.super.Class isa = v27;
  result.is_nil = v28;
  return result;
}

void RecentsListViewController.collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v28 = v0;
  uint64_t v4 = v3;
  if (v5 == 0xD00000000000001CLL && v2 == 0x80000001C379AFE0
    || (OUTLINED_FUNCTION_29_0(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v6 = type metadata accessor for IndexPath();
    OUTLINED_FUNCTION_4();
    uint64_t v8 = v7;
    MEMORY[0x1F4188790](v9);
    OUTLINED_FUNCTION_38_7();
    uint64_t v10 = specialized ParticipantsViewController.participantsViewControllerDelegate.getter();
    MEMORY[0x1C876F250](v10);
    char v11 = static IndexPath.== infix(_:_:)();
    id v27 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v27(v1, v6);
    if (v11)
    {
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationKit);
      MEMORY[0x1F4188790](v13);
      OUTLINED_FUNCTION_38_7();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v4, v6);
      swift_bridgeObjectRetain_n();
      id v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        v26[1] = v26;
        *(_DWORD *)uint64_t v16 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v17 = OUTLINED_FUNCTION_29_0();
        uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2080;
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1F418BF80]);
        uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = OUTLINED_FUNCTION_148_0();
        v23(v22);
        _os_log_impl(&dword_1C2F90000, v14, v15, "Ending Displaying SupplementalView of kind %s at index %s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v24 = OUTLINED_FUNCTION_148_0();
        v25(v24);
      }

      *(unsigned char *)(v28 + OBJC_IVAR___FTRecentsListViewController_headerViewIsPresented) = 0;
      RecentsListViewController.tipKitStopObservation()();
    }
  }
  OUTLINED_FUNCTION_28();
}

uint64_t RecentsListViewController.showLinkDetailViewController(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15ConversationKit15RecentsCallItemVWOcTm_0(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for RecentsCallItem);
  type metadata accessor for LinkDetailViewModel();
  swift_allocObject();
  uint64_t result = LinkDetailViewModel.init(recentsCallItem:)((uint64_t)v6);
  if (result)
  {
    uint64_t v8 = result;
    outlined init with copy of RecentCallDetailControllerFactoryProtocol?((uint64_t)v2 + OBJC_IVAR___FTRecentsListViewController_detailControllerFactory, (uint64_t)&v16, &demangling cache variable for type metadata for RecentCallDetailControllerFactoryProtocol?);
    if (v17)
    {
      outlined init with take of Notice(&v16, (uint64_t)v18);
      uint64_t v9 = *(void (**)(uint64_t, _UNKNOWN **))(*(void *)v8 + 416);
      uint64_t v10 = swift_unknownObjectRetain();
      v9(v10, &protocol witness table for RecentsListViewController);
      swift_retain();
      uint64_t v11 = RecentsListViewController.linkController.getter();
      outlined init with copy of Conversation((uint64_t)v18, (uint64_t)&v16);
      id v12 = objc_allocWithZone((Class)type metadata accessor for LinkDetailViewController());
      id v13 = LinkDetailViewController.init(viewModel:linkController:detailControllerFactory:)(v8, v11, (uint64_t)&v16);
      id v14 = objc_msgSend(v2, sel_navigationController);
      if (v14)
      {
        os_log_type_t v15 = v14;
        objc_msgSend(v14, sel_pushViewController_animated_, v13, 1);
      }
      RecentsListViewController.engaged(with:)();

      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    }
    else
    {
      swift_release();
      return outlined destroy of SystemUpdateNotice?((uint64_t)&v16, &demangling cache variable for type metadata for RecentCallDetailControllerFactoryProtocol?);
    }
  }
  return result;
}

Swift::Void __swiftcall RecentsListViewController.showLinkDetailViewController(for:)(Swift::String a1)
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_4_15();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = OUTLINED_FUNCTION_82_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  if (OUTLINED_FUNCTION_117())
  {
    OUTLINED_FUNCTION_158();
    v7();
    OUTLINED_FUNCTION_17_8();
    uint64_t v9 = (void *)(*(uint64_t (**)(void))(v8 + 168))();
    swift_release();
    OUTLINED_FUNCTION_42_9();
    uint64_t v10 = OUTLINED_FUNCTION_30_15();
    v11(v10);

    OUTLINED_FUNCTION_33_0(v1, 1, v5);
    if (v12)
    {
      outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v13 = OUTLINED_FUNCTION_25_15();
      *(_OWORD *)(v13 + 16) = xmmword_1C3769620;
      swift_bridgeObjectRetain();
      uint64_t v14 = MEMORY[0x1E4FBB1A0];
      uint64_t v15 = String.init<A>(reflecting:)();
      uint64_t v17 = v16;
      *(void *)(v13 + 56) = v14;
      *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v13 + 32) = v15;
      *(void *)(v13 + 40) = v17;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      _s15ConversationKit15RecentsCallItemVWObTm_0(v1, v2, (void (*)(void))type metadata accessor for RecentsCallItem);
      RecentsListViewController.showLinkDetailViewController(for:)(v2);
      outlined destroy of RecentsCallItem(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
    }
    OUTLINED_FUNCTION_28();
  }
  else
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_30_15();
    OUTLINED_FUNCTION_28();
    RecentsListViewController.pseudonymForDeferredLinkDetailPresentation.setter(v18, v19);
  }
}

void RecentsListViewController.handleDeferredLinkDetailPresentation()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___FTRecentsListViewController_pseudonymForDeferredLinkDetailPresentation + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR___FTRecentsListViewController_pseudonymForDeferredLinkDetailPresentation);
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = v2;
    v3._object = v1;
    RecentsListViewController.showLinkDetailViewController(for:)(v3);
    swift_bridgeObjectRelease();
    RecentsListViewController.pseudonymForDeferredLinkDetailPresentation.setter(0, 0);
  }
}

void RecentsListViewController.showVideoPlayerForMessage(withUUID:bypassSafety:)()
{
  OUTLINED_FUNCTION_31();
  LODWORD(v50) = v3;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = OUTLINED_FUNCTION_82_0();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  if ((OUTLINED_FUNCTION_117() & 1) != 0
    && (uint64_t v10 = MEMORY[0x1E4FBC8C8],
        uint64_t v11 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x318),
        v11(),
        OUTLINED_FUNCTION_17_8(),
        char v13 = (*(uint64_t (**)(void))(v12 + 152))(),
        uint64_t v14 = swift_release(),
        (v13 & 1) != 0))
  {
    ((void (*)(uint64_t))v11)(v14);
    OUTLINED_FUNCTION_17_8();
    uint64_t v16 = (void *)(*(uint64_t (**)(void))(v15 + 168))();
    swift_release();
    OUTLINED_FUNCTION_42_9();
    (*(void (**)(uint64_t))(v17 + 448))(v5);

    OUTLINED_FUNCTION_33_0(v1, 1, v8);
    if (v18)
    {
      outlined destroy of SystemUpdateNotice?(v1, (uint64_t *)&demangling cache variable for type metadata for RecentsCallItem?);
      if (one-time initialization token for videoMessaging != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = (uint8_t *)__swift_project_value_buffer(v19, (uint64_t)static Logger.videoMessaging);
      uint64_t v21 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_4();
      uint64_t v23 = v22;
      MEMORY[0x1F4188790](v24);
      OUTLINED_FUNCTION_62();
      uint64_t v25 = *(void (**)(uint64_t))(v23 + 16);
      uint64_t v26 = OUTLINED_FUNCTION_74();
      v25(v26);
      id v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        OUTLINED_FUNCTION_37();
        uint64_t v49 = OUTLINED_FUNCTION_45_5();
        uint64_t v52 = v49;
        uint64_t v50 = v48;
        *(_DWORD *)uint64_t v20 = 136315138;
        v48[1] = v20 + 4;
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        v48[0] = v48;
        uint64_t v30 = OUTLINED_FUNCTION_8(v29);
        MEMORY[0x1F4188790](v30);
        uint64_t v32 = (char *)v48 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, uint64_t, uint64_t))v25)(v32, v10, v21);
        OUTLINED_FUNCTION_150((uint64_t)v32, 0);
        uint64_t v33 = specialized >> prefix<A>(_:)((uint64_t)v32);
        unint64_t v35 = v34;
        outlined destroy of SystemUpdateNotice?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_50_1();
        v36();
        _os_log_impl(&dword_1C2F90000, v27, v28, "Failed to look up video message with uuid %s to launch video player", v20, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        OUTLINED_FUNCTION_50_1();
        v47();
      }
    }
    else
    {
      _s15ConversationKit15RecentsCallItemVWObTm_0(v1, v2, (void (*)(void))type metadata accessor for RecentsCallItem);
      RecentsListViewController.showVideoPlayerForMessage(targetItem:bypassSafety:)(v2, v50 & 1);
      outlined destroy of RecentsCallItem(v2, (void (*)(void))type metadata accessor for RecentsCallItem);
    }
  }
  else
  {
    uint64_t v37 = (uint64_t)RecentsListViewController.viewDidFinishInitialLoad.getter();
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    uint64_t v39 = OUTLINED_FUNCTION_30(v38, (uint64_t)static Logger.videoMessaging);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_107(v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v41 = 67109120;
      LODWORD(v52) = v37 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v39, (os_log_type_t)v1, "Delay video message showing viewLoaded: %{BOOL}d", v41, 8u);
      OUTLINED_FUNCTION_3();
    }

    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v43 = OUTLINED_FUNCTION_8(v42);
    MEMORY[0x1F4188790](v43);
    OUTLINED_FUNCTION_80();
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_124();
    v44();
    OUTLINED_FUNCTION_60_2(v37);
    OUTLINED_FUNCTION_6_1();
    uint64_t v45 = OUTLINED_FUNCTION_74();
    outlined assign with take of Participant?(v45, v46, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_endAccess();
  }
  OUTLINED_FUNCTION_28();
}

void RecentsListViewController.showVideoPlayerForMessage(targetItem:bypassSafety:)(uint64_t a1, int a2)
{
  int v3 = v2;
  unsigned int v6 = objc_msgSend(v3, sel_isViewLoaded);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  if (!v6)
  {
LABEL_9:
    if (objc_msgSend(v3, sel_isViewLoaded)
      && (uint64_t v23 = (*(uint64_t (**)(void))((*v7 & *v3) + 0x318))(),
          char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 152))(v23),
          swift_release(),
          (v24 & 1) != 0))
    {
      if (one-time initialization token for videoMessaging != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.videoMessaging);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v28 = 0;
        _os_log_impl(&dword_1C2F90000, v26, v27, "Not showing video message: Video message missing media url.", v28, 2u);
        MEMORY[0x1C87760E0](v28, -1, -1);
      }
    }
    else
    {
      if (one-time initialization token for videoMessaging != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.videoMessaging);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_1C2F90000, v30, v31, "Not showing Video message: view is not loaded or in background.", v32, 2u);
        MEMORY[0x1C87760E0](v32, -1, -1);
      }

      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v34 = *(void *)(*(void *)(v33 - 8) + 64);
      MEMORY[0x1F4188790](v33 - 8);
      unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v36 = (void *)RecentsCallItem.messageIndicatorViewModel.getter();
      if (v36)
      {
        uint64_t v37 = v36;
        id v38 = objc_msgSend(v36, sel_messageUUID);

        MEMORY[0x1F4188790](v39);
        if (v38)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v40 = 0;
        }
        else
        {
          uint64_t v40 = 1;
        }
        uint64_t v42 = type metadata accessor for UUID();
        __swift_storeEnumTagSinglePayload((uint64_t)&v51[-v35], v40, 1, v42);
        outlined init with take of ConversationControlsRecipe?((uint64_t)&v51[-v35], (uint64_t)&v51[-v35], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      else
      {
        uint64_t v41 = type metadata accessor for UUID();
        __swift_storeEnumTagSinglePayload((uint64_t)&v51[-v35], 1, 1, v41);
      }
      uint64_t v43 = (uint64_t)v3 + OBJC_IVAR___FTRecentsListViewController_messageUUIDForDeferredPresentation;
      swift_beginAccess();
      outlined assign with take of Participant?((uint64_t)&v51[-v35], v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      swift_endAccess();
    }
    return;
  }
  int v52 = a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v55 = v51;
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = &v51[-v14];
  uint64_t v16 = (void *)RecentsCallItem.messageIndicatorViewModel.getter();
  if (!v16)
  {
    __swift_storeEnumTagSinglePayload((uint64_t)&v51[-v14], 1, 1, v8);
    uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_8:
    outlined destroy of SystemUpdateNotice?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
    goto LABEL_9;
  }
  uint64_t v17 = v16;
  uint64_t v53 = v9;
  id v54 = v51;
  id v18 = objc_msgSend(v16, sel_mediaURL);

  MEMORY[0x1F4188790](v19);
  if (v18)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 1;
  }
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  __swift_storeEnumTagSinglePayload((uint64_t)&v51[-v14], v20, 1, v8);
  outlined init with take of ConversationControlsRecipe?((uint64_t)&v51[-v14], (uint64_t)&v51[-v14], &demangling cache variable for type metadata for URL?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&v51[-v14], 1, v8);
  uint64_t v22 = v53;
  if (EnumTagSinglePayload == 1) {
    goto LABEL_8;
  }
  uint64_t v44 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 32))(v11, v15, v8);
  uint64_t v45 = (*(uint64_t (**)(uint64_t))((*v7 & *v3) + 0x318))(v44);
  char v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 152))(v45);
  swift_release();
  if ((v46 & 1) == 0)
  {
    (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v11, v8);
    goto LABEL_9;
  }
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.videoMessaging);
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl(&dword_1C2F90000, v48, v49, "Presenting video message player", v50, 2u);
    MEMORY[0x1C87760E0](v50, -1, -1);
  }

  RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)((uint64_t)v11, a1, v52 & 1);
  (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v11, v8);
}

Swift::Void __swiftcall RecentsListViewController.showSafetyIntervention()()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SCUIInterventionViewController);
  uint64_t v1 = specialized ParticipantsViewController.participantsViewControllerDelegate.getter();
  id v3 = @nonobjc SCUIInterventionViewController.__allocating_init(workflow:contextDictionary:)(v1, v2);
  objc_msgSend(v3, sel_setInterventionDelegate_, v0);
  objc_msgSend(v3, sel_setModalInPresentation_, 1);
  objc_msgSend(v3, sel_setModalPresentationStyle_, 2);
  objc_msgSend(v0, sel_presentViewController_animated_completion_, v3, 1, 0);
}

void closure #1 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x318))();

    unsigned int v6 = (void *)(*(uint64_t (**)(void))(*(void *)v5 + 168))();
    uint64_t v7 = swift_release();
    (*(void (**)(uint64_t))((*v4 & *v6) + 0x228))(v7);
  }
}

void *closure #2 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x1C8776240](v1);
  if (result)
  {
    id v3 = result;
    objc_msgSend(result, sel_dismissViewControllerAnimated_completion_, 1, 0);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
    MEMORY[0x1F4188790](v4 - 8);
    unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v7 = type metadata accessor for IndexPath();
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v7);
    RecentsListViewController.joinCall(for:indexPath:)();

    return (void *)outlined destroy of SystemUpdateNotice?((uint64_t)v6, &demangling cache variable for type metadata for IndexPath?);
  }
  return result;
}

void closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  RecentsCallItem.tuHandles.getter();
  specialized Collection.first.getter();
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = type metadata accessor for URLComponents();
    uint64_t v45 = v41;
    uint64_t v44 = *(void *)(v2 - 8);
    MEMORY[0x1F4188790](v2);
    uint64_t v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    URLComponents.init()();
    URLComponents.scheme.setter();
    URLComponents.path.setter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
    type metadata accessor for URLQueryItem();
    uint64_t v5 = swift_allocObject();
    long long v46 = xmmword_1C3769620;
    *(_OWORD *)(v5 + 16) = xmmword_1C3769620;
    id v43 = v1;
    id v6 = objc_msgSend(v1, sel_value);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    URLComponents.queryItems.setter();
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](v7);
    uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
    MEMORY[0x1F4188790](v11 - 8);
    URLComponents.url.getter();
    if (__swift_getEnumTagSinglePayload((uint64_t)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v7) == 1)
    {
      uint64_t v13 = v44;
      outlined destroy of SystemUpdateNotice?((uint64_t)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for URL?);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v42 = static OS_os_log.conversationKit;
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = v46;
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URLComponents?);
      MEMORY[0x1F4188790](v15 - 8);
      uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v18 = v13;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v4, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v2);
      uint64_t v19 = specialized >> prefix<A>(_:)((uint64_t)v17);
      uint64_t v20 = v2;
      uint64_t v22 = v21;
      outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for URLComponents?);
      *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v14 + 32) = v19;
      *(void *)(v14 + 40) = v22;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v20);
    }
    else
    {
      v41[1] = v41;
      uint64_t v42 = v2;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      v41[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v46;
      MEMORY[0x1F4188790](v23);
      char v24 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v10, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v7);
      uint64_t v25 = specialized >> prefix<A>(_:)((uint64_t)v24);
      uint64_t v27 = v26;
      outlined destroy of SystemUpdateNotice?((uint64_t)v24, &demangling cache variable for type metadata for URL?);
      *(void *)(v23 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v28 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v23 + 64) = v28;
      *(void *)(v23 + 32) = v25;
      *(void *)(v23 + 40) = v27;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v29);
      os_log_type_t v31 = v30;
      id v47 = 0;
      int v32 = TUOpenURLWithError();

      id v33 = v47;
      if (v32)
      {
        id v34 = v47;

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v42);
      }
      else
      {
        uint64_t v35 = static OS_os_log.conversationKit;
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = v46;
        uint64_t v37 = v44;
        if (v33)
        {
          id v47 = v33;
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSError);
          *(void *)&long long v46 = v35;
          id v38 = v33;
          uint64_t v39 = String.init<A>(reflecting:)();
        }
        else
        {
          unint64_t v40 = 0xE300000000000000;
          uint64_t v39 = 7104878;
        }
        *(void *)(v36 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v36 + 64) = v28;
        *(void *)(v36 + 32) = v39;
        *(void *)(v36 + 40) = v40;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v42);
      }
    }
  }
}

void closure #4 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    objc_msgSend(v2, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

void closure #5 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for RecentsCallItem(0) + 48));
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
      if ((v1 & 0xC000000000000001) != 0) {
        id v3 = (id)MEMORY[0x1C87744F0](0, v1);
      }
      else {
        id v3 = *(id *)(v1 + 32);
      }
      id v4 = v3;
      swift_bridgeObjectRelease();
      CNContact.block()();

      return;
    }
  }
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CNContact.block()()
{
  OUTLINED_FUNCTION_26_3();
  uint64_t v42 = v4;
  uint64_t v43 = v5;
  if (one-time initialization token for conversationKit != -1) {
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationKit);
    uint64_t v7 = (char *)(id)v0;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    uint64_t v10 = (uint64_t)&selRef_trailingBarAlpha;
    unint64_t v11 = 0x1F674F000uLL;
    if (OUTLINED_FUNCTION_105(v9))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v41[0] = v39;
      *(_DWORD *)uint64_t v12 = 136315394;
      id v13 = objc_msgSend(v7, sel_phoneNumbers);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v2 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNLabeledValue]);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)v41);
      OUTLINED_FUNCTION_157_1();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v10 = 0x1E648A000;
      uint64_t v3 = (uint64_t)[v7 (SEL)0x1F674F318];
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v41);
      OUTLINED_FUNCTION_157_1();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v8, (os_log_type_t)v1, "Block: blocking phoneNumbers %s \n\n emailAddreses: %s", (uint8_t *)v12, 0x16u);
      unint64_t v11 = v39;
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    id v18 = [v7 *(SEL *)(v10 + 2552)];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v41[0] = MEMORY[0x1E4FBC860];
    if (v1 >> 62)
    {
      OUTLINED_FUNCTION_156();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      OUTLINED_FUNCTION_123();
    }
    unint64_t v40 = v7;
    if (!v10)
    {
      swift_bridgeObjectRelease();
      unint64_t v0 = MEMORY[0x1E4FBC860];
      goto LABEL_23;
    }
    if (v10 < 1) {
      break;
    }
    uint64_t v19 = 0;
    unint64_t v11 = v1 & 0xC000000000000001;
    do
    {
      if (v11) {
        id v20 = (id)MEMORY[0x1C87744F0](v19, v1);
      }
      else {
        id v20 = *(id *)(v1 + 8 * v19 + 32);
      }
      uint64_t v2 = v20;
      id v21 = objc_msgSend(v20, sel_value);
      id v22 = objc_msgSend(v21, sel_digits);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v23 = (id)TUHomeCountryCode();
      if (v23)
      {
        char v24 = v23;
        uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v7 = v25;
      }
      else
      {
        uint64_t v3 = 0;
        uint64_t v7 = 0;
      }
      id v26 = objc_allocWithZone(MEMORY[0x1E4FADC48]);
      id v27 = OUTLINED_FUNCTION_34_10();

      if (v27)
      {
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_68();
        if (v28) {
          OUTLINED_FUNCTION_40_8();
        }
        OUTLINED_FUNCTION_122_0();
        specialized Array._endMutation()();
      }
      ++v19;
    }
    while (v10 != v19);
    swift_bridgeObjectRelease();
    unint64_t v0 = v41[0];
LABEL_23:
    swift_bridgeObjectRelease();
    if (v0 >> 62)
    {
      OUTLINED_FUNCTION_66();
      unint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      OUTLINED_FUNCTION_120_0();
    }
    if (v1)
    {
      self;
      OUTLINED_FUNCTION_151_0();
      while (1)
      {
        uint64_t v2 = (void *)(v3 - 4);
        id v29 = v11 ? (id)MEMORY[0x1C87744F0](v3 - 4, v0) : *(id *)(v0 + 8 * v3);
        uint64_t v30 = v29;
        uint64_t v31 = v3 - 3;
        if (__OFADD__(v2, 1)) {
          break;
        }
        id v32 = objc_msgSend((id)v10, sel_sharedPrivacyManager);
        if (!v32) {
          goto LABEL_51;
        }
        uint64_t v2 = v32;
        objc_msgSend(v32, v7 + 3021, 1, v30);

        ++v3;
        if (v31 == v1) {
          goto LABEL_33;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_33:
      swift_bridgeObjectRelease_n();
      unint64_t v0 = (unint64_t)objc_msgSend(v40, sel_emailAddresses);
      unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v33 >> 62)
      {
        OUTLINED_FUNCTION_32();
        unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
        if (!v0)
        {
LABEL_42:
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_16();
          return;
        }
      }
      else
      {
        OUTLINED_FUNCTION_114();
        if (!v0) {
          goto LABEL_42;
        }
      }
      self;
      OUTLINED_FUNCTION_177();
      while (1)
      {
        id v34 = v2 ? (id)MEMORY[0x1C87744F0](v3 - 4, v33) : *(id *)(v33 + 8 * v3);
        unint64_t v1 = (unint64_t)v34;
        uint64_t v35 = v3 - 3;
        if (__OFADD__(v3 - 4, 1)) {
          break;
        }
        id v36 = objc_msgSend((id)0x1E4FAD000, sel_sharedPrivacyManager);
        if (!v36) {
          goto LABEL_52;
        }
        uint64_t v37 = v36;
        id v38 = objc_msgSend((id)v1, sel_value);
        objc_msgSend(v37, v7 + 3992, 1, v38);

        ++v3;
        if (v35 == v0) {
          goto LABEL_42;
        }
      }
    }
    __break(1u);
LABEL_45:
    swift_once();
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

void closure #6 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    RecentsListViewController.showGetMoreHelp()();
  }
}

uint64_t RecentsListViewController.showGetMoreHelp()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F466F8]), sel_init);
  id v3 = objc_msgSend(self, sel_nonPersistentDataStore);
  objc_msgSend(v2, sel_setWebsiteDataStore_, v3);

  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F466F0]), sel_initWithFrame_configuration_, v2, 0.0, 0.0, 0.0, 0.0);
  uint64_t v5 = type metadata accessor for URLRequest();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(self, sel_waysToGetHelpURL);
  uint64_t v10 = type metadata accessor for URL();
  MEMORY[0x1F4188790](v10 - 8);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v12 = objc_msgSend(v4, sel_loadRequest_, isa);

  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EC0]), sel_init);
  objc_msgSend(v13, sel_setView_, v4);
  id v14 = objc_msgSend(v13, sel_navigationItem);
  void v22[3] = type metadata accessor for RecentsListViewController(0);
  v22[0] = v1;
  objc_allocWithZone(MEMORY[0x1E4FB14A8]);
  id v15 = v1;
  id v16 = @nonobjc UIBarButtonItem.init(barButtonSystemItem:target:action:)(0, v22, (uint64_t)sel_dismissMoreHelp);
  objc_msgSend(v14, sel_setRightBarButtonItem_, v16);

  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB19E8]), sel_initWithRootViewController_, v13);
  objc_msgSend(v17, sel_setModalPresentationStyle_, 2);
  id v18 = objc_msgSend(v15, sel_presentedViewController);
  if (!v18) {
    goto LABEL_4;
  }
  uint64_t v19 = v18;
  type metadata accessor for VideoMessagePlayerViewController();
  id v20 = (id)swift_dynamicCastClass();
  if (!v20)
  {

LABEL_4:
    id v20 = v15;
  }
  objc_msgSend(v20, sel_presentViewController_animated_completion_, v17, 1, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void closure #8 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
}

uint64_t closure #1 in RecentsListViewController.handleDeferredVideoMessagePresentation()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v6);
  id v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(*(void *)a1 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v12 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      _s15ConversationKit15RecentsCallItemVWOcTm_0(v11, (uint64_t)v9, (void (*)(void))type metadata accessor for RecentsCallItem);
      if (closure #1 in closure #1 in RecentsListViewController.handleDeferredVideoMessagePresentation()((uint64_t)v9, a2))break; {
      outlined destroy of RecentsCallItem((uint64_t)v9, (void (*)(void))type metadata accessor for RecentsCallItem);
      }
      v11 += v12;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    _s15ConversationKit15RecentsCallItemVWObTm_0((uint64_t)v9, a3, (void (*)(void))type metadata accessor for RecentsCallItem);
    uint64_t v13 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v13 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a3, v13, 1, v6);
}

uint64_t closure #1 in closure #1 in RecentsListViewController.handleDeferredVideoMessagePresentation()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (char *)v35 - v6;
  uint64_t v8 = (void *)RecentsCallItem.messageIndicatorViewModel.getter();
  uint64_t v36 = v2;
  if (v8)
  {
    id v9 = v8;
    id v10 = objc_msgSend(v8, sel_messageUUID);

    MEMORY[0x1F4188790](v11);
    if (v10)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = type metadata accessor for UUID();
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v12 = type metadata accessor for UUID();
      uint64_t v13 = 1;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v35 - v6, v13, 1, v12);
    uint64_t v15 = outlined init with take of ConversationControlsRecipe?((uint64_t)v35 - v6, (uint64_t)v35 - v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v15 = __swift_storeEnumTagSinglePayload((uint64_t)v35 - v6, 1, 1, v14);
  }
  v35[3] = v35;
  MEMORY[0x1F4188790](v15);
  unint64_t v16 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v17 = (char *)v35 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)v35 - v16, a2, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v35 - v16, 0, 1, v18);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  v35[2] = v35;
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  id v23 = (char *)v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 56)];
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?((uint64_t)v7, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?((uint64_t)v35 - v16, v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v18);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v35 - v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    int v26 = __swift_getEnumTagSinglePayload(v24, 1, v18);
    if (v26 == 1) {
      id v27 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
    }
    else {
      id v27 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
    }
    if (v26 == 1) {
      char v28 = -1;
    }
    else {
      char v28 = 0;
    }
  }
  else
  {
    MEMORY[0x1F4188790](EnumTagSinglePayload);
    id v29 = (char *)v35 - v16;
    outlined init with copy of RecentCallDetailControllerFactoryProtocol?((uint64_t)v23, (uint64_t)v35 - v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v30 = __swift_getEnumTagSinglePayload(v24, 1, v18);
    if (v30 == 1)
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)v35 - v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v19 + 8))((char *)v35 - v16, v18);
      id v27 = (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?);
      char v28 = 0;
    }
    else
    {
      v35[1] = v35;
      MEMORY[0x1F4188790](v30);
      id v32 = (char *)v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v32, v24, v18);
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC38]);
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      v35[0] = v35;
      unint64_t v33 = *(void (**)(char *, uint64_t))(v19 + 8);
      v33(v32, v18);
      id v27 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v33(v29, v18);
    }
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v23, v27);
  return v28 & 1;
}

void closure #2 in RecentsListViewController.handleDeferredVideoMessagePresentation()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (one-time initialization token for videoMessaging != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.videoMessaging);
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void *)(v9 - 8);
    MEMORY[0x1F4188790](v9);
    uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v13(v12, a3, v9);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v30 = a1;
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v32 = v28;
      id v29 = v26;
      *(_DWORD *)unint64_t v16 = 136315138;
      void v26[2] = v16 + 4;
      id v27 = v16;
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      v26[1] = v26;
      MEMORY[0x1F4188790](v17 - 8);
      uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      v13(v19, (uint64_t)v12, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v9);
      uint64_t v20 = specialized >> prefix<A>(_:)((uint64_t)v19);
      unint64_t v22 = v21;
      uint64_t v23 = (uint64_t)v19;
      a1 = v30;
      outlined destroy of SystemUpdateNotice?(v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v24 = v27;
      _os_log_impl(&dword_1C2F90000, v14, v15, "Video message loaded. uuid %s", v27, 0xCu);
      uint64_t v25 = v28;
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v25, -1, -1);
      MEMORY[0x1C87760E0](v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }

    RecentsListViewController.clearDeferredVideoMessagePresetation()();
    RecentsListViewController.showVideoPlayerForMessage(targetItem:bypassSafety:)(a1, 0);
  }
}

id @nonobjc SCUIInterventionViewController.__allocating_init(workflow:contextDictionary:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.Class isa = 0;
  }
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_viewControllerWithWorkflow_contextDictionary_, a1, v3.super.isa);

  return v4;
}

void RecentsListViewController.didConfirm(forInterventionViewController:)()
{
  OUTLINED_FUNCTION_14();
  if (v1)
  {
    self;
    uint64_t v2 = (void *)swift_dynamicCastObjCClass();
    if (v2) {
      OUTLINED_FUNCTION_59_3(v2, sel_dismissViewControllerAnimated_completion_);
    }
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t)v0 + OBJC_IVAR___FTRecentsListViewController_messageUUIDForDeferredPresentation;
  OUTLINED_FUNCTION_2();
  outlined init with copy of RecentCallDetailControllerFactoryProtocol?(v8, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4UUIDV_s5NeverOytTg5141_s15ConversationKit25RecentsListViewControllerC10didConfirm015forInterventioneF0ySo25SCUIInterventionContainer_pSg_tFy10Foundation4UUIDVXEfU_0G3Kit0ijkL0CTf1cn_n((uint64_t)v7, v0);
  uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](updated);
  uint64_t v10 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_13_18(v10);
  OUTLINED_FUNCTION_6_1();
  uint64_t v11 = OUTLINED_FUNCTION_45_4();
  outlined assign with take of Participant?(v11, v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  OUTLINED_FUNCTION_15_0();
}

uint64_t RecentsListViewController.didReject(forInterventionViewController:)(uint64_t a1)
{
  if (a1)
  {
    self;
    uint64_t v3 = (void *)swift_dynamicCastObjCClass();
    if (v3) {
      OUTLINED_FUNCTION_59_3(v3, sel_dismissViewControllerAnimated_completion_);
    }
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v6 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_25_1(v2, v7, v8, v6);
  uint64_t v9 = v1 + OBJC_IVAR___FTRecentsListViewController_messageUUIDForDeferredPresentation;
  OUTLINED_FUNCTION_6_1();
  outlined assign with take of Participant?(v2, v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

void @objc RecentsListViewController.didConfirm(forInterventionViewController:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();
}

void RecentsListViewController.dismissMoreHelp()()
{
  id v1 = objc_msgSend(v0, sel_presentedViewController);
  if (v1)
  {
    uint64_t v2 = v1;
    type metadata accessor for VideoMessagePlayerViewController();
    id v3 = (id)swift_dynamicCastClass();
    if (v3) {
      goto LABEL_5;
    }
  }
  id v3 = v0;
LABEL_5:
  id v4 = v3;
  objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

uint64_t key path getter for AvatarViewControllerDelegateWrapper.hostingViewController : AvatarViewControllerDelegateWrapper@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t key path setter for AvatarViewControllerDelegateWrapper.hostingViewController : AvatarViewControllerDelegateWrapper(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60);
  id v4 = *a1;
  return v3(v2);
}

uint64_t AvatarViewControllerDelegateWrapper.hostingViewController.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

void AvatarViewControllerDelegateWrapper.hostingViewController.setter(void *a1)
{
}

void (*AvatarViewControllerDelegateWrapper.hostingViewController.modify(void *a1))()
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit35AvatarViewControllerDelegateWrapper_hostingViewController;
  void v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  OUTLINED_FUNCTION_6_1();
  v3[3] = MEMORY[0x1C8776240](v5);
  return AvatarViewControllerDelegateWrapper.hostingViewController.modify;
}

void AvatarViewControllerDelegateWrapper.hostingViewController.modify()
{
  OUTLINED_FUNCTION_171();
  swift_unknownObjectWeakAssign();
  if (v2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v0);
}

uint64_t AvatarViewControllerDelegateWrapper.hostingViewController(for:)()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 88))();
  if (!result)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_30(v3, (uint64_t)static Logger.conversationKit);
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (OUTLINED_FUNCTION_92(v5))
    {
      OUTLINED_FUNCTION_37();
      v11[0] = OUTLINED_FUNCTION_45_5();
      *uint64_t v0 = 136446210;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001C379B0A0, v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_73_0(&dword_1C2F90000, v6, v7, "AvatarViewControllerDelegateWrapper %{public}s: hostingViewController is unexpectedly nil, this is a fatal error.");
      OUTLINED_FUNCTION_100_0();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    v11[0] = 0;
    v11[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(105);
    v8._countAndFlagsBits = 0xD000000000000024;
    v8._object = (void *)0x80000001C379B070;
    String.append(_:)(v8);
    v9._object = (void *)0x80000001C379B0A0;
    v9._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0xD000000000000043;
    v10._object = (void *)0x80000001C379B0C0;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id AvatarViewControllerDelegateWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AvatarViewControllerDelegateWrapper.init()()
{
}

id AvatarViewControllerDelegateWrapper.__deallocating_deinit(uint64_t a1)
{
  return RecentsListViewController.__deallocating_deinit(a1, type metadata accessor for AvatarViewControllerDelegateWrapper);
}

void RecentsListViewController.peoplePickerInvited(_:withVideo:button:senderIdentity:messagesGroup:)()
{
  OUTLINED_FUNCTION_13_26();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
  OUTLINED_FUNCTION_17_8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v9 + 128))(v8, v6, v4, 0, v2);
  swift_release();
  id v10 = objc_msgSend(v0, sel_presentedViewController);
  if (v10)
  {
    OUTLINED_FUNCTION_59_3(v10, sel_dismissViewControllerAnimated_completion_);
    OUTLINED_FUNCTION_12_2();
  }
  else
  {
    OUTLINED_FUNCTION_12_2();
  }
}

Swift::Void __swiftcall RecentsListViewController.peoplePickerCancelled()()
{
  id v1 = objc_msgSend(v0, sel_presentedViewController);
  if (v1)
  {
    uint64_t v2 = v1;
    OUTLINED_FUNCTION_59_3(v1, sel_dismissViewControllerAnimated_completion_);
  }
  RecentsListViewController.fadeInNavigationController()();
}

void RecentsListViewController.fadeInNavigationController()()
{
  id v1 = objc_msgSend(v0, sel_navigationController);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_view);

    if (v3)
    {
      objc_msgSend(v3, sel_alpha);
      double v5 = v4;

      if (v5 == 0.0)
      {
        uint64_t v6 = self;
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v0;
        v10[4] = partial apply for closure #1 in RecentsListViewController.fadeInNavigationController();
        v10[5] = v7;
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1107296256;
        v10[2] = thunk for @escaping @callee_guaranteed () -> ();
        v10[3] = &block_descriptor_236;
        uint64_t v8 = _Block_copy(v10);
        id v9 = v0;
        swift_release();
        objc_msgSend(v6, sel_animateWithDuration_animations_, v8, 0.3);
        _Block_release(v8);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void RecentsListViewController.peoplePickerRequestedDialCall(using:video:contact:handle:senderIdentity:ttyType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OUTLINED_FUNCTION_0_20();
  (*(void (**)(void))(v13 + 472))();
  OUTLINED_FUNCTION_17_8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 136))(a1, a2, a3, a4, a5, a6, 1);
  swift_release();
  id v15 = objc_msgSend(v6, sel_presentedViewController);
  if (v15)
  {
    OUTLINED_FUNCTION_59_3(v15, sel_dismissViewControllerAnimated_completion_);
    OUTLINED_FUNCTION_1_0();
  }
  else
  {
    OUTLINED_FUNCTION_1_0();
  }
}

void RecentsListViewController.peoplePickerSentInvitation(with:facetimeUnavailablePeople:facetimeAvailablePeople:shouldAddOtherInvitedToRemoteMembers:)()
{
  OUTLINED_FUNCTION_13_26();
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
  OUTLINED_FUNCTION_17_8();
  uint64_t v1 = OUTLINED_FUNCTION_102();
  v2(v1);
  swift_release();
  id v3 = objc_msgSend(v0, sel_presentedViewController);
  if (v3)
  {
    OUTLINED_FUNCTION_59_3(v3, sel_dismissViewControllerAnimated_completion_);
    OUTLINED_FUNCTION_12_2();
  }
  else
  {
    OUTLINED_FUNCTION_12_2();
  }
}

uint64_t RecentsListViewController.peoplePickerRequestedUnknownContactPopover(for:sourceView:sourceRect:)(double a1, double a2, double a3, double a4)
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_0_20();
  uint64_t result = (*(uint64_t (**)(void))(v8 + 400))();
  if (result)
  {
    swift_getObjectType();
    uint64_t v10 = OUTLINED_FUNCTION_41_0();
    v11(v10, a1, a2, a3, a4);
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in RecentsListViewController.fadeInNavigationController()(void *a1)
{
  id v1 = objc_msgSend(a1, sel_navigationController);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_view);

    if (v3)
    {
      objc_msgSend(v3, sel_setAlpha_, 1.0);
    }
    else
    {
      __break(1u);
    }
  }
}

void RecentsListViewController.contactStoreDidChange(_:)()
{
  id v1 = v0;
  if (objc_msgSend(v0, sel_isViewLoaded))
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationKit);
    id v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C2F90000, v3, v4, "ContactStoreDidChange. Reload data.", v5, 2u);
      MEMORY[0x1C87760E0](v5, -1, -1);
    }

    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x318))();
    os_log_t oslog = (os_log_t)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 168))(v7);
    swift_release();
    (*(void (**)(void))((*v6 & (uint64_t)oslog->isa) + 0x228))();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationKit);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1C2F90000, oslog, v9, "ContactStoreDidChange. Skip reload data before view is loaded.", v10, 2u);
      MEMORY[0x1C87760E0](v10, -1, -1);
    }
  }
}

uint64_t @objc RecentsListViewController.deleteAllRecents(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_27_3();
  type metadata accessor for Notification();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_18_6();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = v4;
  a4(v5);

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_50_1();
  return v9();
}

void closure #1 in RecentsListViewController.showMakoUserAlert()()
{
  id v0 = objc_msgSend(self, sel_defaultWorkspace);
  if (v0)
  {
    id v1 = v0;
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    MEMORY[0x1F4188790](v2 - 8);
    os_log_type_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    URL.init(string:)();
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v7 = 0;
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) != 1)
    {
      URL._bridgeToObjectiveC()(v6);
      uint64_t v7 = v8;
      (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
    objc_msgSend(v1, sel_openSensitiveURL_withOptions_, v7, 0);
  }
}

uint64_t RecentsListViewController.coordinatorFinished(_:)()
{
  return RecentsListViewController.coordinatorFinished(_:)();
}

{
  uint64_t v0;

  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  OUTLINED_FUNCTION_30_15();
  os_log(_:dso:log:type:_:)();
  OUTLINED_FUNCTION_0_20();
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t RecentsListViewController.coordinatorFailed(_:)()
{
  return RecentsListViewController.coordinatorFinished(_:)();
}

uint64_t protocol witness for LinkCreationCoordinatorDelegate.coordinatorFinished(_:) in conformance RecentsListViewController()
{
  return RecentsListViewController.coordinatorFinished(_:)();
}

uint64_t protocol witness for LinkCreationCoordinatorDelegate.coordinatorFailed(_:) in conformance RecentsListViewController()
{
  return RecentsListViewController.coordinatorFailed(_:)();
}

void WeakBox<>.recentsHeaderButtonsView(_:didTapAction:)()
{
  OUTLINED_FUNCTION_31();
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.InvalidationReason?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_2();
  uint64_t v8 = MEMORY[0x1C8776240](v0 + 16);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = OUTLINED_FUNCTION_25_15();
    *(_OWORD *)(v10 + 16) = xmmword_1C3769620;
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    uint64_t v14 = swift_bridgeObjectRelease();
    if (v3)
    {
      unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0xE8))(v14);
      objc_msgSend(v9, sel_didTapNewLinkButtonFrom_, v16);
    }
    else
    {
      uint64_t v15 = type metadata accessor for Tips.InvalidationReason();
      __swift_storeEnumTagSinglePayload(v1, 1, 1, v15);
      RecentsListViewController.tipKitDismissTip(_:)(v1);
      outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Tips.InvalidationReason?);
      objc_msgSend(v9, sel_didTapNewCallButton);
    }
  }
  OUTLINED_FUNCTION_28();
}

void protocol witness for RecentsHeaderButtonsViewDelegate.recentsHeaderButtonsView(_:didTapAction:) in conformance <> WeakBox<A>()
{
}

uint64_t RecentsListViewController.didJoinCall(from:)()
{
  uint64_t v1 = type metadata accessor for RecentsCallItem(0);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v3 + 432))();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for IndexPath();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v8);
  RecentsListViewController.joinCall(for:indexPath:)();
  uint64_t v9 = OUTLINED_FUNCTION_29_0();
  outlined destroy of SystemUpdateNotice?(v9, v10);
  return outlined destroy of RecentsCallItem(v0, (void (*)(void))type metadata accessor for RecentsCallItem);
}

Swift::Void __swiftcall RecentsListViewController.setEditing(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  OUTLINED_FUNCTION_13_26();
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = (objc_class *)type metadata accessor for RecentsListViewController(0);
  v18.receiver = v2;
  v18.super_class = v9;
  id v10 = objc_msgSendSuper2(&v18, sel_setEditing_animated_, v8 & 1, v6 & 1);
  uint64_t v11 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x360);
  uint64_t v12 = (void *)((uint64_t (*)(id))v11)(v10);
  objc_msgSend(v12, sel_setEditing_, v8 & 1);

  id v13 = objc_msgSend(v2, sel_navigationController);
  if (v13)
  {
    uint64_t v14 = v13;
    objc_msgSend(v13, sel_setToolbarHidden_animated_, (v8 & 1) == 0, 1);
  }
  id v15 = RecentsListViewController.deleteButtonItem.getter();
  if (v8)
  {
    unint64_t v16 = (void *)v11();
    outlined bridged method (ob) of @objc UICollectionView.indexPathsForSelectedItems.getter(v16);
    OUTLINED_FUNCTION_115();
    BOOL v17 = v8 != 0;
  }
  else
  {
    BOOL v17 = 0;
  }
  objc_msgSend(v15, sel_setEnabled_, v17);

  OUTLINED_FUNCTION_12_2();
}

uint64_t RecentsListViewController.deleteButtonAction(_:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
  uint64_t result = outlined bridged method (ob) of @objc UICollectionView.indexPathsForSelectedItems.getter(v2);
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(result + 16))
    {
      uint64_t v5 = *(void *)(*(uint64_t (**)(void))((*v1 & *v0) + 0x318))();
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 280))(v4);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v7 = swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      RecentsListViewController.removeRecentCallsAndReportIfNeeded(_:preparationHandler:)(v6, partial apply for closure #1 in RecentsListViewController.deleteButtonAction(_:), v7);
      swift_bridgeObjectRelease();
      return swift_release_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void closure #1 in RecentsListViewController.deleteButtonAction(_:)(char a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a2 + 16;
    swift_beginAccess();
    uint64_t v3 = (void *)MEMORY[0x1C8776240](v2);
    if (v3)
    {
      uint64_t v4 = v3;
      objc_msgSend(v3, sel_endEditing);
    }
  }
}

Swift::Void __swiftcall CNContact.unblock()()
{
  OUTLINED_FUNCTION_26_3();
  unint64_t v5 = (unint64_t)objc_msgSend((id)v0, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  OUTLINED_FUNCTION_34_9();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v25 = MEMORY[0x1E4FBC860];
  if (v6 >> 62) {
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_123();
  while (1)
  {
    id v24 = (id)v0;
    if (!v1)
    {
      swift_bridgeObjectRelease();
      unint64_t v0 = MEMORY[0x1E4FBC860];
      goto LABEL_19;
    }
    if (v1 < 1) {
      break;
    }
    for (uint64_t i = 0; i != v1; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x1C87744F0](i, v6);
      }
      else {
        id v8 = *(id *)(v6 + 8 * i + 32);
      }
      uint64_t v2 = v8;
      unint64_t v5 = (unint64_t)objc_msgSend(v8, sel_value);
      id v9 = objc_msgSend((id)v5, sel_digits);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = (id)TUHomeCountryCode();
      if (v10)
      {
        unint64_t v5 = (unint64_t)v10;
        uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v4 = v11;
      }
      else
      {
        uint64_t v3 = 0;
        uint64_t v4 = 0;
      }
      id v12 = objc_allocWithZone(MEMORY[0x1E4FADC48]);
      id v13 = OUTLINED_FUNCTION_34_10();

      if (v13)
      {
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_68();
        if (v14) {
          OUTLINED_FUNCTION_40_8();
        }
        OUTLINED_FUNCTION_122_0();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v0 = v25;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v0 >> 62)
    {
      OUTLINED_FUNCTION_154();
      unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      OUTLINED_FUNCTION_120_0();
    }
    if (v6)
    {
      self;
      OUTLINED_FUNCTION_151_0();
      while (1)
      {
        uint64_t v2 = (void *)(v3 - 4);
        id v15 = v5 ? (id)MEMORY[0x1C87744F0](v3 - 4, v0) : *(id *)(v0 + 8 * v3);
        unint64_t v16 = v15;
        uint64_t v17 = v3 - 3;
        if (__OFADD__(v2, 1)) {
          break;
        }
        id v18 = objc_msgSend((id)v1, sel_sharedPrivacyManager);
        if (!v18) {
          goto LABEL_46;
        }
        uint64_t v2 = v18;
        objc_msgSend(v18, (SEL)(v4 + 3021), 0, v16);

        ++v3;
        if (v17 == v6) {
          goto LABEL_29;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_29:
      swift_bridgeObjectRelease_n();
      unint64_t v0 = (unint64_t)objc_msgSend(v24, sel_emailAddresses);
      unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v5 >> 62)
      {
        OUTLINED_FUNCTION_32();
        unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
        if (!v0)
        {
LABEL_38:
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_16();
          return;
        }
      }
      else
      {
        OUTLINED_FUNCTION_114();
        if (!v0) {
          goto LABEL_38;
        }
      }
      self;
      OUTLINED_FUNCTION_177();
      while (1)
      {
        id v19 = v2 ? (id)MEMORY[0x1C87744F0](v3 - 4, v5) : *(id *)(v5 + 8 * v3);
        unint64_t v6 = (unint64_t)v19;
        uint64_t v20 = v3 - 3;
        if (__OFADD__(v3 - 4, 1)) {
          break;
        }
        id v21 = objc_msgSend((id)0x1E4FAD000, sel_sharedPrivacyManager);
        if (!v21) {
          goto LABEL_47;
        }
        unint64_t v22 = v21;
        id v23 = objc_msgSend((id)v6, sel_value);
        objc_msgSend(v22, (SEL)(v4 + 3992), 0, v23);

        ++v3;
        if (v20 == v0) {
          goto LABEL_38;
        }
      }
    }
    __break(1u);
LABEL_41:
    OUTLINED_FUNCTION_155();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

Swift::Bool __swiftcall CNContact.isBlocked()()
{
  OUTLINED_FUNCTION_26_3();
  id v2 = objc_msgSend((id)v0, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v33 = MEMORY[0x1E4FBC860];
  if (v3 >> 62) {
    goto LABEL_40;
  }
  LOBYTE(v4) = OUTLINED_FUNCTION_123();
  while (1)
  {
    id v32 = (id)v0;
    if (!v1)
    {
      swift_bridgeObjectRelease();
      unint64_t v0 = MEMORY[0x1E4FBC860];
      goto LABEL_18;
    }
    if (v1 < 1) {
      break;
    }
    for (uint64_t i = 0; i != v1; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1C87744F0](i, v3);
      }
      else {
        id v6 = *(id *)(v3 + 8 * i + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_value);
      id v9 = objc_msgSend(v8, sel_digits);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = (id)TUHomeCountryCode();
      if (v10)
      {
        uint64_t v11 = v10;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      id v12 = objc_allocWithZone(MEMORY[0x1E4FADC48]);
      id v13 = OUTLINED_FUNCTION_34_10();

      if (v13)
      {
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_68();
        if (v14) {
          OUTLINED_FUNCTION_40_8();
        }
        OUTLINED_FUNCTION_122_0();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v0 = v33;
LABEL_18:
    swift_bridgeObjectRelease();
    if (v0 >> 62)
    {
      OUTLINED_FUNCTION_154();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v15 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (v15)
    {
      unint64_t v16 = self;
      uint64_t v17 = 4;
      while (1)
      {
        unint64_t v3 = v17 - 4;
        id v18 = (v0 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1C87744F0](v17 - 4, v0)
            : *(id *)(v0 + 8 * v17);
        id v19 = v18;
        uint64_t v20 = v17 - 3;
        if (__OFADD__(v3, 1)) {
          break;
        }
        id v4 = objc_msgSend(v16, sel_sharedPrivacyManager);
        if (!v4) {
          goto LABEL_45;
        }
        id v21 = v4;
        objc_msgSend(v4, sel_isIncomingCommunicationBlockedForPhoneNumber_, v19);

        ++v17;
        if (v20 == v15) {
          goto LABEL_28;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_28:
      swift_bridgeObjectRelease_n();
      unint64_t v0 = (unint64_t)objc_msgSend(v32, sel_emailAddresses);
      unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v22 >> 62)
      {
        OUTLINED_FUNCTION_32();
        unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
        if (!v0)
        {
LABEL_37:
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_16();
          return (char)v4;
        }
      }
      else
      {
        OUTLINED_FUNCTION_114();
        if (!v0) {
          goto LABEL_37;
        }
      }
      id v23 = self;
      uint64_t v24 = 4;
      while (1)
      {
        unint64_t v3 = v24 - 4;
        if ((v22 & 0xC000000000000001) != 0)
        {
          uint64_t v25 = OUTLINED_FUNCTION_74();
          id v26 = (id)MEMORY[0x1C87744F0](v25);
        }
        else
        {
          id v26 = *(id *)(v22 + 8 * v24);
        }
        id v27 = v26;
        uint64_t v28 = v24 - 3;
        if (__OFADD__(v3, 1)) {
          break;
        }
        id v4 = objc_msgSend(v23, sel_sharedPrivacyManager);
        if (!v4) {
          goto LABEL_46;
        }
        id v29 = v4;
        id v30 = objc_msgSend(v27, sel_value);
        objc_msgSend(v29, sel_isIncomingCommunicationBlockedForEmailAddress_, v30);

        ++v24;
        if (v28 == v0) {
          goto LABEL_37;
        }
      }
    }
    __break(1u);
LABEL_40:
    OUTLINED_FUNCTION_155();
    id v4 = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v1 = (uint64_t)v4;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return (char)v4;
}

Swift::Void __swiftcall TUHandle.unblock()()
{
  TUHandle.unblock()(0, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17,
    v18,
    v19,
    v20,
    v21,
    v22);
}

void @objc TUHandle.unblock()(void *a1)
{
  id v1 = a1;
  TUHandle.unblock()();
}

Swift::Void __swiftcall TUHandle.block()()
{
  TUHandle.unblock()(1, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17,
    v18,
    v19,
    v20,
    v21,
    v22);
}

void TUHandle.unblock()(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_26_3();
  a23 = v25;
  a24 = v26;
  char v28 = v27;
  id v29 = objc_msgSend(v24, sel_type);
  if (v29 == (id)1) {
    goto LABEL_19;
  }
  if (v29 == (id)2)
  {
    id v34 = objc_msgSend(v24, sel_value);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v35 = (id)TUHomeCountryCode();
    if (v35)
    {
      uint64_t v36 = v35;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v47 = objc_allocWithZone(MEMORY[0x1E4FADC48]);
    id v48 = OUTLINED_FUNCTION_85_0();
    if (v48)
    {
      os_log_type_t v49 = v48;
      id v50 = objc_msgSend(self, sel_sharedPrivacyManager);
      if (v50)
      {
        objc_msgSend(v50, sel_setBlockIncomingCommunication_forPhoneNumber_, v28 & 1, v49);

        goto LABEL_16;
      }
LABEL_21:
      __break(1u);
      return;
    }
LABEL_19:
    OUTLINED_FUNCTION_16();
    return;
  }
  if (v29 != (id)3)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationKit);
    id v54 = v24;
    uint64_t v39 = (_DWORD *)v38;
    unint64_t v40 = (void *)Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (!OUTLINED_FUNCTION_92(v41))
    {

      goto LABEL_16;
    }
    OUTLINED_FUNCTION_37();
    a12 = OUTLINED_FUNCTION_45_5();
    *uint64_t v39 = 136315138;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    id v42 = v54;
    uint64_t v43 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_73_0(&dword_1C2F90000, v45, v46, "Unknown handle type: %s");
    OUTLINED_FUNCTION_100_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    goto LABEL_19;
  }
  id v53 = objc_msgSend(self, sel_sharedPrivacyManager);
  if (!v53)
  {
    __break(1u);
    goto LABEL_21;
  }
  id v30 = objc_msgSend(v24, sel_value);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_175_0();
  outlined bridged method (mnbnn) of @objc TUPrivacyManager.setBlockIncomingCommunication(_:forEmailAddress:)(v31, v32, v33, v53);
LABEL_16:
  OUTLINED_FUNCTION_16();
}

void @objc TUHandle.block()(void *a1)
{
  id v1 = a1;
  TUHandle.block()();
}

Swift::Bool __swiftcall TUHandle.isBlocked()()
{
  OUTLINED_FUNCTION_121();
  uint64_t v46 = v1;
  uint64_t v47 = v2;
  int v3 = v0;
  unsigned __int8 v45 = 0;
  id v4 = objc_msgSend(v0, sel_type);
  if (v4 != (id)1)
  {
    if (v4 == (id)2)
    {
      id v11 = objc_msgSend(v0, sel_value);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v12 = (id)TUHomeCountryCode();
      if (v12)
      {
        uint64_t v13 = v12;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      id v24 = objc_allocWithZone(MEMORY[0x1E4FADC48]);
      id v25 = OUTLINED_FUNCTION_85_0();
      if (!v25)
      {
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        id v35 = (uint8_t *)__swift_project_value_buffer(v34, (uint64_t)static Logger.conversationKit);
        id v36 = v3;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          OUTLINED_FUNCTION_37();
          v44[0] = OUTLINED_FUNCTION_45_5();
          *(_DWORD *)id v35 = 136315138;
          id v39 = objc_msgSend(v36, sel_value);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v40 = OUTLINED_FUNCTION_101();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2F90000, v37, v38, "invalid formattedPhoneNumber, value: %s", v35, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {
        }
        goto LABEL_26;
      }
      uint64_t v26 = v25;
      id v5 = objc_msgSend(self, sel_sharedPrivacyManager);
      if (v5)
      {
        char v27 = v5;
        unsigned __int8 v28 = objc_msgSend(v5, sel_isIncomingCommunicationBlockedForPhoneNumber_, v26);

        unsigned __int8 v45 = v28;
        goto LABEL_16;
      }
    }
    else
    {
      if (v4 != (id)3)
      {
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        uint64_t v15 = (_DWORD *)__swift_project_value_buffer(v14, (uint64_t)static Logger.conversationKit);
        id v16 = v3;
        uint64_t v17 = (void *)Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_92(v18))
        {
          OUTLINED_FUNCTION_37();
          v44[0] = OUTLINED_FUNCTION_45_5();
          *uint64_t v15 = 136315138;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
          id v19 = v16;
          uint64_t v20 = String.init<A>(reflecting:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_73_0(&dword_1C2F90000, v22, v23, "Unknown handle type: %s");
          OUTLINED_FUNCTION_100_0();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {
        }
        goto LABEL_16;
      }
      id v5 = objc_msgSend(self, sel_sharedPrivacyManager);
      if (v5)
      {
        int v6 = v5;
        id v7 = objc_msgSend(v3, sel_value);
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v9;

        LOBYTE(v7) = outlined bridged method (mbnn) of @objc TUPrivacyManager.isIncomingCommunicationBlocked(forEmailAddress:)(v8, v10, v6);
        unsigned __int8 v45 = v7 & 1;
LABEL_16:
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationKit);
        int v30 = v45;
        char v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v33 = 67109120;
          LODWORD(v44[0]) = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2F90000, v31, v32, "handle isBlocked: %{BOOL}d", v33, 8u);
          OUTLINED_FUNCTION_3();
        }

        OUTLINED_FUNCTION_2();
        goto LABEL_26;
      }
      __break(1u);
    }
    __break(1u);
    return (char)v5;
  }
LABEL_26:
  OUTLINED_FUNCTION_2_22();
  return (char)v5;
}

uint64_t specialized SpamModelable.formattedInitiatorHandle.getter()
{
  uint64_t v0 = type metadata accessor for RecentsCallItem(0);
  uint64_t v1 = OUTLINED_FUNCTION_8(v0);
  MEMORY[0x1F4188790](v1);
  int v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = RecentsCallItem.initiator.getter();
  if (v4)
  {
    id v5 = (void *)v4;
    TUHandle.formattedPhoneNumber.getter();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = OUTLINED_FUNCTION_30_15();
  _s15ConversationKit15RecentsCallItemVWOcTm_0(v8, v9, v10);
  if (!v7)
  {
    id v11 = (void *)RecentsCallItem.initiator.getter();
    id v12 = v11;
    if (v11)
    {
      id v13 = objc_msgSend(v11, sel_value);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  outlined destroy of RecentsCallItem((uint64_t)v3, (void (*)(void))type metadata accessor for RecentsCallItem);
  return OUTLINED_FUNCTION_45_4();
}

{
  return specialized SpamModelable.formattedInitiatorHandle.getter((uint64_t (*)(void))CHRecentCall.initiatorHandle.getter);
}

{
  return specialized SpamModelable.formattedInitiatorHandle.getter((uint64_t (*)(void))TUCall.initiatorHandle.getter);
}

uint64_t specialized SpamModelable.formattedInitiatorHandle.getter(uint64_t (*a1)(void))
{
  int v3 = v1;
  uint64_t v4 = a1();
  if (!v4 || (id v5 = (void *)v4, TUHandle.formattedPhoneNumber.getter(), v7 = v6, v5, !v7))
  {
    id v8 = v3;
    uint64_t v9 = (void *)a1();
    uint64_t v10 = v9;
    if (v9)
    {
      id v11 = objc_msgSend(v9, sel_value);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
    }
  }
  return OUTLINED_FUNCTION_34_9();
}

id @nonobjc TUPhoneNumber.init(digits:countryCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v7 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    id v8 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  id v8 = (void *)MEMORY[0x1C87730B0](a3, a4);
  swift_bridgeObjectRelease();
LABEL_6:
  id v9 = objc_msgSend(v4, sel_initWithDigits_countryCode_, v7, v8);

  return v9;
}

id thunk for @escaping @callee_guaranteed () -> (@owned UIViewController?)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  int v3 = (void *)v1(v2);
  swift_release();
  return v3;
}

id thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  int v3 = (void *)v1(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

void specialized Array.replaceSubrange<A>(_:with:)()
{
  OUTLINED_FUNCTION_31();
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = v2;
  uint64_t v5 = *v0;
  uint64_t v6 = *(void *)(*v0 + 16);
  if (v6 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = v1;
  uint64_t v8 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v11 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      uint64_t v13 = v6 + v9;
    }
    else {
      uint64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v0 = v5;
  }
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_5_7();
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = v15 + v17 * v7;
  OUTLINED_FUNCTION_102();
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v19 = *(void *)(v5 + 16);
  if (__OFSUB__(v19, v4))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15 + v17 * v4, v19 - v4, v18 + v17);
  uint64_t v20 = *(void *)(v5 + 16);
  BOOL v21 = __OFADD__(v20, v9);
  uint64_t v22 = v20 + v9;
  if (!v21)
  {
    *(void *)(v5 + 16) = v22;
LABEL_16:
    if (v17 < 1)
    {
LABEL_20:
      outlined destroy of SystemUpdateNotice?(v11, &demangling cache variable for type metadata for CollectionOfOne<Participant>);
      OUTLINED_FUNCTION_28();
      return;
    }
    char v23 = 0;
    while ((v23 & 1) == 0)
    {
      _s15ConversationKit15RecentsCallItemVWOcTm_0(v11, v15 + v17 * v7, (void (*)(void))type metadata accessor for Participant);
      v15 += v17;
      char v23 = 1;
      if (v15 + v17 * (v7 - 1) >= v18) {
        goto LABEL_20;
      }
    }
    goto LABEL_27;
  }
LABEL_28:
  __break(1u);
}

{
  specialized Array.replaceSubrange<A>(_:with:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_14();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_142();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    OUTLINED_FUNCTION_149();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v0 = v11;
  }
  id v12 = v0 + 32 + 16 * v8;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_19;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + 32 + 16 * v2, v13 - v2, v12);
  uint64_t v14 = *(void *)(v0 + 16);
  uint64_t v7 = __OFADD__(v14, v10);
  unint64_t v15 = v14 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_13:
    *uint64_t v1 = v0;
    OUTLINED_FUNCTION_15_0();
    return;
  }
LABEL_20:
  __break(1u);
}

{
  specialized Array.replaceSubrange<A>(_:with:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  OUTLINED_FUNCTION_31();
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = v2;
  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(*v0 + 16);
  if (v7 < v2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v1;
  uint64_t v9 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v11 = v4;
  id v12 = v3;
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v10 > *(void *)(v6 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v13;
  }
  uint64_t v14 = v6 + 32 + 16 * v8;
  swift_arrayDestroy();
  if (!v10) {
    goto LABEL_13;
  }
  unint64_t v15 = *(void *)(v6 + 16);
  if (__OFSUB__(v15, v5)) {
    goto LABEL_19;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v6 + 32 + 16 * v5), v15 - v5, (char *)(v14 + 16));
  uint64_t v16 = *(void *)(v6 + 16);
  uint64_t v17 = __OFADD__(v16, v10);
  unint64_t v18 = v16 + v10;
  if (!v17)
  {
    *(void *)(v6 + 16) = v18;
LABEL_13:
    *(void *)uint64_t v14 = v12;
    *(void *)(v14 + 8) = v11;
    *uint64_t v0 = v6;
    OUTLINED_FUNCTION_28();
    return;
  }
LABEL_20:
  __break(1u);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_14();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_142();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    OUTLINED_FUNCTION_149();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v0 = v11;
  }
  id v12 = v0 + 32 + 40 * v8;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_19;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + 32 + 40 * v2, v13 - v2, v12);
  uint64_t v14 = *(void *)(v0 + 16);
  uint64_t v7 = __OFADD__(v14, v10);
  unint64_t v15 = v14 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_13:
    *uint64_t v1 = v0;
    OUTLINED_FUNCTION_15_0();
    return;
  }
LABEL_20:
  __break(1u);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_14();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_145();
  if (v6 != v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = v3 - v9;
  if (__OFADD__(v3, v10))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v11 <= *(void *)(v0 + 24) >> 1)
  {
    if (!v10) {
      goto LABEL_14;
    }
  }
  else
  {
    OUTLINED_FUNCTION_149();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v0 = v12;
    if (!v10)
    {
LABEL_14:
      *uint64_t v1 = v0;
      OUTLINED_FUNCTION_15_0();
      return;
    }
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_20;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v0 + 32 + 4 * v2), v13 - v2, (char *)(v0 + 32 + 4 * v8));
  uint64_t v14 = *(void *)(v0 + 16);
  uint64_t v7 = __OFADD__(v14, v10);
  unint64_t v15 = v14 + v10;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_14();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_145();
  if (v6 != v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = v3 - v9;
  if (__OFADD__(v3, v10))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v11 <= *(void *)(v0 + 24) >> 1)
  {
    if (!v10) {
      goto LABEL_14;
    }
  }
  else
  {
    OUTLINED_FUNCTION_149();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v0 = v12;
    if (!v10)
    {
LABEL_14:
      *uint64_t v1 = v0;
      OUTLINED_FUNCTION_15_0();
      return;
    }
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_20;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v0 + 32 + v2), v13 - v2, (char *)(v0 + 32 + v8));
  uint64_t v14 = *(void *)(v0 + 16);
  uint64_t v7 = __OFADD__(v14, v10);
  unint64_t v15 = v14 + v10;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
}

{
  specialized Array.replaceSubrange<A>(_:with:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  void (*v4)(void);
  void (*v5)(unint64_t, uint64_t, unint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t (*v13)(void);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void (*v23)(unint64_t, uint64_t, unint64_t);

  OUTLINED_FUNCTION_24_0();
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v6 = v2;
  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(*v0 + 16);
  if (v8 < v2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = v1;
  uint64_t v10 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v11 = v1 - v2;
  if (__OFSUB__(0, v10))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v8, v11))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v12 = v4;
  uint64_t v13 = v3;
  char v23 = v5;
  if (!swift_isUniquelyReferenced_nonNull_native() || v8 - v10 > *(void *)(v7 + 24) >> 1) {
    uint64_t v7 = v13();
  }
  v12(0);
  OUTLINED_FUNCTION_5_7();
  unint64_t v15 = v7 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = v15 + v17 * v9;
  OUTLINED_FUNCTION_162();
  swift_arrayDestroy();
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v19 = *(void *)(v7 + 16);
  if (__OFSUB__(v19, v6)) {
    goto LABEL_19;
  }
  v23(v15 + v17 * v6, v19 - v6, v18);
  uint64_t v20 = *(void *)(v7 + 16);
  BOOL v21 = __OFADD__(v20, v11);
  uint64_t v22 = v20 - v10;
  if (!v21)
  {
    *(void *)(v7 + 16) = v22;
LABEL_13:
    *uint64_t v0 = v7;
    OUTLINED_FUNCTION_22();
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t), unint64_t *a10)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for UIView, 0x1E4FB1EB0, (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), a6, a7, a8, a9, a10);
}

{
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_24_0();
  if (v17 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = v20;
    id v12 = v19;
    uint64_t v11 = v18;
    uint64_t v14 = v17;
    unint64_t v15 = *v10;
    if (!(*v10 >> 62))
    {
      BOOL v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  BOOL v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v21 < v11)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (__OFSUB__(v11, v14))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v13 = v14 - v11;
  if (__OFSUB__(0, v11 - v14))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v15 = *v10;
  a10 = v12;
  if (!(*v10 >> 62))
  {
    uint64_t v22 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  char v23 = v22 + v13;
  if (__OFADD__(v22, v13))
  {
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  unint64_t v15 = *v10;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v10 = v15;
  a9 = v16;
  uint64_t v22 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v15 & 0x8000000000000000) == 0
    && (v15 & 0x4000000000000000) == 0)
  {
    id v25 = v15 & 0xFFFFFFFFFFFFFF8;
    if (v23 <= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_20;
    }
    uint64_t v22 = 1;
  }
  if (v15 >> 62) {
    goto LABEL_38;
  }
  uint64_t v26 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v26 <= v23) {
    uint64_t v26 = v23;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = MEMORY[0x1C8774500](v22, v26, 1, v15);
  swift_bridgeObjectRelease();
  *uint64_t v10 = v15;
  id v25 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  char v27 = v25 + 32 + 8 * v14;
  type metadata accessor for NSObject(0, a10);
  swift_arrayDestroy();
  if (!v13) {
    goto LABEL_28;
  }
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    unsigned __int8 v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned __int8 v28 = *(void *)(v25 + 16);
  }
  if (__OFSUB__(v28, v11))
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = a9(v25 + 32 + 8 * v11, v28 - v11, v27);
  if (v15 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    int v30 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  int v30 = *(void *)(v25 + 16);
LABEL_26:
  if (__OFADD__(v30, v13))
  {
    __break(1u);
    return result;
  }
  *(void *)(v25 + 16) = v30 + v13;
LABEL_28:
  OUTLINED_FUNCTION_22();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)()
{
  OUTLINED_FUNCTION_31();
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = v8;
    uint64_t v2 = v7;
    uint64_t v3 = v6;
    unint64_t v4 = *v1;
    if (!(*v1 >> 62))
    {
      uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v9 < v2)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v10 = v2 - v3;
  if (__OFSUB__(v2, v3))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v5 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v4 = *v1;
  if (!(*v1 >> 62))
  {
    uint64_t v11 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v12 = v11 + v5;
  if (__OFADD__(v11, v5))
  {
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v14 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v12 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_20;
    }
    uint64_t v11 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_38;
  }
  uint64_t v15 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v15 <= v12) {
    uint64_t v15 = v12;
  }
  swift_bridgeObjectRetain();
  unint64_t v4 = MEMORY[0x1C8774500](v11, v15, 1, v4);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v4;
  uint64_t v14 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  uint64_t v16 = (void *)(v14 + 32 + 8 * v3);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  swift_arrayDestroy();
  if (!v5) {
    goto LABEL_28;
  }
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)(v14 + 16);
  }
  if (__OFSUB__(v17, v2))
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14 + 32 + 8 * v2, v17 - v2, v16 + 1);
  if (v4 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v14 + 16);
LABEL_26:
  if (__OFADD__(v19, v5))
  {
    __break(1u);
    return result;
  }
  *(void *)(v14 + 16) = v19 + v5;
LABEL_28:
  *uint64_t v16 = v0;
  OUTLINED_FUNCTION_28();
  return specialized Array._endMutation()();
}

void outlined bridged method (mbnn) of @objc UIViewController.title.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t type metadata accessor for RecentItemContactsViewControllerDelegate(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for RecentItemContactsViewControllerDelegate);
}

uint64_t sub_1C3149F90()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void partial apply for closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemOngoingCalls()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemOngoingCalls()(a1, a2, a3, v3);
}

void partial apply for closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemLinks()(UIView *a1, uint64_t a2, uint64_t a3)
{
  closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemLinks()(a1, a2, a3, v3);
}

void partial apply for closure #1 in RecentsListViewController.joinCall(at:)()
{
  closure #1 in RecentsListViewController.joinCall(at:)(v0);
}

uint64_t sub_1C3149FD8()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RecentsListViewController.presentReportJunkAlert(_:completion:)(uint64_t a1)
{
  return closure #1 in RecentsListViewController.presentReportJunkAlert(_:completion:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t objectdestroy_11Tm()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  return swift_deallocObject();
}

void partial apply for closure #2 in RecentsListViewController.presentReportJunkAlert(_:completion:)(uint64_t a1)
{
  v2._rawValue = *(void **)(v1 + 24);
  closure #2 in RecentsListViewController.presentReportJunkAlert(_:completion:)(a1, *(void *)(v1 + 16), v2, *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #3 in RecentsListViewController.presentReportJunkAlert(_:completion:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(0);
  }
  return result;
}

void *outlined copy of ConversationLink?(void *result)
{
  if (result)
  {
    id v1 = result;
    swift_bridgeObjectRetain();
    return (void *)swift_retain();
  }
  return result;
}

void *outlined consume of ConversationLink?(void *result)
{
  if (result)
  {

    swift_bridgeObjectRelease();
    return (void *)swift_release();
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc UICollectionView.indexPathsForSelectedItems.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_indexPathsForSelectedItems);
  if (!v1) {
    return 0;
  }
  Swift::OpaquePointer v2 = v1;
  type metadata accessor for IndexPath();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1C314A1A8()
{
  OUTLINED_FUNCTION_24_0();
  type metadata accessor for URL();
  OUTLINED_FUNCTION_4();
  unint64_t v3 = (*(void *)(v2 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_50_1();
  v4();

  OUTLINED_FUNCTION_139();
  v5();
  OUTLINED_FUNCTION_22();
  return swift_deallocObject();
}

Class partial apply for closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  OUTLINED_FUNCTION_1(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (*(void *)(v6 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_1_1(v9);
  uint64_t v11 = *(void **)(v1 + v7);
  uint64_t v12 = *(void *)(v1 + v8);
  uint64_t v13 = v1 + ((v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(a1, v1 + v5, v11, v12, v13);
}

void outlined bridged method (mnbnn) of @objc TUPrivacyManager.setBlockIncomingCommunication(_:forEmailAddress:)(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (id)MEMORY[0x1C87730B0](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(a4, sel_setBlockIncomingCommunication_forEmailAddress_, a1 & 1, v6);
}

id outlined bridged method (mbnn) of @objc TUPrivacyManager.isIncomingCommunicationBlocked(forEmailAddress:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(a3, sel_isIncomingCommunicationBlockedForEmailAddress_, v4);

  return v5;
}

uint64_t dispatch thunk of RecentsListViewControllerMacCatalystDelegate.recentsListViewController(_:didRequestUnknownContactPopoverForRecentsCallItem:customSourceView:sourceRect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of RecentsListViewControllerMacCatalystDelegate.recentsListViewController(_:didRequestUnknownContactPopoverForHandle:customSourceView:sourceRect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t ObjC metadata update function for RecentsListViewController()
{
  return type metadata accessor for RecentsListViewController(0);
}

uint64_t method lookup function for RecentsListViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsListViewController);
}

uint64_t dispatch thunk of RecentsListViewController.macCatalystDelegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of RecentsListViewController.macCatalystDelegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of RecentsListViewController.macCatalystDelegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of RecentsListViewController.recentCallProvider.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of RecentsListViewController.recentCallProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of RecentsListViewController.recentCallProvider.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of RecentsListViewController.callCreator.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of RecentsListViewController.callItemBlockContactsDelegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of RecentsListViewController.callItemBlockContactsDelegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of RecentsListViewController.callItemBlockContactsDelegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of RecentsListViewController.faceTimeReportSpamManager.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of RecentsListViewController.faceTimeReportSpamManager.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of RecentsListViewController.faceTimeReportSpamManager.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of RecentsListViewController.presentScreenTimeShield.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of RecentsListViewController.presentScreenTimeShield.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of RecentsListViewController.setPreventsApplicationTerminationWhenModal.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of RecentsListViewController.setPreventsApplicationTerminationWhenModal.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of RecentsListViewController.setPreventsApplicationTerminationWhenModal.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of RecentsListViewController.headerView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of RecentsListViewController.headerView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of RecentsListViewController.headerView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of RecentsListViewController.facetimeLinkTipPopoverReferenceItem.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of RecentsListViewController.dataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of RecentsListViewController.collectionView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of RecentsListViewController.collectionView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of RecentsListViewController.collectionView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of RecentsListViewController.cellBackgroundConfiguration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of RecentsListViewController.cellBackgroundConfiguration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of RecentsListViewController.cellBackgroundConfiguration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of RecentsListViewController.avatarViewControllerDelegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of RecentsListViewController.avatarViewControllerDelegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of RecentsListViewController.avatarViewControllerDelegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of RecentsListViewController.__allocating_init(recentCallProvider:detailControllerFactory:contactStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 1256))();
}

uint64_t ObjC metadata update function for RecentItemContactsViewControllerDelegate()
{
  return type metadata accessor for RecentItemContactsViewControllerDelegate(0);
}

uint64_t type metadata completion function for RecentItemContactsViewControllerDelegate()
{
  uint64_t result = type metadata accessor for RecentsCallItem(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for RecentItemContactsViewControllerDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentItemContactsViewControllerDelegate);
}

uint64_t dispatch thunk of RecentItemContactsViewControllerDelegate.__allocating_init(_:faceTimeReportSpamManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of RecentItemContactsViewControllerDelegate.contactViewController(_:didExecuteBlockAndReportContactAction:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t method lookup function for AvatarViewControllerDelegateWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AvatarViewControllerDelegateWrapper);
}

uint64_t dispatch thunk of AvatarViewControllerDelegateWrapper.hostingViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of AvatarViewControllerDelegateWrapper.hostingViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AvatarViewControllerDelegateWrapper.hostingViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AvatarViewControllerDelegateWrapper.__allocating_init(hostingViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of AvatarViewControllerDelegateWrapper.hostingViewController(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

void partial apply for closure #1 in RecentsListViewController.deleteButtonAction(_:)(char a1)
{
  closure #1 in RecentsListViewController.deleteButtonAction(_:)(a1, v1);
}

uint64_t sub_1C314AF14()
{
  return objectdestroy_122Tm(MEMORY[0x1F418BCB8]);
}

uint64_t partial apply for closure #1 in RecentsListViewController.handleDeferredVideoMessagePresentation()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_1(v5);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return closure #1 in RecentsListViewController.handleDeferredVideoMessagePresentation()(a1, v7, a2);
}

uint64_t sub_1C314AF80()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_106();
  v1(v0);
  OUTLINED_FUNCTION_175_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in RecentsListViewController.handleDeferredVideoMessagePresentation()(uint64_t a1)
{
  return partial apply for closure #2 in RecentsListViewController.handleDeferredVideoMessagePresentation()(a1, MEMORY[0x1F418BC60], (uint64_t (*)(uint64_t))closure #2 in RecentsListViewController.handleDeferredVideoMessagePresentation());
}

id partial apply for closure #1 in closure #1 in RecentsListViewController.collectionLayoutConfiguration.getter(uint64_t a1)
{
  return closure #1 in closure #1 in RecentsListViewController.collectionLayoutConfiguration.getter(a1, v1);
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)(uint64_t a1)
{
  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(void *)(v1 + 16)) & 1;
}

{
  uint64_t v1;

  return specialized closure #1 in Sequence<>.contains(_:)(a1, *(void *)(v1 + 16), MEMORY[0x1F418BC30], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC70]) & 1;
}

uint64_t partial apply for closure #1 in RecentsListViewController.blockAllAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return partial apply for closure #1 in RecentsListViewController.blockAllAction(of:)(a1, a2, a3, a4, (uint64_t)closure #1 in RecentsListViewController.blockAllAction(of:), a6, a7, a8, a9);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v20;

  OUTLINED_FUNCTION_13_26();
  uint64_t v20 = v9;
  uint64_t v10 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_1_1(v10);
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_2();
  return v17(v11, v12, v13, v14, v15, v16, v17, v18, a9, v20);
}

uint64_t sub_1C314B074()
{
  _Block_release(*(const void **)(v0 + 16));
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t partial apply for closure #1 in closure #1 in RecentsListViewController.blockAllAction(of:)()
{
  return closure #1 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

id specialized SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[3] = type metadata accessor for RecentsCallItem(0);
  v17[4] = (uint64_t)&protocol witness table for RecentsCallItem;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  _s15ConversationKit15RecentsCallItemVWOcTm_0(a1, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for RecentsCallItem);
  outlined init with copy of Conversation((uint64_t)v17, (uint64_t)v16);
  uint64_t v9 = swift_allocObject();
  outlined init with take of Notice(v16, v9 + 16);
  *(void *)(v9 + 56) = a3;
  *(void *)(v9 + 64) = a4;
  outlined init with copy of Conversation((uint64_t)v17, (uint64_t)v15);
  uint64_t v10 = (void *)swift_allocObject();
  outlined init with take of Notice(v15, (uint64_t)(v10 + 2));
  v10[7] = a2;
  v10[8] = a3;
  v10[9] = a4;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  swift_retain();
  id v13 = specialized SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), v9, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), (uint64_t)v10, (uint64_t)partial apply for closure #3 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v13;
}

id specialized SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = specialized SpamModelable.formattedInitiatorHandle.getter();
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = 0xE000000000000000;
  }
  uint64_t v12 = self;
  id v13 = objc_msgSend(v12, sel_conversationKit);
  v14._countAndFlagsBits = 0xD00000000000002ALL;
  v77._object = (void *)0xE000000000000000;
  v14._object = (void *)0x80000001C379BAD0;
  v15.value._countAndFlagsBits = 0x61737265766E6F43;
  v15.value._object = (void *)0xEF74694B6E6F6974;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v77._countAndFlagsBits = 0;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v77);

  id v18 = objc_msgSend(v12, (SEL)&selRef_viewIfLoaded + 1);
  v19._countAndFlagsBits = 0xD000000000000038;
  v78._object = (void *)0xE000000000000000;
  v19._object = (void *)0x80000001C379BB00;
  v20.value._countAndFlagsBits = 0x61737265766E6F43;
  v20.value._object = (void *)0xEF74694B6E6F6974;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v78._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v78);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1C3769620;
  *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v22 + 32) = v10;
  *(void *)(v22 + 40) = v11;
  uint64_t v23 = String.init(format:_:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v26 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v17._countAndFlagsBits, (uint64_t)v17._object, v23, v25, 0);
  id v70 = self;
  id v27 = objc_msgSend(v70, sel_currentDevice);
  id v28 = objc_msgSend(v27, sel_userInterfaceIdiom);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v29 = objc_msgSend(v12, sel_conversationKit);
  v79._object = (void *)0xE000000000000000;
  v30._object = (void *)0x80000001C379BB40;
  v30._countAndFlagsBits = 0xD00000000000001BLL;
  v31.value._countAndFlagsBits = 0x61737265766E6F43;
  v31.value._object = (void *)0xEF74694B6E6F6974;
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v79._countAndFlagsBits = 0;
  Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v29, v32, v79);

  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a6;
  *(void *)(v34 + 24) = a7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  id v35 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v33._countAndFlagsBits, (uint64_t)v33._object, v28 != (id)1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v34);
  id v36 = objc_msgSend(v12, sel_conversationKit);
  v37._countAndFlagsBits = 0xD000000000000026;
  v80._object = (void *)0xE000000000000000;
  v37._object = (void *)0x80000001C379BA40;
  v38.value._countAndFlagsBits = 0x61737265766E6F43;
  v38.value._object = (void *)0xEF74694B6E6F6974;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v80._countAndFlagsBits = 0;
  Swift::String v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, (NSBundle)v36, v39, v80);

  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = a2;
  *(void *)(v41 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v42 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v40._countAndFlagsBits, (uint64_t)v40._object, 2, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v41);
  id v43 = objc_msgSend(v12, sel_conversationKit);
  v44._countAndFlagsBits = 0xD000000000000027;
  v81._object = (void *)0xE000000000000000;
  v44._object = (void *)0x80000001C379BB60;
  v45.value._countAndFlagsBits = 0x61737265766E6F43;
  v45.value._object = (void *)0xEF74694B6E6F6974;
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  v81._countAndFlagsBits = 0;
  Swift::String v47 = NSLocalizedString(_:tableName:bundle:value:comment:)(v44, v45, (NSBundle)v43, v46, v81);

  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = a4;
  *(void *)(v48 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v49 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v47._countAndFlagsBits, (uint64_t)v47._object, 2, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v48);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769F40;
  *(void *)(inited + 32) = v35;
  *(void *)(inited + 40) = v42;
  *(void *)(inited + 48) = v49;
  uint64_t v75 = inited;
  specialized Array._endMutation()();
  unint64_t v51 = v75;
  id v52 = v35;
  id v53 = v42;
  id v54 = v49;
  id v55 = objc_msgSend(v70, sel_currentDevice);
  id v56 = objc_msgSend(v55, sel_userInterfaceIdiom);

  if (v56 == (id)1)
  {
    swift_bridgeObjectRelease();
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_1C3769F40;
    *(void *)(v57 + 32) = v53;
    *(void *)(v57 + 40) = v54;
    *(void *)(v57 + 48) = v52;
    uint64_t v76 = v57;
    specialized Array._endMutation()();
    unint64_t v51 = v76;
    id v58 = v52;
    id v59 = v53;
    id v60 = v54;
  }
  if (v51 >> 62) {
    goto LABEL_19;
  }
  uint64_t v61 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v62 = v26;
  swift_bridgeObjectRetain();
  for (; v61; uint64_t v61 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v63 = 4;
    while (1)
    {
      id v64 = (v51 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v63 - 4, v51)
          : *(id *)(v51 + 8 * v63);
      uint64_t v65 = v64;
      uint64_t v66 = v63 - 3;
      if (__OFADD__(v63 - 4, 1)) {
        break;
      }
      objc_msgSend(v26, sel_addAction_, v64);

      ++v63;
      if (v66 == v61) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    id v68 = v26;
    swift_bridgeObjectRetain();
  }
LABEL_17:

  swift_bridgeObjectRelease_n();
  return v26;
}

uint64_t sub_1C314B970()
{
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in RecentsListViewController.blockAllAction(of:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in closure #1 in RecentsListViewController.blockUnknownAction(of:);
  uint64_t v3 = OUTLINED_FUNCTION_58_2();
  return closure #2 in closure #1 in RecentsListViewController.blockAllAction(of:)(v3, v4);
}

uint64_t partial apply for closure #1 in RecentsListViewController.blockUnknownAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return partial apply for closure #1 in RecentsListViewController.blockAllAction(of:)(a1, a2, a3, a4, (uint64_t)closure #1 in RecentsListViewController.blockUnknownAction(of:), a6, a7, a8, a9);
}

uint64_t partial apply for closure #2 in closure #1 in RecentsListViewController.blockUnknownAction(of:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in closure #1 in RecentsListViewController.blockUnknownAction(of:);
  uint64_t v3 = OUTLINED_FUNCTION_58_2();
  return closure #2 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(v3, v4);
}

uint64_t partial apply for closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return partial apply for closure #1 in RecentsListViewController.blockAllAction(of:)(a1, a2, a3, a4, (uint64_t)closure #1 in RecentsListViewController.groupReportAndBlockAction(of:), a6, a7, a8, a9);
}

uint64_t partial apply for closure #2 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in closure #1 in RecentsListViewController.blockUnknownAction(of:);
  uint64_t v3 = OUTLINED_FUNCTION_58_2();
  return closure #2 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(v3, v4);
}

uint64_t sub_1C314BC04()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1)
{
  return closure #1 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, (void *)(v1 + 16));
}

uint64_t sub_1C314BC58()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  if (*(void *)(v0 + 64)) {
    swift_release();
  }
  return swift_deallocObject();
}

void partial apply for closure #2 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1)
{
  closure #2 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, (void *)(v1 + 16));
}

uint64_t partial apply for closure #3 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1)
{
  return closure #3 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(uint64_t a1)
{
  return closure #1 in SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in RecentsListViewController.reportAndBlockAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return partial apply for closure #1 in RecentsListViewController.blockAllAction(of:)(a1, a2, a3, a4, (uint64_t)closure #1 in RecentsListViewController.reportAndBlockAction(of:), a6, a7, a8, a9);
}

uint64_t objectdestroy_143Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in RecentsListViewController.reportAndBlockAction(of:)()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in closure #1 in RecentsListViewController.blockUnknownAction(of:);
  uint64_t v3 = OUTLINED_FUNCTION_58_2();
  return closure #2 in closure #1 in RecentsListViewController.groupReportAndBlockAction(of:)(v3, v4);
}

uint64_t partial apply for closure #1 in RecentsListViewController.deleteAction(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return partial apply for closure #1 in RecentsListViewController.blockAllAction(of:)(a1, a2, a3, a4, (uint64_t)closure #1 in RecentsListViewController.deleteAction(of:), a6, a7, a8, a9);
}

uint64_t sub_1C314BDE0()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = (int *)type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_5_7();
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  uint64_t v5 = (id *)(v0 + v4);
  type metadata accessor for RecentsCallItemType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
    case 4u:
      swift_bridgeObjectRelease();
      type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v6 = OUTLINED_FUNCTION_57_2();
      if (!OUTLINED_FUNCTION_55_4(v6))
      {
        OUTLINED_FUNCTION_48();
        uint64_t v7 = OUTLINED_FUNCTION_127();
        v8(v7);
      }
      OUTLINED_FUNCTION_77_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99_1();
      if (!OUTLINED_FUNCTION_32_3())
      {
        OUTLINED_FUNCTION_48();
        uint64_t v9 = OUTLINED_FUNCTION_31_0();
        v10(v9);
      }
      OUTLINED_FUNCTION_97();
      if (v11)
      {

        swift_bridgeObjectRelease();
        swift_release();
      }
      if (!OUTLINED_FUNCTION_32_3())
      {
        OUTLINED_FUNCTION_48();
        uint64_t v12 = OUTLINED_FUNCTION_31_0();
        v13(v12);
      }

      break;
    case 1u:
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v14();
      type metadata accessor for RecentOngoingConversationMetadata(0);
      OUTLINED_FUNCTION_111_0();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_96();
      if (v15)
      {

        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      break;
    case 2u:

      swift_bridgeObjectRelease();
LABEL_14:
      swift_release();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  uint64_t v16 = OUTLINED_FUNCTION_95_0();
  if (!OUTLINED_FUNCTION_63_1(v16))
  {
    OUTLINED_FUNCTION_48();
    uint64_t v17 = OUTLINED_FUNCTION_128();
    v18(v17);
  }

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_19();

  swift_release();
  OUTLINED_FUNCTION_45_4();
  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RecentsListViewController.deleteAction(of:)()
{
  uint64_t v1 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_1(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v6;
  uint64_t v9 = (uint64_t *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = swift_task_alloc();
  id v13 = (void *)OUTLINED_FUNCTION_98(v12);
  *id v13 = v14;
  v13[1] = partial apply for closure #1 in closure #1 in RecentsListViewController.deleteAction(of:);
  return closure #1 in closure #1 in RecentsListViewController.deleteAction(of:)(v7, v8, v10, v11);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1C314C290()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RecentsListViewController.deleteAction(of:)(char a1)
{
  return closure #1 in closure #1 in closure #1 in RecentsListViewController.deleteAction(of:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_1C314C2DC()
{
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out ())(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out ())(a1, a2, *(uint64_t (**)(void *))(v2 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> ()(void *a1)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed String) -> ()(a1, *(uint64_t (**)(void, void))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUFilteredRequest) -> (@out ())(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed TUFilteredRequest) -> (@out ())(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUFilteredRequest) -> ()(void *a1)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed TUFilteredRequest) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1C314C32C()
{
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void partial apply for closure #1 in RecentsListViewController.fadeInNavigationController()()
{
  closure #1 in RecentsListViewController.fadeInNavigationController()(*(void **)(v0 + 16));
}

void partial apply for closure #1 in RecentsListViewController.selectActionItem.getter(uint64_t a1)
{
  closure #1 in RecentsListViewController.selectActionItem.getter(a1, v1);
}

id partial apply for closure #1 in RecentsListViewController.editMenuItems.getter(uint64_t a1)
{
  return closure #1 in RecentsListViewController.editMenuItems.getter(a1, *(void **)(v1 + 16));
}

void partial apply for closure #1 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  closure #1 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(v0);
}

void *partial apply for closure #2 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  uint64_t v1 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v2 = *(void *)(v0 + 16);
  return closure #2 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(v2);
}

uint64_t partial apply for closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  return partial apply for closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)((uint64_t (*)(uint64_t))closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:));
}

void partial apply for closure #4 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  closure #4 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(v0);
}

uint64_t partial apply for closure #5 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  return partial apply for closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)((uint64_t (*)(uint64_t))closure #5 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:));
}

void partial apply for closure #6 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  closure #6 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(v0);
}

uint64_t objectdestroy_247Tm()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_5_7();
  uint64_t v4 = (id *)(v0 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  type metadata accessor for RecentsCallItemType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
    case 4u:
      swift_bridgeObjectRelease();
      type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v5 = OUTLINED_FUNCTION_57_2();
      if (!OUTLINED_FUNCTION_55_4(v5))
      {
        OUTLINED_FUNCTION_48();
        uint64_t v6 = OUTLINED_FUNCTION_127();
        v7(v6);
      }
      OUTLINED_FUNCTION_77_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99_1();
      if (!OUTLINED_FUNCTION_32_3())
      {
        OUTLINED_FUNCTION_48();
        uint64_t v8 = OUTLINED_FUNCTION_31_0();
        v9(v8);
      }
      OUTLINED_FUNCTION_97();
      if (v10)
      {

        swift_bridgeObjectRelease();
        swift_release();
      }
      if (!OUTLINED_FUNCTION_32_3())
      {
        OUTLINED_FUNCTION_48();
        uint64_t v11 = OUTLINED_FUNCTION_31_0();
        v12(v11);
      }

      break;
    case 1u:
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v13();
      type metadata accessor for RecentOngoingConversationMetadata(0);
      OUTLINED_FUNCTION_111_0();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_96();
      if (v14)
      {

        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      break;
    case 2u:

      swift_bridgeObjectRelease();
LABEL_14:
      swift_release();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  uint64_t v15 = OUTLINED_FUNCTION_95_0();
  if (!OUTLINED_FUNCTION_63_1(v15))
  {
    OUTLINED_FUNCTION_48();
    uint64_t v16 = OUTLINED_FUNCTION_128();
    v17(v16);
  }
  OUTLINED_FUNCTION_140();

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_19();

  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

uint64_t partial apply for closure #8 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)()
{
  return partial apply for closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)((uint64_t (*)(uint64_t))closure #8 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:));
}

uint64_t partial apply for closure #3 in RecentsListViewController.presentVideoMessagePlayer(url:and:bypassSafety:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_1_1(v2);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return a1(v4);
}

uint64_t sub_1C314C724()
{
  return objectdestroy_122Tm(MEMORY[0x1F418B830]);
}

uint64_t objectdestroy_122Tm(void (*a1)(void))
{
  a1(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v1();
  OUTLINED_FUNCTION_23_0();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)()
{
  uint64_t v0 = type metadata accessor for URL();
  OUTLINED_FUNCTION_1_1(v0);
  closure #1 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)();
}

uint64_t sub_1C314C808()
{
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(uint64_t a1)
{
  closure #2 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C314C848()
{
  type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();

  uint64_t v1 = OUTLINED_FUNCTION_106();
  v2(v1);
  OUTLINED_FUNCTION_175_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)()
{
  uint64_t v0 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_1_1(v0);
  uint64_t v1 = OUTLINED_FUNCTION_103();
  return closure #3 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(v1, v2, v3);
}

void partial apply for closure #1 in closure #3 in closure #1 in RecentsListViewController.collectionView(_:contextMenuConfigurationForItemAt:point:)(char a1)
{
}

uint64_t objectdestroy_17Tm()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in RecentsListViewController.presentReportJunkAlert(_:completion:)(uint64_t result)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  if (v2) {
    return v2(result & 1);
  }
  return result;
}

uint64_t sub_1C314C99C()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)()
{
  closure #1 in removeRecents #1 (calls:links:videoMessages:allItems:) in RecentsListViewController.deleteRecentCalls(_:preparationHandler:)(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t outlined release of ReportSpamManager.SpamDataModel(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #2 in closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemCalls()(uint64_t a1)
{
  return partial apply for closure #2 in RecentsListViewController.handleDeferredVideoMessagePresentation()(a1, (void (*)(void))type metadata accessor for RecentsCallItem, (uint64_t (*)(uint64_t))closure #2 in closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemCalls());
}

uint64_t objectdestroy_133Tm()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = type metadata accessor for RecentsCallItem(0);
  OUTLINED_FUNCTION_5_7();
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  uint64_t v5 = (id *)(v0 + v4);
  type metadata accessor for RecentsCallItemType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
    case 4u:
      swift_bridgeObjectRelease();
      type metadata accessor for RecentCallRecentItemMetadata(0);
      uint64_t v6 = OUTLINED_FUNCTION_57_2();
      if (!OUTLINED_FUNCTION_55_4(v6))
      {
        OUTLINED_FUNCTION_48();
        uint64_t v7 = OUTLINED_FUNCTION_127();
        v8(v7);
      }
      OUTLINED_FUNCTION_77_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99_1();
      if (!OUTLINED_FUNCTION_32_3())
      {
        OUTLINED_FUNCTION_48();
        uint64_t v9 = OUTLINED_FUNCTION_31_0();
        v10(v9);
      }
      OUTLINED_FUNCTION_97();
      if (v11)
      {

        swift_bridgeObjectRelease();
        swift_release();
      }
      if (!OUTLINED_FUNCTION_32_3())
      {
        OUTLINED_FUNCTION_48();
        uint64_t v12 = OUTLINED_FUNCTION_31_0();
        v13(v12);
      }

      break;
    case 1u:
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v14();
      type metadata accessor for RecentOngoingConversationMetadata(0);
      OUTLINED_FUNCTION_111_0();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_96();
      if (v15)
      {

        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      break;
    case 2u:

      swift_bridgeObjectRelease();
LABEL_14:
      swift_release();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  uint64_t v16 = OUTLINED_FUNCTION_95_0();
  if (!OUTLINED_FUNCTION_63_1(v16))
  {
    OUTLINED_FUNCTION_48();
    uint64_t v17 = OUTLINED_FUNCTION_128();
    v18(v17);
  }
  OUTLINED_FUNCTION_140();

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_19();

  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemCalls()(uint64_t a1)
{
  return partial apply for closure #2 in RecentsListViewController.handleDeferredVideoMessagePresentation()(a1, (void (*)(void))type metadata accessor for RecentsCallItem, (uint64_t (*)(uint64_t))closure #1 in closure #1 in RecentsListViewController.createCellRegistrationForRecentsCallItemCalls());
}

uint64_t partial apply for closure #2 in RecentsListViewController.handleDeferredVideoMessagePresentation()(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t))
{
  a2(0);
  uint64_t v3 = OUTLINED_FUNCTION_103();
  return a3(v3);
}

uint64_t closure #1 in Sequence<>.contains(_:)specialized partial apply(uint64_t a1)
{
  return partial apply for specialized closure #1 in Sequence<>.contains(_:)(a1) & 1;
}

{
  return _sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_Say10Foundation4UUIDVG_Tg5TA_0(a1) & 1;
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return type metadata accessor for RecentsCallItem(0);
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return type metadata accessor for RecentsCallItem(0);
}

id OUTLINED_FUNCTION_87_0(uint64_t a1, uint64_t (*a2)(void))
{
  return RecentsListViewController.__deallocating_deinit(0, a2);
}

uint64_t OUTLINED_FUNCTION_95_0()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_99_1()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_100_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_114()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_115()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_120_0()
{
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_125_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a1, (SEL)(v6 + 2840), v5, a4, a5, 0);
}

uint64_t OUTLINED_FUNCTION_128()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_130@<X0>(unint64_t a1@<X8>)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

uint64_t OUTLINED_FUNCTION_131()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

uint64_t OUTLINED_FUNCTION_144()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_156()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_157_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_163()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_169()
{
  return v0;
}

BOOL static CaptioningStateManager.CaptioningState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if (*(unsigned char *)(a1 + 8) != 1)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return v2 == *(double *)a2;
    }
    return 0;
  }
  if (v2 == 0.0)
  {
    BOOL v4 = *(void *)&v3 == 0;
  }
  else
  {
    if (*(void *)&v2 != 1)
    {
      if (*(void *)&v3 > 1uLL) {
        char v7 = *(unsigned char *)(a2 + 8);
      }
      else {
        char v7 = 0;
      }
      return (v7 & 1) != 0;
    }
    BOOL v4 = *(void *)&v3 == 1;
  }
  if (v4) {
    char v6 = *(unsigned char *)(a2 + 8);
  }
  else {
    char v6 = 0;
  }
  return (v6 & 1) != 0;
}

uint64_t CaptioningStateManager.captioningState.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t CaptioningStateManager.captioningStatePublisher.getter()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t CaptioningStateManager.isCaptioningEnabled.getter()
{
  CurrentValueSubject.value.getter();
  return (v1 > 1) | ((v2 & 1) == 0);
}

uint64_t CaptioningStateManager.captionsRecognizerStateManager.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CaptioningStateManager and conformance CaptioningStateManager();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return MEMORY[0x1C8776240](v0 + 24);
}

uint64_t key path getter for CaptioningStateManager.captionsRecognizerStateManager : CaptioningStateManager@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CaptioningStateManager.captionsRecognizerStateManager.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C314D3D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CaptioningStateManager.captionsRecognizerStateManager.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CaptioningStateManager.captionsRecognizerStateManager : CaptioningStateManager()
{
  return CaptioningStateManager.captionsRecognizerStateManager.setter();
}

unint64_t lazy protocol witness table accessor for type CaptioningStateManager and conformance CaptioningStateManager()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptioningStateManager and conformance CaptioningStateManager;
  if (!lazy protocol witness table cache variable for type CaptioningStateManager and conformance CaptioningStateManager)
  {
    type metadata accessor for CaptioningStateManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptioningStateManager and conformance CaptioningStateManager);
  }
  return result;
}

uint64_t type metadata accessor for CaptioningStateManager()
{
  uint64_t result = type metadata singleton initialization cache for CaptioningStateManager;
  if (!type metadata singleton initialization cache for CaptioningStateManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CaptioningStateManager.captionsRecognizerStateManager.setter()
{
  return swift_unknownObjectRelease();
}

uint64_t CaptioningStateManager.captionsRecognizerStateManager.init@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = a1;
  swift_unknownObjectWeakInit();
  return swift_unknownObjectRelease();
}

uint64_t CaptioningStateManager.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t closure #1 in CaptioningStateManager.captionsRecognizerStateManager.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = a3;
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in CaptioningStateManager.captionsRecognizerStateManager.setter()
{
  return closure #1 in CaptioningStateManager.captionsRecognizerStateManager.setter(v0[2], v0[3], v0[4]);
}

uint64_t specialized CaptioningStateManager.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t CaptioningStateManager.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

void (*CaptioningStateManager.captionsRecognizerStateManager.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_getKeyPath();
  v3[6] = OBJC_IVAR____TtC15ConversationKit22CaptioningStateManager___observationRegistrar;
  *uint64_t v3 = v1;
  v3[7] = lazy protocol witness table accessor for type CaptioningStateManager and conformance CaptioningStateManager();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = v4;
  void v3[4] = v5;
  return CaptioningStateManager.captionsRecognizerStateManager.modify;
}

void CaptioningStateManager.captionsRecognizerStateManager.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 32) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  uint64_t v4 = v3[5];
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  *uint64_t v3 = v4;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v3);
}

uint64_t CaptioningStateManager.cancellables.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CaptioningStateManager.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for CaptioningStateManager.cancellables : CaptioningStateManager()
{
  return CaptioningStateManager.cancellables.setter();
}

uint64_t CaptioningStateManager.cancellables.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t CaptioningStateManager.__allocating_init(capabilities:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  CaptioningStateManager.init(capabilities:)(a1);
  return v2;
}

void *CaptioningStateManager.init(capabilities:)(void *a1)
{
  v1[4] = 0;
  swift_unknownObjectWeakInit();
  v1[5] = MEMORY[0x1E4FBC870];
  ObservationRegistrar.init()();
  uint64_t v19 = 0;
  char v20 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<CaptioningStateManager.CaptioningState, Never>);
  swift_allocObject();
  v1[2] = CurrentValueSubject.init(_:)();
  OUTLINED_FUNCTION_146();
  if ((*(uint64_t (**)(void))(v3 + 112))())
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop>);
    uint64_t v18 = v16;
    uint64_t v4 = *(void *)(v17 - 8);
    MEMORY[0x1F4188790](v17);
    OUTLINED_FUNCTION_21();
    uint64_t v7 = v6 - v5;
    OUTLINED_FUNCTION_146();
    uint64_t v19 = (*(uint64_t (**)(void))(v8 + 104))();
    id v21 = objc_msgSend(self, sel_mainRunLoop);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
    v16[1] = v16;
    MEMORY[0x1F4188790](v9 - 8);
    OUTLINED_FUNCTION_21();
    uint64_t v12 = v11 - v10;
    uint64_t v13 = type metadata accessor for NSRunLoop.SchedulerOptions();
    __swift_storeEnumTagSinglePayload(v12, 1, 1, v13);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
    Publisher.receive<A>(on:options:)();
    outlined destroy of NSRunLoop.SchedulerOptions?(v12);

    swift_release();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Bool, Never>, NSRunLoop>);
    uint64_t v14 = v17;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v14);
    swift_getKeyPath();
    uint64_t v19 = (uint64_t)v1;
    lazy protocol witness table accessor for type CaptioningStateManager and conformance CaptioningStateManager();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v19 = (uint64_t)v1;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v19 = (uint64_t)v1;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();

    swift_release();
  }
  else
  {
  }
  return v1;
}

uint64_t sub_1C314DF04()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in CaptioningStateManager.init(capabilities:)(char *a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CaptioningStateManager.setCaptioningEnabled(_:)(v1);
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in CaptioningStateManager.init(capabilities:)(char *a1)
{
  return closure #1 in CaptioningStateManager.init(capabilities:)(a1);
}

uint64_t sub_1C314DFA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CaptioningStateManager.cancellables.getter();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall CaptioningStateManager.setCaptioningEnabled(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  BOOL v4 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  if ((CaptioningStateManager.isCaptioningEnabled.getter() & 1) != v4)
  {
    if (a1)
    {
      uint64_t v9 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload(v8, 1, 1, v9);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v10 = static MainActor.shared.getter();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v12 = MEMORY[0x1E4FBCFD8];
      uint64_t v11[2] = v10;
      void v11[3] = v12;
      void v11[4] = v2;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
      swift_release();
    }
    else
    {
      CurrentValueSubject.send(_:)();
    }
  }
}

uint64_t closure #1 in CaptioningStateManager.setCaptioningEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a4;
  type metadata accessor for MainActor();
  v4[17] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[18] = v6;
  v4[19] = v5;
  return MEMORY[0x1F4188298](closure #1 in CaptioningStateManager.setCaptioningEnabled(_:), v6, v5);
}

uint64_t closure #1 in CaptioningStateManager.setCaptioningEnabled(_:)()
{
  uint64_t v1 = self;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = closure #1 in CaptioningStateManager.setCaptioningEnabled(_:);
  uint64_t v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> () with result type Set<String>;
  v0[13] = &block_descriptor_26;
  v0[14] = v2;
  objc_msgSend(v1, sel_installedLanguagesWithCompletion_, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 144);
  return MEMORY[0x1F4188298](closure #1 in CaptioningStateManager.setCaptioningEnabled(_:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = OUTLINED_FUNCTION_2_49();
  specialized Set.contains(_:)(v2, v3, v1);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    uint64_t v6 = 2;
    os_log(_:dso:log:type:_:)();
  }
  else
  {
    uint64_t v6 = 1;
  }
  *(void *)(v0 + 80) = v6;
  *(unsigned char *)(v0 + 88) = 1;
  CurrentValueSubject.send(_:)();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1C314E4A8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CaptioningStateManager.setCaptioningEnabled(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in CaptioningStateManager.setCaptioningEnabled(_:);
  return closure #1 in CaptioningStateManager.setCaptioningEnabled(_:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in CaptioningStateManager.setCaptioningEnabled(_:)()
{
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> () with result type Set<String>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  return specialized _resumeUnsafeContinuation<A>(_:_:)(v1, v2);
}

Swift::Void __swiftcall CaptioningStateManager.fetchSpeechModel()()
{
  uint64_t v1 = v0;
  CurrentValueSubject.value.getter();
  if (v14 == 1 && v13 == 1)
  {
    uint64_t v7 = self;
    uint64_t v8 = OUTLINED_FUNCTION_2_49();
    uint64_t v9 = (void *)MEMORY[0x1C87730B0](v8);
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    uint64_t v17 = partial apply for closure #1 in CaptioningStateManager.fetchSpeechModel();
    uint64_t v18 = v10;
    uint64_t v13 = MEMORY[0x1E4F143A8];
    uint64_t v14 = 1107296256;
    uint64_t v15 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned Bool) -> ();
    uint64_t v16 = &block_descriptor_28;
    uint64_t v11 = _Block_copy(&v13);
    swift_release();
    uint64_t v17 = partial apply for closure #2 in CaptioningStateManager.fetchSpeechModel();
    uint64_t v18 = v1;
    uint64_t v13 = MEMORY[0x1E4F143A8];
    uint64_t v14 = 1107296256;
    uint64_t v15 = thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ();
    uint64_t v16 = &block_descriptor_12;
    uint64_t v12 = _Block_copy(&v13);
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_fetchAssetsForLanguage_urgent_forceUpgrade_detailedProgress_completion_, v9, 1, 1, v11, v12);
    _Block_release(v12);
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
    CurrentValueSubject.value.getter();
    uint64_t v19 = v13;
    char v20 = v14;
    uint64_t v4 = String.init<A>(reflecting:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v3 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in CaptioningStateManager.fetchSpeechModel()()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C37696D0;
  uint64_t v1 = String.init<A>(reflecting:)();
  uint64_t v3 = v2;
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  *(void *)(v0 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v0 + 64) = v5;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  uint64_t v6 = String.init<A>(reflecting:)();
  *(void *)(v0 + 96) = v4;
  *(void *)(v0 + 104) = v5;
  *(void *)(v0 + 72) = v6;
  *(void *)(v0 + 80) = v7;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    CurrentValueSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @unowned Bool) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t closure #2 in CaptioningStateManager.fetchSpeechModel()(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v19 = static OS_dispatch_queue.main.getter();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = partial apply for closure #1 in closure #2 in CaptioningStateManager.fetchSpeechModel();
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_25_1;
  uint64_t v6 = _Block_copy(aBlock);
  id v7 = a3;
  swift_release();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v16 = (void *)v19;
  MEMORY[0x1C8773BA0](0, v11, v15, v6);
  _Block_release(v6);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #1 in closure #2 in CaptioningStateManager.fetchSpeechModel()(void *a1)
{
  if (a1)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1C3769620;
    id v3 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v4 = String.init<A>(reflecting:)();
    uint64_t v6 = v5;
    *(void *)(v2 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v2 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v2 + 32) = v4;
    *(void *)(v2 + 40) = v6;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
LABEL_9:
      swift_retain();
      swift_release();
      CurrentValueSubject.send(_:)();
      return swift_release();
    }
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CaptioningStateManager.setRecognizerEnabled(_:)(Swift::Bool a1)
{
  uint64_t v2 = CaptioningStateManager.captionsRecognizerStateManager.getter();
  uint64_t v4 = v3;
  if (a1)
  {
    if (!v2) {
      return;
    }
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
  }
  else
  {
    if (!v2) {
      return;
    }
    uint64_t v6 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v4);
  }
  swift_unknownObjectRelease();
}

uint64_t CaptioningStateManager.deinit()
{
  swift_release();
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 24);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit22CaptioningStateManager___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t CaptioningStateManager.__deallocating_deinit()
{
  CaptioningStateManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in CaptioningStateManager.fetchSpeechModel()()
{
  return closure #1 in CaptioningStateManager.fetchSpeechModel()();
}

uint64_t partial apply for closure #2 in CaptioningStateManager.fetchSpeechModel()(uint64_t a1, uint64_t a2, void *a3)
{
  return closure #2 in CaptioningStateManager.fetchSpeechModel()(a1, a2, a3);
}

uint64_t dispatch thunk of CaptionsRecognizerStateManaging.enableCaptionsRecognizer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CaptionsRecognizerStateManaging.disableCaptionsRecognizer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t ObjC metadata update function for CaptioningStateManager()
{
  return type metadata accessor for CaptioningStateManager();
}

uint64_t type metadata completion function for CaptioningStateManager()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CaptioningStateManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CaptioningStateManager);
}

uint64_t dispatch thunk of CaptioningStateManager.__allocating_init(capabilities:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for CaptioningStateManager.CaptioningState()
{
  return &type metadata for CaptioningStateManager.CaptioningState;
}

uint64_t sub_1C314F398()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in CaptioningStateManager.fetchSpeechModel()()
{
  return closure #1 in closure #2 in CaptioningStateManager.fetchSpeechModel()(*(void **)(v0 + 16));
}

uint64_t ShareViewControllerError.message.getter(uint64_t a1)
{
  return a1;
}

void ShareViewController.backgroundSendUtility.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit19ShareViewController_backgroundSendUtility);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit19ShareViewController_backgroundSendUtility) = a1;
}

Swift::Void __swiftcall ShareViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for ShareViewController();
  objc_msgSendSuper2(&v3, sel_viewDidAppear_, a1);
  ShareViewController.startProcessInputItemsTask()();
}

uint64_t type metadata accessor for ShareViewController()
{
  return self;
}

uint64_t ShareViewController.startProcessInputItemsTask()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  objc_super v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v4);
  type metadata accessor for MainActor();
  id v5 = v0;
  uint64_t v6 = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = MEMORY[0x1E4FBCFD8];
  v7[2] = v6;
  v7[3] = v8;
  v7[4] = v5;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

id ShareViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id ShareViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit19ShareViewController_backgroundSendUtility] = 0;
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit19ShareViewController_collaborationInitiationManager;
  uint64_t v8 = self;
  uint64_t v9 = v3;
  id v10 = objc_msgSend(v8, sel_sharedInstance);
  id v11 = objc_msgSend(v10, sel_conversationManager);

  type metadata accessor for CollaborationInitiationManager();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)&v3[v7] = v12;

  if (a2)
  {
    uint64_t v13 = (void *)MEMORY[0x1C87730B0](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = 0;
  }
  v16.receiver = v9;
  v16.super_class = (Class)type metadata accessor for ShareViewController();
  id v14 = objc_msgSendSuper2(&v16, sel_initWithNibName_bundle_, v13, a3);

  return v14;
}

id ShareViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ShareViewController.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit19ShareViewController_backgroundSendUtility] = 0;
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit19ShareViewController_collaborationInitiationManager;
  uint64_t v4 = self;
  id v5 = v1;
  id v6 = objc_msgSend(v4, sel_sharedInstance);
  id v7 = objc_msgSend(v6, sel_conversationManager);

  type metadata accessor for CollaborationInitiationManager();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)&v1[v3] = v8;

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for ShareViewController();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);

  return v9;
}

id ShareViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShareViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t closure #1 in ShareViewController.startProcessInputItemsTask()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  v4[8] = type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  id v5 = (void *)swift_task_alloc();
  v4[10] = v5;
  *id v5 = v4;
  v5[1] = closure #1 in ShareViewController.startProcessInputItemsTask();
  return ShareViewController.processInputItems()();
}

uint64_t closure #1 in ShareViewController.startProcessInputItemsTask()()
{
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_13_1();
  *id v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    id v9 = closure #1 in ShareViewController.startProcessInputItemsTask();
  }
  else {
    id v9 = closure #1 in ShareViewController.startProcessInputItemsTask();
  }
  return MEMORY[0x1F4188298](v9, v8, v7);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_release();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  id v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 88);
  if (v7)
  {
    id v9 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v18 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)id v9 = 136315138;
    swift_getErrorValue();
    id v10 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, v5, v6, "Error processing input items: %s", v9, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v12 = objc_msgSend(*(id *)(v0 + 56), sel_extensionContext);
  uint64_t v13 = *(void **)(v0 + 88);
  if (v12)
  {
    id v14 = v12;
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v14, sel_cancelRequestWithError_, v15);
  }
  else
  {
  }
  OUTLINED_FUNCTION_6();
  return v16();
}

uint64_t ShareViewController.processInputItems()()
{
  v1[32] = v0;
  type metadata accessor for MainActor();
  v1[33] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[34] = v2;
  v1[35] = v3;
  return MEMORY[0x1F4188298](ShareViewController.processInputItems(), v2, v3);
}

{
  uint64_t v0;
  id *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[2];
  uint64_t v60;
  uint64_t v61;

  id v60 = v0;
  v59[1] = *MEMORY[0x1E4F143B8];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = (id *)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 256);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 288) = __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  uint64_t v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.info.getter();
  uint64_t v7 = OUTLINED_FUNCTION_22_19(v6);
  uint64_t v8 = *(void **)(v0 + 256);
  id v58 = v0;
  if (v7)
  {
    id v9 = (uint8_t *)OUTLINED_FUNCTION_37();
    id v10 = (void *)swift_slowAlloc();
    *(_DWORD *)id v9 = 138412290;
    uint64_t v11 = objc_msgSend(v8, sel_extensionContext);
    uint64_t v12 = v11;
    if (v11) {
      *(void *)(v0 + 248) = v11;
    }
    else {
      *(void *)(v0 + 240) = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v13 = *v1;
    *id v10 = v12;

    _os_log_impl(&dword_1C2F90000, v5, v6, "Received input items %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  id v14 = objc_msgSend(*v1, sel_extensionContext);
  if (!v14) {
    goto LABEL_27;
  }
  uint64_t v15 = v14;
  objc_super v16 = objc_msgSend(v14, sel_inputItems);

  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 296) = v17;

  uint64_t v18 = *(void *)(v17 + 16);
  *(void *)(v0 + 304) = v18;
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_27:
    swift_release();
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_12_28();
    uint64_t v41 = v40 | 0xF;
    goto LABEL_28;
  }
  uint64_t v19 = objc_msgSend(*(id *)(*(void *)(*(void *)(v0 + 256)+ OBJC_IVAR____TtC15ConversationKit19ShareViewController_collaborationInitiationManager)+ 16), sel_activeConversations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  lazy protocol witness table accessor for type TUConversation and conformance NSObject();
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection.first.getter();
  id v21 = v20;
  *(void *)(v0 + 312) = v20;
  swift_bridgeObjectRelease();
  if (!v21)
  {
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_12_28();
    uint64_t v41 = v44 + 16;
LABEL_28:
    OUTLINED_FUNCTION_5_6(v39, v41);
LABEL_29:
    id v42 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_30;
  }
  uint64_t v57 = v0 + 16;
  uint64_t v22 = v0 + 48;
  uint64_t v23 = v0 + 80;
  uint64_t v24 = v0 + 112;
  id v54 = (uint64_t *)(v0 + 192);
  *(void *)(v0 + 200) = MEMORY[0x1E4FBC860];
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(*(void *)(v17 + 16), 0);
  specialized Array._endMutation()();
  uint64_t v25 = 0;
  id v56 = v0 + 80;
  id v55 = v0 + 48;
  do
  {
    id v26 = OUTLINED_FUNCTION_14_25(v25);
    outlined init with copy of Any(v26, v22);
    outlined init with copy of Any(v22, v23);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSExtensionItem);
    if (swift_dynamicCast())
    {
      OUTLINED_FUNCTION_20_20();
      Swift::String_optional v45 = (void *)swift_task_alloc();
      *(void *)(v0 + 336) = v45;
      *Swift::String_optional v45 = v0;
      v45[1] = ShareViewController.processInputItems();
      Swift::String v46 = OUTLINED_FUNCTION_16_5();
      return ShareViewController.processExtensionItem(_:for:)(v46, v47);
    }
    outlined init with copy of Any(v22, v24);
    id v27 = Logger.logObject.getter();
    id v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = OUTLINED_FUNCTION_37();
      v59[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)id v29 = 136315138;
      outlined init with copy of Any(v24, v57);
      Swift::String v30 = String.init<A>(describing:)();
      *(void *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v59);
      uint64_t v22 = v55;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v24);
      _os_log_impl(&dword_1C2F90000, v27, v28, "Skipping %s since it's not a NSExtensionItem", (uint8_t *)v29, 0xCu);
      swift_arrayDestroy();
      uint64_t v23 = v56;
      uint64_t v0 = v58;
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1(v24);
    }
    OUTLINED_FUNCTION_4_52(v22);
  }
  while (!v32);
  swift_bridgeObjectRelease();
  swift_release();
  Swift::String v33 = *(void *)(v0 + 200);
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v34)
  {
    uint64_t v48 = *(void **)(v0 + 312);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_12_28();
    OUTLINED_FUNCTION_5_6(v49, v50);

    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
  id v35 = Logger.logObject.getter();
  id v36 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_22_19(v36))
  {
    Swift::String v37 = (uint8_t *)OUTLINED_FUNCTION_37();
    *(_DWORD *)Swift::String v37 = 134217984;
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      Swift::String_optional v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::String_optional v38 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *id v54 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v35, v36, "Completing request with %ld processed item(s)", v37, 0xCu);
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v51 = objc_msgSend(*(id *)(v0 + 256), sel_extensionContext);
  id v52 = *(void **)(v0 + 312);
  if (v51)
  {
    id v53 = v51;
    swift_beginAccess();
    specialized _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_28();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v53 = v52;
  }

  id v42 = *(uint64_t (**)(void))(v0 + 8);
LABEL_30:
  return v42();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 344) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 280);
  uint64_t v6 = *(void *)(v2 + 272);
  if (v0) {
    uint64_t v7 = ShareViewController.processInputItems();
  }
  else {
    uint64_t v7 = ShareViewController.processInputItems();
  }
  return MEMORY[0x1F4188298](v7, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  void *v23;
  void *v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  uint64_t v36;

  id v35 = v0;
  v34[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0 + 48;
  MEMORY[0x1C87733A0](*(id *)(v0 + 328));
  if (*(void *)((*(void *)(v0 + 200) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 200) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v2 = *(void **)(v0 + 328);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  OUTLINED_FUNCTION_4_52(v0 + 48);
  if (v4)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v13 = *(void *)(v0 + 200);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      id v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_13;
      }
    }
    else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_13:
      swift_bridgeObjectRetain_n();
      id v14 = Logger.logObject.getter();
      uint64_t v15 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_22_19(v15))
      {
        objc_super v16 = (uint8_t *)OUTLINED_FUNCTION_37();
        *(_DWORD *)objc_super v16 = 134217984;
        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v17 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        *(void *)(v0 + 192) = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v14, v15, "Completing request with %ld processed item(s)", v16, 0xCu);
        OUTLINED_FUNCTION_3();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v22 = objc_msgSend(*(id *)(v0 + 256), sel_extensionContext);
      uint64_t v23 = *(void **)(v0 + 312);
      if (v22)
      {
        uint64_t v24 = v22;
        swift_beginAccess();
        specialized _arrayForceCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_18_28();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = v23;
      }

      uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_27;
    }
    id v27 = *(void **)(v0 + 312);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_12_28();
    OUTLINED_FUNCTION_5_6(v28, v29);

    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
LABEL_27:
    return v25();
  }
  Swift::String v33 = v0 + 16;
  uint64_t v5 = v0 + 80;
  uint64_t v6 = v0 + 112;
  Swift::String_optional v31 = v0 + 80;
  Swift::String v32 = v0;
  Swift::String v30 = v0 + 48;
  while (1)
  {
    uint64_t v7 = OUTLINED_FUNCTION_14_25(v3);
    outlined init with copy of Any(v7, v1);
    outlined init with copy of Any(v1, v5);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSExtensionItem);
    if (swift_dynamicCast()) {
      break;
    }
    outlined init with copy of Any(v1, v6);
    uint64_t v8 = Logger.logObject.getter();
    id v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = OUTLINED_FUNCTION_37();
      v34[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)id v10 = 136315138;
      outlined init with copy of Any(v6, v33);
      uint64_t v11 = String.init<A>(describing:)();
      *(void *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v34);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v6);
      _os_log_impl(&dword_1C2F90000, v8, v9, "Skipping %s since it's not a NSExtensionItem", (uint8_t *)v10, 0xCu);
      uint64_t v1 = v30;
      swift_arrayDestroy();
      uint64_t v5 = v31;
      uint64_t v0 = v32;
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1(v6);
    }
    OUTLINED_FUNCTION_4_52(v1);
    if (v4) {
      goto LABEL_11;
    }
  }
  OUTLINED_FUNCTION_20_20();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v18;
  *uint64_t v18 = v0;
  v18[1] = ShareViewController.processInputItems();
  uint64_t v19 = OUTLINED_FUNCTION_16_5();
  return ShareViewController.processExtensionItem(_:for:)(v19, v20);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v39;
  void *v40;
  void *v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  uint64_t v52;
  uint64_t v53;

  id v52 = v0;
  v51[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0 + 48;
  uint64_t v2 = *(void **)(v0 + 344);
  uint64_t v3 = *(id *)(v0 + 328);
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.error.getter();
  id v50 = v0;
  if (os_log_type_enabled(v7, v8))
  {
    Swift::String v47 = *(void **)(v0 + 344);
    id v9 = *(void **)(v0 + 328);
    id v10 = swift_slowAlloc();
    v51[0] = swift_slowAlloc();
    *(_DWORD *)id v10 = 136315394;
    uint64_t v11 = v9;
    uint64_t v12 = objc_msgSend(v11, sel_description);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 2080;
    swift_getErrorValue();
    objc_super v16 = Error.localizedDescription.getter();
    *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2F90000, v7, v8, "Skipping %s due to error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v18 = *(void **)(v0 + 344);
    uint64_t v19 = *(void **)(v0 + 328);
  }
  OUTLINED_FUNCTION_4_52(v1);
  if (v21)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_release();
    Swift::String v30 = *(void *)(v0 + 200);
    if (v30 >> 62)
    {
      swift_bridgeObjectRetain();
      id v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43) {
        goto LABEL_14;
      }
    }
    else if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_14:
      swift_bridgeObjectRetain_n();
      Swift::String_optional v31 = Logger.logObject.getter();
      Swift::String v32 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_22_19(v32))
      {
        Swift::String v33 = (uint8_t *)OUTLINED_FUNCTION_37();
        *(_DWORD *)Swift::String v33 = 134217984;
        if (v30 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v34 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        *(void *)(v0 + 192) = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v31, v32, "Completing request with %ld processed item(s)", v33, 0xCu);
        OUTLINED_FUNCTION_3();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      Swift::String v39 = objc_msgSend(*(id *)(v0 + 256), sel_extensionContext);
      Swift::String v40 = *(void **)(v0 + 312);
      if (v39)
      {
        uint64_t v41 = v39;
        swift_beginAccess();
        specialized _arrayForceCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_18_28();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v40;
      }

      id v42 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_28;
    }
    Swift::String v44 = *(void **)(v0 + 312);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_12_28();
    OUTLINED_FUNCTION_5_6(v45, v46);

    id v42 = *(uint64_t (**)(void))(v0 + 8);
LABEL_28:
    return v42();
  }
  id v49 = v0 + 16;
  uint64_t v22 = v0 + 80;
  uint64_t v23 = v0 + 112;
  uint64_t v48 = v0 + 80;
  while (1)
  {
    uint64_t v24 = OUTLINED_FUNCTION_14_25(v20);
    outlined init with copy of Any(v24, v1);
    outlined init with copy of Any(v1, v22);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSExtensionItem);
    if (swift_dynamicCast()) {
      break;
    }
    outlined init with copy of Any(v1, v23);
    uint64_t v25 = Logger.logObject.getter();
    id v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = OUTLINED_FUNCTION_37();
      v51[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)id v27 = 136315138;
      outlined init with copy of Any(v23, v49);
      id v28 = String.init<A>(describing:)();
      *(void *)(v27 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v51);
      uint64_t v0 = v50;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v23);
      _os_log_impl(&dword_1C2F90000, v25, v26, "Skipping %s since it's not a NSExtensionItem", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy();
      uint64_t v22 = v48;
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1(v23);
    }
    OUTLINED_FUNCTION_4_52(v1);
    if (v21) {
      goto LABEL_12;
    }
  }
  OUTLINED_FUNCTION_20_20();
  id v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v35;
  *id v35 = v0;
  v35[1] = ShareViewController.processInputItems();
  id v36 = OUTLINED_FUNCTION_16_5();
  return ShareViewController.processExtensionItem(_:for:)(v36, v37);
}

uint64_t ShareViewController.processExtensionItem(_:for:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for MainActor();
  v3[6] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[7] = v5;
  v3[8] = v4;
  return MEMORY[0x1F4188298](ShareViewController.processExtensionItem(_:for:), v5, v4);
}

uint64_t ShareViewController.processExtensionItem(_:for:)()
{
  unint64_t v1 = outlined bridged method (pb) of @objc NSExtensionItem.attachments.getter(*(void **)(v0 + 16));
  *(void *)(v0 + 72) = v1;
  if (!v1)
  {
    uint64_t v25 = *(void **)(v0 + 16);
    swift_release();
    _StringGuts.grow(_:)(21);
    id v26 = v25;
    id v27 = objc_msgSend(v26, sel_description);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    swift_bridgeObjectRelease();
    uint64_t v45 = v28;
    uint64_t v46 = v30;
    OUTLINED_FUNCTION_19_25();
    unint64_t v23 = 0xD000000000000013;
LABEL_24:
    String.append(_:)(*(Swift::String *)&v23);
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    OUTLINED_FUNCTION_29();
    *Swift::String_optional v31 = v45;
    v31[1] = v46;
    swift_willThrow();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_3_64();
    __asm { BRAA            X1, X16 }
  }
  if (v1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    *(void *)(v0 + 80) = v2;
    if (!v2)
    {
LABEL_22:
      uint64_t v17 = *(void **)(v0 + 16);
      swift_release();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_26_18();
      id v18 = v17;
      id v19 = objc_msgSend(v18, sel_description);
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      swift_bridgeObjectRelease();
      uint64_t v45 = v20;
      uint64_t v46 = v22;
      OUTLINED_FUNCTION_19_25();
      goto LABEL_24;
    }
    uint64_t v3 = 0;
LABEL_6:
    OUTLINED_FUNCTION_23_20();
    id v6 = v5 ? *(id *)(v4 + 8 * (void)v3 + 32) : (id)MEMORY[0x1C87744F0](v3);
    uint64_t v7 = v6;
    *(void *)(v0 + 88) = v6;
    *(void *)(v0 + 96) = (char *)v3 + 1;
    if (!__OFADD__(v3, 1)) {
      break;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  OUTLINED_FUNCTION_1_67();
  uint64_t v3 = v8;
  id v9 = objc_msgSend(v7, sel_hasItemConformingToTypeIdentifier_, v8);

  if (v9)
  {
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v34;
    *uint64_t v34 = v0;
    v34[1] = ShareViewController.processExtensionItem(_:for:);
    OUTLINED_FUNCTION_3_64();
    return ShareViewController.loadSandboxToken(from:)(v35);
  }

  OUTLINED_FUNCTION_21_20();
  if (!v5) {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (1)
  {
    OUTLINED_FUNCTION_23_20();
    if (v5) {
      id v12 = *(id *)(v11 + 8 * v10 + 32);
    }
    else {
      id v12 = (id)MEMORY[0x1C87744F0](v10);
    }
    uint64_t v13 = v12;
    *(void *)(v0 + 136) = v12;
    id v14 = (id)(v10 + 1);
    if (__OFADD__(v10, 1)) {
      goto LABEL_34;
    }
    OUTLINED_FUNCTION_1_67();
    unsigned __int8 v16 = OUTLINED_FUNCTION_25_18(v15);

    if ((v16 & 1) == 0
      && objc_msgSend(v13, sel_respondsToSelector_, sel_sl_hasPossibleCollaborationRepresentation)
      && (objc_msgSend(v13, sel_sl_hasPossibleCollaborationRepresentation) & 1) != 0)
    {
      break;
    }
    id v9 = *(id *)(v0 + 80);

    ++v10;
    if (v14 == v9) {
      goto LABEL_22;
    }
  }
  Swift::String v39 = *(void **)(v0 + 24);
  uint64_t v38 = *(void *)(v0 + 32);
  swift_bridgeObjectRelease_n();
  *(void *)(v0 + 144) = *(void *)(v38
                                    + OBJC_IVAR____TtC15ConversationKit19ShareViewController_collaborationInitiationManager);
  v13;
  id v40 = objc_msgSend(v39, sel_UUID);
  uint64_t v41 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_7_45(v41);
  *(void *)(v0 + 160) = v42;
  *(void *)(v0 + 168) = swift_task_alloc();
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v43 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v43;
  *id v43 = v0;
  v43[1] = ShareViewController.processExtensionItem(_:for:);
  OUTLINED_FUNCTION_3_64();
  return NSItemProvider.collaborationInitiator.getter();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[14] = v5;
  v3[15] = v6;
  v3[16] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v7 = v3[7];
    uint64_t v8 = v3[8];
    id v9 = ShareViewController.processExtensionItem(_:for:);
  }
  else
  {
    uint64_t v7 = v3[7];
    uint64_t v8 = v3[8];
    id v9 = ShareViewController.processExtensionItem(_:for:);
  }
  return MEMORY[0x1F4188298](v9, v7, v8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  unsigned __int8 v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  uint64_t v48 = v0;
  unint64_t v1 = (void *)MEMORY[0x1C87730B0](v0[14], v0[15]);
  consumeSandboxToken(v1);

  if (one-time initialization token for default != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.info.getter();
  char v5 = (id)v4;
  id v6 = os_log_type_enabled(v3, v4);
  uint64_t v7 = v0[15];
  if (v6)
  {
    uint64_t v8 = v0[14];
    id v9 = (void *)v0[11];
    uint64_t v10 = OUTLINED_FUNCTION_37();
    uint64_t v46 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v46);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v3, (os_log_type_t)v5, "Consumed sandbox token %s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v10 = v0[11];
    swift_bridgeObjectRelease_n();
  }
  OUTLINED_FUNCTION_21_20();
  if (v11)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unsigned __int8 v16 = 0;
    while (1)
    {
      OUTLINED_FUNCTION_23_20();
      if (v11) {
        id v18 = *(id *)(v17 + 8 * v16 + 32);
      }
      else {
        id v18 = (id)MEMORY[0x1C87744F0](v16);
      }
      id v19 = v18;
      v0[17] = v18;
      uint64_t v20 = (id)(v16 + 1);
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      OUTLINED_FUNCTION_1_67();
      uint64_t v22 = OUTLINED_FUNCTION_25_18(v21);

      if ((v22 & 1) == 0
        && objc_msgSend(v19, sel_respondsToSelector_, sel_sl_hasPossibleCollaborationRepresentation)
        && (objc_msgSend(v19, sel_sl_hasPossibleCollaborationRepresentation) & 1) != 0)
      {
        break;
      }
      char v5 = (id)v0[10];

      ++v16;
      if (v20 == v5)
      {
        unint64_t v23 = (void *)v0[2];
        swift_release();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_26_18();
        uint64_t v24 = v23;
        uint64_t v25 = objc_msgSend(v24, sel_description);
        id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        swift_bridgeObjectRelease();
        uint64_t v46 = v26;
        Swift::String v47 = v28;
        OUTLINED_FUNCTION_19_25();
        v29._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v29);
        uint64_t v30 = v46;
        Swift::String_optional v31 = v47;
        lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
        OUTLINED_FUNCTION_29();
        *Swift::String v32 = v30;
        v32[1] = v31;
        swift_willThrow();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_3_64();
        __asm { BRAA            X1, X16 }
      }
    }
    id v40 = (void *)v0[3];
    Swift::String v39 = v0[4];
    swift_bridgeObjectRelease_n();
    v0[18] = *(void *)(v39 + OBJC_IVAR____TtC15ConversationKit19ShareViewController_collaborationInitiationManager);
    v19;
    uint64_t v41 = objc_msgSend(v40, sel_UUID);
    uint64_t v42 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_7_45(v42);
    v0[20] = v43;
    v0[21] = swift_task_alloc();
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v44 = (void *)swift_task_alloc();
    v0[22] = v44;
    *uint64_t v44 = v0;
    v44[1] = ShareViewController.processExtensionItem(_:for:);
    OUTLINED_FUNCTION_3_64();
    return NSItemProvider.collaborationInitiator.getter();
  }
  else
  {
    while (1)
    {
      OUTLINED_FUNCTION_23_20();
      if (v11) {
        uint64_t v13 = *(id *)(v12 + 8 * v10 + 32);
      }
      else {
        uint64_t v13 = (id)MEMORY[0x1C87744F0](v10);
      }
      id v14 = v13;
      v0[11] = v13;
      v0[12] = v10 + 1;
      if (__OFADD__(v10, 1))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      OUTLINED_FUNCTION_1_67();
      uint64_t v10 = v15;
      char v5 = objc_msgSend(v14, sel_hasItemConformingToTypeIdentifier_, v15);

      if (v5) {
        break;
      }

      OUTLINED_FUNCTION_21_20();
      if (v11) {
        goto LABEL_13;
      }
    }
    uint64_t v35 = (void *)swift_task_alloc();
    v0[13] = v35;
    *uint64_t v35 = v0;
    v35[1] = ShareViewController.processExtensionItem(_:for:);
    OUTLINED_FUNCTION_3_64();
    return ShareViewController.loadSandboxToken(from:)(v36);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[23] = v5;
  v3[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v3[20] + 8))(v3[21], v3[19]);
    id v6 = v3[7];
    uint64_t v7 = v3[8];
    uint64_t v8 = ShareViewController.processExtensionItem(_:for:);
  }
  else
  {
    id v6 = v3[7];
    uint64_t v7 = v3[8];
    uint64_t v8 = ShareViewController.processExtensionItem(_:for:);
  }
  return MEMORY[0x1F4188298](v8, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  unint64_t v1 = *(void **)(v0 + 136);
  if (*(unsigned char *)(v0 + 264) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 24);
    *(void *)(v0 + 232) = static MainActor.shared.getter();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v4;
    v4[2] = v2;
    v4[3] = v1;
    v4[4] = v3;
    char v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v5;
    *char v5 = v0;
    v5[1] = ShareViewController.processExtensionItem(_:for:);
    return MEMORY[0x1F4188160](v5);
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_5_6(v6, 0xD000000000000033);

    OUTLINED_FUNCTION_6();
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  char v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *id v6 = v5;
  v3[32] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[7];
    uint64_t v8 = v3[8];
    id v9 = ShareViewController.processExtensionItem(_:for:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v7 = v3[7];
    uint64_t v8 = v3[8];
    id v9 = ShareViewController.processExtensionItem(_:for:);
  }
  return MEMORY[0x1F4188298](v9, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  unint64_t v1 = *(void **)(v0 + 136);
  swift_release();
  ShareViewController.backgroundSendUtility.setter(0);

  OUTLINED_FUNCTION_6();
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  unint64_t v1 = *(void **)(v0 + 88);
  swift_release();

  OUTLINED_FUNCTION_6();
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  unint64_t v1 = *(void **)(v0 + 136);

  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  unint64_t v1 = *(void **)(v0 + 136);

  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_28_0();
  unint64_t v1 = *(void **)(v0 + 136);

  swift_release();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v2();
}

id ShareViewController.processExtensionItem(_:for:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_attributedTitle);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_string);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(v0 + 200) = v5;
  id result = objc_msgSend(*(id *)(v0 + 32), sel_view);
  if (result)
  {
    uint64_t v7 = result;
    *(void *)(v0 + 208) = objc_msgSend(result, sel_window);

    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v8;
    *uint64_t v8 = v0;
    v8[1] = ShareViewController.processExtensionItem(_:for:);
    return (id)CollaborationInitiationManager.ensureInitiatorDisclosure(inConversationUUID:initiator:itemTitle:alertHostWindow:viewController:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ShareViewController.processExtensionItem(_:for:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_13_1();
  *id v6 = v5;
  *id v6 = *v2;
  *(void *)(v5 + 224) = v1;
  swift_task_dealloc();
  uint64_t v7 = *(void **)(v4 + 208);
  uint64_t v8 = *(void **)(v4 + 184);
  if (v1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_24_18();
    v10(v9);

    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v5 + 56);
    uint64_t v12 = *(void *)(v5 + 64);
    uint64_t v13 = ShareViewController.processExtensionItem(_:for:);
  }
  else
  {
    *(unsigned char *)(v5 + 264) = a1 & 1;
    uint64_t v14 = OUTLINED_FUNCTION_24_18();
    v15(v14);

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v11 = *(void *)(v5 + 56);
    uint64_t v12 = *(void *)(v5 + 64);
    uint64_t v13 = ShareViewController.processExtensionItem(_:for:);
  }
  return MEMORY[0x1F4188298](v13, v11, v12);
}

uint64_t ShareViewController.loadSandboxToken(from:)(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  v1[4] = a1;
  v1[5] = ObjectType;
  v1[6] = type metadata accessor for MainActor();
  v1[7] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[8] = v5;
  v1[9] = v4;
  return MEMORY[0x1F4188298](ShareViewController.loadSandboxToken(from:), v5, v4);
}

uint64_t ShareViewController.loadSandboxToken(from:)()
{
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v0 + 80) = static MainActor.shared.getter();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *(_OWORD *)(v1 + 16) = v4;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v2;
  void *v2 = v0;
  v2[1] = ShareViewController.loadSandboxToken(from:);
  return MEMORY[0x1F4188160](v0 + 16);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  id v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *long long v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_13_1();
  *id v6 = v5;
  v3[13] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[8];
    uint64_t v8 = v3[9];
    uint64_t v9 = ShareViewController.loadSandboxToken(from:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v7 = v3[8];
    uint64_t v8 = v3[9];
    uint64_t v9 = ShareViewController.loadSandboxToken(from:);
  }
  return MEMORY[0x1F4188298](v9, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  id v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

void closure #1 in ShareViewController.loadSandboxToken(from:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<String, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](0x2D786F62646E6173, 0xED00006E656B6F74);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in ShareViewController.loadSandboxToken(from:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_29;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_loadItemForTypeIdentifier_options_completionHandler_, v7, 0, v10);
  _Block_release(v10);
}

uint64_t closure #1 in closure #1 in ShareViewController.loadSandboxToken(from:)(uint64_t a1, void *a2)
{
  if (a1
    && (swift_unknownObjectRetain(),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding),
        (swift_dynamicCast() & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<String, Error>);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    _StringGuts.grow(_:)(55);
    v4._object = (void *)0x80000001C379C310;
    v4._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v4);
    id v5 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError();
    swift_allocError();
    *uint64_t v7 = 0;
    v7[1] = 0xE000000000000000;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<String, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
}

void closure #2 in ShareViewController.processExtensionItem(_:for:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v10 = a3;
  id v11 = a4;
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  id v15 = objc_allocWithZone(MEMORY[0x1E4F3BD68]);
  id v16 = @nonobjc SWBackgroundSendUtility.init(itemProvider:faceTime:queue:completion:)(v10, v11, v12, (uint64_t)partial apply for closure #1 in closure #2 in ShareViewController.processExtensionItem(_:for:), v14);
  ShareViewController.backgroundSendUtility.setter((uint64_t)v16);
}

uint64_t closure #1 in closure #2 in ShareViewController.processExtensionItem(_:for:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

void *initializeBufferWithCopyOfBuffer for ShareViewControllerError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ShareViewControllerError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ShareViewControllerError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ShareViewControllerError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareViewControllerError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareViewControllerError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareViewControllerError()
{
  return &type metadata for ShareViewControllerError;
}

uint64_t method lookup function for ShareViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ShareViewController);
}

uint64_t sub_1C3153280()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ShareViewController.startProcessInputItemsTask()()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in CallRecordingService.stopRecording(call:completion:);
  return closure #1 in ShareViewController.startProcessInputItemsTask()(v3, v4, v5, v6);
}

id @nonobjc SWBackgroundSendUtility.init(itemProvider:faceTime:queue:completion:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v12[4] = a4;
  void v12[5] = a5;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  void v12[3] = &block_descriptor_22_0;
  uint64_t v9 = _Block_copy(v12);
  id v10 = objc_msgSend(v5, sel_initWithItemProvider_faceTimeConversation_queue_completion_, a1, a2, a3, v9);

  _Block_release(v9);
  swift_release();
  return v10;
}

unint64_t lazy protocol witness table accessor for type ShareViewControllerError and conformance ShareViewControllerError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShareViewControllerError and conformance ShareViewControllerError;
  if (!lazy protocol witness table cache variable for type ShareViewControllerError and conformance ShareViewControllerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShareViewControllerError and conformance ShareViewControllerError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TUConversation and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUConversation and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversation and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversation and conformance NSObject);
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc NSExtensionItem.attachments.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_attachments);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnnn) of @objc NSExtensionContext.completeRequest(returningItems:completionHandler:)(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_completeRequestReturningItems_completionHandler_, isa, a2);
}

void partial apply for closure #2 in ShareViewController.processExtensionItem(_:for:)(uint64_t a1)
{
  closure #2 in ShareViewController.processExtensionItem(_:for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void partial apply for closure #1 in ShareViewController.loadSandboxToken(from:)(uint64_t a1)
{
  closure #1 in ShareViewController.loadSandboxToken(from:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_1C31535EC()
{
  return objectdestroy_15Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<String, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in ShareViewController.loadSandboxToken(from:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<String, Error>);
  OUTLINED_FUNCTION_1_1(v4);
  return closure #1 in closure #1 in ShareViewController.loadSandboxToken(from:)(a1, a2);
}

uint64_t sub_1C315365C()
{
  return objectdestroy_15Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t objectdestroy_15Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in ShareViewController.processExtensionItem(_:for:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  OUTLINED_FUNCTION_1_1(v2);
  return closure #1 in closure #2 in ShareViewController.processExtensionItem(_:for:)(a1);
}

void ShareCardSharePlayHeaderView.controlsManager.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*ShareCardSharePlayHeaderView.controlsManager.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void ShareCardSharePlayHeaderView.app.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*ShareCardSharePlayHeaderView.app.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

id ShareCardSharePlayHeaderView.init(controlsManager:app:)(void *a1, void *a2)
{
  State.init(wrappedValue:)();
  uint64_t v4 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x78);
  id v5 = a1;
  uint64_t v6 = a2;
  v4();

  swift_release();
  return v5;
}

uint64_t ShareCardSharePlayHeaderView.picker.getter(uint64_t a1, void *a2)
{
  type metadata accessor for MenuOrder();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.menuOrder(_:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v29 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = v8 - v7;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  id v14 = objc_msgSend(self, sel_conversationKit);
  v31._object = (void *)0xE000000000000000;
  v15._object = (void *)0x80000001C3794EC0;
  v15._countAndFlagsBits = 0xD000000000000017;
  v16.value._countAndFlagsBits = 0x61737265766E6F43;
  v16.value._object = (void *)0xEF74694B6E6F6974;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v31);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1C3769620;
  uint64_t v19 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x68))();
  uint64_t v21 = v20;
  *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  String.init(format:_:)();
  swift_bridgeObjectRelease();
  String.uppercased()();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView> and conformance <> Section<A, B, C>();
  Menu.init(content:label:)();
  static MenuOrder.fixed.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Menu<ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>> and conformance Menu<A, B>, &demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>>);
  View.menuOrder(_:)();
  OUTLINED_FUNCTION_26_2();
  v22();
  OUTLINED_FUNCTION_26_2();
  v23();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v13, v9, v30);
  uint64_t v25 = (uint64_t (**)())(v13 + *(int *)(v28 + 36));
  *uint64_t v25 = partial apply for closure #1 in View.animation(_:);
  v25[1] = (uint64_t (*)())v24;
  OUTLINED_FUNCTION_26_2();
  v26();
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  outlined destroy of SystemUpdateNotice?(v13, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ShareCardSharePlayHeaderView.picker.getter()
{
  return Section<>.init<A>(_:content:)();
}

uint64_t closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(void *a1, void *a2, char a3, uint64_t a4)
{
  swift_getKeyPath();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(unsigned char *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  swift_retain();
  id v9 = a1;
  id v10 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ForegroundApp.AutomaticShareState]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<HStack<TupleView<(Text, Spacer, Image?)>>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [ForegroundApp.AutomaticShareState] and conformance [A], &demangling cache variable for type metadata for [ForegroundApp.AutomaticShareState]);
  lazy protocol witness table accessor for type ForegroundApp.AutomaticShareState and conformance ForegroundApp.AutomaticShareState();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<HStack<TupleView<(Text, Spacer, Image?)>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<HStack<TupleView<(Text, Spacer, Image?)>>>);
  return ForEach<>.init(_:id:content:)();
}

uint64_t closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(char *a1, void *a2, void *a3, char a4, uint64_t a5)
{
  char v9 = *a1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(unsigned char *)(v10 + 32) = a4;
  *(void *)(v10 + 40) = a5;
  *(unsigned char *)(v10 + 48) = v9;
  swift_retain();
  id v11 = a2;
  id v12 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(Text, Spacer, Image?)>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(Text, Spacer, Image?)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(Text, Spacer, Image?)>>);
  return Button.init(action:label:)();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(void *a1, void *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  int v7 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ForegroundApp.AutomaticShareState>);
  State.wrappedValue.setter();
  BOOL v8 = v7 == 2;
  char v9 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(BOOL))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x90))(v8);
  id v10 = ShareCardSharePlayHeaderView.shareMediaEphemeralAlert(authorization:)(v8, (uint64_t)a1, a2);
  return (*(uint64_t (**)(id))((*v9 & *a1) + 0x7F8))(v10);
}

__n128 closure #2 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter@<Q0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static VerticalAlignment.center.getter();
  closure #1 in closure #2 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(a1, (uint64_t)&v11);
  char v5 = v12;
  uint64_t v6 = v13;
  uint64_t v7 = v14;
  char v8 = v15;
  uint64_t v9 = v16;
  __n128 result = v11;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(__n128 *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v7;
  *(unsigned char *)(a2 + 64) = v8;
  *(void *)(a2 + 72) = v9;
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  int v3 = a1;
  id v4 = objc_msgSend(self, sel_conversationKit);
  unint64_t v20 = 0xE000000000000000;
  if (v3 == 1)
  {
    uint64_t v5 = 0x7478654E206B7341;
    uint64_t v6 = 0x656D695420;
  }
  else
  {
    uint64_t v5 = 0x6974616D6F747541;
    uint64_t v6 = 0x796C6C6163;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
  v8.value._countAndFlagsBits = 0x61737265766E6F43;
  v8.value._object = (void *)0xEF74694B6E6F6974;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  uint64_t v10 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, v8, (NSBundle)v4, v9, *(Swift::String *)(&v20 - 1));

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ForegroundApp.AutomaticShareState>);
  State.wrappedValue.getter();
  if (v21 == v3) {
    uint64_t v18 = Image.init(systemName:)();
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(unsigned char *)(a2 + 16) = v15 & 1;
  *(void *)(a2 + 24) = v17;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v18;
  outlined copy of Text.Storage(v11, v13, v15 & 1);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v11, v13, v15 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in ShareCardSharePlayHeaderView.picker.getter@<X0>(char a1@<W2>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v42 = type metadata accessor for LayoutDirection();
  uint64_t v5 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Label<Text, Image>);
  uint64_t v8 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
  MEMORY[0x1F4188790](v38);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>);
  MEMORY[0x1F4188790](v39);
  char v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  MEMORY[0x1F4188790](v40);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v44._countAndFlagsBits) = a1;
  v44._object = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ForegroundApp.AutomaticShareState>);
  State.wrappedValue.getter();
  LODWORD(a2) = v45;
  id v17 = objc_msgSend(self, sel_conversationKit);
  if (a2 == 1)
  {
    unint64_t v18 = 0xD000000000000014;
    unint64_t v36 = 0xE000000000000000;
    unint64_t v19 = 0x80000001C3791D70;
  }
  else
  {
    unint64_t v36 = 0xE000000000000000;
    unint64_t v19 = 0x80000001C3791D90;
    unint64_t v18 = 0xD000000000000017;
  }
  v20.value._countAndFlagsBits = 0x61737265766E6F43;
  v20.value._object = (void *)0xEF74694B6E6F6974;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  uint64_t v22 = 0;
  Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v18, v20, (NSBundle)v17, v21, *(Swift::String *)(&v36 - 1));

  Swift::String v44 = v23;
  lazy protocol witness table accessor for type String and conformance String();
  Label<>.init<A>(_:systemImage:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = v42;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F3CBE8], v42);
  id v26 = (uint64_t *)&v12[*(int *)(v38 + 36)];
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v26 + *(int *)(v27 + 28), v7, v25);
  *id v26 = KeyPath;
  uint64_t v28 = v41;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v41);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v25);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v28);
  uint64_t v29 = static Color.secondary.getter();
  uint64_t v30 = swift_getKeyPath();
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
  Swift::String v31 = (uint64_t *)&v14[*(int *)(v39 + 36)];
  *Swift::String v31 = v30;
  v31[1] = v29;
  outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
  uint64_t v32 = static Font.callout.getter();
  uint64_t v33 = swift_getKeyPath();
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v34 = (uint64_t *)&v16[*(int *)(v40 + 36)];
  *uint64_t v34 = v33;
  v34[1] = v32;
  outlined destroy of SystemUpdateNotice?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v16, v43, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
}

uint64_t closure #1 in ShareCardSharePlayHeaderView.content.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v38 = a4;
  int v37 = a3;
  uint64_t v35 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v39 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = type metadata accessor for Image.ResizingMode();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  unint64_t v36 = a2;
  uint64_t v16 = (void *)static UIImage.appIcon(for:usingIconCrop:)(*(void *)((char *)a2 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier), *(void **)((char *)a2 + OBJC_IVAR____TtC15ConversationKit13ForegroundApp_bundleIdentifier + 8), 0);
  if (v16)
  {
    id v17 = v16;
    Image.init(uiImage:)();
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4F3EBF8], v12);
    uint64_t v18 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    static Layout.ConversationControls.values.getter((uint64_t)v40);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v33 = v41;
    uint64_t v34 = v40[50];
    uint64_t v32 = v42;
    uint64_t v19 = v43;
    uint64_t v21 = v44;
    uint64_t v20 = v45;

    uint64_t v22 = 0x3FF0000000000000;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v22 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    uint64_t v19 = 0;
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v23 = static HorizontalAlignment.leading.getter();
  static Layout.ConversationControls.values.getter((uint64_t)v46);
  uint64_t v24 = v46[17];
  *(void *)uint64_t v11 = v23;
  *((void *)v11 + 1) = v24;
  v11[16] = 0;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>);
  closure #1 in closure #1 in ShareCardSharePlayHeaderView.content.getter(v35, v36, v37, v38, (uint64_t)&v11[*(int *)(v25 + 44)]);
  uint64_t v26 = v39;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v11, v39, &demangling cache variable for type metadata for VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>);
  *a5 = v18;
  a5[1] = v22;
  uint64_t v27 = v34;
  a5[2] = 0;
  a5[3] = v27;
  uint64_t v28 = v32;
  a5[4] = v33;
  a5[5] = v28;
  a5[6] = v19;
  a5[7] = v21;
  a5[8] = v20;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>));
  outlined init with copy of Environment<DynamicTypeSize>.Content(v26, (uint64_t)a5 + *(int *)(v29 + 48), &demangling cache variable for type metadata for VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>);
  swift_retain();
  outlined destroy of SystemUpdateNotice?((uint64_t)v11, &demangling cache variable for type metadata for VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>);
  outlined destroy of SystemUpdateNotice?(v26, &demangling cache variable for type metadata for VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ShareCardSharePlayHeaderView.content.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = a4;
  int v32 = a3;
  uint64_t v31 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v30 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v29 = (char *)&v29 - v11;
  uint64_t v34 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x68))(v10);
  uint64_t v35 = v12;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  static Font.Weight.bold.getter();
  uint64_t v18 = Text.fontWeight(_:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  outlined consume of Text.Storage(v13, v15, v17);
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t)v29;
  ShareCardSharePlayHeaderView.picker.getter(v31, a2);
  uint64_t v26 = v30;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v25, v30, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>);
  *(void *)a5 = v18;
  *(void *)(a5 + 8) = v20;
  *(unsigned char *)(a5 + 16) = v24;
  *(void *)(a5 + 24) = v22;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>));
  outlined init with copy of Environment<DynamicTypeSize>.Content(v26, a5 + *(int *)(v27 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>);
  outlined copy of Text.Storage(v18, v20, v24);
  swift_bridgeObjectRetain();
  outlined destroy of SystemUpdateNotice?(v25, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>);
  outlined destroy of SystemUpdateNotice?(v26, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>);
  outlined consume of Text.Storage(v18, v20, v24);
  return swift_bridgeObjectRelease();
}

uint64_t ShareCardSharePlayHeaderView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>);
  MEMORY[0x1F4188790](v9 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v12 = (unsigned char *)(v11 - v10);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout>);
  MEMORY[0x1F4188790](v18 - 8);
  OUTLINED_FUNCTION_16_0();
  unsigned __int8 v19 = static Axis.Set.horizontal.getter();
  unsigned __int8 v20 = static Axis.Set.vertical.getter();
  char v21 = Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v19) {
    char v21 = Axis.Set.init(rawValue:)();
  }
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v20) {
    char v21 = Axis.Set.init(rawValue:)();
  }
  unsigned char *v12 = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_SizeFittingRoot, TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>);
  closure #1 in ShareCardSharePlayHeaderView.body.getter(a1, a2, a3, a4, (uint64_t)&v12[*(int *)(v22 + 44)]);
  char v23 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v12, v17, &demangling cache variable for type metadata for ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>);
  uint64_t v32 = v17 + *(int *)(v13 + 36);
  *(unsigned char *)uint64_t v32 = v23;
  *(void *)(v32 + 8) = v25;
  *(void *)(v32 + 16) = v27;
  *(void *)(v32 + 24) = v29;
  *(void *)(v32 + 32) = v31;
  *(unsigned char *)(v32 + 40) = 0;
  outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>);
  static Alignment.leading.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  outlined destroy of SystemUpdateNotice?(v17, &demangling cache variable for type metadata for ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v5, a5, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout>);
}

uint64_t closure #1 in ShareCardSharePlayHeaderView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v30[-1] - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v30[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unsigned __int8 v20 = (char *)&v30[-1] - v19;
  static Layout.ConversationControls.values.getter((uint64_t)v30);
  uint64_t v21 = v30[15];
  *(void *)unsigned __int8 v20 = static VerticalAlignment.center.getter();
  *((void *)v20 + 1) = v21;
  v20[16] = 0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  closure #1 in ShareCardSharePlayHeaderView.content.getter(a1, a2, a3, a4, (uint64_t *)&v20[*(int *)(v22 + 44)]);
  uint64_t v23 = static HorizontalAlignment.leading.getter();
  static Layout.ConversationControls.values.getter((uint64_t)v31);
  uint64_t v24 = v31[16];
  *(void *)uint64_t v14 = v23;
  *((void *)v14 + 1) = v24;
  v14[16] = 0;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  closure #1 in ShareCardSharePlayHeaderView.content.getter(a1, a2, a3, a4, (uint64_t *)&v14[*(int *)(v25 + 44)]);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  uint64_t v26 = v29;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v18, v29, &demangling cache variable for type metadata for HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>));
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v12, v26 + *(int *)(v27 + 48), &demangling cache variable for type metadata for VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  outlined destroy of SystemUpdateNotice?((uint64_t)v14, &demangling cache variable for type metadata for VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  outlined destroy of SystemUpdateNotice?((uint64_t)v20, &demangling cache variable for type metadata for HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  outlined destroy of SystemUpdateNotice?((uint64_t)v12, &demangling cache variable for type metadata for VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
  return outlined destroy of SystemUpdateNotice?((uint64_t)v18, &demangling cache variable for type metadata for HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>);
}

id ShareCardSharePlayHeaderView.shareMediaEphemeralAlert(authorization:)(char a1, uint64_t a2, void *a3)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  id v4 = (void *)*MEMORY[0x1E4FB2908];
  v36[0] = 0x616C706572616873;
  v36[1] = 0xE900000000000079;
  v36[2] = 1;
  v36[3] = v4;
  __int16 v37 = 0;
  uint64_t v38 = 4;
  char v39 = 0;
  uint64_t v40 = 0;
  id v5 = v4;
  id v6 = static UIImage.symbolImage(for:)((uint64_t)v36);

  swift_bridgeObjectRelease();
  if (v6)
  {
    id v7 = objc_msgSend(self, sel_labelColor);
    id v8 = objc_msgSend(v6, sel_imageWithTintColor_, v7);
  }
  else
  {
    id v8 = 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  uint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_conversationKit);
  v11._object = (void *)0xE900000000000059;
  v41._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0x414C504552414853;
  v12.value._countAndFlagsBits = 0x61737265766E6F43;
  v12.value._object = (void *)0xEF74694B6E6F6974;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v41._countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v41);

  memset(v34, 0, sizeof(v34));
  char v35 = 1;
  id v15 = static NSAttributedString.localizedString(_:prefixImage:imageBounds:)(v14._countAndFlagsBits, (uint64_t)v14._object, v8, (uint64_t)v34);
  uint64_t v16 = swift_bridgeObjectRelease();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x68))(v16);
  uint64_t v19 = v18;
  id v20 = objc_msgSend(v9, sel_conversationKit);
  if (a1)
  {
    unint64_t v21 = 0xD00000000000001FLL;
    unint64_t v32 = 0xE000000000000000;
    unint64_t v22 = 0x80000001C3794E40;
  }
  else
  {
    unint64_t v32 = 0xE000000000000000;
    unint64_t v22 = 0x80000001C3794E20;
    unint64_t v21 = 0xD000000000000015;
  }
  v23.value._countAndFlagsBits = 0x61737265766E6F43;
  v23.value._object = (void *)0xEF74694B6E6F6974;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  uint64_t v25 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v21, v23, (NSBundle)v20, v24, *(Swift::String *)(&v32 - 1));

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1C3769620;
  *(void *)(v26 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v26 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v26 + 32) = v17;
  *(void *)(v26 + 40) = v19;
  uint64_t v27 = String.init(format:_:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  NSMutableAttributedString.__allocating_init(string:)(v30);

  return v15;
}

uint64_t protocol witness for View.body.getter in conformance ShareCardSharePlayHeaderView@<X0>(uint64_t a1@<X8>)
{
  return ShareCardSharePlayHeaderView.body.getter(*(void *)v1, *(void **)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in ShareCardSharePlayHeaderView.picker.getter()
{
  return closure #1 in ShareCardSharePlayHeaderView.picker.getter();
}

uint64_t partial apply for closure #2 in ShareCardSharePlayHeaderView.picker.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in ShareCardSharePlayHeaderView.picker.getter(*(unsigned char *)(v1 + 32), *(void **)(v1 + 40), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, &demangling cache variable for type metadata for Label<Text, Image>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<LayoutDirection> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<LayoutDirection>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView> and conformance <> Section<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView> and conformance <> Section<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>);
    lazy protocol witness table accessor for type ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>> and conformance <> ForEach<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView> and conformance <> Section<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<HStack<TupleView<(Text, Spacer, Image?)>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<HStack<TupleView<(Text, Spacer, Image?)>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t closure #1 in View.animation(_:)()
{
  uint64_t result = Transaction.disablesAnimations.getter();
  if ((result & 1) == 0)
  {
    swift_retain();
    return Transaction.animation.setter();
  }
  return result;
}

uint64_t sub_1C31559D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.animation(_:)()
{
  return closure #1 in View.animation(_:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Menu<ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>> and conformance Menu<A, B>, &demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<LayoutDirection>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, Section<Text, ForEach<[ForegroundApp.AutomaticShareState], ForegroundApp.AutomaticShareState, Button<HStack<TupleView<(Text, Spacer, Image?)>>>>, EmptyView>>);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ShareCardSharePlayHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ShareCardSharePlayHeaderView(id *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for ShareCardSharePlayHeaderView(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v5 = v3;
  id v6 = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShareCardSharePlayHeaderView(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShareCardSharePlayHeaderView(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareCardSharePlayHeaderView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareCardSharePlayHeaderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareCardSharePlayHeaderView()
{
  return &type metadata for ShareCardSharePlayHeaderView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>> and conformance <A> Group<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>> and conformance ViewThatFits<A>, &demangling cache variable for type metadata for ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ViewThatFits<TupleView<(HStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>, VStack<Group<TupleView<(ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _FrameLayout>?, VStack<TupleView<(Text, ModifiedContent<ModifiedContent<<<opaque return type of View.menuOrder(_:)>>.0, _TransactionModifier>, AccessibilityAttachmentModifier>)>>)>>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter()
{
  return closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(*(void **)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1C3155F68()
{
  return objectdestroy_16Tm();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(char *a1)
{
  return closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1C3155FCC()
{
  return objectdestroy_16Tm();
}

uint64_t objectdestroy_16Tm()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter()
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(*(void **)(v0 + 16), *(void **)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

double partial apply for closure #2 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #2 in closure #1 in closure #1 in closure #1 in ShareCardSharePlayHeaderView.picker.getter(*(unsigned char *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t PeoplePickerAddButtonHandler.handleContactSelection(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  if (result)
  {
    id v5 = (void (*)(void))result;
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    id v8 = CNKContactProperty.asRecipient()(v6, v7);
    if (v8)
    {
      id v9 = v8;
      v5();
    }
    return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v5);
  }
  return result;
}

id protocol witness for CNKContactProperty.contact.getter in conformance CNContactProperty()
{
  return @nonobjc CNContactProperty.contact.getter();
}

id @nonobjc CNContactProperty.contact.getter()
{
  id v1 = objc_msgSend(v0, sel_contact);
  return v1;
}

double protocol witness for CNKContactProperty.value.getter in conformance CNContactProperty@<D0>(_OWORD *a1@<X8>)
{
  return @nonobjc CNContactProperty.value.getter(a1);
}

double @nonobjc CNContactProperty.value.getter@<D0>(_OWORD *a1@<X8>)
{
  if (objc_msgSend(v1, sel_value))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

id CNKContactProperty.asRecipient()(uint64_t a1, uint64_t a2)
{
  void (*v5)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v13;
  uint64_t v14;
  void v15[3];
  uint64_t v16;

  id v4 = (void *)(*(uint64_t (**)(void))(a2 + 8))();
  id v5 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  v5(v15, a1, a2);
  if (v16)
  {
    if (swift_dynamicCast())
    {
      uint64_t v6 = 0;
      id v8 = (uint64_t)v13;
      uint64_t v7 = v14;
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v15);
  }
  v5(v15, a1, a2);
  if (v16)
  {
    type metadata accessor for CNPhoneNumber();
    if (swift_dynamicCast())
    {
      id v9 = objc_msgSend(v13, sel_stringValue);
      id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v10;

      uint64_t v6 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v15);
  }
  id v8 = 0;
  uint64_t v7 = 0xE000000000000000;
  uint64_t v6 = 5;
LABEL_10:
  if (String.count.getter() < 1)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    Swift::String v11 = objc_allocWithZone(MEMORY[0x1E4F5A138]);
    return @nonobjc CNComposeRecipient.init(contact:address:kind:)(v4, v8, v7, v6);
  }
}

uint64_t dispatch thunk of CNKContactProperty.contact.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CNKContactProperty.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.presenterViewController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.presenterViewController.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.presenterViewController.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.contactsSearchViewController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.contactsSearchViewController.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.contactsSearchViewController.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.addToken.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.addToken.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.addToken.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PeoplePickerAddButtonHandler.handleAddButtonPressed(sourceView:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

double ParticipantViewButton.ElementColors.backgroundAlpha.getter(double a1, double a2)
{
  return a2;
}

id ParticipantViewButton.discView.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_discView);
}

void *ParticipantViewButton.image.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  id v2 = v1;
  return v1;
}

id key path getter for ParticipantViewButton.image : ParticipantViewButton@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  int v3 = (void **)(*a1 + OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_image);
  swift_beginAccess();
  id v4 = *v3;
  *a2 = *v3;
  return v4;
}

void key path setter for ParticipantViewButton.image : ParticipantViewButton(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  ParticipantViewButton.image.setter(v1);
}

void ParticipantViewButton.image.setter(void *a1)
{
  OUTLINED_FUNCTION_4_10();
  int v3 = *v1;
  *id v1 = a1;
  id v4 = a1;

  ParticipantViewButton.updateColors()();
}

void ParticipantViewButton.updateColors()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v41.receiver = v0;
  v41.super_class = ObjectType;
  if (objc_msgSendSuper2(&v41, sel_isEnabled))
  {
    v39.receiver = v0;
    v39.super_class = ObjectType;
    if (objc_msgSendSuper2(&v39, sel_isHighlighted))
    {
      Swift::UInt v2 = 1;
    }
    else
    {
      v38.receiver = v0;
      v38.super_class = ObjectType;
      if (objc_msgSendSuper2(&v38, sel_isSelected)) {
        Swift::UInt v2 = 4;
      }
      else {
        Swift::UInt v2 = 0;
      }
    }
  }
  else
  {
    Swift::UInt v2 = 2;
  }
  int v3 = (uint64_t *)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_colorConfiguration];
  swift_beginAccess();
  id v4 = specialized Dictionary.subscript.getter(v2, *v3);
  double v6 = v5;
  id v8 = v7;
  double v10 = v9;
  swift_endAccess();
  if (v4)
  {
LABEL_13:
    unint64_t v21 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_discView];
    id v22 = objc_msgSend(v8, sel_colorWithAlphaComponent_, v10);
    objc_msgSend(v21, sel_setBackgroundColor_, v22);

    Swift::String_optional v23 = (id *)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_image];
    swift_beginAccess();
    if (*v23)
    {
      double v24 = v6;
      uint64_t v25 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_imageView];
      id v26 = *v23;
      id v27 = objc_msgSend(v26, sel__flatImageWithColor_, v4);
      objc_msgSend(v25, sel_setImage_, v27);

      objc_msgSend(v25, sel_setAlpha_, v24);
    }
    else
    {
      objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_imageView], sel_setImage_, 0);
    }

    return;
  }
  swift_beginAccess();
  id v4 = specialized Dictionary.subscript.getter(0, *v3);
  double v6 = v11;
  id v8 = v12;
  double v10 = v13;
  swift_endAccess();
  if (v4)
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1C37696D0;
    uint64_t v40 = v2;
    type metadata accessor for UIControlState(0);
    uint64_t v15 = String.init<A>(reflecting:)();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v18 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v14 + 64) = v18;
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    uint64_t v40 = *v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dictionary<UIControlState, ParticipantViewButton.ElementColors>);
    uint64_t v19 = String.init<A>(reflecting:)();
    *(void *)(v14 + 96) = MEMORY[0x1E4FBB1A0];
    *(void *)(v14 + 104) = v18;
    *(void *)(v14 + 72) = v19;
    *(void *)(v14 + 80) = v20;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C376BA10;
  uint64_t v40 = v2;
  type metadata accessor for UIControlState(0);
  uint64_t v29 = String.init<A>(reflecting:)();
  uint64_t v31 = v30;
  uint64_t v32 = MEMORY[0x1E4FBB1A0];
  *(void *)(v28 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v28 + 64) = v33;
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  uint64_t v40 = 0;
  uint64_t v34 = String.init<A>(reflecting:)();
  *(void *)(v28 + 96) = v32;
  *(void *)(v28 + 104) = v33;
  *(void *)(v28 + 72) = v34;
  *(void *)(v28 + 80) = v35;
  uint64_t v40 = *v3;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dictionary<UIControlState, ParticipantViewButton.ElementColors>);
  uint64_t v36 = String.init<A>(reflecting:)();
  *(void *)(v28 + 136) = v32;
  *(void *)(v28 + 144) = v33;
  *(void *)(v28 + 112) = v36;
  *(void *)(v28 + 120) = v37;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

uint64_t (*ParticipantViewButton.image.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ParticipantViewButton.image.modify;
}

uint64_t ParticipantViewButton.colorConfiguration.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for ParticipantViewButton.colorConfiguration : ParticipantViewButton@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  int v3 = (void *)(*a1 + OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_colorConfiguration);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

void key path setter for ParticipantViewButton.colorConfiguration : ParticipantViewButton()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  ParticipantViewButton.colorConfiguration.setter(v0);
}

void ParticipantViewButton.colorConfiguration.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_4_10();
  *uint64_t v1 = a1;
  swift_bridgeObjectRelease();
  ParticipantViewButton.updateColors()();
}

uint64_t (*ParticipantViewButton.colorConfiguration.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ParticipantViewButton.image.modify;
}

void ParticipantViewButton.image.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    ParticipantViewButton.updateColors()();
  }
}

id ParticipantViewButton.isSelected.getter()
{
  return ParticipantViewButton.isSelected.getter((SEL *)&selRef_isSelected);
}

void ParticipantViewButton.isSelected.setter(char a1)
{
}

void (*ParticipantViewButton.isSelected.modify())(objc_super **a1, char a2)
{
  Swift::UInt v2 = malloc(0x48uLL);
  uint64_t v3 = OUTLINED_FUNCTION_0_44((uint64_t)v2);
  *(void *)(v1 + 56) = v3;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 64) = objc_msgSendSuper2((objc_super *)v1, sel_isSelected);
  return ParticipantViewButton.isSelected.modify;
}

void ParticipantViewButton.isSelected.modify(objc_super **a1, char a2)
{
}

id ParticipantViewButton.isHighlighted.getter()
{
  return ParticipantViewButton.isSelected.getter((SEL *)&selRef_isHighlighted);
}

void ParticipantViewButton.isHighlighted.setter(char a1)
{
}

void (*ParticipantViewButton.isHighlighted.modify())(objc_super **a1, char a2)
{
  Swift::UInt v2 = malloc(0x48uLL);
  uint64_t v3 = OUTLINED_FUNCTION_0_44((uint64_t)v2);
  *(void *)(v1 + 56) = v3;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 64) = objc_msgSendSuper2((objc_super *)v1, sel_isHighlighted);
  return ParticipantViewButton.isHighlighted.modify;
}

void ParticipantViewButton.isHighlighted.modify(objc_super **a1, char a2)
{
}

id ParticipantViewButton.isEnabled.getter()
{
  return ParticipantViewButton.isSelected.getter((SEL *)&selRef_isEnabled);
}

id ParticipantViewButton.isSelected.getter(SEL *a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v4, *a1);
}

void ParticipantViewButton.isEnabled.setter(char a1)
{
}

void ParticipantViewButton.isSelected.setter(char a1, SEL *a2)
{
  v5.receiver = v2;
  v5.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v5, *a2, a1 & 1);
  ParticipantViewButton.updateColors()();
}

void (*ParticipantViewButton.isEnabled.modify())(objc_super **a1, char a2)
{
  Swift::UInt v2 = malloc(0x48uLL);
  uint64_t v3 = OUTLINED_FUNCTION_0_44((uint64_t)v2);
  *(void *)(v1 + 56) = v3;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 64) = objc_msgSendSuper2((objc_super *)v1, sel_isEnabled);
  return ParticipantViewButton.isEnabled.modify;
}

void ParticipantViewButton.isEnabled.modify(objc_super **a1, char a2)
{
}

void ParticipantViewButton.isSelected.modify(objc_super **a1, char a2, SEL *a3)
{
  objc_super v4 = *a1;
  uint64_t receiver_low = LOBYTE((*a1)[4].receiver);
  id receiver = (*a1)[3].receiver;
  super_class = (*a1)[3].super_class;
  id v8 = *a1;
  if (a2)
  {
    v8[1].id receiver = receiver;
    v8[1].super_class = super_class;
    objc_msgSendSuper2(v8 + 1, *a3, receiver_low);
  }
  else
  {
    v8[2].id receiver = receiver;
    v8[2].super_class = super_class;
    objc_msgSendSuper2(v8 + 2, *a3, receiver_low);
    ParticipantViewButton.updateColors()();
  }
  free(v4);
}

char *ParticipantViewButton.__allocating_init(imageName:)(uint64_t a1)
{
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(a1, (uint64_t)&v11, &demangling cache variable for type metadata for ImageName?);
  if (v12)
  {
    outlined init with take of Notice(&v11, (uint64_t)v13);
    uint64_t v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    uint64_t v4 = v14;
    uint64_t v5 = v15;
    double v6 = __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v7 = (void *)specialized static UIImage.image(named:)((uint64_t)v6, v3, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)&v11, &demangling cache variable for type metadata for ImageName?);
    uint64_t v7 = 0;
  }
  id v8 = objc_allocWithZone(v1);
  double v9 = ParticipantViewButton.init(buttonImage:)(v7);
  outlined destroy of Conversation?(a1, &demangling cache variable for type metadata for ImageName?);
  return v9;
}

char *ParticipantViewButton.__allocating_init(symbolName:)(uint64_t a1)
{
  Swift::UInt v2 = v1;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(a1, (uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for SymbolImageDescribing?);
  if (v14)
  {
    outlined init with take of Notice(&v13, (uint64_t)v10);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v13, v4, v5);
    id v6 = static UIImage.symbolImage(for:)((uint64_t)&v13);
    outlined release of SymbolImageDescription((uint64_t)&v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    outlined destroy of Conversation?((uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for SymbolImageDescribing?);
    id v6 = 0;
  }
  id v7 = objc_allocWithZone(v2);
  id v8 = ParticipantViewButton.init(buttonImage:)(v6);
  outlined destroy of Conversation?(a1, (uint64_t *)&demangling cache variable for type metadata for SymbolImageDescribing?);
  return v8;
}

char *ParticipantViewButton.__allocating_init(buttonImage:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ParticipantViewButton.init(buttonImage:)(a1);
}

char *ParticipantViewButton.init(buttonImage:)(void *a1)
{
  Swift::UInt v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = (void **)&v1[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_image];
  *uint64_t v5 = 0;
  id v6 = objc_allocWithZone(MEMORY[0x1E4FB1F00]);
  id v7 = v2;
  id v8 = objc_msgSend(v6, sel_init);
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_blurView;
  *(void *)&v7[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_blurView] = v8;
  *(void *)&v7[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_discView] = OUTLINED_FUNCTION_3_65(objc_allocWithZone(MEMORY[0x1E4FB1EB0]));
  id v10 = OUTLINED_FUNCTION_3_65(objc_allocWithZone(MEMORY[0x1E4FB1838]));
  *(void *)&v7[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_imageView] = v10;
  objc_msgSend(v10, sel_setContentMode_, 1);
  if (a1)
  {
    swift_beginAccess();
    uint64_t v11 = *v5;
    *uint64_t v5 = a1;
    id v12 = a1;
  }
  id v13 = *(id *)&v7[v9];
  UIVisualEffectView.applyEffect(_:)(ConversationKit_PlatformEffectViewStyle_extraLight);

  if (one-time initialization token for expandButton != -1) {
    swift_once();
  }
  *(void *)&v7[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_colorConfiguration] = static Colors.ParticipantViews.expandButton;
  swift_bridgeObjectRetain();

  v29.id receiver = v7;
  v29.super_class = ObjectType;
  uint64_t v14 = (char *)objc_msgSendSuper2(&v29, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v14, sel_setUserInteractionEnabled_, 1);
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_blurView;
  uint64_t v16 = *(void **)&v14[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_discView];
  uint64_t v17 = *(void **)&v14[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_imageView];
  id v18 = *(id *)&v14[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_blurView];
  id v19 = v16;
  id v20 = v17;
  objc_msgSend(v18, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v18, sel_setUserInteractionEnabled_, 0);

  id v21 = v19;
  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v21, sel_setUserInteractionEnabled_, 0);

  id v22 = v20;
  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v22, sel_setUserInteractionEnabled_, 0);

  ParticipantViewButton.addConstraints()();
  Swift::String_optional v23 = self;
  double v24 = v14;
  id v25 = objc_msgSend(v23, sel_clearColor);
  objc_msgSend(v24, sel_setBackgroundColor_, v25);

  id v26 = *(id *)&v14[v15];
  id v27 = objc_msgSend(v23, sel_clearColor);
  objc_msgSend(v26, sel_setBackgroundColor_, v27);

  ParticipantViewButton.updateColors()();
  return v24;
}

void ParticipantViewButton.addConstraints()()
{
  uint64_t v1 = v0;
  Swift::UInt v2 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_blurView];
  objc_msgSend(v0, sel_addSubview_, v2);
  id v3 = objc_msgSend(v2, sel_contentView);
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_discView];
  objc_msgSend(v3, sel_addSubview_, v4);

  id v37 = *(id *)&v1[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_imageView];
  objc_msgSend(v4, sel_addSubview_);
  uint64_t v36 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C37711D0;
  id v6 = objc_msgSend(v2, sel_topAnchor);
  id v7 = objc_msgSend(v1, (SEL)&selRef_insertAttributedString_atIndex_ + 3);
  id v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(void *)(v5 + 32) = v8;
  id v9 = objc_msgSend(v2, sel_leadingAnchor);
  id v10 = objc_msgSend(v1, sel_leadingAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v5 + 40) = v11;
  id v12 = objc_msgSend(v2, sel_trailingAnchor);
  id v13 = objc_msgSend(v1, sel_trailingAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(void *)(v5 + 48) = v14;
  id v15 = objc_msgSend(v2, sel_bottomAnchor);
  id v16 = objc_msgSend(v1, sel_bottomAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(void *)(v5 + 56) = v17;
  id v18 = objc_msgSend(v4, sel_topAnchor);
  id v19 = objc_msgSend(v2, sel_topAnchor);
  id v20 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v19);

  *(void *)(v5 + 64) = v20;
  id v21 = objc_msgSend(v4, sel_leadingAnchor);
  id v22 = objc_msgSend(v2, sel_leadingAnchor);
  id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

  *(void *)(v5 + 72) = v23;
  id v24 = objc_msgSend(v4, sel_trailingAnchor);
  id v25 = objc_msgSend(v2, sel_trailingAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  *(void *)(v5 + 80) = v26;
  id v27 = objc_msgSend(v4, sel_bottomAnchor);
  id v28 = objc_msgSend(v2, sel_bottomAnchor);
  id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  *(void *)(v5 + 88) = v29;
  id v30 = objc_msgSend(v37, sel_centerXAnchor);
  id v31 = objc_msgSend(v4, sel_centerXAnchor);
  id v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  *(void *)(v5 + 96) = v32;
  id v33 = objc_msgSend(v37, sel_centerYAnchor);
  id v34 = objc_msgSend(v4, sel_centerYAnchor);
  id v35 = objc_msgSend(v33, sel_constraintEqualToAnchor_, v34);

  *(void *)(v5 + 104) = v35;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_activateConstraints_, isa);
}

id ParticipantViewButton.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantViewButton.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_image] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall ParticipantViewButton.layoutSubviews()()
{
  v7.id receiver = v0;
  v7.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v7, sel_layoutSubviews);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_blurView];
  objc_msgSend(v0, sel_bounds);
  double v3 = v2;
  objc_msgSend(v0, sel_bounds);
  if (v4 >= v3) {
    double v5 = v3;
  }
  else {
    double v5 = v4;
  }
  objc_msgSend(v1, sel__setCornerRadius_, v5 * 0.5);
  id v6 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit21ParticipantViewButton_discView];
  objc_msgSend(v1, sel__cornerRadius);
  objc_msgSend(v6, sel__setCornerRadius_);
}

id ParticipantViewButton.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ParticipantViewButton.init(frame:)()
{
}

id ParticipantViewButton.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ParticipantViewButton()
{
  return self;
}

uint64_t method lookup function for ParticipantViewButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantViewButton);
}

uint64_t dispatch thunk of ParticipantViewButton.__allocating_init(buttonImage:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

void destroy for ParticipantViewButton.ElementColors(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 16);
}

void *initializeWithCopy for ParticipantViewButton.ElementColors(void *a1, uint64_t a2)
{
  double v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  id v7 = v3;
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for ParticipantViewButton.ElementColors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  id v7 = *(void **)(a2 + 16);
  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ParticipantViewButton.ElementColors(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = a2[2];

  *(void *)(a1 + 24) = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for ParticipantViewButton.ElementColors()
{
  return &type metadata for ParticipantViewButton.ElementColors;
}

void specialized CALayer.withoutActions(_:)(uint64_t a1, void *a2)
{
  double v3 = self;
  objc_msgSend(v3, sel_begin);
  objc_msgSend(v3, sel_setDisableActions_, 1);
  id v5 = a2;
  unint64_t v4 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v4, v5);
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_commit);
}

id CALayer.withoutActions(_:)(void (*a1)(id))
{
  objc_super v2 = self;
  objc_msgSend(v2, sel_begin);
  a1(objc_msgSend(v2, sel_setDisableActions_, 1));
  return objc_msgSend(v2, sel_commit);
}

uint64_t CALayer.LayerAnimationCoordinatorKeyPath.rawValue.getter()
{
  return 0x732E73646E756F62;
}

BOOL CALayer.LayerAnimationCoordinatorKeyPath.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CALayer.LayerAnimationCoordinatorKeyPath.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance CALayer.LayerAnimationCoordinatorKeyPath@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = CALayer.LayerAnimationCoordinatorKeyPath.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CALayer.LayerAnimationCoordinatorKeyPath(void *a1@<X8>)
{
  *a1 = 0x732E73646E756F62;
  a1[1] = 0xEB00000000657A69;
}

void specialized CALayer.coordinateAnimation(_:animations:)(void *a1, void *a2, void *a3)
{
  id v5 = self;
  objc_msgSend(v5, sel_begin);
  OUTLINED_FUNCTION_0_45();
  id v7 = v6;
  id v8 = objc_msgSend(a1, sel_animationForKey_, v6);

  if (v8)
  {
    self;
    id v9 = (void *)swift_dynamicCastObjCClass();
    if (v9)
    {
      id v10 = v9;
      objc_msgSend(v9, sel_duration);
      objc_msgSend(v5, sel_setAnimationDuration_);
      id v11 = objc_msgSend(v10, sel_timingFunction);
      objc_msgSend(v5, sel_setAnimationTimingFunction_, v11);

      id v8 = v11;
    }
  }
  closure #1 in ParticipantViewLabelContainerViewLayer.layoutSublayers()(a2, a3);
  objc_msgSend(v5, sel_commit);
}

id CALayer.coordinateAnimation(_:animations:)(void (*a1)(void))
{
  Swift::Int v3 = self;
  objc_msgSend(v3, sel_begin);
  OUTLINED_FUNCTION_0_45();
  id v5 = v4;
  id v6 = objc_msgSend(v1, sel_animationForKey_, v4);

  if (v6)
  {
    self;
    id v7 = (void *)swift_dynamicCastObjCClass();
    if (v7)
    {
      id v8 = v7;
      objc_msgSend(v7, sel_duration);
      objc_msgSend(v3, sel_setAnimationDuration_);
      id v9 = objc_msgSend(v8, sel_timingFunction);
      objc_msgSend(v3, sel_setAnimationTimingFunction_, v9);

      id v6 = v9;
    }
  }
  a1();
  return objc_msgSend(v3, sel_commit);
}

unint64_t lazy protocol witness table accessor for type CALayer.LayerAnimationCoordinatorKeyPath and conformance CALayer.LayerAnimationCoordinatorKeyPath()
{
  unint64_t result = lazy protocol witness table cache variable for type CALayer.LayerAnimationCoordinatorKeyPath and conformance CALayer.LayerAnimationCoordinatorKeyPath;
  if (!lazy protocol witness table cache variable for type CALayer.LayerAnimationCoordinatorKeyPath and conformance CALayer.LayerAnimationCoordinatorKeyPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CALayer.LayerAnimationCoordinatorKeyPath and conformance CALayer.LayerAnimationCoordinatorKeyPath);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CALayer.LayerAnimationCoordinatorKeyPath(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C31585DCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CALayer.LayerAnimationCoordinatorKeyPath()
{
  return &type metadata for CALayer.LayerAnimationCoordinatorKeyPath;
}

void ClarityUIContactsView.navigationPath.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  JUMPOUT(0x1C87728E0);
}

uint64_t key path setter for ClarityUIContactsView.navigationPath : ClarityUIContactsView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigationPath();
  MEMORY[0x1F4188790](v2);
  unsigned int v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return ClarityUIContactsView.navigationPath.setter((uint64_t)v4);
}

uint64_t ClarityUIContactsView.navigationPath.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigationPath();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7 - v6, a1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

void (*ClarityUIContactsView.navigationPath.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = type metadata accessor for NavigationPath();
  *uint64_t v3 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[1] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[2] = malloc(v6);
  v3[3] = malloc(v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  void v3[4] = v7;
  id v8 = malloc(*(void *)(*(void *)(v7 - 8) + 64));
  v3[5] = v8;
  outlined init with copy of Binding<NavigationPath>(v1, (uint64_t)v8);
  MEMORY[0x1C87728E0](v7);
  return ClarityUIContactsView.navigationPath.modify;
}

void ClarityUIContactsView.navigationPath.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 16);
  uint64_t v5 = *(void **)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v6 = *v2;
    uint64_t v7 = v2[1];
    (*(void (**)(void, void *, void))(v7 + 16))(*(void *)(*(void *)a1 + 16), v5, *v2);
    Binding.wrappedValue.setter();
    outlined destroy of Binding<NavigationPath>((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    Binding.wrappedValue.setter();
    outlined destroy of Binding<NavigationPath>((uint64_t)v3);
  }
  free(v3);
  free(v5);
  free(v4);
  free(v2);
}

uint64_t outlined init with copy of Binding<NavigationPath>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Binding<NavigationPath>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ClarityUIContactsView.$navigationPath.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  return Binding.projectedValue.getter();
}

uint64_t ClarityUIContactsView.body.getter()
{
  uint64_t v0 = type metadata accessor for ClarityUINavigationTitle();
  OUTLINED_FUNCTION_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for List<Never, ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>>);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>);
  lazy protocol witness table accessor for type ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>();
  List<>.init(content:)();
  static ClarityUINavigationTitle.contacts.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type List<Never, ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>> and conformance List<A, B>, &demangling cache variable for type metadata for List<Never, ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>>);
  View.navigationTitle(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
}

uint64_t closure #1 in ClarityUIContactsView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClarityUIContactsView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(MEMORY[0x1F4188790](v2 - 8) + 28));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ClarityUIContactsList>);
  State.wrappedValue.getter();
  uint64_t v8 = ClarityUIContactsList.allContactIdentifiers.getter();
  swift_release();
  uint64_t v17 = v8;
  swift_getKeyPath();
  outlined init with copy of ClarityUIContactsView(a1, (uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  outlined init with take of ClarityUIContactsView((uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.badge(_:)>>.0);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  uint64_t v12 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationLink<Label<Text, ClarityUIContactAvatar>, Never> and conformance NavigationLink<A, B>, &demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  uint64_t v15 = v11;
  uint64_t v16 = v12;
  swift_getOpaqueTypeConformance2();
  return ForEach<>.init(_:id:content:)();
}

uint64_t partial apply for closure #1 in ClarityUIContactsView.body.getter()
{
  return closure #1 in ClarityUIContactsView.body.getter(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationLink<Label<Text, ClarityUIContactAvatar>, Never> and conformance NavigationLink<A, B>, &demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t closure #1 in closure #1 in ClarityUIContactsView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v21[0] = a2;
  v21[1] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v10 = (void *)a1[1];
  uint64_t v11 = a2 + *(int *)(type metadata accessor for ClarityUIContactsView() + 20);
  uint64_t v13 = *(void **)v11;
  uint64_t v12 = *(void **)(v11 + 8);
  id v22 = v13;
  id v23 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<ClarityUIContactsList>);
  State.wrappedValue.getter();
  v14._countAndFlagsBits = v9;
  v14._object = v10;
  ClarityUIContactsList.contact(for:)(v14);
  swift_release();
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = v25;
  uint64_t v26 = 0;
  void v21[4] = v22;
  v21[5] = v23;
  v21[6] = v24;
  v21[7] = v25;
  id v18 = v22;
  id v19 = v15;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Label<Text, ClarityUIContactAvatar>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Label<Text, ClarityUIContactAvatar> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, ClarityUIContactAvatar>);
  lazy protocol witness table accessor for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination();
  NavigationLink<>.init<A>(value:label:)();
  id v22 = v18;
  id v23 = v19;
  uint64_t v24 = v16;
  uint64_t v25 = v17;
  v27.cnContact.super.Class isa = (Class)&v22;
  ClarityUICallHistory.badgeCount(for:)(v27);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationLink<Label<Text, ClarityUIContactAvatar>, Never> and conformance NavigationLink<A, B>, &demangling cache variable for type metadata for NavigationLink<Label<Text, ClarityUIContactAvatar>, Never>);
  View.badge(_:)();
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter()
{
  return Label.init(title:icon:)();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a1;
  id v6 = a2;
  swift_bridgeObjectRetain();
  CNContact.clarityUIDisplayName.getter();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v9 & 1;
  *(void *)(a3 + 24) = v10;
  return result;
}

id closure #2 in closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  id v3 = a1;
  return a2;
}

uint64_t ClarityUIContactsView.init(navigationPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of Binding<NavigationPath>(a1, a2);
  uint64_t v3 = type metadata accessor for ClarityUIContactsView();
  uint64_t v4 = (void *)(a2 + *(int *)(v3 + 20));
  type metadata accessor for ClarityUIContactsList();
  swift_allocObject();
  ClarityUIContactsList.init()();
  State.init(wrappedValue:)();
  *uint64_t v4 = v7;
  v4[1] = v8;
  uint64_t v5 = *(int *)(v3 + 24);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(a2 + v5) = static ClarityUICallHistory.shared;
  return swift_retain();
}

uint64_t outlined init with take of Binding<NavigationPath>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ClarityUIContactsView()
{
  uint64_t result = type metadata singleton initialization cache for ClarityUIContactsView;
  if (!type metadata singleton initialization cache for ClarityUIContactsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static ClarityUIContactsNavigationDestination.== infix(_:_:)()
{
  return 1;
}

Swift::Int ClarityUIContactsNavigationDestination.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClarityUIContactsNavigationDestination()
{
  return Hasher._finalize()();
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIContactsView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination);
  }
  return result;
}

void sub_1C31595B8()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ClarityUIContactsView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
                + 32);
    char v9 = (char *)v7 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NavigationPath();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = *(int *)(a3 + 24);
    Swift::String v14 = (uint64_t *)((char *)v7 + v12);
    uint64_t v15 = (uint64_t *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    *(uint64_t *)((char *)v7 + v13) = *(uint64_t *)((char *)a2 + v13);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for ClarityUIContactsView(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v3 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for ClarityUIContactsView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_retain();
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v8 = (char *)a1 + v7;
  char v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v11);
  Swift::String v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ClarityUIContactsView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  swift_retain();
  swift_release();
  *((void *)v11 + 1) = *((void *)v12 + 1);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ClarityUIContactsView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  return a1;
}

void *assignWithTake for ClarityUIContactsView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NavigationPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  swift_release();
  *((void *)v11 + 1) = *((void *)v12 + 1);
  swift_release();
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClarityUIContactsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3159B58);
}

uint64_t sub_1C3159B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ClarityUIContactsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3159BFC);
}

void sub_1C3159BFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void type metadata completion function for ClarityUIContactsView()
{
  type metadata accessor for Binding<NavigationPath>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Binding<NavigationPath>()
{
  if (!lazy cache variable for type metadata for Binding<NavigationPath>)
  {
    type metadata accessor for NavigationPath();
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationPath>);
    }
  }
}

ValueMetadata *type metadata accessor for ClarityUIContactsNavigationDestination()
{
  return &type metadata for ClarityUIContactsNavigationDestination;
}

uint64_t sub_1C3159D94()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for List<Never, ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type List<Never, ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>> and conformance List<A, B>, &demangling cache variable for type metadata for List<Never, ForEach<[String], String, <<opaque return type of View.badge(_:)>>.0>>);
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of ClarityUIContactsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClarityUIContactsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3159E78()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ClarityUIContactsView() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  swift_release();
  swift_release();
  uint64_t v3 = v2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>)
              + 32);
  uint64_t v4 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of ClarityUIContactsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClarityUIContactsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in ClarityUIContactsView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ClarityUIContactsView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return closure #1 in closure #1 in ClarityUIContactsView.body.getter(a1, v6, a2);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter()
{
  return closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter();
}

unint64_t lazy protocol witness table accessor for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination;
  if (!lazy protocol witness table cache variable for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter(*(void **)(v1 + 16), *(void **)(v1 + 24), a1);
}

id partial apply for closure #2 in closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter@<X0>(void *a1@<X8>)
{
  return closure #2 in closure #1 in closure #1 in closure #1 in ClarityUIContactsView.body.getter(*(void **)(v1 + 16), *(void **)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar;
  if (!lazy protocol witness table cache variable for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar;
  if (!lazy protocol witness table cache variable for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIContactAvatar and conformance ClarityUIContactAvatar);
  }
  return result;
}

double static CallControlsMenuView.Constants.verticalPadding.getter()
{
  return 16.0;
}

double static CallControlsMenuView.Constants.horizontalPadding.getter()
{
  return 20.0;
}

uint64_t CallControlsMenuView.init(viewModel:service:screenShareService:sidebarStateStream:isScreenLocked:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  type metadata accessor for CallControlsMenuViewModel();
  lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel((unint64_t *)&lazy protocol witness table cache variable for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel, (void (*)(uint64_t))type metadata accessor for CallControlsMenuViewModel);
  swift_retain();
  Bindable<A>.init(wrappedValue:)();
  OUTLINED_FUNCTION_2_50();
  uint64_t v9 = type metadata accessor for LetMeInCountdownViewModel();
  swift_allocObject();
  uint64_t v10 = (long long *)OUTLINED_FUNCTION_7_46();
  uint64_t v11 = LetMeInCountdownViewModel.init(service:)(v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CallControlsInCallButtonViewModel>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3771450;
  OUTLINED_FUNCTION_2_50();
  uint64_t v13 = type metadata accessor for SidebarButtonViewModel();
  swift_allocObject();
  swift_retain();
  swift_retain();
  Swift::String v14 = SidebarButtonViewModel.init(service:stream:isScreenLocked:)((uint64_t)v32, a3, a4);
  *(void *)(inited + 56) = v13;
  *(void *)(inited + 64) = &protocol witness table for SidebarButtonViewModel;
  *(void *)(inited + 32) = v14;
  OUTLINED_FUNCTION_2_50();
  type metadata accessor for VideoButtonViewModel();
  OUTLINED_FUNCTION_3_66();
  uint64_t v15 = (long long *)OUTLINED_FUNCTION_7_46();
  uint64_t v16 = VideoButtonViewModel.init(service:)(v15);
  *(void *)(inited + 96) = v13;
  *(void *)(inited + 104) = &protocol witness table for VideoButtonViewModel;
  *(void *)(inited + 72) = v16;
  OUTLINED_FUNCTION_2_50();
  type metadata accessor for AudioMuteButtonViewModel();
  OUTLINED_FUNCTION_3_66();
  uint64_t v17 = (long long *)OUTLINED_FUNCTION_7_46();
  uint64_t v18 = AudioMuteButtonViewModel.init(service:)(v17);
  *(void *)(inited + 136) = v13;
  *(void *)(inited + 144) = &protocol witness table for AudioMuteButtonViewModel;
  *(void *)(inited + 112) = v18;
  outlined init with copy of IDSLookupManager(a2, (uint64_t)v32);
  uint64_t v19 = type metadata accessor for ScreenShareButtonViewModel();
  swift_allocObject();
  id v20 = (long long *)OUTLINED_FUNCTION_7_46();
  id v21 = ScreenShareButtonViewModel.init(service:)(v20);
  *(void *)(inited + 176) = v19;
  *(void *)(inited + 184) = &protocol witness table for ScreenShareButtonViewModel;
  *(void *)(inited + 152) = v21;
  *(void *)(inited + 216) = v9;
  *(void *)(inited + 224) = &protocol witness table for LetMeInCountdownViewModel;
  *(void *)(inited + 192) = v11;
  OUTLINED_FUNCTION_2_50();
  type metadata accessor for JoinButtonViewModel();
  OUTLINED_FUNCTION_3_66();
  uint64_t v22 = JoinButtonViewModel.init(service:letMeInViewModel:)(v32, v11);
  *(void *)(inited + 256) = v19;
  *(void *)(inited + 264) = &protocol witness table for JoinButtonViewModel;
  *(void *)(inited + 232) = v22;
  OUTLINED_FUNCTION_2_50();
  uint64_t v23 = type metadata accessor for CancelButtonViewModel();
  swift_allocObject();
  uint64_t v24 = CancelButtonViewModel.init(service:letMeInViewModel:)(v32, v11);
  *(void *)(inited + 296) = v23;
  *(void *)(inited + 304) = &protocol witness table for CancelButtonViewModel;
  *(void *)(inited + 272) = v24;
  OUTLINED_FUNCTION_2_50();
  uint64_t v25 = type metadata accessor for LeaveButtonViewModel();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 56) = 0;
  outlined init with take of Notice(v32, v26 + 16);
  *(void *)(inited + 336) = v25;
  *(void *)(inited + 344) = &protocol witness table for LeaveButtonViewModel;
  *(void *)(inited + 312) = v26;
  uint64_t v27 = type metadata accessor for LocalVideoRecordButtonViewModel();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0;
  *(void *)(inited + 376) = v27;
  *(void *)(inited + 384) = &protocol witness table for LocalVideoRecordButtonViewModel;
  *(void *)(inited + 352) = v28;
  swift_retain_n();
  uint64_t v29 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay15ConversationKit014CallControlsInH15ButtonViewModel_pGG_AH0jhlM6Holder33_5B4A18A810ED2BA0BAF7DF9664EFF4B6LLVs5NeverOTg506_sSi15f6Kit014hij3C15klm20_pAA0ecgH6Holder33_5opqrstuvw37LLVIgynr_Si6offset_AaB_p7elementtAEs5X11OIegnrzr_TRSiAhI_pANIgynr_Tf1cn_n(inited, (void (*)(long long *__return_ptr, void, char *))partial apply for closure #1 in CallControlsMenuView.init(viewModel:service:screenShareService:sidebarStateStream:isScreenLocked:));
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = type metadata accessor for CallControlsMenuView();
  *(void *)(a5 + *(int *)(result + 20)) = v29;
  return result;
}

double static CallControlsMenuView.Constants.spacing.getter()
{
  return 20.0;
}

uint64_t CallControlsMenuView.viewModel.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for CallControlsMenuView.viewModel : CallControlsMenuView()
{
  return CallControlsMenuView.viewModel.setter();
}

uint64_t CallControlsMenuView.viewModel.setter()
{
  return Bindable.wrappedValue.setter();
}

void (*CallControlsMenuView.viewModel.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  v2[4] = Bindable.wrappedValue.modify();
  return CallControlsMenuView.viewModel.modify;
}

void CallControlsMenuView.viewModel.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t CallControlsMenuView.$viewModel.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  return MEMORY[0x1F40FCAB0](v0);
}

uint64_t closure #1 in CallControlsMenuView.init(viewModel:service:screenShareService:sidebarStateStream:isScreenLocked:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  outlined init with copy of IDSLookupManager(a1, (uint64_t)(a3 + 2));
  *a3 = 2977385;
  a3[1] = 0xE300000000000000;
  a3[7] = a2;
  return swift_retain();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay15ConversationKit014CallControlsInH15ButtonViewModel_pGG_AH0jhlM6Holder33_5B4A18A810ED2BA0BAF7DF9664EFF4B6LLVs5NeverOTg506_sSi15f6Kit014hij3C15klm20_pAA0ecgH6Holder33_5opqrstuvw37LLVIgynr_Si6offset_AaB_p7elementtAEs5X11OIegnrzr_TRSiAhI_pANIgynr_Tf1cn_n(uint64_t a1, void (*a2)(long long *__return_ptr, void, char *))
{
  uint64_t v20 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v3 = v20;
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      outlined init with copy of IDSLookupManager(v6, (uint64_t)v18);
      *(void *)&long long v14 = v5;
      outlined init with take of Notice(v18, (uint64_t)&v14 + 8);
      v19[0] = v14;
      v19[1] = v15;
      v19[2] = v16;
      a2(&v14, v14, (char *)v19 + 8);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v19, &demangling cache variable for type metadata for (offset: Int, element: CallControlsInCallButtonViewModel));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v20;
      }
      unint64_t v7 = *(void *)(v3 + 16);
      if (v7 >= *(void *)(v3 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v20;
      }
      ++v5;
      *(void *)(v3 + 16) = v7 + 1;
      uint64_t v8 = (_OWORD *)(v3 + (v7 << 6));
      long long v9 = v14;
      long long v10 = v15;
      long long v11 = v17;
      v8[4] = v16;
      v8[5] = v11;
      v8[2] = v9;
      v8[3] = v10;
      v6 += 40;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t CallControlsMenuView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>);
  uint64_t v2 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_3();
  uint64_t v39 = v9;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>, _PaddingLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  uint64_t v38 = v11;
  *(void *)unint64_t v7 = static VerticalAlignment.top.getter();
  *((void *)v7 + 1) = 0x4034000000000000;
  v7[16] = 0;
  uint64_t v12 = &v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>)
                   + 44)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  Bindable.wrappedValue.getter();
  unint64_t v13 = CallControlsMenuViewModel.context.getter();
  uint64_t v15 = v14;
  char v17 = v16;
  swift_release();
  uint64_t v41 = *(void *)(v1 + *(int *)(type metadata accessor for CallControlsMenuView() + 20));
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = v13;
  *(unsigned char *)(v18 + 20) = BYTE4(v13);
  *(void *)(v18 + 24) = v15;
  *(unsigned char *)(v18 + 32) = v17 & 1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [InCallViewModelHolder]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [InCallViewModelHolder] and conformance [A], &demangling cache variable for type metadata for [InCallViewModelHolder]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?();
  lazy protocol witness table accessor for type InCallViewModelHolder and conformance InCallViewModelHolder();
  ForEach<>.init(_:content:)();
  uint64_t v19 = v35;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v12, v4, v35);
  uint64_t v20 = (uint64_t (**)())&v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>)
                                    + 36)];
  *uint64_t v20 = closure #2 in closure #1 in CallControlsMenuView.body.getter;
  v20[1] = 0;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v19);
  unsigned int v21 = static Edge.Set.top.getter();
  unsigned int v22 = static Edge.Set.bottom.getter();
  uint64_t v23 = MEMORY[0x1C8771D90](0);
  int v24 = MEMORY[0x1C8771D90]();
  if (MEMORY[0x1C8771D90](v24 & v21) != v21) {
    uint64_t v23 = MEMORY[0x1C8771D90](v23 | v21);
  }
  int v25 = MEMORY[0x1C8771D90](v23);
  if (MEMORY[0x1C8771D90](v25 & v22) != v22) {
    MEMORY[0x1C8771D90](v23 | v22);
  }
  uint64_t v26 = v39;
  EdgeInsets.init(_all:)();
  OUTLINED_FUNCTION_38();
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v7, v26, &demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>);
  OUTLINED_FUNCTION_4_53(v26 + *(int *)(v36 + 36));
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v7, &demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>);
  unsigned int v27 = static Edge.Set.leading.getter();
  unsigned int v28 = static Edge.Set.trailing.getter();
  uint64_t v29 = MEMORY[0x1C8771D90](0);
  int v30 = MEMORY[0x1C8771D90]();
  if (MEMORY[0x1C8771D90](v30 & v27) != v27) {
    uint64_t v29 = MEMORY[0x1C8771D90](v29 | v27);
  }
  int v31 = MEMORY[0x1C8771D90](v29);
  if (MEMORY[0x1C8771D90](v31 & v28) != v28) {
    MEMORY[0x1C8771D90](v29 | v28);
  }
  EdgeInsets.init(_all:)();
  OUTLINED_FUNCTION_38();
  uint64_t v32 = v38;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v26, v38, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>);
  OUTLINED_FUNCTION_4_53(v32 + *(int *)(v37 + 36));
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v26, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v32, v40, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>, _PaddingLayout>);
}

uint64_t closure #1 in closure #1 in CallControlsMenuView.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return InCallViewModelHolder.build(_:)(a1 & 0xFFFFFFFFFFLL, a2, a3, a4);
}

uint64_t InCallViewModelHolder.build(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v40 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>);
  MEMORY[0x1F4188790](v38);
  unint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>);
  MEMORY[0x1F4188790](v39);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v5[5];
  uint64_t v16 = v5[6];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v17);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(a1 & 0xFFFFFFFFFFLL, a2, a3, v17, v16))
  {
    uint64_t v19 = v5[5];
    uint64_t v18 = v5[6];
    __swift_project_boxed_opaque_existential_1(v5 + 2, v19);
    uint64_t v20 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)(v18 + 8) + 8))(v19);
    uint64_t v22 = v21;
    LOBYTE(v19) = v23;
    CallControlsType.controlView()(v20, v21, v23, (uint64_t)v11);
    outlined consume of CallControlsType((uint64_t)v20, v22, v19);
    outlined init with copy of InCallViewModelHolder((uint64_t)v5, (uint64_t)&v41);
    int v24 = (uint64_t (*)())swift_allocObject();
    long long v25 = v42;
    *((_OWORD *)v24 + 1) = v41;
    *((_OWORD *)v24 + 2) = v25;
    long long v26 = v44;
    *((_OWORD *)v24 + 3) = v43;
    *((_OWORD *)v24 + 4) = v26;
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>);
    unsigned int v27 = (uint64_t (**)())&v13[*(int *)(v38 + 36)];
    void *v27 = partial apply for closure #1 in InCallViewModelHolder.build(_:);
    v27[1] = v24;
    v27[2] = 0;
    v27[3] = 0;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>);
    outlined init with copy of InCallViewModelHolder((uint64_t)v5, (uint64_t)&v41);
    unsigned int v28 = (_OWORD *)swift_allocObject();
    long long v29 = v42;
    v28[1] = v41;
    v28[2] = v29;
    long long v30 = v44;
    void v28[3] = v43;
    v28[4] = v30;
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v13, (uint64_t)v15, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>);
    uint64_t v31 = v39;
    uint64_t v32 = &v15[*(int *)(v39 + 36)];
    *(void *)uint64_t v32 = 0;
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = partial apply for closure #2 in InCallViewModelHolder.build(_:);
    *((void *)v32 + 3) = v28;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>);
    uint64_t v33 = v40;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v15, v40, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>);
    return __swift_storeEnumTagSinglePayload(v33, 0, 1, v31);
  }
  else
  {
    uint64_t v36 = v39;
    uint64_t v35 = v40;
    return __swift_storeEnumTagSinglePayload(v35, 1, 1, v36);
  }
}

uint64_t closure #2 in closure #1 in CallControlsMenuView.body.getter()
{
  return Transaction.disablesAnimations.setter();
}

uint64_t CallControlsType.controlView()@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v7 = type metadata accessor for CallControlTextButton(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>);
  uint64_t v10 = MEMORY[0x1F4188790](v38);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>.Storage);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (uint64_t (**)(uint64_t))((char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>);
  MEMORY[0x1F4188790](v40);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>.Storage);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  char v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3)
  {
    case 1:
      v17[1] = 0;
      v17[2] = 0;
      *uint64_t v17 = a1;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<Bool> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      long long v29 = &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>;
      outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>);
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      uint64_t v30 = (uint64_t)v19;
      goto LABEL_6;
    case 2:
      uint64_t v37 = v21;
      type metadata accessor for CallControlsTextButtonConfiguration(0);
      lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel(&lazy protocol witness table cache variable for type CallControlsTextButtonConfiguration and conformance CallControlsTextButtonConfiguration, (void (*)(uint64_t))type metadata accessor for CallControlsTextButtonConfiguration);
      swift_retain();
      Bindable<A>.init(wrappedValue:)();
      uint64_t v27 = static VerticalAlignment.top.getter();
      outlined init with copy of CallControlTextButton((uint64_t)v9, (uint64_t)v12);
      unsigned int v28 = (uint64_t *)&v12[*(int *)(v38 + 36)];
      *unsigned int v28 = v27;
      v28[1] = (uint64_t)closure #1 in CallControlsType.controlView();
      v28[2] = 0;
      outlined destroy of CallControlTextButton((uint64_t)v9);
      long long v29 = &demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>;
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>);
      outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>);
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<Bool> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>);
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v19, &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>);
      uint64_t v30 = (uint64_t)v14;
LABEL_6:
      uint64_t result = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v30, v29);
      break;
    case 3:
      uint64_t v31 = swift_retain();
      uint64_t v32 = (uint64_t)a1;
      uint64_t v33 = a1(v31);
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      long long v41 = (uint64_t (*)(void))v33;
      char v44 = 0;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<()>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<()> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<()>);
      _ConditionalContent<>.init(storage:)();
      long long v34 = v45;
      uint64_t v35 = v46;
      char v36 = v47;
      *(_OWORD *)char v23 = v45;
      *((void *)v23 + 2) = v35;
      v23[24] = v36;
      swift_storeEnumTagMultiPayload();
      outlined copy of _ConditionalContent<AnyView, IconButton<()>>.Storage(v34, *((uint64_t *)&v34 + 1), v35, v36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined consume of CallControlsType(v32, a2, 3u);
      outlined consume of _ConditionalContent<AnyView, IconButton<()>>.Storage(v34, *((uint64_t *)&v34 + 1), v35, v36);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      long long v41 = a1;
      char v44 = 1;
      outlined copy of CallControlsType((uint64_t)a1, a2, 0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<()>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<()> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<()>);
      _ConditionalContent<>.init(storage:)();
      uint64_t v24 = v46;
      char v25 = v47;
      *(_OWORD *)char v23 = v45;
      *((void *)v23 + 2) = v24;
      v23[24] = v25;
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>();
      uint64_t result = _ConditionalContent<>.init(storage:)();
      break;
  }
  return result;
}

uint64_t closure #1 in InCallViewModelHolder.build(_:)(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 16))(v1);
}

uint64_t closure #2 in InCallViewModelHolder.build(_:)(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v1);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 24))(v1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance InCallViewModelHolder@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double closure #1 in CallControlsType.controlView()()
{
  ViewDimensions.height.getter();
  return (v0 + -36.0) * 0.5;
}

uint64_t partial apply for closure #1 in CallControlsMenuView.init(viewModel:service:screenShareService:sidebarStateStream:isScreenLocked:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return closure #1 in CallControlsMenuView.init(viewModel:service:screenShareService:sidebarStateStream:isScreenLocked:)(a1, v2, a2);
}

uint64_t type metadata accessor for CallControlsMenuView()
{
  uint64_t result = type metadata singleton initialization cache for CallControlsMenuView;
  if (!type metadata singleton initialization cache for CallControlsMenuView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C315B8AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CallControlsMenuView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in CallControlsMenuView.body.getter(*(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>> and conformance <> _ConditionalContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>);
    lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<()> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<()>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<Bool> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<Bool>);
    lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<CallControlTextButton, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CallControlTextButton, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>);
    lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel(&lazy protocol witness table cache variable for type CallControlTextButton and conformance CallControlTextButton, (void (*)(uint64_t))type metadata accessor for CallControlTextButton);
    lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CallControlTextButton, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier;
  if (!lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InCallViewModelHolder and conformance InCallViewModelHolder()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallViewModelHolder and conformance InCallViewModelHolder;
  if (!lazy protocol witness table cache variable for type InCallViewModelHolder and conformance InCallViewModelHolder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallViewModelHolder and conformance InCallViewModelHolder);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CallControlsMenuView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C315BD3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CallControlsMenuView.viewModel.getter();
  *a1 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CallControlsMenuView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CallControlsMenuView(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CallControlsMenuView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CallControlsMenuView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CallControlsMenuView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CallControlsMenuView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallControlsMenuView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C315C0E8);
}

uint64_t sub_1C315C0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CallControlsMenuView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C315C18C);
}

void sub_1C315C18C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void type metadata completion function for CallControlsMenuView()
{
  type metadata accessor for Bindable<CallControlsMenuViewModel>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Bindable<CallControlsMenuViewModel>()
{
  if (!lazy cache variable for type metadata for Bindable<CallControlsMenuViewModel>)
  {
    type metadata accessor for CallControlsMenuViewModel();
    unint64_t v0 = type metadata accessor for Bindable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Bindable<CallControlsMenuViewModel>);
    }
  }
}

ValueMetadata *type metadata accessor for CallControlsMenuView.Constants()
{
  return &type metadata for CallControlsMenuView.Constants;
}

uint64_t sub_1C315C318()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ForEach<[InCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _AlignmentWritingModifier>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t destroy for InCallViewModelHolder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return swift_release();
}

uint64_t initializeWithCopy for InCallViewModelHolder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2 + 16;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

void *assignWithCopy for InCallViewModelHolder(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InCallViewModelHolder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InCallViewModelHolder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InCallViewModelHolder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallViewModelHolder()
{
  return &type metadata for InCallViewModelHolder;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in InCallViewModelHolder()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t outlined consume of CallControlsType(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 < 4u) {
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of InCallViewModelHolder(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in InCallViewModelHolder.build(_:)()
{
  return closure #1 in InCallViewModelHolder.build(_:)((void *)(v0 + 16));
}

uint64_t objectdestroy_4Tm()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in InCallViewModelHolder.build(_:)()
{
  return closure #2 in InCallViewModelHolder.build(_:)((void *)(v0 + 16));
}

uint64_t lazy protocol witness table accessor for type CallControlsMenuViewModel and conformance CallControlsMenuViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of CallControlTextButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CallControlTextButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CallControlTextButton(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CallControlTextButton(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined copy of CallControlsType(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 < 4u) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of _ConditionalContent<AnyView, IconButton<()>>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_retain();
  if (a4)
  {
    return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  }
  return result;
}

uint64_t outlined consume of _ConditionalContent<AnyView, IconButton<()>>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_release();
  if (a4)
  {
    return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(a2);
  }
  return result;
}

uint64_t InterfaceOrientationBridgingViewController.orientationSubscription.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit42InterfaceOrientationBridgingViewController_orientationSubscription) = a1;
  return swift_release();
}

Swift::Void __swiftcall InterfaceOrientationBridgingViewController.viewDidLoad()()
{
  v6.id receiver = v0;
  v6.super_class = (Class)type metadata accessor for InterfaceOrientationBridgingViewController();
  objc_msgSendSuper2(&v6, sel_viewDidLoad);
  uint64_t v2 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_62();
  id v4 = objc_msgSend(self, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher();
  uint64_t v5 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  InterfaceOrientationBridgingViewController.orientationSubscription.setter(v5);
}

uint64_t type metadata accessor for InterfaceOrientationBridgingViewController()
{
  return self;
}

uint64_t sub_1C315CAB4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in InterfaceOrientationBridgingViewController.viewDidLoad()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    id v4 = (void *)v3;
    InterfaceOrientationBridgingViewController.updateInterfaceOrientationTraitIfNecessary()();
  }
}

void partial apply for closure #1 in InterfaceOrientationBridgingViewController.viewDidLoad()(uint64_t a1)
{
  closure #1 in InterfaceOrientationBridgingViewController.viewDidLoad()(a1, v1);
}

void InterfaceOrientationBridgingViewController.updateInterfaceOrientationTraitIfNecessary()()
{
  uint64_t v2 = type metadata accessor for UITraitOverrides();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_62();
  id v3 = objc_msgSend(v0, sel_view);
  if (v3)
  {
    id v4 = v3;
    id v5 = objc_msgSend(v3, sel_window);

    if (v5 && (id v6 = objc_msgSend(v5, sel_windowScene), v5, v6))
    {
      objc_msgSend(v6, sel_interfaceOrientation);
      MEMORY[0x1C8773AD0]();
      lazy protocol witness table accessor for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait();
      lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation((unint64_t *)&lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation);
      OUTLINED_FUNCTION_0_46();
      MEMORY[0x1C8773AE0](v1);
    }
    else
    {
      MEMORY[0x1C8773AD0]();
      lazy protocol witness table accessor for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait();
      lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation((unint64_t *)&lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation);
      OUTLINED_FUNCTION_0_46();
      MEMORY[0x1C8773AE0](v1);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t UIMutableTraits.interfaceOrientation.setter()
{
  return dispatch thunk of UIMutableTraits.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait;
  if (!lazy protocol witness table cache variable for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait);
  }
  return result;
}

id InterfaceOrientationBridgingViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id InterfaceOrientationBridgingViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit42InterfaceOrientationBridgingViewController_orientationSubscription] = 0;
  if (a2)
  {
    id v5 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = 0;
  }
  v8.id receiver = v3;
  v8.super_class = (Class)type metadata accessor for InterfaceOrientationBridgingViewController();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithNibName_bundle_, v5, a3);

  return v6;
}

id InterfaceOrientationBridgingViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id InterfaceOrientationBridgingViewController.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit42InterfaceOrientationBridgingViewController_orientationSubscription] = 0;
  v5.id receiver = v1;
  v5.super_class = (Class)type metadata accessor for InterfaceOrientationBridgingViewController();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id InterfaceOrientationBridgingViewController.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for InterfaceOrientationBridgingViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *InterfaceOrientationTrait.defaultValue.unsafeMutableAddressor()
{
  return &static InterfaceOrientationTrait.defaultValue;
}

uint64_t static InterfaceOrientationTrait.defaultValue.getter()
{
  return 0;
}

void protocol witness for static UITraitDefinition.defaultValue.getter in conformance InterfaceOrientationTrait(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for static UITraitDefinition.identifier.getter in conformance InterfaceOrientationTrait()
{
  return MEMORY[0x1F4165AF0]();
}

uint64_t protocol witness for static UITraitDefinition.name.getter in conformance InterfaceOrientationTrait()
{
  return MEMORY[0x1F4165B08]();
}

uint64_t protocol witness for static UITraitDefinition.affectsColorAppearance.getter in conformance InterfaceOrientationTrait()
{
  return MEMORY[0x1F4165AE8]();
}

uint64_t protocol witness for static UITraitDefinition._defaultValueRepresentsUnspecified.getter in conformance InterfaceOrientationTrait()
{
  return MEMORY[0x1F4165B00]();
}

uint64_t protocol witness for static UITraitDefinition._isPrivate.getter in conformance InterfaceOrientationTrait()
{
  return MEMORY[0x1F4165AE8]();
}

uint64_t UITraitCollection.interfaceOrientation.getter()
{
  lazy protocol witness table accessor for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait();
  lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation((unint64_t *)&lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation);
  UITraitCollection.subscript.getter();
  return v1;
}

uint64_t UIMutableTraits.interfaceOrientation.getter()
{
  lazy protocol witness table accessor for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait();
  lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation((unint64_t *)&lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation);
  dispatch thunk of UIMutableTraits.subscript.getter();
  return v1;
}

uint64_t key path getter for UIMutableTraits.interfaceOrientation : <A>A@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UIMutableTraits.interfaceOrientation.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for UIMutableTraits.interfaceOrientation : <A>A()
{
  return UIMutableTraits.interfaceOrientation.setter();
}

uint64_t (*UIMutableTraits.interfaceOrientation.modify(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = UIMutableTraits.interfaceOrientation.getter();
  return UIMutableTraits.interfaceOrientation.modify;
}

uint64_t UIMutableTraits.interfaceOrientation.modify()
{
  return UIMutableTraits.interfaceOrientation.setter();
}

void *InterfaceOrientationKey.defaultValue.unsafeMutableAddressor()
{
  return &static InterfaceOrientationKey.defaultValue;
}

uint64_t static InterfaceOrientationKey.defaultValue.getter()
{
  return 0;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance InterfaceOrientationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation(&lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation);
  return MEMORY[0x1F40F8670](a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.interfaceOrientation.getter()
{
  lazy protocol witness table accessor for type InterfaceOrientationKey and conformance InterfaceOrientationKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type InterfaceOrientationKey and conformance InterfaceOrientationKey()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceOrientationKey and conformance InterfaceOrientationKey;
  if (!lazy protocol witness table cache variable for type InterfaceOrientationKey and conformance InterfaceOrientationKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceOrientationKey and conformance InterfaceOrientationKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InterfaceOrientationKey and conformance InterfaceOrientationKey;
  if (!lazy protocol witness table cache variable for type InterfaceOrientationKey and conformance InterfaceOrientationKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceOrientationKey and conformance InterfaceOrientationKey);
  }
  return result;
}

uint64_t EnvironmentValues.interfaceOrientation.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t (*EnvironmentValues.interfaceOrientation.modify(uint64_t a1))(void *a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = lazy protocol witness table accessor for type InterfaceOrientationKey and conformance InterfaceOrientationKey();
  EnvironmentValues.subscript.getter();
  return EnvironmentValues.interfaceOrientation.modify;
}

uint64_t EnvironmentValues.interfaceOrientation.modify(void *a1)
{
  a1[1] = *a1;
  return EnvironmentValues.subscript.setter();
}

uint64_t static InterfaceOrientationKey.read(from:)()
{
  lazy protocol witness table accessor for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait();
  lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation((unint64_t *)&lazy protocol witness table cache variable for type UIInterfaceOrientation and conformance UIInterfaceOrientation);
  UITraitCollection.subscript.getter();
  return v1;
}

uint64_t static InterfaceOrientationKey.write(to:value:)(uint64_t a1)
{
  return UIMutableTraits.interfaceOrientation.setter();
}

uint64_t protocol witness for static UITraitBridgedEnvironmentKey.read(from:) in conformance InterfaceOrientationKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static InterfaceOrientationKey.read(from:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static UITraitBridgedEnvironmentKey.write(to:value:) in conformance InterfaceOrientationKey(uint64_t a1)
{
  return static InterfaceOrientationKey.write(to:value:)(a1);
}

uint64_t sub_1C315D624()
{
  return 16;
}

__n128 sub_1C315D630(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for InterfaceOrientationBridgingViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InterfaceOrientationBridgingViewController);
}

ValueMetadata *type metadata accessor for InterfaceOrientationTrait()
{
  return &type metadata for InterfaceOrientationTrait;
}

ValueMetadata *type metadata accessor for InterfaceOrientationKey()
{
  return &type metadata for InterfaceOrientationKey;
}

uint64_t lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UIInterfaceOrientation(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit4Call_pG_So016UICustomViewMenuB0Cs5NeverOTg504_s15d83Kit0A35ControlsPrimaryActionButtonProviderC4menu3forSo6UIMenuCSgAA7Control_p_tFSo23ghib4CAA4F7_pXEfU_AF0dnopqR0CAF0X0_pTf1cn_n(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = (long long *)(a1 + 32);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICustomViewMenuElement);
    do
    {
      uint64_t v9 = swift_allocObject();
      long long v10 = *v8++;
      swift_weakInit();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v9;
      *(_OWORD *)(v11 + 24) = v10;
      *(void *)(v11 + 40) = a3;
      *(void *)(v11 + 48) = a4;
      swift_unknownObjectRetain();
      id v12 = a3;
      @nonobjc UICustomViewMenuElement.__allocating_init(viewProvider:)((uint64_t)partial apply for closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:), v11);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v5;
    }
    while (v5);
    uint64_t v13 = v15;
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }

  return v13;
}

uint64_t ConversationControlsPrimaryActionButtonProvider.__allocating_init(controlsManager:context:calls:selectedCallAction:title:symbol:prefersPill:showsSymbolInPill:prefersMediumSize:menuHostViewController:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11, void *a12)
{
  return ConversationControlsPrimaryActionButtonProvider.init(controlsManager:context:calls:selectedCallAction:title:symbol:prefersPill:showsSymbolInPill:prefersMediumSize:menuHostViewController:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t ConversationControlsPrimaryActionButtonProvider.init(controlsManager:context:calls:selectedCallAction:title:symbol:prefersPill:showsSymbolInPill:prefersMediumSize:menuHostViewController:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11, void *a12)
{
  void (*v28)(long long *__return_ptr, uint64_t, uint64_t);
  id v29;
  void v32[3];
  uint64_t v33;
  uint64_t v34;
  unsigned char v35[288];
  uint64_t v36;
  long long v37;
  uint64_t v38;

  *(unsigned char *)(v12 + 160) = a11;
  *(void *)(v12 + 168) = a3;
  *(void *)(v12 + 176) = a4;
  *(void *)(v12 + 184) = a5;
  if (a7)
  {
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
    swift_bridgeObjectRetain();
    uint64_t v17 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((a9 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v18 = a8;
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
    if ((a9 & 1) == 0)
    {
LABEL_8:
      id v19 = a12;
      id v20 = a1;
      uint64_t v21 = ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
      goto LABEL_10;
    }
    uint64_t v17 = 0;
  }
  static Layout.ConversationControls.values.getter((uint64_t)v35);
  if (v36 < v17)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v18 = a8;
    goto LABEL_8;
  }
  id v22 = a12;
  id v23 = a1;
  uint64_t v21 = ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
  swift_retain_n();
  ControlsButtonProvider.title.setter(a6, a7);
  swift_release();
  swift_retain();
  Class v24 = ControlsButtonProvider.prominentTitleFont.getter();
  swift_release();
  ControlsButtonProvider.titleFont.setter(v24);
  swift_release();
  uint64_t v18 = a8;
LABEL_10:
  outlined init with copy of SymbolImageDescribing?(v18, (uint64_t)&v37);
  if (v38)
  {
    outlined init with take of Notice(&v37, (uint64_t)v32);
    if (*(unsigned char *)(v21 + 41) != 2 || (a10 & 1) != 0)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      uint64_t v26 = v33;
      uint64_t v27 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      unsigned int v28 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v27 + 8);
      swift_retain();
      v28(&v37, v26, v27);
      long long v29 = static UIImage.symbolImage(for:)((uint64_t)&v37);
      outlined release of SymbolImageDescription((uint64_t)&v37);
      ControlsButtonProvider.image.setter(v29);
      swift_release();

      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(a4);
      uint64_t v25 = a8;
    }
    else
    {

      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(a4);
      uint64_t v25 = v18;
    }
    outlined destroy of SymbolImageDescribing?(v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {

    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(a4);
    outlined destroy of SymbolImageDescribing?(v18);
    outlined destroy of SymbolImageDescribing?((uint64_t)&v37);
  }
  return v21;
}

Swift::Void __swiftcall ConversationControlsPrimaryActionButtonProvider.buttonChanged()()
{
  ControlsButtonProvider.buttonChanged()();
  swift_beginAccess();
  uint64_t v1 = MEMORY[0x1C8776240](v0 + 16);
  if (v1)
  {
    objc_super v2 = (void *)v1;
    if (*(unsigned char *)(v0 + 41) == 2)
    {
      type metadata accessor for UILayoutPriority(0);
      lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority();
      id v3 = v2;
      OUTLINED_FUNCTION_0_47();
      LODWORD(v4) = v7;
      objc_msgSend(v2, sel_setContentCompressionResistancePriority_forAxis_, 1, v4);

      id v5 = v2;
      OUTLINED_FUNCTION_0_47();
      LODWORD(v6) = v7;
      objc_msgSend(v2, sel_setContentHuggingPriority_forAxis_, 0, v6);
    }
  }
}

void ConversationControlsPrimaryActionButtonProvider.buttonConfiguration.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationColorTransformer?);
  MEMORY[0x1F4188790](v3 - 8);
  id v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConversationControlsMenuButtonProvider.buttonConfiguration.getter(a1);
  if (*(unsigned char *)(v1 + 160) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FB1270], v6);
    UIButton.Configuration.buttonSize.setter();
  }
  id v10 = (id)UIButton.Configuration.preferredSymbolConfigurationForImage.getter();
  if (!v10) {
    id v10 = objc_msgSend(self, sel_unspecifiedConfiguration);
  }
  uint64_t v11 = v10;
  id v12 = objc_msgSend(self, sel_configurationWithWeight_, 7);
  id v13 = objc_msgSend(v11, sel_configurationByApplyingConfiguration_, v12);

  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  if (static Platform.current.getter() == 2)
  {
    UIConfigurationColorTransformer.init(_:)();
    uint64_t v14 = type metadata accessor for UIConfigurationColorTransformer();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v14);
    UIButton.Configuration.imageColorTransformer.setter();
  }
}

id closure #1 in ConversationControlsPrimaryActionButtonProvider.buttonConfiguration.getter()
{
  id v0 = objc_msgSend(self, sel_whiteColor);
  return v0;
}

UIMenu ConversationControlsPrimaryActionButtonProvider.menu(for:)(void *a1, uint64_t a2)
{
  swift_retain();
  id v5 = a1;
  uint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit4Call_pG_So016UICustomViewMenuB0Cs5NeverOTg504_s15d83Kit0A35ControlsPrimaryActionButtonProviderC4menu3forSo6UIMenuCSgAA7Control_p_tFSo23ghib4CAA4F7_pXEfU_AF0dnopqR0CAF0X0_pTf1cn_n(v6, v2, v5, a2);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(self, sel_conversationKit);
  swift__string._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001C379C540;
  v9._countAndFlagsBits = 0xD000000000000027;
  v10.value._countAndFlagsBits = 0x61737265766E6F43;
  v10.value._object = (void *)0xEF74694B6E6F6974;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  swift__string._countAndFlagsBits = 0;
  Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, swift__string);

  if (v7 >> 62)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
    swift_bridgeObjectRetain();
    UIMenuElementSize preferredElementSize = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenuElement);
    UIMenuElementSize preferredElementSize = v7;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v16.value.super.Class isa = 0;
  v16.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v16, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v15);
}

char *closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  }
  uint64_t ObjectType = swift_getObjectType();
  Swift::String v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 160))(ObjectType, a4);
  unsigned __int8 v12 = objc_msgSend(v11, sel_isSystemProvider);

  uint64_t v28 = a6;
  if (v12)
  {
    id v13 = 0;
  }
  else
  {
    uint64_t v15 = type metadata accessor for ConversationControlsRecipeGenerator();
    id v13 = specialized static ConversationControlsRecipeGenerator.makeVoipBadgeIcon(for:)(a3, v15, ObjectType, a4);
    if (v13) {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v16 = type metadata accessor for ConversationControlsBadgingAvatarViewController();
  uint64_t v17 = self;
  id v27 = v13;
  swift_unknownObjectRetain();
  uint64_t v18 = (void *)specialized ConversationControlsBadgingAvatarViewController.__allocating_init(call:conversation:badgeImage:badgeBackgroundColor:)(a3, 0, v13, objc_msgSend(v17, sel_clearColor), v16, ObjectType, a4);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(ObjectType, a4);
  uint64_t v21 = v20;
  id v22 = objc_msgSend(v18, sel_view);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  Class v24 = (void *)swift_allocObject();
  v24[2] = v23;
  v24[3] = a5;
  v24[4] = v28;
  v24[5] = a3;
  v24[6] = a4;
  objc_allocWithZone((Class)type metadata accessor for ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView());
  swift_unknownObjectRetain();
  swift_retain();
  id v25 = a5;
  uint64_t v14 = ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.init(title:accessoryView:onSelection:)(v19, v21, v22, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:), (uint64_t)v24);
  swift_release();
  swift_release();

  return v14;
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    self;
    uint64_t v10 = swift_dynamicCastObjCClass();
    if (v10)
    {
      Swift::String v11 = (void *)v10;
      unsigned __int8 v12 = self;
      id v13 = a2;
      id v14 = objc_msgSend(v12, sel_defaultCenter);
      uint64_t v15 = type metadata accessor for Notification();
      uint64_t v16 = *(void *)(v15 - 8);
      MEMORY[0x1F4188790](v15);
      uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      static Notification.contextMenuDidDismiss(target:)(v11);
      NSNotificationCenter.post(_:afterAnimatorCompletes:)((uint64_t)v18, 0);

      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    }
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v9 + 176);
    if (v19) {
      v19(a4, a5);
    }
    return swift_release();
  }
  return result;
}

char *ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.__allocating_init(title:accessoryView:onSelection:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  return ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.init(title:accessoryView:onSelection:)(a1, a2, a3, a4, a5);
}

Swift::Bool __swiftcall ConversationControlsPrimaryActionButtonProvider.shouldEnableMenu()()
{
  return *(void *)(*(void *)(v0 + 168) + 16) != 0;
}

id closure #1 in variable initialization expression of ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.titleLabel(void *a1)
{
  objc_msgSend(a1, sel_setAlpha_, 0.96);
  id v1 = objc_msgSend(self, sel_systemFontOfSize_, 17.0);
  objc_msgSend(a1, sel_setFont_, v1);

  objc_msgSend(a1, sel_setNumberOfLines_, 2);
  objc_msgSend(a1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return a1;
}

char *ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.init(title:accessoryView:onSelection:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = OBJC_IVAR____TtCC15ConversationKit47ConversationControlsPrimaryActionButtonProvider19AvatarSelectionView_titleLabel;
  id v11 = objc_allocWithZone(MEMORY[0x1E4FB1930]);
  unsigned __int8 v12 = v5;
  id v13 = objc_msgSend(v11, sel_init);
  id v14 = closure #1 in variable initialization expression of ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.titleLabel(v13);

  *(void *)&v5[v10] = v14;
  uint64_t v15 = &v12[OBJC_IVAR____TtCC15ConversationKit47ConversationControlsPrimaryActionButtonProvider19AvatarSelectionView_onSelection];
  *(void *)uint64_t v15 = a4;
  *((void *)v15 + 1) = a5;
  swift_retain();

  uint64_t v16 = (objc_class *)type metadata accessor for ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView();
  v48.id receiver = v12;
  v48.super_class = v16;
  uint64_t v17 = (char *)objc_msgSendSuper2(&v48, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v18 = OBJC_IVAR____TtCC15ConversationKit47ConversationControlsPrimaryActionButtonProvider19AvatarSelectionView_titleLabel;
  uint64_t v19 = *(void **)&v17[OBJC_IVAR____TtCC15ConversationKit47ConversationControlsPrimaryActionButtonProvider19AvatarSelectionView_titleLabel];
  uint64_t v20 = v17;
  outlined bridged method (mbnn) of @objc UILabel.text.setter(a1, a2, v19);
  objc_msgSend(v20, sel_addSubview_, v19);
  id v45 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1C3769600;
  id v22 = objc_msgSend(v19, sel_leadingAnchor);
  id v23 = objc_msgSend(v20, sel_leadingAnchor);
  id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v23, 16.0);

  *(void *)(v21 + 32) = v24;
  id v25 = objc_msgSend(v20, sel_trailingAnchor);
  id v26 = objc_msgSend(*(id *)&v17[v18], sel_trailingAnchor);
  id v27 = OUTLINED_FUNCTION_1_68();

  *(void *)(v21 + 40) = v27;
  id v28 = objc_msgSend(*(id *)&v17[v18], sel_topAnchor);
  id v29 = objc_msgSend(v20, sel_topAnchor);
  id v30 = OUTLINED_FUNCTION_1_68();

  *(void *)(v21 + 48) = v30;
  id v31 = objc_msgSend(*(id *)&v17[v18], sel_centerYAnchor);
  id v32 = objc_msgSend(v20, sel_centerYAnchor);
  id v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v32);

  *(void *)(v21 + 56) = v33;
  id v34 = objc_msgSend(v20, sel_bottomAnchor);
  id v35 = objc_msgSend(*(id *)&v17[v18], sel_bottomAnchor);
  id v36 = objc_msgSend(v34, sel_constraintGreaterThanOrEqualToAnchor_constant_, v35, 16.0);

  *(void *)(v21 + 64) = v36;
  v47[0] = v21;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v45, sel_activateConstraints_, isa);

  if (a3)
  {
    uint64_t v38 = v20;
    id v39 = a3;
    ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.addAccessoryView(_:)(v39);
  }
  v47[3] = v16;
  v47[0] = v20;
  id v40 = objc_allocWithZone(MEMORY[0x1E4FB1D38]);
  long long v41 = v20;
  id v42 = @nonobjc UITapGestureRecognizer.init(target:action:)(v47, (uint64_t)sel_onTap);
  uint64_t v43 = v41;
  objc_msgSend(v43, sel_addGestureRecognizer_, v42);

  swift_release();
  return v43;
}

id ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtCC15ConversationKit47ConversationControlsPrimaryActionButtonProvider19AvatarSelectionView_titleLabel;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  id v3 = closure #1 in variable initialization expression of ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.titleLabel(v2);

  *(void *)&v0[v1] = v3;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.addAccessoryView(_:)(void *a1)
{
  id v2 = v1;
  objc_msgSend(a1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v2, sel_addSubview_, a1);
  uint64_t v4 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3771690;
  id v6 = objc_msgSend(a1, sel_leadingAnchor);
  id v7 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtCC15ConversationKit47ConversationControlsPrimaryActionButtonProvider19AvatarSelectionView_titleLabel], sel_trailingAnchor);
  id v8 = objc_msgSend(v6, sel_constraintGreaterThanOrEqualToAnchor_constant_, v7, 8.0);

  *(void *)(v5 + 32) = v8;
  id v9 = objc_msgSend(v2, sel_trailingAnchor);
  id v10 = objc_msgSend(a1, sel_trailingAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_constant_, v10, 12.0);

  *(void *)(v5 + 40) = v11;
  id v12 = objc_msgSend(a1, sel_topAnchor);
  id v13 = objc_msgSend(v2, sel_topAnchor);
  id v14 = objc_msgSend(v12, sel_constraintGreaterThanOrEqualToAnchor_constant_, v13, 12.0);

  *(void *)(v5 + 48) = v14;
  id v15 = objc_msgSend(a1, sel_centerYAnchor);
  id v16 = objc_msgSend(v2, sel_centerYAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(void *)(v5 + 56) = v17;
  id v18 = objc_msgSend(v2, sel_bottomAnchor);
  id v19 = objc_msgSend(a1, sel_bottomAnchor);
  id v20 = objc_msgSend(v18, sel_constraintGreaterThanOrEqualToAnchor_constant_, v19, 12.0);

  *(void *)(v5 + 64) = v20;
  id v21 = objc_msgSend(a1, sel_heightAnchor);
  id v22 = objc_msgSend(v21, sel_constraintEqualToConstant_, 25.0);

  *(void *)(v5 + 72) = v22;
  id v23 = objc_msgSend(a1, sel_widthAnchor);
  id v24 = objc_msgSend(v23, sel_constraintEqualToConstant_, 25.0);

  *(void *)(v5 + 80) = v24;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, isa);
}

uint64_t ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.onTap()()
{
  return (*(uint64_t (**)(void))(v0
                              + OBJC_IVAR____TtCC15ConversationKit47ConversationControlsPrimaryActionButtonProvider19AvatarSelectionView_onSelection))();
}

id ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.init(frame:)()
{
}

id ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void ConversationControlsPrimaryActionButtonProvider.__allocating_init(controlsManager:context:shape:menuHostViewController:)()
{
}

void ConversationControlsPrimaryActionButtonProvider.init(controlsManager:context:shape:menuHostViewController:)()
{
}

uint64_t ConversationControlsPrimaryActionButtonProvider.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 176);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v1);
}

uint64_t ConversationControlsPrimaryActionButtonProvider.deinit()
{
  uint64_t v0 = ConversationControlsMenuButtonProvider.deinit();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 176));
  return v0;
}

uint64_t ConversationControlsPrimaryActionButtonProvider.__deallocating_deinit()
{
  ConversationControlsPrimaryActionButtonProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView()
{
  return self;
}

uint64_t type metadata accessor for ConversationControlsPrimaryActionButtonProvider()
{
  return self;
}

uint64_t method lookup function for ConversationControlsPrimaryActionButtonProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsPrimaryActionButtonProvider);
}

uint64_t dispatch thunk of ConversationControlsPrimaryActionButtonProvider.__allocating_init(controlsManager:context:calls:selectedCallAction:title:symbol:prefersPill:showsSymbolInPill:prefersMediumSize:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 608))();
}

uint64_t method lookup function for ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView);
}

uint64_t dispatch thunk of ConversationControlsPrimaryActionButtonProvider.AvatarSelectionView.__allocating_init(title:accessoryView:onSelection:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_1C315F1CC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C315F204()
{
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

char *partial apply for closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:)(uint64_t a1)
{
  return closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1C315F25C()
{
  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:)()
{
  return closure #1 in closure #1 in closure #1 in ConversationControlsPrimaryActionButtonProvider.menu(for:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)
    && (uint64_t v4 = type metadata accessor for UUID(),
        _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID),
        uint64_t v5 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v6 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v7 = v5 & ~v6,
        uint64_t v17 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0))
  {
    uint64_t v16 = a1;
    uint64_t v14 = ~v6;
    id v8 = *(void **)(v4 - 8);
    id v15 = (void (*)(char *, unint64_t, uint64_t))v8[2];
    uint64_t v9 = v8[8];
    uint64_t v10 = v8[9];
    id v11 = (uint64_t (**)(char *, uint64_t))(v8 + 1);
    do
    {
      MEMORY[0x1F4188790](v5);
      v15((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(a2 + 48) + v10 * v7, v4);
      _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v5 = (*v11)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      if (v12) {
        break;
      }
      unint64_t v7 = (v7 + 1) & v14;
    }
    while (((*(void *)(v17 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

void specialized Set.contains(_:)(Swift::UInt32 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    OUTLINED_FUNCTION_6_45();
    Hasher._combine(_:)(a1);
    Hasher._finalize()();
    OUTLINED_FUNCTION_1_69();
    if ((v5 & 1) != 0 && *(_DWORD *)(*(void *)(a2 + 48) + 4 * v4) != a1)
    {
      OUTLINED_FUNCTION_0_48();
      if (v8)
      {
        do
        {
          if (*(_DWORD *)(v6 + 4 * v7) == a1) {
            break;
          }
          OUTLINED_FUNCTION_0_48();
        }
        while ((v9 & 1) != 0);
      }
    }
  }
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  return specialized Set.contains(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
}

{
  return specialized Set.contains(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2, unint64_t *a3)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v4 = a1;
    char v5 = __CocoaSet.contains(_:)();

    return v5 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v9 = -1 << *(unsigned char *)(a2 + 32),
        Swift::Int v10 = v8 & ~v9,
        OUTLINED_FUNCTION_5_54(),
        (v11 & 1) == 0))
  {
LABEL_11:
    char v14 = 0;
    return v14 & 1;
  }
  type metadata accessor for NSObject(0, a3);
  id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v10);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v15 = ~v9;
    uint64_t v16 = (v10 + 1) & v15;
    OUTLINED_FUNCTION_5_54();
    if (v17)
    {
      do
      {
        id v18 = *(id *)(*(void *)(a2 + 48) + 8 * v16);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          break;
        }
        uint64_t v16 = (v16 + 1) & v15;
        OUTLINED_FUNCTION_5_54();
      }
      while ((v19 & 1) != 0);
      return v14 & 1;
    }
    goto LABEL_11;
  }
  char v14 = 1;
  return v14 & 1;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    OUTLINED_FUNCTION_4_54();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        OUTLINED_FUNCTION_4_54();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            OUTLINED_FUNCTION_4_54();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

void specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    int v3 = a1;
    int v4 = OUTLINED_FUNCTION_6_45();
    OUTLINED_FUNCTION_34_0(v4, v5, v6, v7, v8, v9, v10, v11, v18, v19);
    Hasher._finalize()();
    OUTLINED_FUNCTION_1_69();
    if ((v13 & 1) != 0 && *(unsigned __int8 *)(*(void *)(a2 + 48) + v12) != v3)
    {
      OUTLINED_FUNCTION_0_48();
      if (v16)
      {
        do
        {
          if (*(unsigned __int8 *)(v14 + v15) == v3) {
            break;
          }
          OUTLINED_FUNCTION_0_48();
        }
        while ((v17 & 1) != 0);
      }
    }
  }
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    OUTLINED_FUNCTION_7_47(a1, a2);
    static Hasher._hash(seed:_:)();
    OUTLINED_FUNCTION_2_51();
    if (v2)
    {
      OUTLINED_FUNCTION_3_67();
      if (!v3)
      {
        OUTLINED_FUNCTION_0_48();
        if (v4)
        {
          do
          {
            OUTLINED_FUNCTION_3_67();
            if (v3) {
              break;
            }
            OUTLINED_FUNCTION_0_48();
          }
          while ((v5 & 1) != 0);
        }
      }
    }
  }
}

{
  char v2;
  char v3;
  char v4;
  char v5;

  if (*(void *)(a2 + 16))
  {
    OUTLINED_FUNCTION_7_47(a1, a2);
    static Hasher._hash(seed:_:)();
    OUTLINED_FUNCTION_2_51();
    if (v2)
    {
      OUTLINED_FUNCTION_3_67();
      if (!v3)
      {
        OUTLINED_FUNCTION_0_48();
        if (v4)
        {
          do
          {
            OUTLINED_FUNCTION_3_67();
            if (v3) {
              break;
            }
            OUTLINED_FUNCTION_0_48();
          }
          while ((v5 & 1) != 0);
        }
      }
    }
  }
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;

  if (*(void *)(a2 + 16))
  {
    char v2 = OUTLINED_FUNCTION_6_45();
    OUTLINED_FUNCTION_34_0(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15);
    Hasher._finalize()();
    OUTLINED_FUNCTION_1_69();
    if (v10)
    {
      OUTLINED_FUNCTION_3_67();
      if (!v11)
      {
        OUTLINED_FUNCTION_0_48();
        if (v12)
        {
          do
          {
            OUTLINED_FUNCTION_3_67();
            if (v11) {
              break;
            }
            OUTLINED_FUNCTION_0_48();
          }
          while ((v13 & 1) != 0);
        }
      }
    }
  }
}

uint64_t specialized Set.contains(_:)(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    goto LABEL_9;
  }
  int v3 = a1 & 1;
  int v4 = OUTLINED_FUNCTION_6_45();
  OUTLINED_FUNCTION_34_0(v4, v5, v6, v7, v8, v9, v10, v11, v21, v22);
  Hasher._finalize()();
  OUTLINED_FUNCTION_1_69();
  if ((v13 & 1) == 0) {
    goto LABEL_9;
  }
  if (((v3 == 0) ^ *(unsigned __int8 *)(*(void *)(a2 + 48) + v12)))
  {
    char v14 = 1;
    return v14 & 1;
  }
  OUTLINED_FUNCTION_0_48();
  if ((v19 & 1) == 0)
  {
LABEL_9:
    char v14 = 0;
    return v14 & 1;
  }
  do
  {
    char v14 = (v3 == 0) ^ *(unsigned char *)(v16 + v18);
    if (v14) {
      break;
    }
    unint64_t v18 = (v18 + 1) & v17;
  }
  while (((*(void *)(v15 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
  return v14 & 1;
}

void one-time initialization function for firstPartyCollaborationApps()
{
  specialized Set.init(_nonEmptyArrayLiteral:)();
  static EntitlementsChecker.firstPartyCollaborationApps = v0;
}

id EntitlementsChecker.entitlements(for:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for LSBundleRecord);
  swift_bridgeObjectRetain();
  id result = @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (!v2)
  {
    int v6 = result;
    id v7 = objc_msgSend(result, sel_entitlements);

    return v7;
  }
  return result;
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  int v4 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id EntitlementsChecker.lookupBundleIdentifierSupported(_:entitlement:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  id result = specialized EntitlementsChecker.tryLog<A>(_:_:function:line:)((uint64_t)"Entitlements", 12, 2, 0xD00000000000002FLL, 0x80000001C379C810, 53, v5, v5, a1, a2);
  if (result)
  {
    int v11 = result;
    v12._countAndFlagsBits = a3;
    v12._object = a4;
    Swift::Bool v13 = LSPropertyList.contains(entitlement:)(v12);

    return (id)v13;
  }
  return result;
}

uint64_t EntitlementsChecker.supportsCollaboration(bundleIdentifier:bundleRecord:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), sel_collaborateTogetherEnabled);
  if (result)
  {
    if (one-time initialization token for firstPartyCollaborationApps != -1) {
      swift_once();
    }
    specialized Set.contains(_:)(a1, a2, static EntitlementsChecker.firstPartyCollaborationApps);
    if (v8)
    {
      return 1;
    }
    else if (a3)
    {
      id v9 = a3;
      id v10 = objc_msgSend(v9, sel_entitlements);
      v11._object = (void *)0x80000001C379C780;
      v11._countAndFlagsBits = 0xD000000000000031;
      Swift::Bool v12 = LSPropertyList.contains(entitlement:)(v11);

      return v12;
    }
    else
    {
      return (uint64_t)EntitlementsChecker.lookupBundleIdentifierSupported(_:entitlement:)(a1, a2, 0xD000000000000031, (void *)0x80000001C379C780);
    }
  }
  return result;
}

id specialized EntitlementsChecker.tryLog<A>(_:_:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v10 = EntitlementsChecker.entitlements(for:)(a9, a10);
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t EntitlementsChecker.deinit()
{
  return v0;
}

uint64_t EntitlementsChecker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t EntitlementsChecker.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  return v0;
}

uint64_t EntitlementsChecker.init()()
{
  *(void *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  return v0;
}

uint64_t protocol witness for EntitlementsChecking.supportsCollaboration(bundleIdentifier:bundleRecord:) in conformance EntitlementsChecker()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t dispatch thunk of EntitlementsChecking.supportsCollaboration(bundleIdentifier:bundleRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t type metadata accessor for EntitlementsChecker()
{
  return self;
}

uint64_t method lookup function for EntitlementsChecker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EntitlementsChecker);
}

uint64_t dispatch thunk of EntitlementsChecker.supportsCollaboration(bundleIdentifier:bundleRecord:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of EntitlementsChecker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_3(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Image.init(describer:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = __swift_mutable_project_boxed_opaque_existential_1(a1, v2);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t v8 = specialized Image.init(describer:)((uint64_t)v6, v2, v3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

uint64_t specialized Image.init(describer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v7, a2, a3);
  swift_bridgeObjectRetain();
  outlined release of SymbolImageDescription((uint64_t)&v7);
  uint64_t v5 = Image.init(systemName:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t MessagesGroup.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t MessagesGroup.uuid.setter(uint64_t a1)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*MessagesGroup.uuid.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t MessagesGroup.name.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MessagesGroup() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for MessagesGroup()
{
  uint64_t result = type metadata singleton initialization cache for MessagesGroup;
  if (!type metadata singleton initialization cache for MessagesGroup) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MessagesGroup.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for MessagesGroup() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MessagesGroup.name.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t MessagesGroup.init(uuid:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a4, a1);
  uint64_t result = type metadata accessor for MessagesGroup();
  uint64_t v10 = (void *)(a4 + *(int *)(result + 20));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t getEnumTagSinglePayload for MessagesGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3160730);
}

uint64_t sub_1C3160730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MessagesGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31607D4);
}

void sub_1C31607D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for MessagesGroup()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ConversationKit::CallRecordingButtonConfiguration __swiftcall CallRecordingButtonConfiguration.init(isEnabled:isHidden:)(Swift::Bool isEnabled, Swift::Bool isHidden)
{
  Swift::Bool *v2 = isEnabled;
  v2[1] = isHidden;
  result.isEnabled = isEnabled;
  return result;
}

uint64_t CallRecordingButtonConfiguration.isEnabled.getter()
{
  return *v0;
}

uint64_t CallRecordingButtonConfiguration.isEnabled.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*CallRecordingButtonConfiguration.isEnabled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t CallRecordingButtonConfiguration.isHidden.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t CallRecordingButtonConfiguration.isHidden.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*CallRecordingButtonConfiguration.isHidden.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t dispatch thunk of CallRecordingCountdownViewModelDelegate.updateText(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 8))(a1, a2 & 1);
}

uint64_t dispatch thunk of CallRecordingViewModelDelegate.updateRecordingTimeLabel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CallRecordingViewModelDelegate.updatePowerLevels(latestRemoteSpectrum:latestLocalSpectrum:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t getEnumTagSinglePayload for CallRecordingButtonConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 65281 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65281 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 16)) - 65282;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CallRecordingButtonConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)ConversationKit::CallRecordingButtonConfiguration result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3160B08);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)ConversationKit::CallRecordingButtonConfiguration result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallRecordingButtonConfiguration()
{
  return &type metadata for CallRecordingButtonConfiguration;
}

uint64_t dispatch thunk of CallRecordingButtonViewModelDelegate.presentEducationScreen()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallRecordingButtonViewModelDelegate.configureButton(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CallRecordingViewModelProtocol.recordingState.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 8))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of CallRecordingViewModelProtocol.recordingState.setter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(unint64_t))(a3 + 16))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of CallRecordingViewModelProtocol.recordingState.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CallRecordingViewModelProtocol.startCountdown()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CallRecordingViewModelProtocol.startStopwatch()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CallRecordingViewModelProtocol.observeCountdownNotifications()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CallRecordingViewModelProtocol.observeRecordingStateNotifications()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CallRecordingEducationViewControllerDelegate.tappedContinue()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallRecordingEducationViewControllerDelegate.tappedCancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t CallScreeningViewModelComposer.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t CallScreeningViewModelComposer.composeViewModel()()
{
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t one-time initialization function for viewModel()
{
  uint64_t result = closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel();
  static CallScreeningViewModelComposer.viewModel = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for TranscriptionViewModel(0);
  swift_allocObject();
  uint64_t result = TranscriptionViewModel.init(config:)(0x697263736E617254, 0xEC000000676E6962);
  static TranscriptionView_Previews.viewModel = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v0 - 8);
  unint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  long long v3 = static TranscriptionViewModel.Configuration.default;
  type metadata accessor for TranscriptionViewModel(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v4 = TranscriptionViewModel.init(config:)(v3, *((uint64_t *)&v3 + 1));
  static TaskPriority.userInitiated.getter();
  uint64_t v5 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v5);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v6 = static MainActor.shared.getter();
  BOOL v7 = (void *)swift_allocObject();
  uint64_t v8 = MEMORY[0x1E4FBCFD8];
  v7[2] = v6;
  v7[3] = v8;
  v7[4] = v4;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v5);
  swift_retain();
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  void v10[3] = v8;
  v10[4] = v4;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  return v4;
}

long long *TranscriptionViewModel.Configuration.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  return &static TranscriptionViewModel.Configuration.default;
}

uint64_t closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  v4[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>);
  v4[7] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v7;
  v4[14] = v6;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel, v7, v6);
}

uint64_t closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v1 = (id)static PhoneLockStateObserver.shared;
  PhoneLockStateObserver.values.getter();

  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<Bool>.Publisher> and conformance AsyncPublisher<A>, &demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  *(void *)(v0 + 120) = static MainActor.shared.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<Bool>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  void *v2 = v0;
  v2[1] = closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
  uint64_t v3 = OUTLINED_FUNCTION_16_20();
  return MEMORY[0x1F4187C80](v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  id v1 = *v0;
  unint64_t v2 = *v0;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v5 = *(void *)(v1 + 104);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel, v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  void *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  if (*(unsigned char *)(v0 + 136) == 2)
  {
    id v1 = OUTLINED_FUNCTION_14_26();
    v2(v1);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v3();
  }
  else
  {
    TranscriptionViewModel.hidePrivacySensitiveContent.setter();
    *(void *)(v0 + 120) = static MainActor.shared.getter();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<Bool>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Bool>.Publisher>.Iterator);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
    uint64_t v6 = OUTLINED_FUNCTION_16_20();
    return MEMORY[0x1F4187C80](v6);
  }
}

uint64_t closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[13] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<String>.Publisher>);
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v4[17] = v6;
  v4[18] = *(void *)(v6 - 8);
  v4[19] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<String>.Publisher>.Iterator);
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = type metadata accessor for MainActor();
  v4[24] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[25] = v9;
  v4[26] = v8;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel, v9, v8);
}

uint64_t closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel()
{
  OUTLINED_FUNCTION_9_34();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<String>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String>.Publisher);
  OUTLINED_FUNCTION_13_28();
  uint64_t v1 = OUTLINED_FUNCTION_7_48();
  v2(v1);
  AsyncPublisher.makeAsyncIterator()();
  uint64_t v3 = OUTLINED_FUNCTION_5_55();
  v4(v3);
  v0[27] = 0;
  v0[28] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<String>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<String>.Publisher>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[29] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
  return MEMORY[0x1F4187C78](v0 + 9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_1_70();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v0 + 224);
  if (v1)
  {
    if (v5)
    {
      swift_getObjectType();
      dispatch thunk of Actor.unownedExecutor.getter();
      OUTLINED_FUNCTION_11_26();
    }
    else
    {
      OUTLINED_FUNCTION_15_28();
    }
    uint64_t v8 = closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
  }
  else
  {
    if (v5)
    {
      swift_getObjectType();
      dispatch thunk of Actor.unownedExecutor.getter();
      OUTLINED_FUNCTION_11_26();
    }
    else
    {
      OUTLINED_FUNCTION_15_28();
    }
    uint64_t v8 = closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
  }
  return MEMORY[0x1F4188298](v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 200);
  unint64_t v2 = *(void *)(v0 + 208);
  return MEMORY[0x1F4188298](closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel, v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int EnumTagSinglePayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v1 = v0[32];
  if (v1)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if (((*(uint64_t (**)(void, uint64_t))(*(void *)static CallScreeningRTTHelper.shared + 192))(v0[31], v1) & 1) == 0)
    {
      uint64_t v16 = v0[27];
      swift_bridgeObjectRelease();
      if (v16)
      {
        uint64_t v17 = swift_retain();
        MEMORY[0x1C8773690](v17, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
        swift_release();
LABEL_19:
        v0[28] = static MainActor.shared.getter();
        lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<String>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<String>.Publisher>.Iterator);
        char v19 = (void *)swift_task_alloc();
        v0[29] = v19;
        *char v19 = v0;
        v19[1] = closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
        return MEMORY[0x1F4187C78](v0 + 9);
      }
LABEL_18:
      v0[27] = v16;
      goto LABEL_19;
    }
    unint64_t v2 = v0[31];
    uint64_t v4 = v0[12];
    uint64_t v3 = v0[13];
    uint64_t v5 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v3, 1, 1, v5);
    swift_retain();
    uint64_t v6 = static MainActor.shared.getter();
    uint64_t v7 = (void *)swift_allocObject();
    uint64_t v8 = MEMORY[0x1E4FBCFD8];
    v7[2] = v6;
    v7[3] = v8;
    v7[4] = v4;
    v7[5] = v2;
    v7[6] = v1;
    uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1, v5);
    uint64_t v10 = v0[13];
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of Conversation?(v0[13], &demangling cache variable for type metadata for TaskPriority?);
      if (v6)
      {
LABEL_7:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
        Swift::Bool v13 = v12;
        swift_unknownObjectRelease();
LABEL_15:
        unint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = &async function pointer to partial apply for closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
        *(void *)(v18 + 24) = v7;
        if (v13 | v11)
        {
          v0[2] = 0;
          v0[3] = 0;
          v0[4] = v11;
          v0[5] = v13;
        }
        uint64_t v16 = swift_task_create();
        swift_release();
        goto LABEL_18;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v10, v5);
      if (v7[2]) {
        goto LABEL_7;
      }
    }
    uint64_t v11 = 0;
    Swift::Bool v13 = 0;
    goto LABEL_15;
  }
  (*(void (**)(void, void))(v0[21] + 8))(v0[22], v0[20]);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v14();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 88) = *(void *)(v0 + 240);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  unint64_t v2 = OUTLINED_FUNCTION_12_29();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
  v6[10] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[TranscriptionViewModel.Caption]>.Publisher>);
  v6[11] = v7;
  v6[12] = *(void *)(v7 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[TranscriptionViewModel.Caption]>.Publisher);
  v6[14] = v8;
  v6[15] = *(void *)(v8 - 8);
  unsigned char v6[16] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[TranscriptionViewModel.Caption]>.Publisher>.Iterator);
  v6[17] = v9;
  v6[18] = *(void *)(v9 - 8);
  v6[19] = swift_task_alloc();
  v6[20] = type metadata accessor for MainActor();
  v6[21] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[22] = v11;
  v6[23] = v10;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel, v11, v10);
}

uint64_t closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel()
{
  OUTLINED_FUNCTION_9_34();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[TranscriptionViewModel.Caption]>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<[TranscriptionViewModel.Caption]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[TranscriptionViewModel.Caption]>.Publisher);
  OUTLINED_FUNCTION_13_28();
  uint64_t v1 = OUTLINED_FUNCTION_7_48();
  v2(v1);
  AsyncPublisher.makeAsyncIterator()();
  uint64_t v3 = OUTLINED_FUNCTION_5_55();
  v4(v3);
  *(void *)(v0 + 192) = static MainActor.shared.getter();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<[TranscriptionViewModel.Caption]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[TranscriptionViewModel.Caption]>.Publisher>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
  return MEMORY[0x1F4187C78](v0 + 40);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_1_70();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v0 + 192);
  if (v1)
  {
    if (v5)
    {
      swift_getObjectType();
      dispatch thunk of Actor.unownedExecutor.getter();
      OUTLINED_FUNCTION_11_26();
    }
    else
    {
      OUTLINED_FUNCTION_15_28();
    }
    uint64_t v8 = closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
  }
  else
  {
    if (v5)
    {
      swift_getObjectType();
      dispatch thunk of Actor.unownedExecutor.getter();
      OUTLINED_FUNCTION_11_26();
    }
    else
    {
      OUTLINED_FUNCTION_15_28();
    }
    uint64_t v8 = closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
  }
  return MEMORY[0x1F4188298](v8, v7, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  v0[27] = v0[5];
  uint64_t v1 = v0[22];
  unint64_t v2 = v0[23];
  return MEMORY[0x1F4188298](closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel, v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v1 = v0[27];
  if (v1)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    unint64_t v2 = static CallScreeningRTTHelper.shared;
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v4 = v0[10];
    if (v3)
    {
      uint64_t v5 = v3 - 1;
      uint64_t v6 = type metadata accessor for TranscriptionViewModel.Caption(0);
      outlined init with copy of TranscriptionViewModel.Caption(v1+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v5, v4);
      uint64_t v7 = v4;
      uint64_t v8 = 0;
      uint64_t v9 = v6;
    }
    else
    {
      uint64_t v9 = type metadata accessor for TranscriptionViewModel.Caption(0);
      uint64_t v7 = v4;
      uint64_t v8 = 1;
    }
    __swift_storeEnumTagSinglePayload(v7, v8, 1, v9);
    uint64_t v15 = v0[9];
    char v14 = v0[10];
    uint64_t v16 = v0[8];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 176))(v14, v16, v15);
    outlined destroy of Conversation?(v14, (uint64_t *)&demangling cache variable for type metadata for TranscriptionViewModel.Caption?);
    v0[24] = static MainActor.shared.getter();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<[TranscriptionViewModel.Caption]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[TranscriptionViewModel.Caption]>.Publisher>.Iterator);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[25] = v17;
    *uint64_t v17 = v0;
    v17[1] = closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel;
    return MEMORY[0x1F4187C78](v0 + 5);
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_14_26();
    v11(v10);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v12();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 48) = *(void *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  unint64_t v2 = OUTLINED_FUNCTION_12_29();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t CallScreeningViewModelComposer.deinit()
{
  return v0;
}

uint64_t CallScreeningViewModelComposer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t CallScreeningViewModelComposer.init()()
{
  return v0;
}

void one-time initialization function for waitingForTranscriptionText()
{
  id v0 = objc_msgSend(self, sel_conversationKit);
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001C379C880;
  v1._countAndFlagsBits = 0xD000000000000019;
  v2.value._countAndFlagsBits = 0x61737265766E6F43;
  v2.value._object = (void *)0xEF74694B6E6F6974;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v5);

  static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText = (__int128)v4;
}

long long *TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText.unsafeMutableAddressor()
{
  if (one-time initialization token for waitingForTranscriptionText != -1) {
    swift_once();
  }
  return &static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText;
}

uint64_t static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText.getter()
{
  if (one-time initialization token for waitingForTranscriptionText != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for waitingForTranscriptionText != -1) {
    swift_once();
  }
  swift_beginAccess();
  *(void *)&static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText = a1;
  *((void *)&static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText + 1) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static TranscriptionViewModel.Configuration.Strings.waitingForTranscriptionText.modify())()
{
  if (one-time initialization token for waitingForTranscriptionText != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t static TranscriptionViewModel.Configuration.default.getter()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = static TranscriptionViewModel.Configuration.default;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t type metadata accessor for CallScreeningViewModelComposer()
{
  return self;
}

uint64_t method lookup function for CallScreeningViewModelComposer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallScreeningViewModelComposer);
}

uint64_t dispatch thunk of CallScreeningViewModelComposer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

ValueMetadata *type metadata accessor for TranscriptionViewModel.Configuration.Strings()
{
  return &type metadata for TranscriptionViewModel.Configuration.Strings;
}

uint64_t partial apply for closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v0 = swift_task_alloc();
  Swift::String v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *Swift::String v1 = v2;
  v1[1] = partial apply for closure #1 in CallRecordingService.startRecording(call:completion:);
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #1 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel(v3, v4, v5, v6);
}

uint64_t objectdestroyTm_4()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v0 = swift_task_alloc();
  Swift::String v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *Swift::String v1 = v2;
  v1[1] = partial apply for closure #1 in CallRecordingService.stopRecording(call:completion:);
  uint64_t v3 = OUTLINED_FUNCTION_10_4();
  return closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel(v3, v4, v5, v6);
}

uint64_t sub_1C3162BE0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_10(v8);
  *uint64_t v9 = v10;
  v9[1] = partial apply for closure #1 in CallRecordingService.startRecording(call:completion:);
  return closure #1 in closure #2 in closure #1 in variable initialization expression of static CallScreeningViewModelComposer.viewModel(a1, v3, v4, v5, v6, v7);
}

uint64_t sub_1C3162CE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of TranscriptionViewModel.Caption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptionViewModel.Caption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *PushToTalkView.__allocating_init(conversationControlsManager:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return PushToTalkView.init(conversationControlsManager:)(a1);
}

char *PushToTalkView.leaveLabelButtonView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___leaveLabelButtonView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___leaveLabelButtonView);
  if (v2)
  {
    id v3 = *(char **)(v0 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___leaveLabelButtonView);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leaveButton);
    uint64_t v6 = self;
    id v7 = v5;
    id v8 = objc_msgSend(v6, sel_conversationKit);
    OUTLINED_FUNCTION_0_23(0x657661654CLL, 0xE500000000000000);

    id v9 = objc_allocWithZone((Class)type metadata accessor for PushToTalkLabelButtonView());
    uint64_t v10 = OUTLINED_FUNCTION_21_21();
    uint64_t v11 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v10;
    id v3 = v10;

    uint64_t v2 = 0;
  }
  id v12 = v2;
  return v3;
}

char *PushToTalkView.talkLabelButtonView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___talkLabelButtonView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___talkLabelButtonView);
  if (v2)
  {
    id v3 = *(char **)(v0 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___talkLabelButtonView);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_talkButton);
    uint64_t v6 = self;
    id v7 = v5;
    id v8 = objc_msgSend(v6, sel_conversationKit);
    OUTLINED_FUNCTION_0_23(1802264916, 0xE400000000000000);

    id v9 = objc_allocWithZone((Class)type metadata accessor for PushToTalkLabelButtonView());
    uint64_t v10 = OUTLINED_FUNCTION_21_21();
    uint64_t v11 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v10;
    id v3 = v10;

    uint64_t v2 = 0;
  }
  id v12 = v2;
  return v3;
}

void PushToTalkView.alwaysOnDisplayDimmingView.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_alwaysOnDisplayDimmingView);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_alwaysOnDisplayDimmingView) = a1;
}

char *PushToTalkView.init(conversationControlsManager:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v76 = v4;
  uint64_t v77 = v3;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_21();
  uint64_t v75 = v6 - v5;
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView;
  type metadata accessor for PushToTalkSessionDetailsView();
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v9 = v1;
  *(void *)&v1[v7] = objc_msgSend(v8, sel_init);
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___leaveLabelButtonView] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___talkLabelButtonView] = 0;
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leftMarginLayoutGuide;
  *(void *)&v9[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_rightMarginLayoutGuide;
  *(void *)&v9[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_centerContentLayoutGuide;
  *(void *)&v9[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_cancellables] = MEMORY[0x1E4FBC870];
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_alwaysOnDisplayDimmingView] = 0;
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_topDetailContainerMarginConstant;
  char v14 = self;
  id v15 = objc_msgSend(v14, sel_mainScreen);
  objc_msgSend(v15, sel_bounds);
  double v17 = v16;

  *(double *)&v9[v13] = v17 * 0.09;
  uint64_t v18 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_bottomButtonContainerMarginConstant;
  id v19 = objc_msgSend(v14, sel_mainScreen);
  objc_msgSend(v19, sel_bounds);
  double v21 = v20;

  *(double *)&v9[v18] = v21 * 0.07;
  uint64_t v22 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v73 = *(uint64_t (**)(void))(v22 + 0x6F8);
  uint64_t v74 = v22 + 1784;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_viewModel] = v73();
  Swift::String v80 = &type metadata for SymbolImageDescribers.ConversationControls;
  Swift::String v81 = (uint64_t (*)(void *))&protocol witness table for SymbolImageDescribers.ConversationControls;
  LOBYTE(aBlock[0]) = 18;
  if (one-time initialization token for pttLeaveButtonFullScreen != -1) {
    swift_once();
  }
  id v23 = objc_allocWithZone((Class)type metadata accessor for CircularButton());
  swift_bridgeObjectRetain();
  id v24 = CircularButton.init(symbol:stateConfiguration:context:)();
  uint64_t v25 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leaveButton;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leaveButton] = v24;
  objc_msgSend(v24, sel_addTarget_action_forControlEvents_, a1, sel_pttLeaveButtonTappedWithButton_, 64);
  Swift::String v81 = closure #1 in PushToTalkView.init(conversationControlsManager:);
  uint64_t v82 = 0;
  aBlock[0] = (id)MEMORY[0x1E4F143A8];
  aBlock[1] = (id)1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  Swift::String v80 = (ValueMetadata *)&block_descriptor_30;
  id v26 = _Block_copy(aBlock);
  id v27 = v24;
  objc_msgSend(v27, sel_setConfigurationUpdateHandler_, v26);
  _Block_release(v26);

  id v28 = *(void **)&v9[v25];
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x657661654C747470, 0xEE006E6F74747542, v28);
  id v29 = self;
  id v30 = v28;
  id v31 = a1;
  id v32 = (objc_class *)objc_msgSend(v29, sel_conversationKit);
  v33.super.Class isa = v32;
  uint64_t v34 = OUTLINED_FUNCTION_2_29(0x657661654CLL, 0xE500000000000000, 0x61737265766E6F43, 0xEF74694B6E6F6974, v33);
  uint64_t v36 = v35;

  outlined bridged method (mbnn) of @objc UIViewController.title.setter(v34, v36, v30, (SEL *)&selRef_setAccessibilityLabel_);
  id v71 = v31;
  uint64_t v37 = v73;
  uint64_t v38 = v73();
  id v39 = objc_allocWithZone((Class)type metadata accessor for PushToTalkTalkCircularButton());
  id v40 = PushToTalkTalkCircularButton.init(viewModel:)(v38);
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_talkButton] = v40;
  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0x426B6C6154747470, 0xED00006E6F747475, v40);
  long long v41 = v40;
  id v42 = (objc_class *)objc_msgSend(v29, sel_conversationKit);
  OUTLINED_FUNCTION_3_4();
  v43.super.Class isa = v42;
  uint64_t v48 = OUTLINED_FUNCTION_2_29(v44, v45, v46, v47, v43);
  uint64_t v50 = v49;

  outlined bridged method (mbnn) of @objc UIViewController.title.setter(v48, v50, v41, (SEL *)&selRef_setAccessibilityLabel_);
  unint64_t v51 = (objc_class *)type metadata accessor for PushToTalkView();
  v78.id receiver = v9;
  v78.super_class = v51;
  id v52 = objc_msgSendSuper2(&v78, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  Swift::String v80 = (ValueMetadata *)v51;
  aBlock[0] = v52;
  id v53 = objc_allocWithZone(MEMORY[0x1E4FB1D38]);
  id v54 = (char *)v52;
  id v72 = @nonobjc UITapGestureRecognizer.init(target:action:)(aBlock, (uint64_t)sel_openPTTApp_);
  uint64_t v70 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView;
  objc_msgSend(*(id *)(*(void *)&v54[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView]+ OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton), sel_addGestureRecognizer_, v72);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<PushToTalkViewModel.TalkButtonState>.Publisher, OS_dispatch_queue>);
  uint64_t v69 = (uint64_t)&v69;
  OUTLINED_FUNCTION_4();
  uint64_t v57 = v56;
  MEMORY[0x1F4188790](v58);
  OUTLINED_FUNCTION_61();
  uint64_t v59 = v37();
  (*(void (**)(uint64_t))(*(void *)v59 + 136))(v59);
  swift_release();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  aBlock[0] = (id)static OS_dispatch_queue.main.getter();
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v60 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v61 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v37, 1, 1, v61);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<PushToTalkViewModel.TalkButtonState>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<PushToTalkViewModel.TalkButtonState>.Publisher);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  Publisher.receive<A>(on:options:)();
  _sSo17OS_dispatch_queueC8DispatchE16SchedulerOptionsVSgWOhTm_0((uint64_t)v37, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  OUTLINED_FUNCTION_26_2();
  v62();
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<PushToTalkViewModel.TalkButtonState>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<PushToTalkViewModel.TalkButtonState>.Publisher, OS_dispatch_queue>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v48, v55);
  uint64_t v63 = &v54[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_cancellables];
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  objc_msgSend(v54, sel_addLayoutGuide_, *(void *)&v54[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leftMarginLayoutGuide]);
  objc_msgSend(v54, sel_addLayoutGuide_, *(void *)&v54[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_rightMarginLayoutGuide]);
  objc_msgSend(v54, sel_addLayoutGuide_, *(void *)&v54[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_centerContentLayoutGuide]);
  objc_msgSend(v54, sel_addSubview_, *(void *)&v54[v70]);
  id v64 = v54;
  uint64_t v65 = PushToTalkView.leaveLabelButtonView.getter();
  OUTLINED_FUNCTION_20_21((uint64_t)v65);

  uint64_t v66 = v64;
  uint64_t v67 = PushToTalkView.talkLabelButtonView.getter();
  OUTLINED_FUNCTION_20_21((uint64_t)v67);

  PushToTalkView.setupLayoutGuides()();
  PushToTalkView.setupConstraints()();

  return v66;
}

uint64_t closure #1 in PushToTalkView.init(conversationControlsManager:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationColorTransformer?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if (objc_msgSend(a1, sel_isEnabled))
  {
    if (one-time initialization token for pttButtonSymbol != -1) {
      swift_once();
    }
    uint64_t v11 = &static Colors.PTT.pttButtonSymbol;
  }
  else
  {
    if (one-time initialization token for pttButtonDisabledSymbol != -1) {
      swift_once();
    }
    uint64_t v11 = &static Colors.PTT.pttButtonDisabledSymbol;
  }
  id v12 = (id)*v11;
  UIButton.configuration.getter();
  uint64_t v13 = type metadata accessor for UIButton.Configuration();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v13))
  {
    *(void *)(swift_allocObject() + 16) = v12;
    id v14 = v12;
    UIConfigurationColorTransformer.init(_:)();
    uint64_t v15 = type metadata accessor for UIConfigurationColorTransformer();
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v15);
    UIButton.Configuration.imageColorTransformer.setter();
  }
  outlined init with copy of UIButton.Configuration?((uint64_t)v10, (uint64_t)v8);
  UIButton.configuration.setter();

  return _sSo17OS_dispatch_queueC8DispatchE16SchedulerOptionsVSgWOhTm_0((uint64_t)v10, &demangling cache variable for type metadata for UIButton.Configuration?);
}

void closure #2 in PushToTalkView.init(conversationControlsManager:)(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    PushToTalkView.updateUIForTalkButtonState(state:)(v2);
  }
}

id PushToTalkView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void PushToTalkView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView;
  type metadata accessor for PushToTalkSessionDetailsView();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___leaveLabelButtonView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit14PushToTalkView____lazy_storage___talkLabelButtonView] = 0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leftMarginLayoutGuide;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_rightMarginLayoutGuide;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_centerContentLayoutGuide;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_cancellables] = MEMORY[0x1E4FBC870];
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_alwaysOnDisplayDimmingView] = 0;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_topDetailContainerMarginConstant;
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_mainScreen);
  objc_msgSend(v7, sel_bounds);
  double v9 = v8;

  *(double *)&v0[v5] = v9 * 0.09;
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_bottomButtonContainerMarginConstant;
  id v11 = objc_msgSend(v6, sel_mainScreen);
  objc_msgSend(v11, sel_bounds);
  double v13 = v12;

  *(double *)&v0[v10] = v13 * 0.07;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall PushToTalkView.openPTTApp(_:)(UITapGestureRecognizer *a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(UITapGestureRecognizer *))(**(void **)(v1
                                                                                   + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_viewModel)
                                                                     + 160))(a1);
  if (v2)
  {
    id v6 = v2;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x270))();
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 216))(ObjectType, v4);
    swift_unknownObjectRelease();
    if (v4) {
      ConversationControlsManager.openPTTApp()();
    }
  }
}

uint64_t PushToTalkView.updateUI(call:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_channelDisplayName);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v5;

  id v7 = &selRef_trailingBarAlpha;
  id v8 = objc_msgSend(a1, sel_provider);
  id v9 = objc_msgSend(v8, sel_localizedName);

  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
  uint64_t v12 = outlined bridged method (ob) of @objc TUCallProvider.bundleIdentifier.getter(objc_msgSend(a1, sel_provider));
  id v14 = (char **)static UIImageView.appIcon(for:)(v12, v13);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v14, sel_image);

  id v16 = a1;
  id v91 = v15;
  specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:badgeImage:)(v16, v15);
  LODWORD(v86) = v17 == 0;
  uint64_t v89 = v4;
  id v90 = v17;
  uint64_t v84 = v15;
  if (v17)
  {
    uint64_t v18 = v17;
    id v87 = objc_msgSend(v17, sel_view);
    id v14 = v18;
    id v19 = objc_msgSend(v16, sel_uniqueProxyIdentifierUUID);
    id v20 = v16;
    uint64_t v21 = v11;
    uint64_t v22 = type metadata accessor for UUID();
    OUTLINED_FUNCTION_4();
    uint64_t v24 = v23;
    MEMORY[0x1F4188790](v25);
    OUTLINED_FUNCTION_21();
    id v1 = v6;
    uint64_t v28 = v27 - v26;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::Int v29 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & (unint64_t)*v14) + 0x58))(v28);
    id v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    id v7 = (char **)(v24 + 8);
    uint64_t v31 = v28;
    id v6 = v1;
    uint64_t v32 = v22;
    uint64_t v11 = v21;
    id v16 = v20;
    v30(v31, v32);
  }
  else
  {
    Swift::Int v29 = 0;
    id v87 = 0;
  }
  if (objc_msgSend(v16, sel_status) == 1)
  {
    if (objc_msgSend(v16, sel_isSendingTransmission))
    {
      swift_bridgeObjectRelease();
      id v33 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_29();
      uint64_t v34 = OUTLINED_FUNCTION_0_23(0x6E696E657473694CLL, 0xE900000000000067);
      uint64_t v11 = v35;
      OUTLINED_FUNCTION_12_30();
      char v36 = (char)v86;
LABEL_27:

      goto LABEL_28;
    }
    objc_msgSend(v16, sel_isReceivingTransmission);
    OUTLINED_FUNCTION_12_30();
    if (v41)
    {
      swift_bridgeObjectRelease();
      id v42 = objc_msgSend(v16, sel_activeRemoteParticipant);
      if (v42)
      {
        NSBundle v43 = v42;
        swift_bridgeObjectRelease();
        id v44 = v16;
        id v45 = v91;
        id v46 = v43;
        id v47 = specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:activeRemoteParticipant:badgeImage:)(v44, v46, v84);
        uint64_t v48 = v47;
        if (v47)
        {
          id v49 = v47;
          id v50 = objc_msgSend(v49, sel_view);

          id v1 = v50;
        }
        else
        {

          id v1 = 0;
        }
        Hasher.init()();
        if (v48)
        {
          uint64_t v55 = v48;
          id v56 = objc_msgSend(v44, sel_uniqueProxyIdentifierUUID);
          uint64_t v57 = type metadata accessor for UUID();
          OUTLINED_FUNCTION_4();
          uint64_t v59 = v58;
          MEMORY[0x1F4188790](v60);
          OUTLINED_FUNCTION_61();
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          Swift::UInt v61 = (*(uint64_t (**)(Swift::Int))((*MEMORY[0x1E4FBC8C8] & *v55) + 0x58))(v29);
          (*(void (**)(Swift::Int, uint64_t))(v59 + 8))(v29, v57);
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v61);
        }
        else
        {
          Hasher._combine(_:)(0);
          uint64_t v55 = 0;
        }
        id v54 = &selRef_trailingBarAlpha;
        Hasher._combine(_:)((Swift::UInt)objc_msgSend(v46, sel_hash));
        memcpy(__dst, __src, sizeof(__dst));
        Swift::Int v29 = Hasher.finalize()();
        id v62 = objc_msgSend(v46, sel_name);
        id v7 = (char **)static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v6 = v63;

        char v36 = 0;
      }
      else
      {
        id v54 = &selRef_trailingBarAlpha;
        char v36 = (char)v86;
      }
      id v14 = (char **)[v16 v54[232]];
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  id v14 = &selRef_trailingBarAlpha;
  if (!objc_msgSend(v16, sel_serviceStatus))
  {
    OUTLINED_FUNCTION_12_30();
LABEL_16:
    char v36 = (char)v86;
    uint64_t v34 = v85;
    goto LABEL_28;
  }
  id v37 = objc_msgSend(v16, sel_serviceStatus);
  id v1 = v87;
  id v7 = (char **)v89;
  char v36 = (char)v86;
  if (v37 == (id)2)
  {
    swift_bridgeObjectRelease();
    id v51 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_29();
    uint64_t v39 = 0x6961764120746F4ELL;
    uint64_t v40 = 0xED0000656C62616CLL;
    goto LABEL_18;
  }
  uint64_t v34 = v85;
  if (v37 == (id)1)
  {
    swift_bridgeObjectRelease();
    id v38 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_29();
    uint64_t v39 = 0x63656E6E6F636552;
    uint64_t v40 = 0xEC000000676E6974;
LABEL_18:
    uint64_t v52 = OUTLINED_FUNCTION_0_23(v39, v40);
LABEL_26:
    uint64_t v34 = v52;
    uint64_t v11 = v53;
    goto LABEL_27;
  }
LABEL_28:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v89 = static OS_dispatch_queue.main.getter();
  uint64_t v64 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = v64;
  *(void *)(v65 + 24) = v1;
  *(void *)(v65 + 32) = v29;
  *(unsigned char *)(v65 + 40) = v36;
  *(void *)(v65 + 48) = v7;
  *(void *)(v65 + 56) = v6;
  *(void *)(v65 + 64) = v34;
  *(void *)(v65 + 72) = v11;
  __src[4] = partial apply for specialized closure #1 in PushToTalkView.updateUI(call:);
  __src[5] = v65;
  __src[0] = MEMORY[0x1E4F143A8];
  __src[1] = 1107296256;
  __src[2] = thunk for @escaping @callee_guaranteed () -> ();
  __src[3] = &block_descriptor_7;
  uint64_t v66 = _Block_copy(__src);
  id v87 = v1;
  swift_release();
  uint64_t v67 = type metadata accessor for DispatchQoS();
  uint64_t v88 = &v83;
  OUTLINED_FUNCTION_4();
  uint64_t v69 = v68;
  MEMORY[0x1F4188790](v70);
  OUTLINED_FUNCTION_21();
  uint64_t v73 = v72 - v71;
  static DispatchQoS.unspecified.getter();
  uint64_t v74 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v86 = &v83;
  OUTLINED_FUNCTION_4();
  uint64_t v76 = v75;
  MEMORY[0x1F4188790](v77);
  OUTLINED_FUNCTION_21();
  uint64_t v80 = v79 - v78;
  __src[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  Swift::String v81 = (void *)v89;
  MEMORY[0x1C8773BA0](0, v73, v80, v66);
  _Block_release(v66);

  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v80, v74);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v73, v67);
}

void specialized closure #1 in PushToTalkView.updateUI(call:)(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = a1 + 16;
  swift_beginAccess();
  uint64_t v16 = MEMORY[0x1C8776240](v15);
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(a2, a3, a4 & 1, a5, a6, a7, a8);
  }
}

Swift::Void __swiftcall PushToTalkView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v15.id receiver = v1;
  v15.super_class = (Class)type metadata accessor for PushToTalkView();
  objc_msgSendSuper2(&v15, sel_traitCollectionDidChange_, isa);
  if (isa) {
    id v3 = [(objc_class *)isa _backlightLuminance];
  }
  else {
    id v3 = 0;
  }
  id v4 = objc_msgSend(v1, sel_traitCollection);
  id v5 = objc_msgSend(v4, sel__backlightLuminance);

  if (!isa || v3 != v5)
  {
    id v6 = objc_msgSend(v1, sel_traitCollection);
    id v7 = objc_msgSend(v6, sel__backlightLuminance);

    if (v7 == (id)1)
    {
      objc_msgSend(v1, sel_bounds);
      id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, v8, v9, v10, v11);
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithWhite_alpha_, 0.0, 0.75);
      objc_msgSend(v12, sel_setBackgroundColor_, v13);

      objc_msgSend(v1, sel_addSubview_, v12);
      id v14 = v12;
      PushToTalkView.alwaysOnDisplayDimmingView.setter((uint64_t)v12);
      objc_msgSend(v1, sel_bringSubviewToFront_, *(void *)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView]);
    }
    else
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_alwaysOnDisplayDimmingView], sel_removeFromSuperview);
      PushToTalkView.alwaysOnDisplayDimmingView.setter(0);
    }
  }
}

void PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v14 = a3 & 1;
  uint64_t v15 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v7
                                                                   + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView))
                             + 0xA8))();
  uint64_t v29 = a2;
  BOOL v18 = (a3 & 1) == 0 && v15 == a2;
  if (v16) {
    BOOL v19 = v14;
  }
  else {
    BOOL v19 = v18;
  }
  id v30 = self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  BOOL v20 = !v19;
  double v21 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
  uint64_t v22 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v22;
  *(unsigned char *)(v23 + 24) = v20;
  *(void *)(v23 + 32) = a4;
  *(void *)(v23 + 40) = a5;
  *(void *)(v23 + 48) = a6;
  *(void *)(v23 + 56) = a7;
  char v36 = partial apply for closure #1 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:);
  uint64_t v37 = v23;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v33 = 1107296256;
  uint64_t v34 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v35 = &block_descriptor_29_2;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v25 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v25;
  *(unsigned char *)(v26 + 24) = v20;
  *(void *)(v26 + 32) = a1;
  *(void *)(v26 + 40) = v29;
  *(unsigned char *)(v26 + 48) = v14;
  *(void *)(v26 + 56) = a4;
  *(void *)(v26 + 64) = a5;
  *(void *)(v26 + 72) = a6;
  *(void *)(v26 + 80) = a7;
  char v36 = partial apply for closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:);
  uint64_t v37 = v26;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v33 = 1107296256;
  uint64_t v34 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v35 = &block_descriptor_36;
  uint64_t v27 = _Block_copy(&aBlock);
  id v28 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v30, sel_animateWithDuration_animations_completion_, v24, v27, v21);
  _Block_release(v27);
  _Block_release(v24);
}

void closure #1 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a1 + 16;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1C8776240](v11);
  if (!v12) {
    return;
  }
  id v13 = (char *)v12;
  uint64_t v43 = a6;
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView;
  uint64_t v15 = *(void **)(v12 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView);
  char v16 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v17 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v15) + 0xA8);
  BOOL v18 = v15;
  v17();
  LOBYTE(v17) = v19;

  if (v17 & 1) == 0 && (a2)
  {
    BOOL v20 = (void *)(*(uint64_t (**)(void))((*v16 & **(void **)&v13[v14]) + 0x90))();
    if (v20)
    {
      double v21 = v20;
      objc_msgSend(v20, sel_setAlpha_, 0.0);
    }
  }
  uint64_t v22 = (void *)(*(uint64_t (**)(void))((*v16 & **(void **)&v13[v14]) + 0xC0))();
  id v23 = objc_msgSend(v22, sel_text);

  if (v23)
  {

    uint64_t v24 = (void *)(*(uint64_t (**)(void))((*v16 & **(void **)&v13[v14]) + 0xC0))();
    uint64_t v25 = outlined bridged method (ob) of @objc UILabel.text.getter(v24);
    if (!v26)
    {
LABEL_13:
      uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))((*v16 & **(void **)&v13[v14]) + 0xC0))(v25);
      objc_msgSend(v29, sel_setAlpha_, 0.0);

      goto LABEL_15;
    }
    if (v25 != a3 || v26 != a4)
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v25 = swift_bridgeObjectRelease();
      if (v28) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
LABEL_15:
  id v30 = *(void **)(*(void *)&v13[v14]
                   + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton);
  uint64_t v31 = *(void (**)(void))((*v16 & *v30) + 0x70);
  uint64_t v32 = v30;
  v31();
  uint64_t v34 = v33;

  swift_bridgeObjectRelease();
  if (v34)
  {
    uint64_t v35 = *(void **)(*(void *)&v13[v14]
                     + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton);
    char v36 = *(uint64_t (**)(void))((*v16 & *v35) + 0x70);
    uint64_t v37 = v35;
    uint64_t v38 = v36();
    uint64_t v40 = v39;

    if (!v40) {
      goto LABEL_22;
    }
    if (v38 == a5 && v40 == v43)
    {

      swift_bridgeObjectRelease();
      return;
    }
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0) {
LABEL_22:
    }
      objc_msgSend(*(id *)(*(void *)&v13[v14] + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton), sel_setAlpha_, 0.0, v43);
  }
}

void closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = a2 + 16;
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x1C8776240](v16);
  if (v17)
  {
    BOOL v18 = (char *)v17;
    char v19 = &OBJC_PROTOCOL___UIScrollViewDelegate;
    BOOL v20 = (void *)MEMORY[0x1E4FBC8C8];
    if (a3)
    {
      unsigned int v41 = a6 & 1;
      uint64_t v21 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView;
      uint64_t v22 = *(void **)(v17 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView);
      id v23 = *(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v22) + 0x98);
      id v24 = a4;
      uint64_t v25 = v22;
      v23(a4);
      BOOL v20 = (void *)MEMORY[0x1E4FBC8C8];

      uint64_t v26 = *(void **)&v18[v21];
      uint64_t v27 = *(void (**)(uint64_t, void))((*v20 & *v26) + 0xB0);
      char v28 = v26;
      v27(a5, v41);

      uint64_t v29 = *(void **)&v18[v21];
      char v19 = &OBJC_PROTOCOL___UIScrollViewDelegate;
      id v30 = (void *)(*(uint64_t (**)(void))((*v20 & *v29) + 0x90))();
      if (v30)
      {
        uint64_t v31 = v30;
        objc_msgSend(v30, sel_setAlpha_, 0.0);
      }
    }
    opt_class_meths = v19[23].opt_class_meths;
    uint64_t v33 = (void *)(*(uint64_t (**)(void))((*v20 & **(void **)((char *)opt_class_meths + (void)v18)) + 0xC0))();
    outlined bridged method (mbgnn) of @objc UILabel.text.setter(a7, a8, v33);

    uint64_t v34 = *(void **)(*(void *)((char *)opt_class_meths + (void)v18)
                     + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))((*v20 & *v34) + 0x78);
    char v36 = v34;
    swift_bridgeObjectRetain();
    v35(a9, a10);

    uint64_t v37 = self;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    double v38 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
    uint64_t v39 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:);
    aBlock[5] = v39;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    id aBlock[3] = &block_descriptor_40_0;
    uint64_t v40 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v37, sel_animateWithDuration_animations_, v40, v38);
    _Block_release(v40);
  }
}

void closure #1 in closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    id v3 = (char *)v2;
    uint64_t v4 = OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView;
    id v5 = (void *)MEMORY[0x1E4FBC8C8];
    id v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v2
                                                                            + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView))
                                      + 0x90))();
    if (v6)
    {
      uint64_t v7 = v6;
      objc_msgSend(v6, sel_setAlpha_, 1.0);
    }
    double v8 = (void *)(*(uint64_t (**)(void))((*v5 & **(void **)&v3[v4]) + 0xC0))();
    objc_msgSend(v8, sel_setAlpha_, 1.0);

    objc_msgSend(*(id *)(*(void *)&v3[v4] + OBJC_IVAR____TtC15ConversationKit28PushToTalkSessionDetailsView_disclosureButton), sel_setAlpha_, 1.0);
  }
}

void PushToTalkView.updateUIForTalkButtonState(state:)(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t v2 = PushToTalkView.talkLabelButtonView.getter();
  id v3 = *(id *)&v2[OBJC_IVAR____TtC15ConversationKit25PushToTalkLabelButtonView_label];

  if (v1 == 3)
  {
    if (one-time initialization token for buttonLabelDisabled != -1) {
      swift_once();
    }
    uint64_t v4 = &static Colors.PTT.buttonLabelDisabled;
  }
  else
  {
    if (one-time initialization token for buttonLabel != -1) {
      swift_once();
    }
    uint64_t v4 = &static Colors.PTT.buttonLabel;
  }
  objc_msgSend(v3, sel_setTextColor_, *v4);

  id v5 = self;
  id v6 = (objc_class *)objc_msgSend(v5, sel_conversationKit);
  OUTLINED_FUNCTION_3_4();
  v7.super.Class isa = v6;
  uint64_t v12 = OUTLINED_FUNCTION_2_29(v8, v9, v10, v11, v7);
  uint64_t v14 = v13;

  if ((v1 & 0xFE) == 2)
  {
    uint64_t v15 = PushToTalkView.leaveLabelButtonView.getter();
    id v16 = *(id *)&v15[OBJC_IVAR____TtC15ConversationKit25PushToTalkLabelButtonView_button];

    objc_msgSend(v16, sel_setEnabled_, 1, 0xE000000000000000);
    uint64_t v17 = PushToTalkView.leaveLabelButtonView.getter();
    id v18 = *(id *)&v17[OBJC_IVAR____TtC15ConversationKit25PushToTalkLabelButtonView_label];

    if (one-time initialization token for buttonLabel != -1) {
      swift_once();
    }
    objc_msgSend(v18, sel_setTextColor_, static Colors.PTT.buttonLabel);
    goto LABEL_16;
  }
  char v19 = PushToTalkView.leaveLabelButtonView.getter();
  id v20 = *(id *)&v19[OBJC_IVAR____TtC15ConversationKit25PushToTalkLabelButtonView_button];

  objc_msgSend(v20, sel_setEnabled_, 0, 0xE000000000000000);
  uint64_t v21 = PushToTalkView.leaveLabelButtonView.getter();
  id v22 = *(id *)&v21[OBJC_IVAR____TtC15ConversationKit25PushToTalkLabelButtonView_label];

  if (one-time initialization token for buttonLabelDisabled != -1) {
    swift_once();
  }
  objc_msgSend(v22, sel_setTextColor_, static Colors.PTT.buttonLabelDisabled);

  if (v1)
  {
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v5, sel_conversationKit);
    OUTLINED_FUNCTION_3_4();
    v23.super.Class isa = (Class)v18;
    uint64_t v12 = OUTLINED_FUNCTION_2_29(v24, v25, v26, v27, v23);
    uint64_t v14 = v28;
LABEL_16:
  }
  uint64_t v29 = PushToTalkView.talkLabelButtonView.getter();
  id v30 = *(id *)&v29[OBJC_IVAR____TtC15ConversationKit25PushToTalkLabelButtonView_label];

  outlined bridged method (mbnn) of @objc UILabel.text.setter(v12, v14, v30);
}

void PushToTalkView.setupLayoutGuides()()
{
  int v1 = v0;
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_currentDevice);
  id v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

  if (v4 == (id)1
    || (id v5 = objc_msgSend(v2, sel_currentDevice),
        id v6 = objc_msgSend(v5, sel_userInterfaceIdiom),
        v5,
        v6 == (id)5))
  {
    unint64_t v7 = PushToTalkView.iPadLayoutConstraints()();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t v7 = OUTLINED_FUNCTION_3_0();
    *(_OWORD *)(v7 + 16) = xmmword_1C3769830;
    id v8 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leftMarginLayoutGuide], sel_widthAnchor);
    id v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 20.0);

    *(void *)(v7 + 32) = v9;
    specialized Array._endMutation()();
  }
  unint64_t v68 = v7;
  uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leftMarginLayoutGuide];
  id v11 = objc_msgSend(v10, sel_topAnchor);
  id v12 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v13 = objc_msgSend(v12, sel_topAnchor);

  id v14 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v13);
  id v15 = objc_msgSend(v10, sel_bottomAnchor);
  id v16 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v17 = objc_msgSend(v16, sel_bottomAnchor);

  id v18 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v17);
  id v19 = objc_msgSend(v10, sel_leadingAnchor);
  id v20 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v21 = objc_msgSend(v20, sel_leadingAnchor);

  id v22 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v21);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v23, 3))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v23 + 3, 1);
    specialized Array._endMutation()();
    id v14 = v14;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_10_32();
    if (!v24) {
      goto LABEL_9;
    }
  }
  OUTLINED_FUNCTION_6_3();
LABEL_9:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v25 = v18;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_10_32();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v26 = v22;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_10_32();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v27 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_centerContentLayoutGuide];
  id v28 = objc_msgSend(v27, sel_topAnchor);
  id v29 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v30 = objc_msgSend(v29, sel_topAnchor);

  id v31 = objc_msgSend(v28, sel_constraintEqualToAnchor_constant_, v30, *(double *)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_topDetailContainerMarginConstant]);
  id v32 = objc_msgSend(v27, sel_leadingAnchor);
  id v33 = objc_msgSend(v10, sel_trailingAnchor);
  id v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v33);

  id v35 = objc_msgSend(v27, sel_trailingAnchor);
  char v36 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_rightMarginLayoutGuide];
  id v37 = objc_msgSend(v36, sel_leadingAnchor);
  id v38 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v37);

  id v39 = objc_msgSend(v27, sel_bottomAnchor);
  id v40 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v41 = objc_msgSend(v40, sel_bottomAnchor);

  id v42 = objc_msgSend(v39, sel_constraintEqualToAnchor_constant_, v41, -*(double *)&v1[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_bottomButtonContainerMarginConstant]);
  if (v68 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v43, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v43 + 4, 1);
    specialized Array._endMutation()();
    id v31 = v31;
    MEMORY[0x1C87733A0]();
    OUTLINED_FUNCTION_6_46();
    if (!v24) {
      goto LABEL_17;
    }
  }
  OUTLINED_FUNCTION_6_3();
LABEL_17:
  OUTLINED_FUNCTION_14_27();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v44 = v34;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_6_46();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  OUTLINED_FUNCTION_14_27();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v45 = v38;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_6_46();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  OUTLINED_FUNCTION_14_27();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v46 = v42;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_6_46();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  OUTLINED_FUNCTION_14_27();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v47 = objc_msgSend(v36, sel_topAnchor);
  id v48 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v49 = objc_msgSend(v48, sel_topAnchor);

  id v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
  id v51 = objc_msgSend(v36, sel_bottomAnchor);
  id v52 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v53 = objc_msgSend(v52, sel_bottomAnchor);

  id v54 = objc_msgSend(v51, sel_constraintEqualToAnchor_, v53);
  id v55 = objc_msgSend(v36, sel_trailingAnchor);
  id v56 = objc_msgSend(v1, sel_layoutMarginsGuide);
  id v57 = objc_msgSend(v56, sel_trailingAnchor);

  id v58 = objc_msgSend(v55, sel_constraintEqualToAnchor_, v57);
  id v59 = objc_msgSend(v36, sel_widthAnchor);
  id v60 = objc_msgSend(v10, sel_widthAnchor);
  id v61 = objc_msgSend(v59, sel_constraintEqualToAnchor_, v60);

  if (v68 >> 62)
  {
    swift_bridgeObjectRetain();
    id v62 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v62 = *(char **)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v62, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v62 + 4, 1);
    specialized Array._endMutation()();
    id v62 = (char *)v50;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_27;
    }
  }
  OUTLINED_FUNCTION_6_3();
LABEL_27:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v63 = v54;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_9_35();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v64 = v58;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_9_35();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v65 = v61;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_9_35();
  if (v24) {
    OUTLINED_FUNCTION_6_3();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v66 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v66, sel_activateConstraints_, isa);
}

uint64_t PushToTalkView.iPadLayoutConstraints()()
{
  id v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_leftMarginLayoutGuide], sel_widthAnchor);
  id v2 = objc_msgSend(v1, sel_constraintGreaterThanOrEqualToConstant_, 20.0);

  LODWORD(v3) = 1148829696;
  objc_msgSend(v2, sel_setPriority_, v3);
  id v4 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit14PushToTalkView_centerContentLayoutGuide];
  id v5 = objc_msgSend(v4, sel_widthAnchor);
  id v6 = objc_msgSend(v5, sel_constraintLessThanOrEqualToConstant_, 375.0);

  LODWORD(v7) = 1148846080;
  objc_msgSend(v6, sel_setPriority_, v7);
  id v8 = objc_msgSend(v4, sel_widthAnchor);
  id v9 = objc_msgSend(v0, sel_widthAnchor);
  id v10 = objc_msgSend(v8, sel_constraintGreaterThanOrEqualToAnchor_constant_, v9, -40.0);

  LODWORD(v11) = 1144750080;
  objc_msgSend(v10, sel_setPriority_, v11);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1C3769F40;
  *(void *)(v12 + 32) = v2;
  *(void *)(v12 + 40) = v6;
  *(void *)(v12 + 48) = v10;
  uint64_t v14 = v12;
  specialized Array._endMutation()();
  return v14;
}

void PushToTalkView.setupConstraints()()
{
  uint64_t v1 = v0;
  id v2 = *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_pttSessionDetailsView);
  double v3 = PushToTalkView.leaveLabelButtonView.getter();
  id v4 = PushToTalkView.talkLabelButtonView.getter();

  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769F40;
  id v6 = objc_msgSend(v2, sel_topAnchor);
  double v7 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit14PushToTalkView_centerContentLayoutGuide);
  id v8 = objc_msgSend(v7, sel_topAnchor);
  id v9 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v8);

  *(void *)(v5 + 32) = v9;
  id v10 = objc_msgSend(v2, sel_leadingAnchor);
  id v11 = objc_msgSend(v7, sel_leadingAnchor);
  id v12 = objc_msgSend(v10, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v11);

  *(void *)(v5 + 40) = v12;
  id v13 = objc_msgSend(v2, sel_trailingAnchor);
  id v14 = objc_msgSend(v7, sel_trailingAnchor);
  id v15 = objc_msgSend(v13, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v14);

  *(void *)(v5 + 48) = v15;
  uint64_t v40 = v5;
  specialized Array._endMutation()();
  unint64_t v16 = v5;
  id v17 = PushToTalkView.leaveLabelButtonView.getter();
  id v18 = objc_msgSend(v17, sel_leadingAnchor);

  id v19 = objc_msgSend(v7, sel_leadingAnchor);
  id v38 = objc_msgSend(v18, sel_constraintEqualToAnchor_constant_, v19, 15.0);

  id v20 = PushToTalkView.leaveLabelButtonView.getter();
  id v21 = objc_msgSend(v20, sel_bottomAnchor);

  id v22 = objc_msgSend(v7, sel_bottomAnchor);
  id v37 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

  uint64_t v23 = PushToTalkView.talkLabelButtonView.getter();
  id v24 = objc_msgSend(v23, sel_trailingAnchor);

  id v25 = objc_msgSend(v7, sel_trailingAnchor);
  id v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_constant_, v25, -15.0);

  uint64_t v27 = PushToTalkView.talkLabelButtonView.getter();
  id v28 = objc_msgSend(v27, sel_bottomAnchor);

  id v29 = objc_msgSend(v7, sel_bottomAnchor);
  id v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v29);

  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v31, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v31 + 4, 1);
    specialized Array._endMutation()();
    id v29 = v38;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_5;
    }
  }
  OUTLINED_FUNCTION_1_4();
LABEL_5:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v32 = v37;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    OUTLINED_FUNCTION_1_4();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v33 = v26;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_9_35();
  if (v34) {
    OUTLINED_FUNCTION_1_4();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v35 = v30;
  MEMORY[0x1C87733A0]();
  OUTLINED_FUNCTION_9_35();
  if (v34) {
    OUTLINED_FUNCTION_1_4();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  char v36 = self;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_activateConstraints_, isa);
}

id PushToTalkView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void PushToTalkView.init(frame:)()
{
}

id PushToTalkView.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushToTalkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t type metadata accessor for PushToTalkView()
{
  return self;
}

uint64_t sub_1C3166CBC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in PushToTalkView.init(conversationControlsManager:)(unsigned __int8 *a1)
{
  closure #2 in PushToTalkView.init(conversationControlsManager:)(a1, v1);
}

void outlined bridged method (mbnn) of @objc CNMutableContact.firstName.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

id specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:activeRemoteParticipant:badgeImage:)(void *a1, void *a2, void *a3)
{
  if (objc_msgSend(a1, sel_isPTT))
  {
    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_init);
    id v7 = objc_msgSend(a2, sel_name);
    if (!v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v7 = (id)MEMORY[0x1C87730B0](v8);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v6, sel_setNickname_, v7);

    id v49 = a1;
    id v9 = objc_msgSend(self, sel_tu_contactStoreConfigurationForCall_, a1);
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v9);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = OUTLINED_FUNCTION_3_0();
    *(_OWORD *)(v11 + 16) = xmmword_1C3769830;
    *(void *)(v11 + 32) = v6;
    uint64_t v54 = v11;
    specialized Array._endMutation()();
    id v12 = self;
    id v52 = a3;
    id v13 = v10;
    id v14 = v6;
    id v15 = objc_msgSend(v12, sel_clearColor);
    id v16 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
    ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v13, v54, a3, v15);
    id v18 = v17;
    uint64_t v19 = type metadata accessor for URL();
    id v51 = v47;
    OUTLINED_FUNCTION_4();
    uint64_t v21 = v20;
    uint64_t v23 = *(void *)(v22 + 64);
    MEMORY[0x1F4188790](v24);
    unint64_t v25 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v48 = (char *)v47 - v25;
    id v26 = v18;
    id v27 = objc_msgSend(a2, sel_imageURL);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    MEMORY[0x1F4188790](v28 - 8);
    OUTLINED_FUNCTION_16_0();
    id v53 = v14;
    uint64_t v50 = v30;
    if (v27)
    {
      MEMORY[0x1F4188790](v29);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v47[1] = v21;
      uint64_t v31 = *(void (**)(void *, char *, uint64_t))(v21 + 32);
      v31(v18, (char *)v47 - v25, v19);
      OUTLINED_FUNCTION_17_24();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19) != 1)
      {
        v31(v48, (char *)v18, v19);
        uint64_t v32 = Data.init(contentsOf:options:)();
        unint64_t v34 = v33;
        id v35 = v49;
        char v36 = &selRef_trailingBarAlpha;
        OUTLINED_FUNCTION_26_2();
        v37();
LABEL_10:
        id v38 = [a2 v36[234]];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        outlined copy of Data?(v32, v34);
        id v42 = objc_msgSend(v26, sel_contacts);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v43 = objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
        id v44 = @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(v39, v41, v32, v34);
        id v45 = objc_msgSend(v26, sel_avatarViewController);

        objc_msgSend(v45, sel_updateViewWithGroupIdentity_, v44);
        outlined consume of Data?(v32, v34);

        return v26;
      }
    }
    else
    {
      OUTLINED_FUNCTION_16_21();
    }
    _sSo17OS_dispatch_queueC8DispatchE16SchedulerOptionsVSgWOhTm_0((uint64_t)v18, &demangling cache variable for type metadata for URL?);
    unint64_t v34 = 0xF000000000000000;
    id v35 = v49;
    uint64_t v32 = 0;
    char v36 = &selRef_trailingBarAlpha;
    goto LABEL_10;
  }

  return 0;
}

void specialized ConversationControlsBadgingAvatarViewController.__allocating_init(pttCall:badgeImage:)(void *a1, void *a2)
{
  lazy protocol witness table accessor for type TUCall and conformance TUCall();
  if (!objc_msgSend(a1, sel_isPTT) || (self, (uint64_t v4 = swift_dynamicCastObjCClass()) == 0))
  {

    return;
  }
  uint64_t v5 = (void *)v4;
  swift_unknownObjectRetain();
  id v6 = objc_msgSend(v5, sel_channelDisplayName);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  uint64_t v76 = v7;
  uint64_t v77 = v9;
  uint64_t v75 = v9;
  uint64_t v10 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  uint64_t v16 = v15 - v14;
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v17 = StringProtocol.components(separatedBy:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  uint64_t v18 = specialized Collection.prefix(_:)(2, v17);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  unint64_t v24 = v23;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_init);
  uint64_t v26 = (v24 >> 1) - v22;
  if (!__OFSUB__(v24 >> 1, v22))
  {
    id v27 = v25;
    uint64_t v73 = v18;
    uint64_t v74 = v7;
    if (v26 <= 0)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0xE000000000000000;
    }
    else
    {
      if (v22 > 0 || v24 < 2) {
        goto LABEL_28;
      }
      uint64_t v29 = *v20;
      uint64_t v30 = v20[1];
      swift_bridgeObjectRetain();
    }
    outlined bridged method (mbnn) of @objc UIViewController.title.setter(v29, v30, v27, (SEL *)&selRef_setFirstName_);
    if (v26 < 2)
    {
      uint64_t v33 = 0;
      uint64_t v32 = 0xE000000000000000;
    }
    else
    {
      if (v22 > 1 || v24 < 4) {
        goto LABEL_29;
      }
      uint64_t v33 = v20[2];
      uint64_t v32 = v20[3];
      swift_bridgeObjectRetain();
    }
    outlined bridged method (mbnn) of @objc CNMutableContact.lastName.setter(v33, v32, v27);
    id v34 = objc_msgSend(self, sel_tu_contactStoreConfigurationForCall_, a1);
    id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_initWithConfiguration_, v34);

    v66[1] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v36 = OUTLINED_FUNCTION_3_0();
    long long v71 = xmmword_1C3769830;
    *(_OWORD *)(v36 + 16) = xmmword_1C3769830;
    *(void *)(v36 + 32) = v27;
    uint64_t v76 = v36;
    specialized Array._endMutation()();
    id v37 = self;
    id v72 = a2;
    id v38 = v35;
    id v70 = v27;
    id v39 = objc_msgSend(v37, sel_clearColor);
    id v40 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsBadgingAvatarViewController());
    id v67 = v38;
    ConversationControlsBadgingAvatarViewController.init(contactStore:contacts:badgeImage:badgeBackgroundColor:)(v38, v76, a2, v39);
    id v42 = v41;
    uint64_t v43 = type metadata accessor for URL();
    uint64_t v69 = v66;
    OUTLINED_FUNCTION_4();
    uint64_t v45 = v44;
    uint64_t v47 = *(void *)(v46 + 64);
    MEMORY[0x1F4188790](v48);
    unint64_t v49 = (v47 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v50 = v42;
    id v51 = objc_msgSend(v5, sel_imageURL);
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    unint64_t v68 = v66;
    MEMORY[0x1F4188790](v52 - 8);
    OUTLINED_FUNCTION_16_0();
    if (v51)
    {
      MEMORY[0x1F4188790](v53);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v66[0] = v45;
      uint64_t v54 = *(void (**)(void *, char *, uint64_t))(v45 + 32);
      v54(v42, (char *)v66 - v49, v43);
      OUTLINED_FUNCTION_17_24();
      if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43) != 1)
      {
        v54((char *)v66 - v49, (char *)v42, v43);
        uint64_t v55 = Data.init(contentsOf:options:)();
        unint64_t v57 = v56;
        uint64_t v58 = v75;
        id v59 = v67;
        OUTLINED_FUNCTION_26_2();
        v60();
LABEL_26:
        uint64_t v61 = OUTLINED_FUNCTION_3_0();
        *(_OWORD *)(v61 + 16) = v71;
        id v62 = v70;
        *(void *)(v61 + 32) = v70;
        uint64_t v76 = v61;
        specialized Array._endMutation()();
        objc_allocWithZone(MEMORY[0x1E4F1BBC0]);
        id v63 = v62;
        outlined copy of Data?(v55, v57);
        id v64 = @nonobjc CNGroupIdentity.init(groupWithName:photo:contacts:)(v74, v58, v55, v57);
        id v65 = objc_msgSend(v50, sel_avatarViewController);

        objc_msgSend(v65, sel_updateViewWithGroupIdentity_, v64);
        outlined consume of Data?(v55, v57);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      OUTLINED_FUNCTION_16_21();
    }
    _sSo17OS_dispatch_queueC8DispatchE16SchedulerOptionsVSgWOhTm_0((uint64_t)v42, &demangling cache variable for type metadata for URL?);
    unint64_t v57 = 0xF000000000000000;
    id v59 = v67;
    uint64_t v55 = 0;
    uint64_t v58 = v75;
    goto LABEL_26;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t sub_1C31677D0()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in PushToTalkView.updateUI(call:)()
{
  specialized closure #1 in PushToTalkView.updateUI(call:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t method lookup function for PushToTalkView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkView);
}

uint64_t dispatch thunk of PushToTalkView.__allocating_init(conversationControlsManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of PushToTalkView.openPTTApp(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of PushToTalkView.updateUI(call:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t sub_1C31678DC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)()
{
  closure #1 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1C3167938()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(uint64_t a1)
{
  closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

void partial apply for closure #1 in closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)()
{
  closure #1 in closure #2 in PushToTalkView.updatePTTSessionDetails(avatar:avatarViewHash:title:subtitle:)(v0);
}

uint64_t sub_1C31679CC()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in PushToTalkView.init(conversationControlsManager:)()
{
  return *(id *)(v0 + 16);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18NSAttributedStringCG_So6CGSizeVs5NeverOTg50113_s15ConversationKit23DurationLabelControllerC04CallC9Formatter33_10D348B228899EF7BB6154999D4B47C3LLV010makeWidestv21Size5using7fittingSo6f23VSo7UILabelC_AKtFAKSo18dE6CXEfU_So7UILabelCAJTf1cn_n(unint64_t a1, void *a2, double a3, double a4)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v8)
  {
    while (1)
    {
      uint64_t v18 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v8 < 0) {
        break;
      }
      uint64_t v9 = 0;
      while (v8 != v9)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x1C87744F0](v9, a1);
        }
        else {
          id v10 = *(id *)(a1 + 8 * v9 + 32);
        }
        uint64_t v11 = v10;
        objc_msgSend(a2, sel_setAttributedText_, v10);
        objc_msgSend(a2, sel_sizeThatFits_, a3, a4);
        uint64_t v13 = v12;
        uint64_t v15 = v14;

        unint64_t v16 = *(void *)(v18 + 16);
        if (v16 >= *(void *)(v18 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v9;
        *(void *)(v18 + 16) = v16 + 1;
        uint64_t v17 = v18 + 16 * v16;
        *(void *)(v17 + 32) = v13;
        *(void *)(v17 + 40) = v15;
        if (v8 == v9) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
  }
}

void DurationLabelController.__allocating_init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)()
{
}

{
  uint64_t v0;
  void (*v1)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_31();
  uint64_t v21 = v1;
  double v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = *(void *)(v12 + 24);
  uint64_t v14 = *(void *)(v12 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v12, v15);
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v21(v18, v11, v9, v7, v5, v3, v0, v15, v14);
  __swift_destroy_boxed_opaque_existential_1(v13);
  OUTLINED_FUNCTION_28();
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  double v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id DurationLabelController.CallDurationFormatter.attributedString(from:)(double a1)
{
  id v2 = DurationLabelController.CallDurationFormatter.string(from:)(a1);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (uint64_t)v2;
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(v1 + 40);
  objc_allocWithZone(MEMORY[0x1E4F28B10]);
  swift_bridgeObjectRetain();
  return @nonobjc NSAttributedString.init(string:attributes:)(v4, v5, v6);
}

id DurationLabelController.CallDurationFormatter.string(from:)(double a1)
{
  if (a1 < 0.0) {
    return 0;
  }
  if (*(double *)(v1 + 8) <= a1)
  {
    if (*(double *)(v1 + 24) <= a1) {
      id v5 = objc_msgSend(*(id *)(v1 + 32), sel_stringFromTimeInterval_);
    }
    else {
      id v5 = objc_msgSend(*(id *)(v1 + 16), sel_stringFromTimeInterval_);
    }
    id v6 = v5;
    if (v6)
    {
      uint64_t v7 = v6;
      id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v2;
    }
    return 0;
  }
  id v2 = objc_msgSend(*(id *)v1, sel_stringFromTimeInterval_);
  if (v2)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    String.remove(at:)();
    swift_bridgeObjectRelease();
    return (id)v4;
  }
  return v2;
}

double DurationLabelController.CallDurationFormatter.makeWidestLabelSize(using:fitting:)(void *a1, double a2, double a3)
{
  id v6 = objc_msgSend(a1, sel_attributedText);
  uint64_t v7 = outlined bridged method (pb) of @objc UILabel.text.getter(a1);
  uint64_t v9 = v8;
  unint64_t v10 = DurationLabelController.CallDurationFormatter.templateStrings()();
  id v11 = a1;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18NSAttributedStringCG_So6CGSizeVs5NeverOTg50113_s15ConversationKit23DurationLabelControllerC04CallC9Formatter33_10D348B228899EF7BB6154999D4B47C3LLV010makeWidestv21Size5using7fittingSo6f23VSo7UILabelC_AKtFAKSo18dE6CXEfU_So7UILabelCAJTf1cn_n(v10, v11, a2, a3);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    double v15 = *(double *)(v13 + 32);
    uint64_t v16 = v14 - 1;
    if (v16)
    {
      uint64_t v17 = v13 + 56;
      double v18 = *(double *)(v13 + 32);
      do
      {
        if (v18 < *(double *)(v17 - 8))
        {
          double v15 = *(double *)(v17 - 8);
          double v18 = v15;
        }
        v17 += 16;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    double v15 = 0.0;
  }
  swift_bridgeObjectRelease();
  $defer #1 () in DurationLabelController.CallDurationFormatter.makeWidestLabelSize(using:fitting:)((uint64_t)v6, v11, v7, v9);

  swift_bridgeObjectRelease();
  return v15;
}

void $defer #1 () in DurationLabelController.CallDurationFormatter.makeWidestLabelSize(using:fitting:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    objc_msgSend(a2, sel_setAttributedText_, a1);
  }
  else
  {
    if (a4) {
      uint64_t v5 = MEMORY[0x1C87730B0](a3, a4);
    }
    else {
      uint64_t v5 = 0;
    }
    id v6 = (id)v5;
    objc_msgSend(a2, sel_setText_);
  }
}

uint64_t DurationLabelController.CallDurationFormatter.templateStrings()()
{
  id v0 = DurationLabelController.CallDurationFormatter.attributedString(from:)(284.0);
  id v1 = DurationLabelController.CallDurationFormatter.attributedString(from:)(3420.0);
  id v2 = DurationLabelController.CallDurationFormatter.attributedString(from:)(61.0);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v0)
  {
    id v3 = v0;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (v1)
  {
    id v4 = v1;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (v2)
  {
    id v5 = v2;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }

  return v7;
}

id DurationLabelController.label.getter()
{
  return *(id *)(v0 + 16);
}

void DurationLabelController.duration.didset(double a1)
{
  if (*(double *)(v1 + 72) != a1) {
    DurationLabelController.updateDurationLabel()();
  }
}

void DurationLabelController.duration.setter(double a1)
{
  double v2 = *(double *)(v1 + 72);
  *(double *)(v1 + 72) = a1;
  DurationLabelController.duration.didset(v2);
}

uint64_t key path getter for DurationLabelController.voiceOverUpdateHandler : DurationLabelController@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for DurationLabelController.voiceOverUpdateHandler : DurationLabelController(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)a2 + 200);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return v7(v6, v5);
}

uint64_t DurationLabelController.voiceOverUpdateHandler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 144);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  return v1;
}

uint64_t DurationLabelController.voiceOverUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 144);
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
}

uint64_t (*DurationLabelController.voiceOverUpdateHandler.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

void DurationLabelController.init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)()
{
}

uint64_t DurationLabelController.deinit()
{
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 120);
  swift_bridgeObjectRelease();

  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 144));
  return v0;
}

uint64_t DurationLabelController.__deallocating_deinit()
{
  DurationLabelController.deinit();
  return swift_deallocClassInstance();
}

CGSize __swiftcall DurationLabelController.makeWidestLabelSize(fitting:)(CGSize fitting)
{
  uint64_t v3 = v1;
  double height = fitting.height;
  double width = fitting.width;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  char v7 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v2 = static OS_dispatch_queue.main.getter();
  uint64_t v8 = OUTLINED_FUNCTION_2_52();
  v9(v8);
  _dispatchPreconditionTest(_:)();
  uint64_t v10 = OUTLINED_FUNCTION_1_18();
  v11(v10);
  if (v7) {
    double v12 = DurationLabelController.CallDurationFormatter.makeWidestLabelSize(using:fitting:)(*(void **)(v3 + 16), width, height);
  }
  else {
    __break(1u);
  }
  result.double height = v13;
  result.double width = v12;
  return result;
}

Swift::Void __swiftcall DurationLabelController.updateTimer()()
{
  uint64_t v2 = v0;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_62();
  char v4 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v1 = static OS_dispatch_queue.main.getter();
  uint64_t v5 = OUTLINED_FUNCTION_2_52();
  v6(v5);
  _dispatchPreconditionTest(_:)();
  uint64_t v7 = OUTLINED_FUNCTION_1_18();
  v8(v7);
  if ((v4 & 1) == 0)
  {
    __break(1u);
    return;
  }
  uint64_t v9 = *(void **)(v2 + 16);
  if ((objc_msgSend(v9, sel_isHidden) & 1) != 0 || (objc_msgSend(v9, sel_alpha), v10 <= 0.1))
  {
    int v12 = 0;
  }
  else
  {
    id v11 = objc_msgSend(v9, sel_window);

    int v12 = v11 != 0;
  }
  double v13 = *(void **)(v2 + 80);
  if (v13)
  {
    if (v12 == objc_msgSend(v13, sel_isValid)) {
      return;
    }
    if (!v12)
    {
      OUTLINED_FUNCTION_13_30();
      (*(void (**)(void))(v14 + 256))();
      return;
    }
  }
  else if ((v12 & 1) == 0)
  {
    return;
  }
  OUTLINED_FUNCTION_13_30();
  (*(void (**)(void))(v15 + 248))();
}

id DurationLabelController.isRunning.getter()
{
  id result = *(id *)(v0 + 80);
  if (result) {
    return objc_msgSend(result, sel_isValid);
  }
  return result;
}

Swift::Void __swiftcall DurationLabelController.start()()
{
  OUTLINED_FUNCTION_3_68();
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_63();
  char v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v1 = static OS_dispatch_queue.main.getter();
  uint64_t v4 = OUTLINED_FUNCTION_6_47();
  v5(v4);
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = OUTLINED_FUNCTION_5_12();
  v7(v6);
  if (v3)
  {
    OUTLINED_FUNCTION_13_30();
    (*(void (**)(void))(v8 + 256))();
    if (one-time initialization token for conversationControls == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationControls);
  double v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    uint64_t v12 = OUTLINED_FUNCTION_1_22(4.8751e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v14, v15, "[%{public}s] startDurationTimer");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t v16 = self;
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in DurationLabelController.start();
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  id aBlock[3] = (uint64_t)&block_descriptor_31;
  double v18 = _Block_copy(aBlock);
  swift_release();
  id v19 = objc_msgSend(v16, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v18, 1.0);
  _Block_release(v18);
  uint64_t v20 = *(void **)(v0 + 80);
  *(void *)(v0 + 80) = v19;
}

uint64_t closure #1 in DurationLabelController.start()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v4;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
  return swift_release();
}

uint64_t closure #1 in closure #1 in DurationLabelController.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in DurationLabelController.start(), 0, 0);
}

uint64_t closure #1 in closure #1 in DurationLabelController.start()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 56) = Strong;
  if (Strong)
  {
    type metadata accessor for MainActor();
    *(void *)(v0 + 64) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x1F4188298](closure #1 in closure #1 in DurationLabelController.start(), v3, v2);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

{
  uint64_t v1;

  swift_release();
  DurationLabelController.updateDuration()();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in DurationLabelController.start(), 0, 0);
}

{
  uint64_t v0;

  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall DurationLabelController.stop()()
{
  OUTLINED_FUNCTION_3_68();
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_63();
  char v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v1 = static OS_dispatch_queue.main.getter();
  uint64_t v4 = OUTLINED_FUNCTION_6_47();
  v5(v4);
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = OUTLINED_FUNCTION_5_12();
  v7(v6);
  if (v3)
  {
    if (one-time initialization token for conversationControls == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v11 = OUTLINED_FUNCTION_1_22(4.8751e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_8(&dword_1C2F90000, v13, v14, "[%{public}s] endDurationTimer");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  objc_msgSend(*(id *)(v0 + 80), sel_invalidate);
  uint64_t v15 = *(void **)(v0 + 80);
  *(void *)(v0 + 80) = 0;
}

void DurationLabelController.updateDuration()()
{
  uint64_t v2 = v0;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_62();
  char v4 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v1 = static OS_dispatch_queue.main.getter();
  uint64_t v5 = OUTLINED_FUNCTION_2_52();
  v6(v5);
  _dispatchPreconditionTest(_:)();
  uint64_t v7 = OUTLINED_FUNCTION_1_18();
  v8(v7);
  if (v4)
  {
    uint64_t v9 = v2[7];
    uint64_t v10 = v2[8];
    __swift_project_boxed_opaque_existential_1(v2 + 4, v9);
    double v11 = (*(double (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    DurationLabelController.duration.setter(v11);
  }
  else
  {
    __break(1u);
  }
}

void DurationLabelController.updateDurationLabel()()
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_3_68();
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_62();
  char v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v1 = static OS_dispatch_queue.main.getter();
  uint64_t v4 = OUTLINED_FUNCTION_2_52();
  v5(v4);
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = OUTLINED_FUNCTION_1_18();
  v7(v6);
  if (v3)
  {
    id v8 = DurationLabelController.CallDurationFormatter.attributedString(from:)(*(double *)(v0 + 72));
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E50]), sel_init);
      double v11 = v10;
      unint64_t v12 = *(void **)(v0 + 136);
      if (v12) {
        objc_msgSend(v10, sel_appendAttributedString_, *(void *)(v0 + 136));
      }
      objc_msgSend(v11, sel_appendAttributedString_, v9);
      uint64_t v13 = *(void **)(v0 + 16);
      objc_msgSend(v13, sel_setAttributedText_, v11);
      uint64_t v14 = *(void **)(v0 + 24);
      if (v14)
      {
        id v15 = v14;
        id v16 = objc_msgSend(v13, sel_textColor);
        if (!v16) {
          goto LABEL_8;
        }
        uint64_t v17 = v16;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        id v18 = v15;
        id v19 = v17;
        LOBYTE(v17) = static NSObject.== infix(_:_:)();

        if ((v17 & 1) == 0) {
LABEL_8:
        }
          objc_msgSend(v13, sel_setTextColor_, v15);
      }
      if (v12)
      {
        id v20 = objc_msgSend(v12, sel_string);
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v23 = 0xE000000000000000;
      }
      uint64_t v24 = *(void *)(v0 + 56);
      uint64_t v25 = *(void *)(v0 + 64);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 32), v24);
      double v26 = (*(double (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
      uint64_t v27 = static DurationLabelController.axVoiceOverDurationString(from:)(v26);
      if (v28) {
        uint64_t v29 = v27;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v28) {
        uint64_t v30 = v28;
      }
      else {
        uint64_t v30 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      v31._countAndFlagsBits = v29;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v21, v23, v13);
      if ((UIAccessibilityIsVoiceOverRunning()
         || UIAccessibilityIsSwitchControlRunning()
         || _AXSCommandAndControlEnabled())
        && (OUTLINED_FUNCTION_13_30(), (uint64_t v33 = (void (*)(void))(*(uint64_t (**)(void))(v32 + 192))()) != 0))
      {
        uint64_t v34 = (uint64_t)v33;
        v33();

        outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v34);
        double v11 = v9;
      }
      else
      {
      }
    }
    OUTLINED_FUNCTION_28();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static DurationLabelController.axVoiceOverDurationString(from:)(double a1)
{
  if (one-time initialization token for axVoiceOverFormatter != -1) {
    swift_once();
  }
  id v2 = objc_msgSend((id)static DurationLabelController.axVoiceOverFormatter, sel_stringFromTimeInterval_, a1);
  if (v2)
  {
    char v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v8 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v6, v7, "Unable to format call duration: %f", v8, 0xCu);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }

    return 0;
  }
  return v4;
}

id one-time initialization function for axVoiceOverFormatter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28BF8]), sel_init);
  objc_msgSend(v0, sel_setUnitsStyle_, 3);
  objc_msgSend(v0, sel_setAllowedUnits_, 224);
  id result = objc_msgSend(v0, sel_setZeroFormattingBehavior_, 1);
  static DurationLabelController.axVoiceOverFormatter = (uint64_t)v0;
  return result;
}

void specialized DurationLabelController.init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_31();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  id v59 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  unint64_t v57 = v30;
  uint64_t v58 = v31;
  uint64_t v33 = v32;
  v61[3] = v21;
  v61[4] = a21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v61);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(boxed_opaque_existential_1, v33, v22);
  v24[9] = 0;
  v24[10] = 0;
  id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28BF8]), sel_init);
  objc_msgSend(v35, sel_setZeroFormattingBehavior_, 0x10000);
  objc_msgSend(v35, sel_setAllowedUnits_, 192);
  objc_msgSend(v35, sel_setUnitsStyle_, 0);
  id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28BF8]), sel_init);
  objc_msgSend(v36, sel_setAllowedUnits_, 64);
  objc_msgSend(v36, sel_setUnitsStyle_, 1);
  id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28BF8]), sel_init);
  objc_msgSend(v37, sel_setAllowedUnits_, 32);
  objc_msgSend(v37, sel_setUnitsStyle_, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769620;
  id v39 = (id)*MEMORY[0x1E4FB07F8];
  *(void *)(inited + 64) = MEMORY[0x1E4FBB3D0];
  *(void *)(inited + 32) = v39;
  *(void *)(inited + 40) = 0xBFE0000000000000;
  type metadata accessor for NSAttributedStringKey(0);
  id v40 = (void *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  id v41 = v39;
  uint64_t v42 = Dictionary.init(dictionaryLiteral:)();
  v24[11] = v35;
  v24[12] = 0x4082C00000000000;
  v24[13] = v36;
  v24[14] = 0x40AC200000000000;
  v24[15] = v37;
  v24[16] = v42;
  type metadata accessor for DispatchPredicate();
  v24[18] = 0;
  v24[19] = 0;
  OUTLINED_FUNCTION_5_3();
  id v44 = v43;
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_62();
  LOBYTE(v35) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *id v40 = static OS_dispatch_queue.main.getter();
  uint64_t v46 = OUTLINED_FUNCTION_2_52();
  v47(v46);
  _dispatchPreconditionTest(_:)();
  uint64_t v48 = OUTLINED_FUNCTION_1_18();
  v49(v48);
  if (v35)
  {
    outlined init with copy of IDSLookupManager((uint64_t)v61, (uint64_t)(v24 + 4));
    v24[2] = v58;
    v24[3] = v57;
    swift_beginAccess();
    uint64_t v50 = v24[18];
    v24[18] = v29;
    v24[19] = v27;
    id v44 = v57;
    id v40 = v58;
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v29);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v50);
    v24[17] = v59;
    id v39 = v59;
    DurationLabelController.updateDuration()();
    DurationLabelController.updateDurationLabel()();
    if (one-time initialization token for conversationControls == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v51 = type metadata accessor for Logger();
  __swift_project_value_buffer(v51, (uint64_t)static Logger.conversationControls);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136446210;
    uint64_t v55 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v52, v53, "[%{public}s] created", v54, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v29);
  }
  else
  {

    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v29);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  OUTLINED_FUNCTION_28();
}

#error "1C3169BC4: call analysis failed (funcsize=71)"

uint64_t sub_1C3169C04()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DurationLabelController.start()()
{
  return closure #1 in DurationLabelController.start()();
}

uint64_t type metadata accessor for DurationLabelController()
{
  return self;
}

uint64_t method lookup function for DurationLabelController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DurationLabelController);
}

uint64_t dispatch thunk of DurationLabelController.voiceOverUpdateHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of DurationLabelController.voiceOverUpdateHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of DurationLabelController.voiceOverUpdateHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of DurationLabelController.__allocating_init(durationProvider:label:textColor:voiceOverUpdateHandler:prefixAttributedString:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of DurationLabelController.makeWidestLabelSize(fitting:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of DurationLabelController.updateTimer()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of DurationLabelController.isRunning.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of DurationLabelController.start()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of DurationLabelController.stop()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t destroy for DurationLabelController.CallDurationFormatter(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DurationLabelController.CallDurationFormatter(void *a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  id v8 = *(void **)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4] = v8;
  a1[5] = v7;
  id v9 = v3;
  id v10 = v6;
  id v11 = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DurationLabelController.CallDurationFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(void **)(a2 + 16);
  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v10 = *(void **)(a2 + 32);
  id v11 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v10;
  id v12 = v10;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DurationLabelController.CallDurationFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DurationLabelController.CallDurationFormatter(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DurationLabelController.CallDurationFormatter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for DurationLabelController.CallDurationFormatter()
{
  return &unk_1F1E9C9A8;
}

uint64_t sub_1C316A008()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C316A040()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DurationLabelController.start()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #1 in closure #1 in DurationLabelController.start()(a1, v4, v5, v6);
}

uint64_t ConversationControlsButton.localizedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___CNKConversationControlsButton_localizedName);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease();
  return ConversationControlsButton.localizedName.didset();
}

id static ConversationControlsButtonFactory.makeButton(frame:provider:)(uint64_t a1)
{
  OUTLINED_FUNCTION_7();
  if (*(unsigned char *)(v2 + 40))
  {
    id v3 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsButton());
    swift_retain();
    OUTLINED_FUNCTION_6_2();
    return ConversationControlsButton.init(frame:provider:)();
  }
  else
  {
    uint64_t v5 = (objc_class *)type metadata accessor for SystemApertureButton();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider] = a1;
    v7.id receiver = v6;
    v7.super_class = v5;
    swift_retain();
    return OUTLINED_FUNCTION_1_71(&v7, sel_initWithFrame_);
  }
}

id SystemApertureButton.__allocating_init(frame:provider:)()
{
  uint64_t v2 = (char *)OUTLINED_FUNCTION_7_49();
  *(void *)&v2[OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider] = v0;
  v4.id receiver = v2;
  v4.super_class = v1;
  return OUTLINED_FUNCTION_1_71(&v4, sel_initWithFrame_);
}

id ConversationControlsButton.__allocating_init(frame:provider:)()
{
  return ConversationControlsButton.init(frame:provider:)();
}

uint64_t key path getter for ConversationControlsButton.delegate : ConversationControlsButton@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___CNKConversationControlsButton_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for ConversationControlsButton.delegate : ConversationControlsButton(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR___CNKConversationControlsButton_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t ConversationControlsButton.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t ConversationControlsButton.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR___CNKConversationControlsButton_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ConversationControlsButton.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___CNKConversationControlsButton_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  void v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

uint64_t ConversationControlsButton.localizedName.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for ConversationControlsButton.localizedName : ConversationControlsButton@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR___CNKConversationControlsButton_localizedName);
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for ConversationControlsButton.localizedName : ConversationControlsButton(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return ConversationControlsButton.localizedName.setter(v1, v2);
}

uint64_t ConversationControlsButton.localizedName.didset()
{
  uint64_t v1 = v0 + OBJC_IVAR___CNKConversationControlsButton_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v1);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for ConversationControlsButton()
{
  return self;
}

uint64_t (*ConversationControlsButton.localizedName.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ConversationControlsButton.localizedName.modify;
}

uint64_t ConversationControlsButton.localizedName.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return ConversationControlsButton.localizedName.didset();
  }
  return result;
}

id ConversationControlsButton.init(frame:provider:)()
{
  uint64_t v2 = (objc_class *)OUTLINED_FUNCTION_6_48();
  *(void *)&v1[OBJC_IVAR___CNKConversationControlsButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v3 = &v1[OBJC_IVAR___CNKConversationControlsButton_localizedName];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  *(void *)&v1[OBJC_IVAR___CNKConversationControlsButton_provider] = v0;
  v5.id receiver = v1;
  v5.super_class = v2;
  return OUTLINED_FUNCTION_1_71(&v5, sel_initWithFrame_);
}

uint64_t type metadata accessor for SystemApertureButton()
{
  return self;
}

id ConversationControlsButton.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationControlsButton.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR___CNKConversationControlsButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = &v0[OBJC_IVAR___CNKConversationControlsButton_localizedName];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;

  OUTLINED_FUNCTION_4_55();
  __break(1u);
}

uint64_t ConversationControlsButton.description.getter()
{
  return ConversationControlsButton.description.getter(&demangling cache variable for type metadata for ConversationControlsButton.Type);
}

Swift::Void __swiftcall ConversationControlsButton.layoutSubviews()()
{
}

Swift::Void __swiftcall ConversationControlsButton.didMoveToWindow()()
{
}

uint64_t ConversationControlsButton.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  return ConversationControlsButton.contextMenuInteraction(_:willDisplayMenuFor:animator:)();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v11;

  v11.id receiver = v0;
  v11.super_class = (Class)OUTLINED_FUNCTION_5_56();
  OUTLINED_FUNCTION_10_33((uint64_t)v11.super_class, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_, v3, v4, v5, v6, v7, v8, v11);
  OUTLINED_FUNCTION_0_49();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 448))(v2, v1);
}

uint64_t ConversationControlsButton.contextMenuInteraction(_:willEndFor:animator:)()
{
  return ConversationControlsButton.contextMenuInteraction(_:willEndFor:animator:)();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v11;

  v11.id receiver = v0;
  v11.super_class = (Class)OUTLINED_FUNCTION_5_56();
  OUTLINED_FUNCTION_10_33((uint64_t)v11.super_class, sel_contextMenuInteraction_willEndForConfiguration_animator_, v3, v4, v5, v6, v7, v8, v11);
  OUTLINED_FUNCTION_0_49();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 456))(v2, v1);
}

void @objc ConversationControlsButton.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  id v10 = a3;
  id v11 = a4;
  swift_unknownObjectRetain();
  id v12 = a1;
  a6(v10, v11, a5);

  swift_unknownObjectRelease();
}

UIContextMenuConfiguration_optional __swiftcall ConversationControlsButton.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  uint64_t v2 = (objc_class *)ConversationControlsButton.contextMenuInteraction(_:configurationForMenuAtLocation:)((uint64_t)_.super.isa, &OBJC_IVAR___CNKConversationControlsButton_provider);
  result.value.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

uint64_t ConversationControlsButton._contextMenuInteraction(_:styleForMenuWith:)(uint64_t a1, uint64_t a2)
{
  return ConversationControlsButton._contextMenuInteraction(_:styleForMenuWith:)(a1, a2, (uint64_t)&OBJC_IVAR___CNKConversationControlsButton_provider, (uint64_t)&protocol witness table for ConversationControlsButton);
}

CGPoint __swiftcall ConversationControlsButton.menuAttachmentPoint(for:)(UIContextMenuConfiguration a1)
{
  ConversationControlsButton.menuAttachmentPoint(for:)((uint64_t)a1.super.isa, (uint64_t)&OBJC_IVAR___CNKConversationControlsButton_provider, (uint64_t)&protocol witness table for ConversationControlsButton);
  result.y = v2;
  result.x = v1;
  return result;
}

void ConversationControlsButton.init(frame:)()
{
}

{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ConversationControlsButton.cnkContentAlpha.getter()
{
  return ConversationControlsButton.cnkContentAlpha.getter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t ConversationControlsButton.cnkContentAlpha.setter()
{
  return ConversationControlsButton.cnkContentAlpha.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t (*ConversationControlsButton.cnkContentAlpha.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = *(void *)(v1 + OBJC_IVAR___CNKConversationControlsButton_provider);
  OUTLINED_FUNCTION_50();
  *(double *)a1 = (*(double (**)(void))(v3 + 192))();
  return ConversationControlsButton.cnkContentAlpha.modify;
}

uint64_t ConversationControlsButton.shape.getter()
{
  return OUTLINED_FUNCTION_9_36(OBJC_IVAR___CNKConversationControlsButton_provider);
}

uint64_t (*protocol witness for Control.cnkContentAlpha.modify in conformance ConversationControlsButton(uint64_t a1))()
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CNKConversationControlsButton_provider);
  *(void *)(a1 + 8) = v2;
  *(double *)a1 = (*(double (**)(void))(*(void *)v2 + 192))();
  return ConversationControlsButton.cnkContentAlpha.modify;
}

id SystemApertureButton.init(frame:provider:)()
{
  uint64_t v2 = (objc_class *)OUTLINED_FUNCTION_6_48();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider] = v0;
  v4.id receiver = v1;
  v4.super_class = v2;
  return OUTLINED_FUNCTION_1_71(&v4, sel_initWithFrame_);
}

void SystemApertureButton.init(coder:)()
{
}

id @objc ConversationControlsButton.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  id v8 = (void *)MEMORY[0x1C87730B0](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t SystemApertureButton.description.getter()
{
  return ConversationControlsButton.description.getter(&demangling cache variable for type metadata for SystemApertureButton.Type);
}

uint64_t ConversationControlsButton.description.getter(uint64_t *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v14 = 60;
  unint64_t v15 = 0xE100000000000000;
  uint64_t v12 = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v4._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x6E6F74747562203ALL;
  v5._object = (void *)0xEB00000000203D20;
  String.append(_:)(v5);
  v13.id receiver = v1;
  v13.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v13, sel_description, v12);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v7._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x6469766F7270203BLL;
  v8._object = (void *)0xED0000203D207265;
  String.append(_:)(v8);
  type metadata accessor for ControlsButtonProvider();
  swift_retain();
  v9._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v14;
}

Swift::Void __swiftcall SystemApertureButton.layoutSubviews()()
{
}

uint64_t ConversationControlsButton.layoutSubviews()()
{
  v3.id receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  OUTLINED_FUNCTION_0_49();
  return (*(uint64_t (**)(void *))(v1 + 432))(v0);
}

Swift::Void __swiftcall SystemApertureButton.didMoveToWindow()()
{
}

uint64_t ConversationControlsButton.didMoveToWindow()()
{
  v3.id receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_didMoveToWindow);
  OUTLINED_FUNCTION_0_49();
  return (*(uint64_t (**)(void *))(v1 + 440))(v0);
}

uint64_t SystemApertureButton.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  return ConversationControlsButton.contextMenuInteraction(_:willDisplayMenuFor:animator:)();
}

uint64_t SystemApertureButton.contextMenuInteraction(_:willEndFor:animator:)()
{
  return ConversationControlsButton.contextMenuInteraction(_:willEndFor:animator:)();
}

UIContextMenuConfiguration_optional __swiftcall SystemApertureButton.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  uint64_t v2 = (objc_class *)ConversationControlsButton.contextMenuInteraction(_:configurationForMenuAtLocation:)((uint64_t)_.super.isa, &OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider);
  result.value.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

uint64_t ConversationControlsButton.contextMenuInteraction(_:configurationForMenuAtLocation:)(uint64_t a1, void *a2)
{
  Swift::Bool v3 = *(uint64_t (**)(uint64_t))(**(void **)(v2 + *a2) + 240);
  uint64_t v4 = swift_retain();
  if (v3(v4))
  {
    uint64_t v6 = v5;
    type metadata accessor for UIContextMenuConfiguration();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 24) = v6;
    swift_unknownObjectWeakInit();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 24) = &protocol witness table for ControlsButtonProvider;
    swift_unknownObjectWeakInit();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v7;
    swift_retain();
    swift_retain();
    UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)();
    uint64_t v11 = v10;
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v11;
}

uint64_t SystemApertureButton._contextMenuInteraction(_:styleForMenuWith:)(uint64_t a1, uint64_t a2)
{
  return ConversationControlsButton._contextMenuInteraction(_:styleForMenuWith:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider, (uint64_t)&protocol witness table for SystemApertureButton);
}

uint64_t ConversationControlsButton._contextMenuInteraction(_:styleForMenuWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  OUTLINED_FUNCTION_50();
  if (!(*(uint64_t (**)(void))(v9 + 240))()) {
    return 0;
  }
  uint64_t v11 = v10;
  uint64_t v12 = swift_getObjectType();
  v16.id receiver = v4;
  v16.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v16, sel__contextMenuInteraction_styleForMenuWithConfiguration_, a1, a2);
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, id, uint64_t, uint64_t))(v11 + 24))(v4, a4, v13, v12, v11);
  swift_unknownObjectRelease();

  return v14;
}

CGPoint __swiftcall SystemApertureButton.menuAttachmentPoint(for:)(UIContextMenuConfiguration a1)
{
  ConversationControlsButton.menuAttachmentPoint(for:)((uint64_t)a1.super.isa, (uint64_t)&OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider, (uint64_t)&protocol witness table for SystemApertureButton);
  result.y = v2;
  result.x = v1;
  return result;
}

id ConversationControlsButton.menuAttachmentPoint(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  OUTLINED_FUNCTION_50();
  if (!(*(uint64_t (**)(void))(v7 + 240))()
    || (uint64_t v9 = v8,
        uint64_t v10 = swift_getObjectType(),
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v3, a3, a1, v10, v9),
        char v12 = v11,
        id result = (id)swift_unknownObjectRelease(),
        (v12 & 1) != 0))
  {
    v14.id receiver = v3;
    v14.super_class = ObjectType;
    return objc_msgSendSuper2(&v14, sel_menuAttachmentPointForConfiguration_, a1);
  }
  return result;
}

id ConversationControlsButton.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

void SystemApertureButton.init(frame:)()
{
}

uint64_t SystemApertureButton.cnkContentAlpha.getter()
{
  return ConversationControlsButton.cnkContentAlpha.getter();
}

uint64_t SystemApertureButton.cnkContentAlpha.setter()
{
  return ConversationControlsButton.cnkContentAlpha.setter();
}

uint64_t (*SystemApertureButton.cnkContentAlpha.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider);
  OUTLINED_FUNCTION_50();
  *(double *)a1 = (*(double (**)(void))(v3 + 192))();
  return ConversationControlsButton.cnkContentAlpha.modify;
}

uint64_t ConversationControlsButton.cnkContentAlpha.modify()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t SystemApertureButton.shape.getter()
{
  return OUTLINED_FUNCTION_9_36(OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider);
}

uint64_t (*protocol witness for Control.cnkContentAlpha.modify in conformance SystemApertureButton(uint64_t a1))()
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit20SystemApertureButton_provider);
  *(void *)(a1 + 8) = v2;
  *(double *)a1 = (*(double (**)(void))(*(void *)v2 + 192))();
  return ConversationControlsButton.cnkContentAlpha.modify;
}

unint64_t type metadata accessor for UIContextMenuConfiguration()
{
  unint64_t result = lazy cache variable for type metadata for UIContextMenuConfiguration;
  if (!lazy cache variable for type metadata for UIContextMenuConfiguration)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIContextMenuConfiguration);
  }
  return result;
}

uint64_t sub_1C316BA8C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIContextMenuConfiguration.init(provider:)(uint64_t a1)
{
  return closure #1 in UIContextMenuConfiguration.init(provider:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C316BAE4@<X0>(void *a1@<X8>)
{
  uint64_t result = ConversationControlsButton.cnkContentAlpha.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1C316BB10()
{
  return ConversationControlsButton.cnkContentAlpha.setter();
}

uint64_t sub_1C316BB38@<X0>(void *a1@<X8>)
{
  uint64_t result = SystemApertureButton.cnkContentAlpha.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1C316BB64()
{
  return SystemApertureButton.cnkContentAlpha.setter();
}

ValueMetadata *type metadata accessor for ConversationControlsButtonFactory()
{
  return &type metadata for ConversationControlsButtonFactory;
}

uint64_t dispatch thunk of ConversationControlsButtonDelegate.buttonDidUpdateLocalizedName(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t method lookup function for ConversationControlsButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsButton);
}

uint64_t dispatch thunk of ConversationControlsButton.__allocating_init(frame:provider:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for SystemApertureButton(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureButton);
}

uint64_t dispatch thunk of SystemApertureButton.__allocating_init(frame:provider:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t AnsweringConditionTimer.__allocating_init(logger:timeToWaitForCall:callIsScreenable:)()
{
  OUTLINED_FUNCTION_1_2();
  uint64_t v0 = swift_allocObject();
  AnsweringConditionTimer.init(logger:timeToWaitForCall:callIsScreenable:)();
  return v0;
}

void *AnsweringConditionTimer.init(logger:timeToWaitForCall:callIsScreenable:)()
{
  OUTLINED_FUNCTION_1_2();
  uint64_t v6 = direct field offset for AnsweringConditionTimer.timer;
  type metadata accessor for AsyncCancellableTimer();
  uint64_t v7 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)((char *)v1 + v6) = v7;
  *(void *)(v7 + 112) = 0;
  v1[4] = v4;
  v1[5] = v3;
  uint64_t v8 = (char *)v1 + direct field offset for AnsweringConditionTimer.logger;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, v5, v9);
  v1[2] = v2;
  v1[3] = v0;
  return v1;
}

uint64_t AnsweringConditionTimer.shouldAnswer@Sendable (_:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[6] = v2;
  v1[7] = v0;
  uint64_t v3 = *v0;
  v1[8] = *v0;
  uint64_t v4 = *(void *)(v3 + 80);
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[15] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[16] = v6;
  v1[17] = v5;
  return MEMORY[0x1F4188298](AnsweringConditionTimer.shouldAnswer@Sendable (_:), v6, v5);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(void);
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(void);
  void (*v16)(void);
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  void (*v21)(void);
  void *v22;
  uint64_t (*v24)(void);
  NSObject *log;
  os_log_type_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  uint64_t v28 = v0;
  if ((*(uint64_t (**)(void))(v0[7] + 16))(v0[6]))
  {
    uint64_t v1 = v0[10];
    (*(void (**)(void))(v0[7] + 32))(v0[6]);
    v0[18] = direct field offset for AnsweringConditionTimer.logger;
    uint64_t v2 = *(void (**)(void))(v1 + 16);
    v0[19] = v2;
    v0[20] = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    OUTLINED_FUNCTION_3_13();
    v2();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      log = v3;
      uint64_t v5 = v0[10];
      uint64_t v6 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      uint64_t v7 = Duration.description.getter();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2082;
      OUTLINED_FUNCTION_3_13();
      v2();
      uint64_t v9 = *(void (**)(void))(v5 + 8);
      OUTLINED_FUNCTION_4_1();
      v9();
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      char v12 = v11;
      OUTLINED_FUNCTION_4_1();
      v9();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, log, v4, "Should Answer timer started with timeToWait %{public}s for: %{public}s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      uint64_t v9 = *(void (**)(void))(v0[10] + 8);
      ((void (*)(void, void))v9)(v0[14], v0[9]);
    }
    v0[21] = v9;
    uint64_t v22 = (void *)swift_task_alloc();
    v0[22] = v22;
    *uint64_t v22 = v0;
    v22[1] = AnsweringConditionTimer.shouldAnswer@Sendable (_:);
    return AsyncCancellableTimer.wait(with:)();
  }
  else
  {
    id v13 = v0[10];
    swift_release();
    objc_super v16 = *(void (**)(void))(v13 + 16);
    objc_super v14 = v13 + 16;
    unint64_t v15 = v16;
    OUTLINED_FUNCTION_3_13();
    v16();
    uint64_t v17 = Logger.logObject.getter();
    id v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v26 = v18;
      id v19 = v0[10];
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)id v20 = 136446210;
      OUTLINED_FUNCTION_3_13();
      v15();
      uint64_t v21 = *(void (**)(void))(v19 + 8);
      OUTLINED_FUNCTION_4_1();
      v21();
      dispatch thunk of CustomStringConvertible.description.getter();
      OUTLINED_FUNCTION_5_57();
      OUTLINED_FUNCTION_4_1();
      v21();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v15, v14, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v17, v26, "Should Answer timer returning early as NO for: %{public}s because we can no longer screen the call.", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24(0);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  uint64_t v4 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v5 = AnsweringConditionTimer.shouldAnswer@Sendable (_:);
  }
  else {
    uint64_t v5 = AnsweringConditionTimer.shouldAnswer@Sendable (_:);
  }
  return MEMORY[0x1F4188298](v5, v4, v3);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  char v11;
  uint64_t (*v12)(void);
  void (*v14)(uint64_t, uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  swift_release();
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void, void))(v0 + 152))(*(void *)(v0 + 96), *(void *)(v0 + 48), *(void *)(v0 + 72));
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.default.getter();
    uint64_t v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    if (v3)
    {
      type = v2;
      uint64_t v6 = *(void *)(v0 + 96);
      uint64_t v5 = *(void *)(v0 + 104);
      uint64_t v8 = *(void *)(v0 + 72);
      uint64_t v7 = *(void *)(v0 + 80);
      objc_super v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      objc_super v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      v14(v5, v6, v8);
      v4(v6, v8);
      dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v10 = OUTLINED_FUNCTION_5_57();
      ((void (*)(uint64_t))v4)(v10);
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v1, type, "Should Answer timer canceled for: %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      v4(*(void *)(v0 + 96), *(void *)(v0 + 72));
    }

    char v11 = 0;
  }
  else
  {
    char v11 = (*(uint64_t (**)(void))(*(void *)(v0 + 56) + 16))(*(void *)(v0 + 48));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12(v11 & 1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t AnsweringConditionTimer.cancel()()
{
  OUTLINED_FUNCTION_17_2();
  v1[2] = v0;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return MEMORY[0x1F4188298](AnsweringConditionTimer.cancel(), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + direct field offset for AnsweringConditionTimer.timer);
  *(void *)(v0 + 48) = v1;
  return MEMORY[0x1F4188298](AnsweringConditionTimer.cancel(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_17_2();
  AsyncCancellableTimer.cancel()();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  return MEMORY[0x1F4188298](AnsweringConditionTimer.cancel(), v1, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AnsweringConditionTimer.deinit()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + direct field offset for AnsweringConditionTimer.logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t AnsweringConditionTimer.__deallocating_deinit()
{
  AnsweringConditionTimer.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for AnsweringConditionTimer()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AnsweringConditionTimer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AnsweringConditionTimer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnsweringConditionTimer);
}

uint64_t dispatch thunk of AnsweringConditionTimer.__allocating_init(logger:timeToWaitForCall:callIsScreenable:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

void RecentsCollectionViewCell.messageTapHandler.setter(uint64_t a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC15ConversationKit25RecentsCollectionViewCell_listItemViewHelper))
  {
    swift_retain();
    id v3 = (id)dispatch thunk of RecentsListItemViewHelper.messageIndicatorView.getter();
    swift_release();
    if (v3)
    {
      dispatch thunk of MessageIndicatorView.tapHandler.setter();
    }
    else
    {
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(a1);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t key path getter for RecentsCollectionViewCell.avatarViewController : RecentsCollectionViewCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsCollectionViewCell.avatarViewController : RecentsCollectionViewCell(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x88);
  id v4 = *a1;
  return v3(v2);
}

void (*RecentsCollectionViewCell.avatarViewController.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  RecentsCollectionViewCell.avatarViewController.getter();
  *a1 = v3;
  return RecentsCollectionViewCell.avatarViewController.modify;
}

void RecentsCollectionViewCell.avatarViewController.modify(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    RecentsCollectionViewCell.avatarViewController.setter(v2);
  }
  else
  {
    RecentsCollectionViewCell.avatarViewController.setter(*a1);
  }
}

uint64_t key path getter for RecentsCollectionViewCell.joinButton : RecentsCollectionViewCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t key path setter for RecentsCollectionViewCell.joinButton : RecentsCollectionViewCell(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0);
  id v4 = *a1;
  return v3(v2);
}

void RecentsCollectionViewCell.joinButton.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  id v3 = *v1;
  *uint64_t v1 = a1;
}

uint64_t (*RecentsCollectionViewCell.joinButton.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for RecentsCollectionViewCell.doubleTapHandler : RecentsCollectionViewCell@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CNComposeRecipient) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for RecentsCollectionViewCell.doubleTapHandler : RecentsCollectionViewCell(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNComposeRecipient) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return v7(v6, v5);
}

uint64_t RecentsCollectionViewCell.doubleTapHandler.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*v0);
  return v1;
}

uint64_t RecentsCollectionViewCell.doubleTapHandler.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = *v2;
  uint64_t *v2 = a1;
  v2[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
}

uint64_t (*RecentsCollectionViewCell.doubleTapHandler.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

id RecentsCollectionViewCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id RecentsCollectionViewCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void RecentsCollectionViewCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit25RecentsCollectionViewCell_listItemViewHelper] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit25RecentsCollectionViewCell_joinButton] = 0;
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit25RecentsCollectionViewCell_doubleTapHandler];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Bool __swiftcall RecentsCollectionViewCell._disableRasterizeInAnimations()()
{
  return 1;
}

id RecentsCollectionViewCell.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecentsCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for RecentsCollectionViewCellProtocol.avatarViewController.getter in conformance RecentsCollectionViewCell()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

void RecentsCollectionViewCell.messageTapHandler.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit25RecentsCollectionViewCell_listItemViewHelper))
  {
    swift_retain();
    id v1 = (void *)dispatch thunk of RecentsListItemViewHelper.messageIndicatorView.getter();
    swift_release();
    if (v1)
    {
      dispatch thunk of MessageIndicatorView.tapHandler.getter();
    }
    OUTLINED_FUNCTION_34_9();
  }
  else
  {
    __break(1u);
  }
}

void key path getter for RecentsCollectionViewCell.messageTapHandler : RecentsCollectionViewCell(uint64_t (**a1)()@<X8>)
{
  RecentsCollectionViewCell.messageTapHandler.getter();
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v4;
    *(void *)(v2 + 24) = v5;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> ();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v2;
}

void key path setter for RecentsCollectionViewCell.messageTapHandler : RecentsCollectionViewCell(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@out ());
  }
  else
  {
    uint64_t v4 = 0;
  }
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v1);
  RecentsCollectionViewCell.messageTapHandler.setter((uint64_t)v4);
}

void (*RecentsCollectionViewCell.messageTapHandler.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  RecentsCollectionViewCell.messageTapHandler.getter();
  *a1 = v3;
  a1[1] = v4;
  return RecentsCollectionViewCell.messageTapHandler.modify;
}

void RecentsCollectionViewCell.messageTapHandler.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = OUTLINED_FUNCTION_34_9();
    _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
    RecentsCollectionViewCell.messageTapHandler.setter(v2);
    uint64_t v4 = OUTLINED_FUNCTION_34_9();
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v4);
  }
  else
  {
    RecentsCollectionViewCell.messageTapHandler.setter(*a1);
  }
}

void (*RecentsCollectionViewCell.didDoubleTap(gesture:)(uint64_t a1))(uint64_t)
{
  uint64_t result = (void (*)(uint64_t))(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8))();
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    result(a1);
    return (void (*)(uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v4);
  }
  return result;
}

uint64_t method lookup function for RecentsCollectionViewCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentsCollectionViewCell);
}

uint64_t dispatch thunk of RecentsCollectionViewCell.avatarViewController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.avatarViewController.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.avatarViewController.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.joinButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.joinButton.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.joinButton.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.detailAccessoryButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.doubleTapHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.doubleTapHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of RecentsCollectionViewCell.doubleTapHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t sub_1C316D87C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with take of RecentOngoingConversationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecentOngoingConversationMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double CGPoint.rounded(_:toScaleOf:)()
{
  OUTLINED_FUNCTION_0_50();
  id v3 = objc_msgSend(v2, sel_traitCollection);
  objc_msgSend(v3, sel_displayScale);
  CGFloat.rounded(_:toScale:)(v0, v4, v1);
  OUTLINED_FUNCTION_1_8();

  return v1;
}

{
  uint64_t v0;
  double v1;
  id v2;
  double v3;

  OUTLINED_FUNCTION_0_50();
  objc_msgSend(v2, sel_displayScale);
  CGFloat.rounded(_:toScale:)(v0, v3, v1);
  OUTLINED_FUNCTION_1_8();
  return v1;
}

double CGPoint.rounded(_:toScale:)(uint64_t a1, double a2, double a3, double a4)
{
  double v7 = CGFloat.rounded(_:toScale:)(a1, a2, a3);
  CGFloat.rounded(_:toScale:)(a1, a2, a4);
  return v7;
}

double CGPoint.rounded(_:toScaleOf:)(uint64_t a1, void *a2, double a3, double a4)
{
  swift_getObjectType();
  return specialized CGPoint.rounded(_:toScaleOf:)(a1, a2, a3, a4);
}

double specialized CGPoint.rounded(_:toScaleOf:)(uint64_t a1, id a2, double a3, double a4)
{
  id v7 = objc_msgSend(a2, sel_traitCollection);
  objc_msgSend(v7, sel_displayScale);
  double v9 = v8;
  double v10 = CGFloat.rounded(_:toScale:)(a1, v8, a3);
  CGFloat.rounded(_:toScale:)(a1, v9, a4);

  return v10;
}

uint64_t IDSCapabilitiesChecker.Capabilities.init(faceTimeAudio:faceTimeVideo:faceTimeMultiway:videoMessaging:)(char a1, char a2, char a3, char a4)
{
  uint64_t v4 = 256;
  if ((a1 & 1) == 0) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x10000;
  if ((a2 & 1) == 0) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | v4;
  uint64_t v7 = 0x1000000;
  if ((a3 & 1) == 0) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0x10000000000;
  if ((a4 & 1) == 0) {
    uint64_t v8 = 0;
  }
  return v6 | v7 | v8;
}

uint64_t IDSCapabilitiesChecker.Capabilities.faceTimeAudio.getter(unint64_t a1)
{
  if (a1 == 2) {
    return 0;
  }
  else {
    return (a1 >> 8) & 1;
  }
}

uint64_t IDSCapabilitiesChecker.Capabilities.faceTimeVideo.getter(unint64_t a1)
{
  if (a1 == 2) {
    return 0;
  }
  else {
    return (a1 >> 16) & 1;
  }
}

uint64_t IDSCapabilitiesChecker.Capabilities.faceTimeMultiway.getter(unint64_t a1)
{
  if (a1 == 2) {
    return 0;
  }
  else {
    return (a1 >> 24) & 1;
  }
}

uint64_t IDSCapabilitiesChecker.Capabilities.videoMessaging.getter(unint64_t a1)
{
  if (a1 == 2) {
    return 0;
  }
  else {
    return (a1 >> 40) & 1;
  }
}

BOOL static IDSCapabilitiesChecker.Capabilities.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v2 = a2 == 2 && a1 == 2;
  if (a1 != 2 && a2 != 2)
  {
    int8x16_t v4 = (int8x16_t)vdupq_n_s64(a1);
    int8x16_t v5 = (int8x16_t)vdupq_n_s64(a2);
    *(int16x4_t *)v4.i8 = vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8(veorq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v5, (int8x16_t)xmmword_1C3771BE0)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v5, (int8x16_t)xmmword_1C3771BF0))), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v4, (int8x16_t)xmmword_1C3771BE0)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v4, (int8x16_t)xmmword_1C3771BF0)))))), 0xFuLL));
    v4.i16[0] = vminv_u16(*(uint16x4_t *)v4.i8);
    return (((a1 & 1) == 0) ^ a2) & v4.i32[0] & (((a1 & 0x100) == 0) ^ (a2 >> 8) & 1);
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IDSCapabilitiesChecker.Capabilities(unsigned int *a1, unsigned int *a2)
{
  return static IDSCapabilitiesChecker.Capabilities.== infix(_:_:)(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
}

uint64_t key path setter for IDSCapabilitiesChecker.participantCapabilities : IDSCapabilitiesChecker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t IDSCapabilitiesChecker.participantCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for IDSCapabilitiesChecker.delegate : IDSCapabilitiesChecker(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 176);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t IDSCapabilitiesChecker.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x1C8776240](v0 + 32);
}

uint64_t IDSCapabilitiesChecker.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*IDSCapabilitiesChecker.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  v3[3] = v4;
  void v3[4] = v5;
  return IDSCapabilitiesChecker.delegate.modify;
}

void IDSCapabilitiesChecker.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 40) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

void *IDSCapabilitiesChecker.__allocating_init(participants:lookupManager:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = OUTLINED_FUNCTION_2_53(v4, v9);
  v6(v5);
  uint64_t v7 = OUTLINED_FUNCTION_12_31();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v7;
}

void *IDSCapabilitiesChecker.init(participants:lookupManager:)(uint64_t a1, uint64_t a2)
{
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = OUTLINED_FUNCTION_2_53(v4, v9);
  v6(v5);
  uint64_t v7 = OUTLINED_FUNCTION_12_31();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v7;
}

uint64_t IDSCapabilitiesChecker.capabilitiesForHandle(_:)()
{
  id v1 = (id)TUCopyIDSCanonicalAddressForHandle();
  if (!v1) {
    return 3;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  swift_beginAccess();
  if (!*(void *)(*(void *)(v0 + 24) + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 3;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_9_37();
  uint64_t v9 = v7 | (v8 << 32);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v9;
}

Swift::Void __swiftcall IDSCapabilitiesChecker.update(withParticipants:)(Swift::OpaquePointer withParticipants)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_5_3();
  v161[1] = v6;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_62();
  uint64_t v8 = type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination();
  OUTLINED_FUNCTION_5_3();
  uint64_t v169 = v9;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v174 = (uint64_t)v161 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  v166 = (void *)((char *)v161 - v14);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v163 = (uint64_t)v161 - v16;
  MEMORY[0x1F4188790](v15);
  id v18 = (char *)v161 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSCapabilitiesChecker.ParticipantDestination?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)v161 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v168 = (uint64_t)v161 - v23;
  uint64_t v24 = (char *)*((void *)withParticipants._rawValue + 2);
  v173 = v3;
  v175 = v5;
  uint64_t v176 = v8;
  v167 = v24;
  rawValue = (char *)withParticipants._rawValue;
  if (v24)
  {
    OUTLINED_FUNCTION_10_34();
    uint64_t v26 = (char *)withParticipants._rawValue + v25;
    uint64_t v165 = *(void *)(v27 + 72);
    swift_bridgeObjectRetain();
    uint64_t v28 = MEMORY[0x1E4FBC860];
    uint64_t v29 = v24;
    uint64_t v164 = v2;
    do
    {
      _s15ConversationKit11ParticipantVWOcTm_4((uint64_t)v26, v2, (void (*)(void))type metadata accessor for Participant);
      uint64_t v30 = *(void **)(v2 + *((int *)v5 + 7));
      if (v30)
      {
        v171 = v29;
        uint64_t v172 = v28;
        Swift::String v31 = v22;
        uint64_t v32 = v2 + *((int *)v5 + 5);
        uint64_t v33 = type metadata accessor for UUID();
        v170 = v161;
        OUTLINED_FUNCTION_5_3();
        uint64_t v35 = v34;
        MEMORY[0x1F4188790](v36);
        OUTLINED_FUNCTION_62();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v2, v32, v33);
        id v37 = v30;
        id v38 = (id)TUCopyIDSCanonicalAddressForHandle();
        if (!v38)
        {
          __break(1u);
          goto LABEL_101;
        }
        id v39 = v38;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v41;

        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v31, v2, v33);
        uint64_t v22 = v31;
        uint64_t v8 = v176;
        uint64_t v43 = (uint64_t *)&v31[*(int *)(v176 + 20)];
        *uint64_t v43 = v40;
        v43[1] = v42;
        uint64_t v29 = v171;
        uint64_t v44 = 0;
        uint64_t v2 = v164;
        uint64_t v28 = v172;
      }
      else
      {
        uint64_t v44 = 1;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v22, v44, 1, v8);
      _s15ConversationKit11ParticipantVWOhTm_1(v2, (void (*)(void))type metadata accessor for Participant);
      if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v8) == 1)
      {
        outlined destroy of IDSCapabilitiesChecker.ParticipantDestination?((uint64_t)v22);
        uint64_t v5 = v175;
      }
      else
      {
        uint64_t v45 = v163;
        outlined init with take of IDSCapabilitiesChecker.ParticipantDestination((uint64_t)v22, v163);
        outlined init with take of IDSCapabilitiesChecker.ParticipantDestination(v45, (uint64_t)v166);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v5 = v175;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28);
        }
        unint64_t v48 = *(void *)(v28 + 16);
        unint64_t v47 = *(void *)(v28 + 24);
        if (v48 >= v47 >> 1) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, v28);
        }
        *(void *)(v28 + 16) = v48 + 1;
        OUTLINED_FUNCTION_6_49();
        outlined init with take of IDSCapabilitiesChecker.ParticipantDestination((uint64_t)v166, v28 + v49 + *(void *)(v50 + 72) * v48);
      }
      v26 += v165;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    uint64_t v3 = v173;
  }
  else
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  v3[6] = v28;
  swift_bridgeObjectRelease();
  uint64_t v51 = v168;
  if (!v167)
  {
    uint64_t v172 = MEMORY[0x1E4FBC868];
LABEL_51:
    uint64_t v93 = v3[6];
    uint64_t v94 = *(void *)(v93 + 16);
    uint64_t v95 = (void *)MEMORY[0x1E4FBC860];
    if (v94)
    {
      v178[0] = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      OUTLINED_FUNCTION_6_49();
      uint64_t v97 = v93 + v96;
      uint64_t v99 = *(void *)(v98 + 72);
      uint64_t v95 = (void *)v178[0];
      do
      {
        uint64_t v100 = v174;
        _s15ConversationKit11ParticipantVWOcTm_4(v97, v174, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
        id v101 = (uint64_t *)(v100 + *(int *)(v8 + 20));
        uint64_t v102 = *v101;
        uint64_t v103 = v101[1];
        swift_bridgeObjectRetain();
        _s15ConversationKit11ParticipantVWOhTm_1(v100, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v95 = (void *)v178[0];
        }
        unint64_t v104 = v95[2];
        if (v104 >= v95[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v95 = (void *)v178[0];
        }
        v95[2] = v104 + 1;
        uint64_t v105 = &v95[2 * v104];
        v105[4] = v102;
        v105[5] = v103;
        v97 += v99;
        --v94;
        uint64_t v8 = v176;
      }
      while (v94);
      swift_bridgeObjectRelease();
      uint64_t v3 = v173;
    }
    uint64_t v106 = v95[2];
    if (v106)
    {
      v175 = v3 + 7;
      swift_bridgeObjectRetain();
      uint64_t v107 = MEMORY[0x1E4FBC868];
      v171 = (char *)v95;
      uint64_t v108 = v95 + 5;
      while (1)
      {
        uint64_t v110 = *(v108 - 1);
        uint64_t v109 = *v108;
        uint64_t v111 = v3[10];
        uint64_t v112 = v3[11];
        __swift_project_boxed_opaque_existential_1(v175, v111);
        uint64_t v113 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 16);
        swift_bridgeObjectRetain();
        uint64_t v114 = v113(v110, v109, v111, v112);
        uint64_t v70 = v114 == 3 ? 2 : v114 & 0xFFFFFFFFFFFFLL;
        char v115 = swift_isUniquelyReferenced_nonNull_native();
        v178[0] = v107;
        unint64_t v116 = specialized __RawDictionaryStorage.find<A>(_:)(v110, v109);
        uint64_t v118 = *(void *)(v107 + 16);
        BOOL v119 = (v117 & 1) == 0;
        Swift::Int v120 = v118 + v119;
        if (__OFADD__(v118, v119)) {
          break;
        }
        unint64_t v121 = v116;
        char v122 = v117;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, IDSCapabilitiesChecker.Capabilities>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v115, v120))
        {
          specialized __RawDictionaryStorage.find<A>(_:)(v110, v109);
          OUTLINED_FUNCTION_15_29();
          if (!v78) {
            goto LABEL_101;
          }
          unint64_t v121 = v123;
        }
        uint64_t v107 = v178[0];
        if (v122)
        {
          OUTLINED_FUNCTION_11_27(SWORD2(v70));
        }
        else
        {
          *(void *)(v178[0] + 8 * (v121 >> 6) + 64) |= 1 << v121;
          unint64_t v124 = (uint64_t *)(*(void *)(v107 + 48) + 16 * v121);
          *unint64_t v124 = v110;
          v124[1] = v109;
          OUTLINED_FUNCTION_11_27(SWORD2(v70));
          uint64_t v125 = *(void *)(v107 + 16);
          BOOL v73 = __OFADD__(v125, 1);
          uint64_t v126 = v125 + 1;
          if (v73) {
            goto LABEL_93;
          }
          *(void *)(v107 + 16) = v126;
          swift_bridgeObjectRetain();
        }
        v108 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        --v106;
        uint64_t v3 = v173;
        if (!v106)
        {
          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
      }
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
    }
    else
    {
      uint64_t v107 = MEMORY[0x1E4FBC868];
LABEL_76:
      uint64_t v127 = swift_bridgeObjectRelease();
      uint64_t v70 = *(void *)(*v3 + 120);
      id v128 = v3;
      uint64_t v129 = ((uint64_t (*)(uint64_t))v70)(v127);
      uint64_t v130 = v172;
      char v131 = specialized static Dictionary<>.== infix(_:_:)(v172, v129);
      swift_bridgeObjectRelease();
      if (v131)
      {
        swift_bridgeObjectRelease();
LABEL_82:
        swift_bridgeObjectRelease();
        id v141 = v128 + 7;
        outlined init with copy of IDSLookupManager((uint64_t)(v128 + 7), (uint64_t)v178);
        uint64_t v142 = v179;
        uint64_t v143 = v180;
        uint64_t v144 = __swift_project_boxed_opaque_existential_1(v178, v179);
        uint64_t v145 = v128[6];
        uint64_t v146 = *(void *)(v145 + 16);
        uint64_t v147 = MEMORY[0x1E4FBC860];
        if (v146)
        {
          v170 = v144;
          v171 = v143;
          uint64_t v172 = v142;
          v175 = v128 + 7;
          uint64_t v177 = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          OUTLINED_FUNCTION_6_49();
          uint64_t v149 = v145 + v148;
          uint64_t v151 = *(void *)(v150 + 72);
          uint64_t v147 = v177;
          do
          {
            uint64_t v152 = v174;
            _s15ConversationKit11ParticipantVWOcTm_4(v149, v174, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
            v153 = (uint64_t *)(v152 + *(int *)(v176 + 20));
            uint64_t v154 = *v153;
            uint64_t v155 = v153[1];
            swift_bridgeObjectRetain();
            _s15ConversationKit11ParticipantVWOhTm_1(v152, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v147 = v177;
            }
            unint64_t v156 = *(void *)(v147 + 16);
            if (v156 >= *(void *)(v147 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v147 = v177;
            }
            *(void *)(v147 + 16) = v156 + 1;
            uint64_t v157 = v147 + 16 * v156;
            *(void *)(v157 + 32) = v154;
            *(void *)(v157 + 40) = v155;
            v149 += v151;
            --v146;
          }
          while (v146);
          swift_bridgeObjectRelease();
          v158 = v173;
          id v141 = v175;
          uint64_t v143 = v171;
        }
        else
        {
          v158 = v128;
        }
        specialized Set.init<A>(_:)(v147);
        (*((void (**)(void))v143 + 1))();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v178);
        id v159 = objc_msgSend(self, sel_defaultCenter);
        uint64_t v160 = *MEMORY[0x1E4FADEC0];
        __swift_project_boxed_opaque_existential_1(v141, v158[10]);
        objc_msgSend(v159, sel_addObserver_selector_name_object_, v158, sel_handleLookupManagerDidChangeNotification_, v160, _bridgeAnythingToObjectiveC<A>(_:)());

        swift_unknownObjectRelease();
        return;
      }
      swift_beginAccess();
      v3[2] = v130;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v3[3] = v107;
      uint64_t v132 = swift_bridgeObjectRelease();
      if ((*(uint64_t (**)(uint64_t))(*v3 + 168))(v132))
      {
        uint64_t v134 = v133;
        uint64_t ObjectType = swift_getObjectType();
        ((void (*)(void))v70)();
        specialized Set.init<A>(_:)();
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v134 + 8))(v3, v136, ObjectType, v134);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      if (one-time initialization token for conversationKit == -1)
      {
LABEL_81:
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v137 = swift_allocObject();
        *(_OWORD *)(v137 + 16) = xmmword_1C3769620;
        id v128 = v173;
        v178[0] = ((uint64_t (*)(void))v70)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : IDSCapabilitiesChecker.Capabilities]);
        uint64_t v138 = String.init<A>(reflecting:)();
        uint64_t v140 = v139;
        *(void *)(v137 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v137 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v137 + 32) = v138;
        *(void *)(v137 + 40) = v140;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        goto LABEL_82;
      }
    }
    swift_once();
    goto LABEL_81;
  }
  OUTLINED_FUNCTION_10_34();
  v171 = &rawValue[v52];
  v166 = v3 + 7;
  v170 = *(void **)(v53 + 72);
  swift_bridgeObjectRetain();
  uint64_t v54 = 0;
  uint64_t v172 = MEMORY[0x1E4FBC868];
  while (1)
  {
    uint64_t v55 = &v171[(void)v170 * v54];
    uint64_t v56 = v3[6];
    uint64_t v57 = *(void *)(v56 + 16);
    if (v57)
    {
      uint64_t v58 = v169;
      uint64_t v59 = v56 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
      swift_bridgeObjectRetain();
      uint64_t v60 = *(void *)(v58 + 72);
      while (1)
      {
        _s15ConversationKit11ParticipantVWOcTm_4(v59, (uint64_t)v18, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        _s15ConversationKit11ParticipantVWOhTm_1((uint64_t)v18, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
        v59 += v60;
        if (!--v57)
        {
          uint64_t v61 = 1;
          uint64_t v51 = v168;
          goto LABEL_26;
        }
      }
      uint64_t v51 = v168;
      outlined init with take of IDSCapabilitiesChecker.ParticipantDestination((uint64_t)v18, v168);
      uint64_t v61 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v61 = 1;
    }
LABEL_26:
    __swift_storeEnumTagSinglePayload(v51, v61, 1, v8);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v51, 1, v8) != 1) {
      break;
    }
    outlined destroy of IDSCapabilitiesChecker.ParticipantDestination?(v51);
LABEL_48:
    if ((char *)++v54 == v167)
    {
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
  }
  id v62 = (uint64_t *)(v51 + *(int *)(v8 + 20));
  uint64_t v63 = *v62;
  uint64_t v64 = v62[1];
  swift_bridgeObjectRetain();
  _s15ConversationKit11ParticipantVWOhTm_1(v51, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
  uint64_t v65 = v3[10];
  uint64_t v66 = v3[11];
  __swift_project_boxed_opaque_existential_1(v166, v65);
  char v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 16))(v63, v64, v65, v66);
  swift_bridgeObjectRelease();
  unint64_t v68 = &v55[*((int *)v175 + 5)];
  uint64_t v69 = v172;
  uint64_t v70 = swift_isUniquelyReferenced_nonNull_native();
  if (v67 == 3)
  {
    v178[0] = v69;
    specialized __RawDictionaryStorage.find<A>(_:)();
    OUTLINED_FUNCTION_20_22();
    if (v73) {
      goto LABEL_94;
    }
    unint64_t v74 = v71;
    char v75 = v72;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, IDSCapabilitiesChecker.Capabilities>);
    BOOL v76 = OUTLINED_FUNCTION_19_26();
    uint64_t v3 = v173;
    if (v76)
    {
      specialized __RawDictionaryStorage.find<A>(_:)();
      OUTLINED_FUNCTION_15_29();
      if (!v78) {
        goto LABEL_100;
      }
      unint64_t v74 = v77;
    }
    uint64_t v79 = v178[0];
    uint64_t v172 = v178[0];
    if (v75)
    {
      OUTLINED_FUNCTION_8_35();
    }
    else
    {
      OUTLINED_FUNCTION_4_56(v178[0] + 8 * (v74 >> 6));
      uint64_t v85 = *(void *)(v79 + 48);
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      (*(void (**)(unint64_t, char *))(v86 + 16))(v85 + *(void *)(v86 + 72) * v74, v68);
      OUTLINED_FUNCTION_8_35();
      uint64_t v87 = *(void *)(v79 + 16);
      BOOL v73 = __OFADD__(v87, 1);
      uint64_t v88 = v87 + 1;
      if (v73) {
        goto LABEL_96;
      }
      *(void *)(v79 + 16) = v88;
    }
    goto LABEL_47;
  }
  v178[0] = v69;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_20_22();
  if (v73) {
    goto LABEL_95;
  }
  unint64_t v82 = v80;
  char v83 = v81;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, IDSCapabilitiesChecker.Capabilities>);
  if (!OUTLINED_FUNCTION_19_26())
  {
LABEL_41:
    uint64_t v70 = v178[0];
    uint64_t v172 = v178[0];
    if (v83)
    {
      OUTLINED_FUNCTION_13_31();
      uint64_t v3 = v173;
    }
    else
    {
      OUTLINED_FUNCTION_4_56(v178[0] + 8 * (v82 >> 6));
      uint64_t v89 = *(void *)(v70 + 48);
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_0();
      (*(void (**)(unint64_t, char *))(v90 + 16))(v89 + *(void *)(v90 + 72) * v82, v68);
      OUTLINED_FUNCTION_13_31();
      uint64_t v91 = *(void *)(v70 + 16);
      BOOL v73 = __OFADD__(v91, 1);
      uint64_t v92 = v91 + 1;
      uint64_t v3 = v173;
      if (v73) {
        goto LABEL_97;
      }
      *(void *)(v70 + 16) = v92;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    uint64_t v51 = v168;
    goto LABEL_48;
  }
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_15_29();
  if (v78)
  {
    unint64_t v82 = v84;
    goto LABEL_41;
  }
LABEL_100:
  type metadata accessor for UUID();
LABEL_101:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t IDSCapabilitiesChecker.handleLookupManagerDidChangeNotification(_:)()
{
  id v1 = v0;
  uint64_t v99 = type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination();
  OUTLINED_FUNCTION_5_3();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = MEMORY[0x1E4FBC870];
  uint64_t v7 = v0[6];
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v97 = v1 + 7;
    uint64_t v88 = v1 + 2;
    uint64_t v89 = v1 + 3;
    uint64_t v96 = v7 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = swift_bridgeObjectRetain();
    LODWORD(v90) = 0;
    unint64_t v10 = 0;
    uint64_t v87 = v8 - 1;
    int8x16_t v92 = (int8x16_t)xmmword_1C3771BE0;
    int8x16_t v91 = (int8x16_t)xmmword_1C3771BF0;
    uint64_t v94 = v9;
    uint64_t v95 = v3;
    uint64_t v98 = v6;
    uint64_t v93 = v8;
LABEL_3:
    unint64_t v11 = v10;
    do
    {
      if (v11 >= *(void *)(v9 + 16))
      {
        __break(1u);
        goto LABEL_45;
      }
      _s15ConversationKit11ParticipantVWOcTm_4(v96 + *(void *)(v3 + 72) * v11, (uint64_t)v6, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
      uint64_t v13 = v1[10];
      uint64_t v12 = v1[11];
      __swift_project_boxed_opaque_existential_1(v97, v13);
      uint64_t v14 = (uint64_t *)&v6[*(int *)(v99 + 20)];
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16);
      swift_bridgeObjectRetain();
      uint64_t v18 = v17(v16, v15, v13, v12);
      uint64_t v6 = v98;
      unint64_t v19 = v18;
      uint64_t v20 = swift_bridgeObjectRelease();
      if (v19 != 3)
      {
        if (*(void *)((*(uint64_t (**)(uint64_t))(*v1 + 120))(v20) + 16)
          && (specialized __RawDictionaryStorage.find<A>(_:)(), (v21 & 1) != 0))
        {
          OUTLINED_FUNCTION_9_37();
          unint64_t v24 = v22 | (v23 << 32);
          swift_bridgeObjectRelease();
          if (v19 == 2)
          {
            if (v24 != 2) {
              goto LABEL_18;
            }
          }
          else if (v24 == 2 {
                 || ((v19 & 1) == 0) == (v24 & 1)
          }
                 || (int8x16_t v25 = (int8x16_t)vdupq_n_s64(v19),
                     int8x16_t v26 = (int8x16_t)vdupq_n_s64(v24),
                     *(int8x8_t *)v25.i8 = vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8(veorq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v92)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v91))), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v25, v92)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v25, v91)))))), 0xFuLL)), (int8x8_t)0x8000400020001), v25.i16[0] = vaddv_s16(*(int16x4_t *)v25.i8), (~v25.i32[0] & 0xF) != 0)|| ((v19 & 0x100) == 0) == ((v24 >> 8) & 1))
          {
LABEL_18:
            type metadata accessor for UUID();
            char v81 = (void (*)(char *, uint64_t))v80;
            OUTLINED_FUNCTION_5_3();
            MEMORY[0x1F4188790](v27);
            v80[1] = v28;
            uint64_t v29 = (char *)v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
            Swift::Int v90 = v30;
            Swift::String v31 = *(void (**)(void, void))(v30 + 16);
            uint64_t v86 = v32;
            Swift::Int v84 = v30 + 16;
            char v83 = v31;
            v31(v29, v6);
            uint64_t v33 = v88;
            swift_beginAccess();
            LODWORD(v82) = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v100 = *v33;
            *uint64_t v33 = 0x8000000000000000;
            uint64_t v85 = v29;
            specialized __RawDictionaryStorage.find<A>(_:)();
            OUTLINED_FUNCTION_16_22();
            if (!v36)
            {
              unint64_t v37 = v34;
              char v38 = v35;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, IDSCapabilitiesChecker.Capabilities>);
              Swift::Bool v39 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)v82, v19);
              Swift::Int v40 = v90;
              if (!v39) {
                goto LABEL_22;
              }
              unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)();
              if ((v38 & 1) != (v42 & 1)) {
                goto LABEL_50;
              }
              unint64_t v37 = v41;
LABEL_22:
              uint64_t v43 = v100;
              unint64_t v82 = (void *)HIDWORD(v19);
              if (v38)
              {
                uint64_t v44 = *(void *)(v100 + 56) + 6 * v37;
                *(_WORD *)(v44 + 4) = WORD2(v19);
                *(_DWORD *)uint64_t v44 = v19;
                goto LABEL_26;
              }
              OUTLINED_FUNCTION_4_56(v100 + 8 * (v37 >> 6));
              OUTLINED_FUNCTION_7_50();
              v45();
              uint64_t v46 = *(void *)(v43 + 56) + 6 * v37;
              *(_WORD *)(v46 + 4) = (_WORD)v82;
              *(_DWORD *)uint64_t v46 = v19;
              uint64_t v47 = *(void *)(v43 + 16);
              BOOL v36 = __OFADD__(v47, 1);
              uint64_t v48 = v47 + 1;
              if (!v36)
              {
                *(void *)(v43 + 16) = v48;
LABEL_26:
                *uint64_t v33 = v43;
                swift_bridgeObjectRelease();
                uint64_t v50 = *(void **)(v40 + 8);
                Swift::Int v49 = v40 + 8;
                Swift::Int v90 = v49;
                char v81 = (void (*)(char *, uint64_t))v50;
                ((void (*)(void *, uint64_t))v50)(v85, v86);
                swift_endAccess();
                uint64_t v52 = *v14;
                uint64_t v51 = v14[1];
                uint64_t v53 = v89;
                swift_beginAccess();
                swift_bridgeObjectRetain();
                LODWORD(v85) = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v100 = *v53;
                *uint64_t v53 = 0x8000000000000000;
                uint64_t v54 = v52;
                specialized __RawDictionaryStorage.find<A>(_:)(v52, v51);
                OUTLINED_FUNCTION_16_22();
                if (!v36)
                {
                  unint64_t v57 = v55;
                  char v58 = v56;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, IDSCapabilitiesChecker.Capabilities>);
                  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)v85, v49)) {
                    goto LABEL_30;
                  }
                  unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v51);
                  if ((v58 & 1) == (v60 & 1))
                  {
                    unint64_t v57 = v59;
LABEL_30:
                    uint64_t v61 = v100;
                    if (v58)
                    {
                      OUTLINED_FUNCTION_5_58();
                      goto LABEL_34;
                    }
                    OUTLINED_FUNCTION_4_56(v100 + 8 * (v57 >> 6));
                    id v62 = (uint64_t *)(*(void *)(v61 + 48) + 16 * v57);
                    *id v62 = v54;
                    v62[1] = v51;
                    OUTLINED_FUNCTION_5_58();
                    uint64_t v63 = *(void *)(v61 + 16);
                    BOOL v36 = __OFADD__(v63, 1);
                    uint64_t v64 = v63 + 1;
                    if (!v36)
                    {
                      *(void *)(v61 + 16) = v64;
                      swift_bridgeObjectRetain();
LABEL_34:
                      uint64_t v3 = v95;
                      unint64_t v10 = v11 + 1;
                      *uint64_t v89 = v61;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v65 = swift_endAccess();
                      uint64_t v85 = v80;
                      uint64_t v66 = MEMORY[0x1F4188790](v65);
                      unint64_t v68 = (char *)v80 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
                      unint64_t v82 = v80;
                      MEMORY[0x1F4188790](v66);
                      uint64_t v6 = v98;
                      uint64_t v69 = v86;
                      OUTLINED_FUNCTION_7_50();
                      v70();
                      specialized Set._Variant.insert(_:)();
                      v81(v68, v69);
                      _s15ConversationKit11ParticipantVWOhTm_1((uint64_t)v6, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
                      LODWORD(v90) = 1;
                      uint64_t v9 = v94;
                      if (v87 != v11) {
                        goto LABEL_3;
                      }
                      uint64_t v71 = swift_bridgeObjectRelease();
LABEL_37:
                      if ((*(uint64_t (**)(uint64_t))(*v1 + 168))(v71))
                      {
                        uint64_t v73 = v72;
                        uint64_t ObjectType = swift_getObjectType();
                        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v73 + 8))(v1, v102, ObjectType, v73);
                        swift_bridgeObjectRelease();
                        swift_unknownObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                      if (one-time initialization token for conversationKit == -1)
                      {
LABEL_42:
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
                        uint64_t v75 = swift_allocObject();
                        *(_OWORD *)(v75 + 16) = xmmword_1C3769620;
                        uint64_t v101 = (*(uint64_t (**)(void))(*v1 + 120))();
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : IDSCapabilitiesChecker.Capabilities]);
                        uint64_t v76 = String.init<A>(reflecting:)();
                        uint64_t v78 = v77;
                        *(void *)(v75 + 56) = MEMORY[0x1E4FBB1A0];
                        *(void *)(v75 + 64) = lazy protocol witness table accessor for type String and conformance String();
                        *(void *)(v75 + 32) = v76;
                        *(void *)(v75 + 40) = v78;
                        static os_log_type_t.default.getter();
                        os_log(_:dso:log:type:_:)();
                        return swift_bridgeObjectRelease();
                      }
LABEL_45:
                      swift_once();
                      goto LABEL_42;
                    }
LABEL_49:
                    __break(1u);
                  }
LABEL_50:
                  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return result;
                }
LABEL_47:
                __break(1u);
              }
              __break(1u);
              goto LABEL_49;
            }
            __break(1u);
            goto LABEL_47;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      ++v11;
      _s15ConversationKit11ParticipantVWOhTm_1((uint64_t)v6, (void (*)(void))type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination);
      uint64_t v9 = v94;
      uint64_t v3 = v95;
    }
    while (v93 != v11);
    uint64_t v71 = swift_bridgeObjectRelease();
    if (v90) {
      goto LABEL_37;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t IDSCapabilitiesChecker.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 32);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t IDSCapabilitiesChecker.__deallocating_deinit()
{
  IDSCapabilitiesChecker.deinit();
  return swift_deallocClassInstance();
}

uint64_t TUIDSLookupManager.capabilities(for:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C3769620;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  swift_bridgeObjectRetain();
  Class isa = OUTLINED_FUNCTION_18_29().super.isa;
  LODWORD(a2) = objc_msgSend(v2, sel_isFaceTimeAudioAvailableForAnyDestinationInDestinations_, isa);

  Class v7 = OUTLINED_FUNCTION_18_29().super.isa;
  unsigned int v8 = objc_msgSend(v2, sel_isFaceTimeVideoAvailableForAnyDestinationInDestinations_, v7);

  Class v9 = OUTLINED_FUNCTION_18_29().super.isa;
  unsigned int v10 = objc_msgSend(v2, sel_isFaceTimeMultiwayAvailableForAnyDestinationInDestinations_, v9);

  Class v11 = OUTLINED_FUNCTION_18_29().super.isa;
  swift_bridgeObjectRelease();
  unsigned int v12 = objc_msgSend(v2, sel_isVideoMessagingAvailableForAnyDestinationInDestinations_, v11);

  uint64_t v13 = 256;
  if (!a2) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = 0x10000;
  if (!v8) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 | v13;
  uint64_t v16 = 0x1000000;
  if (!v10) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = 0x10000000000;
  if (!v12) {
    uint64_t v17 = 0;
  }
  return v15 | v16 | v17;
}

void protocol witness for IDSLookupManager.beginQuery(withDestinations:) in conformance TUIDSLookupManager()
{
}

void @nonobjc TUIDSLookupManager.beginQuery(withDestinations:)()
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, sel_beginQueryWithDestinations_, isa);
}

uint64_t protocol witness for IDSLookupManager.capabilities(for:) in conformance TUIDSLookupManager(uint64_t a1, uint64_t a2)
{
  return TUIDSLookupManager.capabilities(for:)(a1, a2);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v53 = a1;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v49 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: IDSCapabilitiesChecker.Capabilities)?);
  uint64_t v48 = &v46;
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  unint64_t v55 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v56 = v9;
  unsigned int v10 = (char *)&v46 - v55;
  int64_t v57 = 0;
  int64_t v52 = (unint64_t)(v4 + 63) >> 6;
  int64_t v47 = v52 - 1;
  int8x16_t v51 = (int8x16_t)xmmword_1C3771C00;
  int8x16_t v50 = (int8x16_t)xmmword_1C3771BE0;
  while (1)
  {
    uint64_t result = MEMORY[0x1F4188790](v8);
    unsigned int v12 = (char *)&v46 - v55;
    if (v6)
    {
      unint64_t v13 = __clz(__rbit64(v6));
      uint64_t v14 = (v6 - 1) & v6;
      unint64_t v15 = v13 | (v57 << 6);
LABEL_8:
      uint64_t v16 = v53;
      uint64_t v17 = *(void *)(v53 + 48);
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v12, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v15, v18);
      uint64_t v19 = *(void *)(v16 + 56) + 6 * v15;
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: IDSCapabilitiesChecker.Capabilities));
      char v21 = &v12[*(int *)(v20 + 48)];
      int v22 = *(_DWORD *)v19;
      *((_WORD *)v21 + 2) = *(_WORD *)(v19 + 4);
      *(_DWORD *)char v21 = v22;
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v20);
      goto LABEL_30;
    }
    int64_t v23 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v23 < v52)
    {
      unint64_t v24 = *(void *)(v49 + 8 * v23);
      if (v24) {
        goto LABEL_12;
      }
      int64_t v25 = v57 + 2;
      ++v57;
      if (v23 + 1 < v52)
      {
        unint64_t v24 = *(void *)(v49 + 8 * v25);
        if (v24) {
          goto LABEL_15;
        }
        int64_t v57 = v23 + 1;
        if (v23 + 2 < v52)
        {
          unint64_t v24 = *(void *)(v49 + 8 * (v23 + 2));
          if (v24)
          {
            v23 += 2;
            goto LABEL_12;
          }
          int64_t v57 = v23 + 2;
          if (v23 + 3 < v52)
          {
            unint64_t v24 = *(void *)(v49 + 8 * (v23 + 3));
            if (v24)
            {
              v23 += 3;
              goto LABEL_12;
            }
            int64_t v25 = v23 + 4;
            int64_t v57 = v23 + 3;
            if (v23 + 4 < v52) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: IDSCapabilitiesChecker.Capabilities));
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v26);
    uint64_t v14 = 0;
LABEL_30:
    outlined init with take of (key: UUID, value: IDSCapabilitiesChecker.Capabilities)?((uint64_t)v12, (uint64_t)v10);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: IDSCapabilitiesChecker.Capabilities));
    BOOL v28 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v27) == 1;
    uint64_t result = v28;
    if (v28) {
      return result;
    }
    BOOL v54 = v28;
    unint64_t v29 = v14;
    uint64_t v30 = type metadata accessor for UUID();
    char v58 = &v46;
    uint64_t v31 = *(void *)(v30 - 8);
    MEMORY[0x1F4188790](v30);
    uint64_t v33 = (char *)&v46 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v34 = &v10[*(int *)(v27 + 48)];
    char v35 = v10;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v33, v10, v30);
    uint64_t v36 = *((unsigned __int16 *)v34 + 2);
    uint64_t v37 = *(unsigned int *)v34;
    unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)();
    char v40 = v39;
    uint64_t v41 = v30;
    unint64_t v6 = v29;
    uint64_t v8 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v41);
    if ((v40 & 1) == 0) {
      return v54;
    }
    unint64_t v42 = v37 | (v36 << 32);
    unint64_t v43 = *(unsigned int *)(*(void *)(a2 + 56) + 6 * v38) | ((unint64_t)*(unsigned __int16 *)(*(void *)(a2 + 56) + 6 * v38 + 4) << 32);
    if (*(_DWORD *)(*(void *)(a2 + 56) + 6 * v38) == 2)
    {
      if (v37 != 2) {
        return v54;
      }
    }
    else
    {
      if (v37 == 2) {
        return v54;
      }
      int8x16_t v44 = (int8x16_t)vdupq_n_s64(v43);
      int8x16_t v45 = (int8x16_t)vdupq_n_s64(v42);
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8(veorq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v45, v51)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v45, v50))), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v44, v51)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v44, v50)))))), 0xFuLL))) & 1) == 0|| (((v37 | (unint64_t)(v36 << 32)) >> 32) & 1) == ((v43 & 0x100000000) == 0)|| ((v42 >> 40) & 1) == ((v43 & 0x10000000000) == 0))
      {
        return v54;
      }
    }
    unsigned int v10 = v35;
  }
  unint64_t v24 = *(void *)(v49 + 8 * v25);
  if (v24)
  {
LABEL_15:
    int64_t v23 = v25;
LABEL_12:
    uint64_t v14 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v57 = v23;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v52)
    {
      int64_t v57 = v47;
      goto LABEL_29;
    }
    unint64_t v24 = *(void *)(v49 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_12;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

void *specialized IDSCapabilitiesChecker.init(participants:lookupManager:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void v12[3] = a4;
  v12[4] = a5;
  __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(void))(*(void *)(a4 - 8) + 32))();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  uint64_t v8 = MEMORY[0x1E4FBC860];
  a3[2] = Dictionary.init(dictionaryLiteral:)();
  a3[3] = Dictionary.init(dictionaryLiteral:)();
  a3[5] = 0;
  swift_unknownObjectWeakInit();
  a3[6] = v8;
  outlined init with copy of IDSLookupManager((uint64_t)v12, (uint64_t)(a3 + 7));
  if (a1)
  {
    (*(void (**)(uint64_t))(*a3 + 232))(a1);
    swift_bridgeObjectRelease();
  }
  id v9 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v10 = *MEMORY[0x1E4FADEC0];
  swift_retain();
  objc_msgSend(v9, sel_addObserver_selector_name_object_, a3, sel_handleLookupManagerDidChangeNotification_, v10, _bridgeAnythingToObjectiveC<A>(_:)());

  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return a3;
}

uint64_t type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination()
{
  uint64_t result = type metadata singleton initialization cache for IDSCapabilitiesChecker.ParticipantDestination;
  if (!type metadata singleton initialization cache for IDSCapabilitiesChecker.ParticipantDestination) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of IDSCapabilitiesChecker.ParticipantDestination?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSCapabilitiesChecker.ParticipantDestination?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s15ConversationKit11ParticipantVWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of IDSCapabilitiesChecker.ParticipantDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSCapabilitiesChecker.ParticipantDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3170610()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1C3170654()
{
  OUTLINED_FUNCTION_6_4();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 168))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t dispatch thunk of IDSCapabilitiesCheckerDelegate.idsCapabilitiesChecker(_:didUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for IDSCapabilitiesChecker()
{
  return self;
}

uint64_t method lookup function for IDSCapabilitiesChecker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IDSCapabilitiesChecker);
}

uint64_t dispatch thunk of IDSCapabilitiesChecker.participantCapabilities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of IDSCapabilitiesChecker.delegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of IDSCapabilitiesChecker.delegate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of IDSCapabilitiesChecker.delegate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of IDSCapabilitiesChecker.__allocating_init(participants:lookupManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of IDSCapabilitiesChecker.capabilitiesForHandle(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))() & 0xFFFFFFFFFFFFLL;
}

uint64_t dispatch thunk of IDSCapabilitiesChecker.update(withParticipants:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t getEnumTagSinglePayload for IDSCapabilitiesChecker.Capabilities(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[6]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IDSCapabilitiesChecker.Capabilities(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for IDSCapabilitiesChecker.Capabilities(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for IDSCapabilitiesChecker.Capabilities(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSCapabilitiesChecker.Capabilities()
{
  return &type metadata for IDSCapabilitiesChecker.Capabilities;
}

uint64_t dispatch thunk of IDSLookupManager.beginQuery(withDestinations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of IDSLookupManager.capabilities(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))() & 0xFFFFFFFFFFFFLL;
}

uint64_t getEnumTagSinglePayload for IDSCapabilitiesChecker.ParticipantDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C317092C);
}

uint64_t sub_1C317092C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for IDSCapabilitiesChecker.ParticipantDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31709D0);
}

void sub_1C31709D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for IDSCapabilitiesChecker.ParticipantDestination()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of (key: UUID, value: IDSCapabilitiesChecker.Capabilities)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: IDSCapabilitiesChecker.Capabilities)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id ConversationControlsLagunaMenuButtonProvider.activity.getter()
{
  unint64_t v1 = *(void **)(v0 + 160);
  if (v1)
  {
    id v2 = objc_msgSend(v1, sel_activity);
    if (v2) {
      return v2;
    }
  }
  uint64_t v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 136)) + 0x8D0))();
  if (!v4) {
    return 0;
  }
  unsigned int v5 = v4;
  id v3 = objc_msgSend(v4, sel_activity);

  if (v3)
  {
    id v6 = objc_msgSend(v3, sel_metadata);
    if (!v6
      || (uint64_t v7 = v6, v8 = objc_msgSend(v6, sel_supportsContinuationOnTV), v7, (v8 & 1) == 0))
    {

      return 0;
    }
  }
  return v3;
}

uint64_t ConversationControlsLagunaMenuButtonProvider.__allocating_init(controlsManager:context:menuHostViewController:suggestion:isInSecondaryBanner:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6)
{
  return ConversationControlsLagunaMenuButtonProvider.init(controlsManager:context:menuHostViewController:suggestion:isInSecondaryBanner:)(a1, a2, a3, a4, a5, a6);
}

uint64_t ConversationControlsLagunaMenuButtonProvider.init(controlsManager:context:menuHostViewController:suggestion:isInSecondaryBanner:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6)
{
  *(void *)(v6 + 160) = 0;
  *(unsigned char *)(v6 + 169) = 0;
  *(void *)(v6 + 176) = 0;
  swift_retain();
  OUTLINED_FUNCTION_47();
  *(void *)(v6 + 184) = MEMORY[0x1C87730B0]();
  OUTLINED_FUNCTION_47();
  *(void *)(v6 + 192) = MEMORY[0x1C87730B0](0xD00000000000001ALL);
  Class v11 = *(void **)(v6 + 160);
  *(void *)(v6 + 160) = a5;
  id v12 = a5;

  *(unsigned char *)(v6 + 168) = a6;
  swift_release();
  id v13 = a3;
  id v14 = a1;
  uint64_t v15 = ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
  LODWORD(a3) = *(unsigned __int8 *)(v15 + 168);
  uint64_t v16 = self;
  swift_retain();
  if (a3 != 1) {
    goto LABEL_4;
  }
  ControlsButtonProvider.backgroundStyle.setter(objc_msgSend(v16, sel_whiteColor), 0, 64);
  swift_retain();
  ControlsButtonProvider.foregroundColor.setter(objc_msgSend(v16, sel_systemBlackColor));
  swift_release();
  uint64_t v16 = self;
  uint64_t v17 = *MEMORY[0x1E4FB28D0];
  swift_retain();
  Class v18 = (Class)objc_msgSend(v16, sel__preferredFontForTextStyle_variant_, v17, 264);
  if (!v18)
  {
    __break(1u);
LABEL_4:
    ControlsButtonProvider.backgroundStyle.setter(objc_msgSend(v16, sel_systemGreenColor), 0, 64);
    swift_retain();
    Class v18 = ControlsButtonProvider.prominentTitleFont.getter();
  }
  ControlsButtonProvider.titleFont.setter(v18);
  swift_release();
  uint64_t v19 = self;
  swift_retain();
  uint64_t v20 = (objc_class *)objc_msgSend(v19, sel_conversationKit);
  OUTLINED_FUNCTION_4_6();
  v21.super.Class isa = v20;
  uint64_t v26 = OUTLINED_FUNCTION_2_29(v22, v23, v24, v25, v21);
  uint64_t v28 = v27;

  ControlsButtonProvider.title.setter(v26, v28);
  swift_release_n();

  return v15;
}

Swift::Void __swiftcall ConversationControlsLagunaMenuButtonProvider.buttonChanged()()
{
  ControlsButtonProvider.buttonChanged()();
  OUTLINED_FUNCTION_10_14();
  uint64_t v1 = MEMORY[0x1C8776240]();
  if (v1)
  {
    id v2 = (void *)v1;
    ConversationControlsLagunaMenuButtonProvider.updateButtonLabelVisibility()();
    OUTLINED_FUNCTION_47();
    outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(0xD000000000000013, v3, v2);
    objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v0, sel_lagunaHandoffButtonTapped, 0x2000);
  }
}

void ConversationControlsLagunaMenuButtonProvider.updateButtonLabelVisibility()()
{
  swift_beginAccess();
  uint64_t v1 = (void *)MEMORY[0x1C8776240](v0 + 16);
  if (v1)
  {
    id v2 = v1;
    int v3 = *(unsigned __int8 *)(v0 + 169);
    id v4 = objc_msgSend(v1, sel_titleLabel);
    if (v4)
    {
      unsigned int v5 = v4;
      double v6 = 1.0;
      if (v3) {
        double v6 = 0.0;
      }
      objc_msgSend(v4, sel_setAlpha_, v6);
    }
  }
}

uint64_t ConversationControlsLagunaMenuButtonProvider.buttonConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConversationControlsMenuButtonProvider.buttonConfiguration.getter(a1);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FB1270], v2);
  return UIButton.Configuration.buttonSize.setter();
}

Swift::Bool __swiftcall ConversationControlsLagunaMenuButtonProvider.shouldEnableMenu()()
{
  id v1 = ConversationControlsLagunaMenuButtonProvider.activity.getter();

  if (v1) {
    char v2 = *(unsigned char *)(v0 + 169) ^ 1;
  }
  else {
    char v2 = 0;
  }
  return v2 & 1;
}

id ConversationControlsLagunaMenuButtonProvider.spinnerView.getter()
{
  id v1 = *(void **)(v0 + 176);
  if (v1)
  {
    id v2 = *(id *)(v0 + 176);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIActivityIndicatorView);
    UIActivityIndicatorView.init(style:size:)(v4, ConversationKit_PlatformActivityIndicatorStyle_spinner, ConversationKit_PlatformActivityIndicatorSize_medium);
    unsigned int v5 = *(void **)(v0 + 176);
    *(void *)(v3 + 176) = v6;
    id v2 = v6;

    id v1 = 0;
  }
  id v7 = v1;
  return v2;
}

Swift::Void __swiftcall ConversationControlsLagunaMenuButtonProvider.lagunaHandoffButtonTapped()()
{
  OUTLINED_FUNCTION_10_14();
  id v1 = (void *)MEMORY[0x1C8776240]();

  if (v1 && (*(unsigned char *)(v0 + 169) & 1) == 0 && !ConversationControlsLagunaMenuButtonProvider.shouldEnableMenu()())
  {
    id v2 = ConversationControlsLagunaMenuButtonProvider.activity.getter();
    ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)(0, v2);
  }
}

void ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)(char a1, void *a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  double v6 = (void *)MEMORY[0x1C8776240](v2 + 16);

  if (v6 && (*(unsigned char *)(v3 + 169) & 1) == 0)
  {
    *(unsigned char *)(v3 + 169) = 1;
    ConversationControlsLagunaMenuButtonProvider.showLoading()();
    ConversationControlsMenuButtonProvider.disableMenuContainerViewInteraction()();
    uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v3 + 136)) + 0x4C0))();
    if (v7)
    {
      unsigned __int8 v8 = (void *)v7;
      uint64_t v9 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      ConduitLagunaNoticeManager.pushSession(lightweightHandoff:selectedActivity:completion:)(a1 & 1, a2, (uint64_t)partial apply for closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:), v9);

      swift_release_n();
    }
  }
}

void ConversationControlsLagunaMenuButtonProvider.showLoading()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v0 + 16);
  if (v2)
  {
    id v3 = (id)v2;
    id v4 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
    id v5 = objc_msgSend(v4, sel_superview);

    if (!v5)
    {
      objc_msgSend(v3, sel_intrinsicContentSize);
      double v7 = v6;
      double v9 = v8;
      ConversationControlsLagunaMenuButtonProvider.updateButtonLabelVisibility()();
      id v10 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      int v11 = *(unsigned __int8 *)(v1 + 168);
      id v12 = self;
      id v13 = &selRef_systemGrayColor;
      if (!v11) {
        id v13 = &selRef_whiteColor;
      }
      id v14 = [v12 *v13];
      objc_msgSend(v10, sel_setColor_, v14);

      id v15 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      objc_msgSend(v15, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

      id v16 = v3;
      id v17 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      objc_msgSend(v16, sel_addSubview_, v17);

      Class v18 = self;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1C3769580;
      id v20 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      id v21 = objc_msgSend(v20, sel_centerYAnchor);

      id v22 = objc_msgSend(v16, sel_centerYAnchor);
      id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

      *(void *)(v19 + 32) = v23;
      id v24 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      id v25 = objc_msgSend(v24, sel_centerXAnchor);

      id v26 = objc_msgSend(v16, sel_centerXAnchor);
      id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

      *(void *)(v19 + 40) = v27;
      id v28 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      id v29 = objc_msgSend(v28, sel_widthAnchor);

      id v30 = objc_msgSend(v29, sel_constraintEqualToConstant_, v7);
      *(void *)(v19 + 48) = v30;
      id v31 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      id v32 = objc_msgSend(v31, sel_heightAnchor);

      id v33 = objc_msgSend(v32, sel_constraintEqualToConstant_, v9);
      *(void *)(v19 + 56) = v33;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v18, sel_activateConstraints_, isa, v19);

      id v3 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
      objc_msgSend(v3, sel_startAnimating);
    }
  }
}

uint64_t closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    aBlock[4] = partial apply for closure #1 in closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:);
    aBlock[5] = v1;
    uint64_t v13 = static OS_dispatch_queue.main.getter();
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    id aBlock[3] = &block_descriptor_32;
    uint64_t v2 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    uint64_t v3 = type metadata accessor for DispatchQoS();
    v12[1] = v12;
    uint64_t v4 = *(void *)(v3 - 8);
    MEMORY[0x1F4188790](v3);
    double v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchQoS.unspecified.getter();
    uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
    v12[0] = v12;
    uint64_t v8 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](v7);
    id v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    aBlock[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    int v11 = (void *)v13;
    MEMORY[0x1C8773BA0](0, v6, v10, v2);
    _Block_release(v2);
    swift_release();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

void closure #1 in closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)(uint64_t a1)
{
  *(unsigned char *)(a1 + 169) = 0;
  ConversationControlsLagunaMenuButtonProvider.hideLoading()();
  v1._countAndFlagsBits = 0x6D6F432068737550;
  v1._object = (void *)0xED00006574656C70;
  ConversationControlsMenuButtonProvider.dismissMenu(context:)(v1);
}

void ConversationControlsLagunaMenuButtonProvider.hideLoading()()
{
  swift_beginAccess();
  Swift::String v1 = (void *)MEMORY[0x1C8776240](v0 + 16);

  if (v1)
  {
    id v2 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
    objc_msgSend(v2, sel_stopAnimating);

    id v3 = ConversationControlsLagunaMenuButtonProvider.spinnerView.getter();
    objc_msgSend(v3, sel_removeFromSuperview);

    ConversationControlsLagunaMenuButtonProvider.updateButtonLabelVisibility()();
  }
}

id ConversationControlsLagunaMenuButtonProvider.shareplayActionIdentifier.getter()
{
  return *(id *)(v0 + 184);
}

id ConversationControlsLagunaMenuButtonProvider.facetimeActionIdentifier.getter()
{
  return *(id *)(v0 + 192);
}

Class ConversationControlsLagunaMenuButtonProvider.menu(for:)()
{
  Swift::String v1 = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 592))() & 1) == 0) {
    return 0;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationControls);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Displaying Laguna menu", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  double v6 = (void *)v1[17];
  UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
  id v7 = ConversationControlsLagunaMenuButtonProvider.activity.getter();
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_2_54();
    OUTLINED_FUNCTION_4_6();
    v10.super.Class isa = v9;
    OUTLINED_FUNCTION_2_29(v11, v12, v13, v14, v10);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1C3769620;
    id v16 = objc_msgSend(v8, sel_concatenatedDescription);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v19;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v8 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_2_54();
    OUTLINED_FUNCTION_4_6();
    v21.super.Class isa = (Class)v8;
    OUTLINED_FUNCTION_2_29(v22, v23, v24, v25, v21);
  }

  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x320))())
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    id v26 = @nonobjc UIImage.__allocating_init(systemName:)();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    id v27 = (void *)v1[24];
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v28;
    *(void *)(v29 + 24) = v6;
    id v30 = v26;
    id v31 = v27;
    id v32 = v6;
    v62._rawValue = 0;
    OUTLINED_FUNCTION_5_59();
    id v33 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    MEMORY[0x1C87733A0](v33);
    OUTLINED_FUNCTION_6_50();
    if (v34) {
      OUTLINED_FUNCTION_4_57();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v35 = ConversationControlsLagunaMenuButtonProvider.activity.getter();
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = (void *)specialized static UIImage.image(named:)(0);
    id v38 = objc_msgSend(self, sel_labelColor);
    id v39 = objc_msgSend(v37, sel_imageWithTintColor_, v38);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    char v40 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_4_6();
    v41.super.Class isa = v40;
    OUTLINED_FUNCTION_2_29(v42, v43, v44, v45, v41);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1C3769620;
    id v47 = objc_msgSend(v36, sel_concatenatedDescription, 0xE000000000000000);
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;

    *(void *)(v46 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v46 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v46 + 32) = v48;
    *(void *)(v46 + 40) = v50;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int8x16_t v51 = (void *)v1[23];
    uint64_t v52 = swift_allocObject();
    swift_weakInit();
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v52;
    *(void *)(v53 + 24) = v36;
    id v54 = v39;
    id v55 = v51;
    id v56 = v36;
    v62._rawValue = 0;
    id v57 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    MEMORY[0x1C87733A0](v57);
    OUTLINED_FUNCTION_6_50();
    if (v34) {
      OUTLINED_FUNCTION_4_57();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  char v58 = (void *)*MEMORY[0x1E4FB2998];
  v64[0] = 0xD000000000000017;
  v64[1] = 0x80000001C379CF10;
  v64[2] = 2;
  v64[3] = v58;
  __int16 v65 = 0;
  uint64_t v66 = 4;
  char v67 = 0;
  uint64_t v68 = 0;
  id v59 = v58;
  static UIImage.symbolImage(for:)((uint64_t)v64);

  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  OUTLINED_FUNCTION_5_59();
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v60, v61, v69, (UIMenuIdentifier_optional)33, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v62).super.super.isa;
}

void closure #1 in ConversationControlsLagunaMenuButtonProvider.menu(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    uint64_t v6 = Strong + 16;
    swift_beginAccess();
    id v7 = (void *)MEMORY[0x1C8776240](v6);

    if (v7 && (*(unsigned char *)(v5 + 169) & 1) == 0)
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
      uint64_t v9 = a3;
      NSBundle v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v18 = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v9) + 0x290))())
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
          uint64_t v14 = String.init<A>(reflecting:)();
          unint64_t v16 = v15;
        }
        else
        {
          unint64_t v16 = 0xE300000000000000;
          uint64_t v14 = 7104878;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v10, v11, "Laguna start handoff of facetime: %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v13, -1, -1);
        MEMORY[0x1C87760E0](v12, -1, -1);
      }
      else
      {
      }
      id v17 = ConversationControlsLagunaMenuButtonProvider.activity.getter();
      ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)(0, v17);
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t closure #2 in ConversationControlsLagunaMenuButtonProvider.menu(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 16;
    swift_beginAccess();
    id v7 = (void *)MEMORY[0x1C8776240](v6);

    if (v7 && (*(unsigned char *)(v5 + 169) & 1) == 0)
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
      id v9 = a3;
      NSBundle v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v17 = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationActivity);
        id v14 = v9;
        uint64_t v15 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v10, v11, "Laguna start handoff of activity: %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v13, -1, -1);
        MEMORY[0x1C87760E0](v12, -1, -1);
      }
      else
      {
      }
      ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)(1, v9);
    }
    return swift_release();
  }
  return result;
}

void ConversationControlsLagunaMenuButtonProvider.__allocating_init(controlsManager:context:shape:menuHostViewController:)()
{
}

void ConversationControlsLagunaMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)()
{
}

void ConversationControlsLagunaMenuButtonProvider.__ivar_destroyer()
{
  Swift::String v1 = *(void **)(v0 + 192);
}

id *ConversationControlsLagunaMenuButtonProvider.deinit()
{
  uint64_t v0 = (id *)ConversationControlsMenuButtonProvider.deinit();

  return v0;
}

uint64_t ConversationControlsLagunaMenuButtonProvider.__deallocating_deinit()
{
  ConversationControlsLagunaMenuButtonProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3172844()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationControlsLagunaMenuButtonProvider.menu(for:)(uint64_t a1)
{
  closure #1 in ConversationControlsLagunaMenuButtonProvider.menu(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #2 in ConversationControlsLagunaMenuButtonProvider.menu(for:)(uint64_t a1)
{
  return closure #2 in ConversationControlsLagunaMenuButtonProvider.menu(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t type metadata accessor for ConversationControlsLagunaMenuButtonProvider()
{
  return self;
}

uint64_t method lookup function for ConversationControlsLagunaMenuButtonProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsLagunaMenuButtonProvider);
}

uint64_t dispatch thunk of ConversationControlsLagunaMenuButtonProvider.__allocating_init(controlsManager:context:menuHostViewController:suggestion:isInSecondaryBanner:)()
{
  return (*(uint64_t (**)(void))(v0 + 632))();
}

uint64_t partial apply for closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)()
{
  return closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)();
}

void partial apply for closure #1 in closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)()
{
  closure #1 in closure #1 in ConversationControlsLagunaMenuButtonProvider.pushSelected(lightweightHandoff:selectedActivity:)(v0);
}

uint64_t AnsweringMachineStatusService.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AnsweringMachineStatusService() + 20);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for AnsweringMachineStatusService()
{
  uint64_t result = type metadata singleton initialization cache for AnsweringMachineStatusService;
  if (!type metadata singleton initialization cache for AnsweringMachineStatusService) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AnsweringMachineStatusService.isInSupportedEnvirement.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AnsweringMachineStatusService() + 24));
  swift_retain();
  return v1;
}

Swift::Bool __swiftcall AnsweringMachineStatusService.isAvailable()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v18 - v7;
  int v9 = TUCallScreeningEnabled();
  uint64_t v10 = type metadata accessor for AnsweringMachineStatusService();
  if (v9)
  {
    if ((*(uint64_t (**)(uint64_t))(v1 + *(int *)(v10 + 24)))(v10)) {
      return 1;
    }
    OUTLINED_FUNCTION_0_51();
    v16(v8);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v17))
    {
      uint64_t v5 = v8;
      goto LABEL_10;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1C2F90000, v13, v17, "Answering Machine unavailable because we are not in a supported envirement", v15, 2u);
    uint64_t v5 = v8;
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_0_51();
  v12(v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1C2F90000, v13, v14, "Answering Machine unavailable because TUCallScreeningEnabled is NO", v15, 2u);
LABEL_8:
    MEMORY[0x1C87760E0](v15, -1, -1);
  }
LABEL_10:

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t AnsweringMachineStatusService.init(logger:isInSupportedEnvirement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  uint64_t v8 = type metadata accessor for AnsweringMachineStatusService();
  int v9 = (char *)a4 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a1, v10);
  uint64_t v12 = (void *)((char *)a4 + *(int *)(v8 + 24));
  void *v12 = a2;
  v12[1] = a3;
  return result;
}

void **initializeBufferWithCopyOfBuffer for AnsweringMachineStatusService(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    int v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (void **)((char *)v7 + v14);
    unint64_t v16 = (void **)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
  }
  swift_retain();
  return v7;
}

uint64_t destroy for AnsweringMachineStatusService(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_release();
}

void **initializeWithCopy for AnsweringMachineStatusService(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  int v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void **)((char *)a1 + v13);
  uint64_t v15 = (void **)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

void **assignWithCopy for AnsweringMachineStatusService(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void **)((char *)a1 + v13);
  uint64_t v15 = (void **)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for AnsweringMachineStatusService(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **assignWithTake for AnsweringMachineStatusService(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnsweringMachineStatusService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3173144);
}

uint64_t sub_1C3173144(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AnsweringMachineStatusService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31731E0);
}

void *sub_1C31731E0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AnsweringMachineStatusService()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ReactionsViewConstraintManager.__allocating_init(localParticipantView:reactionsView:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  ReactionsViewConstraintManager.init(localParticipantView:reactionsView:)(a1, a2);
  return v4;
}

void *ReactionsViewConstraintManager.init(localParticipantView:reactionsView:)(void *a1, id a2)
{
  v2[6] = MEMORY[0x1E4FBC860];
  id v5 = objc_msgSend(a2, sel_topAnchor);
  id v6 = objc_msgSend(a1, sel_bottomAnchor);
  id v7 = OUTLINED_FUNCTION_5_60((uint64_t)v6, sel_constraintGreaterThanOrEqualToAnchor_constant_);

  v2[2] = v7;
  id v8 = objc_msgSend(a2, sel_bottomAnchor);
  id v9 = objc_msgSend(a1, sel_topAnchor);
  id v10 = OUTLINED_FUNCTION_5_60((uint64_t)v9, sel_constraintGreaterThanOrEqualToAnchor_constant_);

  v2[3] = v10;
  id v11 = objc_msgSend(a2, sel_leadingAnchor);
  id v12 = objc_msgSend(a1, sel_leadingAnchor);
  id v13 = OUTLINED_FUNCTION_5_60((uint64_t)v12, sel_constraintEqualToAnchor_constant_);

  v2[4] = v13;
  id v14 = objc_msgSend(a2, sel_trailingAnchor);
  id v15 = objc_msgSend(a1, sel_trailingAnchor);
  id v16 = OUTLINED_FUNCTION_5_60((uint64_t)v15, sel_constraintEqualToAnchor_constant_);

  v2[5] = v16;
  return v2;
}

uint64_t ReactionsViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 17);
  uint64_t v4 = v1 + 6;
  swift_beginAccess();
  v2[6] = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  if (v3 >> 6)
  {
    if (v3 >> 6 != 1) {
      return swift_bridgeObjectRetain();
    }
    v3 &= 0x3Fu;
  }
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_20;
    default:
      id v5 = (void *)v2[2];
      id v6 = (void *)v2[4];
      OUTLINED_FUNCTION_0_52();
      OUTLINED_FUNCTION_4_58();
      if (v7)
      {
        OUTLINED_FUNCTION_1_72();
        id v19 = v6;
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_3_20();
      }
      else
      {
        OUTLINED_FUNCTION_2_55();
        id v8 = v6;
      }
      uint64_t v9 = v3 + 2;
      if (!__OFADD__(v3, 2)) {
        goto LABEL_23;
      }
      __break(1u);
LABEL_10:
      id v5 = (void *)v2[2];
      id v6 = (void *)v2[5];
      OUTLINED_FUNCTION_0_52();
      OUTLINED_FUNCTION_4_58();
      if (v10)
      {
        OUTLINED_FUNCTION_1_72();
        id v20 = v6;
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_3_20();
      }
      else
      {
        OUTLINED_FUNCTION_2_55();
        id v11 = v6;
      }
      uint64_t v9 = v3 + 2;
      if (!__OFADD__(v3, 2)) {
        goto LABEL_23;
      }
      __break(1u);
LABEL_15:
      id v5 = (void *)v2[3];
      id v6 = (void *)v2[4];
      OUTLINED_FUNCTION_0_52();
      OUTLINED_FUNCTION_4_58();
      if (v12)
      {
        OUTLINED_FUNCTION_1_72();
        id v21 = v6;
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_3_20();
      }
      else
      {
        OUTLINED_FUNCTION_2_55();
        id v13 = v6;
      }
      uint64_t v9 = v3 + 2;
      if (__OFADD__(v3, 2))
      {
        __break(1u);
LABEL_20:
        id v5 = (void *)v2[3];
        id v6 = (void *)v2[5];
        OUTLINED_FUNCTION_0_52();
        OUTLINED_FUNCTION_4_58();
        if (v14)
        {
          OUTLINED_FUNCTION_1_72();
          id v22 = v6;
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          OUTLINED_FUNCTION_3_20();
        }
        else
        {
          OUTLINED_FUNCTION_2_55();
          id v15 = v6;
        }
        uint64_t v9 = v3 + 2;
        if (__OFADD__(v3, 2))
        {
          __break(1u);
          JUMPOUT(0x1C317375CLL);
        }
      }
LABEL_23:
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v9, 1);
      specialized Array._endMutation()();
      id v16 = v5;
      MEMORY[0x1C87733A0]();
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v17 = v6;
      MEMORY[0x1C87733A0]();
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

      break;
  }
  return swift_bridgeObjectRetain();
}

id *ReactionsViewConstraintManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ReactionsViewConstraintManager.__deallocating_deinit()
{
  ReactionsViewConstraintManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:) in conformance ReactionsViewConstraintManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t type metadata accessor for ReactionsViewConstraintManager()
{
  return self;
}

uint64_t method lookup function for ReactionsViewConstraintManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ReactionsViewConstraintManager);
}

uint64_t dispatch thunk of ReactionsViewConstraintManager.__allocating_init(localParticipantView:reactionsView:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ReactionsViewConstraintManager.constraintsForLayout(_:in:deviceOrientation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

long long *BrandedIconView.Constants.iconSize.unsafeMutableAddressor()
{
  if (one-time initialization token for iconSize != -1) {
    swift_once();
  }
  return &static BrandedIconView.Constants.iconSize;
}

UIImage_optional __swiftcall UIImage.__allocating_init(contentsOfFile:)(Swift::String contentsOfFile)
{
  object = contentsOfFile._object;
  uint64_t countAndFlagsBits = contentsOfFile._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = (objc_class *)objc_msgSend(v3, sel_initWithContentsOfFile_, v4);

  uint64_t v7 = v5;
  result.value.super.Class isa = v7;
  result.is_nil = v6;
  return result;
}

__n128 one-time initialization function for iconSize()
{
  __asm { FMOV            V0.2D, #14.0 }
  static BrandedIconView.Constants.iconSize = (__int128)result;
  return result;
}

double static BrandedIconView.Constants.iconSize.getter()
{
  if (one-time initialization token for iconSize != -1) {
    swift_once();
  }
  return *(double *)&static BrandedIconView.Constants.iconSize;
}

void one-time initialization function for cornerRadius()
{
  static BrandedIconView.Constants.cornerRadius = 0x4010000000000000;
}

{
  static Layout.Captions.cornerRadius = 0x4024000000000000;
}

{
  static Layout.AnnotationDisc.cornerRadius = 0x4026000000000000;
}

uint64_t *BrandedIconView.Constants.cornerRadius.unsafeMutableAddressor()
{
  if (one-time initialization token for cornerRadius != -1) {
    swift_once();
  }
  return &static BrandedIconView.Constants.cornerRadius;
}

double static BrandedIconView.Constants.cornerRadius.getter()
{
  if (one-time initialization token for cornerRadius != -1) {
    swift_once();
  }
  return *(double *)&static BrandedIconView.Constants.cornerRadius;
}

id BrandedIconView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id BrandedIconView.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit15BrandedIconView_icon;
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1838]);
  Swift::Bool v6 = v1;
  id v7 = objc_msgSend(v5, sel_initWithImage_, 0);
  id v8 = objc_msgSend(v7, sel_layer);
  objc_msgSend(v8, sel_setMasksToBounds_, 1);

  objc_msgSend(v7, sel_setContentMode_, 2);
  objc_msgSend(v7, sel_setAutoresizingMask_, 18);
  id v9 = objc_msgSend(v7, sel_layer);
  if (one-time initialization token for cornerRadius != -1) {
    swift_once();
  }
  objc_msgSend(v9, sel_setCornerRadius_, *(double *)&static BrandedIconView.Constants.cornerRadius);

  *(void *)&v1[v4] = v7;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationControls);
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v13 = 0;
    _os_log_impl(&dword_1C2F90000, v11, v12, "Unavailable initializer used.", v13, 2u);
    OUTLINED_FUNCTION_3();
  }

  v16.id receiver = v6;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, sel_initWithCoder_, a1);

  return v14;
}

char *BrandedIconView.__allocating_init(telephonyCall:)(objc_class *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  id v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(ObjectType, a2);
  unsigned int v8 = objc_msgSend(v7, sel_isTelephonyProvider);

  if (v8)
  {
    Class v45 = v3;
    id v9 = a1;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void *)(v11 + 64);
    MEMORY[0x1F4188790](v10);
    id v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    MEMORY[0x1F4188790](v14 - 8);
    objc_super v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v17 = ObjectType;
    uint64_t v18 = v10;
    (*(void (**)(uint64_t, uint64_t))(a2 + 80))(v17, a2);
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v10) == 1)
    {
      swift_unknownObjectRelease();
      outlined destroy of URL?((uint64_t)v16);
    }
    else
    {
      v44[2] = v44;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v10);
      type metadata accessor for UIImage();
      v27._uint64_t countAndFlagsBits = URL.path.getter();
      unint64_t v28 = (unint64_t)UIImage.__allocating_init(contentsOfFile:)(v27);
      if (v28)
      {
        uint64_t v29 = (void *)v28;
        id v30 = objc_allocWithZone(v45);
        uint64_t v25 = BrandedIconView.init(image:)(v29);
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_3_8();
        v31();
        return v25;
      }
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationControls);
      MEMORY[0x1F4188790](v33);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      char v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        v44[1] = v44;
        uint64_t v37 = v36;
        v44[0] = swift_slowAlloc();
        uint64_t v47 = v44[0];
        *(_DWORD *)uint64_t v37 = 136446466;
        uint64_t v38 = _typeName(_:qualified:)();
        Class v45 = v9;
        uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        lazy protocol witness table accessor for type URL and conformance URL();
        uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v42 = *(void (**)(void))(v11 + 8);
        OUTLINED_FUNCTION_3_8();
        v42();
        _os_log_impl(&dword_1C2F90000, v34, v35, "[%{public}s] Failed to load branded call image from file %s. ", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();

        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_3_8();
        v42();
      }
      else
      {

        swift_unknownObjectRelease();
        uint64_t v43 = *(void (**)(void))(v11 + 8);
        OUTLINED_FUNCTION_3_8();
        v43();
        ((void (*)(char *, uint64_t))v43)(v13, v18);
      }
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationControls);
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)id v22 = 136446210;
      uint64_t v23 = _typeName(_:qualified:)();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v20, v21, "[%{public}s] Non-telephony call passed into telephony initalizer", v22, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }

    swift_unknownObjectRelease();
  }
  return 0;
}

char *BrandedIconView.__allocating_init(image:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return BrandedIconView.init(image:)(a1);
}

char *BrandedIconView.init(image:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit15BrandedIconView_icon;
  id v6 = objc_allocWithZone(MEMORY[0x1E4FB1838]);
  id v7 = v2;
  id v8 = objc_msgSend(v6, sel_initWithImage_, 0);
  id v9 = objc_msgSend(v8, sel_layer);
  objc_msgSend(v9, sel_setMasksToBounds_, 1);

  objc_msgSend(v8, sel_setContentMode_, 2);
  objc_msgSend(v8, sel_setAutoresizingMask_, 18);
  id v10 = objc_msgSend(v8, sel_layer);
  if (one-time initialization token for cornerRadius != -1) {
    swift_once();
  }
  objc_msgSend(v10, sel_setCornerRadius_, *(double *)&static BrandedIconView.Constants.cornerRadius);

  *(void *)&v7[v5] = v8;
  double v11 = OUTLINED_FUNCTION_1_73();
  uint64_t v14 = (char *)objc_msgSendSuper2(v12, v13, v11, v7, ObjectType);
  uint64_t v15 = *(void **)&v14[OBJC_IVAR____TtC15ConversationKit15BrandedIconView_icon];
  objc_super v16 = v14;
  objc_msgSend(v15, sel_setImage_, a1);
  uint64_t v17 = v16;
  id v18 = v15;
  objc_msgSend(v17, sel_addSubview_, v18);

  return v17;
}

Swift::Void __swiftcall BrandedIconView.layoutSubviews()()
{
  v2.id receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v2, sel_layoutSubviews);
  unint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit15BrandedIconView_icon];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);
}

CGSize __swiftcall BrandedIconView.sizeThatFits(_:)(CGSize a1)
{
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit15BrandedIconView_icon), sel_sizeThatFits_, a1.width, a1.height);
  result.double height = v3;
  result.double width = v2;
  return result;
}

id BrandedIconView.intrinsicContentSize.getter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit15BrandedIconView_icon), sel_intrinsicContentSize);
}

void BrandedIconView.init(frame:)()
{
}

objc_super *IncomingCallCombinedSubtitleBadgeView.__allocating_init(brandedIcon:multiSimBadge:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return IncomingCallCombinedSubtitleBadgeView.init(brandedIcon:multiSimBadge:)(a1, a2);
}

objc_super *IncomingCallCombinedSubtitleBadgeView.init(brandedIcon:multiSimBadge:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_horizontalSpacing) = 0x4010000000000000;
  *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_brandedIcon) = a1;
  *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_multiSimBadge) = a2;
  uint64_t v14 = v3;
  uint64_t v15 = ObjectType;
  id v7 = a1;
  id v8 = a2;
  double v9 = OUTLINED_FUNCTION_1_73();
  double v11 = -[objc_super initWithFrame:](v10, sel_initWithFrame_, v9, v14, v15);
  [(objc_super *)v11 addSubview:v7];
  if (a2)
  {
    uint64_t v12 = v11;
    [(objc_super *)v12 addSubview:v8];
  }
  return v11;
}

void IncomingCallCombinedSubtitleBadgeView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_horizontalSpacing] = 0x4010000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

CGSize __swiftcall IncomingCallCombinedSubtitleBadgeView.sizeThatFits(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  double v4 = IncomingCallCombinedSubtitleBadgeView.badgeSizeFitting(_:)();
  double v6 = v5;
  if (one-time initialization token for iconSize != -1) {
    swift_once();
  }
  double v7 = 0.0;
  if (v4 > 2.22507386e-308) {
    double v7 = *(double *)(v1 + OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_horizontalSpacing);
  }
  if (*((double *)&static BrandedIconView.Constants.iconSize + 1) > v6) {
    double v6 = *((double *)&static BrandedIconView.Constants.iconSize + 1);
  }
  double v8 = v4 + *(double *)&static BrandedIconView.Constants.iconSize + v7;
  if (v8 > width || v6 > height)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationControls);
    double v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      type metadata accessor for CGSize(0);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      uint64_t v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v11, v12, "Returning a size %{public}s that is larger than the fitting size %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
  }
  double v18 = v8;
  double v19 = v6;
  result.double height = v19;
  result.double width = v18;
  return result;
}

double IncomingCallCombinedSubtitleBadgeView.badgeSizeFitting(_:)()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_multiSimBadge);
  if (!v1) {
    return 0.0;
  }
  objc_msgSend(v1, sel_systemLayoutSizeFittingSize_);
  return result;
}

Swift::Void __swiftcall IncomingCallCombinedSubtitleBadgeView.layoutSubviews()()
{
  uint64_t v1 = v0;
  v23.id receiver = v0;
  v23.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v23, sel_layoutSubviews);
  if (one-time initialization token for iconSize != -1) {
    swift_once();
  }
  long long v2 = static BrandedIconView.Constants.iconSize;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_brandedIcon];
  objc_msgSend(v3, sel_setBounds_, 0.0, 0.0, static BrandedIconView.Constants.iconSize);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v3, sel_setCenter_, *(double *)&v2 * 0.5, CGRectGetHeight(v24) * 0.5);
  double v4 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_multiSimBadge];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend(v0, sel_bounds);
    double v6 = IncomingCallCombinedSubtitleBadgeView.badgeSizeFitting(_:)();
    objc_msgSend(v5, sel_setBounds_, 0.0, 0.0, v6, v7);
    id v8 = v5;
    objc_msgSend(v3, sel_frame);
    CGFloat v9 = CGRectGetMaxX(v25)
       + *(double *)&v1[OBJC_IVAR____TtC15ConversationKit37IncomingCallCombinedSubtitleBadgeView_horizontalSpacing];
    objc_msgSend(v8, sel_frame);
    CGFloat v11 = v9 + v10 * 0.5;
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v8, sel_setCenter_, v11, CGRectGetHeight(v26) * 0.5);
  }
  if (objc_msgSend(v1, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIView?>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
    *(void *)(inited + 32) = v3;
    *(void *)(inited + 40) = v4;
    uint64_t v21 = inited;
    specialized Array._endMutation()();
    uint64_t v13 = v21;
    unint64_t v22 = MEMORY[0x1E4FBC860];
    uint64_t v14 = *(void **)(v13 + 32);
    if (v14)
    {
      id v15 = v14;
      id v16 = v4;
      MEMORY[0x1C87733A0](v3);
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        OUTLINED_FUNCTION_6_3();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      id v17 = v4;
      id v18 = v3;
    }
    double v19 = *(void **)(v13 + 40);
    if (v19)
    {
      id v20 = v19;
      MEMORY[0x1C87733A0]();
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        OUTLINED_FUNCTION_6_3();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    swift_bridgeObjectRelease();
    specialized Sequence.forEach(_:)(v22, v1);
    swift_bridgeObjectRelease();
  }
}

id BrandedIconView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void IncomingCallCombinedSubtitleBadgeView.init(frame:)()
{
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t type metadata accessor for BrandedIconView()
{
  return self;
}

uint64_t method lookup function for BrandedIconView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BrandedIconView);
}

uint64_t dispatch thunk of BrandedIconView.__allocating_init(image:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

ValueMetadata *type metadata accessor for BrandedIconView.Constants()
{
  return &type metadata for BrandedIconView.Constants;
}

uint64_t type metadata accessor for IncomingCallCombinedSubtitleBadgeView()
{
  return self;
}

uint64_t method lookup function for IncomingCallCombinedSubtitleBadgeView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IncomingCallCombinedSubtitleBadgeView);
}

uint64_t dispatch thunk of IncomingCallCombinedSubtitleBadgeView.__allocating_init(brandedIcon:multiSimBadge:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t GradientView.colors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for GradientView.colors : GradientView@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC15ConversationKit12GradientView_colors);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

void key path setter for GradientView.colors : GradientView()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  GradientView.colors.setter(v0);
}

void GradientView.colors.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit12GradientView_colors);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  GradientView.updateGradient()();
}

void GradientView.updateGradient()()
{
  uint64_t v1 = v0;
  long long v2 = (void *)GradientView.gradientLayer.getter();
  uint64_t v3 = &v0[OBJC_IVAR____TtC15ConversationKit12GradientView_colors];
  swift_beginAccess();
  uint64_t v4 = *(void *)v3;
  if (!(*(void *)v3 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_14:
    outlined bridged method (mbnn) of @objc CAGradientLayer.colors.setter(v7, v2);

    objc_msgSend(v1, sel_setNeedsDisplay);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v15 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v15;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x1C87744F0](v6, v4);
      }
      else {
        id v8 = *(id *)(v4 + 8 * v6 + 32);
      }
      id v9 = v8;
      id v10 = objc_msgSend(v8, sel_CGColor, (void)v13);
      type metadata accessor for CGColorRef(0);
      uint64_t v14 = v11;

      *(void *)&long long v13 = v10;
      uint64_t v15 = v7;
      unint64_t v12 = *(void *)(v7 + 16);
      if (v12 >= *(void *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v7 = v15;
      }
      ++v6;
      *(void *)(v7 + 16) = v12 + 1;
      outlined init with take of Any(&v13, (_OWORD *)(v7 + 32 * v12 + 32));
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
}

void (*GradientView.colors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return GradientView.colors.modify;
}

void GradientView.colors.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    GradientView.updateGradient()();
  }
}

uint64_t GradientView.interpolations.getter()
{
  uint64_t v0 = (void *)GradientView.gradientLayer.getter();
  return outlined bridged method (ob) of @objc CAGradientLayer.interpolations.getter(v0);
}

void key path setter for GradientView.interpolations : GradientView()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  GradientView.interpolations.setter(v0);
}

void GradientView.interpolations.setter(uint64_t a1)
{
  long long v2 = (void *)GradientView.gradientLayer.getter();
  if (a1)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAMediaTimingFunction);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v2, sel_setInterpolations_, isa);
}

uint64_t GradientView.gradientLayer.getter()
{
  id v1 = objc_msgSend(v0, sel_layer);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result)
  {

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void (*GradientView.interpolations.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)GradientView.gradientLayer.getter();
  *a1 = outlined bridged method (ob) of @objc CAGradientLayer.interpolations.getter(v3);
  return GradientView.interpolations.modify;
}

void GradientView.interpolations.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    GradientView.interpolations.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    GradientView.interpolations.setter(*a1);
  }
}

double GradientView.startPoint.getter()
{
  return GradientView.startPoint.getter((SEL *)&selRef_startPoint);
}

void key path setter for GradientView.startPoint : GradientView(double *a1)
{
}

void GradientView.startPoint.setter(double a1, double a2)
{
}

void (*GradientView.startPoint.modify(void *a1))(double *a1, uint64_t a2)
{
  a1[2] = v1;
  uint64_t v3 = (void *)GradientView.gradientLayer.getter();
  objc_msgSend(v3, sel_startPoint);
  uint64_t v5 = v4;
  uint64_t v7 = v6;

  *a1 = v5;
  a1[1] = v7;
  return GradientView.startPoint.modify;
}

void GradientView.startPoint.modify(double *a1, uint64_t a2)
{
}

double GradientView.endPoint.getter()
{
  return GradientView.startPoint.getter((SEL *)&selRef_endPoint);
}

double GradientView.startPoint.getter(SEL *a1)
{
  uint64_t v2 = (void *)GradientView.gradientLayer.getter();
  [v2 *a1];
  double v4 = v3;

  return v4;
}

void key path setter for GradientView.endPoint : GradientView(double *a1)
{
}

void GradientView.endPoint.setter(double a1, double a2)
{
}

void GradientView.startPoint.setter(SEL *a1, double a2, double a3)
{
  id v6 = (id)GradientView.gradientLayer.getter();
  objc_msgSend(v6, *a1, a2, a3);
}

void (*GradientView.endPoint.modify(void *a1))(double *a1, uint64_t a2)
{
  a1[2] = v1;
  double v3 = (void *)GradientView.gradientLayer.getter();
  objc_msgSend(v3, sel_endPoint);
  uint64_t v5 = v4;
  uint64_t v7 = v6;

  *a1 = v5;
  a1[1] = v7;
  return GradientView.endPoint.modify;
}

void GradientView.endPoint.modify(double *a1, uint64_t a2)
{
}

void GradientView.startPoint.modify(double *a1, uint64_t a2, SEL *a3)
{
  double v4 = *a1;
  double v5 = a1[1];
  id v6 = (id)GradientView.gradientLayer.getter();
  objc_msgSend(v6, *a3, v4, v5);
}

id GradientView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id GradientView.init()()
{
  return objc_msgSend(v0, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
}

id GradientView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id GradientView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit12GradientView_colors) = MEMORY[0x1E4FBC860];
  uint64_t v7 = ObjectType;
  double v2 = OUTLINED_FUNCTION_6_2();
  id v5 = objc_msgSendSuper2(v3, v4, v2, v0, v7);
  GradientView.updateGradient()();

  return v5;
}

id GradientView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void GradientView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit12GradientView_colors] = MEMORY[0x1E4FBC860];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static GradientView.layerClass.getter()
{
  return type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAGradientLayer);
}

id GradientView.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t outlined bridged method (ob) of @objc CAGradientLayer.interpolations.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_interpolations);

  if (!v2) {
    return 0;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAMediaTimingFunction);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1C3175D28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GradientView.interpolations.getter();
  *a1 = result;
  return result;
}

void sub_1C3175D58(uint64_t a1@<X8>)
{
  *(double *)a1 = GradientView.startPoint.getter();
  *(void *)(a1 + 8) = v2;
}

void sub_1C3175D88(uint64_t a1@<X8>)
{
  *(double *)a1 = GradientView.endPoint.getter();
  *(void *)(a1 + 8) = v2;
}

uint64_t type metadata accessor for GradientView()
{
  return self;
}

uint64_t ConversationLocalParticipantStateProvider.localParticipant.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t *ConversationLocalParticipantStateProvider.localParticipantPublisher.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Participant, Never>>);
  OUTLINED_FUNCTION_8_3();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_62();
  uint64_t v5 = *(void *)(v0 + 16);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Participant, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<Participant, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Participant, Never>);
  Publisher.removeDuplicates(by:)();
  swift_release();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<Participant, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Participant, Never>>);
  OUTLINED_FUNCTION_5_17();
  uint64_t v2 = OUTLINED_FUNCTION_4_11();
  v3(v2);
  return &v5;
}

uint64_t closure #1 in ConversationLocalParticipantStateProvider.localParticipantPublisher.getter()
{
  Participant.isDisplayEquivalent(to:)();
  return v0 & 1;
}

uint64_t ConversationLocalParticipantStateProvider.cameraEffectsState.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t *ConversationLocalParticipantStateProvider.cameraEffectsStatePublisher.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<LocalParticipantCameraEffectsState, Never>>);
  OUTLINED_FUNCTION_8_3();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_62();
  uint64_t v5 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<LocalParticipantCameraEffectsState, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<LocalParticipantCameraEffectsState, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<LocalParticipantCameraEffectsState, Never>);
  lazy protocol witness table accessor for type LocalParticipantCameraEffectsState and conformance LocalParticipantCameraEffectsState();
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<LocalParticipantCameraEffectsState, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<LocalParticipantCameraEffectsState, Never>>);
  OUTLINED_FUNCTION_5_17();
  uint64_t v2 = OUTLINED_FUNCTION_4_11();
  v3(v2);
  return &v5;
}

unint64_t lazy protocol witness table accessor for type LocalParticipantCameraEffectsState and conformance LocalParticipantCameraEffectsState()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalParticipantCameraEffectsState and conformance LocalParticipantCameraEffectsState;
  if (!lazy protocol witness table cache variable for type LocalParticipantCameraEffectsState and conformance LocalParticipantCameraEffectsState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalParticipantCameraEffectsState and conformance LocalParticipantCameraEffectsState);
  }
  return result;
}

uint64_t ConversationLocalParticipantStateProvider.isMutedTalking.getter()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t ConversationLocalParticipantStateProvider.mutedTalkingPublisher.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Bool, Never>>);
  OUTLINED_FUNCTION_8_3();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<Bool, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Bool, Never>>);
  uint64_t v5 = OUTLINED_FUNCTION_5_17();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v5;
}

uint64_t key path getter for ConversationLocalParticipantStateProvider.stateManager : ConversationLocalParticipantStateProvider@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 40;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C8776240](v4);
  uint64_t v6 = *(void *)(v3 + 48);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t key path setter for ConversationLocalParticipantStateProvider.stateManager : ConversationLocalParticipantStateProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 48) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t ConversationLocalParticipantStateProvider.stateManager.getter()
{
  OUTLINED_FUNCTION_1_74();
  return MEMORY[0x1C8776240](v0);
}

uint64_t ConversationLocalParticipantStateProvider.stateManager.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ConversationLocalParticipantStateProvider.stateManager.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  v3[3] = v4;
  void v3[4] = v5;
  return ConversationLocalParticipantStateProvider.stateManager.modify;
}

void ConversationLocalParticipantStateProvider.stateManager.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 48) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t ConversationLocalParticipantStateProvider.__allocating_init(localParticipant:localParticipantCameraEffectsState:isMutedTalking:)(uint64_t a1, int *a2, char a3)
{
  uint64_t v6 = swift_allocObject();
  ConversationLocalParticipantStateProvider.init(localParticipant:localParticipantCameraEffectsState:isMutedTalking:)(a1, a2, a3);
  return v6;
}

void *ConversationLocalParticipantStateProvider.init(localParticipant:localParticipantCameraEffectsState:isMutedTalking:)(uint64_t a1, int *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4[6] = 0;
  swift_unknownObjectWeakInit();
  outlined init with copy of Participant(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Participant, Never>);
  swift_allocObject();
  v4[2] = CurrentValueSubject.init(_:)();
  int v14 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<LocalParticipantCameraEffectsState, Never>);
  swift_allocObject();
  v4[3] = CurrentValueSubject.init(_:)();
  v13[11] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  uint64_t v11 = CurrentValueSubject.init(_:)();
  outlined destroy of Participant(a1);
  v4[4] = v11;
  return v4;
}

Swift::Void __swiftcall ConversationLocalParticipantStateProvider.toggleCinematicFramingEffectState()()
{
  OUTLINED_FUNCTION_1_74();
  if (MEMORY[0x1C8776240]())
  {
    OUTLINED_FUNCTION_6_51();
    OUTLINED_FUNCTION_3_23();
    v0();
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall ConversationLocalParticipantStateProvider.toggleCameraBlurEffectState()()
{
  OUTLINED_FUNCTION_1_74();
  if (MEMORY[0x1C8776240]())
  {
    OUTLINED_FUNCTION_6_51();
    OUTLINED_FUNCTION_3_23();
    v0();
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall ConversationLocalParticipantStateProvider.toggleStudioLightEffectState()()
{
  OUTLINED_FUNCTION_1_74();
  if (MEMORY[0x1C8776240]())
  {
    OUTLINED_FUNCTION_6_51();
    OUTLINED_FUNCTION_3_23();
    v0();
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall ConversationLocalParticipantStateProvider.toggleReactionsEffectState()()
{
  OUTLINED_FUNCTION_1_74();
  if (MEMORY[0x1C8776240]())
  {
    OUTLINED_FUNCTION_6_51();
    OUTLINED_FUNCTION_3_23();
    v0();
    swift_unknownObjectRelease();
  }
}

uint64_t ConversationLocalParticipantStateProvider.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 40);
  return v0;
}

uint64_t ConversationLocalParticipantStateProvider.__deallocating_deinit()
{
  ConversationLocalParticipantStateProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t *protocol witness for ConversationLocalParticipantStateProviding.localParticipantPublisher.getter in conformance ConversationLocalParticipantStateProvider()
{
  return ConversationLocalParticipantStateProvider.localParticipantPublisher.getter();
}

uint64_t protocol witness for ConversationLocalParticipantStateProviding.localParticipant.getter in conformance ConversationLocalParticipantStateProvider()
{
  return ConversationLocalParticipantStateProvider.localParticipant.getter();
}

uint64_t *protocol witness for ConversationLocalParticipantStateProviding.cameraEffectsStatePublisher.getter in conformance ConversationLocalParticipantStateProvider()
{
  return ConversationLocalParticipantStateProvider.cameraEffectsStatePublisher.getter();
}

uint64_t protocol witness for ConversationLocalParticipantStateProviding.cameraEffectsState.getter in conformance ConversationLocalParticipantStateProvider()
{
  return ConversationLocalParticipantStateProvider.cameraEffectsState.getter();
}

uint64_t protocol witness for ConversationLocalParticipantStateProviding.mutedTalkingPublisher.getter in conformance ConversationLocalParticipantStateProvider()
{
  return ConversationLocalParticipantStateProvider.mutedTalkingPublisher.getter();
}

uint64_t protocol witness for ConversationLocalParticipantStateProviding.isMutedTalking.getter in conformance ConversationLocalParticipantStateProvider()
{
  return ConversationLocalParticipantStateProvider.isMutedTalking.getter() & 1;
}

void protocol witness for ConversationLocalParticipantStateProviding.toggleCinematicFramingEffectState() in conformance ConversationLocalParticipantStateProvider()
{
}

void protocol witness for ConversationLocalParticipantStateProviding.toggleCameraBlurEffectState() in conformance ConversationLocalParticipantStateProvider()
{
}

void protocol witness for ConversationLocalParticipantStateProviding.toggleStudioLightEffectState() in conformance ConversationLocalParticipantStateProvider()
{
}

void protocol witness for ConversationLocalParticipantStateProviding.toggleReactionsEffectState() in conformance ConversationLocalParticipantStateProvider()
{
}

uint64_t ConversationLocalParticipantStateProvider.onLocalParticipantChanged(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t ConversationLocalParticipantStateProvider.onCameraEffectsStateChanged(_:)()
{
  return CurrentValueSubject.send(_:)();
}

Swift::Void __swiftcall ConversationLocalParticipantStateProvider.onMutedTalkingStateChanged(_:)(Swift::Bool a1)
{
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.localParticipantPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.localParticipant.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.cameraEffectsStatePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.cameraEffectsState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.mutedTalkingPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.isMutedTalking.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.toggleCinematicFramingEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.toggleCameraBlurEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.toggleStudioLightEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProviding.toggleReactionsEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateManaging.toggleCinematicFramingEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateManaging.toggleCameraBlurEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateManaging.toggleStudioLightEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ConversationLocalParticipantStateManaging.toggleReactionsEffectState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for ConversationLocalParticipantStateProvider()
{
  return self;
}

uint64_t method lookup function for ConversationLocalParticipantStateProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationLocalParticipantStateProvider);
}

uint64_t dispatch thunk of ConversationLocalParticipantStateProvider.__allocating_init(localParticipant:localParticipantCameraEffectsState:isMutedTalking:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

NSLayoutConstraint __swiftcall NSLayoutConstraint.withPriority(_:)(__C::UILayoutPriority a1)
{
  objc_msgSend(v1, sel_setPriority_, *(double *)&a1.rawValue);
  return (NSLayoutConstraint)v3;
}

void NSLayoutConstraint.setConstant(_:scaledToFont:)(void *a1, double a2)
{
  id v4 = objc_msgSend(a1, sel_fontDescriptor);
  id v5 = objc_msgSend(v4, sel_objectForKey_, *MEMORY[0x1E4FB0948]);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for UIFontTextStyle(0);
    if (swift_dynamicCast())
    {
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17A8]), sel_initForTextStyle_, v9);
      objc_msgSend(v6, sel_scaledValueForValue_, a2);
      double v8 = v7;

      objc_msgSend(v2, sel_setConstant_, v8);
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11);
  }
  objc_msgSend(v2, sel_setConstant_, a2);
}

id ScreeningTranscriptLabel.font.getter()
{
  return *v0;
}

uint64_t ScreeningTranscriptLabel.text.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ScreeningTranscriptLabel.lowConfidenceText.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ScreeningTranscriptLabel.lowConfidenceRanges.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScreeningTranscriptLabel.underlineColor.getter()
{
  return swift_retain();
}

id ScreeningTranscriptLabel.textSize.getter()
{
  return objc_msgSend(*v0, sel_pointSize);
}

uint64_t ScreeningTranscriptLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ScreeningTranscriptLabel();
  uint64_t v4 = OUTLINED_FUNCTION_1(v3);
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v9 = type metadata accessor for AttributedString();
  MEMORY[0x1F4188790](v9 - 8);
  ScreeningTranscriptLabel.attributedString.getter((uint64_t)&v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v11 = Text.init(_:)();
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  int v27 = v13;
  uint64_t v30 = v14;
  uint64_t KeyPath = swift_getKeyPath();
  id v16 = *v1;
  uint64_t v17 = Font.init(_:)();
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = static Alignment.center.getter();
  uint64_t v21 = v20;
  outlined init with copy of ScreeningTranscriptLabel((uint64_t)v1, (uint64_t)&v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  unint64_t v22 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t result = outlined init with take of ScreeningTranscriptLabel((uint64_t)&v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v23 + v22);
  uint64_t v25 = v28;
  *(void *)a1 = v29;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v27 & 1;
  *(void *)(a1 + 24) = v30;
  *(void *)(a1 + 32) = closure #1 in ScreeningTranscriptLabel.body.getter;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = KeyPath;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v17;
  *(void *)(a1 + 88) = partial apply for closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter;
  *(void *)(a1 + 96) = v23;
  *(void *)(a1 + 104) = v19;
  *(void *)(a1 + 112) = v21;
  return result;
}

uint64_t type metadata accessor for ScreeningTranscriptLabel()
{
  uint64_t result = type metadata singleton initialization cache for ScreeningTranscriptLabel;
  if (!type metadata singleton initialization cache for ScreeningTranscriptLabel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ScreeningTranscriptLabel.attributedString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Text.LineStyle.Pattern();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v63 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Text.LineStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  Swift::OpaquePointer v62 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RedactionReasons();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v13 = (char *)&v55 - v12;
  uint64_t v14 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v14 - 8);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v15 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v66 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a1;
  AttributedString.characters.getter();
  type metadata accessor for ScreeningTranscriptLabel();
  uint64_t v65 = v1;
  specialized Environment.wrappedValue.getter();
  lazy protocol witness table accessor for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel((uint64_t)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  dispatch thunk of SetAlgebra.init()();
  lazy protocol witness table accessor for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel((uint64_t)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v11, v7);
  v19(v13, v7);
  if ((v18 & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v66, v15);
  }
  uint64_t v20 = *(void *)(v65 + 40);
  uint64_t v80 = *(void *)(v20 + 16);
  if (!v80) {
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v66, v15);
  }
  uint64_t v56 = v16;
  uint64_t v57 = v15;
  uint64_t v21 = type metadata accessor for AttributedString.Index();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v61 = *(void *)(v22 + 64);
  Swift::String v60 = (uint64_t (**)(char *, char *, uint64_t))(v22 + 16);
  id v59 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  char v58 = (uint64_t (**)(char *, uint64_t))(v22 + 8);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v55 = v20;
  CGRect v24 = (uint64_t *)(v20 + 40);
  while (1)
  {
    uint64_t v79 = &v55;
    uint64_t v26 = *(v24 - 1);
    uint64_t v25 = *v24;
    uint64_t v27 = v61;
    MEMORY[0x1F4188790](v23);
    uint64_t v28 = AttributedString.CharacterView.startIndex.getter();
    uint64_t v78 = &v55;
    MEMORY[0x1F4188790](v28);
    unint64_t v82 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    char v83 = v82;
    uint64_t v29 = AttributedString.CharacterView._index(_:offsetBy:)();
    uint64_t result = MEMORY[0x1F4188790](v29);
    id v31 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (__OFADD__(v26, v25)) {
      break;
    }
    AttributedString.CharacterView._index(_:offsetBy:)();
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t v32 = *(void *)(*(void *)(v77 - 8) + 64);
    MEMORY[0x1F4188790](v77);
    unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    lazy protocol witness table accessor for type _NSRange and conformance _NSRange((uint64_t)&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v72 = &v55;
    uint64_t v76 = v24 + 2;
    MEMORY[0x1F4188790](result);
    char v81 = (char *)&v55 - v33;
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index));
    uint64_t v70 = (uint64_t)&v55 - v33;
    uint64_t v71 = &v55;
    uint64_t v35 = v34 - 8;
    uint64_t v36 = *(void *)(*(void *)(v34 - 8) + 64);
    MEMORY[0x1F4188790](v34);
    unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v75 = &v55;
    uint64_t v38 = (char *)&v55 + *(int *)(v35 + 56) - v37;
    unint64_t v74 = &v55;
    unint64_t v39 = *v60;
    (*v60)((char *)&v55 - v37, v83, v21);
    UIImage_optional v69 = v38;
    uint64_t v40 = v39(v38, v31, v21);
    char v67 = &v55;
    MEMORY[0x1F4188790](v40);
    uint64_t v41 = *(int *)(v35 + 56);
    uint64_t v73 = v31;
    uint64_t v42 = (char *)&v55 + v41 - v37;
    v39((char *)&v55 - v37, (char *)&v55 - v37, v21);
    v39(v42, v38, v21);
    uint64_t v43 = *v59;
    (*v59)(v81, (char *)&v55 - v37, v21);
    uint64_t v68 = *v58;
    uint64_t v44 = v68(v42, v21);
    char v67 = &v55;
    MEMORY[0x1F4188790](v44);
    Class v45 = (char *)&v55 - v37;
    uint64_t v46 = (char *)&v55 + *(int *)(v35 + 56) - v37;
    v43((char *)&v55 - v37, (char *)&v55 - v37, v21);
    v43(v46, v69, v21);
    uint64_t v47 = (uint64_t)v81;
    v43(&v81[*(int *)(v77 + 36)], v46, v21);
    uint64_t v48 = (void (*)(char *, uint64_t))v68;
    v68(v45, v21);
    uint64_t v49 = v70;
    outlined init with take of Range<AttributedString.Index>(v47, v70);
    uint64_t KeyPath = swift_getKeyPath();
    *(&v55 - 2) = MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    static Text.LineStyle.Pattern.solid.getter();
    swift_retain();
    uint64_t v51 = (uint64_t)v62;
    Text.LineStyle.init(pattern:color:)();
    uint64_t v52 = type metadata accessor for Text.LineStyle();
    __swift_storeEnumTagSinglePayload(v51, 0, 1, v52);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>);
    uint64_t v53 = v49;
    id v54 = (void (*)(char *, void))AttributedString.subscript.modify();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
    AttributedSubstring.subscript.setter();
    v54(v84, 0);
    outlined destroy of Environment<RedactionReasons>.Content(v53, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    v48(v73, v21);
    v48(v83, v21);
    uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v48)(v82, v21);
    CGRect v24 = v76;
    if (!--v80)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = v57;
      uint64_t v16 = v56;
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v66, v15);
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t closure #1 in ScreeningTranscriptLabel.body.getter()
{
  return Transaction.animation.setter();
}

uint64_t closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v15[2] = a3;
  uint64_t v5 = type metadata accessor for GeometryProxy();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = type metadata accessor for ScreeningTranscriptLabel();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8 - 8);
  v15[3] = *(void *)(a2 + 40);
  v15[1] = swift_getKeyPath();
  outlined init with copy of ScreeningTranscriptLabel(a2, (uint64_t)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v12 = (v10 + *(unsigned __int8 *)(v6 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  outlined init with take of ScreeningTranscriptLabel((uint64_t)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v11);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_NSRange]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>);
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type [_NSRange] and conformance [A]);
  lazy protocol witness table accessor for type _NSRange and conformance _NSRange((uint64_t)&lazy protocol witness table cache variable for type _NSRange and conformance _NSRange);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((uint64_t)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  return ForEach<>.init(_:id:content:)();
}

uint64_t closure #1 in closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter@<X0>(Swift::Int *a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v43[1] = a3;
  uint64_t v56 = a4;
  uint64_t v6 = type metadata accessor for BorderlessButtonMenuStyle();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v52 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<Color, Text>);
  uint64_t v47 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  Class v45 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.menuStyle<A>(_:)>>.0);
  uint64_t v48 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v46 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>);
  MEMORY[0x1F4188790](v44);
  unint64_t v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>);
  MEMORY[0x1F4188790](v49);
  uint64_t v55 = (uint64_t)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v13 = *a1;
  Swift::Int v14 = a1[1];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v16 = (uint64_t)a2[1];
  Class v15 = a2[2];
  v17.super.Class isa = *a2;
  v18._rawValue = a2[5];
  GeometryProxy.size.getter();
  v19.location = v13;
  v19.length = v14;
  v20._uint64_t countAndFlagsBits = v16;
  v20._object = v15;
  __C::CGRect v60 = TextLayoutEngine.frame(for:text:font:lowConfidenceRanges:viewSize:)(v19, v20, v17, v18, (CGSize)__PAIR128__(v22, v21));
  CGFloat x = v60.origin.x;
  CGFloat y = v60.origin.y;
  CGFloat width = v60.size.width;
  CGFloat height = v60.size.height;
  MEMORY[0x1F4188790](v27);
  v43[-2] = a2;
  uint64_t v28 = v45;
  Menu.init(content:label:)();
  uint64_t v29 = v52;
  BorderlessButtonMenuStyle.init()();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Menu<Color, Text> and conformance Menu<A, B>);
  lazy protocol witness table accessor for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel((uint64_t)&lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
  uint64_t v30 = v46;
  uint64_t v31 = v50;
  uint64_t v32 = v54;
  View.menuStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v32);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v31);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = v48;
  uint64_t v35 = v51;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v11, v30, v51);
  uint64_t v36 = &v11[*(int *)(v44 + 36)];
  *(void *)uint64_t v36 = KeyPath;
  v36[8] = 2;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v35);
  v61.origin.CGFloat x = x;
  v61.origin.CGFloat y = y;
  v61.size.CGFloat width = width;
  v61.size.CGFloat height = height;
  CGRectGetWidth(v61);
  v62.origin.CGFloat x = x;
  v62.origin.CGFloat y = y;
  v62.size.CGFloat width = width;
  v62.size.CGFloat height = height;
  CGRectGetHeight(v62);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v37 = v55;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>((uint64_t)v11, v55, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>);
  uint64_t v38 = (_OWORD *)(v37 + *(int *)(v49 + 36));
  long long v39 = v58;
  *uint64_t v38 = v57;
  v38[1] = v39;
  v38[2] = v59;
  outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>);
  uint64_t v40 = v56;
  outlined init with copy of VStack<TupleView<(ModifiedContent<HStack<TupleView<(<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>, _PaddingLayout>, Spacer, ClarityUIKeypadView)>>(v37, v56, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>);
  uint64_t v41 = (CGFloat *)(v40
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>)
                           + 36));
  *uint64_t v41 = x;
  v41[1] = y;
  return outlined destroy of Environment<RedactionReasons>.Content(v37, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Color.clear.getter();
  *a1 = result;
  return result;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>)()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
}

uint64_t ScreeningTranscriptLabel.init(font:text:lowConfidenceText:lowConfidenceRanges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  static Color.white.getter();
  uint64_t v8 = Color.opacity(_:)();
  swift_release();
  a7[6] = v8;
  uint64_t v9 = type metadata accessor for ScreeningTranscriptLabel();
  uint64_t v10 = (void *)((char *)a7 + *(int *)(v9 + 36));
  *uint64_t v10 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  swift_storeEnumTagMultiPayload();
  unint64_t v11 = (void *)((char *)a7 + *(int *)(v9 + 40));
  uint64_t *v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static ScreeningTranscriptLabel_Previews.previews.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for UIFont();
  id v2 = static UIFont.preferredFont(textStyle:weight:maximumPointSize:)(*MEMORY[0x1E4FB2988], 0, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_NSRange>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769620;
  *(_OWORD *)(v3 + 32) = xmmword_1C3771FF0;
  *a1 = v2;
  a1[1] = 0xD000000000000024;
  a1[2] = 0x80000001C379D360;
  a1[3] = 0xD000000000000018;
  a1[4] = 0x80000001C379D390;
  a1[5] = v3;
  static Color.white.getter();
  uint64_t v4 = Color.opacity(_:)();
  swift_release();
  a1[6] = v4;
  uint64_t v5 = type metadata accessor for ScreeningTranscriptLabel();
  uint64_t v6 = (void *)((char *)a1 + *(int *)(v5 + 36));
  *uint64_t v6 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (void *)((char *)a1 + *(int *)(v5 + 40));
  *uint64_t v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for static _PreviewProvider._previews.getter in conformance ScreeningTranscriptLabel_Previews(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews();
  return MEMORY[0x1F40F8C48](a1, v2);
}

uint64_t protocol witness for static _PreviewProvider._platform.getter in conformance ScreeningTranscriptLabel_Previews(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews();
  return MEMORY[0x1F40F8C40](a1, v2);
}

uint64_t key path getter for EnvironmentValues.lineLimit : EnvironmentValues, serialized@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.lineLimit : EnvironmentValues, serialized()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t outlined init with copy of ScreeningTranscriptLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScreeningTranscriptLabel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C31786CC()
{
  type metadata accessor for ScreeningTranscriptLabel();
  OUTLINED_FUNCTION_5_7();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for RedactionReasons();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    v2();
  }
  else
  {
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for DynamicTypeSize();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    v3();
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t outlined init with take of ScreeningTranscriptLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScreeningTranscriptLabel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ScreeningTranscriptLabel();
  OUTLINED_FUNCTION_1_1(v5);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter(a1, v7, a2);
}

uint64_t associated type witness table accessor for View.Body : View in ScreeningTranscriptLabel()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews;
  if (!lazy protocol witness table cache variable for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews;
  if (!lazy protocol witness table cache variable for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreeningTranscriptLabel_Previews and conformance ScreeningTranscriptLabel_Previews);
  }
  return result;
}

uint64_t associated type witness table accessor for PreviewProvider.Previews : View in ScreeningTranscriptLabel_Previews()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for ScreeningTranscriptLabel(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    uint64_t v9 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v9;
    uint64_t v10 = a2[6];
    uint64_t v11 = *(int *)(a3 + 36);
    uint64_t v12 = &a1[v11];
    Swift::Int v13 = (char **)((char *)a2 + v11);
    *((void *)a1 + 5) = a2[5];
    *((void *)a1 + 6) = v10;
    Swift::Int v14 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for RedactionReasons();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
    }
    else
    {
      *(void *)uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = *(int *)(a3 + 40);
    UIFont v17 = &a1[v16];
    Swift::OpaquePointer v18 = (char **)((char *)a2 + v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *(void *)UIFont v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ScreeningTranscriptLabel(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  int v4 = (char *)a1 + *(int *)(a2 + 36);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for RedactionReasons();
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for ScreeningTranscriptLabel(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  uint64_t v9 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v9;
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  a1[6] = *(void *)(a2 + 48);
  id v13 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for RedactionReasons();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v11, v12, v14);
  }
  else
  {
    void *v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = *(int *)(a3 + 40);
  uint64_t v16 = (void *)((char *)a1 + v15);
  UIFont v17 = (void *)(a2 + v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ScreeningTranscriptLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    outlined destroy of Environment<RedactionReasons>.Content(a1 + v9, (uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for RedactionReasons();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    outlined destroy of Environment<RedactionReasons>.Content(a1 + v13, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      void *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for ScreeningTranscriptLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for RedactionReasons();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  return a1;
}

void **assignWithTake for ScreeningTranscriptLabel(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a2[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_bridgeObjectRelease();
  id v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_release();
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    outlined destroy of Environment<RedactionReasons>.Content((uint64_t)a1 + v9, (uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for RedactionReasons();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    uint64_t v14 = *(int *)(a3 + 40);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    outlined destroy of Environment<RedactionReasons>.Content((uint64_t)a1 + v14, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreeningTranscriptLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C317943C);
}

uint64_t sub_1C317943C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<RedactionReasons>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 36);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
      uint64_t v11 = *(int *)(a3 + 40);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ScreeningTranscriptLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3179504);
}

void *sub_1C3179504(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<RedactionReasons>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 36);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
      uint64_t v11 = *(int *)(a4 + 40);
    }
    return (void *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for ScreeningTranscriptLabel()
{
  type metadata accessor for Environment<RedactionReasons>.Content(319, (unint64_t *)&lazy cache variable for type metadata for Environment<RedactionReasons>.Content, MEMORY[0x1E4F3CD58]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<RedactionReasons>.Content(319, (unint64_t *)&lazy cache variable for type metadata for Environment<DynamicTypeSize>.Content, MEMORY[0x1E4F3CB98]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Environment<RedactionReasons>.Content(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ScreeningTranscriptLabel_Previews()
{
  return &type metadata for ScreeningTranscriptLabel_Previews;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _OverlayModifier<GeometryReader<ForEach<[_NSRange], _NSRange, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _OverlayModifier<GeometryReader<ForEach<[_NSRange], _NSRange, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _OverlayModifier<GeometryReader<ForEach<[_NSRange], _NSRange, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>>>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _OverlayModifier<GeometryReader<ForEach<[_NSRange], _NSRange, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>>>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type _OverlayModifier<GeometryReader<ForEach<[_NSRange], _NSRange, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>>>> and conformance _OverlayModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _OverlayModifier<GeometryReader<ForEach<[_NSRange], _NSRange, ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect>>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>>);
    lazy protocol witness table accessor for type ModifiedContent<Text, _TransactionModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _TransactionModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _TransactionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _TransactionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _TransactionModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _TransactionModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _TransactionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t sub_1C31799A8()
{
  return lazy protocol witness table accessor for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel((uint64_t)&lazy protocol witness table cache variable for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel);
}

uint64_t sub_1C3179A3C()
{
  type metadata accessor for ScreeningTranscriptLabel();
  OUTLINED_FUNCTION_5_7();
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v10 = *(void *)(v3 + 64);
  uint64_t v4 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for RedactionReasons();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    v7();
  }
  else
  {
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for DynamicTypeSize();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    v8();
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v10 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ScreeningTranscriptLabel();
  OUTLINED_FUNCTION_1(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = type metadata accessor for GeometryProxy();
  OUTLINED_FUNCTION_1_1(v10);
  uint64_t v12 = v2 + ((v7 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return closure #1 in closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter(a1, (Class *)(v2 + v7), v12, a2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((uint64_t)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>, _FrameLayout>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(v3);
    v5();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Menu<Color, Text>);
    type metadata accessor for BorderlessButtonMenuStyle();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Menu<Color, Text> and conformance Menu<A, B>);
    lazy protocol witness table accessor for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel((uint64_t)&lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.menuStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in closure #2 in ScreeningTranscriptLabel.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type ScreeningTranscriptLabel and conformance ScreeningTranscriptLabel(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NSRange and conformance _NSRange(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t outlined init with take of Range<AttributedString.Index>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1C3179FD0()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute);
  }
  return result;
}

uint64_t sub_1C317A034()
{
  return 8;
}

uint64_t sub_1C317A040()
{
  return swift_release();
}

uint64_t sub_1C317A048(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1C317A05C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t outlined destroy of Environment<RedactionReasons>.Content(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t InCallControlsIgnoreLMIRequestsCell.ViewModel.ignoreLMIRequests.getter(char a1)
{
  return a1 & 1;
}

ConversationKit::InCallControlsIgnoreLMIRequestsCell::ViewModel __swiftcall InCallControlsIgnoreLMIRequestsCell.ViewModel.init(ignoreLMIRequests:)(Swift::Bool ignoreLMIRequests)
{
  return (ConversationKit::InCallControlsIgnoreLMIRequestsCell::ViewModel)ignoreLMIRequests;
}

uint64_t key path getter for InCallControlsIgnoreLMIRequestsCell.delegate : InCallControlsIgnoreLMIRequestsCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for InCallControlsIgnoreLMIRequestsCell.delegate : InCallControlsIgnoreLMIRequestsCell(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t InCallControlsIgnoreLMIRequestsCell.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t InCallControlsIgnoreLMIRequestsCell.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*InCallControlsIgnoreLMIRequestsCell.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  void v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

id InCallControlsIgnoreLMIRequestsCell.ignoreLMIRequestsSwitch.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell____lazy_storage___ignoreLMIRequestsSwitch;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell____lazy_storage___ignoreLMIRequestsSwitch);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell____lazy_storage___ignoreLMIRequestsSwitch);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1CD0]), sel_init);
    objc_msgSend(v4, sel_addTarget_action_forControlEvents_, v0, sel_didToggleMuteState_, 4096);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t InCallControlsIgnoreLMIRequestsCell.switchAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  return InCallControlsIgnoreLMIRequestsCell.switchAccessory.getter(&demangling cache variable for type metadata for UICellAccessory?, &OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell____lazy_storage___switchAccessory, MEMORY[0x1E4FB0E68], (void (*)(uint64_t))closure #1 in InCallControlsIgnoreLMIRequestsCell.switchAccessory.getter, a1);
}

uint64_t closure #1 in InCallControlsIgnoreLMIRequestsCell.switchAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  v17[1] = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UICellAccessory.Placement();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UICellAccessory.CustomViewConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  InCallControlsIgnoreLMIRequestsCell.ignoreLMIRequestsSwitch.getter();
  uint64_t v12 = (uint64_t (**)())&v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                   + 48)];
  uint64_t v13 = *MEMORY[0x1E4FB0E18];
  uint64_t v14 = type metadata accessor for UICellAccessory.DisplayedState();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v7, v13, v14);
  void *v12 = OUTLINED_FUNCTION_17_1;
  v12[1] = 0;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FB0E60], v4);
  uint64_t v15 = type metadata accessor for UICellAccessory.LayoutDimension();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v15);
  UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
  static UICellAccessory.customView(configuration:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t InCallControlsIgnoreLMIRequestsCell.cellContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return InCallControlsIgnoreLMIRequestsCell.switchAccessory.getter(&demangling cache variable for type metadata for UIListContentConfiguration?, &OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell____lazy_storage___cellContentConfiguration, MEMORY[0x1E4FB0F90], (void (*)(uint64_t))closure #1 in InCallControlsIgnoreLMIRequestsCell.cellContentConfiguration.getter, a1);
}

uint64_t InCallControlsIgnoreLMIRequestsCell.switchAccessory.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v22[-v15];
  uint64_t v17 = v5 + *a2;
  swift_beginAccess();
  outlined init with copy of LinkShareCoordinatorProtocol?(v17, (uint64_t)v16, a1);
  uint64_t v18 = a3(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v18) == 1)
  {
    outlined destroy of Any?((uint64_t)v16, a1);
    a4(v5);
    OUTLINED_FUNCTION_48();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v14, a5, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v18);
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?((uint64_t)v14, v17, a1);
    return swift_endAccess();
  }
  else
  {
    OUTLINED_FUNCTION_48();
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v21 + 32))(a5, v16, v18);
  }
}

uint64_t closure #1 in InCallControlsIgnoreLMIRequestsCell.cellContentConfiguration.getter(void *a1)
{
  MEMORY[0x1C8773D30]();
  id v2 = objc_msgSend(self, sel_conversationKit);
  v17._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001C379D4C0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000019;
  v4.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v4.value._object = (void *)0xEF74694B6E6F6974;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v17);

  UIListContentConfiguration.text.setter();
  uint64_t v6 = self;
  uint64_t v7 = *MEMORY[0x1E4FB28C8];
  id v8 = objc_msgSend(v6, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
  UIFont.caseSensitive()();

  uint64_t v9 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v9(v16, 0);
  if (one-time initialization token for tableViewCellTitleLabel != -1) {
    swift_once();
  }
  id v10 = (id)static Colors.InCallControls.tableViewCellTitleLabel;
  uint64_t v11 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v11(v16, 0);
  uint64_t v12 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
  v12(v16, 0);
  id v13 = objc_msgSend(v6, sel_preferredFontForTextStyle_, v7);
  Class isa = UIFont.caseSensitive()().super.isa;

  InCallControlsIgnoreLMIRequestsCell.verticalInset(_:scaledToFont:)(isa, 18.5);
  objc_msgSend(a1, sel_effectiveUserInterfaceLayoutDirection);
  return UIListContentConfiguration.directionalLayoutMargins.setter();
}

id InCallControlsIgnoreLMIRequestsCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id InCallControlsIgnoreLMIRequestsCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell_delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0
            + OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell____lazy_storage___ignoreLMIRequestsSwitch) = 0;
  uint64_t v1 = type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_0_53(v1);
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_0_53(v2);
  uint64_t v8 = type metadata accessor for InCallControlsIgnoreLMIRequestsCell();
  double v3 = OUTLINED_FUNCTION_6_2();
  id v6 = objc_msgSendSuper2(v4, v5, v3, v0, v8);
  InCallControlsIgnoreLMIRequestsCell.configureContent()();

  return v6;
}

uint64_t type metadata accessor for InCallControlsIgnoreLMIRequestsCell()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsIgnoreLMIRequestsCell;
  if (!type metadata singleton initialization cache for InCallControlsIgnoreLMIRequestsCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id InCallControlsIgnoreLMIRequestsCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsIgnoreLMIRequestsCell.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit35InCallControlsIgnoreLMIRequestsCell____lazy_storage___ignoreLMIRequestsSwitch] = 0;
  uint64_t v1 = type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_0_53(v1);
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_0_53(v2);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t InCallControlsIgnoreLMIRequestsCell.configureContent()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v12[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIBackgroundConfiguration.listGroupedCell()();
  id v4 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for UIVibrancyEffect();
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  uint64_t v5 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v5);
  MEMORY[0x1C8773CE0](v3);
  objc_msgSend(v0, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  void v12[3] = type metadata accessor for UIListContentConfiguration();
  v12[4] = MEMORY[0x1E4FB0F88];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  InCallControlsIgnoreLMIRequestsCell.cellContentConfiguration.getter((uint64_t)boxed_opaque_existential_1);
  MEMORY[0x1C8773CD0](v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
  uint64_t v7 = *(void *)(type metadata accessor for UICellAccessory() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
  InCallControlsIgnoreLMIRequestsCell.switchAccessory.getter(v9 + v8);
  return UICollectionViewListCell.accessories.setter();
}

Swift::Void __swiftcall InCallControlsIgnoreLMIRequestsCell.configure(with:)(ConversationKit::InCallControlsIgnoreLMIRequestsCell::ViewModel with)
{
  id v2 = InCallControlsIgnoreLMIRequestsCell.ignoreLMIRequestsSwitch.getter();
  objc_msgSend(v2, sel_setOn_animated_, with.ignoreLMIRequests, 0);
}

double InCallControlsIgnoreLMIRequestsCell.verticalInset(_:scaledToFont:)(void *a1, double a2)
{
  id v3 = objc_msgSend(a1, sel_fontDescriptor);
  id v4 = objc_msgSend(v3, sel_objectForKey_, *MEMORY[0x1E4FB0948]);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    type metadata accessor for UIFontTextStyle(0);
    if (swift_dynamicCast())
    {
      id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17A8]), sel_initForTextStyle_, v8);
      objc_msgSend(v5, sel_scaledValueForValue_, a2);
      a2 = v6;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  }
  return a2;
}

uint64_t InCallControlsIgnoreLMIRequestsCell.didToggleMuteState(_:)()
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

id InCallControlsIgnoreLMIRequestsCell.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsIgnoreLMIRequestsCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t dispatch thunk of InCallControlsIgnoreLMIRequestsCellDelegate.inCallControlsDidToggleIgnoreLMIRequestsCell(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t ObjC metadata update function for InCallControlsIgnoreLMIRequestsCell()
{
  return type metadata accessor for InCallControlsIgnoreLMIRequestsCell();
}

void type metadata completion function for InCallControlsIgnoreLMIRequestsCell()
{
  type metadata accessor for UICellAccessory?(319, &lazy cache variable for type metadata for UICellAccessory?, MEMORY[0x1E4FB0E68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UICellAccessory?(319, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?, MEMORY[0x1E4FB0F90]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for InCallControlsIgnoreLMIRequestsCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsIgnoreLMIRequestsCell);
}

uint64_t dispatch thunk of InCallControlsIgnoreLMIRequestsCell.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of InCallControlsIgnoreLMIRequestsCell.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of InCallControlsIgnoreLMIRequestsCell.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of InCallControlsIgnoreLMIRequestsCell.configure(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

void type metadata accessor for UICellAccessory?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for InCallControlsIgnoreLMIRequestsCell.ViewModel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for InCallControlsIgnoreLMIRequestsCell.ViewModel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C317B64CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsIgnoreLMIRequestsCell.ViewModel()
{
  return &type metadata for InCallControlsIgnoreLMIRequestsCell.ViewModel;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_48();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined assign with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_48();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

void UIControl.addAction(for:handler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  type metadata accessor for UIAction();
  swift_retain();
  id v8 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  objc_msgSend(v4, sel_addAction_forControlEvents_, v8, a1, 0, 0, 0, a2, a3);
}

unint64_t type metadata accessor for UIAction()
{
  unint64_t result = lazy cache variable for type metadata for UIAction;
  if (!lazy cache variable for type metadata for UIAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  }
  return result;
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  unint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = 0;
  return v0;
}

Swift::Void __swiftcall Lock.lock()()
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
}

uint64_t Lock.init()()
{
  unint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = 0;
  return v0;
}

uint64_t Lock.deinit()
{
  MEMORY[0x1C87760E0](*(void *)(v0 + 16), -1, -1);
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  MEMORY[0x1C87760E0](*(void *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall Lock.tryLock()()
{
  return os_unfair_lock_trylock(*(os_unfair_lock_t *)(v0 + 16));
}

Swift::Void __swiftcall Lock.unlock()()
{
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
}

void Lock.withLock<A>(_:)(void (*a1)(void))
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

Swift::Void __swiftcall Lock.assertOwned()()
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

Swift::Void __swiftcall Lock.assertNotOwned()()
{
  os_unfair_lock_assert_not_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t method lookup function for Lock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Lock);
}

uint64_t dispatch thunk of Lock.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t String.localized.getter()
{
  return String.localized.getter();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v9;

  OUTLINED_FUNCTION_7_51();
  unsigned int v4 = objc_msgSend(self, sel_conversationKit);
  v9._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v2;
  v6.value._uint64_t countAndFlagsBits = v1;
  v6.value._object = v0;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v9);

  return OUTLINED_FUNCTION_35();
}

uint64_t String.localizedCallRecording.getter()
{
  return OUTLINED_FUNCTION_2_56();
}

uint64_t localized(_:locale:source:value:comment:_:)(uint64_t a1, uint64_t a2, int a3, NSBundle a4, Swift::String_optional a5, Swift::String a6)
{
  uint64_t result = OUTLINED_FUNCTION_0_54(a1, a2, a3, a4, a5, a6, v8);
  if (*(void *)(v6 + 16))
  {
    String.init(format:locale:arguments:)();
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_35();
  }
  return result;
}

uint64_t String.deviceAdjustedLocalizedKey(forDeviceFamily:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 1) != 0
    || a1 != 4
    || (a3 == 0x535F4E4545524353 ? (BOOL v6 = a4 == 0xEE00474E49524148) : (BOOL v6 = 0),
        !v6
     && (OUTLINED_FUNCTION_1_75() & 1) == 0
     && (a3 != 0xD000000000000011 || (OUTLINED_FUNCTION_4_59(), !v6))
     && (OUTLINED_FUNCTION_1_75() & 1) == 0
     && (a3 == 0x20676E6972616853 ? (BOOL v7 = a4 == 0xEE006E6565726353) : (BOOL v7 = 0),
         !v7
      && (OUTLINED_FUNCTION_1_75() & 1) == 0
      && (a3 != 0xD000000000000018 || (OUTLINED_FUNCTION_4_59(), !v6))
      && (OUTLINED_FUNCTION_1_75() & 1) == 0
      && (a3 != 0xD000000000000028 || (OUTLINED_FUNCTION_4_59(), !v6))
      && (OUTLINED_FUNCTION_1_75() & 1) == 0
      && (a3 != 0xD000000000000026 || (OUTLINED_FUNCTION_4_59(), !v6))
      && (OUTLINED_FUNCTION_1_75() & 1) == 0)))
  {
    swift_bridgeObjectRetain();
  }
  return OUTLINED_FUNCTION_35();
}

uint64_t *LocalizationSource.conversationControls.unsafeMutableAddressor()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  return &static LocalizationSource.conversationControls;
}

Swift::String __swiftcall String.localizedWithComment(_:)(Swift::String a1)
{
  OUTLINED_FUNCTION_7_51();
  id v3 = objc_msgSend(self, sel_conversationKit);
  v10._object = v1;
  OUTLINED_FUNCTION_4_6();
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = v2;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v3, v4, v10);

  uint64_t v7 = OUTLINED_FUNCTION_35();
  result._object = v8;
  result._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t String.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = MEMORY[0x1C8773190]();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t String.localizedHidden.getter()
{
  return OUTLINED_FUNCTION_2_56();
}

uint64_t String.localizedAlerts.getter()
{
  return OUTLINED_FUNCTION_2_56();
}

uint64_t String.localizedCallStatus.getter()
{
  return String.localized.getter();
}

Swift::tuple_title_String_subtitle_String_optional __swiftcall String.splitForTitleAndSubtitle()()
{
  unint64_t v0 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v1 = MEMORY[0x1C8774260](10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E4FBB1A0], v0);
  if (*(void *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = OUTLINED_FUNCTION_35();
    MEMORY[0x1C8773190](v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = specialized BidirectionalCollection.last.getter(v1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    MEMORY[0x1C8773190](v3, v5, v7, v9);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = OUTLINED_FUNCTION_3_69();
  uint64_t v15 = v11;
  result.subtitle.value._object = v15;
  result.subtitle.value._uint64_t countAndFlagsBits = v14;
  result.title._object = v13;
  result.title._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t LocalizationSource.table.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

id one-time initialization function for conversationKit()
{
  id result = objc_msgSend(self, sel_conversationKit);
  static LocalizationSource.conversationKit = (uint64_t)result;
  unk_1EA37DFA0 = 0x61737265766E6F43;
  qword_1EA37DFA8 = 0xEF74694B6E6F6974;
  return result;
}

uint64_t *LocalizationSource.conversationKit.unsafeMutableAddressor()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  return &static LocalizationSource.conversationKit;
}

uint64_t static LocalizationSource.conversationKit.getter()
{
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  id v0 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_3_69();
}

id one-time initialization function for conversationControls()
{
  id result = objc_msgSend(self, sel_conversationKit);
  static LocalizationSource.conversationControls = (uint64_t)result;
  *(void *)algn_1EA37DFB8 = 0xD000000000000014;
  qword_1EA37DFC0 = 0x80000001C3791EB0;
  return result;
}

uint64_t static LocalizationSource.conversationControls.getter()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  id v0 = (id)static LocalizationSource.conversationControls;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_3_69();
}

id one-time initialization function for systemAperture()
{
  id result = objc_msgSend(self, sel_conversationKit);
  static LocalizationSource.systemAperture = (uint64_t)result;
  unk_1EA37DFD0 = 0xD00000000000001ELL;
  qword_1EA37DFD8 = 0x80000001C379D740;
  return result;
}

uint64_t *LocalizationSource.systemAperture.unsafeMutableAddressor()
{
  if (one-time initialization token for systemAperture != -1) {
    swift_once();
  }
  return &static LocalizationSource.systemAperture;
}

uint64_t static LocalizationSource.systemAperture.getter()
{
  if (one-time initialization token for systemAperture != -1) {
    swift_once();
  }
  id v0 = (id)static LocalizationSource.systemAperture;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_3_69();
}

uint64_t localized(_:locale:source:value:comment:arguments:)(uint64_t a1, uint64_t a2, int a3, NSBundle a4, Swift::String_optional a5, Swift::String a6)
{
  uint64_t result = OUTLINED_FUNCTION_0_54(a1, a2, a3, a4, a5, a6, v8);
  if (*(void *)(v6 + 16))
  {
    String.init(format:locale:arguments:)();
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_35();
  }
  return result;
}

uint64_t destroy for LocalizationSource(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for LocalizationSource(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocalizationSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LocalizationSource(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LocalizationSource()
{
  return &type metadata for LocalizationSource;
}

ValueMetadata *type metadata accessor for CallScreening()
{
  return &type metadata for CallScreening;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.FontAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.UIKitAttributes, AttributeScopes.UIKitAttributes.FontAttribute>)()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.UIKitAttributes.FontAttribute()
{
}

void key path getter for AttributeScopes.UIKitAttributes.font : AttributeScopes.UIKitAttributes()
{
}

uint64_t key path getter for InCallControlsPTTLeaveChannelCell.leaveChannelButton : InCallControlsPTTLeaveChannelCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  return result;
}

void key path setter for InCallControlsPTTLeaveChannelCell.leaveChannelButton : InCallControlsPTTLeaveChannelCell(id *a1)
{
}

id InCallControlsPTTLeaveChannelCell.leaveChannelButton.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit33InCallControlsPTTLeaveChannelCell_leaveChannelButton);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void InCallControlsPTTLeaveChannelCell.leaveChannelButton.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit33InCallControlsPTTLeaveChannelCell_leaveChannelButton);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t InCallControlsPTTLeaveChannelCell.leaveChannelButtonConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for UIButton.Configuration.CornerStyle();
  OUTLINED_FUNCTION_4();
  uint64_t v51 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v50 = v8 - v7;
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_64();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  Swift::String v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = v1
      + OBJC_IVAR____TtC15ConversationKit33InCallControlsPTTLeaveChannelCell____lazy_storage___leaveChannelButtonConfiguration;
  swift_beginAccess();
  outlined init with copy of LinkShareCoordinatorProtocol?(v20, (uint64_t)v19, &demangling cache variable for type metadata for UIButton.Configuration?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v9) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v19, v9);
  }
  uint64_t v48 = v4;
  uint64_t v49 = a1;
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for UIButton.Configuration?);
  static UIButton.Configuration.filled()();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttributedString?);
  uint64_t v47 = &v46;
  uint64_t v22 = OUTLINED_FUNCTION_8(v21);
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_21();
  id v23 = objc_msgSend(self, sel_conversationKit);
  v54._object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0x657661654CLL;
  v24._object = (void *)0xE500000000000000;
  v25.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v25.value._object = (void *)0xEF74694B6E6F6974;
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v54._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v54);

  uint64_t v27 = type metadata accessor for AttributeContainer();
  uint64_t v28 = OUTLINED_FUNCTION_8(v27);
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_21();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t v29 = type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_31_13();
  __swift_storeEnumTagSinglePayload(v30, v31, v32, v29);
  UIButton.Configuration.attributedTitle.setter();
  unint64_t v33 = (void (*)(unsigned char *, void))UIButton.Configuration.attributedTitle.modify();
  if (!__swift_getEnumTagSinglePayload(v34, 1, v29))
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    uint64_t v47 = (uint64_t *)swift_getKeyPath();
    id v36 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
    Class isa = UIFont.withTraits(_:)(0x8002u).super.isa;

    Class v38 = UIFont.caseSensitive()().super.isa;
    Class v52 = v38;
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
    AttributedString.subscript.setter();
  }
  v33(v53, 0);
  (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))(v50, *MEMORY[0x1E4FB1218], v48);
  UIButton.Configuration.cornerStyle.setter();
  UIButton.Configuration.contentInsets.setter();
  id v39 = objc_msgSend(self, sel_systemRedColor);
  uint64_t v40 = (void (*)(unsigned char *, void))UIButton.Configuration.background.modify();
  UIBackgroundConfiguration.backgroundColor.setter();
  v40(v53, 0);
  uint64_t v41 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v49, v2, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, v41, v9);
  OUTLINED_FUNCTION_31_13();
  __swift_storeEnumTagSinglePayload(v42, v43, v44, v9);
  swift_beginAccess();
  outlined assign with take of UIListContentConfiguration?((uint64_t)v17, v20, &demangling cache variable for type metadata for UIButton.Configuration?);
  return swift_endAccess();
}

uint64_t InCallControlsPTTLeaveChannelCell.leaveButtonAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  return InCallControlsPTTLeaveChannelCell.leaveButtonAccessory.getter(&demangling cache variable for type metadata for UICellAccessory?, &OBJC_IVAR____TtC15ConversationKit33InCallControlsPTTLeaveChannelCell____lazy_storage___leaveButtonAccessory, MEMORY[0x1E4FB0E68], (void (*)(uint64_t))closure #1 in InCallControlsPTTLeaveChannelCell.leaveButtonAccessory.getter, a1);
}

uint64_t closure #1 in InCallControlsPTTLeaveChannelCell.leaveButtonAccessory.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UICellAccessory.LayoutDimension?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UICellAccessory.Placement();
  uint64_t v6 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UICellAccessory.CustomViewConfiguration();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIButton.Configuration?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70);
  Swift::String v17 = (void *)((uint64_t (*)(uint64_t))v16)(v13);
  InCallControlsPTTLeaveChannelCell.leaveChannelButtonConfiguration.getter((uint64_t)v15);
  uint64_t v18 = type metadata accessor for UIButton.Configuration();
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v18);
  UIButton.configuration.setter();

  v16();
  uint64_t v19 = (uint64_t (**)())&v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayed: UICellAccessory.DisplayedState, at: ()))
                                   + 48)];
  uint64_t v20 = *MEMORY[0x1E4FB0E18];
  uint64_t v21 = type metadata accessor for UICellAccessory.DisplayedState();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v8, v20, v21);
  *uint64_t v19 = OUTLINED_FUNCTION_17_1;
  v19[1] = 0;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FB0E60], v25);
  uint64_t v22 = *MEMORY[0x1E4FB0E28];
  uint64_t v23 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v5, v22, v23);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v23);
  UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
  static UICellAccessory.customView(configuration:)();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, v27);
}

uint64_t InCallControlsPTTLeaveChannelCell.cellContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return InCallControlsPTTLeaveChannelCell.leaveButtonAccessory.getter(&demangling cache variable for type metadata for UIListContentConfiguration?, &OBJC_IVAR____TtC15ConversationKit33InCallControlsPTTLeaveChannelCell____lazy_storage___cellContentConfiguration, MEMORY[0x1E4FB0F90], (void (*)(uint64_t))closure #1 in InCallControlsPTTLeaveChannelCell.cellContentConfiguration.getter, a1);
}

uint64_t InCallControlsPTTLeaveChannelCell.leaveButtonAccessory.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v12 = OUTLINED_FUNCTION_8(v11);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  Swift::String v17 = &v26[-v16];
  uint64_t v18 = v5 + *a2;
  swift_beginAccess();
  outlined init with copy of LinkShareCoordinatorProtocol?(v18, (uint64_t)v17, a1);
  uint64_t v19 = a3(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19) == 1)
  {
    outlined destroy of Any?((uint64_t)v17, a1);
    a4(v5);
    OUTLINED_FUNCTION_48();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v20 + 16))(v15, a5, v19);
    OUTLINED_FUNCTION_31_13();
    __swift_storeEnumTagSinglePayload(v21, v22, v23, v19);
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?((uint64_t)v15, v18, a1);
    return swift_endAccess();
  }
  else
  {
    OUTLINED_FUNCTION_48();
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v25 + 32))(a5, v17, v19);
  }
}

uint64_t closure #1 in InCallControlsPTTLeaveChannelCell.cellContentConfiguration.getter()
{
  MEMORY[0x1C8773D30]();
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2908]);
  uint64_t v2 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.font.setter();
  v2(v9, 0);
  if (one-time initialization token for tableViewCellTitleLabel != -1) {
    swift_once();
  }
  id v3 = (id)static Colors.InCallControls.tableViewCellTitleLabel;
  uint64_t v4 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v4(v9, 0);
  uint64_t v5 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
  v5(v9, 0);
  id v6 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB28C8]);
  Class isa = UIFont.caseSensitive()().super.isa;

  InCallControlsPTTLeaveChannelCell.verticalInset(_:scaledToFont:)(isa, 18.5);
  return UIListContentConfiguration.directionalLayoutMargins.setter();
}

id InCallControlsPTTLeaveChannelCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

id InCallControlsPTTLeaveChannelCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit33InCallControlsPTTLeaveChannelCell_leaveChannelButton;
  uint64_t v2 = self;
  id v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_buttonWithType_, 1);
  uint64_t v4 = type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_13_18(v4);
  uint64_t v5 = type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_13_18(v5);
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_13_18(v6);

  uint64_t v11 = type metadata accessor for InCallControlsPTTLeaveChannelCell();
  double v7 = OUTLINED_FUNCTION_6_2();
  return objc_msgSendSuper2(v8, v9, v7, v3, v11);
}

uint64_t type metadata accessor for InCallControlsPTTLeaveChannelCell()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsPTTLeaveChannelCell;
  if (!type metadata singleton initialization cache for InCallControlsPTTLeaveChannelCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t InCallControlsPTTLeaveChannelCell.configure(with:)()
{
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_21();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_64();
  static UIBackgroundConfiguration.listGroupedCell()();
  id v11 = objc_msgSend(self, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for UIVibrancyEffect();
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  type metadata accessor for UIBackgroundConfiguration();
  OUTLINED_FUNCTION_31_13();
  __swift_storeEnumTagSinglePayload(v12, v13, v14, v15);
  MEMORY[0x1C8773CE0](v1);
  objc_msgSend(v0, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  InCallControlsPTTLeaveChannelCell.cellContentConfiguration.getter(v8);
  swift_bridgeObjectRetain();
  UIListContentConfiguration.text.setter();
  v21[3] = v2;
  void v21[4] = MEMORY[0x1E4FB0F88];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(boxed_opaque_existential_1, v8, v2);
  MEMORY[0x1C8773CD0](v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>);
  uint64_t v17 = *(void *)(type metadata accessor for UICellAccessory() - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1C3769620;
  InCallControlsPTTLeaveChannelCell.leaveButtonAccessory.getter(v19 + v18);
  UICollectionViewListCell.accessories.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

id InCallControlsPTTLeaveChannelCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsPTTLeaveChannelCell.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit33InCallControlsPTTLeaveChannelCell_leaveChannelButton;
  *(void *)&v0[v1] = objc_msgSend(self, sel_buttonWithType_, 1);
  uint64_t v2 = type metadata accessor for UIButton.Configuration();
  OUTLINED_FUNCTION_0_53(v2);
  uint64_t v3 = type metadata accessor for UICellAccessory();
  OUTLINED_FUNCTION_0_53(v3);
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  OUTLINED_FUNCTION_0_53(v4);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double InCallControlsPTTLeaveChannelCell.verticalInset(_:scaledToFont:)(void *a1, double a2)
{
  id v3 = objc_msgSend(a1, sel_fontDescriptor);
  id v4 = objc_msgSend(v3, sel_objectForKey_, *MEMORY[0x1E4FB0948]);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    type metadata accessor for UIFontTextStyle(0);
    if (swift_dynamicCast())
    {
      id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17A8]), sel_initForTextStyle_, v8);
      objc_msgSend(v5, sel_scaledValueForValue_, a2);
      a2 = v6;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  }
  return a2;
}

id InCallControlsPTTLeaveChannelCell.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsPTTLeaveChannelCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for InCallControlsPTTLeaveChannelCell()
{
  return type metadata accessor for InCallControlsPTTLeaveChannelCell();
}

void type metadata completion function for InCallControlsPTTLeaveChannelCell()
{
  type metadata accessor for UIButton.Configuration?(319, (unint64_t *)&lazy cache variable for type metadata for UIButton.Configuration?, MEMORY[0x1E4FB1290]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UIButton.Configuration?(319, &lazy cache variable for type metadata for UICellAccessory?, MEMORY[0x1E4FB0E68]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for UIButton.Configuration?(319, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?, MEMORY[0x1E4FB0F90]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for InCallControlsPTTLeaveChannelCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsPTTLeaveChannelCell);
}

uint64_t dispatch thunk of InCallControlsPTTLeaveChannelCell.leaveChannelButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of InCallControlsPTTLeaveChannelCell.configure(with:)(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD0);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v2;
  uint64_t v7 = v3;
  long long v8 = *(_OWORD *)(a1 + 40);
  return v4(v6);
}

void type metadata accessor for UIButton.Configuration?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C317DD80()
{
}

uint64_t sub_1C317DDA4()
{
  return 8;
}

uint64_t sub_1C317DDB0()
{
  return swift_release();
}

uint64_t sub_1C317DDB8(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1C317DDCC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v2);
    return specialized Dictionary._Variant.setValue(_:forKey:)(v2);
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(v2);
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v2, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    specialized Dictionary._Variant.setValue(_:forKey:)(v9, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1, &demangling cache variable for type metadata for Any?);
    uint64_t v6 = OUTLINED_FUNCTION_30_15();
    specialized Dictionary._Variant.removeValue(forKey:)(v6, v7, v8);
    swift_bridgeObjectRelease();
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

id CNKScreenSharingStateMonitorFactory.makeScreenSharingStateMonitor(using:)(void *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for ScreenSharingStateMonitor());
  id v3 = a1;
  return ScreenSharingStateMonitor.init(activeCall:conversationControllerProvider:)(a1, 0, 0);
}

uint64_t ScreenSharingStateMonitor.__allocating_init(activeCall:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v1 + 336))(a1, 0, 0);
}

CNKScreenSharingStateMonitorFactory __swiftcall CNKScreenSharingStateMonitorFactory.init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (CNKScreenSharingStateMonitorFactory)objc_msgSend(v0, sel_init);
}

id CNKScreenSharingStateMonitorFactory.init()()
{
  v1.super_class = (Class)CNKScreenSharingStateMonitorFactory;
  return objc_msgSendSuper2(&v1, sel_init);
}

id ScreenSharingStateMonitor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id CNKScreenSharingStateMonitorFactory.sharedMonitor.getter()
{
  if (one-time initialization token for sharedMonitor != -1) {
    swift_once();
  }
  id v0 = static ScreenSharingStateMonitor.sharedMonitor;
  return v0;
}

uint64_t ScreenSharingStateMonitor.isBroadcastingScreenSharing.getter()
{
  id v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit25ScreenSharingStateMonitor_isBroadcastingScreenSharing);
  OUTLINED_FUNCTION_2();
  return *v1;
}

uint64_t key path getter for ScreenSharingStateMonitor.isBroadcastingScreenSharing : ScreenSharingStateMonitor@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingStateMonitor.isBroadcastingScreenSharing : ScreenSharingStateMonitor(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD8))(*a1);
}

uint64_t (*ScreenSharingStateMonitor.isBroadcastingScreenSharing.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

BOOL ScreenSharingStateMonitor.isParticipantCurrentlySharing.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_10_35();
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v3 + 264))();
  uint64_t v4 = type metadata accessor for Participant(0);
  BOOL v5 = __swift_getEnumTagSinglePayload(v0, 1, v4) != 1;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v0, &demangling cache variable for type metadata for Participant?);
  return v5;
}

uint64_t key path getter for ScreenSharingStateMonitor.currentlySharingParticipant : ScreenSharingStateMonitor(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x108))();
}

uint64_t key path setter for ScreenSharingStateMonitor.currentlySharingParticipant : ScreenSharingStateMonitor(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for Participant?);
  return ScreenSharingStateMonitor.currentlySharingParticipant.setter((uint64_t)v4);
}

uint64_t ScreenSharingStateMonitor.currentlySharingParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit25ScreenSharingStateMonitor_currentlySharingParticipant;
  OUTLINED_FUNCTION_2();
  return outlined init with copy of Environment<DynamicTypeSize>.Content(v3, a1, &demangling cache variable for type metadata for Participant?);
}

double ScreenSharingStateMonitor.currentlySharingParticipantContentsSize.getter()
{
  uint64_t v1 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10_35();
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v8 + 264))();
  if (__swift_getEnumTagSinglePayload(v0, 1, v1))
  {
    uint64_t v9 = &demangling cache variable for type metadata for Participant?;
    uint64_t v10 = (void *)v0;
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_30_15();
    outlined init with copy of Participant(v11, v12);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v0, &demangling cache variable for type metadata for Participant?);
    Participant.screenInfo.getter(v15);
    outlined destroy of Participant(v5);
    if (v15[3] != 1)
    {
      double v13 = Participant.ScreenInfo.contentsSize.getter();
      outlined destroy of Participant.ScreenInfo((uint64_t)v15);
      return v13;
    }
    uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    uint64_t v10 = v15;
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, v9);
  return 0.0;
}

void *ScreenSharingStateMonitor.call.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit25ScreenSharingStateMonitor_call);
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void ScreenSharingStateMonitor.call.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit25ScreenSharingStateMonitor_call);
  OUTLINED_FUNCTION_11_0();
  uint64_t v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  ScreenSharingStateMonitor.call.didset();
}

uint64_t key path getter for ScreenSharingStateMonitor.call : ScreenSharingStateMonitor@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ScreenSharingStateMonitor.call : ScreenSharingStateMonitor(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130);
  id v4 = *a1;
  return v3(v2);
}

void ScreenSharingStateMonitor.call.didset()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit25ScreenSharingStateMonitor_call);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  ScreenSharingStateMonitor.updateConversationController(using:)(v2);
}

void (*ScreenSharingStateMonitor.call.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_6_1();
  return ScreenSharingStateMonitor.call.modify;
}

void ScreenSharingStateMonitor.call.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    ScreenSharingStateMonitor.call.didset();
  }
}

uint64_t ScreenSharingStateMonitor.removeObserver(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_6_1();
  specialized Dictionary.removeValue(forKey:)(a1, (uint64_t)v3);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v3, &demangling cache variable for type metadata for ScreenSharingStateMonitor.Observation?);
  return swift_endAccess();
}

void specialized Dictionary.removeValue(forKey:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v5 = v4;
  if (v4)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v7 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    Swift::Int v8 = *(void *)(v7 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ObjectIdentifier, ScreenSharingStateMonitor.Observation>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
    outlined init with take of ScreenSharingStateMonitor.Observation();
    _NativeDictionary._delete(at:)();
    uint64_t *v2 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v5 & 1) == 0;
}

uint64_t @objc ScreenSharingStateMonitor.addObserver(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  a4(a3);

  return swift_unknownObjectRelease();
}

uint64_t ScreenSharingStateMonitor.didUpdateScreenInfoForParticipant(_:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_63();
  unint64_t v6 = ScreenSharingStateMonitor.currentObservers()();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = OUTLINED_FUNCTION_11_7();
  *(_OWORD *)(v7 + 16) = xmmword_1C37696D0;
  outlined init with copy of Participant(a1, v2);
  uint64_t v8 = type metadata accessor for Participant(0);
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v8);
  uint64_t v9 = specialized >> prefix<A>(_:)();
  uint64_t v11 = v10;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v2, &demangling cache variable for type metadata for Participant?);
  uint64_t v12 = MEMORY[0x1E4FBB1A0];
  *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v13 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 64) = v13;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = String.init<A>(reflecting:)();
  *(void *)(v7 + 96) = v12;
  *(void *)(v7 + 104) = v13;
  *(void *)(v7 + 72) = v14;
  *(void *)(v7 + 80) = v15;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v17) {
      return swift_bridgeObjectRelease();
    }
  }
  if (v17 >= 1)
  {
    for (uint64_t i = 0; i != v17; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        uint64_t v19 = (void *)MEMORY[0x1C87744F0](i, v6);
      }
      else
      {
        uint64_t v19 = *(void **)(v6 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      if (objc_msgSend(v19, sel_respondsToSelector_, sel_screenSharingStateMonitorDidUpdateScreenInfoForParticipant_))objc_msgSend(v19, sel_screenSharingStateMonitorDidUpdateScreenInfoForParticipant_, v1); {
      swift_unknownObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void closure #1 in ScreenSharingStateMonitor.updateConversationController(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Participant(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v15 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FBCBE8], v12);
  char v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v17 = a3 + 16;
  swift_beginAccess();
  unint64_t v18 = (void *)MEMORY[0x1C8776240](v17);
  if (!v18
    || (uint64_t v19 = v18,
        uint64_t v20 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x128))(),
        v19,
        !v20))
  {
LABEL_9:
    if (one-time initialization token for conversationKit == -1)
    {
LABEL_10:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      return;
    }
LABEL_24:
    swift_once();
    goto LABEL_10;
  }
  if (!objc_msgSend(v20, sel_isConnected))
  {

    goto LABEL_9;
  }
  swift_beginAccess();
  uint64_t v21 = MEMORY[0x1C8776240](v17);
  if (!v21)
  {
LABEL_12:
    uint64_t v30 = MEMORY[0x1E4FBC860];
    goto LABEL_13;
  }
  uint64_t v22 = (void *)v21;
  uint64_t v23 = v21 + OBJC_IVAR____TtC15ConversationKit25ScreenSharingStateMonitor_conversationController;
  swift_beginAccess();
  outlined init with copy of Environment<DynamicTypeSize>.Content(v23, (uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for ScreenSharingStateMonitorConversationProviderProtocol?);

  uint64_t v24 = v40;
  if (!v40)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for ScreenSharingStateMonitorConversationProviderProtocol?);
    goto LABEL_12;
  }
  uint64_t v25 = v41;
  uint64_t v26 = __swift_project_boxed_opaque_existential_1(v39, v40);
  uint64_t v37 = (uint64_t)&v37;
  uint64_t v38 = a1;
  uint64_t v27 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v29);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for ScreenSharingStateMonitorConversationProviderProtocol?);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 40))(v24, v25);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v24);
  a1 = v38;
LABEL_13:
  outlined init with copy of Participant(a1, (uint64_t)v11);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1, v30);
  }
  unint64_t v32 = *(void *)(v30 + 16);
  unint64_t v31 = *(void *)(v30 + 24);
  if (v32 >= v31 >> 1) {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v30);
  }
  *(void *)(v30 + 16) = v32 + 1;
  outlined init with take of Participant((uint64_t)v11, v30+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v32);
  swift_beginAccess();
  uint64_t v33 = MEMORY[0x1C8776240](v17);
  if (v33)
  {
    uint64_t v34 = (void *)v33;
    Array<A>.screenSharingParticipant.getter();
    swift_bridgeObjectRelease();
    ScreenSharingStateMonitor.currentlySharingParticipant.setter((uint64_t)v7);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v35 = MEMORY[0x1C8776240](v17);
  if (v35)
  {
    id v36 = (void *)v35;
    ScreenSharingStateMonitor.didUpdateScreenInfoForParticipant(_:)(a1);
  }
  else
  {
  }
}

void closure #2 in ScreenSharingStateMonitor.updateConversationController(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)&v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t *v11 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBE8], v8);
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  a3 += 16;
  if (a2 != 3)
  {
    if (a2 != 4) {
      return;
    }
    if (one-time initialization token for conversationKit == -1)
    {
LABEL_5:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_beginAccess();
      uint64_t v13 = MEMORY[0x1C8776240](a3);
      if (v13)
      {
        uint64_t v14 = (void *)v13;
        uint64_t v15 = type metadata accessor for Participant(0);
        __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v15);
        ScreenSharingStateMonitor.currentlySharingParticipant.setter((uint64_t)v7);
      }
      swift_beginAccess();
      uint64_t v16 = MEMORY[0x1C8776240](a3);
      if (v16)
      {
        uint64_t v17 = (void *)v16;
        ScreenSharingStateMonitor.didChangeScreenSharingBroadcastingState(_:)(0);
LABEL_13:

        return;
      }
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_5;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_beginAccess();
  uint64_t v18 = MEMORY[0x1C8776240](a3);
  if (v18)
  {
    uint64_t v17 = (void *)v18;
    ScreenSharingStateMonitor.updateCurrentSharingParticipant()();
    goto LABEL_13;
  }
}

uint64_t ScreenSharingStateMonitor.updateCurrentSharingParticipant()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v4 = (char *)&v17[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v17[-1] - v5;
  uint64_t v7 = type metadata accessor for Participant(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))(v17, v8);
  uint64_t v11 = v18;
  if (!v18)
  {
    uint64_t v13 = (uint64_t *)&demangling cache variable for type metadata for ScreenSharingStateMonitorConversationProviderProtocol?;
    uint64_t v14 = v17;
    goto LABEL_5;
  }
  uint64_t v12 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  Array<A>.screenSharingParticipant.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    uint64_t v13 = &demangling cache variable for type metadata for Participant?;
    uint64_t v14 = v6;
LABEL_5:
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v14, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v7);
    ScreenSharingStateMonitor.currentlySharingParticipant.setter((uint64_t)v4);
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    return os_log(_:dso:log:type:_:)();
  }
  outlined init with take of Participant((uint64_t)v6, (uint64_t)v10);
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  outlined init with copy of Participant((uint64_t)v10, (uint64_t)v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v7);
  ScreenSharingStateMonitor.currentlySharingParticipant.setter((uint64_t)v4);
  return outlined destroy of Participant((uint64_t)v10);
}

void closure #3 in ScreenSharingStateMonitor.updateConversationController(using:)(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)&v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBE8], v4);
  uint64_t v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t v8 = a2 + 16;
    if (one-time initialization token for conversationKit == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C3769620;
  char v10 = a1 & 1;
  v16[8] = v10;
  uint64_t v11 = String.init<A>(reflecting:)();
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x1C8776240](v8);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    ScreenSharingStateMonitor.didChangeScreenSharingBroadcastingState(_:)(v10);
  }
}

void closure #4 in ScreenSharingStateMonitor.updateConversationController(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBE8], v5);
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once();
    goto LABEL_4;
  }
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(ObjectType, a2) & 1) == 0) {
    return;
  }
  a3 += 16;
  if (one-time initialization token for conversationKit != -1) {
    goto LABEL_8;
  }
LABEL_4:
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_beginAccess();
  uint64_t v11 = MEMORY[0x1C8776240](a3);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    ScreenSharingStateMonitor.updateCurrentSharingParticipant()();
  }
}

id ScreenSharingStateMonitor.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScreenSharingStateMonitor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CNKScreenSharingStateMonitorFactory(uint64_t a1)
{
  return type metadata accessor for NSObject(a1, (unint64_t *)&lazy cache variable for type metadata for CNKScreenSharingStateMonitorFactory);
}

uint64_t ObjC metadata update function for ScreenSharingStateMonitor()
{
  return type metadata accessor for ScreenSharingStateMonitor();
}

uint64_t method lookup function for ScreenSharingStateMonitor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingStateMonitor);
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.isBroadcastingScreenSharing.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.isBroadcastingScreenSharing.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.isBroadcastingScreenSharing.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.isParticipantCurrentlySharing.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.currentlySharingParticipant.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.currentlySharingParticipantContentsSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.call.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.call.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.call.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.addObserver(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.removeObserver(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.__allocating_init(activeCall:conversationControllerProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitor.activeConversationController.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitorConversationProviderProtocol.didUpdateVisibleParticipantScreenInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitorConversationProviderProtocol.didUpdateVisibleParticipantScreenInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitorConversationProviderProtocol.didUpdateVisibleParticipantScreenInfo.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitorConversationProviderProtocol.call.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitorConversationProviderProtocol.remoteParticipants.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitorConversationProviderProtocol.lookupActiveParticipant(correspondingTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ScreenSharingStateMonitorConversationProviderProtocol.lookupActiveParticipant(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t getEnumTagSinglePayload for ScreenSharingStateMonitor.Observation(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScreenSharingStateMonitor.Observation(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t outlined init with copy of ScreenSharingStateMonitor.Observation()
{
  return swift_unknownObjectWeakCopyInit();
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X8>)
{
  objc_super v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)();
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v2;
    uint64_t v8 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    Swift::Int v9 = *(void *)(v8 + 24);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<UUID, Date>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    uint64_t v10 = *(void *)(v18 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v4, v11);
    uint64_t v12 = *(void *)(v18 + 56);
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, v12 + *(void *)(*(void *)(v13 - 8) + 72) * v4, v13);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    _NativeDictionary._delete(at:)();
    uint64_t *v2 = v18;
    swift_bridgeObjectRelease();
    uint64_t v14 = a1;
    uint64_t v15 = 0;
    uint64_t v16 = v13;
  }
  else
  {
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v14 = a1;
    uint64_t v15 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v14, v15, 1, v16);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)();
  char v5 = v4;
  swift_bridgeObjectRelease();
  if (v5)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v1;
    uint64_t v7 = *v1;
    *uint64_t v1 = 0x8000000000000000;
    Swift::Int v8 = *(void *)(v7 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ContextMenuNotificationUserInfoKey, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
    outlined init with take of Any((_OWORD *)(*(void *)(v10 + 56) + 32 * v3), a1);
    lazy protocol witness table accessor for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey();
    _NativeDictionary._delete(at:)();
    *uint64_t v1 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v4;
    uint64_t v11 = *v4;
    *char v4 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v14 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    *char v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v3;
    uint64_t v9 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    Swift::Int v10 = *(void *)(v9 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    outlined destroy of AnyHashable(*(void *)(v12 + 48) + 40 * v6);
    outlined init with take of Any((_OWORD *)(*(void *)(v12 + 56) + 32 * v6), a2);
    _NativeDictionary._delete(at:)();
    *uint64_t v3 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  objc_super v2 = v0;
  uint64_t v3 = *v0;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_15_30();
  if ((v3 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_2_57();
  int v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, Set<String>>);
  OUTLINED_FUNCTION_6_52(v4, v5, v6, v7, v8, v9, v10, v11, v17, v18);
  uint64_t v12 = *(void *)(v19 + 48);
  uint64_t v13 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12 + *(void *)(v14 + 72) * v1, v13);
  uint64_t v15 = *(void *)(*(void *)(v19 + 56) + 8 * v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  _NativeDictionary._delete(at:)();
  void *v2 = v19;
  swift_bridgeObjectRelease();
  return v15;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_13_32();
  specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
  OUTLINED_FUNCTION_15_30();
  if ((v3 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_2_57();
  int v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, [TranscriptionViewModel.Caption]>);
  OUTLINED_FUNCTION_6_52(v4, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  OUTLINED_FUNCTION_17_25();
  uint64_t v12 = *(void *)(*(void *)(v3 + 56) + 8 * v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [TranscriptionViewModel.Caption]);
  _NativeDictionary._delete(at:)();
  *uint64_t v0 = v3;
  swift_bridgeObjectRelease();
  return v12;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_13_32();
  specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
  OUTLINED_FUNCTION_15_30();
  if ((v3 & 1) == 0) {
    return 1;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_2_57();
  int v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, UIImage?>);
  OUTLINED_FUNCTION_6_52(v4, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  OUTLINED_FUNCTION_17_25();
  uint64_t v12 = *(void *)(*(void *)(v3 + 56) + 8 * v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIImage?);
  _NativeDictionary._delete(at:)();
  *uint64_t v0 = v3;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  objc_super v2 = v1;
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v1;
  uint64_t v7 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<LayoutPosition, CGSize>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(*(void *)(v11 + 56) + 16 * v5);
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type LayoutPosition and conformance LayoutPosition();
  _NativeDictionary._delete(at:)();
  void *v2 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t lazy protocol witness table accessor for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey;
  if (!lazy protocol witness table cache variable for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey;
  if (!lazy protocol witness table cache variable for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContextMenuNotificationUserInfoKey and conformance ContextMenuNotificationUserInfoKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutPosition and conformance LayoutPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutPosition and conformance LayoutPosition;
  if (!lazy protocol witness table cache variable for type LayoutPosition and conformance LayoutPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPosition and conformance LayoutPosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutPosition and conformance LayoutPosition;
  if (!lazy protocol witness table cache variable for type LayoutPosition and conformance LayoutPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPosition and conformance LayoutPosition);
  }
  return result;
}

uint64_t sub_1C3180DC8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ScreenSharingStateMonitor.updateConversationController(using:)(uint64_t a1, uint64_t a2)
{
  closure #1 in ScreenSharingStateMonitor.updateConversationController(using:)(a1, a2, v2);
}

void partial apply for closure #2 in ScreenSharingStateMonitor.updateConversationController(using:)(uint64_t a1, uint64_t a2)
{
  closure #2 in ScreenSharingStateMonitor.updateConversationController(using:)(a1, a2, v2);
}

void partial apply for closure #3 in ScreenSharingStateMonitor.updateConversationController(using:)(char a1)
{
  closure #3 in ScreenSharingStateMonitor.updateConversationController(using:)(a1, v1);
}

void partial apply for closure #4 in ScreenSharingStateMonitor.updateConversationController(using:)(uint64_t a1, uint64_t a2)
{
  closure #4 in ScreenSharingStateMonitor.updateConversationController(using:)(a1, a2, v2);
}

uint64_t outlined init with copy of DefaultParticipantMediaProviderCreator(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of DefaultParticipantCaptionsProviderCreator(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of DefaultParticipantCaptionsProviderCreator(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of DefaultParticipantMediaProviderCreator(uint64_t a1)
{
  return a1;
}

Swift::Void __swiftcall CallControlsSidebarViewController.captioningStateDidChange()()
{
  if (objc_msgSend(v0, sel_isViewLoaded))
  {
    id v1 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
    ConversationHUDDetailsViewController.captioningStateDidChange()();
  }
}

id CallControlsSidebarViewController.__allocating_init(captionsStateController:controlsManager:sidebarStateStream:)()
{
  id v0 = objc_allocWithZone((Class)OUTLINED_FUNCTION_4_4());
  return CallControlsSidebarViewController.init(captionsStateController:controlsManager:sidebarStateStream:)();
}

void CallControlsSidebarViewController.updateSidebarInsets(_:)(double a1)
{
  uint64_t v2 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
  (*(void (**)(double, double, double, double))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x128))(0.0, 0.0, a1, 0.0);
}

id CallControlsSidebarViewController.init(captionsStateController:controlsManager:sidebarStateStream:)()
{
  OUTLINED_FUNCTION_4_4();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___topConverView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___bottomBlurView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_cancellables] = MEMORY[0x1E4FBC860];
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_captionsStateController + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = v3;
  swift_unknownObjectWeakAssign();
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_controlsManager] = v2;
  *(void *)&v1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_sidebarStateStream] = v0;
  v7.id receiver = v1;
  v7.super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v7, sel_initWithNibName_bundle_, 0, 0);
  swift_unknownObjectRelease();
  return v5;
}

id CallControlsSidebarViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void CallControlsSidebarViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___topConverView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___bottomBlurView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_cancellables] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_captionsStateController + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CallControlsSidebarViewController.viewDidLoad()()
{
  v1.id receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  CallControlsSidebarViewController.setupConstraints()();
  CallControlsSidebarViewController.observeContentOffset()();
}

void CallControlsSidebarViewController.setupConstraints()()
{
  objc_super v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769580;
  id v3 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v4 = objc_msgSend(v3, sel_topAnchor);

  id v5 = objc_msgSend(v1, sel_view);
  if (!v5)
  {
    __break(1u);
    goto LABEL_53;
  }
  int v6 = v5;
  id v7 = objc_msgSend(v5, sel_topAnchor);

  id v8 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v7);
  *(void *)(v2 + 32) = v8;
  id v9 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v10 = objc_msgSend(v9, sel_bottomAnchor);

  id v11 = objc_msgSend(v1, sel_view);
  if (!v11)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v12 = v11;
  id v13 = objc_msgSend(v11, sel_bottomAnchor);

  id v14 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v13);
  *(void *)(v2 + 40) = v14;
  id v15 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v16 = objc_msgSend(v15, sel_leadingAnchor);

  id v17 = objc_msgSend(v1, sel_view);
  if (!v17)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  char v18 = v17;
  id v19 = objc_msgSend(v17, sel_leadingAnchor);

  id v20 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v19);
  *(void *)(v2 + 48) = v20;
  id v21 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v22 = objc_msgSend(v21, sel_trailingAnchor);

  id v23 = objc_msgSend(v1, sel_view);
  if (!v23)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v24 = v23;
  id v25 = objc_msgSend(v23, sel_trailingAnchor);

  id v26 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v25);
  *(void *)(v2 + 56) = v26;
  unint64_t v107 = v2;
  specialized Array._endMutation()();
  id v27 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
  id v28 = objc_msgSend(v27, sel_view);

  if (!v28)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  id v29 = objc_msgSend(v28, sel_topAnchor);

  id v30 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v31 = objc_msgSend(v30, sel_topAnchor);

  id v32 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v31);
  id v33 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
  id v34 = objc_msgSend(v33, sel_view);

  if (!v34)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  id v35 = objc_msgSend(v34, sel_leadingAnchor);

  id v36 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v37 = objc_msgSend(v36, sel_leadingAnchor);

  id v38 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v37);
  id v39 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
  id v40 = objc_msgSend(v39, sel_view);

  if (!v40)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  id v41 = objc_msgSend(v40, sel_trailingAnchor);

  id v42 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v43 = objc_msgSend(v42, sel_trailingAnchor);

  id v44 = objc_msgSend(v41, sel_constraintEqualToAnchor_, v43);
  id v45 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
  id v46 = objc_msgSend(v45, sel_view);

  if (!v46)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    return;
  }
  id v47 = objc_msgSend(v46, sel_bottomAnchor);

  id v48 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v49 = objc_msgSend(v48, sel_bottomAnchor);

  id v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_, v49);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v51, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v51 + 4, 1);
    specialized Array._endMutation()();
    unint64_t v2 = (unint64_t)v32;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_13;
    }
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_13:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v52 = v38;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v53 = v44;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v54 = v50;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v55 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___topConverView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.topConverView.getter);
  id v56 = objc_msgSend(v55, sel_topAnchor);

  id v57 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v58 = objc_msgSend(v57, sel_topAnchor);

  id v104 = objc_msgSend(v56, sel_constraintEqualToAnchor_, v58);
  id v59 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___topConverView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.topConverView.getter);
  id v60 = objc_msgSend(v59, sel_leadingAnchor);

  id v61 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v62 = objc_msgSend(v61, sel_leadingAnchor);

  id v63 = objc_msgSend(v60, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v62);
  id v64 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___topConverView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.topConverView.getter);
  uint64_t v65 = &selRef_ringButton;
  id v66 = objc_msgSend(v64, sel_trailingAnchor);

  id v67 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v68 = objc_msgSend(v67, sel_trailingAnchor);

  id v69 = objc_msgSend(v66, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v68);
  id v70 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___topConverView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.topConverView.getter);
  id v71 = objc_msgSend(v70, sel_bottomAnchor);

  id v72 = objc_msgSend(v1, sel_view);
  if (!v72) {
    goto LABEL_60;
  }
  uint64_t v73 = v72;
  id v74 = objc_msgSend(v72, sel_safeAreaLayoutGuide);

  id v75 = objc_msgSend(v74, sel_topAnchor);
  id v76 = objc_msgSend(v71, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v75);

  if (v107 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v77 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v77, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v77 + 4, 1);
    specialized Array._endMutation()();
    uint64_t v65 = (char **)v104;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_24;
    }
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_24:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v78 = v63;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v79 = v69;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v80 = v76;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v81 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___bottomBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.bottomBlurView.getter);
  id v82 = objc_msgSend(v81, sel_bottomAnchor);

  id v83 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v84 = objc_msgSend(v83, sel_bottomAnchor);

  id v105 = objc_msgSend(v82, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v84);
  id v85 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___bottomBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.bottomBlurView.getter);
  id v86 = objc_msgSend(v85, sel_leadingAnchor);

  id v87 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  uint64_t v88 = &selRef_ringButton;
  id v89 = objc_msgSend(v87, sel_leadingAnchor);

  id v90 = objc_msgSend(v86, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v89);
  id v91 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___bottomBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.bottomBlurView.getter);
  id v92 = objc_msgSend(v91, sel_trailingAnchor);

  id v93 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
  id v94 = objc_msgSend(v93, sel_trailingAnchor);

  id v95 = objc_msgSend(v92, (SEL)&selRef_initializeCountdownWithInitialValue_fullValue_ + 6, v94);
  id v96 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___bottomBlurView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.bottomBlurView.getter);
  id v97 = objc_msgSend(v96, sel_heightAnchor);

  id v98 = objc_msgSend(v97, sel_constraintEqualToConstant_, 100.0);
  if (v107 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v99 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v99 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v99, 4))
  {
    __break(1u);
    goto LABEL_51;
  }
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v99 + 4, 1);
  specialized Array._endMutation()();
  uint64_t v88 = (char **)v105;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_51:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v100 = v90;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v101 = v95;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v102 = v98;
  MEMORY[0x1C87733A0]();
  if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v103 = self;
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v103, sel_activateConstraints_, isa);
}

void CallControlsSidebarViewController.observeContentOffset()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>, CGFloat>>);
  uint64_t v15 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>, CGFloat>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v0;
  uint64_t v12 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
  id v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v12) + 0x148))();

  if (v13)
  {
    swift_getKeyPath();
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

    swift_release();
    lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>();
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Map<NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>, CGFloat> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>, CGFloat>);
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.Map<NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>, CGFloat>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>, CGFloat>>);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v1);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [AnyCancellable]);
    AnyCancellable.store<A>(in:)();
    swift_endAccess();
    swift_release();
  }
}

id CallControlsSidebarViewController.detailsViewController.getter()
{
  return CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___detailsViewController, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.detailsViewController.getter);
}

id closure #1 in CallControlsSidebarViewController.contentView.getter(void *a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 320))())
  {
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
    uint64_t v3 = one-time initialization token for background;
    id v4 = v2;
    if (v3 != -1) {
      swift_once();
    }
    objc_msgSend(v4, sel_setBackgroundColor_, static Colors.InCallControls.background);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id result = objc_msgSend(a1, sel_view);
    if (result)
    {
      uint64_t v6 = result;
      objc_msgSend(result, sel_addSubview_, v4);

      id v7 = v4;
LABEL_12:

      return v7;
    }
    __break(1u);
  }
  else
  {
    if (one-time initialization token for backgroundBlurEffect != -1) {
      swift_once();
    }
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, static Colors.InCallControls.backgroundBlurEffect);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    id result = objc_msgSend(a1, sel_view);
    if (result)
    {
      uint64_t v8 = result;
      objc_msgSend(result, sel_addSubview_, v4);

      id v7 = objc_msgSend(v4, sel_contentView);
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

void *closure #1 in CallControlsSidebarViewController.detailsViewController.getter(char *a1)
{
  id v2 = *(void **)&a1[OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_controlsManager];
  id v3 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDDetailsViewController());
  id v4 = v2;
  uint64_t v5 = ConversationHUDDetailsViewController.init(controlsManager:)(v4);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  id v7 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x98);
  uint64_t v8 = swift_unknownObjectRetain();
  v7(v8);
  uint64_t v9 = *(void (**)(void *, _UNKNOWN **))((*v6 & *v4) + 0x450);
  uint64_t v10 = v5;
  v9(v5, &protocol witness table for ConversationHUDDetailsViewController);
  objc_msgSend(a1, sel_addChildViewController_, v10);
  id result = objc_msgSend(v10, sel_view);
  if (result)
  {
    uint64_t v12 = result;
    objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    id v13 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___contentView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.contentView.getter);
    id result = objc_msgSend(v10, sel_view);
    if (result)
    {
      uint64_t v14 = result;
      objc_msgSend(v13, sel_addSubview_, result);

      objc_msgSend(v10, sel_didMoveToParentViewController_, a1);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id closure #1 in CallControlsSidebarViewController.topConverView.getter(void *a1)
{
  id v2 = objc_msgSend(self, sel_effectWithStyle_, 6);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_initWithEffect_, v2);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v3, sel_setHidden_, 1);
  id result = objc_msgSend(a1, sel_view);
  if (result)
  {
    uint64_t v5 = result;
    objc_msgSend(result, sel_addSubview_, v3);

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id CallControlsSidebarViewController.detailsViewController.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in CallControlsSidebarViewController.bottomBlurView.getter(void *a1)
{
  static UnitPoint.top.getter();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  static UnitPoint.bottom.getter();
  uint64_t v12 = v3;
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t v16 = 0;
  LOBYTE(v17) = 1;
  id v8 = objc_allocWithZone((Class)type metadata accessor for VariableBlurUIView());
  id v9 = VariableBlurUIView.init(radius:blurMask:)((uint64_t)&v12, 4.0);
  objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0, v12, v13, v14, v15, v16, v17);
  id result = objc_msgSend(a1, sel_view);
  if (result)
  {
    id v11 = result;
    objc_msgSend(result, sel_addSubview_, v9);

    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double closure #1 in CallControlsSidebarViewController.observeContentOffset()@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

void closure #2 in CallControlsSidebarViewController.observeContentOffset()(double *a1, uint64_t a2)
{
  double v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_view);

    if (v6)
    {
      objc_msgSend(v6, sel_safeAreaInsets);
      double v8 = v7;

      swift_beginAccess();
      uint64_t v9 = MEMORY[0x1C8776240](v3);
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        id v11 = CallControlsSidebarViewController.detailsViewController.getter(&OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController____lazy_storage___topConverView, (uint64_t (*)(uint64_t))closure #1 in CallControlsSidebarViewController.topConverView.getter);

        objc_msgSend(v11, sel_setHidden_, v2 + v8 <= 0.0);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

id CallControlsSidebarViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CallControlsSidebarViewController.init(nibName:bundle:)()
{
}

id CallControlsSidebarViewController.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CallControlsSidebarViewController.isCaptioningEnabled.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_captionsStateController;
  uint64_t result = MEMORY[0x1C8776240](v0 + OBJC_IVAR____TtC15ConversationKit33CallControlsSidebarViewController_captionsStateController);
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
    swift_unknownObjectRelease();
    return v3 & 1;
  }
  return result;
}

Swift::Void __swiftcall CallControlsSidebarViewController.wantsDismissal()()
{
}

uint64_t type metadata accessor for CallControlsSidebarViewController()
{
  return self;
}

uint64_t method lookup function for CallControlsSidebarViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallControlsSidebarViewController);
}

uint64_t dispatch thunk of CallControlsSidebarViewController.__allocating_init(captionsStateController:controlsManager:sidebarStateStream:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

char *keypath_get_selector_contentOffset()
{
  return sel_contentOffset;
}

id sub_1C3183288@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_contentOffset);
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_1C31832BC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContentOffset_, *a1, a1[1]);
}

unint64_t lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<UICollectionView, CGPoint> and conformance NSObject.KeyValueObservingPublisher<A, B>);
  }
  return result;
}

uint64_t sub_1C3183358()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in CallControlsSidebarViewController.observeContentOffset()(double *a1)
{
  closure #2 in CallControlsSidebarViewController.observeContentOffset()(a1, v1);
}

BOOL static RemoteControlParticipant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void RemoteControlParticipant.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int RemoteControlParticipant.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type RemoteControlParticipant and conformance RemoteControlParticipant()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlParticipant and conformance RemoteControlParticipant;
  if (!lazy protocol witness table cache variable for type RemoteControlParticipant and conformance RemoteControlParticipant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlParticipant and conformance RemoteControlParticipant);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RemoteControlParticipant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3183548);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteControlParticipant()
{
  return &type metadata for RemoteControlParticipant;
}

BOOL CGSize.isLandscape.getter(double a1, double a2)
{
  return a2 < a1;
}

double CGSize.adjustedPoints(with:scaleFactor:)(double a1, double a2, double a3)
{
  double v3 = a3 / a1 * a2;
  type metadata accessor for UIView();
  double v4 = static UIView.screenScale.getter();
  double v5 = round(v3 * v4) / v4;
  static UIView.screenScale.getter();
  return v5;
}

double CGSize.roundedToDisplay.getter(double a1)
{
  type metadata accessor for UIView();
  double v2 = static UIView.screenScale.getter();
  double v3 = round(v2 * a1) / v2;
  static UIView.screenScale.getter();
  return v3;
}

double CGSize.min.getter(double result, double a2)
{
  if (a2 < result) {
    return a2;
  }
  return result;
}

double CGSize.max.getter(double result, double a2)
{
  if (result <= a2) {
    return a2;
  }
  return result;
}

BOOL CGSize.isSquare.getter(double a1, double a2)
{
  return a1 == a2;
}

BOOL CGSize.isPortrait.getter(double a1, double a2)
{
  return a1 < a2;
}

double CGSize.swapped.getter(double a1, double a2)
{
  return a2;
}

double CGSize.asPortrait.getter(double a1, double a2)
{
  if (a2 >= a1) {
    return a1;
  }
  else {
    return a2;
  }
}

double CGSize.asLandscape.getter(double a1, double a2)
{
  if (a1 >= a2) {
    return a1;
  }
  else {
    return a2;
  }
}

double CGSize.heightFromBottom(for:)(double a1, double a2, double a3)
{
  return a3 - (1.0 - a1) * a3;
}

double CGSize.rounded(_:toScale:)(uint64_t a1, double a2, double a3, double a4)
{
  double v7 = CGFloat.rounded(_:toScale:)(a1, a2, a3);
  CGFloat.rounded(_:toScale:)(a1, a2, a4);
  return v7;
}

double CGSize.rounded(_:toScaleOf:)()
{
  OUTLINED_FUNCTION_0_50();
  objc_msgSend(v2, sel_displayScale);
  CGFloat.rounded(_:toScale:)(v0, v3, v1);
  OUTLINED_FUNCTION_1_8();
  return v1;
}

{
  uint64_t v0;
  double v1;
  id v2;
  id v3;
  double v4;

  OUTLINED_FUNCTION_0_50();
  double v3 = objc_msgSend(v2, sel_traitCollection);
  objc_msgSend(v3, sel_displayScale);
  CGFloat.rounded(_:toScale:)(v0, v4, v1);
  OUTLINED_FUNCTION_1_8();

  return v1;
}

double CGSize.rounded(_:toScaleOf:)(uint64_t a1, void *a2, double a3, double a4)
{
  swift_getObjectType();
  return specialized CGPoint.rounded(_:toScaleOf:)(a1, a2, a3, a4);
}

uint64_t DropdownViewModel.MenuItem.id.getter()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t DropdownViewModel.MenuItem.label.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t type metadata accessor for DropdownViewModel.MenuItem(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for DropdownViewModel.MenuItem);
}

uint64_t DropdownViewModel.MenuItem.onAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t DropdownViewModel.MenuItem.accessibilityIdentifier.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t DropdownViewModel.MenuItem.isEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for DropdownViewModel.MenuItem(0) + 32));
}

uint64_t DropdownViewModel.MenuItem.isEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for DropdownViewModel.MenuItem(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*DropdownViewModel.MenuItem.isEnabled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t one-time initialization function for separatorMenuItem()
{
  uint64_t v0 = (int *)type metadata accessor for DropdownViewModel.MenuItem(0);
  __swift_allocate_value_buffer((uint64_t)v0, static DropdownViewModel.MenuItem.separatorMenuItem);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static DropdownViewModel.MenuItem.separatorMenuItem);
  uint64_t result = UUID.init()();
  double v3 = (void *)(v1 + v0[5]);
  *double v3 = 0x6F74617261706573;
  v3[1] = 0xE900000000000072;
  double v4 = (void *)(v1 + v0[6]);
  *double v4 = TPNumberPadCharacter.rawValue.getter;
  v4[1] = 0;
  double v5 = (void *)(v1 + v0[7]);
  *double v5 = 0;
  v5[1] = 0xE000000000000000;
  *(unsigned char *)(v1 + v0[8]) = 1;
  return result;
}

uint64_t default argument 3 of DropdownViewModel.MenuItem.init(label:onAction:accessibilityIdentifier:isEnabled:)()
{
  return 1;
}

int *DropdownViewModel.MenuItem.init(label:onAction:accessibilityIdentifier:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  OUTLINED_FUNCTION_6_53();
  UUID.init()();
  uint64_t result = (int *)type metadata accessor for DropdownViewModel.MenuItem(0);
  uint64_t v16 = (void *)(v11 + result[5]);
  *uint64_t v16 = v10;
  v16[1] = v9;
  uint64_t v17 = (void *)(v11 + result[6]);
  *uint64_t v17 = v8;
  v17[1] = v7;
  char v18 = (void *)(v11 + result[7]);
  *char v18 = a5;
  v18[1] = a6;
  *(unsigned char *)(v11 + result[8]) = a7;
  return result;
}

uint64_t DropdownViewModel.MenuItem.separatorMenuItem.unsafeMutableAddressor()
{
  if (one-time initialization token for separatorMenuItem != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for DropdownViewModel.MenuItem(0);
  return __swift_project_value_buffer(v0, (uint64_t)static DropdownViewModel.MenuItem.separatorMenuItem);
}

uint64_t static DropdownViewModel.MenuItem.separatorMenuItem.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for separatorMenuItem != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DropdownViewModel.MenuItem(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static DropdownViewModel.MenuItem.separatorMenuItem);
  OUTLINED_FUNCTION_7_2();
  return outlined init with copy of DropdownViewModel.MenuItem(v3, a1);
}

uint64_t outlined init with copy of DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DropdownViewModel.MenuItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static DropdownViewModel.MenuItem.separatorMenuItem.setter(uint64_t a1)
{
  if (one-time initialization token for separatorMenuItem != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DropdownViewModel.MenuItem(0);
  __swift_project_value_buffer(v2, (uint64_t)static DropdownViewModel.MenuItem.separatorMenuItem);
  swift_beginAccess();
  uint64_t v3 = OUTLINED_FUNCTION_35();
  outlined assign with copy of DropdownViewModel.MenuItem(v3, v4);
  swift_endAccess();
  return outlined destroy of DropdownViewModel.MenuItem(a1);
}

uint64_t outlined assign with copy of DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DropdownViewModel.MenuItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DropdownViewModel.MenuItem(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DropdownViewModel.MenuItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*static DropdownViewModel.MenuItem.separatorMenuItem.modify())()
{
  if (one-time initialization token for separatorMenuItem != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for DropdownViewModel.MenuItem(0);
  __swift_project_value_buffer(v0, (uint64_t)static DropdownViewModel.MenuItem.separatorMenuItem);
  OUTLINED_FUNCTION_7_53();
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t protocol witness for Identifiable.id.getter in conformance DropdownViewModel.MenuItem@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t DropdownViewModel.primaryText.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t DropdownViewModel.primaryColor.getter()
{
  return swift_retain();
}

uint64_t DropdownViewModel.symbolName.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t DropdownViewModel.primaryAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t (*DropdownViewModel._menuItems.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for DropdownViewModel.menuItems : DropdownViewModel@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t key path setter for DropdownViewModel.menuItems : DropdownViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t DropdownViewModel.menuItems.init@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t DropdownViewModel.menuItems.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v0 + 240))();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C31840CC@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 160))();
  *a1 = result;
  return result;
}

uint64_t DropdownViewModel.menuItems.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_9_38();
  v0();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DropdownViewModel.menuItems.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in DropdownViewModel.menuItems.setter()
{
  return closure #1 in DropdownViewModel.menuItems.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void (*DropdownViewModel.menuItems.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  void v3[4] = v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v4 + 240))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit17DropdownViewModel___observationRegistrar);
  unint64_t v5 = lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type DropdownViewModel and conformance DropdownViewModel);
  OUTLINED_FUNCTION_11_3(v5);
  swift_release();
  v3[7] = DropdownViewModel._menuItems.modify();
  return DropdownViewModel.menuItems.modify;
}

void DropdownViewModel.menuItems.modify(void *a1)
{
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  *uint64_t v1 = v1[4];
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v1);
}

uint64_t type metadata accessor for DropdownViewModel(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for DropdownViewModel);
}

uint64_t (*DropdownViewModel._isEnabled.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for DropdownViewModel.isEnabled : DropdownViewModel@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for DropdownViewModel.isEnabled : DropdownViewModel(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 216))(*a1);
}

uint64_t DropdownViewModel.isEnabled.init@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t DropdownViewModel.isEnabled.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 240))();
  swift_release();
  OUTLINED_FUNCTION_7_2();
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t sub_1C31844A4@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 208))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C31844F0()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t DropdownViewModel.isEnabled.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_9_38();
  v0();
  return swift_release();
}

uint64_t closure #1 in DropdownViewModel.isEnabled.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 80) = a2;
  return result;
}

uint64_t partial apply for closure #1 in DropdownViewModel.isEnabled.setter()
{
  return closure #1 in DropdownViewModel.isEnabled.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void (*DropdownViewModel.isEnabled.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  void v3[4] = v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v4 + 240))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit17DropdownViewModel___observationRegistrar);
  unint64_t v5 = lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type DropdownViewModel and conformance DropdownViewModel);
  OUTLINED_FUNCTION_11_3(v5);
  swift_release();
  v3[7] = DropdownViewModel._isEnabled.modify();
  return DropdownViewModel.isEnabled.modify;
}

void DropdownViewModel.isEnabled.modify(void *a1)
{
}

uint64_t DropdownViewModel.__allocating_init(primaryText:primaryColor:symbolName:primaryAction:menuItems:isEnabled:)()
{
  OUTLINED_FUNCTION_2_58();
  uint64_t v0 = swift_allocObject();
  DropdownViewModel.init(primaryText:primaryColor:symbolName:primaryAction:menuItems:isEnabled:)();
  return v0;
}

uint64_t DropdownViewModel.init(primaryText:primaryColor:symbolName:primaryAction:menuItems:isEnabled:)()
{
  OUTLINED_FUNCTION_2_58();
  ObservationRegistrar.init()();
  *(void *)(v1 + 16) = v8;
  *(void *)(v1 + 24) = v7;
  *(void *)(v1 + 32) = v6;
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  *(unsigned char *)(v1 + 80) = v9;
  return v1;
}

uint64_t DropdownViewModel.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t DropdownViewModel.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t DropdownViewModel.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit17DropdownViewModel___observationRegistrar;
  type metadata accessor for ObservationRegistrar();
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

uint64_t DropdownViewModel.__deallocating_deinit()
{
  DropdownViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t DropdownMenuButton.viewModel.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<DropdownViewModel>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for DropdownMenuButton.viewModel : DropdownMenuButton@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DropdownMenuButton.viewModel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for DropdownMenuButton.viewModel : DropdownMenuButton()
{
  swift_retain();
  return DropdownMenuButton.viewModel.setter();
}

uint64_t DropdownMenuButton.viewModel.setter()
{
  return State.wrappedValue.setter();
}

void (*DropdownMenuButton.viewModel.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  void v6[5] = a3;
  *uint64_t v6 = a2;
  v6[1] = a3;
  swift_retain();
  swift_retain();
  v6[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<DropdownViewModel>);
  State.wrappedValue.getter();
  return DropdownMenuButton.viewModel.modify;
}

void DropdownMenuButton.viewModel.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  v2[3] = *(void *)(*(void *)a1 + 16);
  uint64_t v3 = v2[5];
  void *v2 = v2[4];
  v2[1] = v3;
  if (a2)
  {
    swift_retain();
    State.wrappedValue.setter();
    swift_release();
  }
  else
  {
    State.wrappedValue.setter();
  }
  swift_release();
  swift_release();
  free(v2);
}

uint64_t DropdownMenuButton.$viewModel.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<DropdownViewModel>);
  State.projectedValue.getter();
  return v1;
}

uint64_t DropdownMenuButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(void *)a3 = static VerticalAlignment.center.getter();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>>, AccessibilityAttachmentModifier>, _OverlayModifier<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>?>>>);
  return closure #1 in DropdownMenuButton.body.getter(a1, a2, a3 + *(int *)(v10 + 44), a4, a5);
}

uint64_t closure #1 in DropdownMenuButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v68 = a3;
  uint64_t v9 = type metadata accessor for MacButtonStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  uint64_t v65 = v10;
  MEMORY[0x1F4188790](v9);
  id v58 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout>>);
  uint64_t v62 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  id v56 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>);
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15);
  id v57 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>>);
  MEMORY[0x1F4188790](v66);
  uint64_t v63 = (uint64_t)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>>, AccessibilityAttachmentModifier>);
  MEMORY[0x1F4188790](v19 - 8);
  id v67 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<DropdownViewModel>);
  State.wrappedValue.getter();
  uint64_t v21 = v77[7];
  uint64_t v22 = v77[8];
  swift_retain();
  swift_release();
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  State.wrappedValue.getter();
  uint64_t v55 = v77[3];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  State.wrappedValue.getter();
  uint64_t v23 = v77[4];
  swift_retain();
  swift_release();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v21;
  *(void *)(v24 + 24) = v22;
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  double v73 = a4;
  double v74 = a5;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  id v25 = v58;
  MacButtonStyle.init(insets:rim:fillWidth:)();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Button<ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout>> and conformance Button<A>);
  lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type MacButtonStyle and conformance MacButtonStyle);
  id v26 = v56;
  id v27 = v25;
  uint64_t v28 = v60;
  uint64_t v29 = v64;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v27, v29);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v28);
  uint64_t v30 = v59;
  uint64_t v31 = (uint64_t)v57;
  uint64_t v32 = v61;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v57, v26, v61);
  *(void *)(v31 + *(int *)(v16 + 44)) = v23;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v32);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v33 = v69;
  uint64_t v34 = v70;
  uint64_t v75 = v69;
  uint64_t v76 = v70;
  uint64_t v35 = State.wrappedValue.getter();
  LOBYTE(v32) = (*(uint64_t (**)(uint64_t))(*v77 + 208))(v35);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v37 = swift_allocObject();
  *(unsigned char *)(v37 + 16) = (v32 & 1) == 0;
  uint64_t v38 = v63;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v31, v63, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>);
  id v39 = (uint64_t *)(v38 + *(int *)(v66 + 36));
  *id v39 = KeyPath;
  v39[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v39[2] = v37;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v31, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>);
  uint64_t v75 = v33;
  uint64_t v76 = v34;
  State.wrappedValue.getter();
  uint64_t v41 = v77[2];
  uint64_t v40 = v77[3];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v75 = v41;
  uint64_t v76 = v40;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v42 = Text.init<A>(_:)();
  uint64_t v44 = v43;
  LOBYTE(v31) = v45 & 1;
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>((uint64_t)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  uint64_t v46 = (uint64_t)v67;
  View.accessibilityLabel(_:)();
  outlined consume of Text.Storage(v42, v44, v31);
  swift_bridgeObjectRelease();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v47 = static Alignment.trailing.getter();
  uint64_t v49 = v48;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>>, AccessibilityAttachmentModifier>, _OverlayModifier<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>?>>);
  uint64_t v51 = v68;
  uint64_t v52 = v68 + *(int *)(v50 + 36);
  closure #1 in closure #1 in DropdownMenuButton.body.getter(v69, v70, v52, a4, a5);
  id v53 = (uint64_t *)(v52
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>?>)
                           + 36));
  *id v53 = v47;
  v53[1] = v49;
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v46, v51, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>>, AccessibilityAttachmentModifier>);
}

uint64_t closure #1 in closure #1 in DropdownMenuButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10 = type metadata accessor for BorderlessButtonStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<DropdownViewModel>);
  uint64_t v14 = State.wrappedValue.getter();
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 160))(v14);
  swift_release();
  uint64_t v16 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v18 = v17;
  if (v16)
  {
    id v56 = v46;
    uint64_t v55 = v17 - 8;
    MEMORY[0x1F4188790](v17);
    uint64_t v54 = (uint64_t)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v59 = a1;
    uint64_t v60 = a2;
    uint64_t v57 = v20;
    uint64_t v21 = State.wrappedValue.getter();
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 160))(v21);
    uint64_t v47 = v13;
    uint64_t v48 = v22;
    uint64_t v23 = v22;
    swift_release();
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>);
    id v53 = v46;
    MEMORY[0x1F4188790](v24 - 8);
    uint64_t v50 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
    uint64_t v52 = v46;
    uint64_t v51 = *(void *)(v49 - 8);
    MEMORY[0x1F4188790](v49);
    uint64_t v58 = a3;
    id v27 = (char *)v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<EmptyView, ForEach<[DropdownViewModel.MenuItem], UUID, _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>>>>);
    v46[1] = v46;
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = MEMORY[0x1F4188790](v28);
    uint64_t v32 = (char *)v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x1F4188790](v30);
    v46[-6] = v23;
    v46[-5] = a1;
    v46[-4] = v33;
    *(double *)&v46[-3] = a4;
    *(double *)&v46[-2] = a5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[DropdownViewModel.MenuItem], UUID, _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>>>);
    lazy protocol witness table accessor for type Group<_ConditionalContent<Image, Text>> and conformance <A> Group<A>((uint64_t)&lazy protocol witness table cache variable for type ForEach<[DropdownViewModel.MenuItem], UUID, _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>>> and conformance <> ForEach<A, B, C>);
    Menu.init(content:label:)();
    uint64_t v34 = v47;
    BorderlessButtonStyle.init()();
    unint64_t v35 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Menu<EmptyView, ForEach<[DropdownViewModel.MenuItem], UUID, _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>>>> and conformance Menu<A, B>);
    unint64_t v36 = lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v59 = v28;
    uint64_t v60 = v10;
    unint64_t v61 = v35;
    unint64_t v62 = v36;
    swift_getOpaqueTypeConformance2();
    uint64_t v37 = v49;
    uint64_t v38 = (uint64_t)v50;
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v39 = v27;
    a3 = v58;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v37);
    uint64_t v40 = static Color.white.getter();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v42 = v54;
    outlined init with copy of Environment<DynamicTypeSize>.Content(v38, v54, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>);
    uint64_t v43 = (uint64_t *)(v42 + *(int *)(v55 + 44));
    *uint64_t v43 = KeyPath;
    v43[1] = v40;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>);
    swift_bridgeObjectRelease();
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v42, a3, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    uint64_t v18 = v57;
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v44 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a3, v44, 1, v18);
}

double closure #2 in DropdownMenuButton.primaryButton(action:text:color:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  closure #1 in closure #2 in DropdownMenuButton.primaryButton(action:text:color:)(a1, a2, (uint64_t)&v13);
  long long v12 = v13;
  uint64_t v4 = v14;
  uint64_t v5 = v15;
  char v6 = v16;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v7 = v13;
  char v8 = BYTE8(v13);
  uint64_t v9 = v14;
  char v10 = v15;
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v4;
  *(void *)(a3 + 24) = v5;
  *(unsigned char *)(a3 + 32) = v6;
  *(void *)(a3 + 40) = v7;
  *(unsigned char *)(a3 + 48) = v8;
  *(void *)(a3 + 56) = v9;
  *(unsigned char *)(a3 + 64) = v10;
  double result = *(double *)&v16;
  *(_OWORD *)(a3 + 72) = v16;
  return result;
}

double closure #1 in closure #2 in DropdownMenuButton.primaryButton(action:text:color:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v9 = a1;
  *((void *)&v9 + 1) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<DropdownViewModel>);
  State.wrappedValue.getter();
  uint64_t v4 = v8[6];
  swift_bridgeObjectRetain();
  swift_release();
  if (v4)
  {
    Image.init(systemName:)();
  }
  else
  {
    State.wrappedValue.getter();
    uint64_t v6 = v8[2];
    uint64_t v5 = v8[3];
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&long long v9 = v6;
    *((void *)&v9 + 1) = v5;
    lazy protocol witness table accessor for type String and conformance String();
    Text.init<A>(_:)();
  }
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v10;
  *(unsigned char *)(a3 + 32) = v11;
  return result;
}

uint64_t closure #1 in DropdownMenuButton.menu(items:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a4;
  *(void *)(v9 + 24) = a5;
  *(double *)(v9 + 32) = a1;
  *(double *)(v9 + 40) = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DropdownViewModel.MenuItem]);
  type metadata accessor for UUID();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>>);
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type [DropdownViewModel.MenuItem] and conformance [A]);
  lazy protocol witness table accessor for type _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>> and conformance <> _ConditionalContent<A, B>();
  lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type DropdownViewModel.MenuItem and conformance DropdownViewModel.MenuItem);
  return ForEach<>.init(_:content:)();
}

uint64_t closure #1 in closure #1 in DropdownMenuButton.menu(items:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>);
  MEMORY[0x1F4188790](v6 - 8);
  id v39 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>);
  MEMORY[0x1F4188790](v41);
  uint64_t v40 = (uint64_t)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>>.Storage);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Divider();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DropdownViewModel.MenuItem(0);
  uint64_t v17 = (uint64_t *)(a1 + *(int *)(v16 + 20));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  BOOL v20 = *v17 == 0x6F74617261706573 && v19 == 0xE900000000000072;
  if (v20 || (uint64_t v21 = (int *)v16, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    Divider.init()();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v15, v12);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type Divider and conformance Divider);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>((uint64_t)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    uint64_t v23 = v21[7];
    uint64_t v24 = (uint64_t *)(a1 + v21[6]);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    int v36 = *(unsigned __int8 *)(a1 + v21[8]);
    uint64_t v27 = *(void *)(a1 + v23 + 8);
    v35[1] = *(void *)(a1 + v23);
    v35[2] = v27;
    uint64_t v28 = swift_allocObject();
    v35[0] = v35;
    *(void *)(v28 + 16) = v26;
    *(void *)(v28 + 24) = v25;
    MEMORY[0x1F4188790](v28);
    v35[-2] = v18;
    v35[-1] = v19;
    swift_retain();
    Button.init(action:label:)();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
    uint64_t v29 = v38;
    uint64_t v30 = (uint64_t)v39;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v29);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v32 = swift_allocObject();
    *(unsigned char *)(v32 + 16) = (v36 & 1) == 0;
    uint64_t v33 = v40;
    outlined init with copy of Environment<DynamicTypeSize>.Content(v30, v40, &demangling cache variable for type metadata for ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>);
    uint64_t v34 = (uint64_t *)(v33 + *(int *)(v41 + 36));
    *uint64_t v34 = KeyPath;
    v34[1] = (uint64_t)closure #1 in View.disabled(_:)partial apply;
    _OWORD v34[2] = v32;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v30, &demangling cache variable for type metadata for ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>);
    outlined init with copy of Environment<DynamicTypeSize>.Content(v33, (uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type Divider and conformance Divider);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>((uint64_t)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
    _ConditionalContent<>.init(storage:)();
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v33, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>);
  }
}

uint64_t closure #2 in DropdownMenuButton.menuButton(action:title:enabled:accessibilityIdentifier:)@<X0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

double DropdownMenuButton.init(viewModel:)()
{
  return 70.0;
}

uint64_t protocol witness for View.body.getter in conformance DropdownMenuButton@<X0>(uint64_t a1@<X8>)
{
  return DropdownMenuButton.body.getter(*(void *)v1, *(void *)(v1 + 8), a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

unint64_t static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_.fileID.getter()
{
  return 0xD000000000000028;
}

uint64_t static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_.line.getter()
{
  return 128;
}

uint64_t static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_.column.getter()
{
  return 1;
}

uint64_t static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_.makePreview()()
{
  return Preview.init(_:traits:body:)();
}

uint64_t closure #1 in closure #1 in static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_.makePreview()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v19 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in closure #1 in static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC070597PreviewfMf_15PreviewRegistryfMu_.makePreview()((uint64_t)&v20);
  uint64_t v2 = v21;
  uint64_t v18 = v20;
  uint64_t v3 = v22;
  uint64_t v4 = v23;
  uint64_t v5 = v24;
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  uint64_t v8 = v27;
  uint64_t v9 = v28;
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  uint64_t v12 = v31;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v13 = v20;
  uint64_t v14 = v22;
  uint64_t v15 = v24;
  uint64_t v16 = v25;
  char v34 = 1;
  char v33 = v21;
  char v32 = v23;
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>>, _FrameLayout>);
  a1[4] = lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  uint64_t result = swift_allocObject();
  *a1 = result;
  *(void *)(result + 16) = v19;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = v34;
  *(void *)(result + 40) = v18;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = v3;
  *(void *)(result + 64) = v4;
  *(void *)(result + 72) = v5;
  *(void *)(result + 80) = v6;
  *(void *)(result + 88) = v7;
  *(void *)(result + 96) = v8;
  *(void *)(result + 104) = v9;
  *(void *)(result + 112) = v10;
  *(void *)(result + 120) = v11;
  *(void *)(result + 128) = v12;
  *(void *)(result + 136) = v13;
  *(unsigned char *)(result + 144) = v33;
  *(void *)(result + 152) = v14;
  *(unsigned char *)(result + 160) = v32;
  *(void *)(result + 168) = v15;
  *(void *)(result + 176) = v16;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_.makePreview()@<X0>(uint64_t a1@<X8>)
{
  static Color.green.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DropdownViewModel.MenuItem>);
  uint64_t v2 = (int *)(type metadata accessor for DropdownViewModel.MenuItem(0) - 8);
  uint64_t v3 = *(void *)(*(void *)v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C37696D0;
  unint64_t v6 = v5 + v4;
  UUID.init()();
  uint64_t v7 = (char *)(v6 + v2[7]);
  strcpy(v7, "FaceTime Audio");
  v7[15] = -18;
  uint64_t v8 = (void *)(v6 + v2[8]);
  *uint64_t v8 = TPNumberPadCharacter.rawValue.getter;
  v8[1] = 0;
  uint64_t v9 = (char *)(v6 + v2[9]);
  strcpy(v9, "facetime-audio");
  v9[15] = -18;
  *(unsigned char *)(v6 + v2[10]) = 1;
  uint64_t v10 = v6 + v3;
  UUID.init()();
  uint64_t v11 = (void *)(v10 + v2[7]);
  void *v11 = 0x32756E654DLL;
  v11[1] = 0xE500000000000000;
  uint64_t v12 = (void *)(v10 + v2[8]);
  void *v12 = TPNumberPadCharacter.rawValue.getter;
  v12[1] = 0;
  uint64_t v13 = (void *)(v10 + v2[9]);
  *uint64_t v13 = 0x32756E656DLL;
  v13[1] = 0xE500000000000000;
  *(unsigned char *)(v10 + v2[10]) = 1;
  type metadata accessor for DropdownViewModel(0);
  swift_allocObject();
  DropdownViewModel.init(primaryText:primaryColor:symbolName:primaryAction:menuItems:isEnabled:)();
  State.init(wrappedValue:)();
  static Color.green.getter();
  swift_allocObject();
  DropdownViewModel.init(primaryText:primaryColor:symbolName:primaryAction:menuItems:isEnabled:)();
  State.init(wrappedValue:)();
  static Color.green.getter();
  swift_allocObject();
  DropdownViewModel.init(primaryText:primaryColor:symbolName:primaryAction:menuItems:isEnabled:)();
  State.init(wrappedValue:)();
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v16;
  *(_OWORD *)(a1 + 16) = xmmword_1C3772700;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 48) = xmmword_1C3772700;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 80) = xmmword_1C3772700;
  swift_retain();
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in DropdownMenuButton()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t protocol witness for static PreviewRegistry.fileID.getter in conformance $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_()
{
  return 0xD000000000000028;
}

uint64_t protocol witness for static PreviewRegistry.line.getter in conformance $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_()
{
  return 128;
}

uint64_t protocol witness for static PreviewRegistry.makePreview() in conformance $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_()
{
  return static $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC070597PreviewfMf_15PreviewRegistryfMu_.makePreview()();
}

uint64_t protocol witness for static PreviewRegistry.preview.getter in conformance $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_()
{
  return MEMORY[0x1F40E0618]();
}

uint64_t ObjC metadata update function for DropdownViewModel()
{
  return type metadata accessor for DropdownViewModel(0);
}

uint64_t type metadata completion function for DropdownViewModel()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for DropdownViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DropdownViewModel);
}

uint64_t dispatch thunk of DropdownViewModel.menuItems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of DropdownViewModel.menuItems.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of DropdownViewModel.menuItems.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of DropdownViewModel.isEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of DropdownViewModel.isEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of DropdownViewModel.isEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of DropdownViewModel.__allocating_init(primaryText:primaryColor:symbolName:primaryAction:menuItems:isEnabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of DropdownViewModel.access<A>(keyPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of DropdownViewModel.withMutation<A, B>(keyPath:_:)()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 248))();
}

void *initializeBufferWithCopyOfBuffer for DropdownViewModel.MenuItem(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)((char *)a1 + v9);
    uint64_t v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DropdownViewModel.MenuItem(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  void *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  swift_release();
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3187238);
}

uint64_t sub_1C3187238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DropdownViewModel.MenuItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31872DC);
}

void sub_1C31872DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for DropdownViewModel.MenuItem()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for DropdownMenuButton()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for DropdownMenuButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DropdownMenuButton(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for DropdownMenuButton(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for DropdownMenuButton()
{
  return &type metadata for DropdownMenuButton;
}

ValueMetadata *type metadata accessor for $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC07059Ll7PreviewfMf_15PreviewRegistryfMu_()
{
  return &type metadata for $s15ConversationKit0029DropdownMenuButtonswift_tAFJhfMX127_0_33_145CC22525012368AB9D61C69EC070597PreviewfMf_15PreviewRegistryfMu_;
}

unint64_t sub_1C318756C()
{
  return lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type HStack<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>>, AccessibilityAttachmentModifier>, _OverlayModifier<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>?>>> and conformance HStack<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>>, _FrameLayout>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>> and conformance VStack<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DropdownMenuButton, DropdownMenuButton, DropdownMenuButton)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C3187648()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C31876A8()
{
  swift_release();
  return swift_deallocObject();
}

double partial apply for closure #2 in DropdownMenuButton.primaryButton(action:text:color:)@<D0>(uint64_t a1@<X8>)
{
  return closure #2 in DropdownMenuButton.primaryButton(action:text:color:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout>);
    lazy protocol witness table accessor for type Group<_ConditionalContent<Image, Text>> and conformance <A> Group<A>((uint64_t)&lazy protocol witness table cache variable for type Group<_ConditionalContent<Image, Text>> and conformance <A> Group<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Image, Text> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<Image, Text> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Image, Text> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<Image, Text>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Image, Text> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unsigned char *partial apply for closure #1 in View.disabled(_:)(unsigned char *a1)
{
  return closure #1 in View.disabled(_:)(a1, *(unsigned char *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout>>);
    type metadata accessor for MacButtonStyle();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Button<ModifiedContent<Group<_ConditionalContent<Image, Text>>, _FrameLayout>> and conformance Button<A>);
    lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type MacButtonStyle and conformance MacButtonStyle);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type _EnvironmentBackgroundStyleModifier<Color> and conformance _EnvironmentBackgroundStyleModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in DropdownMenuButton.menu(items:)()
{
  return closure #1 in DropdownMenuButton.menu(items:)(*(double *)(v0 + 40), *(double *)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<Image, Text>> and conformance <A> Group<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    int v5 = v4;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(v3);
    v5();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>>);
    lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type Divider and conformance Divider);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>((uint64_t)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Divider, ModifiedContent<ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>, _EnvironmentKeyTransformModifier<Bool>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentBackgroundStyleModifier<Color>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    int v5 = v4;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(v3);
    v5();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<Text>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Button<Text>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
    lazy protocol witness table accessor for type DropdownViewModel and conformance DropdownViewModel((uint64_t)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C3187C74()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DropdownMenuButton.menu(items:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in DropdownMenuButton.menu(items:)(a1, a2);
}

uint64_t partial apply for closure #2 in DropdownMenuButton.menuButton(action:title:enabled:accessibilityIdentifier:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in DropdownMenuButton.menuButton(action:title:enabled:accessibilityIdentifier:)(a1);
}

BOOL static MomentsIndicatorViewDisplayStyle.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MomentsIndicatorViewDisplayStyle.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int MomentsIndicatorViewDisplayStyle.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MomentsIndicatorViewDisplayStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static MomentsIndicatorViewDisplayStyle.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MomentsIndicatorViewDisplayStyle()
{
  return MomentsIndicatorViewDisplayStyle.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MomentsIndicatorViewDisplayStyle(uint64_t a1)
{
  MomentsIndicatorViewDisplayStyle.hash(into:)(a1, *v1);
}

BOOL static MomentsIndicatorType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void MomentsIndicatorType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static MomentsIndicatorType.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

Swift::Int MomentsIndicatorType.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MomentsIndicatorType(char *a1, char *a2)
{
  return static MomentsIndicatorType.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MomentsIndicatorType()
{
  return MomentsIndicatorType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MomentsIndicatorType(uint64_t a1)
{
  MomentsIndicatorType.hash(into:)(a1, *v1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance MomentsIndicatorType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static MomentsIndicatorType.< infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance MomentsIndicatorType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance MomentsIndicatorType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance MomentsIndicatorType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, *a2);
}

uint64_t key path getter for MomentsIndicatorView.displayStyle : MomentsIndicatorView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for MomentsIndicatorView.displayStyle : MomentsIndicatorView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68))(*a1);
}

void MomentsIndicatorView.displayStyle.didset(char a1)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_displayStyle);
  swift_beginAccess();
  if (((((a1 & 1) == 0) ^ *v3) & 1) == 0) {
    MomentsIndicatorView.refreshLayout()();
  }
}

uint64_t MomentsIndicatorView.displayStyle.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_displayStyle);
  OUTLINED_FUNCTION_2();
  return *v1;
}

void MomentsIndicatorView.displayStyle.setter(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_displayStyle);
  swift_beginAccess();
  char v4 = *v3;
  *uint64_t v3 = v2;
  MomentsIndicatorView.displayStyle.didset(v4);
}

void (*MomentsIndicatorView.displayStyle.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  char v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_displayStyle);
  OUTLINED_FUNCTION_2();
  *((unsigned char *)v3 + 32) = *v4;
  return MomentsIndicatorView.displayStyle.modify;
}

void MomentsIndicatorView.displayStyle.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  MomentsIndicatorView.displayStyle.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t MomentsIndicatorView.bubblesByType.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_bubblesByType);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

id MomentsIndicatorView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

id MomentsIndicatorView.init(frame:)()
{
  v0[OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_displayStyle] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_bubblesByType;
  type metadata accessor for MomentsIndicatorBubble();
  lazy protocol witness table accessor for type MomentsIndicatorType and conformance MomentsIndicatorType();
  char v2 = v0;
  *(void *)&v0[v1] = Dictionary.init(dictionaryLiteral:)();

  v5.id receiver = v2;
  v5.super_class = (Class)type metadata accessor for MomentsIndicatorView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v3, sel_setUserInteractionEnabled_, 0);
  return v3;
}

unint64_t lazy protocol witness table accessor for type MomentsIndicatorType and conformance MomentsIndicatorType()
{
  unint64_t result = lazy protocol witness table cache variable for type MomentsIndicatorType and conformance MomentsIndicatorType;
  if (!lazy protocol witness table cache variable for type MomentsIndicatorType and conformance MomentsIndicatorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MomentsIndicatorType and conformance MomentsIndicatorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MomentsIndicatorType and conformance MomentsIndicatorType;
  if (!lazy protocol witness table cache variable for type MomentsIndicatorType and conformance MomentsIndicatorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MomentsIndicatorType and conformance MomentsIndicatorType);
  }
  return result;
}

uint64_t type metadata accessor for MomentsIndicatorView()
{
  return self;
}

id MomentsIndicatorView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void MomentsIndicatorView.init(coder:)()
{
  v0[OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_displayStyle] = 0;
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_bubblesByType;
  type metadata accessor for MomentsIndicatorBubble();
  lazy protocol witness table accessor for type MomentsIndicatorType and conformance MomentsIndicatorType();
  *(void *)&v0[v1] = Dictionary.init(dictionaryLiteral:)();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void MomentsIndicatorView.didTimeOut(for:)(void *a1)
{
  OUTLINED_FUNCTION_2();
  id v2 = a1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3, v2);
  swift_bridgeObjectRelease();
  MomentsIndicatorView.bubblesByType.setter(v4);
  objc_msgSend(v2, sel_removeFromSuperview);
  MomentsIndicatorView.refreshLayout()();
}

Swift::Void __swiftcall MomentsIndicatorView.presentCaptureIndicator(type:remoteParticipantName:)(ConversationKit::MomentsIndicatorType type, Swift::String remoteParticipantName)
{
  uint64_t v3 = v2;
  object = (char *)remoteParticipantName._object;
  uint64_t countAndFlagsBits = remoteParticipantName._countAndFlagsBits;
  uint64_t v6 = type;
  uint64_t v7 = (char *)type metadata accessor for DispatchPredicate();
  uint64_t v8 = *((void *)v7 - 1);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (void *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *uint64_t v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, char *))(v8 + 104))(v10, *MEMORY[0x1E4FBCBE8], v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, char *))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v12 = (uint64_t *)&v3[OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_bubblesByType];
  OUTLINED_FUNCTION_2();
  uint64_t v13 = specialized Dictionary.subscript.getter(v6, *v12);
  if (!v13)
  {
    type metadata accessor for MomentsIndicatorViewModel();
    swift_allocObject();
    MomentsIndicatorViewModel.init(type:remoteParticipantName:)(v6, countAndFlagsBits, (uint64_t)object);
    id v15 = objc_allocWithZone((Class)type metadata accessor for MomentsIndicatorBubble());
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_retain();
    uint64_t v17 = MomentsIndicatorBubble.init(model:)(v16);
    objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v21[3] = type metadata accessor for MomentsIndicatorView();
    void v21[4] = &protocol witness table for MomentsIndicatorView;
    v21[0] = v3;
    uint64_t v18 = *(void (**)(void *))((*MEMORY[0x1E4FBC8C8] & *(void *)v17) + 0x98);
    object = v3;
    v18(v21);
    objc_msgSend(v17, sel_setAlpha_, 0.0);
    swift_beginAccess();
    uint64_t v7 = v17;
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v7, v6);
    swift_endAccess();
    objc_msgSend(object, sel_addSubview_, v7);
    v21[0] = MomentsIndicatorView.makeCommonConstraints(for:)(v7);
    swift_bridgeObjectRetain();
    id v19 = MomentsIndicatorView.makeBottomConstraint(for:in:)(v7);
    swift_bridgeObjectRelease();
    if (!v19)
    {
LABEL_7:
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(object, sel_addConstraints_, isa);

      objc_msgSend(object, sel_setNeedsLayout);
      objc_msgSend(object, sel_layoutIfNeeded);
      objc_msgSend(v7, sel_start);

      swift_release();
      goto LABEL_8;
    }
    uint64_t v6 = (uint64_t)v19;
    MEMORY[0x1C87733A0]();
    if (*(void *)((v21[0] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v21[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_6:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_7;
    }
LABEL_10:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_6;
  }
  uint64_t v14 = v13;
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v13) + 0xE0))();

LABEL_8:
  MomentsIndicatorView.refreshLayout()();
}

void MomentsIndicatorView.refreshLayout()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC15ConversationKit20MomentsIndicatorView_bubblesByType];
  OUTLINED_FUNCTION_2();
  specialized _NativeDictionary.makeIterator()(v24, *(void *)v1);
  uint64_t v2 = v24[0];
  uint64_t v22 = v24[1];
  int64_t v3 = v24[3];
  unint64_t v4 = v24[4];
  int64_t v5 = (unint64_t)(v24[2] + 64) >> 6;
  swift_bridgeObjectRetain_n();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v7 = v6 | (v3 << 6);
  while (1)
  {
    uint64_t v16 = *(void **)(*(void *)(v2 + 56) + 8 * v7);
    uint64_t v17 = self;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v0;
    *(_OWORD *)(v18 + 24) = xmmword_1C3772A40;
    *(void *)(v18 + 40) = v16;
    aBlock[4] = partial apply for closure #1 in closure #1 in MomentsIndicatorView.refreshLayout();
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    id aBlock[3] = &block_descriptor_33;
    id v19 = _Block_copy(aBlock);
    id v20 = v16;
    uint64_t v21 = v0;
    swift_release();
    objc_msgSend(v17, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 0, v19, 0, 0.25, 0.0);
    _Block_release(v19);

    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v8 >= v5) {
      goto LABEL_23;
    }
    unint64_t v9 = *(void *)(v22 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      if (v3 + 2 >= v5) {
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_2_59();
      if (!v9)
      {
        if (v11 + 2 >= v5) {
          goto LABEL_23;
        }
        OUTLINED_FUNCTION_2_59();
        if (!v9)
        {
          if (v12 + 3 >= v5) {
            goto LABEL_23;
          }
          OUTLINED_FUNCTION_2_59();
          if (!v9)
          {
            if (v13 + 4 >= v5) {
              goto LABEL_23;
            }
            OUTLINED_FUNCTION_2_59();
            if (!v9)
            {
              int64_t v10 = v14 + 5;
              if (v14 + 5 >= v5) {
                goto LABEL_23;
              }
              unint64_t v9 = *(void *)(v22 + 8 * v10);
              if (!v9)
              {
                int64_t v15 = v3 + 7;
                while (v15 < v5)
                {
                  unint64_t v9 = *(void *)(v22 + 8 * v15++);
                  if (v9)
                  {
                    int64_t v10 = v15 - 1;
                    goto LABEL_20;
                  }
                }
LABEL_23:
                swift_bridgeObjectRelease();
                swift_release();
                return;
              }
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v3 = v10;
  }
  __break(1u);
}

void animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout()(void *a1, void *a2, double a3, double a4)
{
  int64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v21 = partial apply for closure #1 in animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout();
  uint64_t v22 = v9;
  uint64_t v17 = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  id v19 = thunk for @escaping @callee_guaranteed () -> ();
  id v20 = &block_descriptor_18;
  int64_t v10 = _Block_copy(&v17);
  id v11 = a1;
  id v12 = a2;
  swift_release();
  objc_msgSend(v8, sel_addKeyframeWithRelativeStartTime_relativeDuration_animations_, v10, 0.0, 1.0);
  _Block_release(v10);
  objc_msgSend(v11, sel_alpha);
  if ((v13 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v11;
    uint64_t v21 = partial apply for closure #2 in animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout();
    uint64_t v22 = v14;
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    id v19 = thunk for @escaping @callee_guaranteed () -> ();
    id v20 = &block_descriptor_24_0;
    int64_t v15 = _Block_copy(&v17);
    id v16 = v11;
    swift_release();
    objc_msgSend(v8, sel_addKeyframeWithRelativeStartTime_relativeDuration_animations_, v15, a3, a4);
    _Block_release(v15);
  }
}

id closure #1 in animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout()(void *a1, void *a2)
{
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA8))();
  if (v5)
  {
    unint64_t v6 = (void *)v5;
    objc_msgSend(a2, sel_removeConstraint_, v5);
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v7 = MomentsIndicatorView.makeBottomConstraint(for:in:)(a1);
  swift_bridgeObjectRelease();
  if (v7)
  {
    int64_t v8 = *(void (**)(id))((*v4 & *a1) + 0xB0);
    id v9 = v7;
    v8(v7);
    objc_msgSend(a2, sel_addConstraint_, v9);
  }
  else
  {
    (*(void (**)(void))((*v4 & *a1) + 0xB0))(0);
  }
  objc_msgSend(a2, sel_setNeedsLayout);
  return objc_msgSend(a2, sel_layoutIfNeeded);
}

id MomentsIndicatorView.makeCommonConstraints(for:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769F40;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  uint64_t v4 = type metadata accessor for MomentsIndicatorBubble();
  uint64_t v5 = type metadata accessor for MomentsIndicatorView();
  id v6 = a1;
  id v7 = v1;
  double v8 = OUTLINED_FUNCTION_1_76();
  *(void *)(v3 + 32) = @nonobjc NSLayoutConstraint.__allocating_init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:)(v9, 9, 0, v10, 9, v8, v11);
  uint64_t v19 = v4;
  *((void *)&v17 + 1) = v5;
  v18[0] = v6;
  *(void *)&long long v16 = v7;
  id v12 = v6;
  id v13 = v7;
  id result = @nonobjc NSLayoutConstraint.init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:priority:)(v18, 7, -1, &v16, 7, 0.85, 0.0, 750.0);
  if (result)
  {
    *(void *)(v3 + 40) = result;
    uint64_t v19 = v4;
    v18[0] = v12;
    long long v16 = 0u;
    long long v17 = 0u;
    id v15 = v12;
    id result = @nonobjc NSLayoutConstraint.init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:priority:)(v18, 7, -1, &v16, 0, 1.0, 500.0, 1000.0);
    if (result)
    {
      *(void *)(v3 + 48) = result;
      v18[0] = v3;
      specialized Array._endMutation()();
      return (id)v18[0];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id @nonobjc NSLayoutConstraint.__allocating_init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6, double a7)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v14 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v15 = a4[3];
  if (v15)
  {
    long long v16 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
    uint64_t v24 = a5;
    uint64_t v25 = a2;
    uint64_t v17 = a3;
    uint64_t v18 = *(void *)(v15 - 8);
    MEMORY[0x1F4188790](v16);
    id v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v18 + 16))(v20);
    uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
    a3 = v17;
    a5 = v24;
    a2 = v25;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a4);
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_, v14, a2, a3, v21, a5, a6, a7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v22;
}

id @nonobjc NSLayoutConstraint.init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:priority:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6, double a7, float a8)
{
  uint64_t v32 = a5;
  uint64_t v14 = a1[3];
  if (v14)
  {
    long long v16 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v17 = *(void *)(v14 - 8);
    MEMORY[0x1F4188790](v16);
    uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v19);
    uint64_t v20 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = a4[3];
  if (v21)
  {
    id v22 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
    uint64_t v23 = *(void *)(v21 - 8);
    MEMORY[0x1F4188790](v22);
    uint64_t v25 = (char *)&v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v23 + 16))(v25);
    uint64_t v26 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a4);
  }
  else
  {
    uint64_t v26 = 0;
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  *(float *)&double v28 = a8;
  id v29 = objc_msgSend(ObjCClassFromMetadata, sel_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_priority_, v20, a2, a3, v26, v32, a6, a7, v28);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v29;
}

id MomentsIndicatorView.makeBottomConstraint(for:in:)(void *a1)
{
  id v2 = a1;
  uint64_t v3 = swift_bridgeObjectRetain();
  v26[0] = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  specialized MutableCollection<>.sort(by:)(v26, v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v26[0];
  specialized Collection<>.firstIndex(of:)((uint64_t)v2, v26[0], v5, v6, v7, v8, v9, v10, v24, v25[0]);
  if (v12)
  {
    swift_release();
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationKit);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_1C2F90000, v19, v20, "bubble is missing from bubblesByType", v21, 2u);
      MEMORY[0x1C87760E0](v21, -1, -1);
    }

    return 0;
  }
  else
  {
    if (v11)
    {
      uint64_t v13 = v11 - 1;
      if (__OFSUB__(v11, 1))
      {
        __break(1u);
      }
      else
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v11 - 1, (v4 & 0xC000000000000001) == 0, v4);
        if ((v4 & 0xC000000000000001) == 0)
        {
          id v14 = *(id *)(v4 + 8 * v13 + 32);
LABEL_6:
          uint64_t v15 = (uint64_t)v14;
          swift_release();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
          uint64_t v27 = type metadata accessor for MomentsIndicatorBubble();
          v25[3] = v27;
          v26[0] = (uint64_t)v2;
          v25[0] = v15;
          id v16 = v2;
          return @nonobjc NSLayoutConstraint.__allocating_init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:)(v26, 4, 0, v25, 3, 1.0, -10.0);
        }
      }
      id v14 = (id)MEMORY[0x1C87744F0](v13, v4);
      goto LABEL_6;
    }
    uint64_t v22 = swift_release();
    char v23 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60))(v22);
    return MomentsIndicatorView.makeBottomConstraint(for:style:)(v2, v23 & 1);
  }
}

id MomentsIndicatorView.makeBottomConstraint(for:style:)(void *a1, char a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  v14[3] = type metadata accessor for MomentsIndicatorBubble();
  v14[0] = a1;
  void v13[3] = type metadata accessor for MomentsIndicatorView();
  v13[0] = v2;
  id v5 = a1;
  id v6 = v2;
  if (a2)
  {
    double v9 = OUTLINED_FUNCTION_1_76();
    uint64_t v11 = 10;
  }
  else
  {
    uint64_t v7 = v14;
    uint64_t v8 = v13;
    double v9 = 0.75;
    double v10 = 0.0;
    uint64_t v11 = 4;
  }
  return @nonobjc NSLayoutConstraint.__allocating_init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:)(v7, 10, 0, v8, v11, v9, v10);
}

id MomentsIndicatorView.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for MomentsIndicatorView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for MomentsIndicatorBubbleDelegate.didTimeOut(for:) in conformance MomentsIndicatorView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x90))();
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  id v4 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v6 = *(void *)(v3 + 16);
  v8[0] = v3 + 32;
  v8[1] = v6;
  id v7 = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, v7);
  specialized ContiguousArray._endMutation()();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, void *a2)
{
  Swift::Int v4 = a1[1];
  id v5 = a2;
  Swift::Int v6 = _minimumMergeRunLength(_:)(v4);
  if (v6 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, v5);
      }
      else {

      }
      goto LABEL_111;
    }
    goto LABEL_134;
  }
  Swift::Int v7 = v6;
  uint64_t v122 = v2;
  uint64_t v127 = v5;
  uint64_t v8 = specialized static Array._allocateUninitialized(_:)(v4 / 2);
  unint64_t v121 = v9;
  uint64_t v128 = v8;
  uint64_t v118 = v4;
  uint64_t v111 = a1;
  if (v4 <= 0)
  {
    char v12 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v54 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_95:
    if (v54 < 2)
    {
LABEL_109:
      swift_bridgeObjectRelease();
      if (v4 >= -1) {
        goto LABEL_110;
      }
      goto LABEL_139;
    }
    uint64_t v104 = *v111;
    uint64_t v126 = *v111;
    while (1)
    {
      unint64_t v105 = v54 - 2;
      if (v54 < 2) {
        break;
      }
      if (!v104) {
        goto LABEL_143;
      }
      uint64_t v106 = *(void *)&v12[16 * v105 + 32];
      uint64_t v107 = *(void *)&v12[16 * v54 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v104 + 8 * v106), (id *)(v104 + 8 * *(void *)&v12[16 * v54 + 16]), v104 + 8 * v107, v121, v127);
      if (v122) {
        goto LABEL_92;
      }
      if (v107 < v106) {
        goto LABEL_129;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
      }
      if (v105 >= *((void *)v12 + 2)) {
        goto LABEL_130;
      }
      uint64_t v108 = &v12[16 * v105 + 32];
      *(void *)uint64_t v108 = v106;
      *((void *)v108 + 1) = v107;
      unint64_t v109 = *((void *)v12 + 2);
      if (v54 > v109) {
        goto LABEL_131;
      }
      memmove(&v12[16 * v54 + 16], &v12[16 * v54 + 32], 16 * (v109 - v54));
      *((void *)v12 + 2) = v109 - 1;
      unint64_t v54 = v109 - 1;
      Swift::Int v4 = v118;
      uint64_t v104 = v126;
      if (v109 <= 2) {
        goto LABEL_109;
      }
    }
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:

    __break(1u);
LABEL_141:
    char v34 = v127;

    __break(1u);
LABEL_142:

    __break(1u);
LABEL_143:

    __break(1u);
    return;
  }
  Swift::Int v112 = v7;
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v110 = *a1 - 8;
  char v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v125 = *a1;
  while (1)
  {
    Swift::Int v13 = v10;
    Swift::Int v14 = v10 + 1;
    Swift::Int v116 = v10;
    if (v10 + 1 >= v4)
    {
      char v34 = v127;
    }
    else
    {
      uint64_t v113 = v12;
      uint64_t v15 = *(void **)(v11 + 8 * v14);
      id v16 = *(void **)(v11 + 8 * v10);
      uint64_t v17 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v18 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x78);
      uint64_t v19 = v15;
      id v20 = v16;
      uint64_t v21 = v18();
      Swift::Int v13 = v116;
      unsigned int v123 = *(unsigned __int8 *)(v21 + 16);
      uint64_t v22 = swift_release();
      char v23 = *(uint64_t (**)(uint64_t))((*v17 & *v127) + 0x78);
      unsigned int v119 = *(unsigned __int8 *)(v23(v22) + 16);

      swift_release();
      Swift::Int v14 = v116 + 2;
      if (v116 + 2 < v4)
      {
        Swift::Int v24 = v116;
        while (1)
        {
          uint64_t v25 = v125 + 8 * v24;
          uint64_t v27 = *(void **)(v25 + 8);
          uint64_t v26 = *(void **)(v25 + 16);
          double v28 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v26) + 0x78);
          id v29 = v26;
          id v30 = v27;
          unsigned int v31 = *(unsigned __int8 *)(v28() + 16);
          uint64_t v32 = swift_release();
          LODWORD(v28) = *(unsigned __int8 *)(v23(v32) + 16);

          swift_release();
          if (v119 < v123 == v28 >= v31) {
            break;
          }
          uint64_t v33 = v24 + 3;
          ++v24;
          Swift::Int v4 = v118;
          if (v33 >= v118)
          {
            Swift::Int v14 = v118;
            goto LABEL_12;
          }
        }
        Swift::Int v14 = v24 + 2;
        Swift::Int v4 = v118;
LABEL_12:
        Swift::Int v13 = v116;
      }
      char v34 = v127;
      char v12 = v113;
      uint64_t v11 = v125;
      if (v119 < v123)
      {
        if (v14 < v13) {
          goto LABEL_136;
        }
        if (v13 < v14)
        {
          unint64_t v35 = (uint64_t *)(v110 + 8 * v14);
          Swift::Int v36 = v14;
          Swift::Int v37 = v13;
          uint64_t v38 = (uint64_t *)(v125 + 8 * v13);
          do
          {
            if (v37 != --v36)
            {
              if (!v125) {
                goto LABEL_142;
              }
              uint64_t v39 = *v38;
              *uint64_t v38 = *v35;
              *unint64_t v35 = v39;
            }
            ++v37;
            --v35;
            ++v38;
          }
          while (v37 < v36);
        }
      }
    }
    if (v14 < v4)
    {
      if (__OFSUB__(v14, v13)) {
        goto LABEL_133;
      }
      if (v14 - v13 < v112)
      {
        if (__OFADD__(v13, v112)) {
          goto LABEL_137;
        }
        if (v13 + v112 >= v4) {
          Swift::Int v40 = v4;
        }
        else {
          Swift::Int v40 = v13 + v112;
        }
        if (v40 < v13) {
          goto LABEL_138;
        }
        if (v14 != v40)
        {
          uint64_t v114 = v12;
          unint64_t v124 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v34) + 0x78);
          uint64_t v41 = v110 + 8 * v14;
          Swift::Int v115 = v40;
          do
          {
            uint64_t v42 = *(void **)(v11 + 8 * v14);
            Swift::Int v43 = v13;
            uint64_t v120 = v41;
            while (1)
            {
              Swift::Int v44 = v14;
              char v45 = *(void **)v41;
              uint64_t v46 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v42) + 0x78);
              uint64_t v47 = v42;
              id v48 = v45;
              LODWORD(v46) = *(unsigned __int8 *)(v46() + 16);
              uint64_t v49 = swift_release();
              unsigned int v50 = *(unsigned __int8 *)(v124(v49) + 16);

              swift_release();
              if (v50 >= v46) {
                break;
              }
              uint64_t v11 = v125;
              if (!v125) {
                goto LABEL_140;
              }
              Swift::Int v14 = v44;
              uint64_t v51 = *(void **)v41;
              uint64_t v42 = *(void **)(v41 + 8);
              *(void *)uint64_t v41 = v42;
              *(void *)(v41 + 8) = v51;
              v41 -= 8;
              if (v44 == ++v43) {
                goto LABEL_37;
              }
            }
            uint64_t v11 = v125;
            Swift::Int v14 = v44;
LABEL_37:
            ++v14;
            uint64_t v41 = v120 + 8;
            Swift::Int v13 = v116;
          }
          while (v14 != v115);
          Swift::Int v14 = v115;
          char v12 = v114;
        }
      }
    }
    if (v14 < v13) {
      goto LABEL_132;
    }
    uint64_t v117 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v53 = *((void *)v12 + 2);
    unint64_t v52 = *((void *)v12 + 3);
    unint64_t v54 = v53 + 1;
    if (v53 >= v52 >> 1) {
      char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v54;
    uint64_t v55 = v12 + 32;
    id v56 = &v12[16 * v53 + 32];
    *(void *)id v56 = v13;
    *((void *)v56 + 1) = v117;
    if (v53) {
      break;
    }
    unint64_t v54 = 1;
LABEL_87:
    uint64_t v10 = v117;
    Swift::Int v4 = v118;
    if (v117 >= v118) {
      goto LABEL_95;
    }
  }
  while (1)
  {
    unint64_t v57 = v54 - 1;
    if (v54 >= 4)
    {
      unint64_t v62 = &v55[16 * v54];
      uint64_t v63 = *((void *)v62 - 8);
      uint64_t v64 = *((void *)v62 - 7);
      BOOL v68 = __OFSUB__(v64, v63);
      uint64_t v65 = v64 - v63;
      if (v68) {
        goto LABEL_117;
      }
      uint64_t v67 = *((void *)v62 - 6);
      uint64_t v66 = *((void *)v62 - 5);
      BOOL v68 = __OFSUB__(v66, v67);
      uint64_t v60 = v66 - v67;
      char v61 = v68;
      if (v68) {
        goto LABEL_118;
      }
      unint64_t v69 = v54 - 2;
      uint64_t v70 = &v55[16 * v54 - 32];
      uint64_t v72 = *(void *)v70;
      uint64_t v71 = *((void *)v70 + 1);
      BOOL v68 = __OFSUB__(v71, v72);
      uint64_t v73 = v71 - v72;
      if (v68) {
        goto LABEL_119;
      }
      BOOL v68 = __OFADD__(v60, v73);
      uint64_t v74 = v60 + v73;
      if (v68) {
        goto LABEL_121;
      }
      if (v74 >= v65)
      {
        id v92 = &v55[16 * v57];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        BOOL v68 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v68) {
          goto LABEL_127;
        }
        BOOL v85 = v60 < v95;
        goto LABEL_76;
      }
    }
    else
    {
      if (v54 != 3)
      {
        uint64_t v86 = *((void *)v12 + 4);
        uint64_t v87 = *((void *)v12 + 5);
        BOOL v68 = __OFSUB__(v87, v86);
        uint64_t v79 = v87 - v86;
        char v80 = v68;
        goto LABEL_70;
      }
      uint64_t v59 = *((void *)v12 + 4);
      uint64_t v58 = *((void *)v12 + 5);
      BOOL v68 = __OFSUB__(v58, v59);
      uint64_t v60 = v58 - v59;
      char v61 = v68;
    }
    if (v61) {
      goto LABEL_120;
    }
    unint64_t v69 = v54 - 2;
    uint64_t v75 = &v55[16 * v54 - 32];
    uint64_t v77 = *(void *)v75;
    uint64_t v76 = *((void *)v75 + 1);
    BOOL v78 = __OFSUB__(v76, v77);
    uint64_t v79 = v76 - v77;
    char v80 = v78;
    if (v78) {
      goto LABEL_122;
    }
    id v81 = &v55[16 * v57];
    uint64_t v83 = *(void *)v81;
    uint64_t v82 = *((void *)v81 + 1);
    BOOL v68 = __OFSUB__(v82, v83);
    uint64_t v84 = v82 - v83;
    if (v68) {
      goto LABEL_124;
    }
    if (__OFADD__(v79, v84)) {
      goto LABEL_126;
    }
    if (v79 + v84 >= v60)
    {
      BOOL v85 = v60 < v84;
LABEL_76:
      if (v85) {
        unint64_t v57 = v69;
      }
      goto LABEL_78;
    }
LABEL_70:
    if (v80) {
      goto LABEL_123;
    }
    uint64_t v88 = &v55[16 * v57];
    uint64_t v90 = *(void *)v88;
    uint64_t v89 = *((void *)v88 + 1);
    BOOL v68 = __OFSUB__(v89, v90);
    uint64_t v91 = v89 - v90;
    if (v68) {
      goto LABEL_125;
    }
    if (v91 < v79) {
      goto LABEL_87;
    }
LABEL_78:
    unint64_t v96 = v57 - 1;
    if (v57 - 1 >= v54)
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    if (!v11) {
      goto LABEL_141;
    }
    id v97 = v55;
    id v98 = &v55[16 * v96];
    uint64_t v99 = *(void *)v98;
    unint64_t v100 = v57;
    id v101 = &v97[16 * v57];
    uint64_t v102 = *((void *)v101 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v11 + 8 * *(void *)v98), (id *)(v11 + 8 * *(void *)v101), v11 + 8 * v102, v121, v127);
    if (v122) {
      break;
    }
    if (v102 < v99) {
      goto LABEL_114;
    }
    if (v100 > *((void *)v12 + 2)) {
      goto LABEL_115;
    }
    *(void *)id v98 = v99;
    uint64_t v55 = v12 + 32;
    *(void *)&v12[16 * v96 + 40] = v102;
    unint64_t v103 = *((void *)v12 + 2);
    if (v100 >= v103) {
      goto LABEL_116;
    }
    uint64_t v122 = 0;
    unint64_t v54 = v103 - 1;
    memmove(v101, v101 + 16, 16 * (v103 - 1 - v100));
    *((void *)v12 + 2) = v103 - 1;
    uint64_t v11 = v125;
    if (v103 <= 2) {
      goto LABEL_87;
    }
  }
LABEL_92:
  swift_bridgeObjectRelease();
  if (v118 < -1) {
    goto LABEL_135;
  }
LABEL_110:
  *(void *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()();
  id v5 = v127;

  swift_bridgeObjectRelease();
LABEL_111:
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    id v20 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a5) + 0x78);
    uint64_t v6 = *a4;
    uint64_t v7 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v8 = *(void **)(v6 + 8 * v5);
      uint64_t v9 = a1;
      uint64_t v19 = v7;
      do
      {
        uint64_t v10 = *(void **)v7;
        uint64_t v11 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v8) + 0x78);
        char v12 = v8;
        id v13 = v10;
        unsigned int v14 = *(unsigned __int8 *)(v11() + 16);
        uint64_t v15 = swift_release();
        LODWORD(v11) = *(unsigned __int8 *)(v20(v15) + 16);

        swift_release();
        if (v11 >= v14) {
          break;
        }
        if (!v6)
        {
          __break(1u);
          return;
        }
        id v16 = *(void **)v7;
        uint64_t v8 = *(void **)(v7 + 8);
        *(void *)uint64_t v7 = v8;
        *(void *)(v7 + 8) = v16;
        v7 -= 8;
        ++v9;
      }
      while (v5 != v9);
      ++v5;
      uint64_t v7 = v19 + 8;
      if (v5 != a2) {
        continue;
      }
      break;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, id *a2, unint64_t a3, void **a4, void *a5)
{
  uint64_t v5 = a4;
  uint64_t v7 = a1;
  uint64_t v8 = (char *)a2 - (char *)a1;
  uint64_t v9 = a2 - a1;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v26 = a2;
    id v13 = &v5[v11];
    if (v7 >= a2 || v10 <= 7) {
      goto LABEL_39;
    }
    uint64_t v47 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a5) + 0x78);
    id v29 = (void **)(a3 - 8);
    id v48 = v5;
    uint64_t v46 = v7;
    while (1)
    {
      unint64_t v53 = (unint64_t)v13;
      unsigned int v50 = v29 + 1;
      unsigned int v31 = v13 - 1;
      id v30 = *(v13 - 1);
      uint64_t v33 = v26 - 1;
      uint64_t v32 = *(v26 - 1);
      char v34 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v30) + 0x78);
      unint64_t v35 = (unint64_t)v26;
      Swift::Int v36 = v30;
      id v37 = v32;
      unsigned int v38 = *(unsigned __int8 *)(v34() + 16);
      uint64_t v39 = swift_release();
      LODWORD(v34) = *(unsigned __int8 *)(v47(v39) + 16);

      swift_release();
      if (v34 >= v38)
      {
        BOOL v42 = v50 != (void *)v53 || (unint64_t)v29 >= v53;
        uint64_t v33 = v31;
        id v13 = v31;
        uint64_t v26 = (void **)v35;
        uint64_t v41 = v46;
        if (!v42) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v40 = v50 != (void *)v35 || (unint64_t)v29 >= v35;
        uint64_t v26 = v33;
        uint64_t v41 = v46;
        id v13 = (void **)v53;
        if (!v40) {
          goto LABEL_35;
        }
      }
      *id v29 = *v33;
LABEL_35:
      --v29;
      uint64_t v5 = v48;
      if (v26 <= v41 || v13 <= v48) {
        goto LABEL_39;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  id v13 = &v5[v9];
  if ((unint64_t)a2 < a3 && v8 > 7)
  {
    uint64_t v15 = a2;
    uint64_t v49 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a5) + 0x78);
    unint64_t v52 = &v5[v9];
    unint64_t v45 = a3;
    do
    {
      id v16 = *v5;
      uint64_t v17 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)*v15) + 0x78);
      uint64_t v18 = v5;
      uint64_t v19 = v15;
      id v20 = *v15;
      id v21 = v16;
      LODWORD(v16) = *(unsigned __int8 *)(v17() + 16);
      uint64_t v22 = swift_release();
      LODWORD(v17) = *(unsigned __int8 *)(v49(v22) + 16);

      swift_release();
      if (v17 >= v16)
      {
        char v23 = v5++;
        BOOL v24 = v7 == v18;
        uint64_t v15 = v19;
      }
      else
      {
        char v23 = v19;
        uint64_t v15 = v19 + 1;
        BOOL v24 = v7 == v19;
      }
      id v13 = v52;
      if (!v24) {
        *uint64_t v7 = *v23;
      }
      ++v7;
    }
    while (v5 < v52 && (unint64_t)v15 < v45);
  }
  uint64_t v26 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, v13 - v5, v26);

  return 1;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  v16[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v9 = (void *)((char *)v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v6, v9);
    id v10 = v8;
    specialized closure #1 in _NativeDictionary.filter(_:)(v9, v6, v3, v10);
    if (v2) {
      swift_willThrow();
    }
    else {
      uint64_t v3 = v11;
    }
  }
  else
  {
    char v12 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v6, v12);
    id v13 = v8;
    specialized closure #1 in _NativeDictionary.filter(_:)(v12, v6, v3, v13);
    uint64_t v3 = v14;
    MEMORY[0x1C87760E0](v12, -1, -1);
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type MomentsIndicatorViewDisplayStyle and conformance MomentsIndicatorViewDisplayStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MomentsIndicatorViewDisplayStyle and conformance MomentsIndicatorViewDisplayStyle;
  if (!lazy protocol witness table cache variable for type MomentsIndicatorViewDisplayStyle and conformance MomentsIndicatorViewDisplayStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MomentsIndicatorViewDisplayStyle and conformance MomentsIndicatorViewDisplayStyle);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MomentsIndicatorViewDisplayStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C318A944);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MomentsIndicatorViewDisplayStyle()
{
  return &type metadata for MomentsIndicatorViewDisplayStyle;
}

unsigned char *storeEnumTagSinglePayload for MomentsIndicatorType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C318AA48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MomentsIndicatorType()
{
  return &type metadata for MomentsIndicatorType;
}

uint64_t method lookup function for MomentsIndicatorView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MomentsIndicatorView);
}

uint64_t dispatch thunk of MomentsIndicatorView.displayStyle.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))() & 1;
}

uint64_t dispatch thunk of MomentsIndicatorView.displayStyle.setter(char a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68))(a1 & 1);
}

uint64_t dispatch thunk of MomentsIndicatorView.displayStyle.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of MomentsIndicatorView.didTimeOut(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of MomentsIndicatorView.presentCaptureIndicator(type:remoteParticipantName:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v23 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    uint64_t v17 = *(void **)(*(void *)(a3 + 56) + 8 * v13);
    type metadata accessor for MomentsIndicatorBubble();
    id v18 = v17;
    char v19 = static NSObject.== infix(_:_:)();

    if ((v19 & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
LABEL_24:
        specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v23, a3);

        return;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MomentsIndicatorType, MomentsIndicatorBubble>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  id v29 = a1;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v30) {
        return v9;
      }
      unint64_t v16 = v29[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v30) {
          return v9;
        }
        unint64_t v16 = v29[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v30) {
            return v9;
          }
          unint64_t v16 = v29[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v30) {
              return v9;
            }
            unint64_t v16 = v29[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v30) {
                  return v9;
                }
                unint64_t v16 = v29[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v14);
    char v19 = *(void **)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) == 0) {
      break;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(unsigned char *)(*(void *)(v9 + 48) + v23) = v18;
    *(void *)(*(void *)(v9 + 56) + 8 * v23) = v19;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    uint64_t result = v19;
    if (!v5) {
      return v9;
    }
  }
  char v24 = 0;
  unint64_t v25 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v25 || (v24 & 1) == 0)
  {
    BOOL v26 = v22 == v25;
    if (v22 == v25) {
      unint64_t v22 = 0;
    }
    v24 |= v26;
    uint64_t v27 = *(void *)(v12 + 8 * v22);
    if (v27 != -1)
    {
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1C318B000()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in MomentsIndicatorView.refreshLayout()()
{
  animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout()(*(void **)(v0 + 40), *(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1C318B050()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout()()
{
  return closure #1 in animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout()(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1C318B098()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in animateBubble #1 (_:) in MomentsIndicatorView.refreshLayout()()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, 1.0);
}

uint64_t key path getter for InCallControlsActivityCell.delegate : InCallControlsActivityCell@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for InCallControlsActivityCell.delegate : InCallControlsActivityCell(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t InCallControlsActivityCell.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t InCallControlsActivityCell.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*InCallControlsActivityCell.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  void v3[4] = v7;
  return InCallControlsBaseCell.delegate.modify;
}

id InCallControlsActivityCell.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

char *InCallControlsActivityCell.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkView;
  id v5 = objc_allocWithZone(MEMORY[0x1E4F30A98]);
  uint64_t v6 = v0;
  *(void *)&v0[v4] = objc_msgSend(v5, sel_init);
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkViewHeightConstraint] = 0;
  *(void *)&v6[OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  uint64_t v7 = type metadata accessor for InCallControlsActivityCell();
  void v47[2] = v6;
  v47[3] = v7;
  double v8 = OUTLINED_FUNCTION_6_2();
  uint64_t v11 = (char *)objc_msgSendSuper2(v9, v10, v8);
  static UIBackgroundConfiguration.listGroupedCell()();
  uint64_t v12 = self;
  id v13 = objc_msgSend(v12, sel_whiteColor);
  UIBackgroundConfiguration.backgroundColor.setter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIVibrancyEffect);
  static UIVibrancyEffect.inCallControlsEffect.getter();
  UIBackgroundConfiguration.visualEffect.setter();
  uint64_t v14 = type metadata accessor for UIBackgroundConfiguration();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v14);
  MEMORY[0x1C8773CE0](v3);
  objc_msgSend(v11, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkView;
  id v16 = *(id *)&v11[OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkView];
  id v17 = objc_msgSend(v12, sel_clearColor);
  objc_msgSend(v16, sel__setOverrideBackgroundColor_, v17);

  objc_msgSend(*(id *)&v11[v15], sel__setApplyCornerRadius_, 0);
  id v18 = *(id *)&v11[v15];
  objc_msgSend(v11, sel__cornerRadius);
  objc_msgSend(v18, sel__setCornerRadius_);

  objc_msgSend(*(id *)&v11[v15], sel__setDisableLinkFollowing_, 1);
  objc_msgSend(*(id *)&v11[v15], sel__setDisableTapGesture_, 1);
  objc_msgSend(*(id *)&v11[v15], sel__setPreferredSizeClass_, 11);
  objc_msgSend(*(id *)&v11[v15], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v19) = 1148846080;
  objc_msgSend(*(id *)&v11[v15], sel_setContentHuggingPriority_forAxis_, 1, v19);
  id v20 = objc_msgSend(v11, sel_contentView);
  objc_msgSend(v20, sel_addSubview_, *(void *)&v11[v15]);

  id v21 = objc_msgSend(*(id *)&v11[v15], sel_heightAnchor);
  id v22 = objc_msgSend(v21, sel_constraintEqualToConstant_, 173.0);

  unint64_t v23 = *(void **)&v11[OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkViewHeightConstraint];
  *(void *)&v11[OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkViewHeightConstraint] = v22;
  id v24 = v22;

  unint64_t v25 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1C3769600;
  *(void *)(v26 + 32) = v24;
  uint64_t v27 = *(void **)&v11[v15];
  id v28 = v24;
  id v29 = objc_msgSend(v27, sel_leadingAnchor);
  id v30 = OUTLINED_FUNCTION_3_70();
  id v31 = objc_msgSend(v30, sel_leadingAnchor);

  id v32 = OUTLINED_FUNCTION_2_60();
  *(void *)(v26 + 40) = v32;
  id v33 = objc_msgSend(*(id *)&v11[v15], sel_topAnchor);
  id v34 = OUTLINED_FUNCTION_3_70();
  id v35 = objc_msgSend(v34, sel_topAnchor);

  id v36 = OUTLINED_FUNCTION_2_60();
  *(void *)(v26 + 48) = v36;
  id v37 = objc_msgSend(*(id *)&v11[v15], sel_trailingAnchor);
  id v38 = OUTLINED_FUNCTION_3_70();
  id v39 = objc_msgSend(v38, sel_trailingAnchor);

  id v40 = OUTLINED_FUNCTION_2_60();
  *(void *)(v26 + 56) = v40;
  id v41 = objc_msgSend(*(id *)&v11[v15], sel_bottomAnchor);
  id v42 = OUTLINED_FUNCTION_3_70();
  id v43 = objc_msgSend(v42, sel_bottomAnchor);

  id v44 = OUTLINED_FUNCTION_2_60();
  *(void *)(v26 + 64) = v44;
  v47[1] = v26;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_activateConstraints_, isa);

  return v11;
}

uint64_t type metadata accessor for InCallControlsActivityCell()
{
  return self;
}

id InCallControlsActivityCell.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void InCallControlsActivityCell.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkView;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A98]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkViewHeightConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id InCallControlsActivityCell.configure(with:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for InCallControlsActivityCellViewModel();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkView;
  id v9 = *(id *)(v1 + OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkView);
  if (InCallControlsActivityCellViewModel.cellStyle.getter()) {
    uint64_t v10 = 10;
  }
  else {
    uint64_t v10 = 11;
  }
  objc_msgSend(v9, sel__setPreferredSizeClass_, v10);

  id v11 = *(id *)(v1 + v8);
  id v12 = InCallControlsActivityCellViewModel.activityMetadata.getter();
  objc_msgSend(v11, sel_setMetadata_, v12);

  id v13 = *(id *)(v2 + v8);
  if (InCallControlsActivityCellViewModel.contacts.getter())
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
    v14.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.Class isa = 0;
  }
  objc_msgSend(v13, sel__setContactsForAttribution_, v14.super.isa);

  uint64_t v15 = a1[5];
  uint64_t v16 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 16))(aBlock, v15, v16);
  if (LOBYTE(aBlock[0]) == 2)
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A80]), sel_init);
    objc_msgSend(v17, sel_setPreserveIconAspectRatioAndAlignmentWhenScaling_, 1);
    objc_msgSend(*(id *)(v2 + v8), sel__setSizeClassParameters_, v17);
  }
  char v18 = InCallControlsActivityCellViewModel.shouldShowActionButton.getter();
  double v19 = *(void **)(v2 + v8);
  if (v18)
  {
    uint64_t v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    outlined init with copy of InCallControlsActivityCellViewModel((uint64_t)a1, (uint64_t)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v20;
    outlined init with take of InCallControlsActivityCellViewModel((uint64_t)v7, v22 + v21);
    aBlock[4] = partial apply for closure #1 in InCallControlsActivityCell.configure(with:);
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    id aBlock[3] = &block_descriptor_34;
    unint64_t v23 = _Block_copy(aBlock);
    id v24 = v19;
    swift_release();
    id v25 = objc_msgSend(self, sel_conversationKit);
    v39._object = (void *)0xE000000000000000;
    v26._uint64_t countAndFlagsBits = 1852141647;
    v26._object = (void *)0xE400000000000000;
    v27.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v27.value._object = (void *)0xEF74694B6E6F6974;
    v28._uint64_t countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v39._uint64_t countAndFlagsBits = 0;
    Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v39);

    id v30 = (void *)MEMORY[0x1C87730B0](v29._countAndFlagsBits, v29._object);
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel__setAction_withText_buttonType_, v23, v30, 1);

    _Block_release(v23);
  }
  else
  {
    id v31 = v19;
    id v24 = (id)MEMORY[0x1C87730B0](0, 0xE000000000000000);
    objc_msgSend(v31, sel__setAction_withText_, 0, v24);
  }
  objc_msgSend(*(id *)(v2 + v8), sel_sizeThatFits_, 0.0, 0.0);
  id v33 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit26InCallControlsActivityCell_linkViewHeightConstraint);
  if (v33)
  {
    double v34 = v32;
    id v35 = v33;
    double v36 = InCallControlsActivityCellViewModel.activityCellHeight.getter();
    if (v34 > v36) {
      double v36 = v34;
    }
    objc_msgSend(v35, sel_setConstant_, v36);
  }
  return objc_msgSend(*(id *)(v2 + v8), sel_setNeedsUpdateConstraints);
}

void closure #1 in InCallControlsActivityCell.configure(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x98))())
    {
      uint64_t v7 = v6;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v7 + 8))(v5, a2 + 16, ObjectType, v7);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

id InCallControlsActivityCell.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallControlsActivityCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C318BFD4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t outlined init with copy of InCallControlsActivityCellViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InCallControlsActivityCellViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C318C070()
{
  uint64_t v1 = type metadata accessor for InCallControlsActivityCellViewModel();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + v2 + 16);
  uint64_t v3 = v0 + v2 + *(int *)(v1 + 24);
  uint64_t v4 = (int *)type metadata accessor for Participant(0);
  if (!__swift_getEnumTagSinglePayload(v3, 1, (uint64_t)v4))
  {
    type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        type metadata accessor for Date();
        OUTLINED_FUNCTION_12_0();
        (*(void (**)(uint64_t))(v5 + 8))(v3);
        break;
      case 4u:
        type metadata accessor for Date();
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_26_2();
        v23();
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v25 = v3 + *(int *)(v24 + 48);
        swift_bridgeObjectRelease();
        if (*(void *)(v25 + 120) >= 2uLL) {
          __swift_destroy_boxed_opaque_existential_1(v25 + 96);
        }
        if (*(void *)(v25 + 312))
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(v3 + *(int *)(v24 + 64) + 8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        break;
      default:
        break;
    }
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    v6();
    uint64_t v7 = (id *)(v3 + v4[7]);
    if (*v7)
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v8 = v3 + v4[14];
    uint64_t v9 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v8, 1, v9))
    {
      OUTLINED_FUNCTION_48();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
    uint64_t v11 = v8 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
    if (!__swift_getEnumTagSinglePayload(v11, 1, v9))
    {
      OUTLINED_FUNCTION_48();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v9);
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v0 + v2 + *(int *)(v1 + 32);
  if (!__swift_getEnumTagSinglePayload(v13, 1, (uint64_t)v4))
  {
    type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        type metadata accessor for Date();
        OUTLINED_FUNCTION_12_0();
        (*(void (**)(uint64_t))(v14 + 8))(v13);
        break;
      case 4u:
        type metadata accessor for Date();
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_26_2();
        v26();
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v28 = v13 + *(int *)(v27 + 48);
        swift_bridgeObjectRelease();
        if (*(void *)(v28 + 120) >= 2uLL) {
          __swift_destroy_boxed_opaque_existential_1(v28 + 96);
        }
        if (*(void *)(v28 + 312))
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(v13 + *(int *)(v27 + 64) + 8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        break;
      default:
        break;
    }
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    v15();
    uint64_t v16 = (id *)(v13 + v4[7]);
    if (*v16)
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v17 = v13 + v4[14];
    uint64_t v18 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v17, 1, v18))
    {
      OUTLINED_FUNCTION_48();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    }
    uint64_t v20 = v17 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
    if (!__swift_getEnumTagSinglePayload(v20, 1, v18))
    {
      OUTLINED_FUNCTION_48();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v18);
    }
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t outlined init with take of InCallControlsActivityCellViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InCallControlsActivityCellViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in InCallControlsActivityCell.configure(with:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for InCallControlsActivityCellViewModel() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  closure #1 in InCallControlsActivityCell.configure(with:)(v2, v3);
}

uint64_t dispatch thunk of InCallControlsActivityCellDelegate.inCallControlsActivityCell(_:didTap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for InCallControlsActivityCell(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InCallControlsActivityCell);
}

uint64_t dispatch thunk of InCallControlsActivityCell.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of InCallControlsActivityCell.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of InCallControlsActivityCell.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of InCallControlsActivityCell.configure(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVy15ConversationKit14LayoutPosition33_CB5716349B733E4BD07C5ACF0D02830DLLOSo6CGSizeV_G_12CoreGraphics7CGFloatVs5NeverOTg504_s15e25Kit26ScreenSharingToolbarg42V12sizeThatFits8proposal8subviews5cacheSo6p57V7SwiftUI16ProposedViewSizeV_AJ0F8SubviewsVAC5CacheVztF12q9Graphics7S8VAIXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.Values.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        int v6 = v4;
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 16 * v5);
          unint64_t v9 = *(void *)(v13 + 16);
          if (v9 >= *(void *)(v13 + 24) >> 1)
          {
            uint64_t v12 = v7;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v7 = v12;
          }
          *(void *)(v13 + 16) = v9 + 1;
          *(void *)(v13 + 8 * v9 + 32) = v8;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          if ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v10 = v7;
          uint64_t v11 = _HashTable.occupiedBucket(after:)();
          if (!--v1) {
            return;
          }
          unint64_t v5 = v11;
          if ((v11 & 0x8000000000000000) == 0)
          {
            uint64_t v7 = v10;
            int v6 = *(_DWORD *)(a1 + 36);
            if (v11 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVy15ConversationKit14LayoutPosition33_CB5716349B733E4BD07C5ACF0D02830DLLOSo6CGSizeV_G_12CoreGraphics7CGFloatVs5NeverOTg504_s15e25Kit26ScreenSharingToolbarg42V12sizeThatFits8proposal8subviews5cacheSo6p57V7SwiftUI16ProposedViewSizeV_AJ0F8SubviewsVAC5CacheVztF12q9Graphics7S9VAIXEfU0_Tf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.Values.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        int v6 = v4;
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 16 * v5 + 8);
          unint64_t v9 = *(void *)(v13 + 16);
          if (v9 >= *(void *)(v13 + 24) >> 1)
          {
            uint64_t v12 = v7;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v7 = v12;
          }
          *(void *)(v13 + 16) = v9 + 1;
          *(void *)(v13 + 8 * v9 + 32) = v8;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          if ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v10 = v7;
          uint64_t v11 = _HashTable.occupiedBucket(after:)();
          if (!--v1) {
            return;
          }
          unint64_t v5 = v11;
          if ((v11 & 0x8000000000000000) == 0)
          {
            uint64_t v7 = v10;
            int v6 = *(_DWORD *)(a1 + 36);
            if (v11 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

uint64_t ScreenSharingToolbarLayout.Cache.updateIdealSize(for:in:)(unsigned int a1, uint64_t a2)
{
  unsigned int v53 = a1;
  uint64_t v3 = type metadata accessor for LayoutSubview();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  id v43 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v49 = (char *)&v43 - v6;
  uint64_t v7 = type metadata accessor for LayoutSubviews();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v44 = (uint64_t)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v43 - v19;
  MEMORY[0x1F4188790](v18);
  unint64_t v45 = (char *)&v43 - v21;
  unsigned int v50 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v51 = v8 + 16;
  v50(v10, a2, v7);
  lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews(&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  unint64_t v52 = v10;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v22 = &v14[*(int *)(v12 + 44)];
  lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews((unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  uint64_t v23 = *(void *)v22;
  dispatch thunk of Collection.endIndex.getter();
  if (v23 == v55[0])
  {
LABEL_6:
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 1, 1, v3);
  }
  else
  {
    uint64_t v24 = (void (**)(char *))(v46 + 16);
    uint64_t v25 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v47 = (void (**)(char *, uint64_t))(v46 + 8);
    id v48 = (void (**)(char *, char *, uint64_t))(v46 + 32);
    while (1)
    {
      Swift::String v26 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      (*v24)(v20);
      v26(v55, 0);
      uint64_t v27 = v52;
      v50(v52, (uint64_t)v14, v7);
      dispatch thunk of Collection.formIndex(after:)();
      (*v25)(v27, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v3);
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v3) == 1) {
        break;
      }
      uint64_t v28 = v49;
      Swift::String v29 = *v48;
      (*v48)(v49, v20, v3);
      lazy protocol witness table accessor for type LayoutPositionKey and conformance LayoutPositionKey();
      LayoutSubview.subscript.getter();
      if (LOBYTE(v55[0]) == v53)
      {
        outlined destroy of Conversation?((uint64_t)v14, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
        uint64_t v32 = (uint64_t)v45;
        v29(v45, v28, v3);
        uint64_t v31 = 0;
        goto LABEL_8;
      }
      (*v47)(v28, v3);
      uint64_t v30 = *(void *)v22;
      dispatch thunk of Collection.endIndex.getter();
      if (v30 == v55[0]) {
        goto LABEL_6;
      }
    }
  }
  outlined destroy of Conversation?((uint64_t)v14, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v31 = 1;
  uint64_t v32 = (uint64_t)v45;
LABEL_8:
  __swift_storeEnumTagSinglePayload(v32, v31, 1, v3);
  uint64_t v33 = v44;
  outlined init with copy of LayoutSubview?(v32, v44);
  if (__swift_getEnumTagSinglePayload(v33, 1, v3) == 1)
  {
    outlined destroy of Conversation?(v32, &demangling cache variable for type metadata for LayoutSubview?);
    return specialized Dictionary._Variant.removeValue(forKey:)(v53);
  }
  else
  {
    uint64_t v35 = v46;
    double v36 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v43, v33, v3);
    static ProposedViewSize.unspecified.getter();
    LOBYTE(v55[0]) = v37 & 1;
    char v54 = v38 & 1;
    LayoutSubview.sizeThatFits(_:)();
    double v40 = v39;
    double v42 = v41;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v3);
    outlined destroy of Conversation?(v32, &demangling cache variable for type metadata for LayoutSubview?);
    return specialized Dictionary._Variant.setValue(_:forKey:)(v53, v40, v42);
  }
}

ConversationKit::ScreenSharingToolbarLayout::Cache __swiftcall ScreenSharingToolbarLayout.Cache.init()()
{
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type LayoutPosition and conformance LayoutPosition();
  return (ConversationKit::ScreenSharingToolbarLayout::Cache)Dictionary.init(dictionaryLiteral:)();
}

uint64_t ScreenSharingToolbarLayout.makeCache(subviews:)(uint64_t a1)
{
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type LayoutPosition and conformance LayoutPosition();
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  ScreenSharingToolbarLayout.Cache.updateIdealSize(for:in:)(0, a1);
  ScreenSharingToolbarLayout.Cache.updateIdealSize(for:in:)(1u, a1);
  ScreenSharingToolbarLayout.Cache.updateIdealSize(for:in:)(2u, a1);
  return v3;
}

uint64_t ScreenSharingToolbarLayout.updateCache(_:subviews:)(uint64_t a1, uint64_t a2)
{
  return ScreenSharingToolbarLayout.Cache.updateIdealSize(for:in:)(2u, a2);
}

double ScreenSharingToolbarLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = *a6;
  uint64_t v9 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVy15ConversationKit14LayoutPosition33_CB5716349B733E4BD07C5ACF0D02830DLLOSo6CGSizeV_G_12CoreGraphics7CGFloatVs5NeverOTg504_s15e25Kit26ScreenSharingToolbarg42V12sizeThatFits8proposal8subviews5cacheSo6p57V7SwiftUI16ProposedViewSizeV_AJ0F8SubviewsVAC5CacheVztF12q9Graphics7S8VAIXEfU_Tf1cn_n(v9);
  uint64_t v11 = specialized Sequence<>.max()(v10);
  char v13 = v12;
  swift_bridgeObjectRelease();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVy15ConversationKit14LayoutPosition33_CB5716349B733E4BD07C5ACF0D02830DLLOSo6CGSizeV_G_12CoreGraphics7CGFloatVs5NeverOTg504_s15e25Kit26ScreenSharingToolbarg42V12sizeThatFits8proposal8subviews5cacheSo6p57V7SwiftUI16ProposedViewSizeV_AJ0F8SubviewsVAC5CacheVztF12q9Graphics7S9VAIXEfU0_Tf1cn_n(v8);
  specialized Sequence<>.max()(v14);
  swift_bridgeObjectRelease();
  int v15 = Axis.rawValue.getter();
  unsigned __int8 v16 = Axis.rawValue.getter();
  double v17 = *(double *)&a1;
  if (a2) {
    double v17 = 10.0;
  }
  double v18 = *(double *)&v11;
  if (v13) {
    double v18 = 0.0;
  }
  if (v15 == v16) {
    double v19 = v17;
  }
  else {
    double v19 = v18;
  }
  Axis.rawValue.getter();
  Axis.rawValue.getter();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t ScreenSharingToolbarLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, double a3, CGFloat a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, int a12)
{
  int v144 = a12;
  uint64_t v142 = a11;
  uint64_t v18 = type metadata accessor for LayoutSubview();
  OUTLINED_FUNCTION_4();
  uint64_t v147 = v19;
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_10_5();
  uint64_t v158 = v21;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_8_4();
  uint64_t v157 = v23;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v24);
  unint64_t v156 = (void (**)(void))((char *)&v142 - v25);
  uint64_t v26 = type metadata accessor for LayoutSubviews();
  OUTLINED_FUNCTION_4();
  uint64_t v28 = v27;
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v142 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_10_5();
  double v162 = *(double *)&v33;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_8_4();
  v161 = v35;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v36);
  char v38 = (char *)&v142 - v37;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  MEMORY[0x1F4188790](v39 - 8);
  OUTLINED_FUNCTION_10_5();
  double v160 = *(double *)&v40;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v41);
  OUTLINED_FUNCTION_8_4();
  uint64_t v143 = v42;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_8_4();
  uint64_t v159 = v44;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_8_4();
  uint64_t v152 = v46;
  OUTLINED_FUNCTION_8_1();
  uint64_t v48 = MEMORY[0x1F4188790](v47);
  unsigned int v50 = (char *)&v142 - v49;
  MEMORY[0x1F4188790](v48);
  uint64_t v151 = (uint64_t)&v142 - v51;
  uint64_t v146 = v28;
  unint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v150 = a10;
  double v163 = *(double *)&v52;
  *(void *)&double v164 = v28 + 16;
  v52(v31, a10, v26);
  uint64_t v148 = lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews(&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v149 = v32;
  lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews((unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_17_26();
  if (v53)
  {
LABEL_7:
    OUTLINED_FUNCTION_12_32((uint64_t)v50);
  }
  else
  {
    uint64_t v155 = (void (**)(char *))(v147 + 16);
    char v54 = (void (**)(char *, uint64_t))(v146 + 8);
    uint64_t v154 = (void (**)(void))(v147 + 32);
    uint64_t v153 = v147 + 8;
    while (1)
    {
      uint64_t v55 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      (*v155)(v50);
      uint64_t v56 = OUTLINED_FUNCTION_2_61();
      v55(v56);
      OUTLINED_FUNCTION_0_55();
      v57();
      OUTLINED_FUNCTION_10_37();
      (*v54)(v31, v26);
      __swift_storeEnumTagSinglePayload((uint64_t)v50, 0, 1, v18);
      if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, v18) == 1) {
        break;
      }
      uint64_t v58 = *v154;
      OUTLINED_FUNCTION_63_0();
      v58();
      lazy protocol witness table accessor for type LayoutPositionKey and conformance LayoutPositionKey();
      LayoutSubview.subscript.getter();
      if (v165 == 1)
      {
        outlined destroy of Conversation?((uint64_t)v38, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
        OUTLINED_FUNCTION_63_0();
        v58();
        uint64_t v61 = 0;
        goto LABEL_9;
      }
      uint64_t v59 = OUTLINED_FUNCTION_3_71();
      v60(v59);
      OUTLINED_FUNCTION_8_36();
      OUTLINED_FUNCTION_17_26();
      if (v53) {
        goto LABEL_7;
      }
    }
  }
  outlined destroy of Conversation?((uint64_t)v38, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v61 = 1;
LABEL_9:
  unint64_t v62 = v161;
  __swift_storeEnumTagSinglePayload(v151, v61, 1, v18);
  OUTLINED_FUNCTION_0_55();
  v63();
  OUTLINED_FUNCTION_16_24();
  uint64_t v64 = (void *)((char *)v62 + *(int *)(v149 + 36));
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_17_26();
  if (v53)
  {
LABEL_15:
    OUTLINED_FUNCTION_12_32(v159);
  }
  else
  {
    OUTLINED_FUNCTION_6_54();
    unint64_t v156 = v65;
    uint64_t v155 = (void (**)(char *))(v66 + 8);
    while (1)
    {
      uint64_t v67 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      uint64_t v68 = OUTLINED_FUNCTION_11_28();
      v69(v68);
      uint64_t v70 = OUTLINED_FUNCTION_2_61();
      v67(v70);
      OUTLINED_FUNCTION_0_55();
      v71();
      OUTLINED_FUNCTION_10_37();
      uint64_t v72 = OUTLINED_FUNCTION_15_31();
      v73(v72);
      OUTLINED_FUNCTION_5_61();
      if (v53) {
        break;
      }
      uint64_t v74 = *v156;
      OUTLINED_FUNCTION_63_0();
      v74();
      lazy protocol witness table accessor for type LayoutPositionKey and conformance LayoutPositionKey();
      LayoutSubview.subscript.getter();
      if (v165 == 2)
      {
        outlined destroy of Conversation?((uint64_t)v161, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
        OUTLINED_FUNCTION_63_0();
        v74();
        uint64_t v79 = 0;
        goto LABEL_17;
      }
      uint64_t v75 = OUTLINED_FUNCTION_3_71();
      v76(v75);
      uint64_t v77 = *v64;
      BOOL v78 = v161;
      OUTLINED_FUNCTION_8_36();
      BOOL v53 = v77 == v165;
      unint64_t v62 = v78;
      if (v53) {
        goto LABEL_15;
      }
    }
  }
  outlined destroy of Conversation?((uint64_t)v62, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v79 = 1;
LABEL_17:
  uint64_t v80 = *(void *)&v162;
  __swift_storeEnumTagSinglePayload(v152, v79, 1, v18);
  OUTLINED_FUNCTION_0_55();
  v81();
  OUTLINED_FUNCTION_16_24();
  uint64_t v82 = (uint64_t *)(v80 + *(int *)(v149 + 36));
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_17_26();
  if (v53)
  {
LABEL_22:
    OUTLINED_FUNCTION_12_32(*(uint64_t *)&v160);
  }
  else
  {
    OUTLINED_FUNCTION_6_54();
    v161 = v83;
    uint64_t v159 = v84 + 8;
    while (1)
    {
      BOOL v85 = (void (*)(uint64_t))dispatch thunk of Collection.subscript.read();
      uint64_t v86 = OUTLINED_FUNCTION_11_28();
      v87(v86);
      uint64_t v88 = OUTLINED_FUNCTION_2_61();
      v85(v88);
      OUTLINED_FUNCTION_0_55();
      v89();
      OUTLINED_FUNCTION_10_37();
      uint64_t v90 = OUTLINED_FUNCTION_15_31();
      v91(v90);
      OUTLINED_FUNCTION_5_61();
      if (v53) {
        break;
      }
      id v92 = (void (*)(void))*v161;
      OUTLINED_FUNCTION_63_0();
      v92();
      lazy protocol witness table accessor for type LayoutPositionKey and conformance LayoutPositionKey();
      LayoutSubview.subscript.getter();
      if (!(_BYTE)v165)
      {
        outlined destroy of Conversation?(*(uint64_t *)&v162, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
        uint64_t v98 = v143;
        OUTLINED_FUNCTION_63_0();
        v92();
        uint64_t v96 = 0;
        unsigned __int8 v97 = v144;
        goto LABEL_24;
      }
      uint64_t v93 = OUTLINED_FUNCTION_3_71();
      v94(v93);
      uint64_t v95 = *v82;
      OUTLINED_FUNCTION_8_36();
      if (v95 == v165) {
        goto LABEL_22;
      }
    }
  }
  outlined destroy of Conversation?(*(uint64_t *)&v162, &demangling cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  uint64_t v96 = 1;
  unsigned __int8 v97 = v144;
  uint64_t v98 = v143;
LABEL_24:
  uint64_t v99 = v142;
  __swift_storeEnumTagSinglePayload(v98, v96, 1, v18);
  uint64_t v100 = *v99;
  uint64_t v101 = *(void *)(*v99 + 16);
  CGFloat v145 = a4;
  if (!v101)
  {
    OUTLINED_FUNCTION_13_33();
    double v160 = 0.0;
    v161 = 0;
    double v116 = 0.0;
    double v162 = 0.0;
LABEL_35:
    double v115 = 0.0;
    double v117 = 0.0;
    goto LABEL_37;
  }
  uint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  CGFloat v12 = 0.0;
  unint64_t v103 = 0;
  if (v104)
  {
    unint64_t v105 = (double *)(*(void *)(v100 + 56) + 16 * v102);
    CGFloat v12 = *v105;
    unint64_t v103 = (void *)*((void *)v105 + 1);
  }
  v161 = v103;
  double v162 = v12;
  if (!*(void *)(v100 + 16))
  {
    OUTLINED_FUNCTION_13_33();
    double v116 = 0.0;
    double v115 = 0.0;
    double v117 = 0.0;
    double v160 = 0.0;
    goto LABEL_37;
  }
  uint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  double v107 = 0.0;
  uint64_t v108 = 0;
  if (v109)
  {
    uint64_t v110 = (double *)(*(void *)(v100 + 56) + 16 * v106);
    double v107 = *v110;
    uint64_t v108 = *((void *)v110 + 1);
  }
  double v160 = *(double *)&v108;
  OUTLINED_FUNCTION_13_33();
  if (!v111 || (uint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v113 & 1) == 0))
  {
    double v116 = v107;
    goto LABEL_35;
  }
  uint64_t v114 = (double *)(*(void *)(v100 + 56) + 16 * v112);
  double v115 = *v114;
  double v116 = v107;
  double v117 = v114[1];
LABEL_37:
  double v163 = v115;
  Axis.rawValue.getter();
  Axis.rawValue.getter();
  Axis.rawValue.getter();
  Axis.rawValue.getter();
  double v139 = v117;
  double v137 = v115;
  double v118 = v117;
  double v164 = v117;
  double v119 = v160;
  ScreenSharingToolbarLayout.placeSubview(_:at:in:idealSize:leadingActionsSize:trailingActionsSize:)(v98, 0, v97, v12, a1, a2, v145, v162, *(double *)&v161, v116, v160, v137, v139, a5);
  double v140 = v118;
  double v120 = v163;
  double v138 = v163;
  uint64_t v121 = v151;
  double v122 = OUTLINED_FUNCTION_18_30();
  ScreenSharingToolbarLayout.placeSubview(_:at:in:idealSize:leadingActionsSize:trailingActionsSize:)(v123, v124, v97, v122, v125, v126, v127, v116, v119, v116, v119, v138, v140, a5);
  double v141 = v164;
  uint64_t v128 = v152;
  double v129 = OUTLINED_FUNCTION_18_30();
  ScreenSharingToolbarLayout.placeSubview(_:at:in:idealSize:leadingActionsSize:trailingActionsSize:)(v130, v131, v97, v129, v132, v133, v134, v120, v135, v116, v119, v120, v141, a5);
  outlined destroy of Conversation?(v98, &demangling cache variable for type metadata for LayoutSubview?);
  outlined destroy of Conversation?(v128, &demangling cache variable for type metadata for LayoutSubview?);
  return outlined destroy of Conversation?(v121, &demangling cache variable for type metadata for LayoutSubview?);
}

uint64_t lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LayoutSubviews();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ScreenSharingToolbarLayout.placeSubview(_:at:in:idealSize:leadingActionsSize:trailingActionsSize:)(uint64_t a1, char a2, unsigned __int8 a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  double v58 = a8;
  double v59 = a9;
  CGFloat v61 = a4;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v29 = (char *)v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a10 <= a12) {
    a10 = a12;
  }
  if (a11 > a13) {
    double v30 = a11;
  }
  else {
    double v30 = a13;
  }
  double v60 = v30;
  if (a2)
  {
    if (a2 == 1)
    {
      if (a3 < 2u)
      {
        CGFloat v31 = v61;
        v64.origin.CGFloat x = v61;
        v64.origin.CGFloat y = a5;
        v64.size.CGFloat width = a6;
        v64.size.CGFloat height = a7;
        CGRectGetMinX(v64);
        v65.origin.CGFloat x = v31;
        v65.origin.CGFloat y = a5;
        v65.size.CGFloat width = a6;
        v65.size.CGFloat height = a7;
        CGRectGetMinY(v65);
        static UnitPoint.topLeading.getter();
LABEL_32:
        Axis.rawValue.getter();
        Axis.rawValue.getter();
        Axis.rawValue.getter();
        Axis.rawValue.getter();
        goto LABEL_33;
      }
      CGFloat v49 = v61;
      CGFloat v50 = v61;
      CGFloat v51 = a5;
      CGFloat v52 = a6;
      CGFloat v53 = a7;
      if (a3 == 2) {
        goto LABEL_31;
      }
    }
    else
    {
      if (a3 - 2 < 2)
      {
        CGFloat v46 = v61;
        v68.origin.CGFloat x = v61;
        v68.origin.CGFloat y = a5;
        v68.size.CGFloat width = a6;
        v68.size.CGFloat height = a7;
        CGRectGetMaxX(v68);
        v69.origin.CGFloat x = v46;
        v69.origin.CGFloat y = a5;
        v69.size.CGFloat width = a6;
        v69.size.CGFloat height = a7;
        CGRectGetMaxY(v69);
        static UnitPoint.bottomTrailing.getter();
        goto LABEL_32;
      }
      CGFloat v49 = v61;
      CGFloat v50 = v61;
      CGFloat v51 = a5;
      CGFloat v52 = a6;
      CGFloat v53 = a7;
      if (a3)
      {
LABEL_31:
        CGRectGetMinX(*(CGRect *)&v50);
        v73.origin.CGFloat x = v49;
        v73.origin.CGFloat y = a5;
        v73.size.CGFloat width = a6;
        v73.size.CGFloat height = a7;
        CGRectGetMaxY(v73);
        static UnitPoint.bottomLeading.getter();
        goto LABEL_32;
      }
    }
    CGRectGetMaxX(*(CGRect *)&v50);
    v72.origin.CGFloat x = v49;
    v72.origin.CGFloat y = a5;
    v72.size.CGFloat width = a6;
    v72.size.CGFloat height = a7;
    CGRectGetMinY(v72);
    static UnitPoint.topTrailing.getter();
    goto LABEL_32;
  }
  CGFloat v32 = v61;
  v66.origin.CGFloat x = v61;
  v66.origin.CGFloat y = a5;
  v66.size.CGFloat width = a6;
  v66.size.CGFloat height = a7;
  v57[5] = CGRectGetMidX(v66);
  v67.origin.CGFloat x = v32;
  v67.origin.CGFloat y = a5;
  v67.size.CGFloat width = a6;
  v67.size.CGFloat height = a7;
  v57[4] = CGRectGetMidY(v67);
  static UnitPoint.center.getter();
  v57[2] = v34;
  v57[3] = v33;
  int v35 = Axis.rawValue.getter();
  unsigned __int8 v36 = Axis.rawValue.getter();
  double v37 = a10 + a14 + a10 + a14;
  *(CGFloat *)unint64_t v57 = a5;
  *(double *)&v57[1] = a10;
  if (v35 != v36) {
    double v37 = 0.0;
  }
  double v38 = a6 - v37;
  Axis.rawValue.getter();
  Axis.rawValue.getter();
  int v39 = Axis.rawValue.getter();
  int v40 = Axis.rawValue.getter();
  double v41 = v58;
  if (v38 < v58 && v39 == v40) {
    double v43 = v38;
  }
  else {
    double v43 = v58;
  }
  double v60 = v43;
  Axis.rawValue.getter();
  Axis.rawValue.getter();
  int v44 = Axis.rawValue.getter();
  if (v44 == Axis.rawValue.getter() && v38 < v41)
  {
    CGFloat v47 = *(double *)v57;
    if (a11 == 0.0)
    {
      CGFloat v48 = v61;
      v70.origin.CGFloat x = v61;
      *(void *)&v70.origin.CGFloat y = v57[0];
      v70.size.CGFloat width = a6;
      v70.size.CGFloat height = a7;
      CGRectGetMinX(v70);
      v71.origin.CGFloat x = v48;
      v71.origin.CGFloat y = v47;
      v71.size.CGFloat width = a6;
      v71.size.CGFloat height = a7;
      CGRectGetMidY(v71);
      static UnitPoint.leading.getter();
    }
    else
    {
      CGFloat v56 = v61;
      if (a13 == 0.0)
      {
        v74.origin.CGFloat x = v61;
        *(void *)&v74.origin.CGFloat y = v57[0];
        v74.size.CGFloat width = a6;
        v74.size.CGFloat height = a7;
        CGRectGetMaxX(v74);
        v75.origin.CGFloat x = v56;
        v75.origin.CGFloat y = v47;
        v75.size.CGFloat width = a6;
        v75.size.CGFloat height = a7;
        CGRectGetMidY(v75);
        static UnitPoint.trailing.getter();
      }
    }
  }
LABEL_33:
  outlined init with copy of LayoutSubview?(a1, (uint64_t)v29);
  uint64_t v54 = type metadata accessor for LayoutSubview();
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v54) == 1) {
    return outlined destroy of Conversation?((uint64_t)v29, &demangling cache variable for type metadata for LayoutSubview?);
  }
  char v63 = 0;
  char v62 = 0;
  LayoutSubview.place(at:anchor:proposal:)();
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v54 - 8) + 8))(v29, v54);
}

double ScreenSharingToolbarLayout.init(toolbarPlacement:)()
{
  return 15.0;
}

uint64_t protocol witness for static Layout.layoutProperties.getter in conformance ScreenSharingToolbarLayout()
{
  return MEMORY[0x1F40FC808]();
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance ScreenSharingToolbarLayout@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ScreenSharingToolbarLayout.makeCache(subviews:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance ScreenSharingToolbarLayout()
{
  return MEMORY[0x1F40FC820]();
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ScreenSharingToolbarLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  return ScreenSharingToolbarLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a6);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ScreenSharingToolbarLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, CGFloat a7, CGFloat a8, double a9, CGFloat a10)
{
  return ScreenSharingToolbarLayout.placeSubviews(in:proposal:subviews:cache:)(a7, a8, a9, a10, *(double *)v10, a1, a2, a3, a4, a5, a6, *(unsigned __int8 *)(v10 + 8));
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ScreenSharingToolbarLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ScreenSharingToolbarLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E4F3ED60]);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ScreenSharingToolbarLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E4F3ED68]);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ScreenSharingToolbarLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t protocol witness for static Layout._makeLayoutView(root:inputs:body:) in conformance ScreenSharingToolbarLayout()
{
  return MEMORY[0x1F40FC7E8]();
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance ScreenSharingToolbarLayout()
{
  return TPNumberPadCharacter.rawValue.getter(*(unsigned __int8 *)(v0 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LayoutPosition()
{
  return ConversationControlsContext.hashValue.getter(*v0);
}

void protocol witness for static LayoutValueKey.defaultValue.getter in conformance LayoutPositionKey(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ScreenSharingToolbarLayout.callAsFunction<A, B, C>(_:leadingActions:trailingActions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, long long a13, uint64_t a14)
{
  double v28 = a10;
  char v29 = a7;
  v19[2] = a8;
  v19[3] = a11;
  _OWORD v19[4] = a12;
  long long v20 = a13;
  uint64_t v21 = a14;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutPositionKey>>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  uint64_t v15 = type metadata accessor for TupleView();
  unint64_t v16 = lazy protocol witness table accessor for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Layout.callAsFunction<A>(_:)((uint64_t)partial apply for closure #1 in ScreenSharingToolbarLayout.callAsFunction<A, B, C>(_:leadingActions:trailingActions:), (uint64_t)v19, (uint64_t)&type metadata for ScreenSharingToolbarLayout, v15, v16, WitnessTable, a9);
}

uint64_t closure #1 in ScreenSharingToolbarLayout.callAsFunction<A, B, C>(_:leadingActions:trailingActions:)@<X0>(void (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t (*a3)(char *, uint64_t)@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v77 = a5;
  BOOL v78 = a4;
  CGRect v68 = a3;
  CGRect v69 = a2;
  CGRect v65 = a1;
  uint64_t v80 = a8;
  uint64_t v73 = a9;
  uint64_t v79 = *(void *)(a9 - 8);
  uint64_t v75 = a12;
  uint64_t v67 = a11;
  MEMORY[0x1F4188790](a1);
  CGRect v72 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutPositionKey>>);
  uint64_t v74 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v74 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v74);
  CGRect v70 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  CGRect v71 = (char *)&v59 - v18;
  uint64_t v63 = a7;
  uint64_t v66 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v17);
  long long v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for ModifiedContent();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v84);
  uint64_t v82 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v83 = (char *)&v59 - v24;
  uint64_t v25 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v28 - 8);
  uint64_t v29 = v61;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  CGFloat v32 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  BOOL v85 = (char *)&v59 - v34;
  v65(v33);
  LOBYTE(v91[0]) = 0;
  unint64_t v59 = lazy protocol witness table accessor for type LayoutPositionKey and conformance LayoutPositionKey();
  View.layoutValue<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, a6);
  uint64_t v35 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<LayoutPositionKey>> and conformance _TraitWritingModifier<A>, &demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutPositionKey>>);
  v91[7] = a10;
  v91[8] = v35;
  uint64_t v60 = v28;
  uint64_t WitnessTable = swift_getWitnessTable();
  id v81 = v32;
  static ViewBuilder.buildExpression<A>(_:)(v32, v28, WitnessTable);
  unsigned __int8 v36 = *(void (**)(uint64_t))(v29 + 8);
  uint64_t v64 = v29 + 8;
  CGRect v65 = v36;
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v36)(v32, v28);
  v69(v37);
  LOBYTE(v91[0]) = 1;
  double v38 = v82;
  uint64_t v39 = v63;
  uint64_t v40 = v67;
  View.layoutValue<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v39);
  v91[5] = v40;
  v91[6] = v35;
  uint64_t v41 = v84;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v42 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v38, v41, v67);
  CGRect v68 = *(uint64_t (**)(char *, uint64_t))(v86 + 8);
  CGRect v69 = (void (*)(uint64_t))(v86 + 8);
  uint64_t v43 = v68(v38, v41);
  int v44 = v72;
  v78(v43);
  LOBYTE(v91[0]) = 2;
  uint64_t v45 = v70;
  uint64_t v46 = v73;
  uint64_t v47 = v75;
  View.layoutValue<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v44, v46);
  v91[3] = v47;
  v91[4] = v35;
  uint64_t v48 = v74;
  uint64_t v79 = swift_getWitnessTable();
  CGFloat v49 = v71;
  static ViewBuilder.buildExpression<A>(_:)(v45, v48, v79);
  uint64_t v50 = v76;
  CGFloat v51 = *(void (**)(char *, uint64_t))(v76 + 8);
  v51(v45, v48);
  CGFloat v52 = v81;
  uint64_t v53 = v60;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v81, v85, v60);
  v91[0] = v52;
  uint64_t v54 = v83;
  uint64_t v55 = v84;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v42, v83, v84);
  v91[1] = v42;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v45, v49, v48);
  v91[2] = v45;
  v90[0] = v53;
  v90[1] = v55;
  v90[2] = v48;
  uint64_t v87 = WitnessTable;
  uint64_t v88 = v67;
  uint64_t v89 = v79;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v91, 3, (uint64_t)v90);
  v51(v49, v48);
  CGFloat v56 = (void (*)(char *, uint64_t))v68;
  v68(v54, v55);
  unint64_t v57 = (uint64_t (*)(char *, uint64_t))v65;
  ((void (*)(char *, uint64_t))v65)(v85, v53);
  v51(v45, v48);
  v56(v82, v55);
  return v57(v81, v53);
}

unint64_t lazy protocol witness table accessor for type LayoutPositionKey and conformance LayoutPositionKey()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutPositionKey and conformance LayoutPositionKey;
  if (!lazy protocol witness table cache variable for type LayoutPositionKey and conformance LayoutPositionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPositionKey and conformance LayoutPositionKey);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingToolbarLayout.callAsFunction<A, B, C>(_:leadingActions:trailingActions:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ScreenSharingToolbarLayout.callAsFunction<A, B, C>(_:leadingActions:trailingActions:)(*(void (**)(uint64_t))(v1 + 64), *(void (**)(uint64_t))(v1 + 80), *(uint64_t (**)(char *, uint64_t))(v1 + 88), *(void (**)(uint64_t))(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

unint64_t lazy protocol witness table accessor for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout;
  if (!lazy protocol witness table cache variable for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout;
  if (!lazy protocol witness table cache variable for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingToolbarLayout and conformance ScreenSharingToolbarLayout);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScreenSharingToolbarLayout(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      BOOL v4 = v3 >= 4;
      int v2 = v3 - 4;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingToolbarLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenSharingToolbarLayout()
{
  return &type metadata for ScreenSharingToolbarLayout;
}

ValueMetadata *type metadata accessor for ScreenSharingToolbarLayout.Cache()
{
  return &type metadata for ScreenSharingToolbarLayout.Cache;
}

uint64_t sub_1C318F060()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for LayoutPositionKey()
{
  return &unk_1F1E9D718;
}

unsigned char *storeEnumTagSinglePayload for LayoutPosition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C318F2A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutPosition()
{
  return &type metadata for LayoutPosition;
}

uint64_t outlined init with copy of LayoutSubview?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LayoutSubview?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t Edge.axis.getter(char a1)
{
  return a1 & 1;
}

uint64_t View.toolbarPlacement(_:)()
{
  return swift_release();
}

uint64_t ScreenSharingToolbar.toolbarPlacement.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v1, v2);
  specialized Environment.wrappedValue.getter();
  uint64_t v4 = v3;
  outlined consume of Environment<CGFloat>.Content(v1, v2);
  return v4;
}

uint64_t ScreenSharingToolbar.title.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t ScreenSharingToolbar.leadingActions.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t ScreenSharingToolbar.centerActions.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t ScreenSharingToolbar.trailingActions.getter()
{
  return OUTLINED_FUNCTION_2_6();
}

uint64_t ScreenSharingToolbar.actionsContainer.getter()
{
  ScreenSharingToolbar.toolbarPlacement.getter();
  int v0 = Axis.rawValue.getter();
  if (v0 == Axis.rawValue.getter())
  {
    static VerticalAlignment.center.getter();
    lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout();
  }
  else
  {
    static HorizontalAlignment.center.getter();
    lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  }
  return AnyLayout.init<A>(_:)();
}

uint64_t ScreenSharingToolbar.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _LayoutRoot<ScreenSharingToolbarLayout>);
  uint64_t v4 = a1[2];
  type metadata accessor for Optional();
  uint64_t v35 = a1[4];
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_3_72();
  OUTLINED_FUNCTION_9_39();
  uint64_t v36 = MEMORY[0x1E4F3F110];
  swift_getWitnessTable();
  type metadata accessor for VStack();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<LayoutPositionKey>>);
  uint64_t v33 = type metadata accessor for ModifiedContent();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v32 = a1[3];
  type metadata accessor for Optional();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ModifiedContent();
  uint64_t v29 = a1[5];
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_25_13();
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  uint64_t v31 = OUTLINED_FUNCTION_9_39();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScreenSharingToolbarLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<ScreenSharingToolbarLayout>);
  type metadata accessor for _VariadicView.Tree();
  OUTLINED_FUNCTION_4();
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v28 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v30 = (char *)&v28 - v9;
  uint64_t v10 = v2;
  char v11 = ScreenSharingToolbar.toolbarPlacement.getter();
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v15 = a1[8];
  uint64_t v14 = a1[9];
  uint64_t v16 = v32;
  uint64_t v17 = v35;
  uint64_t v18 = v29;
  uint64_t v19 = implicit closure #1 in ScreenSharingToolbar.body.getter(v11, v4, v32, v35, v29, v12, v13, v15, 15.0, v14);
  uint64_t v41 = v4;
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  uint64_t v44 = v18;
  uint64_t v45 = v12;
  uint64_t v46 = v13;
  uint64_t v47 = v15;
  uint64_t v48 = v14;
  uint64_t v49 = v10;
  v39[2] = v4;
  void v39[3] = v16;
  v39[4] = v17;
  v39[5] = v18;
  v39[6] = v12;
  v39[7] = v13;
  v39[8] = v15;
  v39[9] = v14;
  v39[10] = v10;
  v38[2] = v4;
  v38[3] = v16;
  v38[4] = v17;
  v38[5] = v18;
  v38[6] = v12;
  v38[7] = v13;
  v38[8] = v15;
  v38[9] = v14;
  v38[10] = v10;
  long long v20 = v28;
  ((void (*)(uint64_t (*)(), unsigned char *, uint64_t (*)(), void *, uint64_t (*)(), void *))v19)(partial apply for closure #1 in ScreenSharingToolbar.body.getter, v40, partial apply for closure #2 in ScreenSharingToolbar.body.getter, v39, partial apply for closure #3 in ScreenSharingToolbar.body.getter, v38);
  swift_release();
  uint64_t v21 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<ScreenSharingToolbarLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<ScreenSharingToolbarLayout>);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = v21;
  uint64_t v51 = WitnessTable;
  uint64_t v23 = v33;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = v30;
  static ViewBuilder.buildExpression<A>(_:)(v20, v23, v24);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v34 + 8);
  v26(v20, v23);
  static ViewBuilder.buildExpression<A>(_:)(v25, v23, v24);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v23);
}

uint64_t (*implicit closure #1 in ScreenSharingToolbar.body.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  *(void *)(v19 + 32) = a4;
  *(void *)(v19 + 40) = a5;
  *(void *)(v19 + 48) = a6;
  *(void *)(v19 + 56) = a7;
  *(void *)(v19 + 64) = a8;
  *(void *)(v19 + 72) = a10;
  *(double *)(v19 + 80) = a9;
  *(unsigned char *)(v19 + 88) = a1;
  return partial apply for implicit closure #2 in implicit closure #1 in ScreenSharingToolbar.body.getter;
}

uint64_t implicit closure #2 in implicit closure #1 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>, double a9@<D0>)
{
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for VStack();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  type metadata accessor for Optional();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v12 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for _VariadicView.Tree();
  uint64_t WitnessTable = swift_getWitnessTable();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  swift_getWitnessTable();
  uint64_t v15 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v16 = swift_getWitnessTable();
  *((void *)&v18 + 1) = v15;
  *(void *)&long long v18 = WitnessTable;
  return ScreenSharingToolbarLayout.callAsFunction<A, B, C>(_:leadingActions:trailingActions:)(a1, a2, a3, a4, a5, a6, a7, v11, a8, a9, v12, v13, v18, v16);
}

uint64_t closure #1 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v26 = a1;
  uint64_t v27 = a6;
  uint64_t v25 = a5;
  uint64_t v30 = a9;
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for VStack();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v25 - v20;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = v25;
  uint64_t v35 = v27;
  uint64_t v36 = v28;
  uint64_t v37 = v29;
  uint64_t v38 = a10;
  uint64_t v39 = v26;
  default argument 0 of VStack.init(alignment:spacing:content:)(v13, WitnessTable);
  VStack.init(alignment:spacing:content:)();
  uint64_t v22 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19, v15, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v19, v15);
  static ViewBuilder.buildExpression<A>(_:)(v21, v15, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, v15);
}

uint64_t closure #1 in closure #1 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(void, void))
{
  uint64_t v67 = a7;
  char v62 = a3;
  uint64_t v66 = a1;
  uint64_t v68 = a9;
  uint64_t v60 = *(void *)(a4 - 8);
  uint64_t v61 = a10;
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  double v58 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v59 = (char *)&v56 - v17;
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v63);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  CGRect v65 = (char *)&v56 - v22;
  uint64_t v57 = *(void *)(a2 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v69 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v70 = (uint64_t)&v56 - v32;
  uint64_t v76 = a2;
  uint64_t v77 = v62;
  uint64_t v78 = a4;
  uint64_t v79 = a5;
  uint64_t v33 = a6;
  uint64_t v80 = a6;
  uint64_t v34 = v66;
  uint64_t v81 = v67;
  uint64_t v82 = a8;
  uint64_t v67 = a8;
  uint64_t v83 = v61;
  type metadata accessor for ScreenSharingToolbar();
  ScreenSharingToolbar.toolbarPlacement.getter();
  LODWORD(a8) = Axis.rawValue.getter();
  if (a8 == Axis.rawValue.getter())
  {
    (*(void (**)(void))(v34 + 16))();
    static ViewBuilder.buildExpression<A>(_:)(v25, a2, v33);
    char v62 = v20;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v57 + 8);
    v35(v25, a2);
    static ViewBuilder.buildExpression<A>(_:)(v27, a2, v33);
    v35(v27, a2);
    uint64_t v20 = v62;
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v31, v36, 1, a2);
  uint64_t v66 = v33;
  static ViewBuilder.buildIf<A>(_:)((uint64_t)v31, v70);
  uint64_t v37 = *(void (**)(void, void))(v69 + 8);
  uint64_t v38 = v31;
  char v62 = (char *)(v69 + 8);
  uint64_t v61 = v37;
  v37(v31, v28);
  uint64_t v39 = *(void (**)(uint64_t))(v34 + 48);
  uint64_t v40 = v28;
  if (v39)
  {
    uint64_t v41 = swift_retain();
    uint64_t v42 = v58;
    v39(v41);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v39);
    uint64_t v43 = v59;
    uint64_t v44 = v67;
    static ViewBuilder.buildExpression<A>(_:)(v42, a4, v67);
    uint64_t v45 = *(void (**)(char *, uint64_t))(v60 + 8);
    v45(v42, a4);
    static ViewBuilder.buildExpression<A>(_:)(v43, a4, v44);
    v45(v43, a4);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, a4);
    uint64_t v46 = v65;
    uint64_t v47 = (uint64_t)v65;
    uint64_t v48 = (uint64_t)v20;
    uint64_t v49 = v44;
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 1, 1, a4);
    uint64_t v46 = v65;
    uint64_t v47 = (uint64_t)v65;
    uint64_t v48 = (uint64_t)v20;
    uint64_t v49 = v67;
  }
  static ViewBuilder.buildIf<A>(_:)(v48, v47);
  uint64_t v50 = v64;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v52 = v63;
  v51(v20, v63);
  uint64_t v53 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v38, v70, v40);
  uint64_t v76 = (uint64_t)v38;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v20, v46, v52);
  uint64_t v77 = v20;
  v75[0] = v40;
  v75[1] = v52;
  uint64_t v72 = v66;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v71 = v49;
  uint64_t v74 = swift_getWitnessTable();
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&v76, 2, (uint64_t)v75);
  v51(v46, v52);
  uint64_t v54 = (uint64_t (*)(char *, uint64_t))v61;
  v61(v53, v40);
  v51(v20, v52);
  return v54(v38, v40);
}

uint64_t closure #2 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v40 = a8;
  uint64_t v38 = a1;
  uint64_t v43 = a9;
  uint64_t v36 = a10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v39 = type metadata accessor for Optional();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v16 = type metadata accessor for _VariadicView.Tree();
  uint64_t v42 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v37 = (uint64_t)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v41 = (char *)&v36 - v19;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v20 = a3;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v61 = a6;
  uint64_t v62 = a7;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v25 = v40;
  uint64_t v26 = v36;
  uint64_t v63 = v40;
  uint64_t v64 = v36;
  type metadata accessor for ScreenSharingToolbar();
  uint64_t v27 = v38;
  uint64_t v57 = ScreenSharingToolbar.actionsContainer.getter();
  uint64_t v45 = a2;
  uint64_t v46 = v20;
  uint64_t v47 = v21;
  uint64_t v48 = v22;
  uint64_t v49 = v23;
  uint64_t v50 = v24;
  uint64_t v51 = v25;
  uint64_t v52 = v26;
  uint64_t v53 = v27;
  unint64_t v28 = lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout();
  uint64_t v56 = v24;
  uint64_t v29 = v39;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v31 = v37;
  Layout.callAsFunction<A>(_:)((uint64_t)partial apply for closure #1 in closure #2 in ScreenSharingToolbar.body.getter, (uint64_t)v44, MEMORY[0x1E4F3EF88], v29, v28, WitnessTable, v37);
  swift_release();
  uint64_t v54 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v55 = WitnessTable;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v41;
  static ViewBuilder.buildExpression<A>(_:)(v31, v16, v32);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v34(v31, v16);
  static ViewBuilder.buildExpression<A>(_:)(v33, v16, v32);
  return ((uint64_t (*)(char *, uint64_t))v34)(v33, v16);
}

uint64_t closure #1 in closure #2 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = *(void (**)(uint64_t))(a1 + 32);
  if (v19)
  {
    uint64_t v20 = swift_retain();
    v19(v20);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v19);
    uint64_t v21 = v29;
    static ViewBuilder.buildExpression<A>(_:)(v9, a2, v29);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, a2);
    static ViewBuilder.buildExpression<A>(_:)(v11, a2, v21);
    v22(v11, a2);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, a2);
    uint64_t v23 = (uint64_t)v18;
    uint64_t v24 = (uint64_t)v16;
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, a2);
    uint64_t v23 = (uint64_t)v18;
    uint64_t v24 = (uint64_t)v16;
    uint64_t v21 = v29;
  }
  static ViewBuilder.buildIf<A>(_:)(v24, v23);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  v25(v16, v12);
  uint64_t v31 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18, v12, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v25)(v18, v12);
}

uint64_t closure #3 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v38 = a8;
  uint64_t v41 = a9;
  uint64_t v35 = a10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v37 = type metadata accessor for Optional();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v17 = type metadata accessor for _VariadicView.Tree();
  uint64_t v40 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v36 = (uint64_t)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v39 = (char *)&v34 - v20;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v21 = a2;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  uint64_t v59 = a7;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = v38;
  uint64_t v25 = v35;
  uint64_t v60 = v38;
  uint64_t v61 = v35;
  type metadata accessor for ScreenSharingToolbar();
  uint64_t v54 = ScreenSharingToolbar.actionsContainer.getter();
  uint64_t v43 = v21;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v47 = v22;
  uint64_t v48 = v23;
  uint64_t v49 = v24;
  uint64_t v50 = v25;
  uint64_t v51 = a1;
  unint64_t v26 = lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout();
  uint64_t v27 = v37;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = v36;
  Layout.callAsFunction<A>(_:)((uint64_t)partial apply for closure #1 in closure #3 in ScreenSharingToolbar.body.getter, (uint64_t)v42, MEMORY[0x1E4F3EF88], v27, v26, WitnessTable, v36);
  swift_release();
  uint64_t v52 = lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>, &demangling cache variable for type metadata for _LayoutRoot<AnyLayout>);
  uint64_t v53 = WitnessTable;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v31 = v39;
  static ViewBuilder.buildExpression<A>(_:)(v29, v17, v30);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v32(v29, v17);
  static ViewBuilder.buildExpression<A>(_:)(v31, v17, v30);
  return ((uint64_t (*)(char *, uint64_t))v32)(v31, v17);
}

uint64_t closure #1 in closure #3 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v30 = a4;
  uint64_t v7 = v6;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = *(void (**)(uint64_t))(a1 + 64);
  if (v20)
  {
    uint64_t v21 = swift_retain();
    v20(v21);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v20);
    uint64_t v22 = v30;
    static ViewBuilder.buildExpression<A>(_:)(v10, a2, v30);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v23(v10, a2);
    static ViewBuilder.buildExpression<A>(_:)(v12, a2, v22);
    v23(v12, a2);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, a2);
    uint64_t v24 = (uint64_t)v19;
    uint64_t v25 = (uint64_t)v17;
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, a2);
    uint64_t v24 = (uint64_t)v19;
    uint64_t v25 = (uint64_t)v17;
    uint64_t v22 = v30;
  }
  static ViewBuilder.buildIf<A>(_:)(v25, v24);
  unint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v17, v13);
  uint64_t v32 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19, v13, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v26)(v19, v13);
}

uint64_t default argument 0 of ScreenSharingToolbar.init(toolbarPlacement:title:leadingActions:centerActions:trailingActions:)()
{
  return swift_getKeyPath();
}

uint64_t ScreenSharingToolbar.init(toolbarPlacement:title:leadingActions:centerActions:trailingActions:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(void *)a9 = result;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ScreenSharingToolbar<A, B, C, D>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  memcpy(v6, v2, sizeof(v6));
  return ScreenSharingToolbar.body.getter(a1, a2);
}

uint64_t ScreenSharingToolbar.init(_:leadingActions:centerActions:trailingActions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a9 = result;
  *(unsigned char *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  *(void *)(a9 + 56) = a6;
  *(void *)(a9 + 64) = a7;
  *(void *)(a9 + 72) = a8;
  return result;
}

uint64_t ScreenSharingToolbar.init<>(_:leadingActions:trailingActions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a7 = result;
  *(unsigned char *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = a1;
  *(void *)(a7 + 24) = a2;
  *(void *)(a7 + 32) = a3;
  *(void *)(a7 + 40) = a4;
  *(void *)(a7 + 48) = 0;
  *(void *)(a7 + 56) = 0;
  *(void *)(a7 + 64) = a5;
  *(void *)(a7 + 72) = a6;
  return result;
}

double ScreenSharingToolbar.init<>(_:leadingActions:)()
{
  OUTLINED_FUNCTION_4_60();
  *(void *)uint64_t v4 = swift_getKeyPath();
  *(unsigned char *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = v0;
  double result = 0.0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  return result;
}

double ScreenSharingToolbar.init<>(_:trailingActions:)()
{
  OUTLINED_FUNCTION_4_60();
  *(void *)uint64_t v4 = swift_getKeyPath();
  *(unsigned char *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  double result = 0.0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(void *)(v4 + 64) = v1;
  *(void *)(v4 + 72) = v0;
  return result;
}

double ScreenSharingToolbar.init<>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = swift_getKeyPath();
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = a1;
  *(void *)(a3 + 24) = a2;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  return result;
}

void *ToolbarPlacementKey.defaultValue.unsafeMutableAddressor()
{
  return &static ToolbarPlacementKey.defaultValue;
}

uint64_t static ToolbarPlacementKey.defaultValue.getter()
{
  return 2;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ToolbarPlacementKey(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ToolbarPlacementKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Edge and conformance Edge();
  return MEMORY[0x1F40F8670](a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.toolbarPlacement.getter()
{
  lazy protocol witness table accessor for type ToolbarPlacementKey and conformance ToolbarPlacementKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

uint64_t key path getter for EnvironmentValues.toolbarPlacement : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.toolbarPlacement.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C31914D8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.toolbarPlacement.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.toolbarPlacement : EnvironmentValues()
{
  return EnvironmentValues.toolbarPlacement.setter();
}

uint64_t sub_1C319152C()
{
  return EnvironmentValues.toolbarPlacement.setter();
}

uint64_t partial apply for closure #1 in ScreenSharingToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingToolbar.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void))closure #1 in ScreenSharingToolbar.body.getter);
}

uint64_t partial apply for closure #2 in ScreenSharingToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingToolbar.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void))closure #2 in ScreenSharingToolbar.body.getter);
}

uint64_t partial apply for closure #3 in ScreenSharingToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingToolbar.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void))closure #3 in ScreenSharingToolbar.body.getter);
}

unint64_t lazy protocol witness table accessor for type ToolbarPlacementKey and conformance ToolbarPlacementKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarPlacementKey and conformance ToolbarPlacementKey;
  if (!lazy protocol witness table cache variable for type ToolbarPlacementKey and conformance ToolbarPlacementKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacementKey and conformance ToolbarPlacementKey);
  }
  return result;
}

uint64_t EnvironmentValues.toolbarPlacement.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t (*EnvironmentValues.toolbarPlacement.modify(void *a1))(uint64_t a1)
{
  *a1 = v1;
  a1[1] = lazy protocol witness table accessor for type ToolbarPlacementKey and conformance ToolbarPlacementKey();
  EnvironmentValues.subscript.getter();
  return EnvironmentValues.toolbarPlacement.modify;
}

uint64_t EnvironmentValues.toolbarPlacement.modify(uint64_t a1)
{
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 16);
  return EnvironmentValues.subscript.setter();
}

uint64_t specialized ScreenSharingToolbarButtonStyleModifier.foregroundStyle.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if ((a4 & 0x100) != 0) {
    static Color.black.getter();
  }
  else {
    static HierarchicalShapeStyle.primary.getter();
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t specialized ScreenSharingToolbarButtonStyleModifier.foregroundStyle.getter()
{
  if (*(unsigned char *)(v0 + *(int *)(type metadata accessor for ScreenSharingToolbarTitleButton() + 28)) == 1) {
    static Color.black.getter();
  }
  else {
    static HierarchicalShapeStyle.primary.getter();
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t ScreenSharingToolbarButtonStyleModifier.foregroundStyle.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    static Color.black.getter();
  }
  else {
    static HierarchicalShapeStyle.primary.getter();
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t specialized ScreenSharingToolbarButtonStyleModifier.backgroundStyle.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HierarchicalShapeStyleModifier<Material>);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Material();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 0x100) != 0)
  {
    void v16[2] = static HierarchicalShapeStyle.primary.getter();
  }
  else
  {
    char v13 = a4 & 1;
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a3, v13);
    specialized Environment.wrappedValue.getter();
    outlined consume of Environment<CGFloat>.Content(a3, v13);
    int v14 = Axis.rawValue.getter();
    if (v14 == Axis.rawValue.getter())
    {
      static Material.thin.getter();
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
      *(void *)&v8[*(int *)(v6 + 36)] = 3;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HierarchicalShapeStyleModifier<Material> and conformance HierarchicalShapeStyleModifier<A>, &demangling cache variable for type metadata for HierarchicalShapeStyleModifier<Material>);
    }
    else
    {
      _OWORD v16[3] = static HierarchicalShapeStyle.quaternary.getter();
    }
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t specialized ScreenSharingToolbarButtonStyleModifier.backgroundStyle.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HierarchicalShapeStyleModifier<Material>);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Material();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ScreenSharingToolbarTitleButton();
  if (*(unsigned char *)(v0 + *(int *)(v8 + 28)) == 1)
  {
    v13[2] = static HierarchicalShapeStyle.primary.getter();
  }
  else
  {
    uint64_t v9 = v0 + *(int *)(v8 + 24);
    uint64_t v10 = *(void *)v9;
    char v11 = *(unsigned char *)(v9 + 8);
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)v9, v11);
    specialized Environment.wrappedValue.getter();
    outlined consume of Environment<CGFloat>.Content(v10, v11);
    LODWORD(v10) = Axis.rawValue.getter();
    if (v10 == Axis.rawValue.getter())
    {
      static Material.thin.getter();
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v7, v4);
      *(void *)&v3[*(int *)(v1 + 36)] = 3;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HierarchicalShapeStyleModifier<Material> and conformance HierarchicalShapeStyleModifier<A>, &demangling cache variable for type metadata for HierarchicalShapeStyleModifier<Material>);
    }
    else
    {
      void v13[3] = static HierarchicalShapeStyle.quaternary.getter();
    }
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t ScreenSharingToolbarButtonStyleModifier.backgroundStyle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HierarchicalShapeStyleModifier<Material>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_16_0();
  uint64_t v8 = type metadata accessor for Material();
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_63();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2))
  {
    static HierarchicalShapeStyle.primary.getter();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    int v12 = Axis.rawValue.getter();
    if (v12 == Axis.rawValue.getter())
    {
      static Material.thin.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v3, v8);
      *(void *)(v2 + *(int *)(v6 + 36)) = 3;
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, v8);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HierarchicalShapeStyleModifier<Material> and conformance HierarchicalShapeStyleModifier<A>, &demangling cache variable for type metadata for HierarchicalShapeStyleModifier<Material>);
    }
    else
    {
      static HierarchicalShapeStyle.quaternary.getter();
    }
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t ScreenSharingToolbarIconButton.toolbarPlacement.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = a4 & 1;
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(a3, a4 & 1);
  specialized Environment.wrappedValue.getter();
  uint64_t v7 = v6;
  outlined consume of Environment<CGFloat>.Content(a3, v5);
  return v7;
}

uint64_t ScreenSharingToolbarIconButton.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v80 = a5;
  uint64_t v81 = a4;
  uint64_t v79 = a2;
  v62[1] = a1;
  uint64_t v83 = a6;
  unsigned int v69 = a3 & 1;
  int v82 = a5 & 0x100;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymbolRenderingMode?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v75 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for Image.Scale();
  uint64_t v8 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  uint64_t v64 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IconOnlyLabelStyle();
  v62[0] = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.labelStyle<A>(_:)>>.0);
  uint64_t v63 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  int v14 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v20 = v19 - 8;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>)
      - 8;
  MEMORY[0x1F4188790](v67);
  CGRect v65 = (char *)v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>)
      - 8;
  MEMORY[0x1F4188790](v71);
  uint64_t v70 = (uint64_t)v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>)
      - 8;
  MEMORY[0x1F4188790](v73);
  uint64_t v72 = (uint64_t)v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>)
      - 8;
  MEMORY[0x1F4188790](v76);
  uint64_t v74 = (char *)v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>, _OpacityEffect>);
  MEMORY[0x1F4188790](v78);
  uint64_t v77 = (uint64_t)v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  IconOnlyLabelStyle.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarIconButton>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ScreenSharingToolbarIconButton> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarIconButton>);
  lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, MEMORY[0x1E4F3D440]);
  uint64_t v28 = v69;
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v62[0] + 8))(v12, v10);
  uint64_t v29 = v64;
  uint64_t v30 = v68;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v64, *MEMORY[0x1E4F3EC70], v68);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = (uint64_t *)&v18[*(int *)(v16 + 44)];
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v32 + *(int *)(v33 + 28), v29, v30);
  *uint64_t v32 = KeyPath;
  uint64_t v34 = v63;
  uint64_t v35 = v66;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v18, v14, v66);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  uint64_t v36 = static Font.body.getter();
  uint64_t v37 = swift_getKeyPath();
  outlined init with copy of FeatureEligibility?((uint64_t)v18, (uint64_t)v22, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
  uint64_t v38 = (uint64_t *)&v22[*(int *)(v20 + 44)];
  *uint64_t v38 = v37;
  v38[1] = v36;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
  uint64_t v39 = (uint64_t)v75;
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v40 = type metadata accessor for SymbolRenderingMode();
  __swift_storeEnumTagSinglePayload(v39, 0, 1, v40);
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = (uint64_t)v65;
  uint64_t v43 = (uint64_t *)&v65[*(int *)(v67 + 44)];
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>);
  outlined init with copy of FeatureEligibility?(v39, (uint64_t)v43 + *(int *)(v44 + 28), &demangling cache variable for type metadata for SymbolRenderingMode?);
  *uint64_t v43 = v41;
  outlined init with copy of FeatureEligibility?((uint64_t)v22, v42, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v39, &demangling cache variable for type metadata for SymbolRenderingMode?);
  uint64_t v45 = (uint64_t)v22;
  uint64_t v46 = v79;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v45, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v47 = v70;
  outlined init with copy of FeatureEligibility?(v42, v70, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>);
  uint64_t v48 = (_OWORD *)(v47 + *(int *)(v71 + 44));
  long long v49 = v87;
  *uint64_t v48 = v86;
  v48[1] = v49;
  void v48[2] = v88;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v42, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v46, v28);
  LOWORD(v14) = v80;
  LOBYTE(v41) = v80 & 1;
  uint64_t v50 = v81;
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v81, v80 & 1);
  char v85 = v28;
  char v84 = v41;
  LOWORD(v39) = v82;
  uint64_t v51 = specialized ScreenSharingToolbarButtonStyleModifier.foregroundStyle.getter(v46, v28, v50, (unsigned __int16)v82 | v41);
  outlined consume of Environment<CGFloat>.Content(v46, v28);
  outlined consume of Environment<CGFloat>.Content(v50, v14 & 1);
  uint64_t v52 = v72;
  outlined init with copy of FeatureEligibility?(v47, v72, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>);
  *(void *)(v52 + *(int *)(v73 + 44)) = v51;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v47, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v46, v28);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v50, v14 & 1);
  char v85 = v28;
  char v84 = v41;
  uint64_t v53 = specialized ScreenSharingToolbarButtonStyleModifier.backgroundStyle.getter(v46, v28, v50, (unsigned __int16)v39 | v41);
  outlined consume of Environment<CGFloat>.Content(v46, v28);
  uint64_t v54 = v50;
  uint64_t v55 = (uint64_t)v74;
  outlined consume of Environment<CGFloat>.Content(v54, v14 & 1);
  outlined init with copy of FeatureEligibility?(v52, v55, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>);
  uint64_t v56 = v55 + *(int *)(v76 + 44);
  *(void *)uint64_t v56 = v53;
  *(_WORD *)(v56 + 8) = 256;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v52, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>);
  double v57 = 1.0;
  if (((unsigned __int16)v14 & 0x100) == 0)
  {
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v46, v28);
    specialized Environment.wrappedValue.getter();
    char v59 = v58;
    outlined consume of Environment<CGFloat>.Content(v46, v28);
    if (v59) {
      double v57 = 1.0;
    }
    else {
      double v57 = 0.3;
    }
  }
  uint64_t v60 = v77;
  outlined init with copy of FeatureEligibility?(v55, v77, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>);
  *(double *)(v60 + *(int *)(v78 + 36)) = v57;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v55, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v60, v83, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>, _OpacityEffect>);
}

uint64_t protocol witness for ScreenSharingToolbarButtonStyleModifier.toolbarPlacement.getter in conformance ScreenSharingToolbarIconButton()
{
  return ScreenSharingToolbarIconButton.toolbarPlacement.getter(*(void *)v0, *(unsigned __int8 *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t protocol witness for ScreenSharingToolbarButtonStyleModifier.isSelected.getter in conformance ScreenSharingToolbarIconButton()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScreenSharingToolbarIconButton()
{
  return MEMORY[0x1F40F8350]();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScreenSharingToolbarIconButton()
{
  return MEMORY[0x1F40F8360]();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ScreenSharingToolbarIconButton()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t ScreenSharingToolbarTitleButton.toolbarPlacement.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ScreenSharingToolbarTitleButton() + 24);
  uint64_t v2 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)v1, v3);
  specialized Environment.wrappedValue.getter();
  uint64_t v5 = v4;
  outlined consume of Environment<CGFloat>.Content(v2, v3);
  return v5;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScreenSharingToolbarIconButton@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + 25)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return ScreenSharingToolbarIconButton.body(content:)(a1, *(void *)v2, *(unsigned char *)(v2 + 8), *(void *)(v2 + 16), v3 | *(unsigned __int8 *)(v2 + 24), a2);
}

double ScreenSharingToolbarTitleButton.horizontalPadding.getter()
{
  uint64_t v0 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v20 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v20 - v14;
  if (static Platform.current.getter() == 1)
  {
    type metadata accessor for ScreenSharingToolbarTitleButton();
    specialized Environment.wrappedValue.getter();
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E4F3DA58], v0);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v0);
    uint64_t v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
    outlined init with copy of FeatureEligibility?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    outlined init with copy of FeatureEligibility?((uint64_t)v13, v16, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v0) == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (__swift_getEnumTagSinglePayload(v16, 1, v0) == 1)
      {
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        return 19.0;
      }
    }
    else
    {
      outlined init with copy of FeatureEligibility?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      if (__swift_getEnumTagSinglePayload(v16, 1, v0) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
        lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label((unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass, MEMORY[0x1E4F3DA68]);
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v19 = *(void (**)(char *, uint64_t))(v1 + 8);
        v19(v3, v0);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        v19(v10, v0);
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
        double result = 19.0;
        if (v18) {
          return result;
        }
        return 12.0;
      }
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v13, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v6, &demangling cache variable for type metadata for (UserInterfaceSizeClass?, UserInterfaceSizeClass?));
  }
  return 12.0;
}

uint64_t ScreenSharingToolbarTitleButton.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v84 = a1;
  uint64_t v92 = a2;
  uint64_t v91 = type metadata accessor for ScreenSharingToolbarTitleButton() - 8;
  MEMORY[0x1F4188790](v91);
  uint64_t v90 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for RoundedRectangle() - 8;
  MEMORY[0x1F4188790](v89);
  long long v88 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v74 = (uint64_t)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for Font.TextStyle();
  uint64_t v73 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v75 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TitleOnlyLabelStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.labelStyle<A>(_:)>>.0);
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>)
      - 8;
  MEMORY[0x1F4188790](v78);
  char v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>)
      - 8;
  MEMORY[0x1F4188790](v81);
  uint64_t v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>)
      - 8;
  MEMORY[0x1F4188790](v82);
  uint64_t v80 = (uint64_t)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>)
      - 8;
  MEMORY[0x1F4188790](v83);
  uint64_t v72 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect>);
  MEMORY[0x1F4188790](v86);
  uint64_t v85 = (uint64_t)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  TitleOnlyLabelStyle.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarTitleButton>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ScreenSharingToolbarTitleButton> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarTitleButton>);
  lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label(&lazy protocol witness table cache variable for type TitleOnlyLabelStyle and conformance TitleOnlyLabelStyle, MEMORY[0x1E4F3D688]);
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v24 = v73;
  uint64_t v25 = v75;
  uint64_t v26 = v76;
  (*(void (**)(char *, void, uint64_t))(v73 + 104))(v75, *MEMORY[0x1E4F3E138], v76);
  uint64_t v27 = type metadata accessor for Font.Design();
  uint64_t v28 = v74;
  __swift_storeEnumTagSinglePayload(v74, 1, 1, v27);
  static Font.Weight.medium.getter();
  uint64_t v29 = v28;
  uint64_t v30 = static Font.system(_:design:weight:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v29, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v77;
  uint64_t v33 = v79;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v16, v12, v79);
  uint64_t v34 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  *uint64_t v34 = KeyPath;
  v34[1] = v30;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  LOBYTE(v30) = static Edge.Set.horizontal.getter();
  uint64_t v35 = v87;
  ScreenSharingToolbarTitleButton.horizontalPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  outlined init with copy of FeatureEligibility?((uint64_t)v16, (uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v44 = (uint64_t)v72;
  uint64_t v45 = &v18[*(int *)(v78 + 44)];
  *uint64_t v45 = v30;
  *((void *)v45 + 1) = v37;
  *((void *)v45 + 2) = v39;
  *((void *)v45 + 3) = v41;
  *((void *)v45 + 4) = v43;
  v45[40] = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of FeatureEligibility?((uint64_t)v18, (uint64_t)v20, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>);
  uint64_t v46 = &v20[*(int *)(v81 + 44)];
  long long v47 = v94;
  *(_OWORD *)uint64_t v46 = v93;
  *((_OWORD *)v46 + 1) = v47;
  *((_OWORD *)v46 + 2) = v95;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>);
  uint64_t v48 = specialized ScreenSharingToolbarButtonStyleModifier.foregroundStyle.getter();
  uint64_t v49 = v80;
  outlined init with copy of FeatureEligibility?((uint64_t)v20, v80, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>);
  *(void *)(v49 + *(int *)(v82 + 44)) = v48;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v20, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>);
  uint64_t v50 = v35;
  uint64_t v51 = specialized ScreenSharingToolbarButtonStyleModifier.backgroundStyle.getter();
  uint64_t v52 = v88;
  uint64_t v53 = &v88[*(int *)(v89 + 28)];
  uint64_t v54 = *MEMORY[0x1E4F3D4A0];
  uint64_t v55 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 104))(v53, v54, v55);
  __asm { FMOV            V0.2D, #15.0 }
  *uint64_t v52 = _Q0;
  uint64_t v61 = (uint64_t *)(v44 + *(int *)(v83 + 44));
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>);
  uint64_t v63 = (void (*)(void))MEMORY[0x1E4F3CDB8];
  outlined init with copy of RoundedRectangle((uint64_t)v52, (uint64_t)v61 + *(int *)(v62 + 52), MEMORY[0x1E4F3CDB8]);
  *uint64_t v61 = v51;
  *(_WORD *)((char *)v61 + *(int *)(v62 + 56)) = 256;
  uint64_t v64 = (uint64_t)v90;
  outlined init with copy of FeatureEligibility?(v49, v44, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>);
  outlined destroy of RoundedRectangle((uint64_t)v52, v63);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v49, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>);
  LODWORD(v51) = *(unsigned __int8 *)(v50 + *(int *)(v91 + 36));
  outlined init with copy of RoundedRectangle(v50, v64, (void (*)(void))type metadata accessor for ScreenSharingToolbarTitleButton);
  if (v51 == 1)
  {
    outlined destroy of RoundedRectangle(v64, (void (*)(void))type metadata accessor for ScreenSharingToolbarTitleButton);
    double v65 = 1.0;
  }
  else
  {
    uint64_t v66 = *(void *)v64;
    char v67 = *(unsigned char *)(v64 + 8);
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)v64, v67);
    specialized Environment.wrappedValue.getter();
    char v69 = v68;
    outlined consume of Environment<CGFloat>.Content(v66, v67);
    outlined destroy of RoundedRectangle(v64, (void (*)(void))type metadata accessor for ScreenSharingToolbarTitleButton);
    if (v69) {
      double v65 = 1.0;
    }
    else {
      double v65 = 0.5;
    }
  }
  uint64_t v70 = v85;
  outlined init with copy of FeatureEligibility?(v44, v85, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>);
  *(double *)(v70 + *(int *)(v86 + 36)) = v65;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v44, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v70, v92, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect>);
}

uint64_t protocol witness for ScreenSharingToolbarButtonStyleModifier.isSelected.getter in conformance ScreenSharingToolbarTitleButton(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

BOOL static ScreenSharingToolbarButtonStyle.Style.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ScreenSharingToolbarButtonStyle.Style.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int ScreenSharingToolbarButtonStyle.Style.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScreenSharingToolbarButtonStyle.Style(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ScreenSharingToolbarButtonStyle.Style.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ScreenSharingToolbarButtonStyle.Style()
{
  return ScreenSharingToolbarButtonStyle.Style.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ScreenSharingToolbarButtonStyle.Style(uint64_t a1)
{
  ScreenSharingToolbarButtonStyle.Style.hash(into:)(a1, *v1);
}

uint64_t ScreenSharingToolbarButtonStyle.style.getter(char a1)
{
  return a1 & 1;
}

uint64_t ScreenSharingToolbarButtonStyle.isSelected.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t ScreenSharingToolbarButtonStyle.isSelected.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*ScreenSharingToolbarButtonStyle.isSelected.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ScreenSharingToolbarButtonStyle.makeBody(configuration:)@<X0>(__int16 a1@<W1>, uint64_t a2@<X8>)
{
  char v4 = a1;
  uint64_t v37 = a2;
  int v34 = a1 & 0x100;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>, ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>>.Storage);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  MEMORY[0x1F4188790](v14 - 8);
  OUTLINED_FUNCTION_63();
  uint64_t v15 = type metadata accessor for ButtonStyleConfiguration.Label();
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_16_0();
  ButtonStyleConfiguration.label.getter();
  uint64_t KeyPath = swift_getKeyPath();
  if (v4)
  {
    uint64_t v29 = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v8, v20, v15);
    uint64_t v30 = &v8[*(int *)(v36 + 36)];
    *(void *)uint64_t v30 = KeyPath;
    v30[8] = 0;
    *((void *)v30 + 2) = v29;
    v30[24] = 0;
    v30[25] = BYTE1(v34);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
    uint64_t v27 = &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>);
    outlined init with copy of FeatureEligibility?((uint64_t)v10, (uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    uint64_t v28 = (uint64_t)v10;
  }
  else
  {
    *uint64_t v3 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = swift_getKeyPath();
    uint64_t v24 = v2 + *(int *)(v33 + 36);
    *(void *)uint64_t v24 = KeyPath;
    *(unsigned char *)(v24 + 8) = 0;
    uint64_t v25 = (int *)type metadata accessor for ScreenSharingToolbarTitleButton();
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v3, v24 + v25[5], &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
    uint64_t v26 = v24 + v25[6];
    *(void *)uint64_t v26 = v23;
    *(unsigned char *)(v26 + 8) = 0;
    *(unsigned char *)(v24 + v25[7]) = BYTE1(v34);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v2, v20, v15);
    uint64_t v27 = &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>;
    outlined init with copy of FeatureEligibility?(v2, (uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    uint64_t v28 = v2;
  }
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v28, v27);
}

ConversationKit::ScreenSharingToolbarButtonStyle __swiftcall ScreenSharingToolbarButtonStyle.init(style:isSelected:)(ConversationKit::ScreenSharingToolbarButtonStyle::Style style, Swift::Bool isSelected)
{
  if (isSelected) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return (ConversationKit::ScreenSharingToolbarButtonStyle)OUTLINED_FUNCTION_10_38(style, v2);
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance ScreenSharingToolbarButtonStyle@<X0>(uint64_t a1@<X8>)
{
  if (v1[1]) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return ScreenSharingToolbarButtonStyle.makeBody(configuration:)(v2 | *v1, a1);
}

uint64_t static ButtonStyle<>.screenSharingToolbarButton(style:isSelected:)(char a1, char a2)
{
  if (a2) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return OUTLINED_FUNCTION_10_38(a1, v2);
}

uint64_t key path getter for EnvironmentValues.isEnabled : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C3193B54@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isEnabled : EnvironmentValues()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_1C3193BAC()
{
  return EnvironmentValues.isEnabled.setter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label((unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, MEMORY[0x1E4F3DB78]);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label(&lazy protocol witness table cache variable for type ScreenSharingToolbarTitleButton and conformance ScreenSharingToolbarTitleButton, (void (*)(uint64_t))type metadata accessor for ScreenSharingToolbarTitleButton);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for ScreenSharingToolbarTitleButton()
{
  uint64_t result = type metadata singleton initialization cache for ScreenSharingToolbarTitleButton;
  if (!type metadata singleton initialization cache for ScreenSharingToolbarTitleButton) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label((unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, MEMORY[0x1E4F3DB78]);
    lazy protocol witness table accessor for type ScreenSharingToolbarIconButton and conformance ScreenSharingToolbarIconButton();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScreenSharingToolbarIconButton and conformance ScreenSharingToolbarIconButton()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingToolbarIconButton and conformance ScreenSharingToolbarIconButton;
  if (!lazy protocol witness table cache variable for type ScreenSharingToolbarIconButton and conformance ScreenSharingToolbarIconButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingToolbarIconButton and conformance ScreenSharingToolbarIconButton);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ScreenSharingToolbar<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ScreenSharingToolbarButtonStyle.Style and conformance ScreenSharingToolbarButtonStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingToolbarButtonStyle.Style and conformance ScreenSharingToolbarButtonStyle.Style;
  if (!lazy protocol witness table cache variable for type ScreenSharingToolbarButtonStyle.Style and conformance ScreenSharingToolbarButtonStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingToolbarButtonStyle.Style and conformance ScreenSharingToolbarButtonStyle.Style);
  }
  return result;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in ScreenSharingToolbarButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata instantiation function for ScreenSharingToolbar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 88);
}

uint64_t destroy for ScreenSharingToolbar(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t result = swift_release();
  if (*(void *)(a1 + 32)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 48)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 64))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ScreenSharingToolbar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_retain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  uint64_t v11 = *(void *)(a2 + 64);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for ScreenSharingToolbar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_retain();
  swift_release();
  uint64_t v9 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v11;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_8:
  uint64_t v12 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = v13;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v14;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_15:
  uint64_t v15 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v15)
    {
      uint64_t v17 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v15;
      *(void *)(a1 + 72) = v17;
      swift_retain();
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v15)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScreenSharingToolbar(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  uint64_t v8 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v8)
    {
      uint64_t v9 = a2[5];
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = v9;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v8)
  {
    uint64_t v10 = a2[5];
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v10;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_8:
  uint64_t v11 = a2[6];
  if (*(void *)(a1 + 48))
  {
    if (v11)
    {
      uint64_t v12 = a2[7];
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 56) = v12;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v11)
  {
    uint64_t v13 = a2[7];
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v13;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_15:
  uint64_t v14 = a2[8];
  if (!*(void *)(a1 + 64))
  {
    if (v14)
    {
      uint64_t v16 = a2[9];
      *(void *)(a1 + 64) = v14;
      *(void *)(a1 + 72) = v16;
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v15 = a2[9];
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v15;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingToolbar(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingToolbar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ScreenSharingToolbar()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for ToolbarPlacementKey()
{
}

uint64_t dispatch thunk of ScreenSharingToolbarButtonStyleModifier.toolbarPlacement.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScreenSharingToolbarButtonStyleModifier.isSelected.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t getEnumTagSinglePayload for ScreenSharingToolbarButtonStyle(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 65281 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65281 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 16)) - 65282;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingToolbarButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31944F4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ScreenSharingToolbarButtonStyle()
{
}

unsigned char *storeEnumTagSinglePayload for ScreenSharingToolbarButtonStyle.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31945F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ScreenSharingToolbarButtonStyle.Style()
{
}

uint64_t sub_1C3194628()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C3194850()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>, ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>, ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>, ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>, ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>>);
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarTitleButton>, ModifiedContent<ButtonStyleConfiguration.Label, ScreenSharingToolbarIconButton>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ScreenSharingToolbarTitleButton(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = *(void *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)v17, v19);
    *(void *)uint64_t v16 = v18;
    *(unsigned char *)(v16 + 8) = v19;
    *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for ScreenSharingToolbarTitleButton(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);
  return outlined consume of Environment<CGFloat>.Content(v7, v8);
}

uint64_t initializeWithCopy for ScreenSharingToolbarTitleButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)v15;
  char v17 = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)v15, v17);
  *(void *)uint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v17;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for ScreenSharingToolbarTitleButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1 + v10, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
    }
    else
    {
      void *v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = *(void *)v17;
  char v19 = *(unsigned char *)(v17 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)v17, v19);
  uint64_t v20 = *(void *)v16;
  char v21 = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v16 = v18;
  *(unsigned char *)(v16 + 8) = v19;
  outlined consume of Environment<CGFloat>.Content(v20, v21);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for ScreenSharingToolbarTitleButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for ScreenSharingToolbarTitleButton(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1 + v10, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v19 = *v18;
  LOBYTE(v18) = *((unsigned char *)v18 + 8);
  uint64_t v20 = *(void *)v17;
  char v21 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = (_BYTE)v18;
  outlined consume of Environment<CGFloat>.Content(v20, v21);
  *(unsigned char *)(a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingToolbarTitleButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C319528C);
}

uint64_t sub_1C319528C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ScreenSharingToolbarTitleButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3195324);
}

uint64_t sub_1C3195324(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for ScreenSharingToolbarTitleButton()
{
  type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for ScreenSharingToolbarIconButton(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  return outlined consume of Environment<CGFloat>.Content(v2, v3);
}

uint64_t initializeWithCopy for ScreenSharingToolbarIconButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for ScreenSharingToolbarIconButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<CGFloat>.Content(v10, v11);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ScreenSharingToolbarIconButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<CGFloat>.Content(v9, v10);
  *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenSharingToolbarIconButton(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 26))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenSharingToolbarIconButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for ScreenSharingToolbarIconButton()
{
  return &unk_1F1E9D9A8;
}

unint64_t instantiation function for generic protocol witness table for ScreenSharingToolbarIconButton(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ScreenSharingToolbarIconButton and conformance ScreenSharingToolbarIconButton();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ScreenSharingToolbarTitleButton(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label(&lazy protocol witness table cache variable for type ScreenSharingToolbarTitleButton and conformance ScreenSharingToolbarTitleButton, (void (*)(uint64_t))type metadata accessor for ScreenSharingToolbarTitleButton);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScreenSharingToolbarIconButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScreenSharingToolbarTitleButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of RoundedRectangle(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of RoundedRectangle(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3195854()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t key path setter for EnvironmentValues.symbolRenderingMode : EnvironmentValues, serialized(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymbolRenderingMode?);
  MEMORY[0x1F4188790](v2 - 8);
  outlined init with copy of FeatureEligibility?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SymbolRenderingMode?);
  return EnvironmentValues.symbolRenderingMode.setter();
}

unint64_t lazy protocol witness table accessor for type Edge and conformance Edge()
{
  unint64_t result = lazy protocol witness table cache variable for type Edge and conformance Edge;
  if (!lazy protocol witness table cache variable for type Edge and conformance Edge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge and conformance Edge);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #3 in ScreenSharingToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingToolbar.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void))closure #1 in closure #3 in ScreenSharingToolbar.body.getter);
}

unint64_t lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout;
  if (!lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout;
  if (!lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout;
  if (!lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in ScreenSharingToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingToolbar.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void))closure #1 in closure #2 in ScreenSharingToolbar.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingToolbar.body.getter()
{
  return partial apply for closure #1 in ScreenSharingToolbar.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void))closure #1 in closure #1 in ScreenSharingToolbar.body.getter);
}

uint64_t partial apply for closure #1 in ScreenSharingToolbar.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void, void, void))
{
  return a1(v1[10], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1C3195AC8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ScreenSharingToolbar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return implicit closure #2 in implicit closure #1 in ScreenSharingToolbar.body.getter(a1, a2, a3, a4, a5, a6, *(unsigned char *)(v7 + 88), a7, *(double *)(v7 + 80));
}

uint64_t sub_1C3195B20()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<AnyShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarTitleButton>);
    type metadata accessor for TitleOnlyLabelStyle();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ScreenSharingToolbarTitleButton> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarTitleButton>);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label(&lazy protocol witness table cache variable for type TitleOnlyLabelStyle and conformance TitleOnlyLabelStyle, MEMORY[0x1E4F3D688]);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>);
    type metadata accessor for ButtonStyleConfiguration.Label();
    type metadata accessor for IconOnlyLabelStyle();
    lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle((unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, MEMORY[0x1E4F3DB78]);
    lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, MEMORY[0x1E4F3D440]);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C3195E48()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<AnyShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FrameLayout>, _ForegroundStyleModifier<AnyShapeStyle>>, _InsettableBackgroundShapeModifier<AnyShapeStyle, RoundedRectangle>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SymbolRenderingMode?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<SymbolRenderingMode?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarIconButton>);
    type metadata accessor for IconOnlyLabelStyle();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ScreenSharingToolbarIconButton> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<ScreenSharingToolbarIconButton>);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, MEMORY[0x1E4F3D440]);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.labelStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay15ConversationKit015CallControlsPreH15ButtonViewModel_pGG_AH0jhlM6Holder33_801AF6C8C7AF9F90D2770D7757FA6A2ELLVs5NeverOTg506_sSi15f6Kit015hij3C15klm22_pAA0ecgH6Holder33_801opqrstuvw38ELLVIgynr_Si6offset_AaB_p7elementtAEs5X181OIegnrzr_TR04_s15a5Kit18ec7Buttonsg14V7service9viewh66AcA0cD21ConfirmationServicing_p_AA0cdefI0CtcfcAA0cdfI6Holder33_801jklmnopqR40ELLVSi_AA0d8Controlscd6ButtonfI0_ptXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v22 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v2 = v22;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 32;
    do
    {
      outlined init with copy of IDSLookupManager(v5, (uint64_t)v20);
      *(void *)&long long v15 = v4;
      outlined init with take of Notice(v20, (uint64_t)&v15 + 8);
      v21[0] = v15;
      v21[1] = v16;
      v21[2] = v17;
      uint64_t v19 = 761623152;
      *(void *)&v20[0] = 0xE400000000000000;
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      uint64_t v7 = v19;
      uint64_t v8 = *(void *)&v20[0];
      outlined init with copy of IDSLookupManager((uint64_t)v21 + 8, (uint64_t)&v16);
      *(void *)&long long v15 = v7;
      *((void *)&v15 + 1) = v8;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v21, &demangling cache variable for type metadata for (offset: Int, element: CallControlsPreCallButtonViewModel));
      uint64_t v2 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v22;
      }
      unint64_t v9 = *(void *)(v2 + 16);
      if (v9 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v22;
      }
      ++v4;
      *(void *)(v2 + 16) = v9 + 1;
      uint64_t v10 = v2 + 56 * v9;
      long long v11 = v15;
      long long v12 = v16;
      long long v13 = v17;
      *(void *)(v10 + 80) = v18;
      *(_OWORD *)(v10 + 48) = v12;
      *(_OWORD *)(v10 + 64) = v13;
      *(_OWORD *)(v10 + 32) = v11;
      v5 += 40;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t PreCallButtonsView.viewModel.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for PreCallButtonsView.viewModel : PreCallButtonsView()
{
  return PreCallButtonsView.viewModel.setter();
}

uint64_t PreCallButtonsView.viewModel.setter()
{
  return Bindable.wrappedValue.setter();
}

void (*PreCallButtonsView.viewModel.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  v2[4] = Bindable.wrappedValue.modify();
  return CallControlsMenuView.viewModel.modify;
}

uint64_t PreCallButtonsView.$viewModel.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  return MEMORY[0x1F40FCAB0](v0);
}

uint64_t PreCallButtonsView.init(service:viewModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for PreCallButtonsViewModel();
  lazy protocol witness table accessor for type PreCallButtonsViewModel and conformance PreCallButtonsViewModel((unint64_t *)&lazy protocol witness table cache variable for type PreCallButtonsViewModel and conformance PreCallButtonsViewModel, (void (*)(uint64_t))type metadata accessor for PreCallButtonsViewModel);
  swift_retain();
  Bindable<A>.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CallControlsPreCallButtonViewModel>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  uint64_t v5 = type metadata accessor for CancelConfirmationViewModel();
  swift_allocObject();
  uint64_t v6 = CancelConfirmationViewModel.init()();
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 64) = &protocol witness table for CancelConfirmationViewModel;
  *(void *)(inited + 32) = v6;
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v11);
  uint64_t v7 = type metadata accessor for DialButtonViewModel();
  swift_allocObject();
  uint64_t v8 = DialButtonViewModel.init(service:)(v11);
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = &protocol witness table for DialButtonViewModel;
  *(void *)(inited + 72) = v8;
  uint64_t v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay15ConversationKit015CallControlsPreH15ButtonViewModel_pGG_AH0jhlM6Holder33_801AF6C8C7AF9F90D2770D7757FA6A2ELLVs5NeverOTg506_sSi15f6Kit015hij3C15klm22_pAA0ecgH6Holder33_801opqrstuvw38ELLVIgynr_Si6offset_AaB_p7elementtAEs5X181OIegnrzr_TR04_s15a5Kit18ec7Buttonsg14V7service9viewh66AcA0cD21ConfirmationServicing_p_AA0cdefI0CtcfcAA0cdfI6Holder33_801jklmnopqR40ELLVSi_AA0d8Controlscd6ButtonfI0_ptXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for CallControlsPreCallButtonViewModel);
  uint64_t result = type metadata accessor for PreCallButtonsView();
  *(void *)(a2 + *(int *)(result + 20)) = v9;
  return result;
}

uint64_t PreCallButtonsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>);
  MEMORY[0x1F4188790](v8 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_21();
  uint64_t v21 = v20 - v19;
  *(void *)uint64_t v11 = static VerticalAlignment.top.getter();
  *(void *)(v11 + 8) = 0x4034000000000000;
  *(unsigned char *)(v11 + 16) = 0;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>);
  closure #1 in PreCallButtonsView.body.getter(v6, v11 + *(int *)(v22 + 44));
  unsigned int v23 = static Edge.Set.top.getter();
  unsigned int v24 = static Edge.Set.bottom.getter();
  uint64_t v25 = MEMORY[0x1C8771D90](0);
  int v26 = MEMORY[0x1C8771D90]();
  if (MEMORY[0x1C8771D90](v26 & v23) != v23) {
    uint64_t v25 = MEMORY[0x1C8771D90](v25 | v23);
  }
  int v27 = MEMORY[0x1C8771D90](v25);
  if (MEMORY[0x1C8771D90](v27 & v24) != v24) {
    LOBYTE(v25) = MEMORY[0x1C8771D90](v25 | v24);
  }
  EdgeInsets.init(_all:)();
  OUTLINED_FUNCTION_38();
  outlined init with copy of FeatureEligibility?(v11, v16, &demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>);
  uint64_t v28 = v16 + *(int *)(v12 + 36);
  *(unsigned char *)uint64_t v28 = v25;
  *(void *)(v28 + 8) = v2;
  *(void *)(v28 + 16) = v3;
  *(void *)(v28 + 24) = v4;
  *(void *)(v28 + 32) = v5;
  *(unsigned char *)(v28 + 40) = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v11, &demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>);
  unsigned int v29 = static Edge.Set.leading.getter();
  unsigned int v30 = static Edge.Set.trailing.getter();
  uint64_t v31 = MEMORY[0x1C8771D90](0);
  int v32 = MEMORY[0x1C8771D90]();
  if (MEMORY[0x1C8771D90](v32 & v29) != v29) {
    uint64_t v31 = MEMORY[0x1C8771D90](v31 | v29);
  }
  int v33 = MEMORY[0x1C8771D90](v31);
  if (MEMORY[0x1C8771D90](v33 & v30) != v30) {
    LOBYTE(v31) = MEMORY[0x1C8771D90](v31 | v30);
  }
  EdgeInsets.init(_all:)();
  OUTLINED_FUNCTION_38();
  outlined init with copy of FeatureEligibility?(v16, v21, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>);
  uint64_t v34 = v21 + *(int *)(v17 + 36);
  *(unsigned char *)uint64_t v34 = v31;
  *(void *)(v34 + 8) = v2;
  *(void *)(v34 + 16) = v3;
  *(void *)(v34 + 24) = v4;
  *(void *)(v34 + 32) = v5;
  *(unsigned char *)(v34 + 40) = 0;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v16, &demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>);
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v21, a1, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout>);
}

uint64_t closure #1 in PreCallButtonsView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PreCallButtonsView();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v23 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  Bindable.wrappedValue.getter();
  PreCallButtonsViewModel.contextSubject.getter();
  CurrentValueSubject.value.getter();
  swift_release();
  swift_release();
  unsigned __int8 v12 = v27;
  if (v27 == 255)
  {
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v22 = v9;
    uint64_t v14 = a2;
    uint64_t v15 = v26;
    uint64_t v26 = *(void *)(a1 + *(int *)(v4 + 20));
    outlined init with copy of PreCallButtonsView(a1, (uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for PreCallButtonsView);
    unint64_t v16 = (*(unsigned __int8 *)(v23 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    a2 = v14;
    uint64_t v9 = v22;
    *(unsigned char *)(v17 + 24) = v12 & 1;
    outlined init with take of PreCallButtonsView((uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PreCallViewModelHolder]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [PreCallViewModelHolder] and conformance [A], &demangling cache variable for type metadata for [PreCallViewModelHolder]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?();
    lazy protocol witness table accessor for type PreCallViewModelHolder and conformance PreCallViewModelHolder();
    ForEach<>.init(_:content:)();
    uint64_t v19 = v24;
    uint64_t v18 = v25;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v11, v8, v25);
    uint64_t v20 = (uint64_t (**)())&v11[*(int *)(v9 + 36)];
    *uint64_t v20 = closure #2 in closure #1 in CallControlsMenuView.body.getter;
    v20[1] = 0;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v11, a2, &demangling cache variable for type metadata for ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>);
    uint64_t v13 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a2, v13, 1, v9);
}

uint64_t closure #1 in closure #1 in PreCallButtonsView.body.getter@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1;
  char v16 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  Bindable.wrappedValue.getter();
  uint64_t v9 = PreCallButtonsViewModel.preCallDelegate.getter();
  uint64_t v11 = v10;
  swift_release();
  if (v9) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  PreCallViewModelHolder.build(_:preCallDelegate:)(&v15, v9, v12, (uint64_t)v8);
  swift_unknownObjectRelease();
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v8, a3, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?);
}

uint64_t PreCallViewModelHolder.build(_:preCallDelegate:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v42 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>);
  MEMORY[0x1F4188790](v39);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>);
  MEMORY[0x1F4188790](v43);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  char v14 = *((unsigned char *)a1 + 8);
  uint64_t v15 = (void *)swift_allocObject();
  outlined init with copy of IDSLookupManager(v4 + 16, (uint64_t)(v15 + 2));
  outlined init with copy of IDSLookupManager((uint64_t)(v15 + 2), (uint64_t)v46);
  uint64_t v17 = v47;
  uint64_t v16 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  uint64_t v44 = v13;
  char v45 = v14;
  LOBYTE(v16) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 40))(&v44, v17, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  if (v16)
  {
    uint64_t v18 = v15[5];
    uint64_t v19 = v15[6];
    uint64_t v20 = __swift_project_boxed_opaque_existential_1(v15 + 2, v18);
    uint64_t v37 = (uint64_t)&v37;
    uint64_t v38 = a4;
    uint64_t v21 = *(void *)(v18 - 8);
    MEMORY[0x1F4188790](v20);
    uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v21 + 16))(v23);
    uint64_t v24 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t))(*(void *)(v19 + 8) + 8))(v18);
    uint64_t v26 = v25;
    char v28 = v27;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v18);
    uint64_t v29 = v41;
    CallControlsType.controlView()(v24, v26, v28, v41);
    outlined consume of CallControlsType((uint64_t)v24, v26, v28);
    unsigned int v30 = (uint64_t (*)())swift_allocObject();
    uint64_t v31 = v42;
    *((void *)v30 + 2) = v15;
    *((void *)v30 + 3) = v31;
    *((void *)v30 + 4) = v40;
    outlined init with copy of FeatureEligibility?(v29, (uint64_t)v10, &demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>);
    int v32 = (uint64_t (**)())&v10[*(int *)(v39 + 36)];
    *int v32 = partial apply for closure #1 in PreCallViewModelHolder.build(_:preCallDelegate:);
    v32[1] = v30;
    v32[2] = 0;
    long long v32[3] = 0;
    swift_unknownObjectRetain();
    swift_retain();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v29, &demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>);
    outlined init with copy of FeatureEligibility?((uint64_t)v10, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>);
    uint64_t v33 = v43;
    uint64_t v34 = &v12[*(int *)(v43 + 36)];
    *(void *)uint64_t v34 = 0;
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 2) = partial apply for closure #2 in PreCallViewModelHolder.build(_:preCallDelegate:);
    *((void *)v34 + 3) = v15;
    swift_retain();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>);
    uint64_t v35 = v38;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v12, v38, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>);
    __swift_storeEnumTagSinglePayload(v35, 0, 1, v33);
    return swift_release();
  }
  else
  {
    swift_release();
    return __swift_storeEnumTagSinglePayload(a4, 1, 1, v43);
  }
}

uint64_t CallControlsType.controlView()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v35[1] = a4;
  uint64_t v36 = a1;
  uint64_t v6 = type metadata accessor for CallControlTextButton(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _OffsetEffect>);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v14 = (char *)v35 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>.Storage);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (void *)((char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>);
  MEMORY[0x1F4188790](v37);
  uint64_t v19 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>.Storage);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3)
  {
    case 1:
      v17[1] = 0;
      void v17[2] = 0;
      *uint64_t v17 = v36;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<Bool> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      char v27 = &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>;
      outlined init with copy of FeatureEligibility?((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>);
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      uint64_t v28 = (uint64_t)v19;
      goto LABEL_6;
    case 2:
      v35[0] = v21;
      type metadata accessor for CallControlsTextButtonConfiguration(0);
      lazy protocol witness table accessor for type PreCallButtonsViewModel and conformance PreCallButtonsViewModel(&lazy protocol witness table cache variable for type CallControlsTextButtonConfiguration and conformance CallControlsTextButtonConfiguration, (void (*)(uint64_t))type metadata accessor for CallControlsTextButtonConfiguration);
      swift_retain();
      Bindable<A>.init(wrappedValue:)();
      outlined init with copy of PreCallButtonsView((uint64_t)v8, (uint64_t)v12, (void (*)(void))type metadata accessor for CallControlTextButton);
      *(_OWORD *)&v12[*(int *)(v9 + 36)] = xmmword_1C37732C0;
      outlined destroy of CallControlTextButton((uint64_t)v8);
      char v27 = &demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _OffsetEffect>;
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _OffsetEffect>);
      outlined init with copy of FeatureEligibility?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _OffsetEffect>);
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<Bool> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<Bool>);
      lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined init with copy of FeatureEligibility?((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>);
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v19, &demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>);
      uint64_t v28 = (uint64_t)v14;
LABEL_6:
      uint64_t result = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v28, v27);
      break;
    case 3:
      uint64_t v29 = swift_retain();
      unsigned int v30 = v36;
      uint64_t v31 = v36(v29);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v38 = (uint64_t (*)(void))v31;
      char v41 = 0;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<()>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<()> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<()>);
      _ConditionalContent<>.init(storage:)();
      long long v32 = v42;
      uint64_t v33 = v43;
      char v34 = v44;
      *(_OWORD *)uint64_t v23 = v42;
      *((void *)v23 + 2) = v33;
      v23[24] = v34;
      swift_storeEnumTagMultiPayload();
      outlined copy of _ConditionalContent<AnyView, IconButton<()>>.Storage(v32, *((uint64_t *)&v32 + 1), v33, v34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>();
      _ConditionalContent<>.init(storage:)();
      outlined consume of CallControlsType((uint64_t)v30, a2, 3u);
      outlined consume of _ConditionalContent<AnyView, IconButton<()>>.Storage(v32, *((uint64_t *)&v32 + 1), v33, v34);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v38 = v36;
      char v41 = 1;
      outlined copy of CallControlsType((uint64_t)v36, a2, 0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButton<()>);
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<()> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<()>);
      _ConditionalContent<>.init(storage:)();
      uint64_t v24 = v43;
      char v25 = v44;
      *(_OWORD *)uint64_t v23 = v42;
      *((void *)v23 + 2) = v24;
      v23[24] = v25;
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<AnyView, IconButton<()>>);
      lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
      lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>();
      uint64_t result = _ConditionalContent<>.init(storage:)();
      break;
  }
  return result;
}

uint64_t closure #1 in PreCallViewModelHolder.build(_:preCallDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  __swift_mutable_project_boxed_opaque_existential_1(v5, v7);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24);
  uint64_t v9 = swift_unknownObjectRetain();
  v8(v9, a3, v7, v6);
  swift_endAccess();
  swift_beginAccess();
  outlined init with copy of IDSLookupManager(v5, (uint64_t)v13);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t))(*(void *)(v11 + 8) + 16))(v10);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t closure #2 in PreCallViewModelHolder.build(_:preCallDelegate:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  outlined init with copy of IDSLookupManager(v1, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 24))(v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for [NSLayoutConstraint]);
}

{
  uint64_t vars8;

  swift_arrayDestroy();
  OUTLINED_FUNCTION_75();
  return swift_deallocClassInstance();
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit((uint64_t *)&demangling cache variable for type metadata for ParticipantsViewController);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(MEMORY[0x1F418BC48]);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit((void (*)(void))type metadata accessor for Participant);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for CallControlsPreCallButtonViewModel);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(void (*a1)(void))
{
  a1(0);
  OUTLINED_FUNCTION_1_5();
  swift_arrayDestroy();
  OUTLINED_FUNCTION_75();
  return swift_deallocClassInstance();
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_75();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PreCallButtonsView()
{
  uint64_t result = type metadata singleton initialization cache for PreCallButtonsView;
  if (!type metadata singleton initialization cache for PreCallButtonsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PreCallButtonsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C3197CE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PreCallButtonsView.viewModel.getter();
  *a1 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PreCallButtonsView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PreCallButtonsView(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PreCallButtonsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PreCallButtonsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PreCallButtonsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PreCallButtonsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreCallButtonsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C319808C);
}

uint64_t sub_1C319808C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PreCallButtonsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3198130);
}

void sub_1C3198130(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void type metadata completion function for PreCallButtonsView()
{
  type metadata accessor for Bindable<PreCallButtonsViewModel>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Bindable<PreCallButtonsViewModel>()
{
  if (!lazy cache variable for type metadata for Bindable<PreCallButtonsViewModel>)
  {
    type metadata accessor for PreCallButtonsViewModel();
    unint64_t v0 = type metadata accessor for Bindable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
    }
  }
}

uint64_t sub_1C31982AC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t destroy for PreCallViewModelHolder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for PreCallViewModelHolder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 16, v4, v6);
  return a1;
}

void *assignWithCopy for PreCallViewModelHolder(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  return a1;
}

uint64_t assignWithTake for PreCallViewModelHolder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for PreCallViewModelHolder()
{
  return &type metadata for PreCallViewModelHolder;
}

uint64_t sub_1C3198510()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for PreCallButtonsView() - 8) + 80);
  uint64_t v2 = (v1 + 25) & ~v1;
  outlined consume of PreCallControlsContext(*(id *)(v0 + 16));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<PreCallButtonsViewModel>);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(v0 + v2);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of PreCallButtonsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PreCallButtonsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in PreCallButtonsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PreCallButtonsView();
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 24);
  return closure #1 in closure #1 in PreCallButtonsView.body.getter(v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>> and conformance <> _ConditionalContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ForEach<[PreCallViewModelHolder], String, ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>, _AppearanceActionModifier>, _AppearanceActionModifier>?>, _TransactionModifier>?>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>>);
    lazy protocol witness table accessor for type _ConditionalContent<AnyView, IconButton<()>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<AnyView, IconButton<()>>, _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type IconButton<Bool> and conformance IconButton<A>, &demangling cache variable for type metadata for IconButton<Bool>);
    lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<IconButton<Bool>, ModifiedContent<CallControlTextButton, _OffsetEffect>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CallControlTextButton, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<CallControlTextButton, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CallControlTextButton, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<CallControlTextButton, _OffsetEffect>);
    lazy protocol witness table accessor for type PreCallButtonsViewModel and conformance PreCallButtonsViewModel(&lazy protocol witness table cache variable for type CallControlTextButton and conformance CallControlTextButton, (void (*)(uint64_t))type metadata accessor for CallControlTextButton);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CallControlTextButton, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreCallViewModelHolder and conformance PreCallViewModelHolder()
{
  unint64_t result = lazy protocol witness table cache variable for type PreCallViewModelHolder and conformance PreCallViewModelHolder;
  if (!lazy protocol witness table cache variable for type PreCallViewModelHolder and conformance PreCallViewModelHolder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreCallViewModelHolder and conformance PreCallViewModelHolder);
  }
  return result;
}

uint64_t sub_1C3198A54()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1C3198A8C()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PreCallViewModelHolder.build(_:preCallDelegate:)()
{
  return closure #1 in PreCallViewModelHolder.build(_:preCallDelegate:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #2 in PreCallViewModelHolder.build(_:preCallDelegate:)()
{
  return closure #2 in PreCallViewModelHolder.build(_:preCallDelegate:)(v0);
}

uint64_t lazy protocol witness table accessor for type PreCallButtonsViewModel and conformance PreCallButtonsViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of PreCallButtonsView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

void *ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:accessibilityLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
  uint64_t v10 = v9;
  id v11 = v9;
  outlined bridged method (mbgnn) of @objc NSObject.accessibilityLabel.setter(a6, a7, v11);

  return v10;
}

uint64_t static ConversationControlsAction.rejectCall(controlsManager:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return static ConversationControlsAction.rejectCall(controlsManager:)(a1, a2);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t vars8;

  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  long long v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x270))();
  if ((*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x290))(v5)) {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  }
  uint64_t v6 = OUTLINED_FUNCTION_163();
  *a2 = ConversationControlsAction.CallButtonStyle.init(_:conversation:)(v6, v7, v8);
  type metadata accessor for ConversationControlsAction();
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  return specialized _arrayForceCast<A, B>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, &demangling cache variable for type metadata for TUHandle?);
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint, 0x1E4F28DC8, &demangling cache variable for type metadata for NSLayoutConstraint?);
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1, unint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v7 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x1C87744F0](v9, a1);
        }
        else {
          id v10 = *(id *)(a1 + 8 * v9 + 32);
        }
        id v11 = v10;
        ++v9;
        type metadata accessor for NSObject(0, a2);
        id v12 = v11;
        __swift_instantiateConcreteTypeFromMangledName(a4);
        swift_dynamicCast();

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v7 != v9);
      return v13;
    }
  }
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v8;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      unint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v8;
      }
      v4 += 16;
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of Any(&v7, (_OWORD *)(v2 + 32 * v5 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

void static ConversationControlsAction.primaryCallAction(controlsManager:location:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationControlsAction?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_36();
  uint64_t v14 = v12 - v13;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_55_5();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_78_3();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v50 - v18;
  ConversationControlsManager.isOneToOneConversation.getter();
  *uint64_t v19 = v20 & 1;
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_29_15();
  uint64_t v53 = *(uint64_t (**)(void))(v21 + 2112);
  uint64_t v54 = v21 + 2112;
  unsigned __int8 v22 = v53();
  unsigned __int8 v23 = v22;
  switch(v22 >> 5)
  {
    case 1:
      uint64_t v24 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x290))();
      if (v24)
      {
        char v25 = v24;
        id v26 = objc_msgSend(v24, sel_localParticipantAssociation);

        if (v26)
        {
          id v27 = objc_msgSend(v25, sel_state);

          if (v27 == (id)1)
          {
            if ((v23 & 1) == 0) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
        }
        else
        {
        }
      }
      if (v23) {
        goto LABEL_23;
      }
      goto LABEL_22;
    case 2:
      swift_storeEnumTagMultiPayload();
      uint64_t v28 = v1;
      goto LABEL_19;
    case 3:
      if (v22 != 96) {
        goto LABEL_23;
      }
      if (v7) {
        _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v19, v14);
      }
      else {
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v28 = v14;
LABEL_19:
      outlined init with take of ConversationControlsAction(v28, (uint64_t)v0);
      break;
    case 4:
      if (v22 != 128) {
        goto LABEL_23;
      }
      static ConversationControlsAction.acceptCall(controlsManager:)(v3, v0);
      break;
    case 5:
      if (v22 == 160) {
        goto LABEL_22;
      }
LABEL_23:
      OUTLINED_FUNCTION_87_1();
      swift_storeEnumTagMultiPayload();
      break;
    default:
LABEL_22:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v19, (uint64_t)v0);
      break;
  }
  uint64_t v55 = v10;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationControls);
  unsigned int v30 = v3;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v59[0] = v34;
    *(_DWORD *)uint64_t v33 = 136315650;
    OUTLINED_FUNCTION_29_15();
    uint64_t v36 = (void *)(*(uint64_t (**)(void))(v35 + 656))();
    uint64_t v51 = v34;
    uint64_t v52 = v5;
    if (v36)
    {
      uint64_t v37 = v36;
      id v38 = objc_msgSend(v36, sel_state);

      uint64_t v58 = (uint64_t)v38;
      type metadata accessor for TUConversationState(0);
      uint64_t v39 = String.init<A>(reflecting:)();
      unint64_t v41 = v40;
    }
    else
    {
      unint64_t v41 = 0xE300000000000000;
      uint64_t v39 = 7104878;
    }
    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v42 = swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    LOBYTE(v58) = ((uint64_t (*)(uint64_t))v53)(v42);
    uint64_t v43 = String.init<A>(reflecting:)();
    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    swift_beginAccess();
    uint64_t v45 = v56;
    _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v0, v56);
    __swift_storeEnumTagSinglePayload(v45, 0, 1, v55);
    uint64_t v46 = specialized >> prefix<A>(_:)();
    unint64_t v48 = v47;
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v45, &demangling cache variable for type metadata for ConversationControlsAction?);
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v31, v32, "ConversationControlsAction: conversationState:%s, controlsMode:%s, primaryCallAction:%s", (uint8_t *)v33, 0x20u);
    uint64_t v49 = v51;
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v49, -1, -1);
    MEMORY[0x1C87760E0](v33, -1, -1);

    _s15ConversationKit0A14ControlsActionOWOhTm_0((uint64_t)v19, (void (*)(void))type metadata accessor for ConversationControlsAction);
    uint64_t v5 = v52;
  }
  else
  {

    _s15ConversationKit0A14ControlsActionOWOhTm_0((uint64_t)v19, (void (*)(void))type metadata accessor for ConversationControlsAction);
  }
  swift_beginAccess();
  _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v0, v5);
  _s15ConversationKit0A14ControlsActionOWOhTm_0((uint64_t)v0, (void (*)(void))type metadata accessor for ConversationControlsAction);
  OUTLINED_FUNCTION_28();
}

void *ConversationControlsAction.ButtonOptions.prefersPill.unsafeMutableAddressor()
{
  return &static ConversationControlsAction.ButtonOptions.prefersPill;
}

void *ConversationControlsAction.ButtonOptions.prefersMediumSize.unsafeMutableAddressor()
{
  return &static ConversationControlsAction.ButtonOptions.prefersMediumSize;
}

void ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v0;
  char v5 = v4;
  LODWORD(p_object) = v6;
  v410 = v7;
  uint64_t v411 = v8;
  v416 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_5_3();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_16_0();
  id v14 = (id)type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_55_5();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v427._object - v17;
  Swift::tuple_String_optional_String v426 = ConversationControlsAction.displayStrings()();
  uint64_t countAndFlagsBits = v426._0.value._countAndFlagsBits;
  object = v426._0.value._object;
  uint64_t v414 = v426._1._countAndFlagsBits;
  v415 = (uint64_t *)v426._1._object;
  _s15ConversationKit0A14ControlsActionOWOcTm_0(v3, (uint64_t)v18);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v49 = *v18;
      type metadata accessor for ConversationControlsVideoMenuButtonProvider();
      *(unsigned char *)(swift_allocObject() + 160) = v49;
      id v50 = v410;
      uint64_t v51 = v416;
      OUTLINED_FUNCTION_71_1();
      ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      uint64_t v52 = (void *)*MEMORY[0x1E4FB28C8];
      strcpy((char *)&v420, "video.fill");
      BYTE11(v420) = 0;
      HIDWORD(v420) = -369098752;
      *(void *)&long long v421 = 3;
      *((void *)&v421 + 1) = v52;
      OUTLINED_FUNCTION_11_29();
      id v53 = v52;
      static UIImage.symbolImage(for:)((uint64_t)&v420);

      goto LABEL_102;
    case 2u:
      swift_bridgeObjectRelease();
      uint64_t v54 = type metadata accessor for UUID();
      p_object = &v427._object;
      OUTLINED_FUNCTION_5_3();
      uint64_t v56 = v55;
      uint64_t v58 = *(void *)(v57 + 64);
      uint64_t v60 = MEMORY[0x1F4188790](v59);
      char v68 = OUTLINED_FUNCTION_15_32(v60, v61, v62, v63, v64, v65, v66, v67, (uint64_t)v427._object);
      v69(v68);
      type metadata accessor for InCallControlButton();
      v418 = &type metadata for SymbolImageDescribers.ConversationControls;
      v419 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      char v417 = 12;
      static Layout.ConversationControls.values.getter((uint64_t)&v420);
      OUTLINED_FUNCTION_21_22(v70, v71, v72, v73, v74, v75, v76, v77, (__int16)v427._object);
      OUTLINED_FUNCTION_5_62();
      if (one-time initialization token for joinButton != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_73_2();
      uint64_t v79 = *(uint64_t (**)(uint64_t))(v78 + 392);
      uint64_t v80 = swift_bridgeObjectRetain();
      uint64_t v81 = v79(v80);
      v415 = &v411;
      uint64_t v82 = MEMORY[0x1F4188790](v81);
      uint64_t v90 = OUTLINED_FUNCTION_22_20(v82, v83, v84, v85, v86, v87, v88, v89, v411);
      v91(v90);
      OUTLINED_FUNCTION_59_4();
      uint64_t v92 = swift_allocObject();
      uint64_t v93 = OUTLINED_FUNCTION_31_16(v92);
      v94(v93);
      long long v95 = v79;
      uint64_t v96 = partial apply for closure #3 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:);
      goto LABEL_17;
    case 3u:
      swift_bridgeObjectRelease();
      uint64_t v54 = type metadata accessor for UUID();
      p_object = &v427._object;
      OUTLINED_FUNCTION_5_3();
      uint64_t v56 = v97;
      uint64_t v58 = *(void *)(v98 + 64);
      uint64_t v100 = MEMORY[0x1F4188790](v99);
      uint64_t v108 = OUTLINED_FUNCTION_15_32(v100, v101, v102, v103, v104, v105, v106, v107, (uint64_t)v427._object);
      v109(v108);
      type metadata accessor for InCallControlButton();
      v418 = &type metadata for SymbolImageDescribers.ConversationControls;
      v419 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      char v417 = 13;
      static Layout.ConversationControls.values.getter((uint64_t)&v420);
      OUTLINED_FUNCTION_21_22(v110, v111, v112, v113, v114, v115, v116, v117, (__int16)v427._object);
      OUTLINED_FUNCTION_5_62();
      if (one-time initialization token for leaveButton != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_73_2();
      double v119 = *(uint64_t (**)(uint64_t))(v118 + 392);
      uint64_t v120 = swift_bridgeObjectRetain();
      uint64_t v121 = v119(v120);
      v415 = &v411;
      uint64_t v122 = MEMORY[0x1F4188790](v121);
      uint64_t v130 = OUTLINED_FUNCTION_22_20(v122, v123, v124, v125, v126, v127, v128, v129, v411);
      v131(v130);
      OUTLINED_FUNCTION_59_4();
      uint64_t v132 = swift_allocObject();
      uint64_t v133 = OUTLINED_FUNCTION_31_16(v132);
      v134(v133);
      double v135 = v119;
      uint64_t v96 = partial apply for closure #4 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:);
LABEL_17:
      UIControl.addAction(for:handler:)(64, (uint64_t)v96, v58);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v10, v54);
      goto LABEL_133;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v136 = *v18;
      self;
      double v137 = v410;
      id v138 = v410;
      double v139 = v416;
      double v140 = (void *)OUTLINED_FUNCTION_163();
      id v142 = [v140 v141];
      id v143 = objc_msgSend(v142, sel_neighborhoodActivityConduit);

      id v144 = objc_msgSend(v143, sel_suggestion);
      type metadata accessor for ConversationControlsLagunaMenuButtonProvider();
      swift_allocObject();
      uint64_t v145 = ConversationControlsLagunaMenuButtonProvider.init(controlsManager:context:menuHostViewController:suggestion:isInSecondaryBanner:)(v139, p_object, v137, v411, v144, v136);
      goto LABEL_28;
    case 5u:
    case 6u:
      uint64_t v26 = swift_bridgeObjectRelease();
      int v27 = *v18;
      if (*v18)
      {
        if (v27 == 1) {
          int v28 = 27;
        }
        else {
          int v28 = 28;
        }
      }
      else
      {
        v388 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v416) + 0x270);
        v388(v26);
        uint64_t v390 = v389;
        uint64_t ObjectType = swift_getObjectType();
        LOBYTE(v390) = (*(uint64_t (**)(uint64_t, uint64_t))(v390 + 144))(ObjectType, v390);
        uint64_t v392 = swift_unknownObjectRelease();
        if (v390)
        {
          int v28 = 26;
        }
        else
        {
          v388(v392);
          uint64_t v394 = v393;
          uint64_t v395 = swift_getObjectType();
          LOBYTE(v394) = (*(uint64_t (**)(uint64_t, uint64_t))(v394 + 152))(v395, v394);
          swift_unknownObjectRelease();
          if (v394) {
            int v28 = 26;
          }
          else {
            int v28 = 25;
          }
        }
      }
      _s15ConversationKit0A14ControlsActionOWOcTm_0(v3, v2);
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        _s15ConversationKit0A14ControlsActionOWOhTm_0(v2, (void (*)(void))type metadata accessor for ConversationControlsAction);
        id v14 = v416;
        goto LABEL_127;
      }
      id v14 = v416;
      id v396 = objc_msgSend(*(id *)&v416[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_callCenter], sel_currentCalls);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
      unint64_t v397 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&long long v420 = MEMORY[0x1E4FBC860];
      if (v397 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v398 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v398) {
          goto LABEL_113;
        }
LABEL_126:
        swift_bridgeObjectRelease();
        goto LABEL_127;
      }
      uint64_t v398 = *(void *)((v397 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v398) {
        goto LABEL_126;
      }
LABEL_113:
      LODWORD(countAndFlagsBits) = v28;
      if (v398 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C319C60CLL);
      }
      for (uint64_t i = 0; i != v398; ++i)
      {
        if ((v397 & 0xC000000000000001) != 0) {
          id v400 = (id)MEMORY[0x1C87744F0](i, v397);
        }
        else {
          id v400 = *(id *)(v397 + 8 * i + 32);
        }
        v401 = v400;
        if (objc_msgSend(v400, sel_status) == 2 || objc_msgSend(v401, sel_status) == 1)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      id v14 = v416;
      LOBYTE(v28) = countAndFlagsBits;
LABEL_127:
      specialized _arrayForceCast<A, B>(_:)();
      uint64_t v403 = v402;
      swift_bridgeObjectRelease();
      uint64_t v404 = OUTLINED_FUNCTION_20();
      swift_unknownObjectWeakInit();
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = v28;
      type metadata accessor for ConversationControlsPrimaryActionButtonProvider();
      OUTLINED_FUNCTION_39_10();
      v405 = v410;
      id v406 = v410;
      id v1 = v14;
      ConversationControlsPrimaryActionButtonProvider.init(controlsManager:context:calls:selectedCallAction:title:symbol:prefersPill:showsSymbolInPill:prefersMediumSize:menuHostViewController:)(v1, p_object, v403, (uint64_t)partial apply for closure #6 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:), v404, 0, 0, (uint64_t)&v420, 0, 0, 0, v405);
      OUTLINED_FUNCTION_63_2();
      v407 = self;
      v408 = &selRef_systemBlueColor;
      if (v27 != 2) {
        v408 = &selRef_systemGreenColor;
      }
      OUTLINED_FUNCTION_28_14([v407 *v408]);
      id v409 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v409);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_acceptCallButtonTappedWithButton_;
LABEL_130:
      id v25 = v14;
      objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v1, v31, 64);
LABEL_131:

LABEL_132:
      swift_release();
LABEL_133:
      OUTLINED_FUNCTION_28();
      return;
    case 7u:
      swift_bridgeObjectRelease();
      if (*v18) {
        char v146 = 8;
      }
      else {
        char v146 = 29;
      }
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = v146;
      type metadata accessor for ConversationControlsPrimaryActionButtonProvider();
      OUTLINED_FUNCTION_39_10();
      id v1 = OUTLINED_FUNCTION_6_55();
      ConversationControlsPrimaryActionButtonProvider.init(controlsManager:context:calls:selectedCallAction:title:symbol:prefersPill:showsSymbolInPill:prefersMediumSize:menuHostViewController:)(v1, p_object, MEMORY[0x1E4FBC860], 0, 0, 0, 0, (uint64_t)&v420, 0, 0, 0, 0);
      OUTLINED_FUNCTION_63_2();
      id v147 = objc_msgSend(self, sel_systemRedColor);
      OUTLINED_FUNCTION_28_14(v147);
      id v148 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v148);
      OUTLINED_FUNCTION_4_61();
      uint64_t v31 = sel_rejectCallButtonTappedWithButton_;
      OUTLINED_FUNCTION_5_62();
      goto LABEL_130;
    case 8u:
      uint64_t v149 = (uint64_t)v415;
      swift_bridgeObjectRelease();
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = 33;
      if (one-time initialization token for greenTea3PAcceptButtonBanner != -1) {
        swift_once();
      }
      id v150 = objc_allocWithZone((Class)type metadata accessor for PillButton());
      swift_bridgeObjectRetain();
      uint64_t v151 = OUTLINED_FUNCTION_40_9();
      objc_msgSend(v151, sel_addTarget_action_forControlEvents_, v416, sel_acceptCallButtonTappedWithButton_, 64);
      uint64_t v152 = v414;
      uint64_t v153 = v149;
      goto LABEL_88;
    case 9u:
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = 7;
      type metadata accessor for ConversationControlsPrimaryActionButtonProvider();
      OUTLINED_FUNCTION_39_10();
      OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_42_10();
      OUTLINED_FUNCTION_24_19(v154, v155, MEMORY[0x1E4FBC860], v156, v157, v158, v159, v160, (char)v427._object, SBYTE1(v427._object), SBYTE2(v427._object), v410);
      OUTLINED_FUNCTION_63_2();
      id v161 = objc_msgSend(self, sel_systemGreenColor);
      OUTLINED_FUNCTION_28_14(v161);
      id v162 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v162);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      double v163 = sel_joinButtonTappedWithButton_;
      goto LABEL_30;
    case 0xAu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsCountdownJoinButtonProvider();
      swift_allocObject();
      double v164 = OUTLINED_FUNCTION_6_55();
      uint64_t v145 = ConversationControlsCountdownJoinButtonProvider.init(controlsManager:context:shape:)(v164, (char)p_object, 1);
LABEL_28:
      id v165 = OUTLINED_FUNCTION_68_3(v145);
      uint64_t v167 = v166;
      v165;
      ControlsButtonProvider.button.setter(v165, v167);
      goto LABEL_132;
    case 0xBu:
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = 8;
      type metadata accessor for ConversationControlsPrimaryActionButtonProvider();
      OUTLINED_FUNCTION_39_10();
      OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_42_10();
      OUTLINED_FUNCTION_24_19(v168, v169, MEMORY[0x1E4FBC860], v170, v171, v172, v173, v174, (char)v427._object, SBYTE1(v427._object), SBYTE2(v427._object), v410);
      OUTLINED_FUNCTION_63_2();
      id v176 = OUTLINED_FUNCTION_68_3(v175);
      OUTLINED_FUNCTION_9_40(v176);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      double v163 = sel_leaveButtonTappedWithButton_;
LABEL_30:
      id v25 = v14;
      objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v1, v163, 0x2000);
      goto LABEL_131;
    case 0xCu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsOpenMessagesButtonProvider();
      uint64_t v177 = OUTLINED_FUNCTION_7_54();
      v178 = v416;
      *(void *)(v177 + 136) = v416;
      ControlsButtonProvider.init(context:shape:)((char)p_object, 1);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      uint64_t v179 = (void *)*MEMORY[0x1E4FB28C8];
      strcpy((char *)&v420, "message.fill");
      BYTE13(v420) = 0;
      HIWORD(v420) = -5120;
      *(void *)&long long v421 = 3;
      *((void *)&v421 + 1) = v179;
      LOWORD(v422) = 0;
      uint64_t v423 = 4;
      char v424 = 0;
      uint64_t v425 = 0;
      v180 = v178;
      swift_retain();
      id v181 = v179;
      static UIImage.symbolImage(for:)((uint64_t)&v420);

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_26();
      uint64_t v182 = OUTLINED_FUNCTION_38_8();
      v183(v182);
      swift_release();
      OUTLINED_FUNCTION_3_26();
      double v184 = OUTLINED_FUNCTION_20_23();
      v185(v184);
      goto LABEL_132;
    case 0xDu:
    case 0x37u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsAudioRouteMenuButtonProvider();
      swift_allocObject();
      OUTLINED_FUNCTION_67_1();
      v380 = v416;
      ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      v381 = (void *)*MEMORY[0x1E4FB28C8];
      OUTLINED_FUNCTION_61_2();
      *(void *)&long long v420 = v382;
      *((void *)&v420 + 1) = 0x80000001C379E1D0;
      *(void *)&long long v421 = 3;
      *((void *)&v421 + 1) = v381;
      OUTLINED_FUNCTION_11_29();
      id v383 = v381;
      OUTLINED_FUNCTION_88_0();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_65_1();
      swift_release();
      OUTLINED_FUNCTION_18();
      ConversationControlsAudioRouteMenuButtonProvider.makeButton(frame:)();
      goto LABEL_132;
    case 0xEu:
    case 0x38u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsMicMenuButtonProvider();
      swift_allocObject();
      OUTLINED_FUNCTION_67_1();
      v384 = v416;
      ConversationControlsMicMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      v385 = (void *)*MEMORY[0x1E4FB28C8];
      strcpy((char *)&v420, "mic.slash.fill");
      HIBYTE(v420) = -18;
      *(void *)&long long v421 = 3;
      *((void *)&v421 + 1) = v385;
      OUTLINED_FUNCTION_11_29();
      id v386 = v385;
      static UIImage.symbolImage(for:)((uint64_t)&v420);

      goto LABEL_102;
    case 0xFu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsShareMenuButtonProvider();
      swift_allocObject();
      OUTLINED_FUNCTION_67_1();
      v186 = v416;
      OUTLINED_FUNCTION_71_1();
      ConversationControlsShareMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)(v187, v188, v189, v190);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      v191 = (void *)*MEMORY[0x1E4FB28C8];
      OUTLINED_FUNCTION_61_2();
      *(void *)&long long v420 = v192 + 21;
      *((void *)&v420 + 1) = 0x80000001C3793350;
      *(void *)&long long v421 = 3;
      *((void *)&v421 + 1) = v191;
      OUTLINED_FUNCTION_11_29();
      id v193 = v191;
      OUTLINED_FUNCTION_88_0();

LABEL_102:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_65_1();
      swift_release();
      id v387 = OUTLINED_FUNCTION_10_39();
      OUTLINED_FUNCTION_32_18(v387);
      OUTLINED_FUNCTION_17_27();
      goto LABEL_132;
    case 0x10u:
    case 0x11u:
      type metadata accessor for ConversationControlsAppLaunchButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v20 = OUTLINED_FUNCTION_6_55();
      ConversationControlsAppLaunchButtonProvider.init(controlsManager:context:)(v20, (char)p_object);
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      id v21 = OUTLINED_FUNCTION_0_56();
      uint64_t v23 = v22;
      id v24 = v21;
      ControlsButtonProvider.button.setter(v21, v23);
      id v25 = v24;
      OUTLINED_FUNCTION_5_62();
      goto LABEL_131;
    case 0x12u:
      type metadata accessor for ConversationControlsAppLaunchButtonProvider();
      OUTLINED_FUNCTION_7_54();
      v194 = OUTLINED_FUNCTION_6_55();
      v195 = ConversationControlsAppLaunchButtonProvider.init(controlsManager:context:)(v194, (char)p_object);
      swift_retain();
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      swift_release();
      OUTLINED_FUNCTION_18();
      id v196 = static ConversationControlsButtonFactory.makeButton(frame:provider:)((uint64_t)v195);
      OUTLINED_FUNCTION_32_18(v196);
      ControlsButtonProvider.button.setter(v195, (uint64_t)object);
      OUTLINED_FUNCTION_5_62();
      v197 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v194) + 0x520);
      uint64_t v198 = swift_retain();
      v197(v198);
      OUTLINED_FUNCTION_20();
      swift_weakInit();
      lazy protocol witness table accessor for type Published<Bool>.Publisher and conformance Published<A>.Publisher();
      uint64_t v199 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      (*(void (**)(id, uint64_t))(v12 + 8))(v1, v10);
      swift_beginAccess();
      v195[6] = v199;
      swift_release();
      goto LABEL_132;
    case 0x13u:
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsAppLaunchButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v200 = OUTLINED_FUNCTION_6_55();
      ConversationControlsAppLaunchButtonProvider.init(controlsManager:context:)(v200, (char)p_object);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      v201 = (void *)*MEMORY[0x1E4FB2998];
      OUTLINED_FUNCTION_61_2();
      *(void *)&long long v420 = v202 | 4;
      *((void *)&v420 + 1) = 0x80000001C379CF10;
      *(void *)&long long v421 = 2;
      *((void *)&v421 + 1) = v201;
      OUTLINED_FUNCTION_11_29();
      id v203 = v201;
      id v204 = OUTLINED_FUNCTION_88_0();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_65_1();
      swift_release();
      id v205 = OUTLINED_FUNCTION_10_39();
      id v206 = OUTLINED_FUNCTION_32_18(v205);
      ControlsButtonProvider.button.setter(v204, (uint64_t)v201);
      id v25 = v206;
      OUTLINED_FUNCTION_5_62();
      goto LABEL_131;
    case 0x14u:
      type metadata accessor for InCallControlButton();
      OUTLINED_FUNCTION_90_1();
      static Layout.ConversationControls.values.getter((uint64_t)&v420);
      uint64_t v207 = OUTLINED_FUNCTION_48_9();
      uint64_t v214 = OUTLINED_FUNCTION_85_1(v207, v208, countAndFlagsBits, (uint64_t)object, v213, v209, v210, v211, v212, (char)v427._object);
      OUTLINED_FUNCTION_5_62();
      v215 = *(void **)(v214 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
      if (v215)
      {
        v216 = self;
        uint64_t v217 = *MEMORY[0x1E4FB2950];
        id v218 = v215;
        id v219 = objc_msgSend(v216, sel_preferredFontForTextStyle_, v217);
        Class isa = UIFont.withTraits(_:)(0x8002u).super.isa;

        Class v221 = UIFont.caseSensitive()().super.isa;
        objc_msgSend(v218, sel_setFont_, v221);
      }
      v222 = v416;
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_73_2();
      v224 = *(void (**)(uint64_t))(v223 + 392);
      uint64_t v225 = swift_bridgeObjectRetain();
      v224(v225);
      uint64_t v226 = OUTLINED_FUNCTION_20();
      *(void *)(v226 + 16) = v222;
      v227 = v222;
      v228 = partial apply for closure #2 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:);
      goto LABEL_95;
    case 0x15u:
      type metadata accessor for ConversationControlsTrailingActionButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v14 = object;
      id v229 = OUTLINED_FUNCTION_6_55();
      ConversationControlsTrailingActionButtonProvider.init(controlsManager:context:)(v229, (char)p_object);
      id v230 = objc_msgSend(self, sel_systemGreenColor);
      OUTLINED_FUNCTION_37_9(v230);
      swift_retain();
      int v231 = static Platform.current.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      if (v231 == 1) {
        char v232 = 24;
      }
      else {
        char v232 = 23;
      }
      SymbolImageDescribers.ConversationControls.symbolImageDescription.getter(v232, (uint64_t)&v420);
      static UIImage.symbolImage(for:)((uint64_t)&v420);
      outlined release of SymbolImageDescription((uint64_t)&v420);
      OUTLINED_FUNCTION_65_1();
      swift_release();
      swift_retain();
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      swift_release();
      id v233 = OUTLINED_FUNCTION_10_39();
      OUTLINED_FUNCTION_32_18(v233);
      OUTLINED_FUNCTION_17_27();
      OUTLINED_FUNCTION_5_62();
      v234 = sel_lagunaPullButtonTapped;
      goto LABEL_60;
    case 0x16u:
      uint64_t v235 = swift_bridgeObjectRelease();
      v236 = v416;
      uint64_t v237 = (uint64_t)v416;
      (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v416) + 0x6F8))(v235);
      OUTLINED_FUNCTION_89();
      objc_allocWithZone((Class)type metadata accessor for PushToTalkLeavePillButton());
      uint64_t v151 = PushToTalkLeavePillButton.init(viewModel:)(v237);
      objc_msgSend(v151, sel_addTarget_action_forControlEvents_, v236, sel_pttLeaveButtonTappedWithButton_, 64);
      goto LABEL_46;
    case 0x17u:
      uint64_t v238 = swift_bridgeObjectRelease();
      uint64_t v239 = (uint64_t)v416;
      (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v416) + 0x6F8))(v238);
      OUTLINED_FUNCTION_89();
      objc_allocWithZone((Class)type metadata accessor for PushToTalkTalkPillButton());
      uint64_t v151 = PushToTalkTalkPillButton.init(viewModel:)(v239);
LABEL_46:
      uint64_t v152 = v414;
      uint64_t v153 = (uint64_t)v415;
      goto LABEL_88;
    case 0x18u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v240 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v240);
      OUTLINED_FUNCTION_8_37();
      id v241 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v241);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_avLessContinueButtonTappedWithButton_;
      goto LABEL_130;
    case 0x19u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v242 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v242);
      OUTLINED_FUNCTION_8_37();
      id v243 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v243);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_leaveButtonTappedWithButton_;
      goto LABEL_130;
    case 0x1Au:
      type metadata accessor for ConversationControlsTrailingActionButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v14 = object;
      id v229 = OUTLINED_FUNCTION_6_55();
      ConversationControlsTrailingActionButtonProvider.init(controlsManager:context:)(v229, (char)p_object);
      id v244 = objc_msgSend(self, sel_systemGreenColor);
      OUTLINED_FUNCTION_37_9(v244);
      swift_retain();
      int v245 = static Platform.current.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      if (v245 == 1) {
        char v246 = 24;
      }
      else {
        char v246 = 23;
      }
      SymbolImageDescribers.ConversationControls.symbolImageDescription.getter(v246, (uint64_t)&v420);
      static UIImage.symbolImage(for:)((uint64_t)&v420);
      outlined release of SymbolImageDescription((uint64_t)&v420);
      OUTLINED_FUNCTION_65_1();
      swift_release();
      swift_retain();
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      swift_release();
      id v247 = OUTLINED_FUNCTION_10_39();
      OUTLINED_FUNCTION_32_18(v247);
      OUTLINED_FUNCTION_17_27();
      OUTLINED_FUNCTION_5_62();
      v234 = sel_continueHandoffButtonTapped;
      goto LABEL_60;
    case 0x1Bu:
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = 29;
      type metadata accessor for ConversationControlsPrimaryActionButtonProvider();
      OUTLINED_FUNCTION_39_10();
      OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_41_9();
      v255 = (void *)OUTLINED_FUNCTION_44_8(v248, v249, MEMORY[0x1E4FBC860], v250, v251, v252, v253, v254, (char)v427._object, SBYTE1(v427._object), SBYTE2(v427._object), v410);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      id v256 = static UIColor.close.getter();
      ControlsButtonProvider.backgroundStyle.setter(v256, 0, 64);
      OUTLINED_FUNCTION_18();
      id v257 = static ConversationControlsButtonFactory.makeButton(frame:provider:)((uint64_t)v255);
      id v258 = OUTLINED_FUNCTION_32_18(v257);
      ControlsButtonProvider.button.setter(v255, v3);
      OUTLINED_FUNCTION_5_62();
      id v259 = v258;
      objc_msgSend(v259, sel_addTarget_action_forControlEvents_, v1, sel_dismissTappedWithButton_, 64);

      goto LABEL_132;
    case 0x1Cu:
      type metadata accessor for ConversationControlsTrailingActionButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v260 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_74_0(v260);
      v261 = self;
      OUTLINED_FUNCTION_28_14(objc_msgSend(v261, sel_systemWhiteColor));
      swift_retain();
      ControlsButtonProvider.foregroundColor.setter(objc_msgSend(v261, sel_systemBlackColor));
      swift_release();
      swift_retain();
      OUTLINED_FUNCTION_70_0();
      swift_release();
      id v262 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v262);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_shareNameAndPhotoTappedWithButton_;
      goto LABEL_130;
    case 0x1Du:
      type metadata accessor for ConversationControlsTrailingActionButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v263 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_74_0(v263);
      v264 = self;
      OUTLINED_FUNCTION_28_14(objc_msgSend(v264, sel_systemWhiteColor));
      swift_retain();
      ControlsButtonProvider.foregroundColor.setter(objc_msgSend(v264, sel_systemBlackColor));
      swift_release();
      swift_retain();
      OUTLINED_FUNCTION_70_0();
      swift_release();
      id v265 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v265);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_shareNameTappedWithButton_;
      goto LABEL_130;
    case 0x1Eu:
      type metadata accessor for ConversationControlsTrailingActionButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v266 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_74_0(v266);
      v267 = self;
      OUTLINED_FUNCTION_28_14(objc_msgSend(v267, sel_systemWhiteColor));
      swift_retain();
      ControlsButtonProvider.foregroundColor.setter(objc_msgSend(v267, sel_systemBlackColor));
      swift_release();
      swift_retain();
      OUTLINED_FUNCTION_70_0();
      swift_release();
      id v268 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v268);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_acceptNameTappedWithButton_;
      goto LABEL_130;
    case 0x1Fu:
      type metadata accessor for ConversationControlsTrailingActionButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v269 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_74_0(v269);
      v270 = self;
      OUTLINED_FUNCTION_28_14(objc_msgSend(v270, sel_systemWhiteColor));
      swift_retain();
      ControlsButtonProvider.foregroundColor.setter(objc_msgSend(v270, sel_systemBlackColor));
      swift_release();
      swift_retain();
      OUTLINED_FUNCTION_70_0();
      swift_release();
      id v271 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v271);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_cancelScreenShareRequestTappedWithButton_;
      goto LABEL_130;
    case 0x20u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v272 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v272);
      OUTLINED_FUNCTION_8_37();
      v273 = self;
      swift_retain();
      ControlsButtonProvider.foregroundColor.setter(objc_msgSend(v273, sel_whiteColor));
      swift_release();
      swift_retain();
      OUTLINED_FUNCTION_28_14(objc_msgSend(v273, sel_systemIndigoColor));
      swift_release();
      id v274 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v274);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_acceptScreenShareRequestTappedWithButton_;
      goto LABEL_130;
    case 0x21u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v229 = OUTLINED_FUNCTION_6_55();
      ConversationControlsDialogButtonProvider.init(controlsManager:context:)(v229, (char)p_object);
      swift_retain();
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      swift_release();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      swift_retain();
      id v275 = static UIColor.denyScreenShareBackground.getter();
      OUTLINED_FUNCTION_37_9(v275);
      swift_release();
      id v276 = OUTLINED_FUNCTION_10_39();
      OUTLINED_FUNCTION_32_18(v276);
      OUTLINED_FUNCTION_17_27();
      OUTLINED_FUNCTION_5_62();
      v234 = sel_declineScreenShareRequestTappedWithButton_;
LABEL_60:
      id v25 = v14;
      objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v229, v234, 64);
      goto LABEL_131;
    case 0x22u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v277 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v277);
      swift_retain();
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      swift_release();
      v278 = self;
      swift_retain();
      ControlsButtonProvider.foregroundColor.setter(objc_msgSend(v278, sel_systemRedColor));
      swift_release();
      id v279 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v279);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_acceptRemoteControlRequestTappedWithButton_;
      goto LABEL_130;
    case 0x23u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v280 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v280);
      OUTLINED_FUNCTION_8_37();
      id v281 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v281);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_declineRemoteControlRequestTappedWithButton_;
      goto LABEL_130;
    case 0x24u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      uint64_t v282 = (uint64_t)object;
      id v283 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v283);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v284 = countAndFlagsBits;
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      swift_release();
      if (object) {
        v285 = (char *)v284;
      }
      else {
        v285 = 0;
      }
      v416 = v285;
      if (!object) {
        uint64_t v282 = 0xE000000000000000;
      }
      v422 = 0;
      long long v420 = 0u;
      long long v421 = 0u;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, ButtonStyle)>);
      uint64_t v286 = swift_allocObject();
      *(_OWORD *)(v286 + 16) = xmmword_1C3769620;
      *(void *)(v286 + 32) = 0;
      v287 = self;
      id v288 = objc_msgSend(v287, sel_systemDarkGrayColor);
      id v289 = objc_msgSend(v287, sel_whiteColor);
      id v290 = objc_msgSend(v287, sel_systemDarkGrayColor);
      id v291 = objc_msgSend(v287, sel_whiteColor);
      *(void *)(v286 + 40) = v288;
      *(void *)(v286 + 48) = 0;
      *(unsigned char *)(v286 + 56) = 64;
      *(void *)(v286 + 64) = v289;
      *(void *)(v286 + 72) = v290;
      *(void *)(v286 + 80) = 0;
      *(unsigned char *)(v286 + 88) = 64;
      *(void *)(v286 + 96) = v291;
      type metadata accessor for UIControlState(0);
      lazy protocol witness table accessor for type UIControlState and conformance UIControlState((unint64_t *)&lazy protocol witness table cache variable for type UIControlState and conformance UIControlState, type metadata accessor for UIControlState);
      uint64_t v292 = Dictionary.init(dictionaryLiteral:)();
      objc_allocWithZone((Class)type metadata accessor for PillButton());
      v293 = PillButton.init(title:symbol:stateConfiguration:context:)((uint64_t)v416, v282, (uint64_t)&v420, v292, 0);
      OUTLINED_FUNCTION_5_62();
      objc_msgSend(v293, sel_addTarget_action_forControlEvents_, v1, sel_cancelRemoteControlRequestTappedWithButton_, 64);
      swift_release();
      goto LABEL_133;
    case 0x25u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v294 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v294);
      swift_retain();
      ControlsButtonProvider.title.setter(countAndFlagsBits, (uint64_t)object);
      swift_release();
      v295 = self;
      swift_retain();
      OUTLINED_FUNCTION_28_14(objc_msgSend(v295, sel_systemRedColor));
      swift_release();
      id v296 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v296);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_endRemoteControlSessionTappedWithButton_;
      goto LABEL_130;
    case 0x26u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v297 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v297);
      OUTLINED_FUNCTION_8_37();
      id v298 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v298);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_learnMoreNotTrustedContactTappedWithButton_;
      goto LABEL_130;
    case 0x27u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v299 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v299);
      OUTLINED_FUNCTION_8_37();
      id v300 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v300);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_previewEnhancedEmergencyRequestTappedWithButton_;
      goto LABEL_130;
    case 0x28u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v301 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v301);
      OUTLINED_FUNCTION_8_37();
      id v302 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v302);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_choosePhotoEnhancedEmergencyRequestTappedWithButton_;
      goto LABEL_130;
    case 0x29u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v303 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v303);
      OUTLINED_FUNCTION_8_37();
      id v304 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v304);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_dismissEnhancedEmergencyRequestTappedWithButton_;
      goto LABEL_130;
    case 0x2Au:
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = 7;
      type metadata accessor for ConversationControlsPrimaryActionButtonProvider();
      OUTLINED_FUNCTION_39_10();
      OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_41_9();
      OUTLINED_FUNCTION_44_8(v305, v306, MEMORY[0x1E4FBC860], v307, v308, v309, v310, v311, (char)v427._object, SBYTE1(v427._object), SBYTE2(v427._object), v410);
      OUTLINED_FUNCTION_63_2();
      id v312 = objc_msgSend(self, sel_systemGreenColor);
      OUTLINED_FUNCTION_28_14(v312);
      id v313 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v313);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_callAgainButtonTappedWithButton_;
      goto LABEL_130;
    case 0x2Bu:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v314 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v314);
      OUTLINED_FUNCTION_8_37();
      id v315 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v315);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_collaborateButtonTapped;
      goto LABEL_130;
    case 0x2Cu:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v316 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v316);
      OUTLINED_FUNCTION_8_37();
      id v317 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v317);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_notNowButtonTappedWithButton_;
      goto LABEL_130;
    case 0x2Du:
    case 0x2Eu:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v29 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v29);
      OUTLINED_FUNCTION_8_37();
      id v30 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v30);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_acceptScreenShare;
      goto LABEL_130;
    case 0x2Fu:
    case 0x30u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v32 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v32);
      OUTLINED_FUNCTION_8_37();
      id v33 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v33);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_declineScreenShare;
      goto LABEL_130;
    case 0x31u:
      type metadata accessor for ConversationControlsDialogButtonProvider();
      OUTLINED_FUNCTION_7_54();
      id v318 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_13_34(v318);
      OUTLINED_FUNCTION_8_37();
      id v319 = OUTLINED_FUNCTION_0_56();
      OUTLINED_FUNCTION_9_40(v319);
      OUTLINED_FUNCTION_4_61();
      OUTLINED_FUNCTION_5_62();
      uint64_t v31 = sel_okAndDismissButtonTappedWithButton_;
      goto LABEL_130;
    case 0x32u:
      BOOL v320 = object == 0;
      uint64_t v321 = (uint64_t)object;
      if (object) {
        uint64_t v322 = countAndFlagsBits;
      }
      else {
        uint64_t v322 = 0;
      }
      if (v320) {
        uint64_t v323 = 0xE000000000000000;
      }
      else {
        uint64_t v323 = v321;
      }
      v422 = 0;
      long long v420 = 0u;
      long long v421 = 0u;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIControlState, ButtonStyle)>);
      uint64_t v324 = swift_allocObject();
      *(_OWORD *)(v324 + 16) = xmmword_1C3769620;
      *(void *)(v324 + 32) = 0;
      v325 = self;
      id v326 = objc_msgSend(v325, sel_systemDarkGrayColor);
      id v327 = objc_msgSend(v325, sel_whiteColor);
      id v328 = objc_msgSend(v325, sel_systemDarkGrayColor);
      id v329 = objc_msgSend(v325, sel_whiteColor);
      *(void *)(v324 + 40) = v326;
      *(void *)(v324 + 48) = 0;
      *(unsigned char *)(v324 + 56) = 64;
      *(void *)(v324 + 64) = v327;
      *(void *)(v324 + 72) = v328;
      *(void *)(v324 + 80) = 0;
      *(unsigned char *)(v324 + 88) = 64;
      *(void *)(v324 + 96) = v329;
      type metadata accessor for UIControlState(0);
      lazy protocol witness table accessor for type UIControlState and conformance UIControlState((unint64_t *)&lazy protocol witness table cache variable for type UIControlState and conformance UIControlState, type metadata accessor for UIControlState);
      OUTLINED_FUNCTION_163();
      uint64_t v330 = Dictionary.init(dictionaryLiteral:)();
      objc_allocWithZone((Class)type metadata accessor for PillButton());
      v331 = PillButton.init(title:symbol:stateConfiguration:context:)(v322, v323, (uint64_t)&v420, v330, 0);
      OUTLINED_FUNCTION_5_62();
      objc_msgSend(v331, sel_addTarget_action_forControlEvents_, v416, sel_swapButtonTappedWithButton_, 0x2000);
      goto LABEL_133;
    case 0x33u:
      uint64_t v332 = (uint64_t)v415;
      swift_bridgeObjectRelease();
      id v333 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      OUTLINED_FUNCTION_19_1(0x656E696C636544, 0xE700000000000000);

      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = 34;
      if (one-time initialization token for greenTea3PDeclineButtonBanner != -1) {
        swift_once();
      }
      id v334 = objc_allocWithZone((Class)type metadata accessor for PillButton());
      swift_bridgeObjectRetain();
      uint64_t v151 = OUTLINED_FUNCTION_40_9();
      objc_msgSend(v151, sel_addTarget_action_forControlEvents_, v416, sel_rejectCallButtonTappedWithButton_, 64);
      uint64_t v152 = v414;
      uint64_t v153 = v332;
LABEL_88:
      outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(v152, v153, v151);
      goto LABEL_133;
    case 0x34u:
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsButtonProvider();
      uint64_t v335 = OUTLINED_FUNCTION_7_54();
      OUTLINED_FUNCTION_45_6(v335);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      v336 = (void *)*MEMORY[0x1E4FB2908];
      *(void *)&long long v420 = 0x6B72616D78;
      *((void *)&v420 + 1) = 0xE500000000000000;
      *(void *)&long long v421 = v10;
      *((void *)&v421 + 1) = v336;
      id v337 = OUTLINED_FUNCTION_51_4();
      swift_retain();
      id v338 = v336;
      OUTLINED_FUNCTION_88_0();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_26();
      uint64_t v339 = OUTLINED_FUNCTION_38_8();
      v340(v339);
      swift_release();
      v341 = self;
      swift_retain();
      id v342 = objc_msgSend(v341, sel_systemRedColor);
      OUTLINED_FUNCTION_3_26();
      (*(void (**)(void))(v343 + 256))();
      swift_release();
      OUTLINED_FUNCTION_3_26();
      double v344 = OUTLINED_FUNCTION_20_23();
      v346 = (void *)v345(v344);
      v347 = sel_endGreenTea3PCallButtonTappedWithButton_;
      goto LABEL_97;
    case 0x35u:
      swift_bridgeObjectRelease();
      type metadata accessor for InCallControlButton();
      OUTLINED_FUNCTION_90_1();
      id v348 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_61_2();
      OUTLINED_FUNCTION_13_22();
      v349._object = (void *)0x80000001C379E210;
      v350.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
      v350.value._object = (void *)0xEF74694B6E6F6974;
      v351._uint64_t countAndFlagsBits = 0;
      v351._object = (void *)0xE000000000000000;
      v427._uint64_t countAndFlagsBits = 0;
      Swift::String v352 = NSLocalizedString(_:tableName:bundle:value:comment:)(v349, v350, (NSBundle)v348, v351, v427);

      static Layout.ConversationControls.values.getter((uint64_t)&v420);
      uint64_t v353 = OUTLINED_FUNCTION_48_9();
      uint64_t v360 = OUTLINED_FUNCTION_85_1(v353, v354, v352._countAndFlagsBits, (uint64_t)v352._object, v359, v355, v356, v357, v358, v411);
      OUTLINED_FUNCTION_5_62();
      v361 = *(void **)(v360 + OBJC_IVAR____TtC15ConversationKit19InCallControlButton_label);
      if (v361)
      {
        v362 = self;
        uint64_t v363 = *MEMORY[0x1E4FB2950];
        id v364 = v361;
        id v365 = objc_msgSend(v362, sel_preferredFontForTextStyle_, v363);
        Class v366 = UIFont.withTraits(_:)(0x8002u).super.isa;

        Class v367 = UIFont.caseSensitive()().super.isa;
        objc_msgSend(v364, sel_setFont_, v367);
      }
      v368 = v416;
      if (one-time initialization token for greenTea3PResumeButton != -1) {
        swift_once();
      }
      OUTLINED_FUNCTION_73_2();
      v370 = *(void (**)(uint64_t))(v369 + 392);
      uint64_t v371 = swift_bridgeObjectRetain();
      v370(v371);
      uint64_t v226 = OUTLINED_FUNCTION_20();
      *(void *)(v226 + 16) = v368;
      v372 = v368;
      v228 = partial apply for closure #7 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:);
LABEL_95:
      UIControl.addAction(for:handler:)(64, (uint64_t)v228, v226);
      swift_release();
      goto LABEL_133;
    case 0x36u:
      swift_bridgeObjectRelease();
      type metadata accessor for ConversationControlsButtonProvider();
      uint64_t v373 = OUTLINED_FUNCTION_7_54();
      OUTLINED_FUNCTION_45_6(v373);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      v374 = (void *)*MEMORY[0x1E4FB2908];
      *(void *)&long long v420 = 0xD000000000000013;
      *((void *)&v420 + 1) = 0x80000001C379E1F0;
      *(void *)&long long v421 = v10;
      *((void *)&v421 + 1) = v374;
      id v337 = OUTLINED_FUNCTION_51_4();
      swift_retain();
      id v375 = v374;
      static UIImage.symbolImage(for:)((uint64_t)&v420);

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_26();
      uint64_t v376 = OUTLINED_FUNCTION_38_8();
      v377(v376);
      swift_release();
      OUTLINED_FUNCTION_3_26();
      double v378 = OUTLINED_FUNCTION_20_23();
      v346 = (void *)v379(v378);
      v347 = sel_swapButtonTappedWithButton_;
LABEL_97:
      outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(v414, (uint64_t)v415, v346);
      id v25 = v346;
      objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v337, v347, 64);
      goto LABEL_131;
    default:
      *((void *)&v421 + 1) = &type metadata for SymbolImageDescribers.ConversationControls;
      v422 = &protocol witness table for SymbolImageDescribers.ConversationControls;
      LOBYTE(v420) = 8;
      type metadata accessor for ConversationControlsPrimaryActionButtonProvider();
      OUTLINED_FUNCTION_39_10();
      id v34 = OUTLINED_FUNCTION_6_55();
      OUTLINED_FUNCTION_24_19(v34, v35, MEMORY[0x1E4FBC860], v36, v37, v38, v39, v40, v5 & 1, 0, (v5 & 2) != 0, 0);
      id v41 = objc_msgSend(self, sel_systemRedColor);
      OUTLINED_FUNCTION_37_9(v41);
      id v42 = OUTLINED_FUNCTION_10_39();
      OUTLINED_FUNCTION_32_18(v42);
      OUTLINED_FUNCTION_17_27();
      OUTLINED_FUNCTION_5_62();
      objc_msgSend(v14, sel_addTarget_action_forControlEvents_, v34, sel_leaveButtonTappedWithButton_, 0x2000);
      type metadata accessor for ConversationControlsButton();
      if (!swift_dynamicCastClass()) {
        goto LABEL_132;
      }
      uint64_t v43 = self;
      id v25 = v14;
      id v44 = objc_msgSend(v43, sel_conversationKit);
      OUTLINED_FUNCTION_61_2();
      OUTLINED_FUNCTION_13_22();
      uint64_t v46 = OUTLINED_FUNCTION_19_1(v45, 0x80000001C379E230);
      uint64_t v48 = v47;

      ConversationControlsButton.localizedName.setter(v46, v48);
      goto LABEL_131;
  }
}

float ConversationControlsAction.widthPriority.getter()
{
  return 749.0;
}

float ConversationControlsAction.ccrPriority.getter()
{
  type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_17_0();
  _s15ConversationKit0A14ControlsActionOWOcTm_0(v1, v0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload) {
    BOOL v4 = EnumCaseMultiPayload == 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 850.0;
  }
  _s15ConversationKit0A14ControlsActionOWOhTm_0(v0, (void (*)(void))type metadata accessor for ConversationControlsAction);
  return 750.0;
}

uint64_t static ConversationControlsAction.acceptAndDeclineCall(controlsManager:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return static ConversationControlsAction.rejectCall(controlsManager:)(a1, a2);
}

uint64_t static ConversationControlsAction.acceptCall(controlsManager:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return static ConversationControlsAction.rejectCall(controlsManager:)(a1, a2);
}

uint64_t *ConversationControlsAction.avLessLeaveConfirmationActions.unsafeMutableAddressor()
{
  if (one-time initialization token for avLessLeaveConfirmationActions != -1) {
    swift_once();
  }
  return &static ConversationControlsAction.avLessLeaveConfirmationActions;
}

uint64_t ControlsActionState.buttonEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t ControlsActionState.buttonEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ControlsActionState.buttonEnabled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ControlsActionState.stateEnabled.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t ControlsActionState.stateEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*ControlsActionState.stateEnabled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t default argument 0 of ControlsActionState.init(buttonEnabled:stateEnabled:)()
{
  return 1;
}

ConversationKit::ControlsActionState __swiftcall ControlsActionState.init(buttonEnabled:stateEnabled:)(Swift::Bool buttonEnabled, Swift::Bool stateEnabled)
{
  if (stateEnabled) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return (ConversationKit::ControlsActionState)(v2 & 0xFFFE | buttonEnabled);
}

uint64_t ShareMenuActionState.buttonEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t ShareMenuActionState.buttonEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ShareMenuActionState.buttonEnabled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ShareMenuActionState.screenSharingEnabled.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t ShareMenuActionState.screenSharingEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*ShareMenuActionState.screenSharingEnabled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ShareMenuActionState.screenSharingCountdownTime.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ShareMenuActionState.screenSharingCountdownTime.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*ShareMenuActionState.screenSharingCountdownTime.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ShareMenuActionState.joinedSharePlayActivity.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t ShareMenuActionState.joinedSharePlayActivity.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*ShareMenuActionState.joinedSharePlayActivity.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ShareMenuActionState.description.getter(__int16 a1, uint64_t a2, __int16 a3)
{
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000001C379E250;
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  if ((a1 & 0x100) != 0) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if ((a1 & 0x100) != 0) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x506572616873202CLL;
  v12._object = (void *)0xEF3A676E6979616CLL;
  String.append(_:)(v12);
  if ((a3 & 0x100) != 0) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if ((a3 & 0x100) != 0) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  return 0x3A64656C62616E65;
}

uint64_t static ShareMenuActionState.== infix(_:_:)(int a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, __int16 a6)
{
  uint64_t result = 0;
  unsigned int v8 = a1 ^ a4;
  if ((v8 & 1) == 0 && ((v8 >> 8) & 1) == 0)
  {
    if (a3)
    {
      if ((a6 & 1) == 0) {
        return OUTLINED_FUNCTION_1_3();
      }
    }
    else
    {
      uint64_t result = 0;
      if ((a6 & 1) != 0 || a2 != a5) {
        return result;
      }
    }
    return ((a3 & 0x100) == 0) ^ ((unsigned __int16)(a6 & 0x100) >> 8);
  }
  return result;
}

ConversationKit::ShareMenuActionState __swiftcall ShareMenuActionState.init()()
{
  BOOL v0 = 0;
  Swift::Int v1 = 0;
  __int16 v2 = 1;
  result.screenSharingCountdownTime.value = v1;
  result.buttonEnabled = v0;
  result.screenSharingEnabled = BYTE1(v0);
  *(_DWORD *)result.gap2 = *(_DWORD *)((char *)&v0 + 2);
  *(_WORD *)&result.gap2[4] = HIWORD(v0);
  *(_WORD *)&result.screenSharingCountdownTime.is_nil = v2;
  return result;
}

ConversationKit::ShareMenuActionState __swiftcall ShareMenuActionState.init(buttonEnabled:screenSharingEnabled:screenSharingCountdownTime:joinedSharePlayActivity:)(Swift::Bool buttonEnabled, Swift::Bool screenSharingEnabled, Swift::Int_optional screenSharingCountdownTime, Swift::Bool joinedSharePlayActivity)
{
  Swift::Int value = screenSharingCountdownTime.value;
  if (screenSharingEnabled) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = v5 & 0xFFFFFFFE | buttonEnabled;
  if (joinedSharePlayActivity) {
    LOWORD(screenSharingCountdownTime.value) = 256;
  }
  else {
    LOWORD(screenSharingCountdownTime.value) = 0;
  }
  __int16 v7 = screenSharingCountdownTime.value & 0xFFFE | screenSharingCountdownTime.is_nil;
  BOOL v8 = v6;
  Swift::Int v9 = value;
  result.screenSharingCountdownTime.Swift::Int value = v9;
  result.buttonEnabled = v8;
  result.screenSharingEnabled = BYTE1(v8);
  *(_DWORD *)result.gap2 = *(_DWORD *)((char *)&v8 + 2);
  *(_WORD *)&result.gap2[4] = HIWORD(v8);
  *(_WORD *)&result.screenSharingCountdownTime.is_nil = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShareMenuActionState(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  __int16 v3 = a1[16];
  int v4 = a1[17];
  if (a1[1]) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  int v6 = v5 | *a1;
  if (v4) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  __int16 v8 = v7 | v3;
  if (a2[1]) {
    int v9 = 256;
  }
  else {
    int v9 = 0;
  }
  int v10 = v9 | *a2;
  if (a2[17]) {
    __int16 v11 = 256;
  }
  else {
    __int16 v11 = 0;
  }
  return static ShareMenuActionState.== infix(_:_:)(v6, v2, v8, v10, *((void *)a2 + 1), v11 | a2[16]);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShareMenuActionState(uint64_t a1, uint64_t a2)
{
  if (v2[1]) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  if (v2[17]) {
    __int16 v4 = 256;
  }
  else {
    __int16 v4 = 0;
  }
  return ShareMenuActionState.description.getter(v3 | *v2, a2, v4 | v2[16]);
}

uint64_t static ConversationControlsAction.ButtonOptions.prefersPill.getter()
{
  return 1;
}

uint64_t static ConversationControlsAction.ButtonOptions.prefersMediumSize.getter()
{
  return 2;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance ConversationControlsAction.ButtonOptions(uint64_t *a1)
{
  return specialized SetAlgebra.isSuperset(of:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance ConversationControlsAction.ButtonOptions@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized OptionSet.intersection(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ConversationControlsAction.ButtonOptions@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized OptionSet.symmetricDifference(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance ConversationControlsAction.ButtonOptions(void *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance ConversationControlsAction.ButtonOptions@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized OptionSet<>.remove(_:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance ConversationControlsAction.ButtonOptions@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized OptionSet<>.update(with:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance ConversationControlsAction.ButtonOptions(uint64_t *a1)
{
  return specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance ConversationControlsAction.ButtonOptions(uint64_t *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ConversationControlsAction.ButtonOptions(uint64_t *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance ConversationControlsAction.ButtonOptions@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized SetAlgebra.subtracting(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ConversationControlsAction.ButtonOptions(uint64_t *a1)
{
  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL specialized SetAlgebra.isSubset(of:)(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ConversationControlsAction.ButtonOptions(uint64_t *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL specialized SetAlgebra.isSuperset(of:)(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance ConversationControlsAction.ButtonOptions(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

uint64_t ConversationControlsAction.CallButtonStyle.init(_:conversation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 160);
  __int16 v7 = (void *)v6(ObjectType, a2);
  unsigned int v8 = objc_msgSend(v7, sel_isFaceTimeProvider);

  if (v8)
  {
    outlined init with copy of Conversation?(a3, (uint64_t)&v20);
    if (v21)
    {
      outlined init with take of Notice(&v20, (uint64_t)v22);
      __swift_project_boxed_opaque_existential_1(v22, v22[3]);
      uint64_t v9 = OUTLINED_FUNCTION_163();
      uint64_t v11 = v10(v9);
      swift_unknownObjectRelease();
      BOOL v12 = v11 == 2;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a3, &demangling cache variable for type metadata for Conversation?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      return v12;
    }
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v20, &demangling cache variable for type metadata for Conversation?);
  }
  uint64_t v13 = OUTLINED_FUNCTION_62_2();
  unint64_t v14 = (void *)((uint64_t (*)(uint64_t))v6)(v13);
  unsigned int v15 = objc_msgSend(v14, sel_isFaceTimeProvider);

  if (v15 && ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 128))(ObjectType, a2) & 1) != 0)
  {
    swift_unknownObjectRelease();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a3, &demangling cache variable for type metadata for Conversation?);
    return 1;
  }
  else
  {
    uint64_t v16 = OUTLINED_FUNCTION_62_2();
    uint64_t v17 = (void *)((uint64_t (*)(uint64_t))v6)(v16);
    unsigned int v18 = objc_msgSend(v17, sel_isSystemProvider);
    swift_unknownObjectRelease();

    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a3, &demangling cache variable for type metadata for Conversation?);
    if (v18) {
      return 0;
    }
    else {
      return 2;
    }
  }
}

void ConversationControlsAction.CallButtonStyle.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static ConversationControlsAction.CallButtonStyle.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int ConversationControlsAction.CallButtonStyle.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationControlsAction.CallButtonStyle()
{
  return ConversationControlsAction.CallButtonStyle.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ConversationControlsAction.CallButtonStyle(uint64_t a1)
{
  ConversationControlsAction.CallButtonStyle.hash(into:)(a1, *v1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConversationControlsAction.CallButtonStyle(char *a1, char *a2)
{
  return static ConversationControlsAction.CallButtonStyle.== infix(_:_:)(*a1, *a2);
}

BOOL static ConversationControlsAction.Location.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ConversationControlsAction.Location.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int ConversationControlsAction.Location.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConversationControlsAction.Location(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ConversationControlsAction.Location.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationControlsAction.Location()
{
  return ConversationControlsAction.Location.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ConversationControlsAction.Location(uint64_t a1)
{
  ConversationControlsAction.Location.hash(into:)(a1, *v1);
}

uint64_t one-time initialization function for avLessLeaveConfirmationActions()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationControlsAction>);
  type metadata accessor for ConversationControlsAction();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C37696D0;
  swift_storeEnumTagMultiPayload();
  uint64_t result = swift_storeEnumTagMultiPayload();
  static ConversationControlsAction.avLessLeaveConfirmationActions = v0;
  return result;
}

uint64_t static ConversationControlsAction.avLessLeaveConfirmationActions.getter()
{
  if (one-time initialization token for avLessLeaveConfirmationActions != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

Swift::tuple_String_optional_String __swiftcall ConversationControlsAction.displayStrings()()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_64();
  _s15ConversationKit0A14ControlsActionOWOcTm_0(v0, (uint64_t)v1);
  __int16 v3 = (void *)0xE400000000000000;
  unint64_t v4 = 1852403530;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 7u:
    case 0xAu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x16u:
    case 0x17u:
    case 0x33u:
    case 0x35u:
    case 0x37u:
    case 0x38u:
      goto LABEL_46;
    case 2u:
    case 3u:
      _s15ConversationKit0A14ControlsActionOWOhTm_0((uint64_t)v1, (void (*)(void))type metadata accessor for ConversationControlsAction);
      OUTLINED_FUNCTION_36_11();
      goto LABEL_46;
    case 4u:
      __int16 v3 = (void *)0xE700000000000000;
      unint64_t v4 = 0x66666F646E6148;
      OUTLINED_FUNCTION_34_11();
      break;
    case 5u:
    case 6u:
      OUTLINED_FUNCTION_36_11();
      goto LABEL_46;
    case 8u:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_36_11();
      goto LABEL_46;
    case 9u:
      break;
    case 0xBu:
      unint64_t v4 = 0x6C65636E6143;
      __int16 v3 = (void *)0xE600000000000000;
      break;
    case 0x10u:
      OUTLINED_FUNCTION_34_11();
      unint64_t v4 = 2003134806;
      break;
    case 0x11u:
      OUTLINED_FUNCTION_34_11();
      unint64_t v4 = 1852141647;
      break;
    case 0x12u:
      __int16 v3 = (void *)0xE500000000000000;
      unint64_t v4 = 0x7472617453;
      break;
    case 0x13u:
    case 0x34u:
    case 0x36u:
      OUTLINED_FUNCTION_36_11();
      goto LABEL_46;
    case 0x14u:
      __int16 v3 = (void *)0xE600000000000000;
      unint64_t v4 = 0x776569766552;
      break;
    case 0x15u:
      unint64_t v4 = 0x686374697753;
      __int16 v3 = (void *)0xE600000000000000;
      break;
    case 0x18u:
      OUTLINED_FUNCTION_60_3();
      __int16 v3 = (void *)0xE800000000000000;
      unint64_t v4 = 0x45554E49544E4F43;
      break;
    case 0x19u:
      unint64_t v4 = 0x657661654CLL;
      OUTLINED_FUNCTION_47_7();
      __int16 v3 = (void *)0xE500000000000000;
      break;
    case 0x1Au:
      unint64_t v4 = 0x686374697753;
      OUTLINED_FUNCTION_35_9();
      goto LABEL_31;
    case 0x1Bu:
      OUTLINED_FUNCTION_35_9();
      unint64_t v4 = v7 - 4;
      OUTLINED_FUNCTION_81();
      break;
    case 0x1Cu:
      OUTLINED_FUNCTION_35_9();
      unint64_t v4 = v8 + 20;
      OUTLINED_FUNCTION_81();
      goto LABEL_42;
    case 0x1Du:
      OUTLINED_FUNCTION_35_9();
      unint64_t v4 = v9 + 20;
      OUTLINED_FUNCTION_81();
      break;
    case 0x1Eu:
      OUTLINED_FUNCTION_46_8();
      unint64_t v4 = v10 + 23;
      OUTLINED_FUNCTION_81();
      goto LABEL_42;
    case 0x1Fu:
    case 0x30u:
      OUTLINED_FUNCTION_35_9();
      unint64_t v4 = v6 | 1;
      OUTLINED_FUNCTION_81();
      goto LABEL_42;
    case 0x20u:
    case 0x2Du:
      OUTLINED_FUNCTION_46_8();
      unint64_t v4 = v5 - 1;
      OUTLINED_FUNCTION_81();
      goto LABEL_42;
    case 0x21u:
    case 0x22u:
    case 0x2Fu:
      unint64_t v4 = 0xD000000000000014;
      OUTLINED_FUNCTION_81();
      goto LABEL_42;
    case 0x23u:
      unint64_t v4 = 0xD000000000000019;
      OUTLINED_FUNCTION_81();
      goto LABEL_42;
    case 0x24u:
      unint64_t v4 = 0x6C65636E6143;
LABEL_31:
      __int16 v3 = (void *)0xE600000000000000;
      break;
    case 0x25u:
      unint64_t v4 = 6581829;
      OUTLINED_FUNCTION_46_8();
      OUTLINED_FUNCTION_60_3();
      __int16 v3 = (void *)0xE300000000000000;
      break;
    case 0x26u:
      OUTLINED_FUNCTION_35_9();
      __int16 v3 = (void *)0xEA00000000006572;
      OUTLINED_FUNCTION_60_3();
      unint64_t v4 = 0x6F4D206E7261654CLL;
      break;
    case 0x27u:
      OUTLINED_FUNCTION_77_1();
      __int16 v3 = (void *)0xE700000000000000;
      unint64_t v4 = 0x57454956455250;
      break;
    case 0x28u:
      OUTLINED_FUNCTION_35_9();
      __int16 v3 = (void *)0xE600000000000000;
      unint64_t v4 = 0x45534F4F4843;
      break;
    case 0x29u:
      OUTLINED_FUNCTION_76_1();
      OUTLINED_FUNCTION_77_1();
      __int16 v3 = (void *)0xE700000000000000;
      break;
    case 0x2Au:
      __int16 v3 = (void *)0xEA00000000004E49;
      unint64_t v4 = 0x4147415F4C4C4143;
      break;
    case 0x2Bu:
      OUTLINED_FUNCTION_47_7();
      OUTLINED_FUNCTION_60_3();
      __int16 v3 = (void *)0xEB00000000455441;
      unint64_t v4 = 0x524F42414C4C4F43;
      break;
    case 0x2Cu:
      OUTLINED_FUNCTION_76_1();
      __int16 v3 = (void *)0xE700000000000000;
      break;
    case 0x2Eu:
      OUTLINED_FUNCTION_47_7();
      unint64_t v4 = v11 - 1;
      OUTLINED_FUNCTION_81();
LABEL_42:
      OUTLINED_FUNCTION_60_3();
      break;
    case 0x31u:
      unint64_t v4 = 19279;
      __int16 v3 = (void *)0xE200000000000000;
      break;
    case 0x32u:
      __int16 v3 = (void *)0xEE004C4C41435F44;
      unint64_t v4 = 0x4C45485F50415753;
      break;
    default:
      if (*v1) {
        unint64_t v4 = 6581829;
      }
      else {
        unint64_t v4 = 0x657661654CLL;
      }
      if (*v1) {
        __int16 v3 = (void *)0xE300000000000000;
      }
      else {
        __int16 v3 = (void *)0xE500000000000000;
      }
      break;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v12 = unk_1EA37DFA0;
  uint64_t v13 = (void *)qword_1EA37DFA8;
  id v14 = (id)static LocalizationSource.conversationKit;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_22();
  v15._uint64_t countAndFlagsBits = v4;
  v15._object = v3;
  v16.value._uint64_t countAndFlagsBits = v12;
  v16.value._object = v13;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  uint64_t v18 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, *(Swift::String *)(&v23 - 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_46:
  OUTLINED_FUNCTION_28();
  result._1._object = v22;
  result._1._uint64_t countAndFlagsBits = v21;
  result._0.value._object = v20;
  result._0.value._uint64_t countAndFlagsBits = v19;
  return result;
}

void closure #1 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong + 16;
    swift_beginAccess();
    unint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
    swift_release();
    if (v4)
    {
      objc_msgSend(v4, sel_setEnabled_, v1);
    }
  }
}

uint64_t closure #2 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x990))();
}

void *closure #6 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  Swift::tuple_String_optional_String result = (void *)MEMORY[0x1C8776240](v4);
  if (result)
  {
    uint64_t v6 = result;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *result) + 0x270))();

    self;
    uint64_t v7 = swift_dynamicCastObjCClass();
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t))(a2 + 184);
      if (v10(ObjectType, a2) != 2)
      {
        if (v10(ObjectType, a2) != 1) {
          return (void *)swift_unknownObjectRelease();
        }
        swift_beginAccess();
        uint64_t v14 = MEMORY[0x1C8776240](v4);
        if (!v14) {
          return (void *)swift_unknownObjectRelease();
        }
        uint64_t v12 = (char *)v14;
        uint64_t v13 = &selRef_endActiveAndAnswerCall_;
        goto LABEL_9;
      }
      swift_beginAccess();
      uint64_t v11 = MEMORY[0x1C8776240](v4);
      if (v11)
      {
        uint64_t v12 = (char *)v11;
        uint64_t v13 = &selRef_endHeldAndAnswerCall_;
LABEL_9:
        id v15 = *(id *)&v12[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_callCenter];

        objc_msgSend(v15, *v13, v8);
      }
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void static ConversationControlsAction.== infix(_:_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v47 = v2;
  uint64_t v4 = v3;
  type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_36();
  uint64_t v43 = (uint64_t *)(v6 - v7);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v8);
  uint64_t v46 = (uint64_t)&v42 - v9;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_55_5();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_78_3();
  MEMORY[0x1F4188790](v15);
  uint64_t v45 = (uint64_t)&v42 - v16;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v17);
  uint64_t v44 = (uint64_t)&v42 - v18;
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v42 - v20;
  MEMORY[0x1F4188790](v22);
  id v24 = (char *)&v42 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationControlsAction, ConversationControlsAction));
  MEMORY[0x1F4188790](v25 - 8);
  int v27 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v29 = &v27[*(int *)(v28 + 56)];
  _s15ConversationKit0A14ControlsActionOWOcTm_0(v4, (uint64_t)v27);
  _s15ConversationKit0A14ControlsActionOWOcTm_0(v47, (uint64_t)v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, (uint64_t)v21);
      if (OUTLINED_FUNCTION_2_62() != 1) {
        goto LABEL_121;
      }
      goto LABEL_123;
    case 2u:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, v44);
      int v30 = OUTLINED_FUNCTION_2_62();
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_23_21();
      uint64_t v33 = v32;
      if (v30 == 2) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 3u:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, v45);
      int v35 = OUTLINED_FUNCTION_2_62();
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_23_21();
      uint64_t v33 = v36;
      if (v35 == 3)
      {
LABEL_7:
        MEMORY[0x1F4188790](v31);
        OUTLINED_FUNCTION_16_0();
        (*(void (**)(uint64_t, char *, char *))(v33 + 32))(v0, v29, v13);
        static UUID.== infix(_:_:)();
        id v34 = *(void (**)(void))(v33 + 8);
        OUTLINED_FUNCTION_66_2();
        v34();
        OUTLINED_FUNCTION_66_2();
        v34();
        goto LABEL_123;
      }
LABEL_9:
      OUTLINED_FUNCTION_66_2();
      v37();
      goto LABEL_121;
    case 4u:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, v0);
      if (OUTLINED_FUNCTION_2_62() == 4) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 5u:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, (uint64_t)v13);
      if (OUTLINED_FUNCTION_2_62() == 5) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 6u:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, v1);
      if (OUTLINED_FUNCTION_2_62() == 6) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 7u:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, v46);
      if (OUTLINED_FUNCTION_2_62() == 7) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 8u:
      uint64_t v38 = v43;
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, (uint64_t)v43);
      uint64_t v40 = *v38;
      uint64_t v39 = v38[1];
      if (OUTLINED_FUNCTION_2_62() == 8)
      {
        if (v40 == *(void *)v29 && v39 == *((void *)v29 + 1))
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_123:
        _s15ConversationKit0A14ControlsActionOWOhTm_0((uint64_t)v27, (void (*)(void))type metadata accessor for ConversationControlsAction);
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_121:
        outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v27, &demangling cache variable for type metadata for (ConversationControlsAction, ConversationControlsAction));
      }
      OUTLINED_FUNCTION_28();
      return;
    case 9u:
      if (OUTLINED_FUNCTION_2_62() == 9) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0xAu:
      if (OUTLINED_FUNCTION_2_62() == 10) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0xBu:
      if (OUTLINED_FUNCTION_2_62() == 11) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0xCu:
      if (OUTLINED_FUNCTION_2_62() == 12) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0xDu:
      if (OUTLINED_FUNCTION_2_62() == 13) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0xEu:
      if (OUTLINED_FUNCTION_2_62() == 14) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0xFu:
      if (OUTLINED_FUNCTION_2_62() == 15) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x10u:
      if (OUTLINED_FUNCTION_2_62() == 16) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x11u:
      if (OUTLINED_FUNCTION_2_62() == 17) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x12u:
      if (OUTLINED_FUNCTION_2_62() == 18) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x13u:
      if (OUTLINED_FUNCTION_2_62() == 19) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x14u:
      if (OUTLINED_FUNCTION_2_62() == 20) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x15u:
      if (OUTLINED_FUNCTION_2_62() == 21) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x16u:
      if (OUTLINED_FUNCTION_2_62() == 22) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x17u:
      if (OUTLINED_FUNCTION_2_62() == 23) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x18u:
      if (OUTLINED_FUNCTION_2_62() == 24) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x19u:
      if (OUTLINED_FUNCTION_2_62() == 25) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x1Au:
      if (OUTLINED_FUNCTION_2_62() == 26) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x1Bu:
      if (OUTLINED_FUNCTION_2_62() == 27) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x1Cu:
      if (OUTLINED_FUNCTION_2_62() == 28) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x1Du:
      if (OUTLINED_FUNCTION_2_62() == 29) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x1Eu:
      if (OUTLINED_FUNCTION_2_62() == 30) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x1Fu:
      if (OUTLINED_FUNCTION_2_62() == 31) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x20u:
      if (OUTLINED_FUNCTION_2_62() == 32) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x21u:
      if (OUTLINED_FUNCTION_2_62() == 33) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x22u:
      if (OUTLINED_FUNCTION_2_62() == 34) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x23u:
      if (OUTLINED_FUNCTION_2_62() == 35) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x24u:
      if (OUTLINED_FUNCTION_2_62() == 36) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x25u:
      if (OUTLINED_FUNCTION_2_62() == 37) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x26u:
      if (OUTLINED_FUNCTION_2_62() == 38) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x27u:
      if (OUTLINED_FUNCTION_2_62() == 39) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x28u:
      if (OUTLINED_FUNCTION_2_62() == 40) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x29u:
      if (OUTLINED_FUNCTION_2_62() == 41) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x2Au:
      if (OUTLINED_FUNCTION_2_62() == 42) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x2Bu:
      if (OUTLINED_FUNCTION_2_62() == 43) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x2Cu:
      if (OUTLINED_FUNCTION_2_62() == 44) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x2Du:
      if (OUTLINED_FUNCTION_2_62() == 45) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x2Eu:
      if (OUTLINED_FUNCTION_2_62() == 46) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x2Fu:
      if (OUTLINED_FUNCTION_2_62() == 47) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x30u:
      if (OUTLINED_FUNCTION_2_62() == 48) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x31u:
      if (OUTLINED_FUNCTION_2_62() == 49) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x32u:
      if (OUTLINED_FUNCTION_2_62() == 50) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x33u:
      if (OUTLINED_FUNCTION_2_62() == 51) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x34u:
      if (OUTLINED_FUNCTION_2_62() == 52) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x35u:
      if (OUTLINED_FUNCTION_2_62() == 53) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x36u:
      if (OUTLINED_FUNCTION_2_62() == 54) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x37u:
      if (OUTLINED_FUNCTION_2_62() == 55) {
        goto LABEL_123;
      }
      goto LABEL_121;
    case 0x38u:
      if (OUTLINED_FUNCTION_2_62() == 56) {
        goto LABEL_123;
      }
      goto LABEL_121;
    default:
      _s15ConversationKit0A14ControlsActionOWOcTm_0((uint64_t)v27, (uint64_t)v24);
      if (!OUTLINED_FUNCTION_2_62()) {
        goto LABEL_123;
      }
      goto LABEL_121;
  }
}

void ConversationControlsAction.hash(into:)()
{
  OUTLINED_FUNCTION_89();
  uint64_t v2 = type metadata accessor for ConversationControlsAction();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_17_0();
  _s15ConversationKit0A14ControlsActionOWOcTm_0(v1, (uint64_t)v0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      Swift::UInt8 v4 = *v0;
      Swift::UInt v5 = 7;
      goto LABEL_8;
    case 2u:
      uint64_t v6 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_5_3();
      uint64_t v8 = v7;
      MEMORY[0x1F4188790](v9);
      uint64_t v11 = OUTLINED_FUNCTION_18_5(v10, v22);
      v12(v11);
      Swift::UInt v13 = 14;
      goto LABEL_6;
    case 3u:
      uint64_t v6 = type metadata accessor for UUID();
      OUTLINED_FUNCTION_5_3();
      uint64_t v8 = v14;
      MEMORY[0x1F4188790](v15);
      uint64_t v17 = OUTLINED_FUNCTION_18_5(v16, v22);
      v18(v17);
      Swift::UInt v13 = 15;
LABEL_6:
      Hasher._combine(_:)(v13);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v6);
      return;
    case 4u:
      Swift::UInt8 v4 = *v0;
      Swift::UInt v5 = 16;
      goto LABEL_8;
    case 5u:
      Swift::UInt v19 = *v0;
      Swift::UInt v20 = 38;
      goto LABEL_12;
    case 6u:
      Swift::UInt v19 = *v0;
      Swift::UInt v20 = 39;
      goto LABEL_12;
    case 7u:
      Swift::UInt v19 = *v0;
      Swift::UInt v20 = 40;
LABEL_12:
      Hasher._combine(_:)(v20);
      Swift::UInt v21 = v19;
      goto LABEL_62;
    case 8u:
      Hasher._combine(_:)(0x32uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return;
    case 9u:
      Swift::UInt v21 = 0;
      goto LABEL_62;
    case 0xAu:
      Swift::UInt v21 = 1;
      goto LABEL_62;
    case 0xBu:
      Swift::UInt v21 = 2;
      goto LABEL_62;
    case 0xCu:
      Swift::UInt v21 = 4;
      goto LABEL_62;
    case 0xDu:
      Swift::UInt v21 = 5;
      goto LABEL_62;
    case 0xEu:
      Swift::UInt v21 = 6;
      goto LABEL_62;
    case 0xFu:
      Swift::UInt v21 = 8;
      goto LABEL_62;
    case 0x10u:
      Swift::UInt v21 = 9;
      goto LABEL_62;
    case 0x11u:
      Swift::UInt v21 = 10;
      goto LABEL_62;
    case 0x12u:
      Swift::UInt v21 = 11;
      goto LABEL_62;
    case 0x13u:
      Swift::UInt v21 = 12;
      goto LABEL_62;
    case 0x14u:
      Swift::UInt v21 = 13;
      goto LABEL_62;
    case 0x15u:
      Swift::UInt v21 = 17;
      goto LABEL_62;
    case 0x16u:
      Swift::UInt v21 = 18;
      goto LABEL_62;
    case 0x17u:
      Swift::UInt v21 = 19;
      goto LABEL_62;
    case 0x18u:
      Swift::UInt v21 = 20;
      goto LABEL_62;
    case 0x19u:
      Swift::UInt v21 = 21;
      goto LABEL_62;
    case 0x1Au:
      Swift::UInt v21 = 22;
      goto LABEL_62;
    case 0x1Bu:
      Swift::UInt v21 = 23;
      goto LABEL_62;
    case 0x1Cu:
      Swift::UInt v21 = 24;
      goto LABEL_62;
    case 0x1Du:
      Swift::UInt v21 = 25;
      goto LABEL_62;
    case 0x1Eu:
      Swift::UInt v21 = 26;
      goto LABEL_62;
    case 0x1Fu:
      Swift::UInt v21 = 27;
      goto LABEL_62;
    case 0x20u:
      Swift::UInt v21 = 28;
      goto LABEL_62;
    case 0x21u:
      Swift::UInt v21 = 29;
      goto LABEL_62;
    case 0x22u:
      Swift::UInt v21 = 30;
      goto LABEL_62;
    case 0x23u:
      Swift::UInt v21 = 31;
      goto LABEL_62;
    case 0x24u:
      Swift::UInt v21 = 32;
      goto LABEL_62;
    case 0x25u:
      Swift::UInt v21 = 33;
      goto LABEL_62;
    case 0x26u:
      Swift::UInt v21 = 34;
      goto LABEL_62;
    case 0x27u:
      Swift::UInt v21 = 35;
      goto LABEL_62;
    case 0x28u:
      Swift::UInt v21 = 36;
      goto LABEL_62;
    case 0x29u:
      Swift::UInt v21 = 37;
      goto LABEL_62;
    case 0x2Au:
      Swift::UInt v21 = 41;
      goto LABEL_62;
    case 0x2Bu:
      Swift::UInt v21 = 42;
      goto LABEL_62;
    case 0x2Cu:
      Swift::UInt v21 = 43;
      goto LABEL_62;
    case 0x2Du:
      Swift::UInt v21 = 44;
      goto LABEL_62;
    case 0x2Eu:
      Swift::UInt v21 = 45;
      goto LABEL_62;
    case 0x2Fu:
      Swift::UInt v21 = 46;
      goto LABEL_62;
    case 0x30u:
      Swift::UInt v21 = 47;
      goto LABEL_62;
    case 0x31u:
      Swift::UInt v21 = 48;
      goto LABEL_62;
    case 0x32u:
      Swift::UInt v21 = 49;
      goto LABEL_62;
    case 0x33u:
      Swift::UInt v21 = 51;
      goto LABEL_62;
    case 0x34u:
      Swift::UInt v21 = 52;
      goto LABEL_62;
    case 0x35u:
      Swift::UInt v21 = 53;
      goto LABEL_62;
    case 0x36u:
      Swift::UInt v21 = 54;
      goto LABEL_62;
    case 0x37u:
      Swift::UInt v21 = 55;
      goto LABEL_62;
    case 0x38u:
      Swift::UInt v21 = 56;
LABEL_62:
      Hasher._combine(_:)(v21);
      break;
    default:
      Swift::UInt8 v4 = *v0;
      Swift::UInt v5 = 3;
LABEL_8:
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v4);
      break;
  }
}

Swift::Int ConversationControlsAction.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationControlsAction()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for ConversationControlsAction()
{
  uint64_t result = type metadata singleton initialization cache for ConversationControlsAction;
  if (!type metadata singleton initialization cache for ConversationControlsAction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with take of ConversationControlsAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C319EDE8()
{
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

id partial apply for closure #7 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_resumeCallButtonTapped);
}

uint64_t sub_1C319EE28()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void *partial apply for closure #6 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(uint64_t a1, uint64_t a2)
{
  return closure #6 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(a1, a2, v2);
}

uint64_t partial apply for closure #4 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(uint64_t a1)
{
  return partial apply for closure #4 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(a1, (uint64_t (*)(unint64_t))ConversationControlsManager.rejectAuthorizationRequest(for:));
}

uint64_t partial apply for closure #3 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(uint64_t a1)
{
  return partial apply for closure #4 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(a1, (uint64_t (*)(unint64_t))ConversationControlsManager.approveAuthorizationRequest(for:));
}

uint64_t partial apply for closure #4 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(uint64_t a1, uint64_t (*a2)(unint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  return a2(v2 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t partial apply for closure #2 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(uint64_t a1)
{
  return closure #2 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_1C319EF0C()
{
  swift_weakDestroy();
  OUTLINED_FUNCTION_25_0();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)(unsigned __int8 *a1)
{
}

unint64_t lazy protocol witness table accessor for type Published<Bool>.Publisher and conformance Published<A>.Publisher()
{
  unint64_t result = lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher;
  if (!lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Published<Bool>.Publisher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Published<Bool>.Publisher and conformance Published<A>.Publisher);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions;
  if (!lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions;
  if (!lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions;
  if (!lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions;
  if (!lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsAction.ButtonOptions and conformance ConversationControlsAction.ButtonOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationControlsAction.CallButtonStyle and conformance ConversationControlsAction.CallButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationControlsAction.CallButtonStyle and conformance ConversationControlsAction.CallButtonStyle;
  if (!lazy protocol witness table cache variable for type ConversationControlsAction.CallButtonStyle and conformance ConversationControlsAction.CallButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsAction.CallButtonStyle and conformance ConversationControlsAction.CallButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationControlsAction.Location and conformance ConversationControlsAction.Location()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationControlsAction.Location and conformance ConversationControlsAction.Location;
  if (!lazy protocol witness table cache variable for type ConversationControlsAction.Location and conformance ConversationControlsAction.Location)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsAction.Location and conformance ConversationControlsAction.Location);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ConversationControlsAction()
{
  return lazy protocol witness table accessor for type UIControlState and conformance UIControlState((unint64_t *)&lazy protocol witness table cache variable for type ConversationControlsAction and conformance ConversationControlsAction, (void (*)(uint64_t))type metadata accessor for ConversationControlsAction);
}

uint64_t lazy protocol witness table accessor for type UIControlState and conformance UIControlState(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ControlsActionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C319F2D4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ControlsActionState()
{
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ShareMenuActionState(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[18])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareMenuActionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for ShareMenuActionState()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationControlsAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 3 && EnumCaseMultiPayload != 2)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ConversationControlsAction(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 8)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result == 3 || result == 2)
  {
    uint64_t v3 = type metadata accessor for UUID();
    BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for ConversationControlsAction(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 3 && EnumCaseMultiPayload != 2)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for ConversationControlsAction(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit0A14ControlsActionOWOhTm_0((uint64_t)a1, (void (*)(void))type metadata accessor for ConversationControlsAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 3 && EnumCaseMultiPayload != 2)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ConversationControlsAction(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ConversationControlsAction(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit0A14ControlsActionOWOhTm_0((uint64_t)a1, (void (*)(void))type metadata accessor for ConversationControlsAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ConversationControlsAction()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void type metadata accessor for ConversationControlsAction.ButtonOptions()
{
}

unsigned char *storeEnumTagSinglePayload for ConversationControlsAction.CallButtonStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C319FC28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for ConversationControlsAction.CallButtonStyle()
{
}

unsigned char *storeEnumTagSinglePayload for ConversationControlsAction.Location(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C319FD28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ConversationControlsAction.Location()
{
}

id OUTLINED_FUNCTION_74_0(void *a1)
{
  int v3 = *(_DWORD *)(v1 + 32);
  return ConversationControlsTrailingActionButtonProvider.init(controlsManager:context:)(a1, v3);
}

void OUTLINED_FUNCTION_81_1()
{
  JUMPOUT(0x1C87744F0);
}

uint64_t OUTLINED_FUNCTION_86_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_87_1()
{
  return v0;
}

id specialized Sequence.contains(where:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = objc_msgSend(v4, sel_isConnected);

      if ((v7 & 1) == 0)
      {
        ++v3;
        if (v6 != v2) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  id v7 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t TelephonyUtilitiesServices.screeningEnabled.getter()
{
  return TUCallScreeningEnabled();
}

uint64_t TelephonyUtilitiesServices.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TelephonyUtilitiesServices() + 20);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for TelephonyUtilitiesServices()
{
  uint64_t result = type metadata singleton initialization cache for TelephonyUtilitiesServices;
  if (!type metadata singleton initialization cache for TelephonyUtilitiesServices) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TelephonyUtilitiesServices.isAnsweringMachineAvailable.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TelephonyUtilitiesServices() + 24));
  swift_retain();
  return v1;
}

uint64_t TelephonyUtilitiesServices.timeToWaitForCall.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TelephonyUtilitiesServices() + 28));
  swift_retain();
  return v1;
}

uint64_t TelephonyUtilitiesServices.init(callCenter:logger:isAnsweringMachineAvailable:timeToWaitForCall:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  Swift::UInt v13 = (int *)type metadata accessor for TelephonyUtilitiesServices();
  uint64_t v14 = (char *)a7 + v13[5];
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a2, v15);
  uint64_t v17 = (void *)((char *)a7 + v13[6]);
  *uint64_t v17 = a3;
  v17[1] = a4;
  uint64_t v18 = (void *)((char *)a7 + v13[7]);
  *uint64_t v18 = a5;
  v18[1] = a6;
  return result;
}

Swift::Void __swiftcall TelephonyUtilitiesServices.disconnectScreeningCall(callUUID:)(Swift::String callUUID)
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_36();
  uint64_t v9 = v7 - v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_24_20();
  uint64_t v11 = *v1;
  uint64_t v12 = (void *)MEMORY[0x1C87730B0]();
  id v30 = objc_msgSend(v11, sel_callWithCallUUID_, v12);

  if (!v30)
  {
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_10_40();
    OUTLINED_FUNCTION_2_1();
    v15();
    OUTLINED_FUNCTION_31_17();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (_DWORD *)OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_14_3();
      *uint64_t v18 = 136446466;
      uint64_t v29 = v3;
      uint64_t v19 = OUTLINED_FUNCTION_26_19((uint64_t)"disconnectScreeningCall(callUUID:)");
      OUTLINED_FUNCTION_4_62(v19);
      OUTLINED_FUNCTION_39_11();
      OUTLINED_FUNCTION_18_31();
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_33_16();
      OUTLINED_FUNCTION_16_25(&dword_1C2F90000, v16, v20, "%{public}s: Call %{public}s no longer exists, cannot disconnect");
      OUTLINED_FUNCTION_20_24();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      Swift::UInt v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      uint64_t v22 = v9;
LABEL_10:
      uint64_t v28 = v29;
LABEL_14:
      v21(v22, v28);
      OUTLINED_FUNCTION_28();
      return;
    }

    OUTLINED_FUNCTION_32_1();
    Swift::UInt v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    uint64_t v22 = v9;
LABEL_13:
    uint64_t v28 = v3;
    goto LABEL_14;
  }
  if (!objc_msgSend(v30, sel_isScreening))
  {
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_10_40();
    OUTLINED_FUNCTION_2_1();
    v23();
    OUTLINED_FUNCTION_31_17();
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v26 = 136446466;
      uint64_t v29 = v3;
      uint64_t v27 = OUTLINED_FUNCTION_26_19((uint64_t)"disconnectScreeningCall(callUUID:)");
      OUTLINED_FUNCTION_4_62(v27);
      OUTLINED_FUNCTION_39_11();
      OUTLINED_FUNCTION_18_31();
      OUTLINED_FUNCTION_6_56();
      OUTLINED_FUNCTION_33_16();
      _os_log_impl(&dword_1C2F90000, v24, v25, "%{public}s: Call %{public}s is not in screening, refusing to disconnect.", v26, 0x16u);
      OUTLINED_FUNCTION_20_24();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      Swift::UInt v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      uint64_t v22 = v2;
      goto LABEL_10;
    }

    OUTLINED_FUNCTION_32_1();
    Swift::UInt v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    uint64_t v22 = v2;
    goto LABEL_13;
  }
  objc_msgSend(v11, sel_disconnectCall_withReason_, v30, 36);
  OUTLINED_FUNCTION_28();
}

Swift::Bool __swiftcall TelephonyUtilitiesServices.isScreenable(callUUID:manualScreening:)(Swift::String callUUID, Swift::Bool manualScreening)
{
  OUTLINED_FUNCTION_31();
  LODWORD(v107) = v4;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v108 = v10;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_36();
  uint64_t v14 = (void *)(v12 - v13);
  MEMORY[0x1F4188790](v15);
  os_log_type_t v17 = (char *)&v101 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v101 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v101 - v22;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_24_20();
  if ((TelephonyUtilitiesServices.preScreeningChecks(callUUID:function:)(v8, v6, (uint64_t)"isScreenable(callUUID:manualScreening:)", 39, 2) & 1) == 0)goto LABEL_25; {
  uint64_t v103 = v20;
  }
  id v104 = v17;
  uint64_t v101 = v23;
  uint64_t v102 = v3;
  uint64_t v105 = v8;
  uint64_t v106 = v9;
  uint64_t v25 = v108;
  uint64_t v26 = *v2;
  uint64_t v27 = (void *)MEMORY[0x1C87730B0](v8, v6);
  id v28 = objc_msgSend(v26, sel_callWithCallUUID_, v27);

  if (!v28)
  {
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_13_35();
    uint64_t v44 = v106;
    OUTLINED_FUNCTION_2_1();
    v45();
    OUTLINED_FUNCTION_31_17();
    uint64_t v46 = (void *)Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_21_0(v47))
    {
      uint64_t v48 = OUTLINED_FUNCTION_15_1();
      uint64_t v110 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v48 = 136446466;
      uint64_t v109 = OUTLINED_FUNCTION_5_63((uint64_t)"ingCall(callUUID:)");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v49 = OUTLINED_FUNCTION_41_10();
      uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v6, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_42_11();
      _os_log_impl(v51, v52, v53, v54, v55, v56);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      uint64_t v57 = (void (*)(id, uint64_t))v27[1];
      id v58 = v14;
LABEL_12:
      v57(v58, v44);
      goto LABEL_25;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v70 = (void (*)(id, uint64_t))v27[1];
    id v71 = v14;
LABEL_21:
    v70(v71, v44);
    goto LABEL_25;
  }
  unint64_t v29 = v6;
  if (!objc_msgSend(v28, sel_isIncoming))
  {
    id v107 = v28;
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_13_35();
    id v59 = v104;
    uint64_t v44 = v106;
    OUTLINED_FUNCTION_2_1();
    v60();
    OUTLINED_FUNCTION_43_8();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = OUTLINED_FUNCTION_15_1();
      uint64_t v110 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v63 = 136446466;
      uint64_t v64 = OUTLINED_FUNCTION_5_63((uint64_t)"ingCall(callUUID:)");
      OUTLINED_FUNCTION_34_12(v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v65 = OUTLINED_FUNCTION_41_10();
      uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v6, v66);
      OUTLINED_FUNCTION_30_16(v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_46_9(&dword_1C2F90000, v68, v69, "%{public}s: Tracked call %{public}s can not be screened because its not an incoming call");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      uint64_t v57 = (void (*)(id, uint64_t))v27[1];
      id v58 = v59;
      goto LABEL_12;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v70 = (void (*)(id, uint64_t))v27[1];
    id v71 = v59;
    goto LABEL_21;
  }
  if (v107)
  {
    if (!objc_msgSend(v28, sel_isEligibleForManualScreening))
    {
LABEL_6:
      id v107 = v28;
      type metadata accessor for TelephonyUtilitiesServices();
      OUTLINED_FUNCTION_13_35();
      id v30 = v103;
      uint64_t v31 = v106;
      OUTLINED_FUNCTION_2_1();
      v32();
      unint64_t v33 = v29;
      OUTLINED_FUNCTION_43_8();
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = OUTLINED_FUNCTION_9_0();
        id v104 = (id)swift_slowAlloc();
        uint64_t v110 = (uint64_t)v104;
        *(_DWORD *)uint64_t v36 = 136446722;
        uint64_t v37 = OUTLINED_FUNCTION_5_63((uint64_t)"ingCall(callUUID:)");
        OUTLINED_FUNCTION_34_12(v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v38 = v105;
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v29, &v110);
        OUTLINED_FUNCTION_30_16(v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v36 + 22) = 2082;
        LOBYTE(v109) = 0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
        uint64_t v40 = String.init<A>(describing:)();
        uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v110);
        unint64_t v33 = v29;
        uint64_t v42 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v34, v35, "%{public}s: Tracked call %{public}s Is not eligible for screening, recieved %{public}s from TUCall.isEligibleForScreening", (uint8_t *)v36, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();

        OUTLINED_FUNCTION_26_2();
        v43();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t))v27[1])(v30, v31);
        uint64_t v42 = v105;
      }
      id v72 = v107;
      TelephonyUtilitiesServices.setCallLVMUnavailableReason(callUUID:reason:)(v42, v33, (uint64_t)objc_msgSend(v107, sel_liveVoicemailUnavailableReason));

      goto LABEL_25;
    }
  }
  else if ((objc_msgSend(v28, sel_isEligibleForScreening) & 1) == 0)
  {
    goto LABEL_6;
  }
  if (objc_msgSend(v28, sel_isRTT) && !TUCallScreeningRTTEnabled())
  {
    uint64_t v87 = v28;
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_45_7();
    uint64_t v88 = v101;
    uint64_t v89 = v106;
    OUTLINED_FUNCTION_2_1();
    v90();
    unint64_t v91 = v29;
    OUTLINED_FUNCTION_43_8();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = OUTLINED_FUNCTION_15_1();
      uint64_t v110 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v94 = 136446466;
      uint64_t v95 = OUTLINED_FUNCTION_5_63((uint64_t)"ingCall(callUUID:)");
      OUTLINED_FUNCTION_34_12(v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v94 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v96 = OUTLINED_FUNCTION_41_10();
      uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v91, v97);
      OUTLINED_FUNCTION_30_16(v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_46_9(&dword_1C2F90000, v99, v100, "%{public}s: Tracked call %{public}s Is not eligible for screening, it is a RTT call.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(char *, uint64_t))(v25 + 8))(v101, v89);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v88, v89);
    }
  }
  else if (objc_msgSend(v28, sel_status) == 4)
  {
  }
  else
  {
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_45_7();
    uint64_t v74 = v102;
    uint64_t v75 = v106;
    OUTLINED_FUNCTION_2_1();
    v76();
    OUTLINED_FUNCTION_43_8();
    id v77 = v28;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_21_0(v79))
    {
      uint64_t v80 = OUTLINED_FUNCTION_9_0();
      id v107 = (id)swift_slowAlloc();
      uint64_t v110 = (uint64_t)v107;
      *(_DWORD *)uint64_t v80 = 136446722;
      uint64_t v109 = OUTLINED_FUNCTION_5_63((uint64_t)"ingCall(callUUID:)");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v81 = OUTLINED_FUNCTION_41_10();
      uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v6, v82);
      OUTLINED_FUNCTION_40_10(v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_33_16();
      *(_WORD *)(v80 + 22) = 2082;
      LODWORD(v109) = objc_msgSend(v77, sel_status);
      type metadata accessor for TUCallStatus(0);
      uint64_t v84 = String.init<A>(describing:)();
      uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v78, (os_log_type_t)v23, "%{public}s: Tracked call %{public}s Is not eligible for screening, status is %{public}s", (uint8_t *)v80, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      OUTLINED_FUNCTION_26_2();
      v86();
    }
    else
    {

      OUTLINED_FUNCTION_32_1();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v74, v75);
    }
  }
LABEL_25:
  OUTLINED_FUNCTION_28();
  return result;
}

uint64_t TelephonyUtilitiesServices.preScreeningChecks(callUUID:function:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = (uint64_t)v5;
  int v48 = a5;
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v16 = type metadata accessor for TelephonyUtilitiesServices();
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (id *)((char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*(uint64_t (**)(void))((char *)v5 + *(int *)(v17 + 24)))())
  {
    uint64_t v45 = v10;
    uint64_t v20 = a1;
    id v21 = objc_msgSend(*v5, sel_currentCalls);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v21) = specialized Sequence.contains(where:)(v22);
    swift_bridgeObjectRelease();
    outlined init with copy of TelephonyUtilitiesServices(v6, (uint64_t)v19);
    if (v21)
    {
      outlined destroy of TelephonyUtilitiesServices((uint64_t)v19);
      uint64_t v23 = v20;
    }
    else
    {
      id v32 = objc_msgSend(*v19, sel_activeVideoCall);

      outlined destroy of TelephonyUtilitiesServices((uint64_t)v19);
      uint64_t v23 = v20;
      if (!v32) {
        return 1;
      }
    }
    TelephonyUtilitiesServices.setCallLVMUnavailableReason(callUUID:reason:)(v23, a2, 8);
    uint64_t v33 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v15, v6 + *(int *)(v16 + 20), v9);
    swift_bridgeObjectRetain_n();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v50 = v37;
      *(_DWORD *)uint64_t v36 = 136446466;
      uint64_t v43 = v23;
      uint64_t v38 = StaticString.description.getter();
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v50);
      uint64_t v44 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, a2, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v34, v35, "%{public}s: %{public}s can not be screened because we already have an active call.", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v37, -1, -1);
      MEMORY[0x1C87760E0](v36, -1, -1);

      id v30 = *(void (**)(char *, uint64_t))(v33 + 8);
      uint64_t v31 = v15;
      goto LABEL_9;
    }

    swift_bridgeObjectRelease_n();
    id v30 = *(void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v31 = v15;
LABEL_12:
    uint64_t v40 = v9;
    goto LABEL_13;
  }
  TelephonyUtilitiesServices.setCallLVMUnavailableReason(callUUID:reason:)(a1, a2, 6);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, (char *)v5 + *(int *)(v16 + 20), v9);
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v24, v25))
  {

    swift_bridgeObjectRelease_n();
    id v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v31 = v13;
    goto LABEL_12;
  }
  uint64_t v26 = swift_slowAlloc();
  uint64_t v27 = swift_slowAlloc();
  uint64_t v50 = v27;
  *(_DWORD *)uint64_t v26 = 136446466;
  uint64_t v44 = v9;
  uint64_t v28 = StaticString.description.getter();
  uint64_t v43 = a1;
  uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v26 + 12) = 2082;
  swift_bridgeObjectRetain();
  uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, a2, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1C2F90000, v24, v25, "%{public}s: %{public}s can not be screened because answering machine is unavailable.", (uint8_t *)v26, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1C87760E0](v27, -1, -1);
  MEMORY[0x1C87760E0](v26, -1, -1);

  id v30 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v31 = v13;
LABEL_9:
  uint64_t v40 = v44;
LABEL_13:
  v30(v31, v40);
  return 0;
}

void TelephonyUtilitiesServices.setCallLVMUnavailableReason(callUUID:reason:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  uint64_t v12 = (void *)MEMORY[0x1C87730B0](a1, a2);
  id v20 = objc_msgSend(v11, sel_callWithCallUUID_, v12);

  if (v20)
  {
    objc_msgSend(v11, sel_setLiveVoicemailUnavailableReason_forCall_, a3, v20);
    uint64_t v13 = v20;
  }
  else
  {
    uint64_t v14 = type metadata accessor for TelephonyUtilitiesServices();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, (char *)v3 + *(int *)(v14 + 20), v7);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      id v20 = (id)swift_slowAlloc();
      id v22 = v20;
      *(_DWORD *)uint64_t v17 = 136446466;
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002DLL, 0x80000001C379E740, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v15, v16, "%{public}s: Tracked call %{public}s no longer exists, unable to set LVM unavailable reason.", (uint8_t *)v17, 0x16u);
      id v18 = v20;
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v18, -1, -1);
      MEMORY[0x1C87760E0](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TelephonyUtilitiesServices.screen(callUUID:screeningDueToUserInteraction:)(Swift::String callUUID, Swift::Bool screeningDueToUserInteraction)
{
  object = callUUID._object;
  uint64_t countAndFlagsBits = callUUID._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_36();
  uint64_t v11 = v9 - v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_24_20();
  uint64_t v13 = *v2;
  uint64_t v14 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
  id v15 = objc_msgSend(v13, sel_callWithCallUUID_, v14);

  type metadata accessor for TelephonyUtilitiesServices();
  uint64_t v37 = v2;
  if (v15)
  {
    OUTLINED_FUNCTION_2_1();
    v16();
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v35 = countAndFlagsBits;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446722;
      OUTLINED_FUNCTION_28_15((uint64_t)"screen(callUUID:screeningDueToUserInteraction:)");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2082;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)object, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 22) = 1024;
      Swift::Bool v20 = screeningDueToUserInteraction;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v17, v18, "%{public}s: Tracked call %{public}s is being sent to screening due to user interaction: %{BOOL}d", (uint8_t *)v19, 0x1Cu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      OUTLINED_FUNCTION_26_2();
      v21();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_26_2();
      v32();
      Swift::Bool v20 = screeningDueToUserInteraction;
    }
    id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADA70]), sel_initWithCall_, v15);
    objc_msgSend(v33, sel_setSendToScreening_, 1);
    objc_msgSend(v33, sel_setScreeningDueToUserInteraction_, v20);
    objc_msgSend(*v37, sel_answerWithRequest_, v33);
  }
  else
  {
    OUTLINED_FUNCTION_2_1();
    v22();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      OUTLINED_FUNCTION_28_15((uint64_t)"screen(callUUID:screeningDueToUserInteraction:)");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_42_11();
      _os_log_impl(v26, v27, v28, v29, v30, v31);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
    }
    lazy protocol witness table accessor for type AnsweringMachineError and conformance AnsweringMachineError();
    swift_allocError();
    *id v34 = countAndFlagsBits;
    v34[1] = (uint64_t)object;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
}

id TelephonyUtilitiesServices.screen(request:)(uint64_t a1)
{
  return objc_msgSend(*v1, sel_screenWithRequest_, a1);
}

Swift::Int __swiftcall TelephonyUtilitiesServices.getStreamToken(callUUID:)(Swift::String callUUID)
{
  OUTLINED_FUNCTION_31();
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_36();
  uint64_t v12 = (char *)(v10 - v11);
  __n128 v14 = MEMORY[0x1F4188790](v13);
  os_log_type_t v16 = (char *)v41 - v15;
  uint64_t v17 = *v1;
  os_log_type_t v18 = (void *)MEMORY[0x1C87730B0](v5, v3, v14);
  id v19 = objc_msgSend(v17, sel_callWithCallUUID_, v18);

  if (!v19)
  {
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_10_40();
    OUTLINED_FUNCTION_2_1();
    v20();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = OUTLINED_FUNCTION_15_1();
      uint64_t v45 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v23 = 136446466;
      uint64_t v43 = v6;
      uint64_t v24 = OUTLINED_FUNCTION_27_18((uint64_t)"getStreamToken(callUUID:)");
      OUTLINED_FUNCTION_4_62(v24);
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v3, &v45);
      OUTLINED_FUNCTION_6_56();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_16_25(&dword_1C2F90000, v21, v25, "%{public}s: Tracked call %{public}s no longer exists, failing to screen call.");
      OUTLINED_FUNCTION_20_24();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
      os_log_t v27 = v12;
LABEL_8:
      uint64_t v39 = v43;
LABEL_12:
      v26(v27, v39);
      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    os_log_t v27 = v12;
LABEL_11:
    uint64_t v39 = v6;
    goto LABEL_12;
  }
  if (!objc_msgSend(v19, sel_answeringMachineStreamToken))
  {
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_10_40();
    OUTLINED_FUNCTION_2_1();
    v28();
    id v29 = v19;
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = OUTLINED_FUNCTION_15_1();
      uint64_t v42 = OUTLINED_FUNCTION_14_3();
      uint64_t v45 = v42;
      *(_DWORD *)uint64_t v32 = 136446466;
      uint64_t v33 = OUTLINED_FUNCTION_27_18((uint64_t)"getStreamToken(callUUID:)");
      uint64_t v43 = v6;
      uint64_t v44 = v33;
      OUTLINED_FUNCTION_23_22();
      *(_WORD *)(v32 + 12) = 2082;
      v41[1] = v32 + 14;
      id v34 = objc_msgSend(v29, sel_callUUID);
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;

      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v45);
      OUTLINED_FUNCTION_40_10(v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v30, v31, "%{public}s: Failed to get stream token from call from TUCallCenter %{public}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
      os_log_t v27 = v16;
      goto LABEL_8;
    }

    uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    os_log_t v27 = v16;
    goto LABEL_11;
  }
  objc_msgSend(v19, sel_answeringMachineStreamToken);

LABEL_13:
  OUTLINED_FUNCTION_28();
  return result;
}

Swift::String_optional __swiftcall TelephonyUtilitiesServices.getCallerID(callUUID:)(Swift::String callUUID)
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_14_29();
  uint64_t v4 = v3;
  id v5 = objc_msgSend(v1, sel_callWithCallUUID_, v3);

  if (v5)
  {
    uint64_t v6 = outlined bridged method (pb) of @objc TUCall.contactIdentifiers.getter(v5);
    if (v6)
    {
      if (*(void *)(v6 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();

        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }

    goto LABEL_11;
  }
  type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_2_1();
  v7();
  OUTLINED_FUNCTION_31_17();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_14_3();
    *uint64_t v10 = 136446466;
    OUTLINED_FUNCTION_25_20();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, v11, v12);
    OUTLINED_FUNCTION_17_28();
    OUTLINED_FUNCTION_38_9();
    OUTLINED_FUNCTION_18_31();
    OUTLINED_FUNCTION_17_28();
    OUTLINED_FUNCTION_33_16();
    OUTLINED_FUNCTION_16_25(&dword_1C2F90000, v8, v13, "%{public}s: Tracked call %{public}s no longer exists, failing to screen call.");
    OUTLINED_FUNCTION_15_33();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_32_1();
  }
  uint64_t v14 = OUTLINED_FUNCTION_35_10();
  v15(v14);
LABEL_11:
  OUTLINED_FUNCTION_28();
  result.value._object = v17;
  result.value._uint64_t countAndFlagsBits = v16;
  return result;
}

Swift::String __swiftcall TelephonyUtilitiesServices.getCallerDisplayName(callUUID:)(Swift::String callUUID)
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_29_16();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_14_29();
  uint64_t v4 = v3;
  id v5 = objc_msgSend(v1, sel_callWithCallUUID_, v3);

  if (v5)
  {
    id v6 = objc_msgSend(v5, sel_displayName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    type metadata accessor for TelephonyUtilitiesServices();
    OUTLINED_FUNCTION_2_1();
    v7();
    OUTLINED_FUNCTION_31_17();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (_DWORD *)OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_14_3();
      *uint64_t v10 = 136446466;
      OUTLINED_FUNCTION_25_20();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, v11, v12);
      OUTLINED_FUNCTION_17_28();
      OUTLINED_FUNCTION_38_9();
      OUTLINED_FUNCTION_18_31();
      OUTLINED_FUNCTION_17_28();
      OUTLINED_FUNCTION_33_16();
      OUTLINED_FUNCTION_16_25(&dword_1C2F90000, v8, v13, "%{public}s: Tracked call %{public}s no longer exists, failing to screen call.");
      OUTLINED_FUNCTION_15_33();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      OUTLINED_FUNCTION_32_1();
    }
    uint64_t v14 = OUTLINED_FUNCTION_35_10();
    v15(v14);
  }
  OUTLINED_FUNCTION_28();
  result._object = v17;
  result._uint64_t countAndFlagsBits = v16;
  return result;
}

void TelephonyUtilitiesServices.getScreenRequestIfAvailable()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_36();
  uint64_t v8 = v6 - v7;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v37 - v11;
  MEMORY[0x1F4188790](v10);
  if (TelephonyUtilitiesServices.preScreeningChecks(callUUID:function:)(0x70556C6C61435843, 0xEC00000065746164, (uint64_t)"getScreenRequestIfAvailable()", 29, 2))
  {
    v37[2] = v8;
    uint64_t v13 = (char *)v0 + *(int *)(type metadata accessor for TelephonyUtilitiesServices() + 20);
    v37[3] = *(void *)(v4 + 16);
    v37[4] = v4 + 16;
    OUTLINED_FUNCTION_2_1();
    v14();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    v37[1] = v13;
    if (v17)
    {
      uint64_t v18 = swift_slowAlloc();
      v37[0] = v4;
      id v19 = (uint8_t *)v18;
      uint64_t v39 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)id v19 = 136446210;
      uint64_t v20 = OUTLINED_FUNCTION_11_30((uint64_t)"getScreenRequestIfAvailable()");
      OUTLINED_FUNCTION_22_21(v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v15, v16, "%{public}s: Getting Screening request if available.", v19, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      uint64_t v4 = v37[0];
      OUTLINED_FUNCTION_3();
    }

    uint64_t v21 = *(void (**)(uint64_t))(v4 + 8);
    uint64_t v22 = OUTLINED_FUNCTION_37_10();
    v21(v22);
    id v23 = objc_msgSend(*v1, sel_fetchCurrentCallUpdates);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUCallUpdate);
    unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_2_1();
    v25();
    swift_bridgeObjectRetain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v37[0] = v21;
      uint64_t v28 = OUTLINED_FUNCTION_15_1();
      uint64_t v39 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v29 = OUTLINED_FUNCTION_11_30((uint64_t)"getScreenRequestIfAvailable()");
      OUTLINED_FUNCTION_22_21(v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2048;
      if (v24 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v38 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v26, v27, "%s: %ld updates available.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      uint64_t v21 = (void (*)(uint64_t))v37[0];
      ((void (*)(char *, uint64_t))v37[0])(v12, v2);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      ((void (*)(char *, uint64_t))v21)(v12, v2);
    }
    os_log_type_t v31 = specialized Sequence.first(where:)(v24);
    swift_bridgeObjectRelease();
    if (v31)
    {
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADC78]), sel_initWithTUCallUpdate_, v31);
    }
    else
    {
      OUTLINED_FUNCTION_2_1();
      v32();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_21_0(v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = OUTLINED_FUNCTION_9_0();
        v37[0] = v4;
        *(_DWORD *)uint64_t v35 = 136446210;
        uint64_t v38 = OUTLINED_FUNCTION_11_30((uint64_t)"getScreenRequestIfAvailable()");
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2F90000, v33, (os_log_type_t)v21, "%{public}s: No screenable request found for screening request.", v35, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }

      uint64_t v36 = OUTLINED_FUNCTION_37_10();
      v21(v36);
    }
  }
  OUTLINED_FUNCTION_28();
}

void TelephonyUtilitiesServices.timeToWaitForCall(callUUID:)()
{
  OUTLINED_FUNCTION_31();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  __n128 v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v0;
  uint64_t v15 = (void *)MEMORY[0x1C87730B0](v4, v2, v11);
  id v27 = objc_msgSend(v14, sel_callWithCallUUID_, v15);

  uint64_t v16 = type metadata accessor for TelephonyUtilitiesServices();
  if (v27)
  {
    (*(void (**)(id))((char *)v0 + *(int *)(v16 + 28)))(v27);
    OUTLINED_FUNCTION_28();
  }
  else
  {
    OUTLINED_FUNCTION_2_1();
    v19();
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = OUTLINED_FUNCTION_15_1();
      id v27 = (id)OUTLINED_FUNCTION_14_3();
      id v29 = v27;
      *(_DWORD *)uint64_t v23 = 136446466;
      HIDWORD(v26) = v22;
      OUTLINED_FUNCTION_25_20();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v24, v25);
      OUTLINED_FUNCTION_23_22();
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v2, (uint64_t *)&v29);
      OUTLINED_FUNCTION_23_22();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v20, BYTE4(v26), "%{public}s: Tracked call %{public}s no longer exists, unable to get time to wait.", (uint8_t *)v23, 0x16u);
      OUTLINED_FUNCTION_15_33();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
    *(_OWORD *)uint64_t v6 = xmmword_1C37737D0;
    *(unsigned char *)(v6 + 16) = 1;
    OUTLINED_FUNCTION_28();
  }
}

uint64_t protocol witness for CallServices.screeningEnabled.getter in conformance TelephonyUtilitiesServices()
{
  return TelephonyUtilitiesServices.screeningEnabled.getter() & 1;
}

void protocol witness for CallServices.screen(callUUID:screeningDueToUserInteraction:) in conformance TelephonyUtilitiesServices(uint64_t a1, uint64_t a2, Swift::Bool a3)
{
}

unint64_t lazy protocol witness table accessor for type AnsweringMachineError and conformance AnsweringMachineError()
{
  unint64_t result = lazy protocol witness table cache variable for type AnsweringMachineError and conformance AnsweringMachineError;
  if (!lazy protocol witness table cache variable for type AnsweringMachineError and conformance AnsweringMachineError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnsweringMachineError and conformance AnsweringMachineError);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreeningRequest()
{
  return &type metadata for ScreeningRequest;
}

uint64_t dispatch thunk of CallServices.screeningEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallServices.disconnectScreeningCall(callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of CallServices.screen(callUUID:screeningDueToUserInteraction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of CallServices.screen(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of CallServices.getStreamToken(callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CallServices.isScreenable(callUUID:manualScreening:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of CallServices.getCallerID(callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of CallServices.getCallerDisplayName(callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of CallServices.getScreenRequestIfAvailable()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CallServices.timeToWaitForCall(callUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

void **initializeBufferWithCopyOfBuffer for TelephonyUtilitiesServices(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (void **)((char *)v7 + v14);
    BOOL v17 = (void **)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    id v19 = (void **)((char *)v7 + v15);
    uint64_t v20 = (void **)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    *id v19 = *v20;
    v19[1] = v21;
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for TelephonyUtilitiesServices(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_release();
}

void **initializeWithCopy for TelephonyUtilitiesServices(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void **)((char *)a1 + v13);
  uint64_t v16 = (void **)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (void **)((char *)a1 + v14);
  id v19 = (void **)((char *)a2 + v14);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_retain();
  return a1;
}

void **assignWithCopy for TelephonyUtilitiesServices(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void **)((char *)a1 + v13);
  uint64_t v15 = (void **)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void **)((char *)a1 + v17);
  id v19 = (void **)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for TelephonyUtilitiesServices(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

void **assignWithTake for TelephonyUtilitiesServices(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  swift_release();
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TelephonyUtilitiesServices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C31A3278);
}

uint64_t sub_1C31A3278(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TelephonyUtilitiesServices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C31A3314);
}

void *sub_1C31A3314(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for TelephonyUtilitiesServices()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of TelephonyUtilitiesServices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TelephonyUtilitiesServices();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TelephonyUtilitiesServices(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TelephonyUtilitiesServices();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_41_10()
{
  return *(void *)(v0 - 128);
}

uint64_t SpamAlertBuilder.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:));
}

uint64_t SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:));
}

uint64_t SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:));
}

uint64_t SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:));
}

uint64_t SpamAlertBuilder.init()()
{
  return v0;
}

uint64_t closure #2 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(uint64_t a1, uint64_t (*a2)(void))
{
  if (a2) {
    return a2();
  }
  return result;
}

uint64_t SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:));
}

uint64_t SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t))specialized SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:));
}

uint64_t SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:));
}

void closure #1 in SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a2, v5);
  ReportSpamManager.reportFaceTimeCallSpam<A>(call:)((uint64_t)v7, v5, v6);
  if (a4)
  {
    OUTLINED_FUNCTION_4_63();
    a4();
  }
}

uint64_t SpamAlertBuilder.reportGroupInitiatorAlert(of:reportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t))specialized SpamAlertBuilder.reportGroupInitiatorAlert(of:reportHandler:cancelHandler:preparationHandler:));
}

uint64_t SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t))
{
  OUTLINED_FUNCTION_3_73();
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  OUTLINED_FUNCTION_5_64();
  return a8(v10, v11);
}

uint64_t closure #1 in SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_0_57(a1, a2);
  uint64_t v3 = OUTLINED_FUNCTION_3_24();
  uint64_t result = v4(v3);
  if (v2)
  {
    OUTLINED_FUNCTION_4_63();
    return v2();
  }
  return result;
}

uint64_t closure #1 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_0_57(a1, a2);
  uint64_t v3 = OUTLINED_FUNCTION_3_24();
  uint64_t result = v4(v3);
  if (v2)
  {
    OUTLINED_FUNCTION_4_63();
    return v2();
  }
  return result;
}

void closure #2 in SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_2_63(a1, a2);
  uint64_t v3 = OUTLINED_FUNCTION_7_3();
  v4(v3);
  OUTLINED_FUNCTION_6_57();
  if (v2)
  {
    OUTLINED_FUNCTION_4_63();
    v2();
  }
}

uint64_t SpamAlertBuilder.buildBlockAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(a1, a2, a3, a4, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized SpamAlertBuilder.buildBlockAlert(for:with:didDismiss:));
}

uint64_t SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(a1, v9);
  return a5(v11, a2, a3, a4, v5, v9, v10);
}

uint64_t closure #1 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_0_57(a1, a2);
  uint64_t v3 = OUTLINED_FUNCTION_3_24();
  uint64_t result = v4(v3);
  if (v2)
  {
    OUTLINED_FUNCTION_4_63();
    return v2();
  }
  return result;
}

void closure #2 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_2_63(a1, a2);
  uint64_t v3 = OUTLINED_FUNCTION_7_3();
  v4(v3);
  OUTLINED_FUNCTION_6_57();
  if (v2)
  {
    OUTLINED_FUNCTION_4_63();
    v2();
  }
}

id SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OUTLINED_FUNCTION_3_73();
  uint64_t v12 = v10[3];
  uint64_t v11 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v12);
  OUTLINED_FUNCTION_5_64();
  return specialized SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(v13, v14, v15, v16, v17, v18, v19, a8, a9, v9, v12, v11);
}

uint64_t closure #2 in SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a2) {
    return a2(1);
  }
  return result;
}

uint64_t SpamAlertBuilder.deinit()
{
  return v0;
}

uint64_t SpamAlertBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id specialized SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v23[3] = a6;
  v23[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
  outlined init with copy of IDSLookupManager((uint64_t)v23, (uint64_t)v22);
  uint64_t v14 = swift_allocObject();
  outlined init with take of Notice(v22, v14 + 16);
  *(void *)(v14 + 56) = a3;
  *(void *)(v14 + 64) = a4;
  outlined init with copy of IDSLookupManager((uint64_t)v23, (uint64_t)v21);
  uint64_t v15 = (void *)swift_allocObject();
  outlined init with take of Notice(v21, (uint64_t)(v15 + 2));
  v15[7] = a2;
  v15[8] = a3;
  v15[9] = a4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  swift_retain();
  id v18 = specialized SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), v14, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportAndBlockGroupInitiatorAlert(for:with:didDismiss:), (uint64_t)v15, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v16, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v17, a5, a6, a7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v18;
}

id specialized SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(a12 + 56))(a11);
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = 0xE000000000000000;
  }
  uint64_t v17 = self;
  id v18 = objc_msgSend(v17, sel_conversationKit);
  v19._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v82._object = (void *)0xE000000000000000;
  v19._object = (void *)0x80000001C379BAD0;
  v20.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v20.value._object = (void *)0xEF74694B6E6F6974;
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v82._uint64_t countAndFlagsBits = 0;
  Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v82);

  id v23 = objc_msgSend(v17, (SEL)&selRef_viewIfLoaded + 1);
  v24._uint64_t countAndFlagsBits = 0xD000000000000038;
  v83._object = (void *)0xE000000000000000;
  v24._object = (void *)0x80000001C379BB00;
  v25.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v25.value._object = (void *)0xEF74694B6E6F6974;
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v83._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v83);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1C3769620;
  *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v27 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v27 + 32) = v15;
  *(void *)(v27 + 40) = v16;
  uint64_t v28 = String.init(format:_:)();
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v31 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v22._countAndFlagsBits, (uint64_t)v22._object, v28, v30, 0);
  id v75 = self;
  id v32 = objc_msgSend(v75, sel_currentDevice);
  id v33 = objc_msgSend(v32, sel_userInterfaceIdiom);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v34 = objc_msgSend(v17, sel_conversationKit);
  v84._object = (void *)0xE000000000000000;
  v35._object = (void *)0x80000001C379BB40;
  v35._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v36.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v36.value._object = (void *)0xEF74694B6E6F6974;
  v37._uint64_t countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v84._uint64_t countAndFlagsBits = 0;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v84);

  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = a6;
  *(void *)(v39 + 24) = a7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  id v40 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v38._countAndFlagsBits, (uint64_t)v38._object, v33 != (id)1, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v39);
  id v41 = objc_msgSend(v17, sel_conversationKit);
  v42._uint64_t countAndFlagsBits = 0xD000000000000026;
  v85._object = (void *)0xE000000000000000;
  v42._object = (void *)0x80000001C379BA40;
  v43.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v43.value._object = (void *)0xEF74694B6E6F6974;
  v44._uint64_t countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  v85._uint64_t countAndFlagsBits = 0;
  Swift::String v45 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, v43, (NSBundle)v41, v44, v85);

  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = a2;
  *(void *)(v46 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v47 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v45._countAndFlagsBits, (uint64_t)v45._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v46);
  id v48 = objc_msgSend(v17, sel_conversationKit);
  v49._uint64_t countAndFlagsBits = 0xD000000000000027;
  v86._object = (void *)0xE000000000000000;
  v49._object = (void *)0x80000001C379BB60;
  v50.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v50.value._object = (void *)0xEF74694B6E6F6974;
  v51._uint64_t countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  v86._uint64_t countAndFlagsBits = 0;
  Swift::String v52 = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, (NSBundle)v48, v51, v86);

  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = a4;
  *(void *)(v53 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v54 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v52._countAndFlagsBits, (uint64_t)v52._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v53);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769F40;
  *(void *)(inited + 32) = v40;
  *(void *)(inited + 40) = v47;
  *(void *)(inited + 48) = v54;
  uint64_t v80 = inited;
  specialized Array._endMutation()();
  unint64_t v56 = v80;
  id v57 = v40;
  id v58 = v47;
  id v59 = v54;
  id v60 = objc_msgSend(v75, sel_currentDevice);
  id v61 = objc_msgSend(v60, sel_userInterfaceIdiom);

  if (v61 == (id)1)
  {
    swift_bridgeObjectRelease();
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_1C3769F40;
    *(void *)(v62 + 32) = v58;
    *(void *)(v62 + 40) = v59;
    *(void *)(v62 + 48) = v57;
    uint64_t v81 = v62;
    specialized Array._endMutation()();
    unint64_t v56 = v81;
    id v63 = v57;
    id v64 = v58;
    id v65 = v59;
  }
  if (v56 >> 62) {
    goto LABEL_19;
  }
  uint64_t v66 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v67 = v31;
  swift_bridgeObjectRetain();
  for (; v66; uint64_t v66 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v68 = 4;
    while (1)
    {
      id v69 = (v56 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v68 - 4, v56)
          : *(id *)(v56 + 8 * v68);
      uint64_t v70 = v69;
      uint64_t v71 = v68 - 3;
      if (__OFADD__(v68 - 4, 1)) {
        break;
      }
      objc_msgSend(v31, sel_addAction_, v69);

      ++v68;
      if (v71 == v66) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    id v73 = v31;
    swift_bridgeObjectRetain();
  }
LABEL_17:

  swift_bridgeObjectRelease_n();
  return v31;
}

id specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v21[3] = a6;
  _OWORD v21[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
  outlined init with copy of IDSLookupManager((uint64_t)v21, (uint64_t)v20);
  uint64_t v13 = swift_allocObject();
  outlined init with take of Notice(v20, v13 + 16);
  *(void *)(v13 + 56) = a3;
  *(void *)(v13 + 64) = a4;
  outlined init with copy of IDSLookupManager((uint64_t)v21, (uint64_t)v19);
  unint64_t v14 = (void *)swift_allocObject();
  outlined init with take of Notice(v19, (uint64_t)(v14 + 2));
  v14[7] = a2;
  v14[8] = a3;
  v14[9] = a4;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  swift_retain();
  id v17 = specialized SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:), v13, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:), (uint64_t)v14, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v17;
}

id specialized SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_conversationKit);
  v65._object = (void *)0xE000000000000000;
  v11._object = (void *)0x80000001C379E900;
  v11._uint64_t countAndFlagsBits = 0xD000000000000020;
  v12.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v12.value._object = (void *)0xEF74694B6E6F6974;
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v65._uint64_t countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v65);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v15 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v14._countAndFlagsBits, (uint64_t)v14._object, 0, 0, 0);
  id v60 = self;
  id v16 = objc_msgSend(v60, sel_currentDevice);
  id v17 = objc_msgSend(v16, sel_userInterfaceIdiom);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v18 = objc_msgSend(v9, sel_conversationKit);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v66._object = (void *)0xE000000000000000;
  v19._object = (void *)0x80000001C379BB40;
  v20.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v20.value._object = (void *)0xEF74694B6E6F6974;
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v66._uint64_t countAndFlagsBits = 0;
  Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v66);

  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a6;
  *(void *)(v23 + 24) = a7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  id v24 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v22._countAndFlagsBits, (uint64_t)v22._object, v17 != (id)1, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v23);
  id v25 = objc_msgSend(v9, sel_conversationKit);
  v67._object = (void *)0xE000000000000000;
  v26._object = (void *)0x80000001C379E930;
  v26._uint64_t countAndFlagsBits = 0xD000000000000020;
  v27.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v27.value._object = (void *)0xEF74694B6E6F6974;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v67._uint64_t countAndFlagsBits = 0;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v67);

  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v31 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v29._countAndFlagsBits, (uint64_t)v29._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v30);
  id v32 = objc_msgSend(v9, sel_conversationKit);
  v33._uint64_t countAndFlagsBits = 0xD000000000000027;
  v68._object = (void *)0xE000000000000000;
  v33._object = (void *)0x80000001C379BB60;
  v34.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v34.value._object = (void *)0xEF74694B6E6F6974;
  v35._uint64_t countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v68._uint64_t countAndFlagsBits = 0;
  Swift::String v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, (NSBundle)v32, v35, v68);

  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a4;
  *(void *)(v37 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v38 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v36._countAndFlagsBits, (uint64_t)v36._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v37);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769F40;
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v31;
  *(void *)(inited + 48) = v38;
  uint64_t v63 = inited;
  specialized Array._endMutation()();
  unint64_t v40 = v63;
  id v41 = v24;
  id v42 = v31;
  id v43 = v38;
  id v44 = objc_msgSend(v60, sel_currentDevice);
  id v45 = objc_msgSend(v44, sel_userInterfaceIdiom);

  if (v45 == (id)1)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1C3769F40;
    *(void *)(v46 + 32) = v42;
    *(void *)(v46 + 40) = v43;
    *(void *)(v46 + 48) = v41;
    uint64_t v64 = v46;
    specialized Array._endMutation()();
    unint64_t v40 = v64;
    id v47 = v41;
    id v48 = v42;
    id v49 = v43;
  }
  if (v40 >> 62) {
    goto LABEL_13;
  }
  uint64_t v50 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v51 = v15;
  swift_bridgeObjectRetain();
  for (; v50; uint64_t v50 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v52 = 4;
    while (1)
    {
      id v53 = (v40 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v52 - 4, v40)
          : *(id *)(v40 + 8 * v52);
      id v54 = v53;
      uint64_t v55 = v52 - 3;
      if (__OFADD__(v52 - 4, 1)) {
        break;
      }
      objc_msgSend(v15, sel_addAction_, v53);

      ++v52;
      if (v55 == v50) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    id v57 = v15;
    swift_bridgeObjectRetain();
  }
LABEL_11:

  swift_bridgeObjectRelease_n();
  return v15;
}

{
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  id v16;
  id v17;
  id v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  id v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  id v32;
  Swift::String v33;
  Swift::String_optional v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  id v38;
  uint64_t inited;
  unint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v57;
  id v60;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;

  uint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_conversationKit);
  v65._object = (void *)0xE000000000000000;
  v11._object = (void *)0x80000001C379E900;
  v11._uint64_t countAndFlagsBits = 0xD000000000000020;
  v12.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v12.value._object = (void *)0xEF74694B6E6F6974;
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v65._uint64_t countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v65);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v15 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v14._countAndFlagsBits, (uint64_t)v14._object, 0, 0, 0);
  id v60 = self;
  id v16 = objc_msgSend(v60, sel_currentDevice);
  id v17 = objc_msgSend(v16, sel_userInterfaceIdiom);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v18 = objc_msgSend(v9, sel_conversationKit);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v66._object = (void *)0xE000000000000000;
  v19._object = (void *)0x80000001C379BB40;
  v20.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v20.value._object = (void *)0xEF74694B6E6F6974;
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v66._uint64_t countAndFlagsBits = 0;
  Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v66);

  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a6;
  *(void *)(v23 + 24) = a7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  id v24 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v22._countAndFlagsBits, (uint64_t)v22._object, v17 != (id)1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v23);
  id v25 = objc_msgSend(v9, sel_conversationKit);
  v67._object = (void *)0xE000000000000000;
  v26._object = (void *)0x80000001C379E930;
  v26._uint64_t countAndFlagsBits = 0xD000000000000020;
  v27.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v27.value._object = (void *)0xEF74694B6E6F6974;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v67._uint64_t countAndFlagsBits = 0;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v67);

  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v31 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v29._countAndFlagsBits, (uint64_t)v29._object, 2, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v30);
  id v32 = objc_msgSend(v9, sel_conversationKit);
  v33._uint64_t countAndFlagsBits = 0xD000000000000027;
  v68._object = (void *)0xE000000000000000;
  v33._object = (void *)0x80000001C379BB60;
  v34.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v34.value._object = (void *)0xEF74694B6E6F6974;
  v35._uint64_t countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v68._uint64_t countAndFlagsBits = 0;
  Swift::String v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, (NSBundle)v32, v35, v68);

  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a4;
  *(void *)(v37 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v38 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v36._countAndFlagsBits, (uint64_t)v36._object, 2, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v37);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769F40;
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v31;
  *(void *)(inited + 48) = v38;
  uint64_t v63 = inited;
  specialized Array._endMutation()();
  unint64_t v40 = v63;
  id v41 = v24;
  id v42 = v31;
  id v43 = v38;
  id v44 = objc_msgSend(v60, sel_currentDevice);
  id v45 = objc_msgSend(v44, sel_userInterfaceIdiom);

  if (v45 == (id)1)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1C3769F40;
    *(void *)(v46 + 32) = v42;
    *(void *)(v46 + 40) = v43;
    *(void *)(v46 + 48) = v41;
    uint64_t v64 = v46;
    specialized Array._endMutation()();
    unint64_t v40 = v64;
    id v47 = v41;
    id v48 = v42;
    id v49 = v43;
  }
  if (v40 >> 62) {
    goto LABEL_13;
  }
  uint64_t v50 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v51 = v15;
  swift_bridgeObjectRetain();
  for (; v50; uint64_t v50 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v52 = 4;
    while (1)
    {
      id v53 = (v40 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v52 - 4, v40)
          : *(id *)(v40 + 8 * v52);
      id v54 = v53;
      uint64_t v55 = v52 - 3;
      if (__OFADD__(v52 - 4, 1)) {
        break;
      }
      objc_msgSend(v15, sel_addAction_, v53);

      ++v52;
      if (v55 == v50) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    id v57 = v15;
    swift_bridgeObjectRetain();
  }
LABEL_11:

  swift_bridgeObjectRelease_n();
  return v15;
}

{
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  id v16;
  id v17;
  id v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  id v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  id v32;
  Swift::String v33;
  Swift::String_optional v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  id v38;
  uint64_t inited;
  unint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v57;
  id v60;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;

  uint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_conversationKit);
  v65._object = (void *)0xE000000000000000;
  v11._object = (void *)0x80000001C379E900;
  v11._uint64_t countAndFlagsBits = 0xD000000000000020;
  v12.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v12.value._object = (void *)0xEF74694B6E6F6974;
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v65._uint64_t countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v65);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v15 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v14._countAndFlagsBits, (uint64_t)v14._object, 0, 0, 0);
  id v60 = self;
  id v16 = objc_msgSend(v60, sel_currentDevice);
  id v17 = objc_msgSend(v16, sel_userInterfaceIdiom);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v18 = objc_msgSend(v9, sel_conversationKit);
  v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v66._object = (void *)0xE000000000000000;
  v19._object = (void *)0x80000001C379BB40;
  v20.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v20.value._object = (void *)0xEF74694B6E6F6974;
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v66._uint64_t countAndFlagsBits = 0;
  Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v66);

  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a6;
  *(void *)(v23 + 24) = a7;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a6);
  id v24 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v22._countAndFlagsBits, (uint64_t)v22._object, v17 != (id)1, (uint64_t)closure #1 in SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)partial apply, v23);
  id v25 = objc_msgSend(v9, sel_conversationKit);
  v67._object = (void *)0xE000000000000000;
  v26._object = (void *)0x80000001C379E930;
  v26._uint64_t countAndFlagsBits = 0xD000000000000020;
  v27.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v27.value._object = (void *)0xEF74694B6E6F6974;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v67._uint64_t countAndFlagsBits = 0;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v67);

  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v31 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v29._countAndFlagsBits, (uint64_t)v29._object, 2, (uint64_t)closure #2 in SpamAlertBuilder.reportAndBlockAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)partial apply, v30);
  id v32 = objc_msgSend(v9, sel_conversationKit);
  v33._uint64_t countAndFlagsBits = 0xD000000000000027;
  v68._object = (void *)0xE000000000000000;
  v33._object = (void *)0x80000001C379BB60;
  v34.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v34.value._object = (void *)0xEF74694B6E6F6974;
  v35._uint64_t countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v68._uint64_t countAndFlagsBits = 0;
  Swift::String v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, (NSBundle)v32, v35, v68);

  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a4;
  *(void *)(v37 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v38 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v36._countAndFlagsBits, (uint64_t)v36._object, 2, (uint64_t)closure #1 in SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)partial apply, v37);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769F40;
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v31;
  *(void *)(inited + 48) = v38;
  uint64_t v63 = inited;
  specialized Array._endMutation()();
  unint64_t v40 = v63;
  id v41 = v24;
  id v42 = v31;
  id v43 = v38;
  id v44 = objc_msgSend(v60, sel_currentDevice);
  id v45 = objc_msgSend(v44, sel_userInterfaceIdiom);

  if (v45 == (id)1)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1C3769F40;
    *(void *)(v46 + 32) = v42;
    *(void *)(v46 + 40) = v43;
    *(void *)(v46 + 48) = v41;
    uint64_t v64 = v46;
    specialized Array._endMutation()();
    unint64_t v40 = v64;
    id v47 = v41;
    id v48 = v42;
    id v49 = v43;
  }
  if (v40 >> 62) {
    goto LABEL_13;
  }
  uint64_t v50 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v51 = v15;
  swift_bridgeObjectRetain();
  for (; v50; uint64_t v50 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v52 = 4;
    while (1)
    {
      id v53 = (v40 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v52 - 4, v40)
          : *(id *)(v40 + 8 * v52);
      id v54 = v53;
      uint64_t v55 = v52 - 3;
      if (__OFADD__(v52 - 4, 1)) {
        break;
      }
      objc_msgSend(v15, sel_addAction_, v53);

      ++v52;
      if (v55 == v50) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    id v57 = v15;
    swift_bridgeObjectRetain();
  }
LABEL_11:

  swift_bridgeObjectRelease_n();
  return v15;
}

id specialized SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v18[3] = a6;
  v18[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
  outlined init with copy of IDSLookupManager((uint64_t)v18, (uint64_t)v17);
  uint64_t v12 = swift_allocObject();
  outlined init with take of Notice(v17, v12 + 16);
  *(void *)(v12 + 56) = a3;
  *(void *)(v12 + 64) = a4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  id v15 = specialized SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:), v12, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v13);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v15;
}

id specialized SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_conversationKit);
  v10._uint64_t countAndFlagsBits = 0xD000000000000022;
  v44._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001C379E870;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v44);

  id v14 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v13._countAndFlagsBits, (uint64_t)v13._object, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v15 = objc_msgSend(v8, sel_conversationKit);
  v16._uint64_t countAndFlagsBits = 0xD000000000000023;
  v45._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001C379E8D0;
  v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v17.value._object = (void *)0xEF74694B6E6F6974;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v45);

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v21 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v19._countAndFlagsBits, (uint64_t)v19._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v20);
  id v22 = objc_msgSend(v8, sel_conversationKit);
  v46._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v46);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769610;
  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = v28;
  unint64_t v43 = inited;
  specialized Array._endMutation()();
  if (v43 >> 62) {
    goto LABEL_11;
  }
  uint64_t v30 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v31 = v14;
  id v32 = v21;
  id v33 = v28;
  swift_bridgeObjectRetain();
  for (; v30; uint64_t v30 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = 4;
    while (1)
    {
      id v35 = (v43 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v34 - 4, v43)
          : *(id *)(v43 + 8 * v34);
      Swift::String v36 = v35;
      uint64_t v37 = v34 - 3;
      if (__OFADD__(v34 - 4, 1)) {
        break;
      }
      objc_msgSend(v14, sel_addAction_, v35);

      ++v34;
      if (v37 == v30) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    id v39 = v14;
    id v40 = v21;
    id v41 = v28;
    swift_bridgeObjectRetain();
  }
LABEL_9:

  swift_bridgeObjectRelease_n();
  return v14;
}

{
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  id v21;
  id v22;
  Swift::String v23;
  Swift::String_optional v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  id v28;
  uint64_t inited;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v39;
  id v40;
  id v41;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_conversationKit);
  v10._uint64_t countAndFlagsBits = 0xD000000000000022;
  v44._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001C379E870;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v44);

  id v14 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v13._countAndFlagsBits, (uint64_t)v13._object, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v15 = objc_msgSend(v8, sel_conversationKit);
  v16._uint64_t countAndFlagsBits = 0xD000000000000023;
  v45._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001C379E8D0;
  v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v17.value._object = (void *)0xEF74694B6E6F6974;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v45);

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v21 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v19._countAndFlagsBits, (uint64_t)v19._object, 2, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v20);
  id v22 = objc_msgSend(v8, sel_conversationKit);
  v46._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v46);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769610;
  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = v28;
  unint64_t v43 = inited;
  specialized Array._endMutation()();
  if (v43 >> 62) {
    goto LABEL_11;
  }
  uint64_t v30 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v31 = v14;
  id v32 = v21;
  id v33 = v28;
  swift_bridgeObjectRetain();
  for (; v30; uint64_t v30 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = 4;
    while (1)
    {
      id v35 = (v43 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v34 - 4, v43)
          : *(id *)(v43 + 8 * v34);
      Swift::String v36 = v35;
      uint64_t v37 = v34 - 3;
      if (__OFADD__(v34 - 4, 1)) {
        break;
      }
      objc_msgSend(v14, sel_addAction_, v35);

      ++v34;
      if (v37 == v30) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    id v39 = v14;
    id v40 = v21;
    id v41 = v28;
    swift_bridgeObjectRetain();
  }
LABEL_9:

  swift_bridgeObjectRelease_n();
  return v14;
}

{
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  id v21;
  id v22;
  Swift::String v23;
  Swift::String_optional v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  id v28;
  uint64_t inited;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v39;
  id v40;
  id v41;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_conversationKit);
  v10._uint64_t countAndFlagsBits = 0xD000000000000022;
  v44._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001C379E870;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v44);

  id v14 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v13._countAndFlagsBits, (uint64_t)v13._object, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v15 = objc_msgSend(v8, sel_conversationKit);
  v16._uint64_t countAndFlagsBits = 0xD000000000000023;
  v45._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001C379E8D0;
  v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v17.value._object = (void *)0xEF74694B6E6F6974;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v45);

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v21 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v19._countAndFlagsBits, (uint64_t)v19._object, 2, (uint64_t)closure #1 in SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)partial apply, v20);
  id v22 = objc_msgSend(v8, sel_conversationKit);
  v46._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v46);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)closure #1 in SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)partial apply, v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769610;
  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = v28;
  unint64_t v43 = inited;
  specialized Array._endMutation()();
  if (v43 >> 62) {
    goto LABEL_11;
  }
  uint64_t v30 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v31 = v14;
  id v32 = v21;
  id v33 = v28;
  swift_bridgeObjectRetain();
  for (; v30; uint64_t v30 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = 4;
    while (1)
    {
      id v35 = (v43 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v34 - 4, v43)
          : *(id *)(v43 + 8 * v34);
      Swift::String v36 = v35;
      uint64_t v37 = v34 - 3;
      if (__OFADD__(v34 - 4, 1)) {
        break;
      }
      objc_msgSend(v14, sel_addAction_, v35);

      ++v34;
      if (v37 == v30) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    id v39 = v14;
    id v40 = v21;
    id v41 = v28;
    swift_bridgeObjectRetain();
  }
LABEL_9:

  swift_bridgeObjectRelease_n();
  return v14;
}

id specialized SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v18[3] = a6;
  v18[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
  outlined init with copy of IDSLookupManager((uint64_t)v18, (uint64_t)v17);
  uint64_t v12 = swift_allocObject();
  outlined init with take of Notice(v17, v12 + 16);
  *(void *)(v12 + 56) = a3;
  *(void *)(v12 + 64) = a4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  id v15 = specialized SpamAlertBuilder.blockUnknownParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:), v12, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v13);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v15;
}

id specialized SpamAlertBuilder.blockUnknownParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_conversationKit);
  v10._uint64_t countAndFlagsBits = 0xD000000000000022;
  v44._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001C379E870;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v44);

  id v14 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v13._countAndFlagsBits, (uint64_t)v13._object, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v15 = objc_msgSend(v8, sel_conversationKit);
  v16._uint64_t countAndFlagsBits = 0xD000000000000027;
  v45._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001C379E8A0;
  v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v17.value._object = (void *)0xEF74694B6E6F6974;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v45);

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v21 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v19._countAndFlagsBits, (uint64_t)v19._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v20);
  id v22 = objc_msgSend(v8, sel_conversationKit);
  v46._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v46);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769610;
  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = v28;
  unint64_t v43 = inited;
  specialized Array._endMutation()();
  if (v43 >> 62) {
    goto LABEL_11;
  }
  uint64_t v30 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v31 = v14;
  id v32 = v21;
  id v33 = v28;
  swift_bridgeObjectRetain();
  for (; v30; uint64_t v30 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = 4;
    while (1)
    {
      id v35 = (v43 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v34 - 4, v43)
          : *(id *)(v43 + 8 * v34);
      Swift::String v36 = v35;
      uint64_t v37 = v34 - 3;
      if (__OFADD__(v34 - 4, 1)) {
        break;
      }
      objc_msgSend(v14, sel_addAction_, v35);

      ++v34;
      if (v37 == v30) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    id v39 = v14;
    id v40 = v21;
    id v41 = v28;
    swift_bridgeObjectRetain();
  }
LABEL_9:

  swift_bridgeObjectRelease_n();
  return v14;
}

{
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  id v21;
  id v22;
  Swift::String v23;
  Swift::String_optional v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  id v28;
  uint64_t inited;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v39;
  id v40;
  id v41;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_conversationKit);
  v10._uint64_t countAndFlagsBits = 0xD000000000000022;
  v44._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001C379E870;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v44);

  id v14 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v13._countAndFlagsBits, (uint64_t)v13._object, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v15 = objc_msgSend(v8, sel_conversationKit);
  v16._uint64_t countAndFlagsBits = 0xD000000000000027;
  v45._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001C379E8A0;
  v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v17.value._object = (void *)0xEF74694B6E6F6974;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v45);

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v21 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v19._countAndFlagsBits, (uint64_t)v19._object, 2, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v20);
  id v22 = objc_msgSend(v8, sel_conversationKit);
  v46._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v46);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:), v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769610;
  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = v28;
  unint64_t v43 = inited;
  specialized Array._endMutation()();
  if (v43 >> 62) {
    goto LABEL_11;
  }
  uint64_t v30 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v31 = v14;
  id v32 = v21;
  id v33 = v28;
  swift_bridgeObjectRetain();
  for (; v30; uint64_t v30 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = 4;
    while (1)
    {
      id v35 = (v43 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v34 - 4, v43)
          : *(id *)(v43 + 8 * v34);
      Swift::String v36 = v35;
      uint64_t v37 = v34 - 3;
      if (__OFADD__(v34 - 4, 1)) {
        break;
      }
      objc_msgSend(v14, sel_addAction_, v35);

      ++v34;
      if (v37 == v30) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    id v39 = v14;
    id v40 = v21;
    id v41 = v28;
    swift_bridgeObjectRetain();
  }
LABEL_9:

  swift_bridgeObjectRelease_n();
  return v14;
}

{
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  id v21;
  id v22;
  Swift::String v23;
  Swift::String_optional v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  id v28;
  uint64_t inited;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v39;
  id v40;
  id v41;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_conversationKit);
  v10._uint64_t countAndFlagsBits = 0xD000000000000022;
  v44._object = (void *)0xE000000000000000;
  v10._object = (void *)0x80000001C379E870;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v44);

  id v14 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v13._countAndFlagsBits, (uint64_t)v13._object, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v15 = objc_msgSend(v8, sel_conversationKit);
  v16._uint64_t countAndFlagsBits = 0xD000000000000027;
  v45._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001C379E8A0;
  v17.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v17.value._object = (void *)0xEF74694B6E6F6974;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v45);

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v21 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v19._countAndFlagsBits, (uint64_t)v19._object, 2, (uint64_t)closure #1 in SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)partial apply, v20);
  id v22 = objc_msgSend(v8, sel_conversationKit);
  v46._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001C379BB40;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v24.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v24.value._object = (void *)0xEF74694B6E6F6974;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v46);

  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a4;
  *(void *)(v27 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v28 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, (uint64_t)closure #1 in SpamAlertBuilder.blockAllParticipantsAlert(of:blockHandler:cancelHandler:preparationHandler:)partial apply, v27);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769610;
  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = v28;
  unint64_t v43 = inited;
  specialized Array._endMutation()();
  if (v43 >> 62) {
    goto LABEL_11;
  }
  uint64_t v30 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v31 = v14;
  id v32 = v21;
  id v33 = v28;
  swift_bridgeObjectRetain();
  for (; v30; uint64_t v30 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = 4;
    while (1)
    {
      id v35 = (v43 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1C87744F0](v34 - 4, v43)
          : *(id *)(v43 + 8 * v34);
      Swift::String v36 = v35;
      uint64_t v37 = v34 - 3;
      if (__OFADD__(v34 - 4, 1)) {
        break;
      }
      objc_msgSend(v14, sel_addAction_, v35);

      ++v34;
      if (v37 == v30) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    id v39 = v14;
    id v40 = v21;
    id v41 = v28;
    swift_bridgeObjectRetain();
  }
LABEL_9:

  swift_bridgeObjectRelease_n();
  return v14;
}

id specialized SpamAlertBuilder.buildBlockAlert(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  id v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v15);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a6, a7))
  {
    id v16 = specialized SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)((uint64_t)v15, a2, a3, a4, a5, a6, a7);
  }
  else if ((*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7))
  {
    id v16 = specialized SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)((uint64_t)v15, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    id v16 = specialized SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)((uint64_t)v15, a2, a3, a4, a5, a6, a7);
  }
  id v17 = v16;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a6);
  return v17;
}

id specialized SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v21[3] = a6;
  _OWORD v21[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
  outlined init with copy of IDSLookupManager((uint64_t)v21, (uint64_t)v20);
  id v15 = (void *)swift_allocObject();
  outlined init with take of Notice(v20, (uint64_t)(v15 + 2));
  v15[7] = a2;
  v15[8] = a3;
  v15[9] = a4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  swift_retain();
  id v18 = specialized SpamAlertBuilder.reportGroupInitiatorAlert(of:reportHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), (uint64_t)v15, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v16, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v17, a5, a6, a7);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v18;
}

id specialized SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v21[3] = a6;
  _OWORD v21[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
  outlined init with copy of IDSLookupManager((uint64_t)v21, (uint64_t)v20);
  id v15 = (void *)swift_allocObject();
  outlined init with take of Notice(v20, (uint64_t)(v15 + 2));
  v15[7] = a2;
  v15[8] = a3;
  v15[9] = a4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a3);
  swift_retain();
  id v18 = specialized SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)((uint64_t)boxed_opaque_existential_1, (uint64_t)partial apply for closure #1 in SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:), (uint64_t)v15, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v16, (uint64_t)partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:), v17, a5, a6, a7);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v18;
}

id specialized SpamAlertBuilder.reportGroupOneJunkAlert(of:reportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  Swift::String v12 = self;
  id v13 = objc_msgSend(v12, sel_conversationKit);
  v14._uint64_t countAndFlagsBits = 0xD000000000000025;
  v44._object = (void *)0xE000000000000000;
  v14._object = (void *)0x80000001C379E810;
  v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v15.value._object = (void *)0xEF74694B6E6F6974;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v44);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C3769620;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 56))(a9, a10);
  unint64_t v20 = v19;
  *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (v20) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v20) {
    unint64_t v22 = v20;
  }
  else {
    unint64_t v22 = 0xE000000000000000;
  }
  *(void *)(v17 + 32) = v21;
  *(void *)(v17 + 40) = v22;
  uint64_t v23 = String.init(format:_:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v26 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v23, v25, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v27 = objc_msgSend(v12, sel_conversationKit);
  v45._object = (void *)0xE000000000000000;
  v28._object = (void *)0x80000001C379BB40;
  v28._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v29.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v29.value._object = (void *)0xEF74694B6E6F6974;
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v45);

  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = a4;
  *(void *)(v32 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v33 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v31._countAndFlagsBits, (uint64_t)v31._object, 1, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v32);
  id v34 = objc_msgSend(v12, sel_conversationKit);
  v35._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v46._object = (void *)0xE000000000000000;
  v35._object = (void *)0x80000001C379E840;
  v36.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v36.value._object = (void *)0xEF74694B6E6F6974;
  v37._uint64_t countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v46);

  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = a2;
  *(void *)(v39 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v40 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v38._countAndFlagsBits, (uint64_t)v38._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v39);
  objc_msgSend(v26, sel_addAction_, v33);
  objc_msgSend(v26, sel_addAction_, v40);

  return v26;
}

id specialized SpamAlertBuilder.reportGroupInitiatorAlert(of:reportHandler:cancelHandler:preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  Swift::String v12 = self;
  id v13 = objc_msgSend(v12, sel_conversationKit);
  v14._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v44._object = (void *)0xE000000000000000;
  v14._object = (void *)0x80000001C379E7A0;
  v15.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v15.value._object = (void *)0xEF74694B6E6F6974;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v44._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v44);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C3769620;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 56))(a9, a10);
  unint64_t v20 = v19;
  *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (v20) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v20) {
    unint64_t v22 = v20;
  }
  else {
    unint64_t v22 = 0xE000000000000000;
  }
  *(void *)(v17 + 32) = v21;
  *(void *)(v17 + 40) = v22;
  uint64_t v23 = String.init(format:_:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertController);
  id v26 = @nonobjc UIAlertController.__allocating_init(title:message:preferredStyle:)(v23, v25, 0, 0, 0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAlertAction);
  id v27 = objc_msgSend(v12, sel_conversationKit);
  v45._object = (void *)0xE000000000000000;
  v28._object = (void *)0x80000001C379BB40;
  v28._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v29.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v29.value._object = (void *)0xEF74694B6E6F6974;
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v45._uint64_t countAndFlagsBits = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v45);

  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = a4;
  *(void *)(v32 + 24) = a5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a4);
  id v33 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v31._countAndFlagsBits, (uint64_t)v31._object, 1, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v32);
  id v34 = objc_msgSend(v12, sel_conversationKit);
  v35._uint64_t countAndFlagsBits = 0xD000000000000034;
  v46._object = (void *)0xE000000000000000;
  v35._object = (void *)0x80000001C379E7D0;
  v36.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v36.value._object = (void *)0xEF74694B6E6F6974;
  v37._uint64_t countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v46);

  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = a2;
  *(void *)(v39 + 24) = a3;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(a2);
  id v40 = @nonobjc UIAlertAction.__allocating_init(title:style:handler:)(v38._countAndFlagsBits, (uint64_t)v38._object, 2, (uint64_t)_s15ConversationKit16SpamAlertBuilderC028reportAndBlockGroupInitiatorD02of12blockHandler0lg6ReportM006cancelM0011preparationM0So17UIAlertControllerCAA0C9Modelable_p_ySbcSgA3MtFySo0Q6ActionCcfU_TA_0, v39);
  objc_msgSend(v26, sel_addAction_, v33);
  objc_msgSend(v26, sel_addAction_, v40);

  return v26;
}

uint64_t type metadata accessor for SpamAlertBuilder()
{
  return self;
}

uint64_t method lookup function for SpamAlertBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SpamAlertBuilder);
}

uint64_t dispatch thunk of SpamAlertBuilder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void partial apply for closure #1 in SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(uint64_t a1)
{
  closure #1 in SpamAlertBuilder.buildReportGroupOneJunkAlert(for:with:didDismiss:)(a1, (void *)(v1 + 16), *(void *)(v1 + 56), *(void (**)(void))(v1 + 64));
}

uint64_t partial apply for closure #1 in SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)(uint64_t a1)
{
  return closure #1 in SpamAlertBuilder.buildBlockUnknownAlert(for:with:didDismiss:)(a1, (void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(uint64_t a1)
{
  return closure #1 in SpamAlertBuilder.buildBlockAllAlert(for:with:didDismiss:)(a1, (void *)(v1 + 16));
}

void partial apply for closure #2 in SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(uint64_t a1)
{
  closure #2 in SpamAlertBuilder.buildReportAndBlock(for:with:didDismiss:)(a1, (void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in SpamAlertBuilder.reportAndBlockGroupInitiatorAlert(of:blockHandler:blockAndReportHandler:cancelHandler:preparationHandler:)()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  if (v1) {
    return v1(1);
  }
  return result;
}

uint64_t objectdestroy_40Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm_0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  if (*(void *)(v0 + 64)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_5()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t CNAutocompleteSearchController.messagesGroup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_21();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v7 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  CNAutocompleteSearchController.messagesGroupUUID.getter(v9 - v8);
  if (__swift_getEnumTagSinglePayload(v10, 1, v2) == 1)
  {
    outlined destroy of UUID?(v10);
LABEL_6:
    uint64_t v16 = type metadata accessor for MessagesGroup();
    uint64_t v18 = a1;
    uint64_t v19 = 1;
    return __swift_storeEnumTagSinglePayload(v18, v19, 1, v16);
  }
  Swift::String_optional v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v11(v6, v10, v2);
  uint64_t v12 = CNAutocompleteSearchController.messagesGroupName.getter();
  if (!v13)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    goto LABEL_6;
  }
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  v11(a1, v6, v2);
  uint64_t v16 = type metadata accessor for MessagesGroup();
  uint64_t v17 = (uint64_t *)(a1 + *(int *)(v16 + 20));
  *uint64_t v17 = v14;
  v17[1] = v15;
  uint64_t v18 = a1;
  uint64_t v19 = 0;
  return __swift_storeEnumTagSinglePayload(v18, v19, 1, v16);
}

id CNAutocompleteSearchController.messagesChatGUID.getter()
{
  id v1 = objc_msgSend(v0, sel_recipients);
  type metadata accessor for CNComposeRecipient();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v3 != 1) {
    return 0;
  }
  id v4 = objc_msgSend(v0, sel_recipients);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    OUTLINED_FUNCTION_32();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_11();
    if (v4) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  id v4 = *(id *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  OUTLINED_FUNCTION_1_77();
  MEMORY[0x1C87744F0](0, v5);
  OUTLINED_FUNCTION_11();
  id v6 = CNComposeRecipient.messagesChatGUID.getter();

  return v6;
}

void CNAutocompleteSearchController.messagesGroupUUID.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_recipients);
  type metadata accessor for CNComposeRecipient();
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v5 == 1)
  {
    id v6 = objc_msgSend(v1, sel_recipients);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_6;
      }
    }
    else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v7 & 0xC000000000000001) == 0, v7);
      if ((v7 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x1C87744F0](0, v7);
      }
      else {
        id v8 = *(id *)(v7 + 32);
      }
      id v11 = v8;
      swift_bridgeObjectRelease();
      CNComposeRecipient.messagesGroupUUID.getter(a1);

      return;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload(a1, 1, 1, v10);
}

uint64_t CNAutocompleteSearchController.messagesGroupName.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v4 = v3 - v2;
  CNAutocompleteSearchController.messagesGroupUUID.getter(v3 - v2);
  uint64_t v5 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v4, 1, v5);
  outlined destroy of UUID?(v4);
  uint64_t result = 0;
  if (EnumTagSinglePayload != 1)
  {
    id v8 = objc_msgSend(v0, sel_recipients);
    type metadata accessor for CNComposeRecipient();
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
    {
      OUTLINED_FUNCTION_32();
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_11();
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      id v8 = *(id *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8)
      {
LABEL_4:
        OUTLINED_FUNCTION_1_77();
        MEMORY[0x1C87744F0](0, v9);
        OUTLINED_FUNCTION_11();
        return outlined bridged method (ob) of @objc CNComposeRecipient.displayString.getter(v8);
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

unint64_t type metadata accessor for CNComposeRecipient()
{
  unint64_t result = lazy cache variable for type metadata for CNComposeRecipient;
  if (!lazy cache variable for type metadata for CNComposeRecipient)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNComposeRecipient);
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc CNComposeRecipient.displayString.getter(void *a1)
{
  id v2 = objc_msgSend(a1, sel_displayString);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void AttributedString.init(cnkLocalized:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_63();
  OUTLINED_FUNCTION_2_1();
  v7();
  objc_msgSend(self, sel_conversationKit);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_5_1();
  uint64_t v10 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_10_41(v0, v11, v12, v10);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_61();
  lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions(&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions, MEMORY[0x1F418B268]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.FormattingOptions]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [AttributedString.FormattingOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.FormattingOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  AttributedString.init(localized:options:table:bundle:locale:comment:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
  OUTLINED_FUNCTION_28();
}

void AttributedString.init(conversationControlsLocalized:comment:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_2_1();
  v7();
  objc_msgSend(self, sel_conversationKit);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_36_4();
  uint64_t v10 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_10_41(v0, v11, v12, v10);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v13);
  lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions(&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions, MEMORY[0x1F418B268]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AttributedString.FormattingOptions]);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type [AttributedString.FormattingOptions] and conformance [A], &demangling cache variable for type metadata for [AttributedString.FormattingOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  AttributedString.init(localized:options:table:bundle:locale:comment:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
  OUTLINED_FUNCTION_28();
}

void AttributedString.init<A>(conversationControlsLocalized:including:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_2_1();
  v7();
  objc_msgSend(self, sel_conversationKit);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v9 = OUTLINED_FUNCTION_8(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_9_41();
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v13 = OUTLINED_FUNCTION_10_41(v0, v11, v12, v10);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_36_4();
  default argument 1 of AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)();
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
  OUTLINED_FUNCTION_28();
}

uint64_t default argument 1 of AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void AttributedString.replaceLinks(with:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.LinkAttribute>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_9_41();
  uint64_t v4 = type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_60();
  OUTLINED_FUNCTION_2_1();
  v8();
  uint64_t v9 = type metadata accessor for AttributedString.Runs();
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_62();
  AttributedString.runs.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
  swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
  AttributedString.Runs.subscript.getter();
  swift_release();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  uint64_t v13 = v11 + 8;
  v14(v1, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.LinkAttribute>.Iterator);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x1C876EA90](v2);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, Range<AttributedString.Index>)?);
  uint64_t v17 = OUTLINED_FUNCTION_8(v16);
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_61();
  AttributedString.Runs.AttributesSlice1.Iterator.next()();
  for (uint64_t i = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, Range<AttributedString.Index>));
        __swift_getEnumTagSinglePayload(v2, 1, i) != 1;
        uint64_t i = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, Range<AttributedString.Index>)))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v20 = OUTLINED_FUNCTION_8(v19);
    MEMORY[0x1F4188790](v20);
    OUTLINED_FUNCTION_62();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    OUTLINED_FUNCTION_0();
    MEMORY[0x1F4188790](v21);
    OUTLINED_FUNCTION_63();
    uint64_t v22 = v2 + *(int *)(i + 48);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v2, v1, &demangling cache variable for type metadata for URL?);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v22, v13, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t v23 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload(v1, 1, v23) != 1)
    {
      lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, &demangling cache variable for type metadata for Range<AttributedString.Index>);
      uint64_t v24 = (void (*)(uint64_t *, void))AttributedString.subscript.modify();
      AttributedSubstring.setAttributes(_:)();
      v24(&v27, 0);
    }
    outlined destroy of SystemUpdateNotice?(v13, &demangling cache variable for type metadata for Range<AttributedString.Index>);
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for URL?);
    AttributedString.Runs.AttributesSlice1.Iterator.next()();
  }
  OUTLINED_FUNCTION_26_2();
  v25();
  OUTLINED_FUNCTION_26_2();
  v26();
  OUTLINED_FUNCTION_28();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.FoundationAttributes.LinkAttribute()
{
}

void sub_1C31A75A4()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute);
  }
  return result;
}

uint64_t sub_1C31A760C()
{
  return swift_release();
}

uint64_t sub_1C31A7614(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1C31A7620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>) & 1;
}

uint64_t sub_1C31A7644(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>);
}

void *sub_1C31A7664(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *one-time initialization function for containers()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ContainerAttribute.Value, AttributeContainer)>);
  uint64_t v0 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContainerAttribute.Value, AttributeContainer))
                 - 8);
  unint64_t v1 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C3769620;
  if (one-time initialization token for subjectContainer != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for AttributeContainer();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static AttributedStrings.Notices.subjectContainer);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v2 + v1, v4, v3);
  lazy protocol witness table accessor for type ContainerAttribute.Value and conformance ContainerAttribute.Value();
  unint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  static AttributedString.containers = result;
  return result;
}

void AttributedString.applyContainer()()
{
  OUTLINED_FUNCTION_31();
  v85[4] = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v111 = (void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v94 = (char *)v85 - v5;
  uint64_t v6 = type metadata accessor for AttributedString();
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_60();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v91 = v0;
  v85[2] = v8 + 16;
  v85[1] = v10;
  OUTLINED_FUNCTION_2_1();
  v11();
  uint64_t v12 = type metadata accessor for AttributedString.Runs();
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v101 = v16;
  uint64_t v17 = (char *)v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.runs.getter();
  v85[3] = v6;
  OUTLINED_FUNCTION_12_1();
  uint64_t v19 = v18();
  MEMORY[0x1F4188790](v19);
  uint64_t v20 = (char *)v85 - v5;
  uint64_t v99 = *(void *)(v14 + 16);
  uint64_t v100 = v14 + 16;
  OUTLINED_FUNCTION_2_1();
  v21();
  uint64_t v22 = type metadata accessor for AttributedString.Runs.Index();
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23;
  MEMORY[0x1F4188790](v25);
  unint64_t v107 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v108 = v26;
  uint64_t v27 = (char *)v85 - v107;
  uint64_t v28 = lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1F418B2F8]);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v98 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v102 = v14 + 8;
  v98(v17, v12);
  Swift::String_optional v29 = v111;
  Swift::String v30 = &v20[*((int *)v111 + 11)];
  Swift::String v31 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  uint64_t v32 = v27;
  uint64_t v33 = v28;
  uint64_t v106 = v22;
  uint64_t v34 = (uint64_t)v94;
  v31(v30, v32, v22);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v20, v34, &demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString.Runs.Run?);
  uint64_t v36 = OUTLINED_FUNCTION_8(v35);
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_2_3();
  uint64_t v103 = v38;
  uint64_t v39 = v34 + *((int *)v29 + 11);
  uint64_t v40 = *(void *)(v24 + 16);
  uint64_t v109 = v24 + 16;
  id v104 = (void (**)(void))(v24 + 8);
  uint64_t v105 = v40;
  *(void *)&long long v41 = 136315138;
  long long v93 = v41;
  uint64_t v92 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v96 = v39;
  uint64_t v97 = v33;
  uint64_t v95 = v12;
  while (1)
  {
    uint64_t v111 = v85;
    MEMORY[0x1F4188790](v37);
    OUTLINED_FUNCTION_2_1();
    uint64_t v43 = v42();
    uint64_t v110 = v85;
    MEMORY[0x1F4188790](v43);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1F418B2E8]);
    char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v45 = v34;
    Swift::String v46 = *v104;
    OUTLINED_FUNCTION_12_1();
    v46();
    OUTLINED_FUNCTION_12_1();
    v46();
    if (v44) {
      break;
    }
    id v47 = (uint64_t (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v48 = type metadata accessor for AttributedString.Runs.Run();
    uint64_t v49 = *(void *)(v48 - 8);
    uint64_t v50 = v103;
    OUTLINED_FUNCTION_2_1();
    v51();
    uint64_t v52 = v47(v112, 0);
    MEMORY[0x1F4188790](v52);
    uint64_t v53 = v45;
    OUTLINED_FUNCTION_2_1();
    v54();
    dispatch thunk of Collection.formIndex(after:)();
    OUTLINED_FUNCTION_26_2();
    v55();
    __swift_storeEnumTagSinglePayload(v50, 0, 1, v48);
    uint64_t EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v50, 1, v48);
    if (EnumTagSinglePayload == 1) {
      goto LABEL_20;
    }
    MEMORY[0x1F4188790](EnumTagSinglePayload);
    OUTLINED_FUNCTION_5_1();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v50, v50, v48);
    uint64_t KeyPath = swift_getKeyPath();
    v85[-2] = MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    lazy protocol witness table accessor for type ContainerAttribute and conformance ContainerAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if (v112[0])
    {
      OUTLINED_FUNCTION_12_1();
      uint64_t v37 = v58();
      uint64_t v39 = v96;
      uint64_t v34 = v45;
    }
    else
    {
      uint64_t v59 = type metadata accessor for AttributeContainer();
      OUTLINED_FUNCTION_4();
      uint64_t v61 = v60;
      MEMORY[0x1F4188790](v62);
      OUTLINED_FUNCTION_2_3();
      uint64_t v111 = v63;
      if (one-time initialization token for containers != -1) {
        swift_once();
      }
      uint64_t v64 = static AttributedString.containers;
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributeContainer?);
      uint64_t v66 = OUTLINED_FUNCTION_8(v65);
      MEMORY[0x1F4188790](v66);
      OUTLINED_FUNCTION_36_4();
      if (v64[2] && (uint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(), (v68 & 1) != 0))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v39, v64[7] + *(void *)(v61 + 72) * v67, v59);
        __swift_storeEnumTagSinglePayload(v39, 0, 1, v59);
        if (__swift_getEnumTagSinglePayload(v39, 1, v59) != 1)
        {
          (*(void (**)(void *, uint64_t, uint64_t))(v61 + 32))(v111, v39, v59);
          uint64_t v110 = v85;
          uint64_t v87 = (void (*)(uint64_t *, void))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
          uint64_t v90 = v85;
          OUTLINED_FUNCTION_0();
          MEMORY[0x1F4188790](v69);
          uint64_t v71 = (char *)v85 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v88 = v61;
          AttributedString.Runs.Run.range.getter();
          uint64_t v72 = type metadata accessor for AttributedString.AttributeMergePolicy();
          uint64_t v89 = v85;
          uint64_t v86 = v72;
          uint64_t v73 = *(void *)(v72 - 8);
          MEMORY[0x1F4188790](v72);
          OUTLINED_FUNCTION_36_4();
          (*(void (**)(uint64_t, void))(v73 + 104))(v39, *MEMORY[0x1E4F272B8]);
          lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, &demangling cache variable for type metadata for Range<AttributedString.Index>);
          uint64_t v87 = (void (*)(uint64_t *, void))AttributedString.subscript.modify();
          AttributedSubstring.mergeAttributes(_:mergePolicy:)();
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v39, v86);
          v87(v112, 0);
          outlined destroy of SystemUpdateNotice?((uint64_t)v71, &demangling cache variable for type metadata for Range<AttributedString.Index>);
          OUTLINED_FUNCTION_26_2();
          v74();
          OUTLINED_FUNCTION_12_1();
          uint64_t v37 = v75();
          goto LABEL_18;
        }
      }
      else
      {
        __swift_storeEnumTagSinglePayload(v39, 1, 1, v59);
      }
      outlined destroy of SystemUpdateNotice?(v39, &demangling cache variable for type metadata for AttributeContainer?);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.conversationKit);
      id v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        v112[0] = v80;
        *(_DWORD *)uint64_t v79 = v93;
        uint64_t v81 = String.init<A>(reflecting:)();
        *(void *)(v79 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v112);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v77, v78, "Invalid container attribute value %s", (uint8_t *)v79, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v80, -1, -1);
        MEMORY[0x1C87760E0](v79, -1, -1);
      }

      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v50, v48);
LABEL_18:
      uint64_t v34 = (uint64_t)v94;
      uint64_t v39 = v96;
    }
  }
  uint64_t v53 = v34;
  uint64_t v83 = type metadata accessor for AttributedString.Runs.Run();
  __swift_storeEnumTagSinglePayload(v103, 1, 1, v83);
LABEL_20:
  outlined destroy of SystemUpdateNotice?(v53, &demangling cache variable for type metadata for IndexingIterator<AttributedString.Runs>);
  OUTLINED_FUNCTION_2_1();
  v84();
  OUTLINED_FUNCTION_28();
}

uint64_t lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void specialized AttributeDynamicLookup.subscript.getter()
{
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

{
  return MEMORY[0x1F40D3128]();
}

{
  return MEMORY[0x1F40E4520]();
}

{
  return MEMORY[0x1F41656F0]();
}

{
  return MEMORY[0x1F40F7D50]();
}

{
  return MEMORY[0x1F40E4528]();
}

void sub_1C31A84A0()
{
}

uint64_t sub_1C31A84BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>)(a1, a2, a3, &demangling cache variable for type metadata for KeyPath<AttributeScopes.ConversationKitAttributes, ContainerAttribute>) & 1;
}

uint64_t sub_1C31A84E0(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>)(a1, a2, &demangling cache variable for type metadata for KeyPath<AttributeScopes.ConversationKitAttributes, ContainerAttribute>);
}

unint64_t lazy protocol witness table accessor for type ContainerAttribute and conformance ContainerAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerAttribute and conformance ContainerAttribute;
  if (!lazy protocol witness table cache variable for type ContainerAttribute and conformance ContainerAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerAttribute and conformance ContainerAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerAttribute and conformance ContainerAttribute;
  if (!lazy protocol witness table cache variable for type ContainerAttribute and conformance ContainerAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerAttribute and conformance ContainerAttribute);
  }
  return result;
}

BOOL ContainerAttribute.Value.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContainerAttribute.Value.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t ContainerAttribute.Value.rawValue.getter()
{
  return 0x7553656369746F6ELL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance ContainerAttribute.Value@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = ContainerAttribute.Value.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContainerAttribute.Value(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContainerAttribute.Value()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContainerAttribute.Value()
{
  return RawRepresentable<>.encode(to:)();
}

char *ContainerAttribute.name.unsafeMutableAddressor()
{
  return static ContainerAttribute.name;
}

uint64_t static ContainerAttribute.name.getter()
{
  swift_beginAccess();
  uint64_t v0 = *(void *)static ContainerAttribute.name;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static ContainerAttribute.name.setter(uint64_t a1, uint64_t a2)
{
  *(void *)static ContainerAttribute.name = a1;
  *(void *)&static ContainerAttribute.name[8] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ContainerAttribute.name.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance ContainerAttribute()
{
  swift_beginAccess();
  uint64_t v0 = *(void *)static ContainerAttribute.name;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for static AttributedStringKey.runBoundaries.getter in conformance ContainerAttribute()
{
  return static AttributedStringKey.runBoundaries.getter();
}

uint64_t protocol witness for static AttributedStringKey.inheritedByAddedText.getter in conformance ContainerAttribute()
{
  return static AttributedStringKey.inheritedByAddedText.getter() & 1;
}

uint64_t protocol witness for static AttributedStringKey.invalidationConditions.getter in conformance ContainerAttribute()
{
  return static AttributedStringKey.invalidationConditions.getter();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance ContainerAttribute()
{
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance ContainerAttribute()
{
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.decodeMarkdown(from:) in conformance ContainerAttribute()
{
  return static MarkdownDecodableAttributedStringKey<>.decodeMarkdown(from:)();
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance ContainerAttribute()
{
  return static MarkdownDecodableAttributedStringKey.markdownName.getter();
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.ConversationKitAttributes()
{
  return MEMORY[0x1C876E8F0]();
}

uint64_t protocol witness for static AttributeScope.encodingConfiguration.getter in conformance AttributeScopes.ConversationKitAttributes()
{
  return MEMORY[0x1C876E900]();
}

uint64_t protocol witness for static DecodingConfigurationProviding.decodingConfiguration.getter in conformance AttributeScopes.ConversationKitAttributes(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes();
  return MEMORY[0x1C876E8F0](a1, v2);
}

uint64_t protocol witness for static EncodingConfigurationProviding.encodingConfiguration.getter in conformance AttributeScopes.ConversationKitAttributes(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes();
  return MEMORY[0x1C876E900](a1, v2);
}

unint64_t lazy protocol witness table accessor for type ContainerAttribute.Value and conformance ContainerAttribute.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value;
  if (!lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value;
  if (!lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value;
  if (!lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value;
  if (!lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value;
  if (!lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerAttribute.Value and conformance ContainerAttribute.Value);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes;
  if (!lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes;
  if (!lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes;
  if (!lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.ConversationKitAttributes and conformance AttributeScopes.ConversationKitAttributes);
  }
  return result;
}

void type metadata accessor for ContainerAttribute()
{
}

unsigned char *storeEnumTagSinglePayload for ContainerAttribute.Value(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C31A8C68);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for ContainerAttribute.Value()
{
}

void type metadata accessor for AttributeScopes.ConversationKitAttributes()
{
}

uint64_t CallDetailsCoordinator.isPresentingDetails.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController);
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_view);
  if (result)
  {
    int v3 = (void *)result;
    id v4 = objc_msgSend((id)result, sel_superview);

    if (v4)
    {
      uint64_t result = (uint64_t)objc_msgSend(v1, sel_presentingViewController);
      if (result)
      {

        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id CallDetailsCoordinator.isCaptioningEnabled.getter()
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  if (objc_msgSend(Strong, sel_respondsToSelector_, sel_isCaptioningEnabled)) {
    id v1 = objc_msgSend(Strong, sel_isCaptioningEnabled);
  }
  else {
    id v1 = 0;
  }
  swift_unknownObjectRelease();
  return v1;
}

Swift::Void __swiftcall CallDetailsCoordinator.captioningStateDidChange()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                          + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController))
                    + 0xD8))();
}

uint64_t CallDetailsCoordinator.shouldHideViewsFromScreenSharing.getter()
{
  id v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_shouldHideViewsFromScreenSharing);
  swift_beginAccess();
  return *v1;
}

void CallDetailsCoordinator.shouldHideViewsFromScreenSharing.setter(char a1)
{
  int v3 = (char *)(v1 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_shouldHideViewsFromScreenSharing);
  swift_beginAccess();
  char v4 = *v3;
  *int v3 = a1;
  CallDetailsCoordinator.shouldHideViewsFromScreenSharing.didset(v4);
}

uint64_t key path getter for CallDetailsCoordinator.shouldHideViewsFromScreenSharing : CallDetailsCoordinator@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x90))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for CallDetailsCoordinator.shouldHideViewsFromScreenSharing : CallDetailsCoordinator(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x98))(*a1);
}

void CallDetailsCoordinator.shouldHideViewsFromScreenSharing.didset(char a1)
{
  int v2 = a1 & 1;
  int v3 = (unsigned __int8 *)(v1 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_shouldHideViewsFromScreenSharing);
  swift_beginAccess();
  if (*v3 != v2) {
    CallDetailsCoordinator.updateViewVisibilityForScreenSharing()();
  }
}

void (*CallDetailsCoordinator.shouldHideViewsFromScreenSharing.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  char v4 = (unsigned char *)(v1 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_shouldHideViewsFromScreenSharing);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *v4;
  return CallDetailsCoordinator.shouldHideViewsFromScreenSharing.modify;
}

void CallDetailsCoordinator.shouldHideViewsFromScreenSharing.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  CallDetailsCoordinator.shouldHideViewsFromScreenSharing.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

char *CallDetailsCoordinator.__allocating_init(hostViewController:controlsManager:deferredPresentationManager:)()
{
  OUTLINED_FUNCTION_3_74();
  id v1 = objc_allocWithZone(v0);
  swift_getObjectType();
  int v2 = (void *)OUTLINED_FUNCTION_2_7();
  return specialized CallDetailsCoordinator.init(hostViewController:controlsManager:deferredPresentationManager:)(v2, v3, v4, v5);
}

char *CallDetailsCoordinator.init(hostViewController:controlsManager:deferredPresentationManager:)()
{
  OUTLINED_FUNCTION_3_74();
  swift_getObjectType();
  uint64_t v0 = (void *)OUTLINED_FUNCTION_2_7();
  return specialized CallDetailsCoordinator.init(hostViewController:controlsManager:deferredPresentationManager:)(v0, v1, v2, v3);
}

id static CallDetailsCoordinator.makeDetailsNavigationController(using:)(void *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDDetailsNavigationController());
  int v3 = a1;
  id v4 = ConversationHUDDetailsNavigationController.init(controlsManager:shouldHaveBackgroundMaterial:)((uint64_t)v3, 1);
  objc_msgSend(v4, sel_setOverrideUserInterfaceStyle_, 2);
  uint64_t v5 = *(void (**)(id, char **))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x450);
  id v6 = v4;
  v5(v4, &protocol witness table for ConversationHUDDetailsNavigationController);
  return v6;
}

Swift::Void __swiftcall CallDetailsCoordinator.start(withReason:)(Swift::String withReason)
{
  uint64_t v4 = v1;
  OUTLINED_FUNCTION_3_74();
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_0_58();
  if ((*(uint64_t (**)(void))(v6 + 120))())
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationControls);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v8)) {
      goto LABEL_16;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Ignoring request to start CallDetailsCoordinator because call details are already being presented";
LABEL_15:
    _os_log_impl(&dword_1C2F90000, oslog, v8, v10, v9, 2u);
    OUTLINED_FUNCTION_3();
LABEL_16:

    return;
  }
  unsigned int v11 = objc_msgSend((id)swift_unknownObjectUnownedLoadStrong(), sel_isReadyToShowCallDetails);
  swift_unknownObjectRelease();
  if (!v11)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationControls);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v8)) {
      goto LABEL_16;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Ignoring request to start CallDetailsCoordinator because the host view controller isn't ready";
    goto LABEL_15;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationControls);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    OUTLINED_FUNCTION_4_64(4.8149e-34);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_6_58(&dword_1C2F90000, v15, v16, "Presenting call details with reason: “%s”");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  (*(void (**)(void))((*v5 & *Strong) + 0x330))(0);

  uint64_t v19 = *(void **)(v4 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController);
  (*(void (**)(uint64_t))((*v5 & *v19) + 0x90))(1);
  CallDetailsCoordinator.updateViewVisibilityForScreenSharing()();
  uint64_t v20 = (void *)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(v20, sel_presentViewController_animated_completion_, v19, 1, 0);
}

Swift::Void __swiftcall CallDetailsCoordinator.stop(withReason:)(Swift::String withReason)
{
  uint64_t v4 = v1;
  OUTLINED_FUNCTION_3_74();
  OUTLINED_FUNCTION_0_58();
  if ((*(uint64_t (**)(void))(v5 + 120))())
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationControls);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      OUTLINED_FUNCTION_4_64(4.8149e-34);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_6_58(&dword_1C2F90000, v9, v10, "Dismissing call details with reason: “%s”");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unsigned int v11 = *(void **)(v4 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController);
    OUTLINED_FUNCTION_0_58();
    (*(void (**)(void))(v12 + 144))(0);
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = (uint64_t)partial apply for closure #1 in CallDetailsCoordinator.stop(withReason:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    id aBlock[3] = (uint64_t)&block_descriptor_35;
    os_log_type_t v14 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v11, sel_dismissViewControllerAnimated_completion_, 1, v14);
    _Block_release(v14);
  }
}

void closure #1 in CallDetailsCoordinator.stop(withReason:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    CallDetailsCoordinator.updateViewVisibilityForScreenSharing()();
  }
}

uint64_t @objc CallDetailsCoordinator.start(withReason:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease();
}

void CallDetailsCoordinator.updateViewVisibilityForScreenSharing()()
{
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_161();
  if (((*(uint64_t (**)(void))(v2 + 144))() & 1) == 0
    || (uint64_t v3 = *(void **)(v0 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController),
        OUTLINED_FUNCTION_161(),
        ((*(uint64_t (**)(void))(v4 + 136))() & 1) == 0))
  {
    id v7 = objc_msgSend(*(id *)(v1 + OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController), sel_view);
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = objc_msgSend(v7, sel_layer);

      objc_msgSend(v9, sel_setDisableUpdateMask_, 0);
      goto LABEL_7;
    }
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  id v5 = objc_msgSend(v3, sel_view);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  id v9 = objc_msgSend(v5, sel_layer);

  objc_msgSend(v9, sel_setDisableUpdateMask_, 16);
LABEL_7:
}

Swift::Void __swiftcall CallDetailsCoordinator.wantsDismissal()()
{
  (*(void (**)(unint64_t, unint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))(0xD000000000000013, 0x80000001C379E960);
}

id CallDetailsCoordinator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CallDetailsCoordinator.init()()
{
}

id CallDetailsCoordinator.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallDetailsCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *specialized CallDetailsCoordinator.init(hostViewController:controlsManager:deferredPresentationManager:)(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  swift_getObjectType();
  a4[OBJC_IVAR___CNKCallDetailsCoordinatorInternal_shouldHideViewsFromScreenSharing] = 0;
  swift_unknownObjectUnownedInit();
  swift_unknownObjectUnownedInit();
  swift_unknownObjectUnownedInit();
  id v7 = a4;
  *(void *)&v7[OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController] = static CallDetailsCoordinator.makeDetailsNavigationController(using:)(a2);

  v14.id receiver = v7;
  v14.super_class = (Class)type metadata accessor for CallDetailsCoordinator();
  uint64_t v8 = (char *)objc_msgSendSuper2(&v14, sel_init);
  id v9 = *(void **)&v8[OBJC_IVAR___CNKCallDetailsCoordinatorInternal_detailsNavigationController];
  uint64_t v10 = *(void (**)(char *))((*MEMORY[0x1E4FBC8C8] & *v9) + 0x78);
  unsigned int v11 = v8;
  uint64_t v12 = v9;
  v10(v8);

  swift_unknownObjectRelease();
  return v11;
}

uint64_t sub_1C31AA084()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CallDetailsCoordinator.stop(withReason:)()
{
  closure #1 in CallDetailsCoordinator.stop(withReason:)(v0);
}

uint64_t type metadata accessor for CallDetailsCoordinator()
{
  return self;
}

uint64_t method lookup function for CallDetailsCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallDetailsCoordinator);
}

uint64_t dispatch thunk of CallDetailsCoordinator.isPresentingDetails.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.isCaptioningEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.captioningStateDidChange()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.shouldHideViewsFromScreenSharing.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.shouldHideViewsFromScreenSharing.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.shouldHideViewsFromScreenSharing.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.__allocating_init(hostViewController:controlsManager:deferredPresentationManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.start(withReason:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.stop(withReason:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CallDetailsCoordinator.wantsDismissal()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t outlined destroy of unowned CNKCallDetailsDeferredPresentationManager(uint64_t a1)
{
  return a1;
}

__n128 BezelMetrics.aspectRatio.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t BezelMetrics.aspectRatio.setter(uint64_t a1)
{
  return outlined init with take of AspectRatio(a1, v1);
}

uint64_t (*BezelMetrics.aspectRatio.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double BezelMetrics.cornerRadius.getter()
{
  return *(double *)(v0 + 40);
}

void BezelMetrics.cornerRadius.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*BezelMetrics.cornerRadius.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

double BezelMetrics.init(aspectRatio:cornerRadius:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  outlined init with take of AspectRatio(a1, (uint64_t)v8);
  char v5 = v9;
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 32) = v5;
  *(double *)(a2 + 40) = a3;
  return result;
}

double BezelMetrics.scaledBounds(in:orientation:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (UIInterfaceOrientationIsPortrait(a1))
  {
    outlined init with take of AspectRatio(v5, (uint64_t)v16);
    outlined init with take of AspectRatio((uint64_t)v16, (uint64_t)v17);
    double v9 = 1.0;
    double v10 = 1.0;
    if ((v18 & 1) == 0)
    {
      double v9 = *(double *)v17;
      double v10 = *(double *)&v17[1];
    }
  }
  else
  {
    outlined init with take of AspectRatio(v5, (uint64_t)v16);
    outlined init with take of AspectRatio((uint64_t)v16, (uint64_t)v17);
    double v9 = 1.0;
    double v10 = 1.0;
    if ((v18 & 1) == 0)
    {
      double v9 = *(double *)&v17[2];
      double v10 = *(double *)&v17[3];
    }
  }
  static ProposedViewSize.unspecified.getter();
  if ((static ProposedViewSize.== infix(_:_:)() & 1) == 0)
  {
    BOOL v11 = a4 == 0.0 && v9 == 0.0;
    double v12 = a4 / v9;
    if (v11) {
      double v12 = INFINITY;
    }
    BOOL v13 = a5 == 0.0 && v10 == 0.0;
    double v14 = a5 / v10;
    if (v13) {
      double v14 = INFINITY;
    }
    if (v14 >= v12) {
      double v14 = v12;
    }
    CGSize.scaled(by:)(v14, v9);
  }
  return a2;
}

double BezelMetrics.scaledCornerRadius(in:orientation:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (UIInterfaceOrientationIsPortrait(a1))
  {
    outlined init with take of AspectRatio(v5, (uint64_t)v14);
    outlined init with take of AspectRatio((uint64_t)v14, (uint64_t)v15);
    if (v16) {
      double v11 = 1.0;
    }
    else {
      double v11 = v15[0];
    }
  }
  else
  {
    outlined init with take of AspectRatio(v5, (uint64_t)v14);
    outlined init with take of AspectRatio((uint64_t)v14, (uint64_t)v15);
    double v11 = 1.0;
    if ((v16 & 1) == 0) {
      double v11 = v15[2];
    }
  }
  BezelMetrics.scaledBounds(in:orientation:)(a1, a2, a3, a4, a5);
  return *(double *)(v5 + 40) * (v12 / v11);
}

double one-time initialization function for forCurrentDisplay()
{
  closure #1 in variable initialization expression of static BezelMetrics.forCurrentDisplay((uint64_t)v1);
  static BezelMetrics.forCurrentDisplaCGFloat y = v1[0];
  *(_OWORD *)algn_1EA37E010 = v1[1];
  double result = *(double *)&v2;
  xmmword_1EA37E020 = v2;
  return result;
}

void closure #1 in variable initialization expression of static BezelMetrics.forCurrentDisplay(uint64_t a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_mainScreen);
  id v3 = objc_msgSend(v2, sel_fixedCoordinateSpace);

  objc_msgSend(v3, sel_bounds);
  double v5 = v4;
  double v7 = v6;
  swift_unknownObjectRelease();
  if (v7 >= v5) {
    double v8 = v5;
  }
  else {
    double v8 = v7;
  }
  if (v7 >= v5) {
    double v9 = v7;
  }
  else {
    double v9 = v5;
  }
  if (v5 >= v7) {
    double v10 = v5;
  }
  else {
    double v10 = v7;
  }
  if (v5 < v7) {
    double v7 = v5;
  }
  id v11 = objc_msgSend(self, sel_currentTraitCollection);
  objc_msgSend(v11, sel_displayCornerRadius);
  uint64_t v13 = v12;

  *(double *)a1 = v8;
  *(double *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = v10;
  *(double *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v13;
}

long long *BezelMetrics.forCurrentDisplay.unsafeMutableAddressor()
{
  if (one-time initialization token for forCurrentDisplay != -1) {
    swift_once();
  }
  return &static BezelMetrics.forCurrentDisplay;
}

double static BezelMetrics.forCurrentDisplay.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for forCurrentDisplay != -1) {
    swift_once();
  }
  char v2 = xmmword_1EA37E020;
  double result = *((double *)&xmmword_1EA37E020 + 1);
  long long v4 = *(_OWORD *)algn_1EA37E010;
  *(_OWORD *)a1 = static BezelMetrics.forCurrentDisplay;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  *(double *)(a1 + 40) = result;
  return result;
}

void BezelMetrics.init(size:cornerRadius:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = a4;
}

BOOL static BezelEffect.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void BezelEffect.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int BezelEffect.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BezelEffect(char *a1, char *a2)
{
  return static BezelEffect.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BezelEffect()
{
  return BezelEffect.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance BezelEffect(uint64_t a1)
{
  BezelEffect.hash(into:)(a1, *v1);
}

BOOL static BezelShieldMaterial.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void BezelShieldMaterial.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int BezelShieldMaterial.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BezelShieldMaterial(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static BezelShieldMaterial.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BezelShieldMaterial()
{
  return BezelShieldMaterial.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance BezelShieldMaterial(uint64_t a1)
{
  BezelShieldMaterial.hash(into:)(a1, *v1);
}

void *BezelShieldMaterialKey.defaultValue.unsafeMutableAddressor()
{
  return &static BezelShieldMaterialKey.defaultValue;
}

uint64_t static BezelShieldMaterialKey.defaultValue.getter()
{
  return 0;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BezelShieldMaterialKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type BezelShieldMaterial and conformance BezelShieldMaterial();
  return MEMORY[0x1F40F8670](a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.bezelShieldMaterial.getter()
{
  lazy protocol witness table accessor for type BezelShieldMaterialKey and conformance BezelShieldMaterialKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

uint64_t key path getter for EnvironmentValues.bezelShieldMaterial : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.bezelShieldMaterial.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.bezelShieldMaterial : EnvironmentValues()
{
  return EnvironmentValues.bezelShieldMaterial.setter();
}

uint64_t EnvironmentValues.bezelShieldMaterial.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t (*EnvironmentValues.bezelShieldMaterial.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type BezelShieldMaterialKey and conformance BezelShieldMaterialKey();
  EnvironmentValues.subscript.getter();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 17);
  return EnvironmentValues.bezelShieldMaterial.modify;
}

uint64_t EnvironmentValues.bezelShieldMaterial.modify(uint64_t a1)
{
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 16);
  return EnvironmentValues.subscript.setter();
}

uint64_t View.bezelShieldMaterial(_:)()
{
  return swift_release();
}

uint64_t one-time initialization function for defaultValue()
{
  uint64_t result = static Color.blue.getter();
  static BezelOutlineColorKey.defaultValue = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = static Platform.current.getter();
  static LayoutIdiomEnvironmentKey.defaultValue = (result - 4) < 0xFDu;
  return result;
}

uint64_t *BezelOutlineColorKey.defaultValue.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return &static BezelOutlineColorKey.defaultValue;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance BezelOutlineColorKey@<X0>(uint64_t *a1@<X8>)
{
  *a1 = *BezelOutlineColorKey.defaultValue.unsafeMutableAddressor();
  return swift_retain();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BezelOutlineColorKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Color and conformance Color();
  return MEMORY[0x1F40F8670](a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.bezelOutlineColor.getter()
{
  lazy protocol witness table accessor for type BezelOutlineColorKey and conformance BezelOutlineColorKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

uint64_t key path getter for EnvironmentValues.bezelOutlineColor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.bezelOutlineColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.bezelOutlineColor : EnvironmentValues()
{
  return EnvironmentValues.bezelOutlineColor.setter();
}

uint64_t EnvironmentValues.bezelOutlineColor.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t (*EnvironmentValues.bezelOutlineColor.modify(uint64_t a1))(void *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = lazy protocol witness table accessor for type BezelOutlineColorKey and conformance BezelOutlineColorKey();
  EnvironmentValues.subscript.getter();
  return EnvironmentValues.bezelOutlineColor.modify;
}

uint64_t EnvironmentValues.bezelOutlineColor.modify(void *a1, char a2)
{
  a1[1] = *a1;
  if ((a2 & 1) == 0) {
    return EnvironmentValues.subscript.setter();
  }
  swift_retain();
  EnvironmentValues.subscript.setter();
  return swift_release();
}

uint64_t View.bezelOutlineColor(_:)()
{
  return swift_release();
}

id HitTestPassthroughLayer.init()()
{
  v3.id receiver = v0;
  v3.super_class = (Class)type metadata accessor for HitTestPassthroughLayer();
  id v1 = objc_msgSendSuper2(&v3, sel_init);
  objc_msgSend(v1, sel_setAllowsHitTesting_, 0);
  return v1;
}

void HitTestPassthroughLayer.init(coder:)()
{
}

uint64_t sub_1C31AAFE0(uint64_t a1)
{
  id v3 = v1;
  return a1;
}

void HitTestPassthroughLayer.init(layer:)()
{
}

id HitTestPassthroughLayer.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for HitTestPassthroughLayer);
}

uint64_t static HitTestPassthroughView.layerClass.getter()
{
  return type metadata accessor for HitTestPassthroughLayer();
}

id HitTestPassthroughView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v11.id receiver = v4;
  v11.super_class = (Class)type metadata accessor for HitTestPassthroughView();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v9, sel_setUserInteractionEnabled_, 0);
  return v9;
}

void HitTestPassthroughView.init(coder:)()
{
}

uint64_t sub_1C31AB200(uint64_t a1)
{
  id v3 = v1;
  return a1;
}

id HitTestPassthroughView.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for HitTestPassthroughView);
}

uint64_t @objc static HitTestPassthroughView.layerClass.getter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_getObjCClassMetadata();
  a3();
  return swift_getObjCClassFromMetadata();
}

uint64_t static BackdropView.layerClass.getter()
{
  return type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CABackdropLayer);
}

uint64_t BackdropView.backdropLayer.getter()
{
  id v1 = objc_msgSend(v0, sel_layer);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result)
  {

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id BackdropView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v10.id receiver = v4;
  v10.super_class = (Class)type metadata accessor for BackdropView();
  return objc_msgSendSuper2(&v10, sel_initWithFrame_, a1, a2, a3, a4);
}

id BackdropView.init(coder:)(void *a1)
{
  v5.id receiver = v1;
  v5.super_class = (Class)type metadata accessor for BackdropView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id BackdropView.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for BackdropView);
}

id BezelShieldMaterial.shieldEffect.getter(char a1)
{
  id result = self;
  id v3 = sel_effectWithBlurRadius_;
  if (a1) {
    goto LABEL_6;
  }
  id result = objc_msgSend(result, sel_effectWithBlurRadius_, 72.0);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  long long v4 = result;
  v17[0] = xmmword_1C3773C40;
  v17[1] = xmmword_1C3773C50;
  long long v17[2] = xmmword_1C3773C60;
  void v17[3] = xmmword_1C3773C70;
  void v17[4] = xmmword_1C376D040;
  id result = objc_msgSend(self, sel__colorEffectCAMatrix_, v17);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  objc_super v5 = result;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIVisualEffect);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1C3769610;
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + 40) = v5;
  *(void *)&v17[0] = v6;
  specialized Array._endMutation()();
  uint64_t v7 = *(void *)&v17[0];
  id v8 = v4;
  id v9 = v5;
  id result = @nonobjc UIVisualEffect.init(combiningEffects:)(v7);
  if (result)
  {
LABEL_8:
    id v16 = result;

    return v16;
  }
  __break(1u);
LABEL_6:
  id result = objc_msgSend(result, v3, 20.0);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_super v10 = result;
  id v11 = objc_msgSend(self, sel_whiteColor);
  id v12 = objc_msgSend(v11, sel_colorWithAlphaComponent_, 0.2);

  id v13 = objc_msgSend(self, sel_colorEffectSubtract_, v12);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIVisualEffect);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C3769610;
  *(void *)(v14 + 32) = v10;
  *(void *)(v14 + 40) = v13;
  *(void *)&v17[0] = v14;
  specialized Array._endMutation()();
  uint64_t v15 = *(void *)&v17[0];
  id v9 = v13;
  id v8 = v10;
  id result = @nonobjc UIVisualEffect.init(combiningEffects:)(v15);
  if (result) {
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
  return result;
}

id BezelShieldEffectView.effectView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView____lazy_storage___effectView;
  char v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView____lazy_storage___effectView);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView____lazy_storage___effectView);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F00]), sel_init);
    objc_super v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    char v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id BezelShieldEffectView.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView____lazy_storage___effectView] = 0;
  v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_material] = 0;
  v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_isActive] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_customCornerRadius] = 0;
  v4.id receiver = v0;
  v4.super_class = (Class)type metadata accessor for BezelShieldEffectView();
  id v1 = objc_msgSendSuper2(&v4, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v2 = BezelShieldEffectView.effectView.getter();
  objc_msgSend(v1, sel_addSubview_, v2);

  return v1;
}

void BezelShieldEffectView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView____lazy_storage___effectView] = 0;
  v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_material] = 0;
  v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_isActive] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_customCornerRadius] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void BezelShieldEffectView.layoutSubviews()()
{
  v5.id receiver = v0;
  v5.super_class = (Class)type metadata accessor for BezelShieldEffectView();
  objc_msgSendSuper2(&v5, sel_layoutSubviews);
  id v1 = BezelShieldEffectView.effectView.getter();
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v6);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setBounds_, 0.0, 0.0, Width, CGRectGetHeight(v7));

  id v3 = BezelShieldEffectView.effectView.getter();
  objc_msgSend(v0, sel_bounds);
  double MidX = CGRectGetMidX(v8);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v3, sel_setCenter_, MidX, CGRectGetMidY(v9));
}

void BezelShieldEffectView.updateVisualEffectView()()
{
  int v1 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_isActive);
  id v4 = BezelShieldEffectView.effectView.getter();
  if (v1 == 1)
  {
    id v2 = BezelShieldMaterial.shieldEffect.getter(*(unsigned char *)(v0
                                                          + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_material));
    objc_msgSend(v4, sel_setEffect_, v2);

    id v3 = v2;
  }
  else
  {
    objc_msgSend(v4, sel_setEffect_, 0);
    id v3 = v4;
  }
}

id BezelShieldEffectView.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for BezelShieldEffectView);
}

id BezelGlowEffectView.glowMaskBaseView.getter()
{
  return BezelGlowEffectView.glowMaskBaseView.getter(&OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskBaseView, (uint64_t (*)(uint64_t))closure #1 in BezelGlowEffectView.glowMaskBaseView.getter);
}

id closure #1 in BezelGlowEffectView.glowMaskBaseView.getter(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  uint64_t v3 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = CAFilter.__allocating_init(type:)(v4, v5);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  CGRect v8 = (void *)MEMORY[0x1C87730B0](0xD000000000000013, 0x80000001C3796410);
  objc_msgSend(v6, sel_setValue_forKey_, isa, v8);

  char v9 = static Platform.current.getter();
  double v10 = 100.0;
  if (v9 == 1) {
    double v10 = 200.0;
  }
  *(void *)&v19.d = MEMORY[0x1E4FBB3D0];
  v19.a = v10;
  __swift_project_boxed_opaque_existential_1(&v19, MEMORY[0x1E4FBB3D0]);
  uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  id v12 = (void *)MEMORY[0x1C87730B0](0x6461527475706E69, 0xEB00000000737569);
  objc_msgSend(v6, sel_setValue_forKey_, v11, v12);
  swift_unknownObjectRelease();

  id v13 = objc_msgSend(v2, sel_layer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C3769620;
  *(void *)(v14 + 56) = v3;
  *(void *)(v14 + 32) = v6;
  id v15 = v6;
  outlined bridged method (mbnn) of @objc CALayer.filters.setter(v14, v13);

  id v16 = objc_msgSend(v2, sel_layer);
  objc_msgSend(v16, sel_setCornerCurve_, *MEMORY[0x1E4F39EA8]);

  id v17 = objc_msgSend(self, sel_blackColor);
  objc_msgSend(v2, sel_setBackgroundColor_, v17);

  CGAffineTransformMakeScale(&v19, *(CGFloat *)(a1+ OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_glowMaskBaseViewScale), *(CGFloat *)(a1+ OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_glowMaskBaseViewScale+ 8));
  objc_msgSend(v2, sel_setTransform_, &v19);

  return v2;
}

id BezelGlowEffectView.glowMaskCutoutView.getter()
{
  return BezelGlowEffectView.glowMaskCutoutView.getter(&OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskCutoutView, (uint64_t (*)(void))closure #1 in BezelGlowEffectView.glowMaskCutoutView.getter);
}

id closure #1 in BezelGlowEffectView.glowMaskCutoutView.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  id v1 = objc_msgSend(v0, sel_layer);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = CAFilter.__allocating_init(type:)(v2, v3);
  objc_msgSend(v1, sel_setCompositingFilter_, v4);

  id v5 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v5, sel_setCornerCurve_, *MEMORY[0x1E4F39EA8]);

  id v6 = objc_msgSend(self, sel_blackColor);
  objc_msgSend(v0, sel_setBackgroundColor_, v6);

  return v0;
}

id BezelGlowEffectView.glowMaskView.getter()
{
  return BezelGlowEffectView.glowMaskBaseView.getter(&OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskView, (uint64_t (*)(uint64_t))closure #1 in BezelGlowEffectView.glowMaskView.getter);
}

id closure #1 in BezelGlowEffectView.glowMaskView.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  id v1 = BezelGlowEffectView.glowMaskBaseView.getter();
  objc_msgSend(v0, sel_addSubview_, v1);

  id v2 = BezelGlowEffectView.glowMaskCutoutView.getter();
  objc_msgSend(v0, sel_addSubview_, v2);

  return v0;
}

id BezelGlowEffectView.backdropView.getter()
{
  return BezelGlowEffectView.glowMaskBaseView.getter(&OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___backdropView, (uint64_t (*)(uint64_t))closure #1 in BezelGlowEffectView.backdropView.getter);
}

id closure #1 in BezelGlowEffectView.backdropView.getter()
{
  type metadata accessor for BackdropView();
  id v0 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v1 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = CAFilter.__allocating_init(type:)(v2, v3);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v6 = (void *)MEMORY[0x1C87730B0](0xD000000000000013, 0x80000001C3796410);
  objc_msgSend(v4, sel_setValue_forKey_, isa, v6);

  Class v7 = Bool._bridgeToObjectiveC()().super.super.isa;
  CGRect v8 = (void *)MEMORY[0x1C87730B0](0x7261487475706E69, 0xEE00736567644564);
  objc_msgSend(v4, sel_setValue_forKey_, v7, v8);

  Class v9 = Int._bridgeToObjectiveC()().super.super.isa;
  double v10 = (void *)MEMORY[0x1C87730B0](0x6461527475706E69, 0xEB00000000737569);
  objc_msgSend(v4, sel_setValue_forKey_, v9, v10);

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = CAFilter.__allocating_init(type:)(v11, v12);
  v25[0] = xmmword_1C3773C80;
  v25[1] = xmmword_1C3773C90;
  v25[2] = xmmword_1C3773CA0;
  v25[3] = xmmword_1C3773CB0;
  uint64_t v25[4] = xmmword_1C376D040;
  id v14 = objc_msgSend(self, sel_valueWithCAColorMatrix_, v25);
  id v15 = (void *)MEMORY[0x1C87730B0](0xD000000000000010, 0x80000001C3796430);
  objc_msgSend(v13, sel_setValue_forKey_, v14, v15);

  id v16 = objc_msgSend(v0, sel_layer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C37696D0;
  *(void *)(v17 + 32) = v4;
  *(void *)(v17 + 88) = v1;
  *(void *)(v17 + 56) = v1;
  *(void *)(v17 + 64) = v13;
  id v18 = v4;
  id v19 = v13;
  outlined bridged method (mbnn) of @objc CALayer.filters.setter(v17, v16);

  id v20 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v20, sel_setAllowsHitTesting_, 0);

  uint64_t v21 = (void *)BackdropView.backdropLayer.getter();
  outlined bridged method (mbnn) of @objc CABackdropLayer.groupName.setter(0xD000000000000036, 0x80000001C379EF80, v21);

  id v22 = v0;
  id v23 = BezelGlowEffectView.glowMaskView.getter();
  objc_msgSend(v22, sel_setMaskView_, v23);

  return v22;
}

void BezelShieldEffectView.customCornerRadius.didset(uint64_t (*a1)(void), void *a2, SEL *a3)
{
  id v6 = (id)a1();
  objc_msgSend(v6, *a3, *(double *)(v3 + *a2));
}

void BezelGlowEffectView.customCornerRadius.didset()
{
  id v1 = BezelGlowEffectView.glowMaskBaseView.getter();
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customCornerRadius;
  objc_msgSend(v1, sel__setContinuousCornerRadius_, *(double *)(v0+ OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customCornerRadius));

  id v3 = BezelGlowEffectView.glowMaskCutoutView.getter();
  objc_msgSend(v3, sel__setContinuousCornerRadius_, *(double *)(v0 + v2));
}

id BezelGlowEffectView.init()()
{
  *(_OWORD *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_glowMaskBaseViewScale] = xmmword_1C3773CC0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskBaseView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskCutoutView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___backdropView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customAlpha] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customCornerRadius] = 0;
  v4.id receiver = v0;
  v4.super_class = (Class)type metadata accessor for BezelGlowEffectView();
  id v1 = objc_msgSendSuper2(&v4, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v2 = BezelGlowEffectView.backdropView.getter();
  objc_msgSend(v1, sel_addSubview_, v2);

  return v1;
}

void BezelGlowEffectView.layoutSubviews()()
{
  v90.id receiver = v0;
  v90.super_class = (Class)type metadata accessor for BezelGlowEffectView();
  objc_msgSendSuper2(&v90, sel_layoutSubviews);
  id v1 = BezelGlowEffectView.backdropView.getter();
  objc_msgSend(v0, sel_bounds);
  CGFloat v2 = CGRectGetWidth(v91) + 200.0;
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setBounds_, 0.0, 0.0, v2, CGRectGetHeight(v92) + 200.0);

  id v3 = BezelGlowEffectView.backdropView.getter();
  objc_msgSend(v0, sel_bounds);
  double MidX = CGRectGetMidX(v93);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v3, sel_setCenter_, MidX, CGRectGetMidY(v94));

  id v5 = BezelGlowEffectView.glowMaskView.getter();
  id v6 = BezelGlowEffectView.backdropView.getter();
  objc_msgSend(v6, sel_bounds);
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;

  objc_msgSend(v5, sel_setBounds_, v8, v10, v12, v14);
  id v15 = BezelGlowEffectView.glowMaskView.getter();
  id v16 = BezelGlowEffectView.backdropView.getter();
  objc_msgSend(v16, sel_bounds);
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;

  v95.origin.CGFloat x = v18;
  v95.origin.CGFloat y = v20;
  v95.size.CGFloat width = v22;
  v95.size.CGFloat height = v24;
  double v25 = CGRectGetMidX(v95);
  id v26 = BezelGlowEffectView.backdropView.getter();
  objc_msgSend(v26, sel_bounds);
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  CGFloat v34 = v33;

  v96.origin.CGFloat x = v28;
  v96.origin.CGFloat y = v30;
  v96.size.CGFloat width = v32;
  v96.size.CGFloat height = v34;
  objc_msgSend(v15, sel_setCenter_, v25, CGRectGetMidY(v96));

  objc_msgSend(v0, sel_bounds);
  double v36 = v35;
  double v38 = v37;
  double v40 = v39;
  double v42 = v41;
  double v43 = *(double *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_glowMaskBaseViewScale];
  double v44 = *(double *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_glowMaskBaseViewScale
                     + 8];
  static UnitPoint.center.getter();
  double v47 = v38 + v42 * v46 - v42 * v44 * v46 - (v36 + v40 * v45 - v40 * v43 * v45);
  id v48 = BezelGlowEffectView.glowMaskBaseView.getter();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v48, sel_setBounds_);

  id v49 = BezelGlowEffectView.glowMaskBaseView.getter();
  id v50 = BezelGlowEffectView.glowMaskView.getter();
  objc_msgSend(v50, sel_bounds);
  CGFloat v52 = v51;
  CGFloat v54 = v53;
  CGFloat v56 = v55;
  CGFloat v58 = v57;

  v97.origin.CGFloat x = v52;
  v97.origin.CGFloat y = v54;
  v97.size.CGFloat width = v56;
  v97.size.CGFloat height = v58;
  double v59 = CGRectGetMidX(v97);
  id v60 = BezelGlowEffectView.glowMaskView.getter();
  objc_msgSend(v60, sel_bounds);
  CGFloat v62 = v61;
  CGFloat v64 = v63;
  CGFloat v66 = v65;
  CGFloat v68 = v67;

  v98.origin.CGFloat x = v62;
  v98.origin.CGFloat y = v64;
  v98.size.CGFloat width = v66;
  v98.size.CGFloat height = v68;
  objc_msgSend(v49, sel_setCenter_, v59, CGRectGetMidY(v98) - v47);

  id v69 = BezelGlowEffectView.glowMaskCutoutView.getter();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v69, sel_setBounds_);

  id v70 = BezelGlowEffectView.glowMaskCutoutView.getter();
  id v71 = BezelGlowEffectView.glowMaskView.getter();
  objc_msgSend(v71, sel_bounds);
  CGFloat v73 = v72;
  CGFloat v75 = v74;
  CGFloat v77 = v76;
  CGFloat v79 = v78;

  v99.origin.CGFloat x = v73;
  v99.origin.CGFloat y = v75;
  v99.size.CGFloat width = v77;
  v99.size.CGFloat height = v79;
  double v80 = CGRectGetMidX(v99);
  id v81 = BezelGlowEffectView.glowMaskView.getter();
  objc_msgSend(v81, sel_bounds);
  CGFloat v83 = v82;
  CGFloat v85 = v84;
  CGFloat v87 = v86;
  CGFloat v89 = v88;

  v100.origin.CGFloat x = v83;
  v100.origin.CGFloat y = v85;
  v100.size.CGFloat width = v87;
  v100.size.CGFloat height = v89;
  objc_msgSend(v70, sel_setCenter_, v80, CGRectGetMidY(v100));
}

void BezelGlowEffectView.__ivar_destroyer()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskBaseView));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskCutoutView));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___glowMaskView));
  id v1 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView____lazy_storage___backdropView);
}

id BezelGlowEffectView.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for BezelGlowEffectView);
}

id BezelHighlightEffectView.highlightMaskView.getter()
{
  return BezelGlowEffectView.glowMaskCutoutView.getter(&OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView____lazy_storage___highlightMaskView, (uint64_t (*)(void))closure #1 in BezelHighlightEffectView.highlightMaskView.getter);
}

id BezelGlowEffectView.glowMaskCutoutView.getter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  objc_super v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2();
    double v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    objc_super v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in BezelHighlightEffectView.highlightMaskView.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init);
  id v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_setBorderWidth_, 1.0);

  id v2 = objc_msgSend(v0, sel_layer);
  GenericGraCGFloat y = CGColorCreateGenericGray(1.0, 1.0);
  objc_msgSend(v2, sel_setBorderColor_, GenericGray);

  objc_msgSend(v0, sel_setBackgroundColor_, 0);
  return v0;
}

id BezelHighlightEffectView.backdropView.getter()
{
  return BezelGlowEffectView.glowMaskBaseView.getter(&OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView____lazy_storage___backdropView, (uint64_t (*)(uint64_t))closure #1 in BezelHighlightEffectView.backdropView.getter);
}

id BezelGlowEffectView.glowMaskBaseView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  objc_super v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    double v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    objc_super v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in BezelHighlightEffectView.backdropView.getter()
{
  type metadata accessor for BackdropView();
  id v0 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v1 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = CAFilter.__allocating_init(type:)(v2, v3);
  v15[0] = xmmword_1C3773CD0;
  v15[1] = xmmword_1C3773CE0;
  long long v15[2] = xmmword_1C3773CF0;
  v15[3] = xmmword_1C3773D00;
  double v15[4] = xmmword_1C376D040;
  id v5 = objc_msgSend(self, sel_valueWithCAColorMatrix_, v15);
  id v6 = (void *)MEMORY[0x1C87730B0](0xD000000000000010, 0x80000001C3796430);
  objc_msgSend(v4, sel_setValue_forKey_, v5, v6);

  id v7 = objc_msgSend(v0, sel_layer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
  *(void *)(v8 + 56) = v1;
  *(void *)(v8 + 32) = v4;
  id v9 = v4;
  outlined bridged method (mbnn) of @objc CALayer.filters.setter(v8, v7);

  id v10 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v10, sel_setAllowsHitTesting_, 0);

  double v11 = (void *)BackdropView.backdropLayer.getter();
  outlined bridged method (mbnn) of @objc CABackdropLayer.groupName.setter(0xD000000000000036, 0x80000001C379EF80, v11);

  id v12 = v0;
  id v13 = BezelHighlightEffectView.highlightMaskView.getter();
  objc_msgSend(v12, sel_setMaskView_, v13);

  return v12;
}

id BezelHighlightEffectView.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView____lazy_storage___highlightMaskView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView____lazy_storage___backdropView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customAlpha] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customCornerRadius] = 0;
  v4.id receiver = v0;
  v4.super_class = (Class)type metadata accessor for BezelHighlightEffectView();
  id v1 = objc_msgSendSuper2(&v4, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v2 = BezelHighlightEffectView.backdropView.getter();
  objc_msgSend(v1, sel_addSubview_, v2);

  return v1;
}

void BezelHighlightEffectView.layoutSubviews()()
{
  v35.id receiver = v0;
  v35.super_class = (Class)type metadata accessor for BezelHighlightEffectView();
  objc_msgSendSuper2(&v35, sel_layoutSubviews);
  id v1 = BezelHighlightEffectView.backdropView.getter();
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v36);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setBounds_, 0.0, 0.0, Width, CGRectGetHeight(v37));

  id v3 = BezelHighlightEffectView.backdropView.getter();
  objc_msgSend(v0, sel_bounds);
  double MidX = CGRectGetMidX(v38);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v3, sel_setCenter_, MidX, CGRectGetMidY(v39));

  id v5 = BezelHighlightEffectView.highlightMaskView.getter();
  id v6 = BezelHighlightEffectView.backdropView.getter();
  objc_msgSend(v6, sel_bounds);
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;

  objc_msgSend(v5, sel_setBounds_, v8, v10, v12, v14);
  id v15 = BezelHighlightEffectView.highlightMaskView.getter();
  id v16 = BezelHighlightEffectView.backdropView.getter();
  objc_msgSend(v16, sel_bounds);
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;

  v40.origin.CGFloat x = v18;
  v40.origin.CGFloat y = v20;
  v40.size.CGFloat width = v22;
  v40.size.CGFloat height = v24;
  double v25 = CGRectGetMidX(v40);
  id v26 = BezelHighlightEffectView.backdropView.getter();
  objc_msgSend(v26, sel_bounds);
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  CGFloat v34 = v33;

  v41.origin.CGFloat x = v28;
  v41.origin.CGFloat y = v30;
  v41.size.CGFloat width = v32;
  v41.size.CGFloat height = v34;
  objc_msgSend(v15, sel_setCenter_, v25, CGRectGetMidY(v41));
}

void BezelHighlightEffectView.__ivar_destroyer()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView____lazy_storage___highlightMaskView));
  id v1 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView____lazy_storage___backdropView);
}

id BezelHighlightEffectView.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for BezelHighlightEffectView);
}

void BezelOutlineEffectView.outlineColor.setter(void *a1)
{
  id v2 = objc_msgSend(v1, sel_layer);
  objc_msgSend(v2, sel_setBorderColor_, a1);
}

id BezelOutlineEffectView.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35122BezelOutlineEffectView_customCornerRadius] = 0;
  v7.id receiver = v0;
  v7.super_class = (Class)type metadata accessor for BezelOutlineEffectView();
  id v1 = objc_msgSendSuper2(&v7, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v2 = objc_msgSend(v1, sel_layer);
  objc_msgSend(v2, sel_setBorderWidth_, 3.0);

  id v3 = objc_msgSend(v1, sel_layer);
  objc_msgSend(v3, sel_setBorderOffset_, 2.9);

  id v4 = objc_msgSend(self, sel_systemBlueColor);
  id v5 = objc_msgSend(v4, sel_CGColor);

  BezelOutlineEffectView.outlineColor.setter(v5);
  objc_msgSend(v1, sel_setBackgroundColor_, 0);

  return v1;
}

id BezelOutlineEffectView.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for BezelOutlineEffectView);
}

void BezelEffectView.effects.didset(uint64_t a1)
{
  specialized static Set.== infix(_:_:)(*(void *)(v1 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects), a1);
  if ((v2 & 1) == 0)
  {
    BezelEffectView.updateEffectViews(animated:)(1);
  }
}

uint64_t BezelEffectView.effects.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects) = a1;
  BezelEffectView.effects.didset(v2);
  return swift_bridgeObjectRelease();
}

id BezelEffectView.metrics.setter(_OWORD *a1)
{
  uint64_t v2 = &v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_metrics];
  long long v3 = a1[1];
  *(_OWORD *)uint64_t v2 = *a1;
  *((_OWORD *)v2 + 1) = v3;
  *((_OWORD *)v2 + 2) = a1[2];
  return objc_msgSend(v1, sel_setNeedsLayout);
}

void BezelEffectView.bezelShieldMaterial.setter(char a1)
{
  *(unsigned char *)(*(void *)(v1
                       + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_shieldEffectView)
           + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_material) = a1 & 1;
  BezelShieldEffectView.updateVisualEffectView()();
}

char *BezelEffectView.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects] = MEMORY[0x1E4FBC870];
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_metrics;
  uint64_t v2 = one-time initialization token for forCurrentDisplay;
  long long v3 = v0;
  if (v2 != -1) {
    swift_once();
  }
  id v4 = &v3[v1];
  char v5 = xmmword_1EA37E020;
  uint64_t v6 = *((void *)&xmmword_1EA37E020 + 1);
  long long v7 = *(_OWORD *)algn_1EA37E010;
  *(_OWORD *)id v4 = static BezelMetrics.forCurrentDisplay;
  *((_OWORD *)v4 + 1) = v7;
  v4[32] = v5;
  *((void *)v4 + 5) = v6;
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_shieldEffectView;
  *(void *)&v3[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BezelShieldEffectView()), sel_init);
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_glowEffectView;
  *(void *)&v3[v9] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BezelGlowEffectView()), sel_init);
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_highlightEffectView;
  *(void *)&v3[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BezelHighlightEffectView()), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_outlineEffectView;
  *(void *)&v3[v11] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BezelOutlineEffectView()), sel_init);

  v16.id receiver = v3;
  v16.super_class = (Class)type metadata accessor for BezelEffectView();
  double v12 = (char *)objc_msgSendSuper2(&v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v13 = *(void *)&v12[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_shieldEffectView];
  double v14 = v12;
  objc_msgSend(v14, sel_addSubview_, v13);
  objc_msgSend(v14, sel_addSubview_, *(void *)&v14[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_glowEffectView]);
  objc_msgSend(v14, sel_addSubview_, *(void *)&v14[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_highlightEffectView]);
  objc_msgSend(v14, sel_addSubview_, *(void *)&v14[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_outlineEffectView]);
  BezelEffectView.updateEffectViews(animated:)(0);

  return v14;
}

id BezelEffectView.layoutSubviews()()
{
  uint64_t v1 = v0;
  v35[0].id receiver = v0;
  v35[0].super_class = (Class)type metadata accessor for BezelEffectView();
  [(objc_super *)v35 layoutSubviews];
  id v2 = objc_msgSend(v0, sel_window);
  if (v2 && (v3 = v2, id v4 = objc_msgSend(v2, sel_windowScene), v3, v4))
  {
    id v5 = objc_msgSend(v4, sel_interfaceOrientation);
  }
  else
  {
    id v6 = objc_msgSend(v1, sel_traitCollection);
    lazy protocol witness table accessor for type InterfaceOrientationTrait and conformance InterfaceOrientationTrait();
    lazy protocol witness table accessor for type UIInterfaceOrientation and conformance UIInterfaceOrientation();
    UITraitCollection.subscript.getter();

    id v5 = (id)v36;
  }
  long long v7 = (objc_super *)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_metrics];
  long long v8 = *(_OWORD *)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_metrics
                    + 16];
  long long v36 = *(_OWORD *)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_metrics];
  long long v37 = v8;
  long long v38 = *(_OWORD *)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_metrics
                     + 32];
  objc_msgSend(v1, sel_bounds);
  double v13 = BezelMetrics.scaledBounds(in:orientation:)((uint64_t)v5, v9, v10, v11, v12);
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  objc_super v20 = v7[1];
  v35[1] = *v7;
  void v35[2] = v20;
  void v35[3] = v7[2];
  objc_msgSend(v1, sel_bounds);
  double v25 = BezelMetrics.scaledCornerRadius(in:orientation:)((uint64_t)v5, v21, v22, v23, v24);
  id v26 = *(char **)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_shieldEffectView];
  *(double *)&v26[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_customCornerRadius] = v25;
  BezelShieldEffectView.customCornerRadius.didset((uint64_t (*)(void))BezelShieldEffectView.effectView.getter, &OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_customCornerRadius, (SEL *)&selRef__setContinuousCornerRadius_);
  double v27 = *(char **)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_glowEffectView];
  *(double *)&v27[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customCornerRadius] = v25;
  BezelGlowEffectView.customCornerRadius.didset();
  CGFloat v28 = *(char **)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_highlightEffectView];
  *(double *)&v28[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customCornerRadius] = v25;
  BezelShieldEffectView.customCornerRadius.didset((uint64_t (*)(void))BezelHighlightEffectView.highlightMaskView.getter, &OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customCornerRadius, (SEL *)&selRef__setContinuousCornerRadius_);
  double v29 = *(char **)&v1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_outlineEffectView];
  *(double *)&v29[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35122BezelOutlineEffectView_customCornerRadius] = v25;
  objc_msgSend(v29, sel__setContinuousCornerRadius_, *(double *)&v29[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35122BezelOutlineEffectView_customCornerRadius]);
  objc_msgSend(v26, sel_setBounds_, v13, v15, v17, v19);
  objc_msgSend(v1, sel_bounds);
  double MidX = CGRectGetMidX(v39);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v26, sel_setCenter_, MidX, CGRectGetMidY(v40));
  objc_msgSend(v27, sel_setBounds_, v13, v15, v17, v19);
  objc_msgSend(v1, sel_bounds);
  double v31 = CGRectGetMidX(v41);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v27, sel_setCenter_, v31, CGRectGetMidY(v42));
  objc_msgSend(v28, sel_setBounds_, v13, v15, v17, v19);
  objc_msgSend(v1, sel_bounds);
  double v32 = CGRectGetMidX(v43);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v28, sel_setCenter_, v32, CGRectGetMidY(v44));
  objc_msgSend(v29, sel_setBounds_, v13, v15, v17, v19);
  objc_msgSend(v1, sel_bounds);
  double v33 = CGRectGetMidX(v45);
  objc_msgSend(v1, sel_bounds);
  return objc_msgSend(v29, sel_setCenter_, v33, CGRectGetMidY(v46));
}

id BezelEffectView._updateEffectViewVisibility()()
{
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_shieldEffectView);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects;
  specialized Set.contains(_:)(0, *(void *)(v0 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects));
  objc_msgSend(v1, sel_setHidden_, (v3 & 1) == 0);
  id v4 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_glowEffectView);
  specialized Set.contains(_:)(1u, *(void *)(v0 + v2));
  objc_msgSend(v4, sel_setHidden_, (v5 & 1) == 0);
  id v6 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_highlightEffectView);
  specialized Set.contains(_:)(1u, *(void *)(v0 + v2));
  char v8 = v7;
  char v9 = 1;
  if (v8) {
    specialized Set.contains(_:)(2u, *(void *)(v0 + v2));
  }
  objc_msgSend(v6, sel_setHidden_, v9 & 1);
  double v10 = *(void **)(v0
                 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_outlineEffectView);
  specialized Set.contains(_:)(2u, *(void *)(v0 + v2));
  return objc_msgSend(v10, sel_setHidden_, (v11 & 1) == 0);
}

void BezelEffectView._updateEffectViews()()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects;
  specialized Set.contains(_:)(0, *(void *)(v0 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_effects));
  char v3 = 0;
  id v4 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_shieldEffectView);
  if (v5)
  {
    objc_msgSend(v4, sel_setHidden_, 0);
    char v3 = 1;
  }
  *((unsigned char *)v4 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35121BezelShieldEffectView_isActive) = v3;
  BezelShieldEffectView.updateVisualEffectView()();
  specialized Set.contains(_:)(1u, *(void *)(v1 + v2));
  uint64_t v6 = *(void *)(v1
                 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_glowEffectView);
  if (v7)
  {
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_glowEffectView), sel_setHidden_, 0);
    *(void *)(v6
              + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customAlpha) = 0x3FF0000000000000;
    BezelShieldEffectView.customCornerRadius.didset((uint64_t (*)(void))BezelGlowEffectView.glowMaskBaseView.getter, &OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customAlpha, (SEL *)&selRef_setAlpha_);
    char v8 = *(char **)(v1
                  + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_highlightEffectView);
    objc_msgSend(v8, sel_setHidden_, 0);
    double v9 = 1.0;
  }
  else
  {
    *(void *)(v6
              + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customAlpha) = 0;
    BezelShieldEffectView.customCornerRadius.didset((uint64_t (*)(void))BezelGlowEffectView.glowMaskBaseView.getter, &OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35119BezelGlowEffectView_customAlpha, (SEL *)&selRef_setAlpha_);
    char v8 = *(char **)(v1
                  + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_highlightEffectView);
    double v9 = 0.0;
  }
  *(double *)&v8[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customAlpha] = v9;
  BezelShieldEffectView.customCornerRadius.didset((uint64_t (*)(void))BezelHighlightEffectView.highlightMaskView.getter, &OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customAlpha, (SEL *)&selRef_setAlpha_);
  specialized Set.contains(_:)(2u, *(void *)(v1 + v2));
  double v10 = *(void **)(v1
                 + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_outlineEffectView);
  if (v11)
  {
    objc_msgSend(v10, sel_setHidden_, 0);
    objc_msgSend(v10, sel_setAlpha_, 1.0);
    *(void *)&v8[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customAlpha] = 0;
    BezelShieldEffectView.customCornerRadius.didset((uint64_t (*)(void))BezelHighlightEffectView.highlightMaskView.getter, &OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35124BezelHighlightEffectView_customAlpha, (SEL *)&selRef_setAlpha_);
  }
  else
  {
    objc_msgSend(v10, sel_setAlpha_, 0.0);
  }
}

uint64_t BezelEffectView.updateEffectViews(animated:)(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x1F4188790](a1);
    *(void *)(swift_allocObject() + 16) = v1;
    id v2 = v1;
    static Animation.default.getter();
    withBridgedAnimation<A>(_:_:completion:)();
    swift_release();
    return swift_release();
  }
  else
  {
    id v4 = self;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v1;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = partial apply for closure #3 in BezelEffectView.updateEffectViews(animated:);
    *(void *)(v6 + 24) = v5;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    id aBlock[3] = &block_descriptor_36;
    char v7 = _Block_copy(aBlock);
    id v8 = v1;
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_performWithoutAnimation_, v7);
    _Block_release(v7);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

id closure #3 in BezelEffectView.updateEffectViews(animated:)()
{
  return BezelEffectView._updateEffectViewVisibility()();
}

void BezelEffectView.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_shieldEffectView));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_glowEffectView));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_highlightEffectView));
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_outlineEffectView);
}

id BezelEffectView.__deallocating_deinit()
{
  return HitTestPassthroughLayer.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for BezelEffectView);
}

id HitTestPassthroughLayer.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.id receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id BezelEffectViewRepresentable.makeUIView(context:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for BezelEffectView());
  return objc_msgSend(v0, sel_init);
}

id BezelEffectViewRepresentable.updateUIView(_:context:)(char *a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1[4];
  specialized Set.contains(_:)(0, v8);
  if (v9)
  {
    uint64_t v10 = *v1;
    char v11 = *((unsigned char *)v2 + 8);
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*v2, v11);
    specialized Environment.wrappedValue.getter();
    char v13 = v12 & 1;
    outlined consume of Environment<CGFloat>.Content(v10, v11);
    BezelEffectView.bezelShieldMaterial.setter(v13);
  }
  specialized Set.contains(_:)(2u, v8);
  if (v14)
  {
    swift_retain();
    specialized Environment.wrappedValue.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<BezelEffectViewRepresentable>);
    UIViewRepresentableContext.environment.getter();
    Color.resolve(in:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    double v15 = (void *)Color.Resolved.cgColor.getter();
    BezelOutlineEffectView.outlineColor.setter(v15);
  }
  uint64_t v16 = swift_bridgeObjectRetain();
  BezelEffectView.effects.setter(v16);
  double v17 = &a1[OBJC_IVAR____TtC15ConversationKitP33_4D20B3E5E64D3E09186739EFFCDDD35115BezelEffectView_metrics];
  long long v18 = *(_OWORD *)(v2 + 7);
  *(_OWORD *)double v17 = *(_OWORD *)(v2 + 5);
  *((_OWORD *)v17 + 1) = v18;
  *((_OWORD *)v17 + 2) = *(_OWORD *)(v2 + 9);
  return objc_msgSend(a1, sel_setNeedsLayout);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance BezelEffectViewRepresentable()
{
  memcpy(__dst, v0, sizeof(__dst));
  return BezelEffectViewRepresentable.makeUIView(context:)();
}

id protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance BezelEffectViewRepresentable(char *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return BezelEffectViewRepresentable.updateUIView(_:context:)(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BezelEffectViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BezelEffectViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type BezelEffectViewRepresentable and conformance BezelEffectViewRepresentable();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance BezelEffectViewRepresentable()
{
}

uint64_t BezelEffectModifier.effects.getter()
{
  return swift_bridgeObjectRetain();
}

double BezelEffectModifier.metrics.getter@<D0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  double result = *(double *)(v1 + 48);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t BezelEffectModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  uint64_t v8 = *v2;
  long long v18 = *(_OWORD *)(v2 + 1);
  uint64_t v9 = v2[3];
  uint64_t v10 = v2[4];
  char v11 = *((unsigned char *)v2 + 40);
  uint64_t v12 = v2[6];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<BezelEffectModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a2, a1, v15);
  uint64_t v16 = a2
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<BezelEffectModifier>, _OverlayModifier<BezelEffectViewRepresentable>>)
               + 36);
  *(void *)uint64_t v16 = KeyPath;
  *(unsigned char *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = v14;
  *(unsigned char *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = v8;
  *(_OWORD *)(v16 + 40) = v18;
  *(void *)(v16 + 56) = v9;
  *(void *)(v16 + 64) = v10;
  *(unsigned char *)(v16 + 72) = v11;
  *(void *)(v16 + 80) = v12;
  *(void *)(v16 + 88) = v5;
  *(void *)(v16 + 96) = v7;
  return swift_bridgeObjectRetain();
}

double BezelEffectModifier.init(effects:metrics:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(a2 + 32);
  double result = *(double *)(a2 + 40);
  *(void *)a3 = a1;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 24) = v5;
  *(unsigned char *)(a3 + 40) = v3 & 1;
  *(double *)(a3 + 48) = result;
  return result;
}

uint64_t View.bezelEffect(_:metrics:)(uint64_t a1, long long *a2, uint64_t a3)
{
  char v3 = *((unsigned char *)a2 + 32);
  long long v4 = a2[1];
  long long v8 = *a2;
  long long v9 = v4;
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v7 = a1;
  char v10 = v3 & 1;
  uint64_t v11 = v5;
  return MEMORY[0x1C87723E0](&v7, a3, &type metadata for BezelEffectModifier);
}

uint64_t View.bezelEffect(_:metrics:)(char a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v14 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  char v9 = *((unsigned char *)a2 + 32);
  uint64_t v10 = *((void *)a2 + 5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BezelEffect>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3769620;
  *(unsigned char *)(inited + 32) = a1;
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v15 = v12;
  long long v16 = v14;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  char v19 = v9 & 1;
  uint64_t v20 = v10;
  MEMORY[0x1C87723E0](&v15, a3, &type metadata for BezelEffectModifier, a4);
  return swift_bridgeObjectRelease();
}

BOOL UIInterfaceOrientationIsPortrait(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

unint64_t lazy protocol witness table accessor for type BezelShieldMaterialKey and conformance BezelShieldMaterialKey()
{
  unint64_t result = lazy protocol witness table cache variable for type BezelShieldMaterialKey and conformance BezelShieldMaterialKey;
  if (!lazy protocol witness table cache variable for type BezelShieldMaterialKey and conformance BezelShieldMaterialKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezelShieldMaterialKey and conformance BezelShieldMaterialKey);
  }
  return result;
}

uint64_t sub_1C31AE84C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.bezelShieldMaterial.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C31AE878()
{
  return EnvironmentValues.bezelShieldMaterial.setter();
}

unint64_t lazy protocol witness table accessor for type BezelOutlineColorKey and conformance BezelOutlineColorKey()
{
  unint64_t result = lazy protocol witness table cache variable for type BezelOutlineColorKey and conformance BezelOutlineColorKey;
  if (!lazy protocol witness table cache variable for type BezelOutlineColorKey and conformance BezelOutlineColorKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezelOutlineColorKey and conformance BezelOutlineColorKey);
  }
  return result;
}

uint64_t sub_1C31AE8EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.bezelOutlineColor.getter();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type BezelEffect and conformance BezelEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type BezelEffect and conformance BezelEffect;
  if (!lazy protocol witness table cache variable for type BezelEffect and conformance BezelEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezelEffect and conformance BezelEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BezelShieldMaterial and conformance BezelShieldMaterial()
{
  unint64_t result = lazy protocol witness table cache variable for type BezelShieldMaterial and conformance BezelShieldMaterial;
  if (!lazy protocol witness table cache variable for type BezelShieldMaterial and conformance BezelShieldMaterial)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezelShieldMaterial and conformance BezelShieldMaterial);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in BezelEffectModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for BezelMetrics()
{
}

unsigned char *storeEnumTagSinglePayload for BezelEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31AEAB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for BezelEffect()
{
}

unsigned char *storeEnumTagSinglePayload for BezelShieldMaterial(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C31AEBB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for BezelShieldMaterial()
{
}

void type metadata accessor for BezelShieldMaterialKey()
{
}

uint64_t type metadata accessor for HitTestPassthroughLayer()
{
  return self;
}

uint64_t type metadata accessor for HitTestPassthroughView()
{
  return self;
}

uint64_t type metadata accessor for BackdropView()
{
  return self;
}

uint64_t type metadata accessor for BezelShieldEffectView()
{
  return self;
}

uint64_t type metadata accessor for BezelGlowEffectView()
{
  return self;
}

uint64_t type metadata accessor for BezelHighlightEffectView()
{
  return self;
}