double closure #1 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(void *)&result = closure #1 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter((void (*)(_OWORD *__return_ptr))closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter, a1).n128_u64[0];
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Font.Leading();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = Image.init(systemName:)();
  uint64_t v33 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  id v6 = objc_msgSend(self, sel_conversationKit);
  v36._object = (void *)0xE000000000000000;
  v7._object = (void *)0x80000001C37B1180;
  v7._countAndFlagsBits = 0xD00000000000001ALL;
  v8.value._countAndFlagsBits = 0x61737265766E6F43;
  v8.value._object = (void *)0xEF74694B6E6F6974;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v36);

  Swift::String v35 = v10;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.subheadline.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4F3E0F8], v2);
  Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  LOBYTE(v2) = v19;
  swift_release();
  char v20 = v2 & 1;
  outlined consume of Text.Storage(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v21 = Text.fontWeight(_:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  outlined consume of Text.Storage(v16, v18, v20);
  swift_bridgeObjectRelease();
  uint64_t v28 = v33;
  uint64_t v29 = KeyPath;
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = v29;
  *(void *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v23;
  *(unsigned char *)(a1 + 40) = v27;
  *(void *)(a1 + 48) = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v21, v23, v27);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v21, v23, v27);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

double closure #2 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #1 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter((void (*)(_OWORD *__return_ptr))closure #1 in closure #2 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter, a1).n128_u64[0];
  return result;
}

__n128 closure #1 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter@<Q0>(void (*a1)(_OWORD *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static VerticalAlignment.center.getter();
  a1(v13);
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  long long v11 = v13[0];
  __n128 v12 = (__n128)v13[1];
  uint64_t v8 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 24) = v11;
  __n128 result = v12;
  *(__n128 *)(a2 + 40) = v12;
  *(void *)(a2 + 56) = v5;
  *(unsigned char *)(a2 + 64) = v6;
  *(void *)(a2 + 72) = v7;
  *(void *)(a2 + 80) = KeyPath;
  *(void *)(a2 + 88) = v8;
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in closure #1 in closure #1 in VideoMessageControlsView.RemoteBottomControlsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Font.Leading();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = Image.init(systemName:)();
  uint64_t v33 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  id v6 = objc_msgSend(self, sel_conversationKit);
  v36._object = (void *)0xE000000000000000;
  v7._object = (void *)0x80000001C37B1160;
  v7._countAndFlagsBits = 0xD000000000000017;
  v8.value._countAndFlagsBits = 0x61737265766E6F43;
  v8.value._object = (void *)0xEF74694B6E6F6974;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v36);

  Swift::String v35 = v10;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.subheadline.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4F3E0F8], v2);
  Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  LOBYTE(v2) = v19;
  swift_release();
  char v20 = v2 & 1;
  outlined consume of Text.Storage(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v21 = Text.fontWeight(_:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  outlined consume of Text.Storage(v16, v18, v20);
  swift_bridgeObjectRelease();
  uint64_t v28 = v33;
  uint64_t v29 = KeyPath;
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = v29;
  *(void *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v23;
  *(unsigned char *)(a1 + 40) = v27;
  *(void *)(a1 + 48) = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v21, v23, v27);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v21, v23, v27);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

double VideoMessagePlayerViewModel.bottomControlsOpacity.getter()
{
  char v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
  double result = 0.0;
  if (v1 == 3) {
    return 1.0;
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance VideoMessageControlsView.RemoteBottomControlsView@<X0>(uint64_t a1@<X8>)
{
  return VideoMessageControlsView.RemoteBottomControlsView.body.getter(*(void **)(v1 + 8), a1);
}

uint64_t VideoMessageControlsView.PlayButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v2 = type metadata accessor for Material();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x1F4188790](v2);
  v32 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  Swift::String v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)v1;
  char v16 = *(unsigned char *)(v1 + 8);
  long long v41 = *(_OWORD *)(v1 + 16);
  uint64_t v40 = *(void *)(v1 + 32);
  uint64_t v17 = swift_allocObject();
  long long v18 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v17 + 32) = v18;
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(v17 + 64) = *(unsigned char *)(v1 + 48);
  uint64_t v36 = v1;
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v15, v16);
  outlined retain of ModifiedContent<ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>, _PaddingLayout>((uint64_t)&v41);
  outlined retain of AnyLocation<String>?((uint64_t)&v40);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v15, v16);
  specialized Environment.wrappedValue.getter();
  outlined consume of Environment<CGFloat>.Content(v15, v16);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v15, v16);
  specialized Environment.wrappedValue.getter();
  outlined consume of Environment<CGFloat>.Content(v15, v16);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v20 = v30;
  uint64_t v19 = v31;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v10, v6, v31);
  uint64_t v21 = &v10[*(int *)(v8 + 44)];
  long long v22 = v38;
  *(_OWORD *)uint64_t v21 = v37;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v39;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
  outlined init with copy of FeatureEligibility?((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>);
  v14[*(int *)(v12 + 44)] = 0;
  outlined destroy of SystemUpdateNotice?((uint64_t)v10, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>);
  uint64_t v23 = v32;
  static Material.ultraThin.getter();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>, _InsettableBackgroundShapeModifier<Material, Circle>>);
  uint64_t v25 = v34;
  uint64_t v26 = v35;
  uint64_t v27 = v35 + *(int *)(v24 + 36);
  uint64_t v28 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v27, v23, v34);
  *(_WORD *)(v27
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Material, Circle>)
                    + 56)) = 256;
  outlined init with copy of FeatureEligibility?((uint64_t)v14, v26, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v25);
  return outlined destroy of SystemUpdateNotice?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>);
}

uint64_t closure #1 in VideoMessageControlsView.PlayButtonView.body.getter()
{
  return swift_release();
}

uint64_t closure #1 in closure #1 in VideoMessageControlsView.PlayButtonView.body.getter(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & **((void **)&v6 + 1)) + 0xF0);
  uint64_t v3 = *((id *)&v6 + 1);
  if (v2() == 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 3;
  }
  (*(void (**)(uint64_t))((*v1 & *v3) + 0xF8))(v4);
  outlined release of ObservedObject<VideoMessagePlayerViewModel>((uint64_t)&v6);
  char v7 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  return Binding.wrappedValue.setter();
}

uint64_t closure #2 in VideoMessageControlsView.PlayButtonView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v10 = *(_OWORD *)(a1 + 16);
  uint64_t v3 = *((id *)&v10 + 1);
  VideoMessagePlayerViewModel.actionButtonImageName.getter();
  outlined release of ObservedObject<VideoMessagePlayerViewModel>((uint64_t)&v10);
  uint64_t v4 = Image.init(systemName:)();
  LOBYTE(v3) = (*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x270))(v3);
  outlined release of ObservedObject<VideoMessagePlayerViewModel>((uint64_t)&v10);
  if (v3) {
    uint64_t v5 = static Color.secondary.getter();
  }
  else {
    uint64_t v5 = static Color.white.getter();
  }
  uint64_t v6 = v5;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = static Font.title.getter();
  uint64_t result = swift_getKeyPath();
  *a2 = v4;
  a2[1] = KeyPath;
  a2[2] = v6;
  a2[3] = result;
  a2[4] = v8;
  return result;
}

uint64_t VideoMessagePlayerViewModel.actionButtonImageName.getter()
{
  if ((*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))() == 1) {
    return 0x69662E6573756170;
  }
  else {
    return 0x6C69662E79616C70;
  }
}

uint64_t protocol witness for View.body.getter in conformance VideoMessageControlsView.PlayButtonView@<X0>(uint64_t a1@<X8>)
{
  return VideoMessageControlsView.PlayButtonView.body.getter(a1);
}

uint64_t default argument 0 of VideoMessageControlsView.init(verticalSizeClass:horizontalSizeClass:videoMessageViewModel:player:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 0 of VideoMessageControlsView.init(verticalSizeClass:horizontalSizeClass:videoMessageViewModel:player:)(a1);
}

{
  uint64_t vars8;

  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t default argument 1 of VideoMessageControlsView.init(verticalSizeClass:horizontalSizeClass:videoMessageViewModel:player:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 0 of VideoMessageControlsView.init(verticalSizeClass:horizontalSizeClass:videoMessageViewModel:player:)(a1);
}

uint64_t VideoMessageControlsView.init(verticalSizeClass:horizontalSizeClass:videoMessageViewModel:player:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = swift_getKeyPath();
  *(unsigned char *)(a4 + 8) = 0;
  uint64_t v8 = (int *)type metadata accessor for VideoMessageControlsView(0);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(a1, a4 + v8[5], &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(a2, a4 + v8[6], &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  uint64_t v9 = (uint64_t *)(a4 + v8[7]);
  type metadata accessor for VideoMessagePlayerViewModel(0);
  lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel((unint64_t *)&lazy protocol witness table cache variable for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel, (void (*)(uint64_t))type metadata accessor for VideoMessagePlayerViewModel);
  *uint64_t v9 = ObservedObject.init(wrappedValue:)();
  v9[1] = v10;
  uint64_t v11 = a4 + v8[8];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v11 = v13;
  *(void *)(v11 + 8) = v14;
  *(void *)(a4 + v8[9]) = a3;
  *(void *)(a4 + v8[10]) = 0x3FC51EB851EB851FLL;
  *(void *)(a4 + v8[11]) = 0x4077C00000000000;
  return result;
}

void closure #1 in closure #1 in View.conditionalyOverlaid<A>(with:alignment:pinningTo:spacing:condition:)()
{
  static VerticalAlignment.top.getter();
  char v0 = static VerticalAlignment.== infix(_:_:)();
  uint64_t v1 = static VerticalAlignment.bottom.getter();
  if ((v0 & 1) == 0)
  {
    if ((static VerticalAlignment.== infix(_:_:)() & 1) != 0
      || (static VerticalAlignment.lastTextBaseline.getter(), (static VerticalAlignment.== infix(_:_:)() & 1) != 0))
    {
      uint64_t v2 = static VerticalAlignment.top.getter();
      MEMORY[0x1C8771040](v2);
      return;
    }
    static VerticalAlignment.center.getter();
    if ((static VerticalAlignment.== infix(_:_:)() & 1) == 0)
    {
      static VerticalAlignment.firstTextBaseline.getter();
      static VerticalAlignment.== infix(_:_:)();
    }
    uint64_t v1 = static VerticalAlignment.center.getter();
  }
  MEMORY[0x1C8771040](v1);
}

uint64_t key path getter for AnimatedSaveButton.videoMessageViewModel : AnimatedSaveButton@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = AnimatedSaveButton.videoMessageViewModel.getter();
  *a2 = v3;
  return result;
}

void key path setter for AnimatedSaveButton.videoMessageViewModel : AnimatedSaveButton(id *a1)
{
}

void AnimatedSaveButton.videoMessageViewModel.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*AnimatedSaveButton.videoMessageViewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AnimatedSaveButton.$videoMessageViewModel.getter()
{
  type metadata accessor for VideoMessagePlayerViewModel(0);
  lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel((unint64_t *)&lazy protocol witness table cache variable for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel, (void (*)(uint64_t))type metadata accessor for VideoMessagePlayerViewModel);
  return ObservedObject.projectedValue.getter();
}

uint64_t AnimatedSaveButton.showsTitle.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for AnimatedSaveButton.showsTitle : AnimatedSaveButton@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AnimatedSaveButton.showsTitle.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for AnimatedSaveButton.showsTitle : AnimatedSaveButton()
{
  return AnimatedSaveButton.showsTitle.setter();
}

uint64_t AnimatedSaveButton.showsTitle.setter()
{
  return State.wrappedValue.setter();
}

void (*AnimatedSaveButton.showsTitle.modify(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[34] = a4;
  *uint64_t v8 = a4;
  *((void *)v8 + 1) = a5;
  *((void *)v8 + 2) = a5;
  swift_retain();
  *((void *)v8 + 3) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return AnimatedSaveButton.showsTitle.modify;
}

void AnimatedSaveButton.showsTitle.modify(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  *(unsigned char *)unsigned __int8 v1 = *(unsigned char *)(*(void *)a1 + 34);
  v1[1] = v3;
  *((unsigned char *)v1 + 33) = v2;
  State.wrappedValue.setter();
  swift_release();
  free(v1);
}

uint64_t AnimatedSaveButton.$showsTitle.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  return v1;
}

uint64_t AnimatedSaveButton.body.getter(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  type metadata accessor for AccessibilityChildBehavior();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_62();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>);
  MEMORY[0x1F4188790](v10 - 8);
  OUTLINED_FUNCTION_118();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_21();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_36_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_21();
  *uint64_t v4 = static Alignment.center.getter();
  v4[1] = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>);
  closure #1 in AnimatedSaveButton.body.getter(a1, a2, a3, a4, (uint64_t)v4 + *(int *)(v20 + 44));
  uint64_t v21 = a2;
  double v22 = VideoMessagePlayerViewModel.ancillaryButtonOpacity.getter();

  outlined init with copy of FeatureEligibility?((uint64_t)v4, v15, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>);
  *(double *)(v15 + *(int *)(v12 + 44)) = v22;
  outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>);
  uint64_t v23 = static Animation.linear(duration:)();
  OUTLINED_FUNCTION_0_3();
  uint64_t v25 = *(uint64_t (**)(void))(v24 + 576);
  uint64_t v26 = v21;
  LOBYTE(v21) = v25();

  outlined init with copy of FeatureEligibility?(v15, v5, &demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>);
  uint64_t v27 = v5 + *(int *)(v16 + 36);
  *(void *)uint64_t v27 = v23;
  *(unsigned char *)(v27 + 8) = (_BYTE)v21;
  outlined destroy of SystemUpdateNotice?(v15, &demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>);
  static AccessibilityChildBehavior.combine.getter();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>();
  View.accessibilityElement(children:)();
  OUTLINED_FUNCTION_26_2();
  v28();
  outlined destroy of SystemUpdateNotice?(v5, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>);
  uint64_t v29 = v26;
  VideoMessagePlayerViewModel.ancillaryButtonOpacity.getter();

  swift_getOpaqueTypeConformance2();
  View.accessibilityHidden(_:)();
  OUTLINED_FUNCTION_26_2();
  return v30();
}

uint64_t closure #1 in AnimatedSaveButton.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v61 = a4;
  LODWORD(v60) = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  MEMORY[0x1F4188790](v8);
  v56 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>);
  MEMORY[0x1F4188790](v55);
  v57 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>);
  MEMORY[0x1F4188790](v54);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>);
  MEMORY[0x1F4188790](v67);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v66 = (uint64_t)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  v62 = (char *)&v50 - v18;
  type metadata accessor for VideoMessagePlayerViewModel(0);
  lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel((unint64_t *)&lazy protocol witness table cache variable for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel, (void (*)(uint64_t))type metadata accessor for VideoMessagePlayerViewModel);
  uint64_t v19 = (void *)ObservedObject.projectedValue.getter();
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();

  uint64_t v21 = v69;
  uint64_t v20 = v70;
  int v64 = v71;
  double v22 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x240);
  uint64_t v23 = a2;
  int v63 = v22();

  uint64_t v24 = v23;
  LODWORD(v23) = v22();

  uint64_t v65 = v21;
  if (v23)
  {
    uint64_t v25 = 1;
    uint64_t v26 = (uint64_t)v62;
  }
  else
  {
    uint64_t v51 = a1;
    v52 = v14;
    v53 = v12;
    char v27 = v60 & 1;
    LOBYTE(v69) = v60 & 1;
    uint64_t v28 = v61;
    uint64_t v70 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
    State.wrappedValue.getter();
    uint64_t v25 = 1;
    uint64_t v26 = (uint64_t)v62;
    if (v68 == 1)
    {
      uint64_t v29 = swift_allocObject();
      v60 = &v50;
      *(void *)(v29 + 16) = v51;
      *(void *)(v29 + 24) = v24;
      *(unsigned char *)(v29 + 32) = v27;
      *(void *)(v29 + 40) = v28;
      MEMORY[0x1F4188790](v29);
      *(&v50 - 4) = v30;
      *(&v50 - 3) = (uint64_t)v24;
      *((unsigned char *)&v50 - 16) = v27;
      *(&v50 - 1) = v28;
      swift_retain();
      uint64_t v31 = v24;
      v32 = v56;
      Button.init(action:label:)();
      uint64_t v33 = v31;
      LOBYTE(v31) = v22();

      BOOL v34 = v31 != 0;
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v36 = swift_allocObject();
      *(unsigned char *)(v36 + 16) = v34;
      uint64_t v38 = (uint64_t)v57;
      uint64_t v37 = v58;
      uint64_t v39 = v59;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v57, v32, v59);
      uint64_t v40 = (uint64_t *)(v38 + *(int *)(v55 + 36));
      *uint64_t v40 = KeyPath;
      v40[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
      v40[2] = v36;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v39);
      uint64_t v41 = static Color.white.getter();
      uint64_t v42 = swift_getKeyPath();
      uint64_t v43 = (uint64_t)v53;
      outlined init with copy of FeatureEligibility?(v38, (uint64_t)v53, &demangling cache variable for type metadata for ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>);
      v44 = (uint64_t *)(v43 + *(int *)(v54 + 36));
      uint64_t *v44 = v42;
      v44[1] = v41;
      outlined destroy of SystemUpdateNotice?(v38, &demangling cache variable for type metadata for ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>);
      uint64_t v45 = (uint64_t)v52;
      outlined init with copy of FeatureEligibility?(v43, (uint64_t)v52, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>);
      *(_WORD *)(v45 + *(int *)(v67 + 36)) = 1;
      outlined destroy of SystemUpdateNotice?(v43, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>);
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v45, v26, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>);
      uint64_t v25 = 0;
    }
  }
  __swift_storeEnumTagSinglePayload(v26, v25, 1, v67);
  if ((_BYTE)v63) {
    double v46 = 1.0;
  }
  else {
    double v46 = 0.0;
  }
  uint64_t v47 = v66;
  outlined init with copy of FeatureEligibility?(v26, v66, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?);
  *(void *)a5 = v65;
  *(void *)(a5 + 8) = v20;
  *(unsigned char *)(a5 + 16) = v64;
  *(void *)(a5 + 24) = 0x3FD6666666666666;
  *(double *)(a5 + 32) = v46;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?));
  outlined init with copy of FeatureEligibility?(v47, a5 + *(int *)(v48 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?);
  swift_retain();
  swift_retain();
  outlined destroy of SystemUpdateNotice?(v26, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?);
  outlined destroy of SystemUpdateNotice?(v47, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?);
  swift_release();
  return swift_release();
}

uint64_t key path getter for VideoMessagePlayerViewModel.saveState : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x240))();
  *a2 = result;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.saveState : VideoMessagePlayerViewModel(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x248))(*a1);
}

uint64_t closure #1 in closure #1 in AnimatedSaveButton.body.getter(uint64_t a1, void *a2)
{
  void (*v5)(void *__return_ptr);
  void *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void v10[7];
  uint64_t vars8;

  char v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x248);
  uint64_t v4 = a2;
  v3(1);

  uint64_t v5 = *(void (**)(void *__return_ptr))((*v2 & *v4) + 0x1B0);
  uint64_t v6 = v4;
  v5(v10);

  char v7 = (void (*)(uint64_t))v10[6];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = swift_release();
  v7(v8);
  return swift_release();
}

uint64_t closure #2 in closure #1 in AnimatedSaveButton.body.getter@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_conversationKit);
  v23._object = (void *)0xE000000000000000;
  v7._object = (void *)0x80000001C37B1240;
  v7._countAndFlagsBits = 0xD000000000000012;
  v8.value._countAndFlagsBits = 0x61737265766E6F43;
  v8.value._object = (void *)0xEF74694B6E6F6974;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v23);

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v15 = Text.fontWeight(_:)();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  outlined consume of Text.Storage(v10, v12, v14);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v17;
  *(unsigned char *)(a2 + 16) = v19 & 1;
  *(void *)(a2 + 24) = v21;
  return result;
}

double VideoMessagePlayerViewModel.ancillaryButtonOpacity.getter()
{
  if (!VideoMessagePlayerViewModel.hasRecording.getter()) {
    return 0.0;
  }
  char v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
  double result = 1.0;
  if ((v1 & 1) == 0) {
    return 0.0;
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance AnimatedSaveButton()
{
  return AnimatedSaveButton.body.getter(*(void *)v0, *(void **)(v0 + 8), *(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24));
}

id MovieScrubber.makeCoordinator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<String>);
  Binding.projectedValue.getter();
  char v1 = *v0;
  objc_allocWithZone((Class)type metadata accessor for MovieScrubber.ScubberCoordinator());
  return MovieScrubber.ScubberCoordinator.init(text:player:)(v3, v4, v5, v6, v1);
}

id MovieScrubber.makeUIView(context:)()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F91358]), sel_init);
  objc_msgSend(v1, sel_setEstimatedDuration_, 5.0);
  objc_msgSend(v1, sel_setPlayer_, *v0);
  return v1;
}

uint64_t MovieScrubber.sizeThatFits(_:uiView:context:)()
{
  return 0x406F400000000000;
}

uint64_t MovieScrubber.ScubberCoordinator.text.setter()
{
  return Binding.wrappedValue.setter();
}

id MovieScrubber.ScubberCoordinator.init(text:player:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = &v5[OBJC_IVAR____TtCV15ConversationKitP33_B419541366E265736F7249488C40E55C13MovieScrubber18ScubberCoordinator_observer];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  Swift::String v7 = &v5[OBJC_IVAR____TtCV15ConversationKitP33_B419541366E265736F7249488C40E55C13MovieScrubber18ScubberCoordinator__text];
  *(void *)Swift::String v7 = a1;
  *((void *)v7 + 1) = a2;
  *((void *)v7 + 2) = a3;
  *((void *)v7 + 3) = a4;
  v26.receiver = v5;
  v26.super_class = (Class)type metadata accessor for MovieScrubber.ScubberCoordinator();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v8 = objc_msgSendSuper2(&v26, sel_init);
  CMTime v27 = CMTime.init(seconds:preferredTimescale:)(1.0, 1);
  CMTimeValue value = v27.value;
  CMTimeScale timescale = v27.timescale;
  CMTimeEpoch epoch = v27.epoch;
  uint64_t v12 = HIDWORD(*(void *)&v27.timescale);
  type metadata accessor for OS_dispatch_queue();
  char v13 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v24 = partial apply for closure #1 in MovieScrubber.ScubberCoordinator.init(text:player:);
  uint64_t v25 = v14;
  CMTimeValue aBlock = MEMORY[0x1E4F143A8];
  unint64_t v21 = 1107296256;
  double v22 = thunk for @escaping @callee_guaranteed @Sendable (@unowned CMTime) -> ();
  Swift::String v23 = &block_descriptor_84;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_release();
  CMTimeValue aBlock = value;
  unint64_t v21 = __PAIR64__(v12, timescale);
  double v22 = (uint64_t (*)(uint64_t, uint64_t *))epoch;
  id v16 = objc_msgSend(a5, sel_addPeriodicTimeObserverForInterval_queue_usingBlock_, &aBlock, v13, v15);
  _Block_release(v15);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t v17 = (uint64_t)v8
      + OBJC_IVAR____TtCV15ConversationKitP33_B419541366E265736F7249488C40E55C13MovieScrubber18ScubberCoordinator_observer;
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)&aBlock, v17);
  swift_endAccess();
  return v8;
}

void closure #1 in MovieScrubber.ScubberCoordinator.init(text:player:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    CMTime.seconds.getter();
    if (v7 <= 0.0) {
      goto LABEL_7;
    }
    if (one-time initialization token for timeFormatter != -1) {
      swift_once();
    }
    id v8 = (id)static NSDateComponentsFormatter.timeFormatter;
    CMTime.seconds.getter();
    id v9 = objc_msgSend(v8, sel_stringFromTimeInterval_);

    if (v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
LABEL_7:
      static String.localizedStringWithFormat(_:_:)();
    }
    MovieScrubber.ScubberCoordinator.text.setter();
  }
}

void MovieScrubber.ScubberCoordinator.init()()
{
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@unowned CMTime) -> ()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(v2, v3, v4);
  return swift_release();
}

id MovieScrubber.ScubberCoordinator.__deallocating_deinit()
{
  return MovieScrubber.ScubberCoordinator.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for MovieScrubber.ScubberCoordinator);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance MovieScrubber()
{
  return MovieScrubber.makeUIView(context:)();
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance MovieScrubber(uint64_t a1)
{
  return TPNumberPadCharacter.rawValue.getter(a1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance MovieScrubber@<X0>(void *a1@<X8>)
{
  id result = MovieScrubber.makeCoordinator()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance MovieScrubber()
{
  return MovieScrubber.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MovieScrubber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type MovieScrubber and conformance MovieScrubber();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MovieScrubber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type MovieScrubber and conformance MovieScrubber();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance MovieScrubber()
{
}

BOOL VideoMessagePlayerViewModel.hasRecording.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_videoMessageURL;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FeatureEligibility?(v1, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  uint64_t v5 = type metadata accessor for URL();
  BOOL v6 = __swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) != 1;
  outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
  return v6;
}

uint64_t key path getter for VideoMessagePlayerViewActions.dismissAction : VideoMessagePlayerViewActions@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for VideoMessagePlayerViewActions.dismissAction : VideoMessagePlayerViewActions(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  a2[1] = v5;
  return result;
}

uint64_t VideoMessagePlayerViewActions.dismissAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t VideoMessagePlayerViewActions.dismissAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*VideoMessagePlayerViewActions.dismissAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for VideoMessagePlayerViewActions.sendAction : VideoMessagePlayerViewActions@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for VideoMessagePlayerViewActions.sendAction : VideoMessagePlayerViewActions(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t VideoMessagePlayerViewActions.sendAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t VideoMessagePlayerViewActions.sendAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*VideoMessagePlayerViewActions.sendAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for VideoMessagePlayerViewActions.shutterAction : VideoMessagePlayerViewActions@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for VideoMessagePlayerViewActions.shutterAction : VideoMessagePlayerViewActions(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 32) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  *(void *)(a2 + 40) = v5;
  return result;
}

uint64_t VideoMessagePlayerViewActions.shutterAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t VideoMessagePlayerViewActions.shutterAction.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_release();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  return result;
}

uint64_t (*VideoMessagePlayerViewActions.shutterAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for VideoMessagePlayerViewActions.ancillaryAction : VideoMessagePlayerViewActions@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for VideoMessagePlayerViewActions.ancillaryAction : VideoMessagePlayerViewActions(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 48) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  *(void *)(a2 + 56) = v5;
  return result;
}

uint64_t VideoMessagePlayerViewActions.ancillaryAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t VideoMessagePlayerViewActions.ancillaryAction.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_release();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  return result;
}

uint64_t (*VideoMessagePlayerViewActions.ancillaryAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for VideoMessagePlayerViewActions.retakeAction : VideoMessagePlayerViewActions@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for VideoMessagePlayerViewActions.retakeAction : VideoMessagePlayerViewActions(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 64) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  *(void *)(a2 + 72) = v5;
  return result;
}

uint64_t VideoMessagePlayerViewActions.retakeAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t VideoMessagePlayerViewActions.retakeAction.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_release();
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  return result;
}

uint64_t (*VideoMessagePlayerViewActions.retakeAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for VideoMessagePlayerViewActions.callAction : VideoMessagePlayerViewActions@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for VideoMessagePlayerViewActions.callAction : VideoMessagePlayerViewActions(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 80) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  *(void *)(a2 + 88) = v5;
  return result;
}

uint64_t VideoMessagePlayerViewActions.callAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t VideoMessagePlayerViewActions.callAction.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_release();
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v0;
  return result;
}

uint64_t (*VideoMessagePlayerViewActions.callAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for VideoMessagePlayerViewActions.messageAction : VideoMessagePlayerViewActions@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for VideoMessagePlayerViewActions.messageAction : VideoMessagePlayerViewActions(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 96) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  *(void *)(a2 + 104) = v5;
  return result;
}

uint64_t VideoMessagePlayerViewActions.messageAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t VideoMessagePlayerViewActions.messageAction.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t result = swift_release();
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v0;
  return result;
}

uint64_t (*VideoMessagePlayerViewActions.messageAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void VideoMessagePlayerViewActions.init()(void *a1@<X8>)
{
  *a1 = TPNumberPadCharacter.rawValue.getter;
  a1[1] = 0;
  a1[2] = TPNumberPadCharacter.rawValue.getter;
  a1[3] = 0;
  a1[4] = TPNumberPadCharacter.rawValue.getter;
  a1[5] = 0;
  a1[6] = TPNumberPadCharacter.rawValue.getter;
  a1[7] = 0;
  a1[8] = TPNumberPadCharacter.rawValue.getter;
  a1[9] = 0;
  a1[10] = TPNumberPadCharacter.rawValue.getter;
  a1[11] = 0;
  a1[12] = TPNumberPadCharacter.rawValue.getter;
  a1[13] = 0;
}

void default argument 0 of VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)()
{
}

void default argument 1 of VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)()
{
}

void default argument 2 of VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)()
{
}

void default argument 3 of VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)()
{
}

void default argument 4 of VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)()
{
}

void default argument 5 of VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)()
{
}

void default argument 6 of VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)()
{
}

__n128 VideoMessagePlayerViewActions.init(dismissAction:sendAction:shutterAction:ancillaryAction:retakeAction:callAction:messageAction:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, __n128 a11, uint64_t a12, uint64_t a13)
{
  __n128 result = a11;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(__n128 *)(a9 + 80) = a11;
  *(void *)(a9 + 96) = a12;
  *(void *)(a9 + 104) = a13;
  return result;
}

uint64_t key path getter for UserSafetyActions.blockAction : UserSafetyActions@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for UserSafetyActions.blockAction : UserSafetyActions(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  a2[1] = v5;
  return result;
}

uint64_t UserSafetyActions.blockAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t UserSafetyActions.blockAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*UserSafetyActions.blockAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t key path getter for UserSafetyActions.helpAction : UserSafetyActions@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())v5;
  return swift_retain();
}

uint64_t key path setter for UserSafetyActions.helpAction : UserSafetyActions(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t UserSafetyActions.helpAction.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t UserSafetyActions.helpAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*UserSafetyActions.helpAction.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void UserSafetyActions.init()(void *a1@<X8>)
{
  *a1 = TPNumberPadCharacter.rawValue.getter;
  a1[1] = 0;
  a1[2] = TPNumberPadCharacter.rawValue.getter;
  a1[3] = 0;
}

void default argument 0 of UserSafetyActions.init(blockAction:helpAction:)()
{
}

void default argument 1 of UserSafetyActions.init(blockAction:helpAction:)()
{
}

uint64_t UserSafetyActions.init(blockAction:helpAction:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void VideoMessagePlayerViewModel.PlayerSpatiality.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int VideoMessagePlayerViewModel.PlayerSpatiality.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t key path getter for VideoMessagePlayerViewModel.controlsConfiguration : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.controlsConfiguration : VideoMessagePlayerViewModel(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC8))(*a1);
}

uint64_t VideoMessagePlayerViewModel.controlsConfiguration.getter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.getter();
}

{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_30();
  swift_release();
  swift_release();
  return v1;
}

uint64_t VideoMessagePlayerViewModel.controlsConfiguration.setter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.setter();
}

{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  Swift::UInt v1 = v0;
  return OUTLINED_FUNCTION_43_20();
}

uint64_t (*VideoMessagePlayerViewModel.controlsConfiguration.modify())()
{
  Swift::UInt v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$controlsConfiguration : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD8))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$controlsConfiguration : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  double v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE0))(v7);
}

uint64_t VideoMessagePlayerViewModel.$controlsConfiguration.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__controlsConfiguration, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>);
}

uint64_t VideoMessagePlayerViewModel.$controlsConfiguration.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__controlsConfiguration, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>);
}

void (*VideoMessagePlayerViewModel.$controlsConfiguration.modify())(uint64_t a1, char a2)
{
  Swift::UInt v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$controlsConfiguration.modify;
}

void VideoMessagePlayerViewModel.$controlsConfiguration.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for VideoMessagePlayerViewModel.playState : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.playState : VideoMessagePlayerViewModel(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF8))(*a1);
}

uint64_t VideoMessagePlayerViewModel.playState.getter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.getter();
}

uint64_t VideoMessagePlayerViewModel.playState.setter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.setter();
}

uint64_t (*VideoMessagePlayerViewModel.playState.modify())()
{
  Swift::UInt v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$playState : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x108))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$playState : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  double v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x110))(v7);
}

uint64_t VideoMessagePlayerViewModel.$playState.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__playState, &demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>);
}

uint64_t VideoMessagePlayerViewModel.$playState.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__playState, &demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>);
}

void (*VideoMessagePlayerViewModel.$playState.modify())(uint64_t a1, char a2)
{
  Swift::UInt v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$playState.modify;
}

void VideoMessagePlayerViewModel.$playState.modify(uint64_t a1, char a2)
{
}

void VideoMessagePlayerViewModel.$controlsConfiguration.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *(void **)a1;
  __n128 v5 = *(void **)(*(void *)a1 + 48);
  uint64_t v6 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v7 = v4[4];
    uint64_t v8 = v4[5];
    OUTLINED_FUNCTION_2_1();
    v9();
    a3(v5);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 56));
  }
  free(v6);
  free(v5);
  free(v4);
}

void *key path getter for VideoMessagePlayerViewModel.playerSpatiality : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x120))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.playerSpatiality : VideoMessagePlayerViewModel(char *a1, void **a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x128))(&v4);
}

uint64_t VideoMessagePlayerViewModel.playerSpatiality.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_20_51();
  swift_release();
  return swift_release();
}

uint64_t VideoMessagePlayerViewModel.playerSpatiality.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t (*VideoMessagePlayerViewModel.playerSpatiality.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$playerSpatiality : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x138))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$playerSpatiality : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.PlayerSpatiality>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x140))(v7);
}

uint64_t VideoMessagePlayerViewModel.$playerSpatiality.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__playerSpatiality, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.PlayerSpatiality>);
}

uint64_t VideoMessagePlayerViewModel.$playerSpatiality.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.PlayerSpatiality>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__playerSpatiality, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.PlayerSpatiality>);
}

void (*VideoMessagePlayerViewModel.$playerSpatiality.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.PlayerSpatiality>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.PlayerSpatiality>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$playerSpatiality.modify;
}

void VideoMessagePlayerViewModel.$playerSpatiality.modify(uint64_t a1, char a2)
{
}

uint64_t VideoMessagePlayerViewModel.durationString.getter()
{
  return VideoMessagePlayerViewModel.durationString.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t VideoMessagePlayerViewModel.durationString.setter()
{
  return VideoMessagePlayerViewModel.durationString.setter();
}

{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t (*VideoMessagePlayerViewModel.durationString.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$durationString : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x168))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$durationString : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x170))(v7);
}

uint64_t VideoMessagePlayerViewModel.$durationString.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__durationString, &demangling cache variable for type metadata for Published<String>);
}

uint64_t VideoMessagePlayerViewModel.$durationString.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<String>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__durationString, &demangling cache variable for type metadata for Published<String>);
}

void (*VideoMessagePlayerViewModel.$durationString.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$durationString.modify;
}

void VideoMessagePlayerViewModel.$durationString.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for VideoMessagePlayerViewModel.title : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x180))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.title : VideoMessagePlayerViewModel(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x188);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t VideoMessagePlayerViewModel.title.getter()
{
  return VideoMessagePlayerViewModel.durationString.getter();
}

uint64_t VideoMessagePlayerViewModel.title.setter()
{
  return VideoMessagePlayerViewModel.durationString.setter();
}

uint64_t (*VideoMessagePlayerViewModel.title.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$title : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x198))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$title : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A0))(v7);
}

uint64_t VideoMessagePlayerViewModel.$title.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__title, &demangling cache variable for type metadata for Published<String>);
}

uint64_t VideoMessagePlayerViewModel.$title.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<String>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__title, &demangling cache variable for type metadata for Published<String>);
}

void (*VideoMessagePlayerViewModel.$title.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$title.modify;
}

void VideoMessagePlayerViewModel.$title.modify(uint64_t a1, char a2)
{
}

double key path getter for VideoMessagePlayerViewModel.actions : VideoMessagePlayerViewModel@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B0))(v7);
  long long v3 = v7[1];
  *a2 = v7[0];
  a2[1] = v3;
  long long v4 = v7[3];
  a2[2] = v7[2];
  a2[3] = v4;
  long long v5 = v7[5];
  a2[4] = v7[4];
  a2[5] = v5;
  double result = *(double *)&v8;
  a2[6] = v8;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.actions : VideoMessagePlayerViewModel(uint64_t *a1, void **a2)
{
  uint64_t v2 = a1[13];
  long long v3 = *a2;
  uint64_t v6 = *a1;
  long long v7 = *(_OWORD *)(a1 + 1);
  long long v8 = *(_OWORD *)(a1 + 3);
  long long v9 = *(_OWORD *)(a1 + 5);
  long long v10 = *(_OWORD *)(a1 + 7);
  long long v11 = *(_OWORD *)(a1 + 9);
  long long v12 = *(_OWORD *)(a1 + 11);
  uint64_t v13 = v2;
  long long v4 = *(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1B8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v4(&v6);
}

uint64_t VideoMessagePlayerViewModel.actions.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_20_51();
  swift_release();
  return swift_release();
}

uint64_t VideoMessagePlayerViewModel.actions.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return OUTLINED_FUNCTION_42_23();
}

uint64_t (*VideoMessagePlayerViewModel.actions.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$actions : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1C8))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$actions : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewActions>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1D0))(v7);
}

uint64_t VideoMessagePlayerViewModel.$actions.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__actions, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewActions>);
}

uint64_t VideoMessagePlayerViewModel.$actions.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewActions>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__actions, &demangling cache variable for type metadata for Published<VideoMessagePlayerViewActions>);
}

void (*VideoMessagePlayerViewModel.$actions.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewActions>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewActions>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$actions.modify;
}

void VideoMessagePlayerViewModel.$actions.modify(uint64_t a1, char a2)
{
}

double key path getter for VideoMessagePlayerViewModel.safetyActions : VideoMessagePlayerViewModel@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1E0))(v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.safetyActions : VideoMessagePlayerViewModel(uint64_t *a1, void **a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = *a2;
  uint64_t v6 = *a1;
  long long v7 = *(_OWORD *)(a1 + 1);
  uint64_t v8 = v2;
  long long v4 = *(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1E8);
  swift_retain();
  swift_retain();
  return v4(&v6);
}

uint64_t VideoMessagePlayerViewModel.safetyActions.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_20_51();
  swift_release();
  return swift_release();
}

uint64_t VideoMessagePlayerViewModel.safetyActions.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return OUTLINED_FUNCTION_42_23();
}

uint64_t (*VideoMessagePlayerViewModel.safetyActions.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$safetyActions : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1F8))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$safetyActions : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UserSafetyActions>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x200))(v7);
}

uint64_t VideoMessagePlayerViewModel.$safetyActions.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__safetyActions, &demangling cache variable for type metadata for Published<UserSafetyActions>);
}

uint64_t VideoMessagePlayerViewModel.$safetyActions.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<UserSafetyActions>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__safetyActions, &demangling cache variable for type metadata for Published<UserSafetyActions>);
}

void (*VideoMessagePlayerViewModel.$safetyActions.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UserSafetyActions>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UserSafetyActions>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$safetyActions.modify;
}

void VideoMessagePlayerViewModel.$safetyActions.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for VideoMessagePlayerViewModel.showsAncillaryControl : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x210))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.showsAncillaryControl : VideoMessagePlayerViewModel(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x218))(*a1);
}

uint64_t VideoMessagePlayerViewModel.showsAncillaryControl.getter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.getter();
}

uint64_t VideoMessagePlayerViewModel.showsAncillaryControl.setter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.setter();
}

uint64_t (*VideoMessagePlayerViewModel.showsAncillaryControl.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$showsAncillaryControl : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x228))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$showsAncillaryControl : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x230))(v7);
}

uint64_t VideoMessagePlayerViewModel.$showsAncillaryControl.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__showsAncillaryControl, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
}

uint64_t VideoMessagePlayerViewModel.$showsAncillaryControl.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<Bool>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__showsAncillaryControl, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
}

void (*VideoMessagePlayerViewModel.$showsAncillaryControl.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$showsAncillaryControl.modify;
}

void VideoMessagePlayerViewModel.$showsAncillaryControl.modify(uint64_t a1, char a2)
{
}

uint64_t VideoMessagePlayerViewModel.saveState.getter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.getter();
}

uint64_t VideoMessagePlayerViewModel.saveState.setter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.setter();
}

uint64_t (*VideoMessagePlayerViewModel.saveState.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$saveState : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x258))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$saveState : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnimatedSaveView.SaveState>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x260))(v7);
}

uint64_t VideoMessagePlayerViewModel.$saveState.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__saveState, &demangling cache variable for type metadata for Published<AnimatedSaveView.SaveState>);
}

uint64_t VideoMessagePlayerViewModel.$saveState.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<AnimatedSaveView.SaveState>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__saveState, &demangling cache variable for type metadata for Published<AnimatedSaveView.SaveState>);
}

void (*VideoMessagePlayerViewModel.$saveState.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnimatedSaveView.SaveState>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnimatedSaveView.SaveState>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$saveState.modify;
}

void VideoMessagePlayerViewModel.$saveState.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for VideoMessagePlayerViewModel.isSensitive : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x270))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.isSensitive : VideoMessagePlayerViewModel(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x278))(*a1);
}

uint64_t VideoMessagePlayerViewModel.isSensitive.getter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.getter();
}

uint64_t VideoMessagePlayerViewModel.isSensitive.setter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.setter();
}

uint64_t (*VideoMessagePlayerViewModel.isSensitive.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$isSensitive : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x288))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$isSensitive : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x290))(v7);
}

uint64_t VideoMessagePlayerViewModel.$isSensitive.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__isSensitive, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
}

uint64_t VideoMessagePlayerViewModel.$isSensitive.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<Bool>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__isSensitive, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
}

void (*VideoMessagePlayerViewModel.$isSensitive.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$isSensitive.modify;
}

void VideoMessagePlayerViewModel.$isSensitive.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for VideoMessagePlayerViewModel.showsSensitivityOptions : VideoMessagePlayerViewModel@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2A0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for VideoMessagePlayerViewModel.showsSensitivityOptions : VideoMessagePlayerViewModel(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2A8))(*a1);
}

uint64_t VideoMessagePlayerViewModel.showsSensitivityOptions.getter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.getter();
}

uint64_t VideoMessagePlayerViewModel.showsSensitivityOptions.setter()
{
  return VideoMessagePlayerViewModel.controlsConfiguration.setter();
}

uint64_t (*VideoMessagePlayerViewModel.showsSensitivityOptions.modify())()
{
  id v1 = OUTLINED_FUNCTION_47_1();
  OUTLINED_FUNCTION_56((uint64_t)v1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_49(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_16_4(v3);
  return LinkDetailHeaderView.invitedMemberHandles.modify;
}

uint64_t key path getter for VideoMessagePlayerViewModel.$showsSensitivityOptions : VideoMessagePlayerViewModel(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2B8))();
}

uint64_t key path setter for VideoMessagePlayerViewModel.$showsSensitivityOptions : VideoMessagePlayerViewModel(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2C0))(v7);
}

uint64_t VideoMessagePlayerViewModel.$showsSensitivityOptions.getter()
{
  return ShutterModel.$targetPercentComplete.getter((uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__showsSensitivityOptions, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
}

uint64_t VideoMessagePlayerViewModel.$showsSensitivityOptions.setter(uint64_t a1)
{
  return VideoMessagePlayerViewModel.$controlsConfiguration.setter(a1, &demangling cache variable for type metadata for Published<Bool>.Publisher, (uint64_t)&OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__showsSensitivityOptions, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
}

uint64_t VideoMessagePlayerViewModel.$controlsConfiguration.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_1();
  v10();
  OUTLINED_FUNCTION_5_11();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v6);
}

void (*VideoMessagePlayerViewModel.$showsSensitivityOptions.modify())(uint64_t a1, char a2)
{
  id v1 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  OUTLINED_FUNCTION_5_5(v2);
  *(void *)(v0 + 40) = v3;
  __n128 v5 = malloc(*(void *)(v4 + 64));
  uint64_t v6 = OUTLINED_FUNCTION_44_0((uint64_t)v5);
  OUTLINED_FUNCTION_48_2((uint64_t)v6);
  OUTLINED_FUNCTION_9_2();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  swift_endAccess();
  return VideoMessagePlayerViewModel.$showsSensitivityOptions.modify;
}

void VideoMessagePlayerViewModel.$showsSensitivityOptions.modify(uint64_t a1, char a2)
{
}

uint64_t VideoMessagePlayerViewModel.shutterModel.getter()
{
  return swift_retain();
}

uint64_t VideoMessagePlayerViewModel.videoMessageURL.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of FeatureEligibility?(v1 + OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_videoMessageURL, a1, &demangling cache variable for type metadata for URL?);
}

void VideoMessagePlayerViewModel.init(videoMessageURL:playerSpaciality:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v48 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>.Publisher);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnimatedSaveView.SaveState>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_25_46(v8, v44);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Bool>);
  OUTLINED_FUNCTION_4();
  uint64_t v47 = v9;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UserSafetyActions>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewActions>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v15);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_36_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_21();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>);
  OUTLINED_FUNCTION_4();
  uint64_t v22 = v21;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_21();
  uint64_t v26 = v25 - v24;
  char v46 = *v4;
  CMTime v27 = &v2[OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__controlsConfiguration];
  LOBYTE(v51) = 1;
  uint64_t v28 = v2;
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v27, v26, v20);
  Published.init(initialValue:)();
  uint64_t v29 = OUTLINED_FUNCTION_41_0();
  v30(v29);
  uint64_t v31 = &v28[OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__durationString];
  uint64_t v51 = 206967550000;
  unint64_t v52 = 0xE500000000000000;
  Published.init(initialValue:)();
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  v32(v31, v1, v45);
  uint64_t v33 = &v28[OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel__title];
  Published.init(initialValue:)();
  v32(v33, v1, v45);
  uint64_t v55 = TPNumberPadCharacter.rawValue.getter;
  uint64_t v56 = 0;
  v57 = TPNumberPadCharacter.rawValue.getter;
  uint64_t v58 = 0;
  uint64_t v59 = TPNumberPadCharacter.rawValue.getter;
  uint64_t v60 = 0;
  uint64_t v61 = TPNumberPadCharacter.rawValue.getter;
  uint64_t v62 = 0;
  int v63 = TPNumberPadCharacter.rawValue.getter;
  uint64_t v64 = 0;
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_34_29();
  v34();
  uint64_t v51 = (uint64_t)TPNumberPadCharacter.rawValue.getter;
  unint64_t v52 = 0;
  v53 = TPNumberPadCharacter.rawValue.getter;
  uint64_t v54 = 0;
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_34_29();
  v35();
  LOBYTE(v51) = 1;
  Published.init(initialValue:)();
  uint64_t v36 = *(void (**)(void))(v47 + 32);
  OUTLINED_FUNCTION_36_24();
  v36();
  LOBYTE(v51) = 0;
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_34_29();
  v37();
  OUTLINED_FUNCTION_37_21();
  OUTLINED_FUNCTION_36_24();
  v36();
  OUTLINED_FUNCTION_37_21();
  OUTLINED_FUNCTION_36_24();
  v36();
  uint64_t v38 = OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_shutterModel;
  type metadata accessor for ShutterModel();
  swift_allocObject();
  *(void *)&v28[v38] = ShutterModel.init(_:)(180.0);
  *(void *)&v28[OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_stateSink] = 0;
  outlined init with copy of FeatureEligibility?(v48, (uint64_t)&v28[OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_videoMessageURL], &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_5_11();
  char v50 = v46;
  Published.init(initialValue:)();
  swift_endAccess();

  v49.receiver = v28;
  v49.super_class = (Class)type metadata accessor for VideoMessagePlayerViewModel(0);
  uint64_t v39 = objc_msgSendSuper2(&v49, sel_init);
  uint64_t v40 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v39) + 0x108);
  uint64_t v41 = v39;
  v40();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Published<VideoMessageControlsView.PlayState>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<VideoMessageControlsView.PlayState>.Publisher);
  uint64_t v42 = Publisher<>.sink(receiveValue:)();

  swift_release();
  outlined destroy of SystemUpdateNotice?(v48, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_26_2();
  v43();
  *(void *)((char *)v41 + OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_stateSink) = v42;
  swift_release();
  OUTLINED_FUNCTION_28();
}

uint64_t type metadata accessor for VideoMessageControlsView(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for VideoMessageControlsView);
}

uint64_t type metadata accessor for VideoMessagePlayerViewModel(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for VideoMessagePlayerViewModel);
}

uint64_t outlined init with take of VideoMessageControlsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VideoMessageControlsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in VideoMessageControlsView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for VideoMessageControlsView(0);
  OUTLINED_FUNCTION_1_1(v5);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return closure #1 in VideoMessageControlsView.body.getter(a1, v7, a2);
}

void closure #1 in VideoMessagePlayerViewModel.init(videoMessageURL:playerSpaciality:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    int v7 = (*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xF0))();
    if (!v7 || v7 == 2)
    {
      if (v2 == 3)
      {
        uint64_t v10 = *(void (**)(uint64_t))(**(void **)((char *)v5
                                                           + OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_shutterModel)
                                             + 632);
        uint64_t v11 = swift_retain();
        v10(v11);

        swift_release();
        return;
      }
    }
    else if (v7 == 3 && (v2 | 2) == 2)
    {
      (*(void (**)(void))((*v6 & *v5) + 0x278))(0);
      uint64_t v8 = *(void (**)(uint64_t))(**(void **)((char *)v5
                                                        + OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_shutterModel)
                                          + 616);
      uint64_t v9 = swift_retain();
      v8(v9);
      swift_release();
    }
  }
}

uint64_t VideoMessagePlayerViewModel.axDurationString.getter()
{
  uint64_t v6 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150);
  uint64_t v1 = v6();
  int v2 = (void *)MEMORY[0x1C87730B0](v1);
  swift_bridgeObjectRelease();
  AXDurationForDurationString();

  id v3 = (id)AXDurationStringForDuration();
  if (v3)
  {
    uint64_t v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    return OUTLINED_FUNCTION_41_0();
  }
  else
  {
    return v6();
  }
}

id VideoMessagePlayerViewModel.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void VideoMessagePlayerViewModel.init()()
{
}

id VideoMessagePlayerViewModel.__deallocating_deinit()
{
  return MovieScrubber.ScubberCoordinator.__deallocating_deinit(type metadata accessor for VideoMessagePlayerViewModel);
}

id MovieScrubber.ScubberCoordinator.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance VideoMessagePlayerViewModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for VideoMessagePlayerViewModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void VideoMessagePlayerViewModel.shutterButton(trackBackgroundColor:trackForegroundColor:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v30 = v1;
  uint64_t v31 = v2;
  uint64_t v32 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_25_46(v5, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  OUTLINED_FUNCTION_4();
  uint64_t v28 = v7;
  uint64_t v29 = v6;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_27_17(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_21_1();
  LocalizedStringKey.init(stringLiteral:)();
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(uint64_t *__return_ptr))(v11 + 432))(&v33);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v26 = v37;
  *(_OWORD *)(swift_allocObject() + 16) = v26;
  Button<>.init(_:action:)();
  type metadata accessor for ShutterModel();
  lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel(&lazy protocol witness table cache variable for type ShutterModel and conformance ShutterModel, (void (*)(uint64_t))type metadata accessor for ShutterModel);
  swift_retain();
  uint64_t v12 = ObservedObject.init(wrappedValue:)();
  uint64_t v14 = v13;
  State.init(wrappedValue:)();
  uint64_t v15 = v33;
  uint64_t v16 = v34;
  uint64_t v33 = v12;
  uint64_t v34 = v14;
  uint64_t v35 = v15;
  uint64_t v36 = v16;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  lazy protocol witness table accessor for type ShutterButtonStyle and conformance ShutterButtonStyle();
  View.buttonStyle<A>(_:)();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v17();
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_2_1();
  v19();
  uint64_t v20 = (uint64_t *)(v0 + *(int *)(v10 + 44));
  *uint64_t v20 = KeyPath;
  v20[1] = v30;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  swift_retain();
  v21(v27, v29);
  uint64_t v22 = swift_getKeyPath();
  uint64_t v33 = v31;
  swift_retain();
  uint64_t v23 = AnyShapeStyle.init<A>(_:)();
  outlined init with copy of FeatureEligibility?(v0, v32, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
  uint64_t v24 = (uint64_t *)(v32
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>)
                           + 36));
  *uint64_t v24 = v22;
  v24[1] = v23;
  outlined destroy of SystemUpdateNotice?(v0, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
  OUTLINED_FUNCTION_28();
}

void one-time initialization function for defaultValue()
{
  static MarginKey.defaultValue = 0x4028000000000000;
}

{
  static PrimaryButtonSizeKey.defaultValue = 0x4052000000000000;
}

{
  static HeightKey.defaultValue = 0;
}

uint64_t *MarginKey.defaultValue.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return &static MarginKey.defaultValue;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance MarginKey@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = MarginKey.defaultValue.unsafeMutableAddressor();
  double result = *(double *)v2;
  *a1 = *v2;
  return result;
}

uint64_t *PrimaryButtonSizeKey.defaultValue.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return &static PrimaryButtonSizeKey.defaultValue;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance PrimaryButtonSizeKey@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = PrimaryButtonSizeKey.defaultValue.unsafeMutableAddressor();
  double result = *(double *)v2;
  *a1 = *v2;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance PrimaryButtonSizeKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return MEMORY[0x1F40F8670](a1, a2, a3, a4, v8);
}

uint64_t key path getter for EnvironmentValues.verticalSizeClass : EnvironmentValues()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_1C34C9DC4()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t key path setter for EnvironmentValues.verticalSizeClass : EnvironmentValues(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  MEMORY[0x1F4188790](v3 - 8);
  OUTLINED_FUNCTION_62();
  outlined init with copy of FeatureEligibility?(a1, v1, &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  return EnvironmentValues.verticalSizeClass.setter();
}

void sub_1C34C9E78(double *a1@<X8>)
{
  *a1 = EnvironmentValues.margin.getter();
}

uint64_t sub_1C34C9EA4()
{
  return EnvironmentValues.margin.setter((void (*)(void))lazy protocol witness table accessor for type MarginKey and conformance MarginKey);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>>);
    lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _AnimationModifier<AnimatedSaveView.SaveState> and conformance _AnimationModifier<A>, &demangling cache variable for type metadata for _AnimationModifier<AnimatedSaveView.SaveState>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>, _AnimationModifier<AnimatedSaveView.SaveState>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(ModifiedContent<AnimatedSaveView, _OpacityEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void partial apply for closure #1 in VideoMessagePlayerViewModel.init(videoMessageURL:playerSpaciality:)(unsigned __int8 *a1)
{
  closure #1 in VideoMessagePlayerViewModel.init(videoMessageURL:playerSpaciality:)(a1, v1);
}

uint64_t lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShutterButtonStyle and conformance ShutterButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ShutterButtonStyle and conformance ShutterButtonStyle;
  if (!lazy protocol witness table cache variable for type ShutterButtonStyle and conformance ShutterButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShutterButtonStyle and conformance ShutterButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoMessageControlsView.PlayState and conformance VideoMessageControlsView.PlayState()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageControlsView.PlayState and conformance VideoMessageControlsView.PlayState;
  if (!lazy protocol witness table cache variable for type VideoMessageControlsView.PlayState and conformance VideoMessageControlsView.PlayState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageControlsView.PlayState and conformance VideoMessageControlsView.PlayState);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in VideoMessageControlsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in AnimatedSaveButton()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type VideoMessagePlayerViewModel.ControlsConfiguration and conformance VideoMessagePlayerViewModel.ControlsConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessagePlayerViewModel.ControlsConfiguration and conformance VideoMessagePlayerViewModel.ControlsConfiguration;
  if (!lazy protocol witness table cache variable for type VideoMessagePlayerViewModel.ControlsConfiguration and conformance VideoMessagePlayerViewModel.ControlsConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessagePlayerViewModel.ControlsConfiguration and conformance VideoMessagePlayerViewModel.ControlsConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoMessagePlayerViewModel.PlayerSpatiality and conformance VideoMessagePlayerViewModel.PlayerSpatiality()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessagePlayerViewModel.PlayerSpatiality and conformance VideoMessagePlayerViewModel.PlayerSpatiality;
  if (!lazy protocol witness table cache variable for type VideoMessagePlayerViewModel.PlayerSpatiality and conformance VideoMessagePlayerViewModel.PlayerSpatiality)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessagePlayerViewModel.PlayerSpatiality and conformance VideoMessagePlayerViewModel.PlayerSpatiality);
  }
  return result;
}

id sub_1C34CA258@<X0>(void *a1@<X8>)
{
  id result = VideoMessageControlsView.videoMessageViewModel.getter();
  *a1 = result;
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for VideoMessageControlsView(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = a3[7];
    uint64_t v21 = a3[8];
    uint64_t v22 = (void *)(a1 + v20);
    uint64_t v23 = (uint64_t *)(a2 + v20);
    uint64_t v25 = *v23;
    uint64_t v24 = (void *)v23[1];
    *uint64_t v22 = v25;
    v22[1] = v24;
    uint64_t v26 = a1 + v21;
    uint64_t v27 = a2 + v21;
    *(unsigned char *)uint64_t v26 = *(unsigned char *)v27;
    *(void *)(v26 + 8) = *(void *)(v27 + 8);
    uint64_t v28 = a3[9];
    uint64_t v29 = a3[10];
    uint64_t v30 = *(void **)(a2 + v28);
    *(void *)(a1 + v28) = v30;
    *(void *)(a1 + v29) = *(void *)(a2 + v29);
    *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
    id v31 = v24;
    swift_retain();
    id v32 = v30;
  }
  return a1;
}

void destroy for VideoMessageControlsView(uint64_t a1, int *a2)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[6];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }

  swift_release();
  char v8 = *(void **)(a1 + a2[9]);
}

uint64_t initializeWithCopy for VideoMessageControlsView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v18);
  uint64_t v21 = (uint64_t *)(a2 + v18);
  uint64_t v23 = *v21;
  uint64_t v22 = (void *)v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  uint64_t v24 = a1 + v19;
  uint64_t v25 = a2 + v19;
  *(unsigned char *)uint64_t v24 = *(unsigned char *)v25;
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  uint64_t v26 = a3[9];
  uint64_t v27 = a3[10];
  uint64_t v28 = *(void **)(a2 + v26);
  *(void *)(a1 + v26) = v28;
  *(void *)(a1 + v27) = *(void *)(a2 + v27);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  id v29 = v22;
  swift_retain();
  id v30 = v28;
  return a1;
}

uint64_t assignWithCopy for VideoMessageControlsView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    outlined destroy of SystemUpdateNotice?(a1 + v10, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    outlined destroy of SystemUpdateNotice?(a1 + v15, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  uint64_t v23 = (void *)v22[1];
  uint64_t v24 = (void *)v21[1];
  v21[1] = v23;
  id v25 = v23;

  uint64_t v26 = a3[8];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_retain();
  swift_release();
  uint64_t v29 = a3[9];
  id v30 = *(void **)(a1 + v29);
  id v31 = *(void **)(a2 + v29);
  *(void *)(a1 + v29) = v31;
  id v32 = v31;

  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for VideoMessageControlsView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v17 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for VideoMessageControlsView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    outlined destroy of SystemUpdateNotice?(a1 + v10, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (char *)a2 + v16;
    outlined destroy of SystemUpdateNotice?(a1 + v16, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v20))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v20);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  uint64_t v22 = a3[7];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v27 = (void *)v23[1];
  *uint64_t v23 = v26;
  v23[1] = v25;

  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (uint64_t)a2 + v28;
  *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  swift_release();
  uint64_t v31 = a3[9];
  id v32 = *(void **)(a1 + v31);
  *(void *)(a1 + v31) = *(uint64_t *)((char *)a2 + v31);

  uint64_t v33 = a3[11];
  *(void *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *(void *)(a1 + v33) = *(uint64_t *)((char *)a2 + v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoMessageControlsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C34CB298);
}

uint64_t sub_1C34CB298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_46_0(*(void *)(a1 + *(int *)(a3 + 28) + 8));
  }
  uint64_t v8 = v6;
  uint64_t v9 = a1 + *(int *)(a3 + 20);
  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for VideoMessageControlsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C34CB338);
}

void sub_1C34CB338(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
}

void type metadata completion function for VideoMessageControlsView()
{
  type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for VideoMessageControlsView.PlayState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *id result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C34CB560);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for VideoMessageControlsView.PlayState()
{
}

uint64_t destroy for AnimatedSaveButton(uint64_t a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for AnimatedSaveButton(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v4 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatedSaveButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnimatedSaveButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

void type metadata accessor for AnimatedSaveButton()
{
}

uint64_t type metadata accessor for MovieScrubber.ScubberCoordinator()
{
  return self;
}

uint64_t destroy for VideoMessagePlayerViewActions()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for VideoMessagePlayerViewActions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v3 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for VideoMessagePlayerViewActions(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain();
  swift_release();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

_OWORD *assignWithTake for VideoMessagePlayerViewActions(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  a1[5] = a2[5];
  swift_release();
  a1[6] = a2[6];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoMessagePlayerViewActions(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoMessagePlayerViewActions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for VideoMessagePlayerViewActions()
{
}

uint64_t destroy for UserSafetyActions()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for UserSafetyActions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for UserSafetyActions(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for UserSafetyActions(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void type metadata accessor for UserSafetyActions()
{
}

uint64_t ObjC metadata update function for VideoMessagePlayerViewModel()
{
  return type metadata accessor for VideoMessagePlayerViewModel(0);
}

void type metadata completion function for VideoMessagePlayerViewModel()
{
  type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<VideoMessagePlayerViewModel.ControlsConfiguration>);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<VideoMessageControlsView.PlayState>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<VideoMessagePlayerViewModel.PlayerSpatiality>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<String>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<VideoMessagePlayerViewActions>);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<UserSafetyActions>);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Published<Bool>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Published<Bool>(319, &lazy cache variable for type metadata for Published<AnimatedSaveView.SaveState>);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for URL?();
                  if (v8 <= 0x3F) {
                    swift_updateClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for VideoMessagePlayerViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VideoMessagePlayerViewModel);
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.controlsConfiguration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.controlsConfiguration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.controlsConfiguration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$controlsConfiguration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$controlsConfiguration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$controlsConfiguration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.playState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.playState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.playState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$playState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$playState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$playState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.playerSpatiality.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.playerSpatiality.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.playerSpatiality.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$playerSpatiality.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$playerSpatiality.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$playerSpatiality.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.durationString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.durationString.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.durationString.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$durationString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$durationString.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$durationString.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.title.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.title.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.title.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$title.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$title.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$title.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.actions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.actions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.actions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$actions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$actions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$actions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.safetyActions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.safetyActions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.safetyActions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$safetyActions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$safetyActions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$safetyActions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.showsAncillaryControl.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.showsAncillaryControl.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.showsAncillaryControl.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$showsAncillaryControl.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$showsAncillaryControl.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$showsAncillaryControl.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.saveState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.saveState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.saveState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$saveState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$saveState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$saveState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.isSensitive.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.isSensitive.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.isSensitive.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$isSensitive.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$isSensitive.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$isSensitive.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.showsSensitivityOptions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.showsSensitivityOptions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.showsSensitivityOptions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$showsSensitivityOptions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$showsSensitivityOptions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.$showsSensitivityOptions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.__allocating_init(videoMessageURL:playerSpaciality:)()
{
  return (*(uint64_t (**)(void))(v0 + 744))();
}

uint64_t dispatch thunk of VideoMessagePlayerViewModel.axDurationString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2F0))();
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for VideoMessagePlayerViewModel.ControlsConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C34CCF60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for VideoMessagePlayerViewModel.ControlsConfiguration()
{
}

unsigned char *storeEnumTagSinglePayload for VideoMessagePlayerViewModel.PlayerSpatiality(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C34CD060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for VideoMessagePlayerViewModel.PlayerSpatiality()
{
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>>, ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>>, ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>>, ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>>, ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>>, ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>>);
    lazy protocol witness table accessor for type ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Material>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0> and conformance GeometryReader<A>, &demangling cache variable for type metadata for GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ColorScheme> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>>);
    lazy protocol witness table accessor for type ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<<<opaque return type of View.onTapGesture(count:perform:)>>.0>, _EnvironmentKeyWritingModifier<ColorScheme>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    lazy protocol witness table accessor for type ShutterButtonStyle and conformance ShutterButtonStyle();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Image.Scale>>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Font?>>, _ShadowEffect>, _FrameLayout>>);
    type metadata accessor for BorderlessButtonStyle();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _ForegroundStyleModifier<Color>>, _EnvironmentKeyWritingModifier<Image.Scale>>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Font?>>, _ShadowEffect>, _FrameLayout>> and conformance Button<A>);
    _s7SwiftUI31AccessibilityAttachmentModifierVAcA04ViewE0AAWlTm_0((uint64_t)&lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>((uint64_t)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t destroy for MovieScrubber(id *a1)
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MovieScrubber(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  a1[4] = *(void *)(a2 + 32);
  id v6 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MovieScrubber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MovieScrubber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for MovieScrubber()
{
  return &unk_1F1EAF540;
}

uint64_t destroy for VideoMessageControlsView.PlayButtonView(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for VideoMessageControlsView.PlayButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  id v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  id v8 = v6;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VideoMessageControlsView.PlayButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  id v8 = *(void **)(a2 + 24);
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  id v10 = v8;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for VideoMessageControlsView.PlayButtonView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  *(void *)(a1 + 16) = a2[2];

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  swift_release();
  *(void *)(a1 + 40) = a2[5];
  swift_release();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoMessageControlsView.PlayButtonView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoMessageControlsView.PlayButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for VideoMessageControlsView.PlayButtonView()
{
  return &unk_1F1EAF5C0;
}

void *initializeBufferWithCopyOfBuffer for VideoMessageControlsView.RemoteBottomControlsView(void *a1, void *a2)
{
  int v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void destroy for VideoMessageControlsView.RemoteBottomControlsView(uint64_t a1)
{
}

void *assignWithCopy for VideoMessageControlsView.RemoteBottomControlsView(void *a1, void *a2)
{
  *a1 = *a2;
  int v3 = (void *)a2[1];
  id v4 = (void *)a1[1];
  a1[1] = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for VideoMessageControlsView.RemoteBottomControlsView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  id v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

void *type metadata accessor for VideoMessageControlsView.RemoteBottomControlsView()
{
  return &unk_1F1EAF648;
}

void *initializeBufferWithCopyOfBuffer for VideoMessageControlsView.LocalBottomControlsView(void *a1, uint64_t *a2, int *a3)
{
  id v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *id v4 = *a2;
    id v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    char v7 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    char v9 = *((unsigned char *)a2 + 24);
    id v10 = v7;
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v8, v9);
    v4[2] = v8;
    *((unsigned char *)v4 + 24) = v9;
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
      }
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[7];
    uint64_t v18 = (void *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
      }
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    *(void *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  return v4;
}

uint64_t destroy for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v7);
    if (!result)
    {
      char v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
      return v9(v6, v7);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 24);
  id v9 = v6;
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v7, v8);
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v8;
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
    }
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithCopy for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  id v8 = v6;

  uint64_t v9 = *(void *)(a2 + 16);
  char v10 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v9, v10);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 24) = v10;
  outlined consume of Environment<CGFloat>.Content(v11, v12);
  if (a1 != a2)
  {
    uint64_t v13 = a3[6];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    outlined destroy of SystemUpdateNotice?(a1 + v13, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[7];
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (void *)(a2 + v18);
    outlined destroy of SystemUpdateNotice?(a1 + v18, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      }
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for UserInterfaceSizeClass();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v9 - 8) + 64));
  }
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;

  char v8 = *(unsigned char *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<CGFloat>.Content(v9, v10);
  if (a1 != a2)
  {
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    outlined destroy of SystemUpdateNotice?(a1 + v11, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
        __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v15);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    uint64_t v17 = a3[7];
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (const void *)(a2 + v17);
    outlined destroy of SystemUpdateNotice?(a1 + v17, &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for UserInterfaceSizeClass();
      if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v21))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v21);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
  }
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C34CE8D4);
}

uint64_t sub_1C34CE8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_46_0(*(void *)(a1 + 8));
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  uint64_t v8 = a1 + *(int *)(a3 + 24);
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C34CE968);
}

uint64_t sub_1C34CE968(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for VideoMessageControlsView.LocalBottomControlsView(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for VideoMessageControlsView.LocalBottomControlsView);
}

void type metadata completion function for VideoMessageControlsView.LocalBottomControlsView()
{
  type metadata accessor for Environment<UserInterfaceSizeClass?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void destroy for VideoMessageControlsView.TopControlsView(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  unint64_t v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for VideoMessageControlsView.TopControlsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  id v7 = v6;
  return a1;
}

uint64_t assignWithCopy for VideoMessageControlsView.TopControlsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void **)(a2 + 24);
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  id v10 = v8;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for VideoMessageControlsView.TopControlsView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v8;

  *(void *)(a1 + 32) = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoMessageControlsView.TopControlsView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoMessageControlsView.TopControlsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for VideoMessageControlsView.TopControlsView()
{
  return &unk_1F1EAF6C8;
}

uint64_t associated type witness table accessor for View.Body : View in VideoMessageControlsView.TopControlsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in VideoMessageControlsView.LocalBottomControlsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in VideoMessageControlsView.RemoteBottomControlsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in VideoMessageControlsView.PlayButtonView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type MovieScrubber and conformance MovieScrubber()
{
  unint64_t result = lazy protocol witness table cache variable for type MovieScrubber and conformance MovieScrubber;
  if (!lazy protocol witness table cache variable for type MovieScrubber and conformance MovieScrubber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MovieScrubber and conformance MovieScrubber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MovieScrubber and conformance MovieScrubber;
  if (!lazy protocol witness table cache variable for type MovieScrubber and conformance MovieScrubber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MovieScrubber and conformance MovieScrubber);
  }
  return result;
}

uint64_t sub_1C34CED8C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in MovieScrubber.ScubberCoordinator.init(text:player:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in MovieScrubber.ScubberCoordinator.init(text:player:)(a1, a2, a3, v3);
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C34CEE80()
{
  outlined consume of Environment<CGFloat>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in VideoMessageControlsView.PlayButtonView.body.getter()
{
  return closure #1 in VideoMessageControlsView.PlayButtonView.body.getter();
}

uint64_t partial apply for closure #2 in VideoMessageControlsView.PlayButtonView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in VideoMessageControlsView.PlayButtonView.body.getter(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ObservedObject<VideoMessagePlayerViewModel>(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in VideoMessageControlsView.PlayButtonView.body.getter()
{
  return closure #1 in closure #1 in VideoMessageControlsView.PlayButtonView.body.getter(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of VideoMessageControlsView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>, AccessibilityAttachmentModifier>, ModifiedContent<HStack<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, _PaddingLayout>>, _FlexFrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<Color, Circle> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>, _InsettableBackgroundShapeModifier<Color, Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in VideoMessageControlsView.LocalBottomControlsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in VideoMessageControlsView.LocalBottomControlsView.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t _s7SwiftUI7CapsuleVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t partial apply for closure #1 in VideoMessageControlsView.TopControlsView.cancelButton()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in VideoMessageControlsView.TopControlsView.cancelButton()(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, _TraitWritingModifier<LayoutPriorityTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, _TraitWritingModifier<LayoutPriorityTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, _TraitWritingModifier<LayoutPriorityTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
    lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type VideoMessageControlsView.TopControlsView.ParticipantNameView and conformance VideoMessageControlsView.TopControlsView.ParticipantNameView);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _TraitWritingModifier<LayoutPriorityTraitKey> and conformance _TraitWritingModifier<A>, &demangling cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, _TraitWritingModifier<LayoutPriorityTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoMessageControlsView.TopControlsView.ParticipantNameView and conformance VideoMessageControlsView.TopControlsView.ParticipantNameView()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageControlsView.TopControlsView.ParticipantNameView and conformance VideoMessageControlsView.TopControlsView.ParticipantNameView;
  if (!lazy protocol witness table cache variable for type VideoMessageControlsView.TopControlsView.ParticipantNameView and conformance VideoMessageControlsView.TopControlsView.ParticipantNameView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageControlsView.TopControlsView.ParticipantNameView and conformance VideoMessageControlsView.TopControlsView.ParticipantNameView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<RoundedRectangle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<RoundedRectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>, _FlexFrameLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>> and conformance Menu<A, B>, &demangling cache variable for type metadata for Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnimatedSaveButton, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AnimatedSaveButton, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<AnimatedSaveButton, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type AnimatedSaveButton and conformance AnimatedSaveButton);
}

unint64_t lazy protocol witness table accessor for type AnimatedSaveButton and conformance AnimatedSaveButton()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedSaveButton and conformance AnimatedSaveButton;
  if (!lazy protocol witness table cache variable for type AnimatedSaveButton and conformance AnimatedSaveButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedSaveButton and conformance AnimatedSaveButton);
  }
  return result;
}

uint64_t partial apply for closure #1 in VideoMessageControlsView.TopControlsView.civicMenuButton(using:)@<X0>(Swift::String *a1@<X8>)
{
  return closure #1 in VideoMessageControlsView.TopControlsView.civicMenuButton(using:)(*(void **)(v1 + 16), *(Swift::String **)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in VideoMessageControlsView.TopControlsView.civicMenuButton(using:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in VideoMessageControlsView.TopControlsView.civicMenuButton(using:)(a1);
}

uint64_t sub_1C34CF8E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C34CF920()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AnimatedSaveButton.body.getter()
{
  return closure #1 in closure #1 in AnimatedSaveButton.body.getter(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in AnimatedSaveButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in AnimatedSaveButton.body.getter(*(void **)(v1 + 24), a1);
}

uint64_t sub_1C34CF988()
{
  return OUTLINED_FUNCTION_7_44();
}

unint64_t lazy protocol witness table accessor for type MarginKey and conformance MarginKey()
{
  unint64_t result = lazy protocol witness table cache variable for type MarginKey and conformance MarginKey;
  if (!lazy protocol witness table cache variable for type MarginKey and conformance MarginKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MarginKey and conformance MarginKey);
  }
  return result;
}

uint64_t objectdestroyTm_16()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = (int *)type metadata accessor for VideoMessageControlsView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  outlined consume of Environment<CGFloat>.Content(*(void *)v3, *(unsigned char *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    {
      OUTLINED_FUNCTION_26_2();
      v6();
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v3 + v1[6];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
    {
      OUTLINED_FUNCTION_26_2();
      v9();
    }
  }
  else
  {
    swift_release();
  }

  swift_release();
  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in VideoMessageControlsView.body.getter()
{
  uint64_t v1 = type metadata accessor for VideoMessageControlsView(0);
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  closure #2 in closure #1 in VideoMessageControlsView.body.getter(v3);
}

void partial apply for closure #1 in closure #2 in closure #1 in VideoMessageControlsView.body.getter()
{
  closure #1 in closure #2 in closure #1 in VideoMessageControlsView.body.getter(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in VideoMessageControlsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in closure #1 in VideoMessageControlsView.body.getter(*(void *)(v1 + 16), *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 24), a1);
}

BOOL partial apply for closure #3 in closure #1 in closure #1 in VideoMessageControlsView.body.getter()
{
  return closure #3 in closure #1 in closure #1 in VideoMessageControlsView.body.getter(*(void *)(v0 + 16));
}

id outlined copy of _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>, TupleView<(ModifiedContent<HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>, _FlexFrameLayout>, Spacer)>>.Storage(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,char a39)
{
  if (a39)
  {
    swift_retain();
    return a7;
  }
  else
  {
    char v42 = a12 & 1;
    return outlined copy of _ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(a1, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a9, a10, a11, v42);
  }
}

uint64_t outlined retain of _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>, TupleView<(ModifiedContent<HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>, _FlexFrameLayout>, Spacer)>>(uint64_t a1)
{
  OUTLINED_FUNCTION_27_41(a1);
  OUTLINED_FUNCTION_12_62();
  v2();
  return v1;
}

void outlined consume of _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>, TupleView<(ModifiedContent<HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>, _FlexFrameLayout>, Spacer)>>.Storage(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,char a39)
{
  if (a39)
  {

    swift_release();
  }
  else
  {
    char v40 = a12 & 1;
    outlined consume of _ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(a1, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a9, a10, a11, v40);
  }
}

void outlined consume of _ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, char a12)
{
  if (a12)
  {
    outlined consume of Environment<CGFloat>.Content(a1, a2 & 1);
  }
  else
  {
    outlined consume of _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(a1, a2, a3, a4);
  }
}

void outlined consume of _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>.Storage(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  outlined consume of Environment<CGFloat>.Content(a1, a2 & 1);
}

uint64_t outlined retain of VStack<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>, TupleView<(ModifiedContent<HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>, _FlexFrameLayout>, Spacer)>>>(uint64_t a1)
{
  OUTLINED_FUNCTION_12_62();
  v2();
  return a1;
}

void sub_1C34D0100(double *a1@<X8>)
{
  *a1 = EnvironmentValues.primaryButtonSize.getter();
}

uint64_t sub_1C34D012C()
{
  return EnvironmentValues.margin.setter((void (*)(void))lazy protocol witness table accessor for type PrimaryButtonSizeKey and conformance PrimaryButtonSizeKey);
}

uint64_t sub_1C34D0174()
{
  return OUTLINED_FUNCTION_7_44();
}

uint64_t partial apply for closure #1 in closure #4 in closure #1 in closure #1 in VideoMessageControlsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #4 in closure #1 in closure #1 in VideoMessageControlsView.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for implicit closure #1 in closure #4 in closure #1 in closure #1 in VideoMessageControlsView.body.getter()
{
  return implicit closure #1 in closure #4 in closure #1 in closure #1 in VideoMessageControlsView.body.getter(*(void *)(v0 + 16));
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v3 = v2;
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type VideoMessageControlsView.PlayButtonView and conformance VideoMessageControlsView.PlayButtonView);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoMessageControlsView.PlayButtonView and conformance VideoMessageControlsView.PlayButtonView()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageControlsView.PlayButtonView and conformance VideoMessageControlsView.PlayButtonView;
  if (!lazy protocol witness table cache variable for type VideoMessageControlsView.PlayButtonView and conformance VideoMessageControlsView.PlayButtonView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageControlsView.PlayButtonView and conformance VideoMessageControlsView.PlayButtonView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>> and conformance _OverlayModifier<A>, &demangling cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.PlayButtonView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, _EnvironmentKeyWritingModifier<Material?>>, _FrameLayout>, _AlignmentWritingModifier>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C34D03BC()
{
  return OUTLINED_FUNCTION_7_44();
}

void partial apply for closure #1 in closure #1 in View.conditionalyOverlaid<A>(with:alignment:pinningTo:spacing:condition:)()
{
}

unint64_t lazy protocol witness table accessor for type PrimaryButtonSizeKey and conformance PrimaryButtonSizeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimaryButtonSizeKey and conformance PrimaryButtonSizeKey;
  if (!lazy protocol witness table cache variable for type PrimaryButtonSizeKey and conformance PrimaryButtonSizeKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimaryButtonSizeKey and conformance PrimaryButtonSizeKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect>);
    lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel(&lazy protocol witness table cache variable for type VideoMessageControlsView.LocalBottomControlsView and conformance VideoMessageControlsView.LocalBottomControlsView, (void (*)(uint64_t))type metadata accessor for VideoMessageControlsView.LocalBottomControlsView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VideoMessageControlsView.LocalBottomControlsView, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<VideoMessageControlsView.RemoteBottomControlsView, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type VideoMessageControlsView.RemoteBottomControlsView and conformance VideoMessageControlsView.RemoteBottomControlsView);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoMessageControlsView.RemoteBottomControlsView and conformance VideoMessageControlsView.RemoteBottomControlsView()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageControlsView.RemoteBottomControlsView and conformance VideoMessageControlsView.RemoteBottomControlsView;
  if (!lazy protocol witness table cache variable for type VideoMessageControlsView.RemoteBottomControlsView and conformance VideoMessageControlsView.RemoteBottomControlsView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageControlsView.RemoteBottomControlsView and conformance VideoMessageControlsView.RemoteBottomControlsView);
  }
  return result;
}

uint64_t sub_1C34D06A4()
{
  return OUTLINED_FUNCTION_7_44();
}

uint64_t outlined release of TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined release of ModifiedContent<HStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>)>>, _FlexFrameLayout>(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA9TupleViewVyAA08ModifiedD0VyAIyACyACyAIy15ConversationKit020VideoMessageControlsG0V03TopmG033_B419541366E265736F7249488C40E55CLLVAA14_PaddingLayoutVGARGARGAA010_FlexFrameU0VGAA14_OpacityEffectVG_AA6SpacerVtGAGyAIyAA6HStackVyAGyA0__AIyAIyAJ18AnimatedSaveButtonVAA01_wU0VGAQGtGGAVG_A0_tG_GWOi0_(uint64_t result)
{
  *(unsigned char *)(result + 289) = 1;
  return result;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA9TupleViewVyAA08ModifiedD0VyAIyACyACyAIy15ConversationKit020VideoMessageControlsG0V03TopmG033_B419541366E265736F7249488C40E55CLLVAA14_PaddingLayoutVGARGARGAA010_FlexFrameU0VGAA14_OpacityEffectVG_AA6SpacerVtGAGyAIyAA6HStackVyAGyA0__AIyAIyAJ18AnimatedSaveButtonVAA01_wU0VGAQGtGGAVG_A0_tG_GWOi_(uint64_t result)
{
  *(unsigned char *)(result + 289) = 0;
  return result;
}

uint64_t outlined release of _ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_27_41(a1);
  v3(v2);
  return v1;
}

uint64_t outlined retain of Environment<CGFloat>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>);
    lazy protocol witness table accessor for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type VideoMessageControlsView.TopControlsView and conformance VideoMessageControlsView.TopControlsView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoMessageControlsView.TopControlsView and conformance VideoMessageControlsView.TopControlsView()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessageControlsView.TopControlsView and conformance VideoMessageControlsView.TopControlsView;
  if (!lazy protocol witness table cache variable for type VideoMessageControlsView.TopControlsView and conformance VideoMessageControlsView.TopControlsView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessageControlsView.TopControlsView and conformance VideoMessageControlsView.TopControlsView);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  swift_retain();
  id v3 = v2;
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<AnimatedSaveButton, _FrameLayout>, _PaddingLayout>(uint64_t a1)
{
  swift_release();
  return a1;
}

void *type metadata accessor for PrimaryButtonSizeKey()
{
  return &unk_1F1EAFB30;
}

void *type metadata accessor for MarginKey()
{
  return &unk_1F1EAFB50;
}

void *type metadata accessor for VideoMessageControlsView.TopControlsView.ParticipantNameView()
{
  return &unk_1F1EAFBC8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>, _InsettableBackgroundShapeModifier<Material, Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>, _InsettableBackgroundShapeModifier<Material, Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>, _InsettableBackgroundShapeModifier<Material, Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>, _InsettableBackgroundShapeModifier<Material, Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<Material, Circle> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Material, Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>, _InsettableBackgroundShapeModifier<Material, Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>>);
    lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _ContentShapeModifier<Circle> and conformance _ContentShapeModifier<A>, &demangling cache variable for type metadata for _ContentShapeModifier<Circle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>, _ContentShapeModifier<Circle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1C34D0B20()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<ModifiedContent<ModifiedContent<VStack<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _BackgroundModifier<_ShapeView<Capsule, HierarchicalShapeStyle>>>, _InsettableBackgroundShapeModifier<Material, Capsule>>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>)>>, _EnvironmentKeyWritingModifier<ColorScheme>>>, _FlexFrameLayout>, _OpacityEffect>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<ModifiedContent<ModifiedContent<VStack<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _BackgroundModifier<_ShapeView<Capsule, HierarchicalShapeStyle>>>, _InsettableBackgroundShapeModifier<Material, Capsule>>, _EnvironmentKeyWritingModifier<ColorScheme>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, Text)>>, _EnvironmentKeyWritingModifier<Color?>>>, _PaddingLayout>, _FlexFrameLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>)>>, _EnvironmentKeyWritingModifier<ColorScheme>>>, _FlexFrameLayout>, _OpacityEffect>>);
}

uint64_t sub_1C34D0CA0()
{
  return lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>, _FlexFrameLayout>, _OffsetEffect>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier>>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>, _FlexFrameLayout>, _OffsetEffect>, ModifiedContent<ModifiedContent<A, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<Color?>>, _FixedSizeLayout>, _FlexFrameLayout>, _OffsetEffect>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<VideoMessageControlsView.TopControlsView.ParticipantNameView, _PaddingLayout>, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundModifier<_ConditionalContent<_ShapeView<RoundedRectangle, Color>, _ShapeView<RoundedRectangle, Material>>>>, _ClipEffect<RoundedRectangle>>, AccessibilityAttachmentModifier>>, Spacer, _ConditionalContent<ModifiedContent<ModifiedContent<Menu<ZStack<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, TupleView<(Button<Text>, Button<Text>?, Button<Text>)>>, _FlexFrameLayout>, _OffsetEffect>, ModifiedContent<ModifiedContent<Anima);
}

uint64_t associated type witness table accessor for View.Body : View in VideoMessageControlsView.TopControlsView.ParticipantNameView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void TTRBannerController.TTRBannerViewController.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___TTRBannerControllerInternal_TTRBannerViewController);
  *(void *)(v1 + OBJC_IVAR___TTRBannerControllerInternal_TTRBannerViewController) = a1;
}

uint64_t TTRBannerController.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___TTRBannerControllerInternal_delegate;
  swift_beginAccess();
  return MEMORY[0x1C8776240](v1);
}

uint64_t TTRBannerController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

uint64_t key path getter for TTRBannerController.delegate : TTRBannerController@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t key path setter for TTRBannerController.delegate : TTRBannerController(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x80);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

void (*TTRBannerController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___TTRBannerControllerInternal_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1C8776240](v5);
  return DestinationQueryController.delegate.modify;
}

id TTRBannerController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id TTRBannerController.init()()
{
  *(void *)&v0[OBJC_IVAR___TTRBannerControllerInternal_TTRBannerViewController] = 0;
  swift_unknownObjectWeakInit();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRBannerController();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for TTRBannerController()
{
  return self;
}

Swift::Void __swiftcall TTRBannerController.showTTRBanner(useFullLogArchive:)(Swift::Bool useFullLogArchive)
{
  uint64_t v3 = v1;
  id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TapToRadarBannerViewController()), sel_init);
  uint64_t v5 = v4;
  TTRBannerController.TTRBannerViewController.setter((uint64_t)v4);
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x1A0))();
  type metadata accessor for OS_dispatch_queue();
  uint64_t v39 = static OS_dispatch_queue.main.getter();
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v37 = v6;
  OUTLINED_FUNCTION_5_3();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v34 - v13;
  static DispatchTime.now()();
  uint64_t v15 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_5_3();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_61();
  *objc_super v2 = 5;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v2, *MEMORY[0x1E4FBCAE0], v15);
  MEMORY[0x1C8772E10](v14);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v2, v15);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v36 = v8 + 8;
  uint64_t v38 = v19;
  v19(v14, v6);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v5;
  *(void *)(v20 + 24) = v3;
  aBlock[4] = partial apply for closure #1 in TTRBannerController.showTTRBanner(useFullLogArchive:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_85;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v35 = v5;
  id v22 = v3;
  swift_release();
  uint64_t v23 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_61();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_5_3();
  uint64_t v29 = v28;
  MEMORY[0x1F4188790](v30);
  id v32 = (char *)&v34 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v33 = (void *)v39;
  MEMORY[0x1C8773B10](v11, v2, v32, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v27);
  (*(void (**)(void *, uint64_t))(v25 + 8))(v2, v23);
  v38(v11, v37);
}

void *closure #1 in TTRBannerController.showTTRBanner(useFullLogArchive:)(void *a1, void *a2)
{
  id v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x120))();
  if (v5) {
    uint64_t v5 = (*(uint64_t (**)(void))((*v4 & *a1) + 0x1A8))();
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))((*v4 & *a2) + 0x78))(v5);
  if (result)
  {
    objc_msgSend(result, sel_cleanupTTRBanner);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1C34D167C()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in TTRBannerController.showTTRBanner(useFullLogArchive:)()
{
  return closure #1 in TTRBannerController.showTTRBanner(useFullLogArchive:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void TTRBannerController.buildTTRMessageBubbleRecipientsList(groupMessageUUID:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(v3 + OBJC_IVAR___TTRBannerControllerInternal_TTRBannerViewController);
  if (v4)
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x1B0);
    uint64_t v9 = v4;
    v8(a1, a2, a3);
  }
}

id TTRBannerController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRBannerController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for TTRBannerController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TTRBannerController);
}

uint64_t dispatch thunk of TTRBannerController.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of TTRBannerController.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TTRBannerController.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of TTRBannerController.showTTRBanner(useFullLogArchive:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of TTRBannerController.buildTTRMessageBubbleRecipientsList(groupMessageUUID:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t protocol witness for CallScreeningStateMachine.logger.getter in conformance <> CKStateMachine<A>()
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_48();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t CKStateMachine.logger.getter()
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_48();
  uint64_t v0 = OUTLINED_FUNCTION_35();
  return v1(v0);
}

uint64_t protocol witness for CallScreeningStateMachine.currentState.getter in conformance <> CKStateMachine<A>@<X0>(uint64_t a1@<X8>)
{
  specialized CKStateMachine.currentState.getter((uint64_t *)v3);
  return outlined init with take of CallScreening.State(v3, a1);
}

uint64_t CKStateMachine.currentState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 104);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_48();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(a1, v3);
}

uint64_t protocol witness for CallScreeningStateMachine.transition(with:reason:validation:) in conformance <> CKStateMachine<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v7 + 16) = v10;
  *(void *)(v10 + 16) = a6;
  *(void *)(v10 + 24) = a7;
  uint64_t v13 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CKStateMachine.transition(with:reason:validation:)
                              + async function pointer to specialized CKStateMachine.transition(with:reason:validation:));
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v11;
  *uint64_t v11 = v7;
  v11[1] = protocol witness for CallScreeningStateMachine.transition(with:reason:validation:) in conformance <> CKStateMachine<A>;
  return v13();
}

uint64_t protocol witness for CallScreeningStateMachine.transition(with:reason:validation:) in conformance <> CKStateMachine<A>()
{
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *objc_super v2 = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State) -> (@error @owned Error)(long long *a1, uint64_t (*a2)(unsigned char *))
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v4);
  return a2(v4);
}

uint64_t specialized CKStateMachine.transition(with:reason:validation:)()
{
  OUTLINED_FUNCTION_17_2();
  *(void *)(v1 + 104) = v2;
  *(void *)(v1 + 112) = v0;
  *(void *)(v1 + 88) = v3;
  *(void *)(v1 + 96) = v4;
  *(void *)(v1 + 72) = v5;
  *(void *)(v1 + 80) = v6;
  *(unsigned char *)(v1 + 33) = v7;
  *(void *)(v1 + 64) = v8;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v9 = static CKStateMachineActor.shared;
  *(void *)(v1 + 120) = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](specialized CKStateMachine.transition(with:reason:validation:), v9, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t (*v33)(void);
  long long v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v36 = v0;
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(unsigned char *)(v0 + 33);
  outlined copy of CallScreening.StateTransition(v1, v2, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of CallScreening.StateTransition(v1, v2, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t v6 = *(void *)(v0 + 72);
    id v32 = *(void *)(v0 + 80);
    char v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(unsigned char *)(v0 + 33);
    uint64_t v9 = OUTLINED_FUNCTION_9_0();
    uint64_t v35 = OUTLINED_FUNCTION_83();
    *(_DWORD *)uint64_t v9 = 136446722;
    type = v5;
    uint64_t v10 = specialized CKStateMachine.description.getter();
    uint64_t v12 = v11;
    swift_release();
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v13 = v7;
    uint64_t v14 = CallScreening.StateTransition.description.getter(v7, v6, v8);
    uint64_t v16 = v15;
    outlined consume of CallScreening.StateTransition(v13, v6, v8);
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of CallScreening.StateTransition(v13, v6, v8);
    *(_WORD *)(v9 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v30, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v4, type, "%{public}s Queuing request to transition to %{public}s with reason: %{public}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v19 = *(unsigned char *)(v0 + 33);
    outlined consume of CallScreening.StateTransition(v18, v17, v19);
    OUTLINED_FUNCTION_29_33();

    outlined consume of CallScreening.StateTransition(v18, v17, v19);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 112);
  id v22 = *(void *)(v0 + 72);
  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v24 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = v24;
  *(void *)(v0 + 24) = v22;
  uint64_t v25 = *(unsigned char *)(v0 + 33);
  *(unsigned char *)(v0 + 32) = v25;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v21;
  uint64_t v34 = *(_OWORD *)(v0 + 88);
  outlined init with take of CallScreening.StateTransition(v0 + 16, v26 + 24);
  *(void *)(v26 + 48) = v23;
  *(_OWORD *)(v26 + 56) = v34;
  *(void *)(v26 + 72) = v20;
  uint64_t v27 = swift_allocObject();
  *(void *)(v0 + 128) = v27;
  *(void *)(v27 + 16) = &async function pointer to partial apply for specialized closure #1 in CKStateMachine.transition(with:reason:validation:);
  *(void *)(v27 + 24) = v26;
  outlined copy of CallScreening.StateTransition(v24, v22, v25);
  uint64_t v33 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FAD9E8] + MEMORY[0x1E4FAD9E8]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v28;
  *uint64_t v28 = v0;
  v28[1] = specialized CKStateMachine.transition(with:reason:validation:);
  return v33();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  void *v5 = v4;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 120);
    char v7 = specialized CKStateMachine.transition(with:reason:validation:);
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 120);
    swift_release();
    char v7 = closure #1 in VideoMessageInboxController.updateCallItems();
    uint64_t v6 = v8;
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t CKStateMachine.transition(with:reason:validation:)()
{
  OUTLINED_FUNCTION_17_2();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  v1[5] = v5;
  v1[6] = v6;
  uint64_t v7 = *v0;
  v1[11] = *(void *)(*v0 + 88);
  v1[12] = *(void *)(v7 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1[13] = AssociatedTypeWitness;
  OUTLINED_FUNCTION_1(AssociatedTypeWitness);
  v1[14] = v9;
  v1[15] = *(void *)(v10 + 64);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static CKStateMachineActor.shared;
  v1[18] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](CKStateMachine.transition(with:reason:validation:), v11, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  void (*v10)(void);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int8x16_t *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  unint64_t v31;
  os_log_t log[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t type;
  os_log_type_t typea[8];
  void (*v38)(uint64_t, void, uint64_t);
  uint64_t (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v41 = v0;
  uint64_t v38 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 112) + 16);
  v38(*(void *)(v0 + 136), *(void *)(v0 + 40), *(void *)(v0 + 104));
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v30 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 112);
    type = v2;
    uint64_t v31 = *(void *)(v0 + 56);
    uint64_t v33 = *(void *)(v0 + 48);
    uint64_t v6 = OUTLINED_FUNCTION_9_0();
    char v40 = OUTLINED_FUNCTION_83();
    *(_DWORD *)uint64_t v6 = 136446722;
    CKStateMachine.description.getter();
    swift_release();
    uint64_t v7 = OUTLINED_FUNCTION_34_30();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v6 + 12) = 2082;
    OUTLINED_FUNCTION_2_1();
    v10();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v11(v3, v4);
    swift_getAssociatedConformanceWitness();
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v14 = v13;
    v11(v30, v4);
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v31, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v1, type, "%{public}s Queuing request to transition to %{public}s with reason: %{public}s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    OUTLINED_FUNCTION_15();
    v15();
    OUTLINED_FUNCTION_29_33();

    swift_bridgeObjectRelease_n();
  }
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 104);
  uint64_t v19 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v35 = *(void *)(v0 + 64);
  *(void *)typea = *(void *)(v0 + 72);
  uint64_t v34 = *(void *)(v0 + 48);
  *(_OWORD *)log = *(_OWORD *)(v0 + 88);
  v38(v16, *(void *)(v0 + 40), v18);
  id v22 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v23 = (v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = (int8x16_t *)swift_allocObject();
  v24[1] = vextq_s8(*(int8x16_t *)log, *(int8x16_t *)log, 8uLL);
  v24[2].i64[0] = v20;
  (*(void (**)(__int8 *, uint64_t, uint64_t))(v19 + 32))(&v24->i8[v22], v16, v18);
  uint64_t v25 = (uint64_t *)((char *)v24->i64 + v23);
  *uint64_t v25 = v34;
  v25[1] = v21;
  uint64_t v26 = (uint64_t *)((char *)v24->i64 + ((v23 + 23) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v26 = v35;
  v26[1] = *(void *)typea;
  uint64_t v27 = swift_allocObject();
  *(void *)(v0 + 152) = v27;
  *(void *)(v27 + 16) = &async function pointer to partial apply for closure #1 in CKStateMachine.transition(with:reason:validation:);
  *(void *)(v27 + 24) = v24;
  uint64_t v39 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FAD9E8] + MEMORY[0x1E4FAD9E8]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v28;
  *uint64_t v28 = v0;
  v28[1] = CKStateMachine.transition(with:reason:validation:);
  return v39();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  void *v5 = v4;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 144);
    uint64_t v7 = CKStateMachine.transition(with:reason:validation:);
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + 144);
    swift_release();
    uint64_t v7 = CKStateMachine.transition(with:reason:validation:);
    uint64_t v6 = v8;
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t CKStateMachineContainer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CKStateMachineContainer.init()();
  return v0;
}

uint64_t static CKStateMachineActor.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

BOOL static CKStateMachineContainer.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)a1 + 104))();
  OUTLINED_FUNCTION_13_30();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 104))();
  uint64_t v4 = v3;
  if (v1)
  {
    swift_release();
    if (v4)
    {
      swift_release();
      return v1 == v4;
    }
    goto LABEL_5;
  }
  if (v3)
  {
LABEL_5:
    swift_release();
    return 0;
  }
  swift_release();
  return 1;
}

uint64_t CKStateMachine.description.getter()
{
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v13 - v2;
  uint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v4._countAndFlagsBits = 0x4D65746174534B43;
  v4._object = (void *)0xEF3C656E69686361;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6574617453;
  v5._object = (void *)0xE500000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 23358;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  uint64_t v14 = v0;
  v7._countAndFlagsBits = _Pointer.debugDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000001C37A2500;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  CKStateMachine.currentState.getter((uint64_t)v3);
  OUTLINED_FUNCTION_34_30();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v9 = OUTLINED_FUNCTION_34_30();
  v10(v9);
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v15;
}

uint64_t CKStateMachineActor.ActorType.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CKStateMachineActor.ActorType.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

uint64_t CKStateMachineActor.ActorType.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t CKStateMachineActor.ActorType.init()()
{
  swift_defaultActor_initialize();
  return v0;
}

void CKStateMachineActor.ActorType.unownedExecutor.getter()
{
}

void protocol witness for Actor.unownedExecutor.getter in conformance CKStateMachineActor.ActorType()
{
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance CKStateMachineActor()
{
  return MEMORY[0x1F4187F20]();
}

uint64_t key path setter for CKStateMachineContainer.stateMachine : <A>CKStateMachineContainer<A>()
{
  return swift_weakAssign();
}

uint64_t CKStateMachineContainer.stateMachine.getter()
{
  return swift_weakLoadStrong();
}

uint64_t CKStateMachineContainer.deinit()
{
  swift_weakDestroy();
  return v0;
}

uint64_t CKStateMachineContainer.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t CKStateMachineContainer.init()()
{
  swift_weakInit();
  return v0;
}

uint64_t CKStateMachineContainer.description.getter()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 23358;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _Pointer.debugDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x80000001C37B1350;
  v3._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v3);
  return 0x4D65746174534B43;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CKStateMachineContainer<A>(uint64_t *a1)
{
  return static CKStateMachineContainer.== infix(_:_:)(*a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKStateMachineContainer<A>()
{
  return CKStateMachineContainer.description.getter();
}

uint64_t static CKStateMachineError.== infix(_:_:)()
{
  return 1;
}

void CKStateMachineError.hash(into:)()
{
}

Swift::Int CKStateMachineError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t CKStateMachine.stateUpdates.getter()
{
  return swift_retain();
}

uint64_t CKStateMachine.stateTransitioner.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t CKStateMachine.__allocating_init(initialState:logger:stateTransitioner:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  CKStateMachine.init(initialState:logger:stateTransitioner:)(a1, a2, a3, a4);
  return v8;
}

void *CKStateMachine.init(initialState:logger:stateTransitioner:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  v57 = a3;
  Swift::String v5 = v4;
  uint64_t v59 = a4;
  uint64_t v60 = a2;
  uint64_t v61 = a1;
  Swift::String v6 = (void *)*v4;
  uint64_t v7 = v6[10];
  OUTLINED_FUNCTION_5_3();
  uint64_t v58 = v8;
  MEMORY[0x1F4188790](v9);
  Swift::String v11 = (char *)v46 - v10;
  uint64_t v12 = v6[11];
  uint64_t v13 = type metadata accessor for CKStateMachine.StateUpdate();
  OUTLINED_FUNCTION_5_3();
  uint64_t v52 = v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v46 - v16;
  uint64_t v18 = type metadata accessor for TaskPriority();
  MEMORY[0x1F4188790](v18 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v19 = v6[14];
  type metadata accessor for TaskQueue();
  static TaskPriority.userInitiated.getter();
  *(void *)((char *)v5 + v19) = TaskQueue.__allocating_init(priority:)();
  OUTLINED_FUNCTION_13_30();
  uint64_t v20 = v58;
  uint64_t v50 = *(void *)(v58 + 16);
  uint64_t v51 = v58 + 16;
  OUTLINED_FUNCTION_2_1();
  v21();
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v22 - 8);
  uint64_t v55 = v22;
  OUTLINED_FUNCTION_2_1();
  v23();
  uint64_t v24 = (void *)((char *)v5 + *(void *)(*v5 + 128));
  uint64_t v25 = v59;
  *uint64_t v24 = v57;
  v24[1] = v25;
  type metadata accessor for CurrentValueSubject();
  uint64_t v53 = v13;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  objc_super v49 = v17;
  CurrentValueSubject.__allocating_init(_:)();
  OUTLINED_FUNCTION_13_30();
  *(void *)((char *)v5 + *(void *)(v26 + 120)) = v27;
  CKStateMachine.currentState.getter((uint64_t)v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 56))(v7, v12);
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  OUTLINED_FUNCTION_13_30();
  uint64_t v29 = (char *)v5 + *(void *)(v28 + 104);
  OUTLINED_FUNCTION_30_30();
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v20 + 24);
  v30(v29, v11, v7);
  swift_endAccess();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v12 + 72);
  v57 = v11;
  uint64_t v32 = v56;
  v31(v7, v12);
  if (v32)
  {
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    v33();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v34(v61, v7);
    v34((uint64_t)v57, v7);
  }
  else
  {
    uint64_t v56 = 0;
    OUTLINED_FUNCTION_30_30();
    v30(v29, v57, v7);
    swift_endAccess();
    uint64_t v47 = CKStateMachine.description.getter();
    unint64_t v36 = v35;
    swift_bridgeObjectRetain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    int v48 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      v46[1] = v29;
      uint64_t v40 = v62[0];
      *(_DWORD *)uint64_t v39 = 136446210;
      v46[0] = v39 + 4;
      swift_bridgeObjectRetain();
      v62[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v36, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v37, (os_log_type_t)v48, "%{public}s) initialized, notifying observers with initial state.", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v40, -1, -1);
      MEMORY[0x1C87760E0](v39, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    OUTLINED_FUNCTION_13_30();
    OUTLINED_FUNCTION_2_1();
    v41();
    swift_storeEnumTagMultiPayload();
    CurrentValueSubject.send(_:)();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    v42();
    uint64_t v43 = *(void (**)(void))(v58 + 8);
    OUTLINED_FUNCTION_1_19();
    v43();
    OUTLINED_FUNCTION_26_2();
    v44();
    OUTLINED_FUNCTION_1_19();
    v43();
  }
  return v5;
}

uint64_t specialized closure #1 in CKStateMachine.transition(with:reason:validation:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 584) = a8;
  *(void *)(v8 + 576) = a7;
  *(void *)(v8 + 568) = a6;
  *(void *)(v8 + 560) = a5;
  *(unsigned char *)(v8 + 73) = a4;
  *(void *)(v8 + 552) = a3;
  *(void *)(v8 + 544) = a2;
  *(void *)(v8 + 536) = a1;
  *(void *)(v8 + 512) = a2;
  *(void *)(v8 + 520) = a3;
  *(unsigned char *)(v8 + 528) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v9 = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](specialized closure #1 in CKStateMachine.transition(with:reason:validation:), v9, 0);
}

uint64_t specialized closure #1 in CKStateMachine.transition(with:reason:validation:)()
{
  uint64_t v171 = v0;
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 544);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 73);
  swift_retain();
  outlined copy of CallScreening.StateTransition(v2, v1, v3);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of CallScreening.StateTransition(v2, v1, v3);
  swift_bridgeObjectRetain();
  Swift::String v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void *)(v0 + 568);
  v158 = (void *)(v0 + 16);
  if (v6)
  {
    uint64_t v155 = *(void *)(v0 + 560);
    unint64_t v8 = *(void *)(v0 + 552);
    uint64_t v9 = *(void *)(v0 + 544);
    unsigned __int8 v10 = *(unsigned char *)(v0 + 73);
    uint64_t v11 = OUTLINED_FUNCTION_9_0();
    uint64_t v164 = OUTLINED_FUNCTION_83();
    *(_DWORD *)uint64_t v11 = 136446722;
    log = v4;
    unint64_t v151 = v7;
    unint64_t v12 = specialized CKStateMachine.description.getter();
    unint64_t v14 = v13;
    swift_release();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v11 + 12) = 2082;
    unint64_t v15 = CallScreening.StateTransition.description.getter(v9, v8, v10);
    unint64_t v17 = v16;
    outlined consume of CallScreening.StateTransition(v9, v8, v10);
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v164);
    OUTLINED_FUNCTION_27_42(v18);
    swift_bridgeObjectRelease();
    outlined consume of CallScreening.StateTransition(v9, v8, v10);
    *(_WORD *)(v11 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v151, &v164);
    OUTLINED_FUNCTION_27_42(v19);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, log, v5, "%{public}s processing request to transition to %{public}s with reason: %{public}s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 552);
    uint64_t v21 = *(void *)(v0 + 544);
    unsigned __int8 v22 = *(unsigned char *)(v0 + 73);
    outlined consume of CallScreening.StateTransition(v21, v20, v22);
    swift_release_n();

    outlined consume of CallScreening.StateTransition(v21, v20, v22);
    swift_bridgeObjectRelease_n();
  }
  typea = *(void (**)(uint64_t *))(v0 + 576);
  uint64_t v163 = v0;
  uint64_t v23 = (uint64_t *)(*(void *)(v0 + 536) + *(void *)(**(void **)(v0 + 536) + 104));
  OUTLINED_FUNCTION_11_0();
  uint64_t v24 = v23[1];
  uint64_t v25 = v23[2];
  uint64_t v26 = v23[3];
  uint64_t v28 = v23[4];
  uint64_t v27 = v23[5];
  unint64_t v29 = v23[6];
  uint64_t v164 = *v23;
  uint64_t v165 = v24;
  uint64_t v166 = v25;
  uint64_t v167 = v26;
  uint64_t v168 = v28;
  uint64_t v169 = v27;
  unint64_t v170 = v29;
  uint64_t v30 = OUTLINED_FUNCTION_3_120();
  outlined copy of CallScreening.State(v30, v31, v32, v33, v34, v35, v36);
  typea(&v164);
  uint64_t v156 = v0 + 512;
  type = (long long *)(v0 + 360);
  uint64_t v37 = *(void *)(v0 + 536);
  uint64_t v38 = OUTLINED_FUNCTION_3_120();
  outlined consume of CallScreening.State(v38, v39, v40, v41, v42, v43, v44);
  os_log_t loga = *(os_log_t *)(v37 + *(void *)(*(void *)v37 + 128));
  uint64_t v46 = v23[1];
  uint64_t v47 = v23[2];
  uint64_t v48 = v23[3];
  uint64_t v49 = v23[4];
  uint64_t v50 = v23[5];
  unint64_t v51 = v23[6];
  uint64_t v164 = *v23;
  uint64_t v45 = v164;
  uint64_t v165 = v46;
  uint64_t v166 = v47;
  uint64_t v167 = v48;
  uint64_t v168 = v49;
  uint64_t v169 = v50;
  unint64_t v170 = v51;
  uint64_t v52 = OUTLINED_FUNCTION_7_95();
  outlined copy of CallScreening.State(v52, v53, v54, v55, v56, v57, v58);
  ((void (*)(uint64_t *, uint64_t))loga)(&v164, v156);
  v157 = v23;
  outlined consume of CallScreening.State(v45, v46, v47, v48, v49, v50, v51);
  outlined init with take of CallScreening.State(type, v163 + 192);
  uint64_t v72 = CallScreening.State.stateTransition.getter();
  LOBYTE(v45) = v73;
  char v75 = static CallScreening.StateTransition.== infix(_:_:)(v72, v74, v73, *(void *)(v163 + 512), *(void *)(v163 + 520), *(unsigned char *)(v163 + 528));
  uint64_t v76 = OUTLINED_FUNCTION_45_4();
  outlined consume of CallScreening.StateTransition(v76, v77, v45);
  if (v75)
  {
    outlined init with take of CallScreening.State((long long *)v23, v163 + 304);
    outlined init with take of CallScreening.State((long long *)(v163 + 304), v163 + 248);
    CallScreening.State.state.getter((uint64_t)v158);
    uint64_t v78 = *(void *)(v163 + 40);
    uint64_t v79 = *(void *)(v163 + 48);
    __swift_project_boxed_opaque_existential_1(v158, v78);
    v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
    outlined retain of CallScreening.State((void *)(v163 + 304), (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    v80(v163 + 192, v78, v79);
    v150 = (void *)(v163 + 136);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
    uint64_t v89 = OUTLINED_FUNCTION_22_41();
    uint64_t v90 = *v157;
    uint64_t v91 = v157[1];
    uint64_t v93 = v157[2];
    uint64_t v92 = v157[3];
    uint64_t v95 = v157[4];
    uint64_t v94 = v157[5];
    unint64_t v96 = v157[6];
    uint64_t *v157 = v89;
    v157[1] = v97;
    v157[2] = v98;
    v157[3] = v99;
    v157[4] = v100;
    v157[5] = v101;
    v157[6] = v102;
    outlined copy of CallScreening.State(v89, v97, v98, v99, v100, v101, v102);
    outlined consume of CallScreening.State(v90, v91, v93, v92, v95, v94, v96);
    uint64_t v103 = *v157;
    uint64_t v104 = v157[1];
    uint64_t v105 = v157[2];
    uint64_t v106 = v157[3];
    uint64_t v107 = v157[4];
    uint64_t v108 = v157[5];
    unint64_t v109 = v157[6];
    *(void *)(v163 + 24) = v104;
    *(void *)(v163 + 16) = v103;
    *(void *)(v163 + 32) = v105;
    *(void *)(v163 + 40) = v106;
    *(void *)(v163 + 48) = v107;
    *(void *)(v163 + 56) = v108;
    *(void *)(v163 + 64) = v109;
    *(unsigned char *)(v163 + 72) = 0;
    outlined copy of CallScreening.State(v103, v104, v105, v106, v107, v108, v109);
    CurrentValueSubject.send(_:)();
    outlined consume of CKStateMachine<CallScreening.State>.StateUpdate(*(void *)(v163 + 16), *(void *)(v163 + 24), *(void *)(v163 + 32), *(void *)(v163 + 40), *(void *)(v163 + 48), *(void *)(v163 + 56), *(void *)(v163 + 64), *(unsigned char *)(v163 + 72));
    OUTLINED_FUNCTION_11_0();
    swift_weakAssign();
    OUTLINED_FUNCTION_11_0();
    OUTLINED_FUNCTION_35();
    swift_weakAssign();
    outlined init with take of CallScreening.State(type, v163 + 80);
    uint64_t v110 = v157[1];
    uint64_t typec = *v157;
    uint64_t v111 = v157[2];
    uint64_t v112 = v157[3];
    uint64_t v113 = v157[4];
    uint64_t v114 = v157[5];
    unint64_t v115 = v157[6];
    outlined init with take of CallScreening.State((long long *)(v163 + 80), (uint64_t)v157);
    outlined retain of CallScreening.State((void *)(v163 + 80), (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    outlined consume of CallScreening.State(typec, v110, v111, v112, v113, v114, v115);
    CallScreening.State.state.getter((uint64_t)v158);
    uint64_t v116 = *(void *)(v163 + 40);
    uint64_t v117 = *(void *)(v163 + 48);
    __swift_project_boxed_opaque_existential_1(v158, v116);
    (*(void (**)(uint64_t, uint64_t))(v117 + 56))(v116, v117);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
    uint64_t v118 = *(void *)(v163 + 360);
    uint64_t v119 = *(void *)(v163 + 368);
    uint64_t v120 = *(void *)(v163 + 376);
    uint64_t v121 = *(void *)(v163 + 384);
    uint64_t v122 = *(void *)(v163 + 392);
    uint64_t v123 = *(void *)(v163 + 400);
    unint64_t v124 = *(void *)(v163 + 408);
    uint64_t v125 = *v157;
    uint64_t v126 = v157[1];
    uint64_t v128 = v157[2];
    uint64_t v127 = v157[3];
    uint64_t v129 = v157[4];
    uint64_t v130 = v157[5];
    unint64_t v152 = v157[6];
    uint64_t *v157 = v118;
    v157[1] = v119;
    v157[2] = v120;
    v157[3] = v121;
    v157[4] = v122;
    v157[5] = v123;
    v157[6] = v124;
    outlined copy of CallScreening.State(v118, v119, v120, v121, v122, v123, v124);
    uint64_t v131 = v129;
    uint64_t v132 = v163;
    outlined consume of CallScreening.State(v125, v126, v128, v127, v131, v130, v152);
    swift_retain();
    v133 = Logger.logObject.getter();
    os_log_type_t v134 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v133, v134))
    {
      uint64_t v135 = OUTLINED_FUNCTION_15_1();
      uint64_t v164 = swift_slowAlloc();
      *(_DWORD *)uint64_t v135 = 136446466;
      unint64_t v136 = specialized CKStateMachine.description.getter();
      uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, &v164);
      OUTLINED_FUNCTION_20_52(v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v135 + 12) = 2082;
      OUTLINED_FUNCTION_2();
      outlined init with take of CallScreening.State((long long *)(v163 + 248), (uint64_t)v150);
      outlined retain of CallScreening.State(v150, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
      unint64_t v139 = CallScreening.State.description.getter();
      unint64_t v141 = v140;
      outlined retain of CallScreening.State(v150, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
      uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v141, &v164);
      OUTLINED_FUNCTION_20_52(v142);
      uint64_t v132 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v133, v134, "%{public}s updated its state from %{public}s, notifying observers.", (uint8_t *)v135, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_release();
    }
    uint64_t v143 = *v157;
    uint64_t v144 = v157[1];
    uint64_t v145 = v157[2];
    uint64_t v146 = v157[3];
    uint64_t v147 = v157[4];
    uint64_t v148 = v157[5];
    unint64_t v149 = v157[6];
    *(void *)(v132 + 16) = *v157;
    *(void *)(v132 + 24) = v144;
    *(void *)(v132 + 32) = v145;
    *(void *)(v132 + 40) = v146;
    *(void *)(v132 + 48) = v147;
    *(void *)(v132 + 56) = v148;
    *(void *)(v132 + 64) = v149;
    *(unsigned char *)(v132 + 72) = 1;
    outlined copy of CallScreening.State(v143, v144, v145, v146, v147, v148, v149);
    CurrentValueSubject.send(_:)();
    outlined consume of CKStateMachine<CallScreening.State>.StateUpdate(*(void *)(v132 + 16), *(void *)(v132 + 24), *(void *)(v132 + 32), *(void *)(v132 + 40), *(void *)(v132 + 48), *(void *)(v132 + 56), *(void *)(v132 + 64), *(unsigned char *)(v132 + 72));
    OUTLINED_FUNCTION_24_46();
    OUTLINED_FUNCTION_23_47();
    uint64_t v70 = *(uint64_t (**)(void))(v132 + 8);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachine<CallScreening.State>.Error);
    lazy protocol witness table accessor for type CKStateMachine<CallScreening.State>.Error and conformance CKStateMachine<A>.Error();
    v81 = (void *)swift_allocError();
    uint64_t v82 = *(void *)(v163 + 408);
    long long v83 = type[1];
    long long v84 = type[2];
    *(_OWORD *)uint64_t v85 = *type;
    *(_OWORD *)(v85 + 16) = v83;
    *(_OWORD *)(v85 + 32) = v84;
    *(void *)(v85 + 48) = v82;
    uint64_t v86 = *(void *)(v163 + 512);
    uint64_t v87 = *(void *)(v163 + 520);
    unsigned __int8 v88 = *(unsigned char *)(v163 + 528);
    *(void *)(v85 + 56) = v86;
    *(void *)(v85 + 64) = v87;
    *(unsigned char *)(v85 + 72) = v88;
    *(unsigned char *)(v85 + 73) = 2;
    outlined copy of CallScreening.StateTransition(v86, v87, v88);
    swift_willThrow();
    swift_retain();
    id v59 = v81;
    swift_retain();
    id v60 = v81;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = OUTLINED_FUNCTION_15_1();
      typeb = (void *)swift_slowAlloc();
      uint64_t v164 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v63 = 136446466;
      unint64_t v64 = specialized CKStateMachine.description.getter();
      uint64_t v65 = v81;
      unint64_t v67 = v66;
      swift_release();
      *(void *)(v163 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v67, &v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v63 + 12) = 2114;
      id v68 = v65;
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v163 + 16) = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *typeb = v69;

      _os_log_impl(&dword_1C2F90000, v61, v62, "%{public}s) failed to enter state with Error: %{public}@", (uint8_t *)v63, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_151();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_151();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      OUTLINED_FUNCTION_29_33();
    }
    swift_willThrow();
    OUTLINED_FUNCTION_6();
  }
  return v70();
}

uint64_t closure #1 in CKStateMachine.transition(with:reason:validation:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[31] = a5;
  v6[32] = a6;
  v6[29] = a3;
  v6[30] = a4;
  v6[27] = a1;
  v6[28] = a2;
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 80);
  v6[33] = v8;
  v6[34] = *(void *)(v7 + 88);
  uint64_t v9 = type metadata accessor for CKStateMachine.StateUpdate();
  v6[35] = v9;
  v6[36] = *(void *)(v9 - 8);
  v6[37] = swift_task_alloc();
  v6[38] = *(void *)(v8 - 8);
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v6[41] = swift_task_alloc();
  v6[42] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[43] = AssociatedTypeWitness;
  v6[44] = *(void *)(AssociatedTypeWitness - 8);
  v6[45] = swift_task_alloc();
  v6[46] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #1 in CKStateMachine.transition(with:reason:validation:), v11, 0);
}

uint64_t closure #1 in CKStateMachine.transition(with:reason:validation:)()
{
  uint64_t v85 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 27;
  uint64_t v82 = v0 + 22;
  unsigned __int8 v3 = *(void (**)(void))(v0[44] + 16);
  ((void (*)(void, void, void))v3)(v0[46], v0[28], v0[43]);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  Swift::String v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    log = v4;
    uint64_t v6 = v0[44];
    unint64_t v75 = v0[30];
    uint64_t v76 = v0[29];
    os_log_type_t typea = v5;
    uint64_t v7 = OUTLINED_FUNCTION_9_0();
    v84[0] = OUTLINED_FUNCTION_83();
    *(_DWORD *)uint64_t v7 = 136446722;
    CKStateMachine.description.getter();
    swift_release();
    uint64_t v8 = OUTLINED_FUNCTION_39();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v7 + 12) = 2082;
    OUTLINED_FUNCTION_2_1();
    v3();
    uint64_t v11 = *(void (**)(uint64_t))(v6 + 8);
    uint64_t v12 = OUTLINED_FUNCTION_26_42();
    v11(v12);
    swift_getAssociatedConformanceWitness();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    uint64_t v16 = OUTLINED_FUNCTION_26_42();
    v11(v16);
    v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2082;
    swift_bridgeObjectRetain();
    v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v75, v84);
    OUTLINED_FUNCTION_34_30();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, log, typea, "%{public}s processing request to transition to %{public}s with reason: %{public}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    unint64_t v17 = *(void (**)(void))(v0[44] + 8);
    OUTLINED_FUNCTION_15();
    v17();
    swift_release_n();

    swift_bridgeObjectRelease_n();
  }
  uint64_t v18 = v0[42];
  uint64_t v19 = (void (*)(uint64_t))v1[31];
  CKStateMachine.currentState.getter(v1[42]);
  v19(v18);
  uint64_t v20 = v1[40];
  uint64_t v21 = v1[27];
  uint64_t v22 = v1[28];
  type = *(void (**)(void))(v1[38] + 8);
  OUTLINED_FUNCTION_15();
  v23();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v21 + *(void *)(*(void *)v21 + 128));
  CKStateMachine.currentState.getter(v20);
  v24(v20, v22);
  uint64_t v39 = v1[33];
  uint64_t v38 = v1[34];
  OUTLINED_FUNCTION_15();
  v40();
  (*(void (**)(uint64_t, uint64_t))(v38 + 48))(v39, v38);
  swift_getAssociatedConformanceWitness();
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_15();
  v42();
  uint64_t v43 = v1[33];
  uint64_t v44 = v1[34];
  if (v41)
  {
    uint64_t v45 = v1[41];
    CKStateMachine.currentState.getter(v1[39]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 64))(v45, v43, v44);
    uint64_t v46 = v1[39];
    uint64_t v55 = v1[37];
    uint64_t v54 = v1[38];
    uint64_t v56 = v1[33];
    uint64_t v73 = v1[34];
    uint64_t v57 = v1[27] + *(void *)(*(void *)v1[27] + 104);
    uint64_t v74 = v1[41];
    swift_beginAccess();
    v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 24);
    uint64_t v83 = v57;
    v80(v57, v46, v56);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v55, v57, v56);
    swift_storeEnumTagMultiPayload();
    CurrentValueSubject.send(_:)();
    uint64_t v58 = OUTLINED_FUNCTION_39();
    v59(v58);
    id v60 = *(void (**)(uint64_t, uint64_t))(v73 + 56);
    v60(v56, v73);
    OUTLINED_FUNCTION_11_0();
    swift_weakAssign();
    swift_release();
    v60(v56, v73);
    OUTLINED_FUNCTION_11_0();
    swift_weakAssign();
    swift_release();
    swift_beginAccess();
    v80(v57, v74, v56);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v73 + 72))(v56, v73);
    uint64_t v61 = v1[41];
    uint64_t v62 = v1[33];
    swift_beginAccess();
    v80(v83, v61, v62);
    swift_endAccess();
    swift_retain();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v66 = OUTLINED_FUNCTION_15_1();
      v84[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446466;
      uint64_t v67 = CKStateMachine.description.getter();
      v1[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v66 + 12) = 2082;
      OUTLINED_FUNCTION_2();
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      v1[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v63, v64, "%{public}s updated its state from %{public}s, notifying observers.", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_release();
    }
    OUTLINED_FUNCTION_2_1();
    v71();
    swift_storeEnumTagMultiPayload();
    CurrentValueSubject.send(_:)();
    OUTLINED_FUNCTION_15();
    v72();
    OUTLINED_FUNCTION_38_22();
    type();
    OUTLINED_FUNCTION_38_22();
    type();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v36 = (uint64_t (*)(void))v1[1];
  }
  else
  {
    uint64_t v47 = v1[41];
    uint64_t v48 = v1[38];
    type metadata accessor for CKStateMachine.Error();
    swift_getWitnessTable();
    uint64_t v49 = (void *)swift_allocError();
    uint64_t v51 = v50;
    swift_getTupleTypeMetadata2();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v51, v47, v43);
    OUTLINED_FUNCTION_2_1();
    v52();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    uint64_t v53 = OUTLINED_FUNCTION_45_4();
    ((void (*)(uint64_t))type)(v53);
    swift_retain();
    id v25 = v49;
    swift_retain();
    id v26 = v49;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = v2 - 7;
      uint64_t v30 = OUTLINED_FUNCTION_15_1();
      v81 = (void *)swift_slowAlloc();
      v84[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v30 = 136446466;
      uint64_t v31 = CKStateMachine.description.getter();
      unint64_t v33 = v32;
      swift_release();
      *unint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v30 + 12) = 2114;
      id v34 = v49;
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
      *uint64_t v82 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v81 = v35;

      _os_log_impl(&dword_1C2F90000, v27, v28, "%{public}s) failed to enter state with Error: %{public}@", (uint8_t *)v30, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_151();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_151();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      OUTLINED_FUNCTION_29_33();
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v36 = (uint64_t (*)(void))v1[1];
  }
  return v36();
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@error @owned Error)(uint64_t a1, int *a2)
{
  os_log_type_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  unsigned __int8 v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  *unsigned __int8 v3 = v2;
  v3[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return v5();
}

uint64_t CKStateMachine.deinit()
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_26_2();
  v1();
  OUTLINED_FUNCTION_48();
  (*(void (**)(void))(v2 + 8))();
  swift_release();
  OUTLINED_FUNCTION_50();
  swift_release();
  OUTLINED_FUNCTION_50();
  swift_release();
  return v0;
}

uint64_t CKStateMachine.__deallocating_deinit()
{
  CKStateMachine.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKStateMachine<A>()
{
  return CKStateMachine.description.getter();
}

uint64_t CKStateMachine.StateUpdate.description.getter()
{
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v0);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_21();
  (*(void (**)(uint64_t))(v4 + 16))(v3 - v2);
  OUTLINED_FUNCTION_45_4();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v9 = OUTLINED_FUNCTION_8_73();
    v10(v9);
    uint64_t v8 = 0x20676E6974697845;
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = OUTLINED_FUNCTION_8_73();
    v7(v6);
    uint64_t v8 = 0x2064657265746E45;
LABEL_5:
    unint64_t v11 = 0xE800000000000000;
    String.append(_:)(*(Swift::String *)&v8);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    OUTLINED_FUNCTION_1_19();
    v14(v12, v13);
  }
  return OUTLINED_FUNCTION_45_4();
}

uint64_t sub_1C34D59FC()
{
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_5_3();
  swift_release();
  OUTLINED_FUNCTION_1_19();
  v0();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_45_4();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CKStateMachine.transition(with:reason:validation:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_1(AssociatedTypeWitness);
  uint64_t v4 = (uint64_t *)(v0
                 + ((((*(void *)(v3 + 64)
                     + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
                     + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_98(v7);
  *uint64_t v8 = v9;
  v8[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  unsigned __int8 v10 = (uint64_t *)OUTLINED_FUNCTION_15_66();
  return closure #1 in CKStateMachine.transition(with:reason:validation:)(v10, v11, v12, v13, v5, v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> (@error @owned Error)()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_11_4();
  return v4(v3);
}

uint64_t type metadata accessor for CKStateMachine.StateUpdate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CKStateMachineActor.ActorType()
{
  return self;
}

uint64_t sub_1C34D5D1C@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 104))();
  *a1 = result;
  return result;
}

uint64_t sub_1C34D5D68()
{
  return 16;
}

__n128 sub_1C34D5D74(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for CKStateMachineActor()
{
}

uint64_t method lookup function for CKStateMachineActor.ActorType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKStateMachineActor.ActorType);
}

uint64_t dispatch thunk of CKStateMachineActor.ActorType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata completion function for CKStateMachineContainer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CKStateMachineContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CKStateMachineContainer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKStateMachineContainer);
}

uint64_t dispatch thunk of CKStateMachineContainer.stateMachine.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of CKStateMachineContainer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of CKStateMachineState.stateTransition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CKStateMachineState.stateMachineContainer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CKStateMachineState.willExit(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CKStateMachineState.enteringState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

unsigned char *storeEnumTagSinglePayload for CKStateMachineError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C34D5F78);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for CKStateMachineError()
{
}

uint64_t type metadata completion function for CKStateMachine()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for CKStateMachine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CKStateMachine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKStateMachine);
}

uint64_t dispatch thunk of CKStateMachine.__allocating_init(initialState:logger:stateTransitioner:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t type metadata completion function for CKStateMachine.StateUpdate()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CKStateMachine.StateUpdate(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    unsigned int v10 = a2[v5];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v12 = v5;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_18;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_18:
          int v14 = (v13 | (v11 << (8 * v5))) + 2;
          unsigned int v10 = v13 + 2;
          if (v5 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1)
    {
      (*(void (**)(void *))(v4 + 16))(__dst);
      *((unsigned char *)v3 + v5) = 1;
    }
    else if (v10)
    {
      memcpy(__dst, a2, v5 + 1);
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(__dst);
      *((unsigned char *)v3 + v5) = 0;
    }
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *int v3 = *(void *)a2;
    int v3 = (void *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

unsigned __int8 *destroy for CKStateMachine.StateUpdate(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  unsigned int v3 = result[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *result;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)result;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)result;
LABEL_10:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 <= 1) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  return result;
}

unsigned char *initializeWithCopy for CKStateMachine.StateUpdate(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_10;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_10:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 16))(__dst);
    __dst[v5] = 1;
  }
  else if (v6)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for CKStateMachine.StateUpdate(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unsigned int v8 = __dst[v7];
    char v9 = 8 * v7;
    unsigned int v10 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *__dst;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)__dst;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)__dst;
LABEL_11:
          int v13 = (v12 | (v10 << v9)) + 2;
          unsigned int v8 = v12 + 2;
          if (v7 < 4) {
            unsigned int v8 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v8 <= 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    unsigned int v14 = __src[v7];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *__src;
          goto LABEL_24;
        case 2:
          int v17 = *(unsigned __int16 *)__src;
          goto LABEL_24;
        case 3:
          int v17 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_24;
        case 4:
          int v17 = *(_DWORD *)__src;
LABEL_24:
          int v18 = (v17 | (v15 << v9)) + 2;
          unsigned int v14 = v17 + 2;
          if (v7 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for CKStateMachine.StateUpdate(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_10;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_10:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 32))(__dst);
    __dst[v5] = 1;
  }
  else if (v6)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for CKStateMachine.StateUpdate(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unsigned int v8 = __dst[v7];
    char v9 = 8 * v7;
    unsigned int v10 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *__dst;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)__dst;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)__dst;
LABEL_11:
          int v13 = (v12 | (v10 << v9)) + 2;
          unsigned int v8 = v12 + 2;
          if (v7 < 4) {
            unsigned int v8 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v8 <= 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    unsigned int v14 = __src[v7];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *__src;
          goto LABEL_24;
        case 2:
          int v17 = *(unsigned __int16 *)__src;
          goto LABEL_24;
        case 3:
          int v17 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_24;
        case 4:
          int v17 = *(_DWORD *)__src;
LABEL_24:
          int v18 = (v17 | (v15 << v9)) + 2;
          unsigned int v14 = v17 + 2;
          if (v7 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for CKStateMachine.StateUpdate(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_20:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 3) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_20;
  }
LABEL_12:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 254;
}

void storeEnumTagSinglePayload for CKStateMachine.StateUpdate(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFE)
  {
    int v8 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v9 = a2 - 254;
    if (v6 < 4)
    {
      int v10 = (v9 >> v7) + 1;
      if (v5 != -1)
      {
        int v12 = v9 & ~(-1 << v7);
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v6] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v10;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x1C34D6DBCLL);
      case 4:
        *(_DWORD *)&a1[v6] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for CKStateMachine.StateUpdate(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for CKStateMachine.StateUpdate(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata completion function for CKStateMachine.Error()
{
  unsigned int v5 = &unk_1C3784E30;
  unsigned int v6 = &unk_1C3784E48;
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      int v7 = &v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for CKStateMachine.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = v7 + v10;
  if ((v12 & ~(unint64_t)v10) + *(void *)(v9 + 64) <= 0x30) {
    unint64_t v13 = 48;
  }
  else {
    unint64_t v13 = (v12 & ~(unint64_t)v10) + *(void *)(v9 + 64);
  }
  size_t v14 = v13 + 1;
  int v15 = *(_DWORD *)(v6 + 80) | v10;
  if ((v15 & 0x1000F8) != 0 || v14 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v15 & 0xF8 | 7u) + 16) & ~(unint64_t)(v15 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    unsigned int v19 = *((unsigned __int8 *)a2 + v13);
    unsigned int v20 = v19 - 3;
    if (v19 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *(unsigned __int8 *)a2;
          goto LABEL_19;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          goto LABEL_19;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_19:
          if (v13 < 4) {
            unsigned int v19 = (v22 | (v20 << (8 * v13))) + 3;
          }
          else {
            unsigned int v19 = v22 + 3;
          }
          break;
        default:
          break;
      }
    }
    if (v19 == 2)
    {
      uint64_t v24 = ~v11;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v24, ((unint64_t)a2 + v12) & v24, v18);
      *((unsigned char *)a1 + v13) = 2;
    }
    else
    {
      if (v19 == 1)
      {
        uint64_t v25 = a2[3];
        a1[3] = v25;
        (**(void (***)(uint64_t *, uint64_t *))(v25 - 8))(a1, a2);
        uint64_t v26 = a2[5];
        a1[4] = a2[4];
        a1[5] = v26;
        *((unsigned char *)a1 + v13) = 1;
      }
      else
      {
        if (v19)
        {
          memcpy(a1, a2, v14);
          return a1;
        }
        uint64_t v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        *((unsigned char *)a1 + v13) = 0;
      }
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t destroy for CKStateMachine.Error(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned __int8 *)(result + 80);
  uint64_t v9 = v5 + v8;
  unint64_t v10 = (v9 & ~v8) + *(void *)(result + 64);
  if (v10 <= 0x30) {
    unint64_t v10 = 48;
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_12;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_12:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    uint64_t v16 = ~v8;
    uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(a1, v3);
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t))(v18 + 8);
    return v17((unint64_t)&a1[v9] & v16, AssociatedTypeWitness);
  }
  else
  {
    if (v11 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    else if (v11)
    {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for CKStateMachine.Error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  if (((v7 + v10) & (unint64_t)~v10) + *(void *)(v9 + 64) <= 0x30) {
    uint64_t v12 = 48;
  }
  else {
    uint64_t v12 = ((v7 + v10) & ~v10) + *(void *)(v9 + 64);
  }
  unsigned int v13 = *((unsigned __int8 *)a2 + v12);
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *(unsigned __int8 *)a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 3;
        unsigned int v13 = v16 + 3;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
    uint64_t v19 = ~v10;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v19, ((unint64_t)a2 + v11) & v19, AssociatedTypeWitness);
    *((unsigned char *)a1 + v12) = 2;
  }
  else
  {
    if (v13 == 1)
    {
      uint64_t v20 = a2[3];
      a1[3] = v20;
      (**(void (***)(void *, void *))(v20 - 8))(a1, a2);
      uint64_t v21 = a2[5];
      a1[4] = a2[4];
      a1[5] = v21;
      *((unsigned char *)a1 + v12) = 1;
    }
    else
    {
      if (v13)
      {
        memcpy(a1, a2, v12 + 1);
        return a1;
      }
      uint64_t v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *((unsigned char *)a1 + v12) = 0;
    }
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for CKStateMachine.Error(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  if (((v7 + v10) & (unint64_t)~v10) + *(void *)(v9 + 64) <= 0x30) {
    uint64_t v12 = 48;
  }
  else {
    uint64_t v12 = ((v7 + v10) & ~v10) + *(void *)(v9 + 64);
  }
  unsigned int v13 = *((unsigned __int8 *)a1 + v12);
  char v14 = 8 * v12;
  unsigned int v15 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *(unsigned __int8 *)a1;
        goto LABEL_14;
      case 2:
        int v17 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v17 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        goto LABEL_14;
      case 4:
        int v17 = *(_DWORD *)a1;
LABEL_14:
        if (v12 < 4) {
          v17 |= v15 << v14;
        }
        unsigned int v13 = v17 + 3;
        break;
      default:
        break;
    }
  }
  uint64_t v18 = ~v10;
  if (v13 == 2)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)a1 + v11) & v18, AssociatedTypeWitness);
  }
  else
  {
    if (v13 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    else if (v13)
    {
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
  }
LABEL_24:
  unsigned int v19 = *((unsigned __int8 *)a2 + v12);
  unsigned int v20 = v19 - 3;
  if (v19 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v21 = v12;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *(unsigned __int8 *)a2;
        goto LABEL_33;
      case 2:
        int v22 = *(unsigned __int16 *)a2;
        goto LABEL_33;
      case 3:
        int v22 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
        goto LABEL_33;
      case 4:
        int v22 = *(_DWORD *)a2;
LABEL_33:
        if (v12 < 4) {
          unsigned int v19 = (v22 | (v20 << v14)) + 3;
        }
        else {
          unsigned int v19 = v22 + 3;
        }
        break;
      default:
        break;
    }
  }
  if (v19 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v18, ((unint64_t)a2 + v11) & v18, AssociatedTypeWitness);
    *((unsigned char *)a1 + v12) = 2;
  }
  else
  {
    if (v19 == 1)
    {
      uint64_t v23 = a2[3];
      a1[3] = v23;
      (**(void (***)(void *, void *))(v23 - 8))(a1, a2);
      a1[4] = a2[4];
      a1[5] = a2[5];
      *((unsigned char *)a1 + v12) = 1;
    }
    else
    {
      if (v19)
      {
        memcpy(a1, a2, v12 + 1);
        return a1;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      *((unsigned char *)a1 + v12) = 0;
    }
    swift_bridgeObjectRetain();
  }
  return a1;
}

_OWORD *initializeWithTake for CKStateMachine.Error(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  if (((v7 + v10) & (unint64_t)~v10) + *(void *)(v9 + 64) <= 0x30) {
    uint64_t v12 = 48;
  }
  else {
    uint64_t v12 = ((v7 + v10) & ~v10) + *(void *)(v9 + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 3;
        unsigned int v13 = v16 + 3;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
    uint64_t v18 = ~v10;
    (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)a1 + v11) & v18, (unint64_t)&a2[v11] & v18, AssociatedTypeWitness);
    char v19 = 2;
LABEL_21:
    *((unsigned char *)a1 + v12) = v19;
    return a1;
  }
  if (v13 == 1)
  {
    long long v20 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v20;
    a1[2] = *((_OWORD *)a2 + 2);
    char v19 = 1;
    goto LABEL_21;
  }
  if (v13)
  {
    memcpy(a1, a2, v12 + 1);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

_OWORD *assignWithTake for CKStateMachine.Error(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = v7 + v10;
    if (((v7 + v10) & (unint64_t)~v10) + *(void *)(v9 + 64) <= 0x30) {
      uint64_t v12 = 48;
    }
    else {
      uint64_t v12 = ((v7 + v10) & ~v10) + *(void *)(v9 + 64);
    }
    unsigned int v13 = *((unsigned __int8 *)a1 + v12);
    char v14 = 8 * v12;
    unsigned int v15 = v13 - 3;
    if (v13 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *(unsigned __int8 *)a1;
          goto LABEL_14;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_14:
          if (v12 < 4) {
            v17 |= v15 << v14;
          }
          unsigned int v13 = v17 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v18 = ~v10;
    if (v13 == 2)
    {
      (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(a1, v5);
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)a1 + v11) & v18, AssociatedTypeWitness);
    }
    else
    {
      if (v13 == 1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      else if (v13)
      {
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
    }
LABEL_24:
    unsigned int v19 = *((unsigned __int8 *)a2 + v12);
    unsigned int v20 = v19 - 3;
    if (v19 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *(unsigned __int8 *)a2;
          goto LABEL_33;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_33;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          goto LABEL_33;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_33:
          if (v12 < 4) {
            unsigned int v19 = (v22 | (v20 << v14)) + 3;
          }
          else {
            unsigned int v19 = v22 + 3;
          }
          break;
        default:
          break;
      }
    }
    if (v19 == 2)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)a1 + v11) & v18, ((unint64_t)a2 + v11) & v18, AssociatedTypeWitness);
      char v23 = 2;
    }
    else
    {
      if (v19 != 1)
      {
        if (v19)
        {
          memcpy(a1, a2, v12 + 1);
        }
        else
        {
          *a1 = *a2;
          *((unsigned char *)a1 + v12) = 0;
        }
        return a1;
      }
      long long v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      a1[2] = a2[2];
      char v23 = 1;
    }
    *((unsigned char *)a1 + v12) = v23;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CKStateMachine.Error(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  uint64_t v8 = 48;
  if (v7 > 0x30) {
    uint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_22;
  }
  uint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 252) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 < 2)
    {
LABEL_22:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 4) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_22;
  }
LABEL_14:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 253;
}

void storeEnumTagSinglePayload for CKStateMachine.Error(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = ((v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + *(void *)(v8 + 64);
  if (v9 <= 0x30) {
    unint64_t v9 = 48;
  }
  size_t v10 = v9 + 1;
  char v11 = 8 * (v9 + 1);
  if (a3 < 0xFD)
  {
    int v12 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v15 = ((a3 + ~(-1 << v11) - 252) >> v11) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v13 = a2 - 253;
    if (v10 < 4)
    {
      int v14 = (v13 >> v11) + 1;
      if (v9 != -1)
      {
        int v16 = v13 & ~(-1 << v11);
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v10] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v14;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1C34D84BCLL);
      case 4:
        *(_DWORD *)&a1[v10] = v14;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v12)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v9] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for CKStateMachine.Error(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  if (v5 <= 0x30) {
    unint64_t v5 = 48;
  }
  uint64_t result = a1[v5];
  if (result >= 3)
  {
    if (v5 <= 3) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v9 = (v8 | ((result - 3) << (8 * v5))) + 3;
        unsigned int v10 = v8 + 3;
        if (v5 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for CKStateMachine.Error(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  if (v7 <= 0x30) {
    size_t v8 = 48;
  }
  else {
    size_t v8 = v7;
  }
  if (a2 > 2)
  {
    unsigned int v9 = a2 - 3;
    if (v8 < 4)
    {
      unsigned int v10 = v9 >> (8 * v8);
      int v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 3;
      bzero(a1, v8);
      if (v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 3;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t type metadata accessor for CKStateMachine.Error()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C34D8784()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State) -> (@error @owned Error)(long long *a1)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State) -> (@error @owned Error)(a1, *(uint64_t (**)(unsigned char *))(v1 + 16));
}

uint64_t specialized closure #1 in CKStateMachine.transition(with:reason:validation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  char v14 = *(unsigned char *)(a2 + 16);
  unsigned int v15 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v15;
  *unsigned int v15 = v6;
  v15[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return specialized closure #1 in CKStateMachine.transition(with:reason:validation:)(a1, v12, v13, v14, a3, a4, a5, a6);
}

uint64_t sub_1C34D88B8()
{
  swift_release();
  outlined consume of CallScreening.StateTransition(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of CallScreening.StateTransition(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for specialized closure #1 in CKStateMachine.transition(with:reason:validation:)()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  uint64_t v3 = OUTLINED_FUNCTION_15_66();
  return v4(v3);
}

uint64_t *PlatformDisplayLink.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static PlatformDisplayLink.shared;
}

void PlatformDisplayLink.add(observer:)()
{
  swift_getObjectType();
  uint64_t v0 = OUTLINED_FUNCTION_8_10();
  specialized PlatformDisplayLink.add(observer:)(v0, v1, v2, v3);
}

void PlatformDisplayLink.remove(observer:)()
{
  swift_getObjectType();
  uint64_t v0 = OUTLINED_FUNCTION_8_10();
  specialized PlatformDisplayLink.remove(observer:)(v0, v1, v2, v3);
}

uint64_t DisplayLinkCallbackWrapper.displayLinkCallback(_:)(uint64_t result)
{
  uint64_t v2 = *(void (**)(id))(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    swift_retain();
    v2(objc_msgSend(v3, sel_preferredFramesPerSecond));
    return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v2);
  }
  return result;
}

uint64_t DisplayLinkCallbackWrapper.__deallocating_deinit()
{
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(*(void *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t PlatformDisplayLink.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  PlatformDisplayLink.init()();
  return v0;
}

uint64_t static PlatformDisplayLink.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t PlatformDisplayLink.init()()
{
  *(void *)(v0 + 32) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v0 + 40) = 0;
  PlatformDisplayLinkBase.init()();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = partial apply for closure #1 in PlatformDisplayLink.init();
  *(void *)(v1 + 24) = v2;
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v3);
  return v0;
}

uint64_t PlatformDisplayLinkBase.init()()
{
  type metadata accessor for DisplayLinkCallbackWrapper();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = 0;
  return v0;
}

uint64_t closure #1 in PlatformDisplayLink.init()(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    swift_beginAccess();
    uint64_t v4 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = v4 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of WeakPlatformDisplayLinkObserver(v6, (uint64_t)v9);
        if (MEMORY[0x1C8776240](v9))
        {
          uint64_t v7 = v9[1];
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, ObjectType, v7);
          swift_unknownObjectRelease();
        }
        outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v9);
        v6 += 16;
        --v5;
      }
      while (v5);
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void PlatformDisplayLink.startIfNecessary()()
{
  OUTLINED_FUNCTION_0_100();
  if (*(void *)(*(void *)(v0 + 32) + 16))
  {
    if ((*(unsigned char *)(v0 + 40) & 1) == 0)
    {
      *(unsigned char *)(v0 + 40) = 1;
      PlatformDisplayLinkBase.start()();
    }
  }
}

uint64_t closure #2 in PlatformDisplayLink.remove(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1C8776240]();
  if (result)
  {
    uint64_t v4 = result;
    swift_unknownObjectRelease();
    return v4 == a2;
  }
  return result;
}

void PlatformDisplayLink.cancelIfNecessary()()
{
  OUTLINED_FUNCTION_0_100();
  if (!*(void *)(*(void *)(v0 + 32) + 16) && *(unsigned char *)(v0 + 40) == 1)
  {
    *(unsigned char *)(v0 + 40) = 0;
    PlatformDisplayLinkBase.cancel()();
  }
}

uint64_t PlatformDisplayLink.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t PlatformDisplayLink.deinit()
{
  PlatformDisplayLinkBase.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PlatformDisplayLinkBase.deinit()
{
  swift_release();

  return v0;
}

uint64_t PlatformDisplayLink.__deallocating_deinit()
{
  PlatformDisplayLinkBase.deinit();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id PlatformDisplayLinkBase.displayLink.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = closure #1 in PlatformDisplayLinkBase.displayLink.getter(v0);
    uint64_t v4 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

void PlatformDisplayLinkBase.start()()
{
}

void PlatformDisplayLinkBase.cancel()()
{
}

void PlatformDisplayLinkBase.start()(SEL *a1)
{
  id v2 = PlatformDisplayLinkBase.displayLink.getter();
  id v3 = objc_msgSend(self, sel_currentRunLoop);
  objc_msgSend(v2, *a1, v3, *MEMORY[0x1E4F1C398]);
}

id closure #1 in PlatformDisplayLinkBase.displayLink.getter(uint64_t a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CADisplayLink);
  uint64_t v2 = *(void *)(a1 + 16);
  v5[3] = type metadata accessor for DisplayLinkCallbackWrapper();
  v5[0] = v2;
  swift_retain();
  id v3 = @nonobjc CADisplayLink.__allocating_init(target:selector:)(v5, (uint64_t)sel_displayLinkCallback_);
  objc_msgSend(v3, sel_setPreferredFramesPerSecond_, 24, v5[0]);
  return v3;
}

id @nonobjc CADisplayLink.__allocating_init(target:selector:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v4 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_displayLinkWithTarget_selector_, v4, a2);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

uint64_t PlatformDisplayLinkBase.__deallocating_deinit()
{
  PlatformDisplayLinkBase.deinit();
  return swift_deallocClassInstance();
}

uint64_t PlatformDisplayLinkBase.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  PlatformDisplayLinkBase.init()();
  return v0;
}

void specialized PlatformDisplayLink.remove(observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v10 = (uint64_t *)&v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *unsigned int v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBE8], v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v12 = (uint64_t *)(a2 + 32);
  swift_beginAccess();
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v13 + 32;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of WeakPlatformDisplayLinkObserver(v15, (uint64_t)v39);
      uint64_t v16 = MEMORY[0x1C8776240](v39);
      if (v16)
      {
        uint64_t v17 = v16;
        swift_unknownObjectRelease();
        if (v17 == a1) {
          break;
        }
      }
      outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v39);
      v15 += 16;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with take of WeakPlatformDisplayLinkObserver((uint64_t)v39, (uint64_t)&v38);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_9:
    long long v38 = xmmword_1C376E330;
  }
  swift_bridgeObjectRelease();
  long long v18 = v38;
  uint64_t v19 = outlined destroy of WeakPlatformDisplayLinkObserver?((uint64_t)&v38);
  if (v18 != __PAIR128__(1, 0))
  {
    MEMORY[0x1F4188790](v19);
    *(&v36 - 2) = a1;
    *(&v36 - 1) = a4;
    swift_beginAccess();
    specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(void))partial apply for closure #2 in PlatformDisplayLink.remove(observer:));
    if (*(void *)(*v12 + 16) >= v20)
    {
      specialized Array.replaceSubrange<A>(_:with:)();
      uint64_t v21 = *v12;
      unint64_t v22 = *(void *)(*v12 + 16);
      if (v22)
      {
        swift_bridgeObjectRetain();
        unint64_t v23 = 0;
        uint64_t v24 = 48;
        while (1)
        {
          outlined init with copy of WeakPlatformDisplayLinkObserver(v21 + v24 - 16, (uint64_t)v39);
          uint64_t v25 = MEMORY[0x1C8776240](v39);
          swift_unknownObjectRelease();
          outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v39);
          if (!v25) {
            break;
          }
          ++v23;
          v24 += 16;
          if (v22 == v23)
          {
            swift_bridgeObjectRelease();
            uint64_t v26 = *(void *)(*v12 + 16);
            unint64_t v23 = v22;
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_51;
        }
        uint64_t v27 = *v12;
        unint64_t v28 = *(void *)(*v12 + 16);
        if (v26 != v28)
        {
          unint64_t v29 = v23 + 1;
          while (v29 < v28)
          {
            outlined init with copy of WeakPlatformDisplayLinkObserver(v27 + v24, (uint64_t)v39);
            uint64_t v30 = MEMORY[0x1C8776240](v39);
            swift_unknownObjectRelease();
            outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v39);
            if (v30)
            {
              if (v29 != v23)
              {
                if ((v23 & 0x8000000000000000) != 0) {
                  goto LABEL_44;
                }
                uint64_t v31 = *v12;
                unint64_t v32 = *(void *)(*v12 + 16);
                if (v23 >= v32) {
                  goto LABEL_45;
                }
                outlined init with copy of WeakPlatformDisplayLinkObserver(v31 + 16 * v23 + 32, (uint64_t)v39);
                if (v29 >= v32) {
                  goto LABEL_46;
                }
                outlined init with copy of WeakPlatformDisplayLinkObserver(v31 + v24, (uint64_t)v37);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *uint64_t v12 = v31;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  specialized _ArrayBuffer._consumeAndCreateNew()();
                  uint64_t v31 = v35;
                  *uint64_t v12 = v35;
                }
                if (v23 >= *(void *)(v31 + 16)) {
                  goto LABEL_47;
                }
                outlined assign with take of WeakPlatformDisplayLinkObserver((uint64_t)v37, v31 + 16 * v23 + 32);
                if (v29 >= *(void *)(*v12 + 16)) {
                  goto LABEL_48;
                }
                outlined assign with take of WeakPlatformDisplayLinkObserver((uint64_t)v39, *v12 + v24);
              }
              if (__OFADD__(v23++, 1)) {
                goto LABEL_42;
              }
            }
            uint64_t v26 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_41;
            }
            uint64_t v27 = *v12;
            unint64_t v28 = *(void *)(*v12 + 16);
            ++v29;
            v24 += 16;
            if (v26 == v28) {
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
LABEL_21:
        if (v26 < (uint64_t)v23) {
          goto LABEL_50;
        }
      }
      specialized Array.replaceSubrange<A>(_:with:)();
      swift_endAccess();
      PlatformDisplayLink.cancelIfNecessary()();
      return;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
}

void specialized PlatformDisplayLink.add(observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v10 = (uint64_t *)&v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *unsigned int v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCBE8], v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(a2 + 32);
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v14 = v12 + 32;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        outlined init with copy of WeakPlatformDisplayLinkObserver(v14, (uint64_t)v22);
        uint64_t v15 = MEMORY[0x1C8776240](v22);
        if (v15)
        {
          uint64_t v16 = v15;
          swift_unknownObjectRelease();
          if (v16 == a1) {
            break;
          }
        }
        outlined destroy of WeakPlatformDisplayLinkObserver((uint64_t)v22);
        v14 += 16;
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      outlined init with take of WeakPlatformDisplayLinkObserver((uint64_t)v22, (uint64_t)&v21);
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_9:
      long long v21 = xmmword_1C376E330;
    }
    swift_bridgeObjectRelease();
    long long v17 = v21;
    outlined destroy of WeakPlatformDisplayLinkObserver?((uint64_t)&v21);
    if (v17 == __PAIR128__(1, 0))
    {
      *((void *)&v21 + 1) = 0;
      swift_unknownObjectWeakInit();
      *((void *)&v21 + 1) = a4;
      uint64_t v18 = swift_unknownObjectWeakAssign();
      outlined init with take of WeakPlatformDisplayLinkObserver(v18, (uint64_t)v22);
      swift_beginAccess();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v19 = *(void *)(*(void *)(a2 + 32) + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      uint64_t v20 = *(void *)(a2 + 32);
      *(void *)(v20 + 16) = v19 + 1;
      outlined init with take of WeakPlatformDisplayLinkObserver((uint64_t)v22, v20 + 16 * v19 + 32);
      swift_endAccess();
      PlatformDisplayLink.startIfNecessary()();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1C34D9948()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformDisplayLink.init()(uint64_t a1)
{
  return closure #1 in PlatformDisplayLink.init()(a1);
}

uint64_t type metadata accessor for DisplayLinkCallbackWrapper()
{
  return self;
}

uint64_t dispatch thunk of PlatformDisplayLinkObserver.displayLinkCallback(framesPerSecond:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for PlatformDisplayLink()
{
  return self;
}

uint64_t type metadata accessor for PlatformDisplayLinkBase()
{
  return self;
}

uint64_t method lookup function for PlatformDisplayLinkBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PlatformDisplayLinkBase);
}

uint64_t dispatch thunk of PlatformDisplayLinkBase.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

ValueMetadata *type metadata accessor for WeakPlatformDisplayLinkObserver()
{
  return &type metadata for WeakPlatformDisplayLinkObserver;
}

void *specialized AnsweringConditionTimer.init(logger:timeToWaitForCall:callIsScreenable:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = direct field offset for AnsweringConditionTimer.timer;
  type metadata accessor for AsyncCancellableTimer();
  uint64_t v12 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)((char *)v5 + v11) = v12;
  *(void *)(v12 + 112) = 0;
  void v5[4] = a2;
  v5[5] = a3;
  uint64_t v13 = (char *)v5 + direct field offset for AnsweringConditionTimer.logger;
  uint64_t v14 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a1, v14);
  _OWORD v5[2] = a4;
  v5[3] = a5;
  return v5;
}

uint64_t specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v3[2] = a1;
  long long v3[3] = a2;
  type metadata accessor for MainActor();
  v3[11] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[12] = v5;
  v3[13] = v4;
  return MEMORY[0x1F4188298](specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:), v5, v4);
}

uint64_t specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:)()
{
  unint64_t v23 = v0;
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  v22[0] = v0[8];
  v22[1] = v2;
  if (((*(uint64_t (**)(uint64_t *))(v1 + 16))(v22) & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRetain();
    unsigned int v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    unint64_t v13 = v0[9];
    if (v12)
    {
      uint64_t v14 = v0[8];
      uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_37();
      v22[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v15 = 136446210;
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v10, v11, "Should Answer timer returning early as NO for: %{public}s because we can no longer screen the call.", v15, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_4_21();
    OUTLINED_FUNCTION_7_6();
    __asm { BRAA            X2, X16 }
  }
  (*(void (**)(void *))(v0[10] + 32))(v0 + 2);
  v0[14] = direct field offset for AnsweringConditionTimer.logger;
  swift_bridgeObjectRetain_n();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = v0[9];
  if (v5)
  {
    uint64_t v21 = v0[8];
    uint64_t v7 = swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = Duration.description.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v6, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v3, v4, "Should Answer timer started with timeToWait %{public}s for: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v16 = (void *)swift_task_alloc();
  v0[15] = v16;
  *uint64_t v16 = v0;
  v16[1] = specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:);
  OUTLINED_FUNCTION_7_6();
  return AsyncCancellableTimer.wait(with:)();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *os_log_type_t v4 = v3;
  *os_log_type_t v4 = *v2;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_99_0();
  unint64_t v6 = *(void *)(v5 + 104);
  uint64_t v7 = *(void *)(v1 + 96);
  if (v0) {
    uint64_t v8 = specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:);
  }
  else {
    uint64_t v8 = specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:);
  }
  return MEMORY[0x1F4188298](v8, v7, v6);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_4_21();
  return v0(0);
}

uint64_t specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_290();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_118_0();
  a20 = v22;
  swift_release();
  char v25 = static Task<>.isCancelled.getter();
  uint64_t v27 = v22[2];
  unint64_t v26 = v22[3];
  if (v25)
  {
    swift_bridgeObjectRetain();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_37();
      a10 = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)uint64_t v30 = 136446210;
      v22[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &a10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v28, v29, "Should Answer timer canceled for: %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v31 = v22[10];
    a10 = v22[2];
    a11 = v26;
    (*(void (**)(uint64_t *))(v31 + 16))(&a10);
  }
  OUTLINED_FUNCTION_263();
  return v34(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14);
}

uint64_t specialized DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = a2;
  uint64_t v7 = *(void (**)(uint64_t))(*(void *)v4 + 128);
  uint64_t v8 = swift_retain();
  v7(v8);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  unsigned int v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = a3;
  v10[4] = a4;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ()?);
  dispatch thunk of TaskQueue.async<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CallScreeningActor.shared;
  v3[8] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:), v4, 0);
}

uint64_t specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)()
{
  OUTLINED_FUNCTION_17_2();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    BOOL v5 = (uint64_t (*)(void))(v0[6] + *(int *)v0[6]);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[10] = v2;
    *uint64_t v2 = v0;
    v2[1] = specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:);
    return v5();
  }
  else
  {
    OUTLINED_FUNCTION_4_21();
    return v4(1);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v2 = v1;
  id v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  *(void *)(v6 + 88) = v5;
  swift_task_dealloc();
  OUTLINED_FUNCTION_46_20();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  *(void *)(*(void *)(v0 + 72) + 24) = *(void *)(v0 + 88);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_4_21();
  return v1();
}

{
  uint64_t *v0;
  char v1;
  char v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_17_2();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_5();
  uint64_t v4 = *(unsigned char **)(v3 + 16);
  BOOL v5 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  *uint64_t v4 = v2 & 1;
  OUTLINED_FUNCTION_6();
  return v7();
}

uint64_t *AnsweringMachineComposer.shared.unsafeMutableAddressor()
{
  return &static AnsweringMachineComposer.shared;
}

uint64_t specialized AnsweringMachineTrackingServiceAdapter.init(logger:answeringMachine:)(uint64_t a1, uint64_t a2)
{
  BOOL v5 = (void *)(v2 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
  void *v5 = 0;
  v5[1] = 0;
  uint64_t v6 = (void *)(v2 + direct field offset for AnsweringMachineTrackingServiceAdapter.currentTrackedCallTask);
  *uint64_t v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  uint64_t v7 = v2 + direct field offset for AnsweringMachineTrackingServiceAdapter.logger;
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  *(void *)(v2 + direct field offset for AnsweringMachineTrackingServiceAdapter.answeringMachine) = a2;
  return v2;
}

uint64_t specialized CKStateMachine.init(initialState:logger:stateTransitioner:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for TaskPriority();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v11 = *(void *)(*(void *)v4 + 112);
  type metadata accessor for TaskQueue();
  static TaskPriority.userInitiated.getter();
  *(void *)(v4 + v11) = TaskQueue.__allocating_init(priority:)();
  outlined init with take of CallScreening.State(a1, v5 + *(void *)(*(void *)v5 + 104));
  uint64_t v12 = v4 + direct field offset for CKStateMachine.logger;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v13 - 8);
  uint64_t v54 = a2;
  uint64_t v51 = v13;
  (*(void (**)(uint64_t, uint64_t))(v50 + 16))(v12, a2);
  uint64_t v14 = (void *)(v5 + *(void *)(*(void *)v5 + 128));
  *uint64_t v14 = a3;
  v14[1] = a4;
  unint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v55 = 0u;
  unsigned __int8 v59 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<CKStateMachine<CallScreening.State>.StateUpdate, Never>);
  swift_allocObject();
  swift_retain();
  uint64_t v52 = a1;
  outlined retain of CallScreening.State(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
  *(void *)(v5 + *(void *)(*(void *)v5 + 120)) = CurrentValueSubject.init(_:)();
  uint64_t v15 = v5 + *(void *)(*(void *)v5 + 104);
  swift_beginAccess();
  outlined init with take of CallScreening.State((long long *)v15, (uint64_t)v60);
  outlined init with take of CallScreening.State(v60, (uint64_t)&v61);
  switch(v62 >> 61)
  {
    case 1uLL:
    case 3uLL:
      v62 &= 0x1FFFFFFFFFFFFFFFuLL;
      break;
    case 2uLL:
      v62 &= 0x1FFFFFFFFFFFFFFFuLL;
      break;
    case 4uLL:
      v62 &= 0x1FFFFFFFFFFFFFFFuLL;
      break;
    case 5uLL:
      v62 &= 0x1FFFFFFFFFFFFFFFuLL;
      break;
    default:
      v62 &= 0x1FFFFFFFFFFFFFFFuLL;
      break;
  }
  swift_beginAccess();
  swift_weakAssign();
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  uint64_t v53 = v5;
  uint64_t v18 = *(void *)(v15 + 16);
  uint64_t v19 = *(void *)(v15 + 24);
  uint64_t v21 = *(void *)(v15 + 32);
  uint64_t v20 = *(void *)(v15 + 40);
  unint64_t v22 = *(void *)(v15 + 48);
  outlined init with take of CallScreening.State(v60, v15);
  outlined retain of CallScreening.State(v60, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
  outlined retain of CallScreening.State(v60, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
  outlined consume of CallScreening.State(v16, v17, v18, v19, v21, v20, v22);
  CallScreening.State.state.getter((uint64_t)&v55);
  uint64_t v23 = *((void *)&v56 + 1);
  uint64_t v24 = v57;
  __swift_project_boxed_opaque_existential_1(&v55, *((uint64_t *)&v56 + 1));
  (*(void (**)(uint64_t, uint64_t))(v24 + 56))(v23, v24);
  if (v49)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    uint64_t v25 = v53;
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v51);
    outlined retain of CallScreening.State(v52, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    uint64_t v26 = *(void *)v15;
    uint64_t v27 = *(void *)(v15 + 8);
    uint64_t v28 = *(void *)(v15 + 16);
    uint64_t v29 = *(void *)(v15 + 24);
    uint64_t v30 = *(void *)(v15 + 32);
    uint64_t v31 = *(void *)(v15 + 40);
    unint64_t v32 = *(void *)(v15 + 48);
    outlined init with take of CallScreening.State(v60, v15);
    outlined retain of CallScreening.State(v60, (void (*)(void, void, void, void, void, void, void))outlined copy of CallScreening.State);
    outlined consume of CallScreening.State(v26, v27, v28, v29, v30, v31, v32);
    uint64_t v25 = v53;
    unint64_t v33 = specialized CKStateMachine.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = v33;
      uint64_t v40 = swift_slowAlloc();
      *(void *)&long long v55 = v40;
      *(_DWORD *)uint64_t v38 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v35, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v36, v37, "%{public}s) initialized, notifying observers with initial state.", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v40, -1, -1);
      char v41 = v38;
      uint64_t v25 = v53;
      MEMORY[0x1C87760E0](v41, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v42 = *(void *)(v15 + 8);
    uint64_t v43 = *(void *)(v15 + 16);
    uint64_t v44 = *(void *)(v15 + 24);
    uint64_t v45 = *(void *)(v15 + 32);
    uint64_t v46 = *(void *)(v15 + 40);
    unint64_t v47 = *(void *)(v15 + 48);
    *(void *)&long long v55 = *(void *)v15;
    *((void *)&v55 + 1) = v42;
    *(void *)&long long v56 = v43;
    *((void *)&v56 + 1) = v44;
    *(void *)&long long v57 = v45;
    *((void *)&v57 + 1) = v46;
    unint64_t v58 = v47;
    unsigned __int8 v59 = 1;
    outlined copy of CallScreening.State(v55, v42, v43, v44, v45, v46, v47);
    CurrentValueSubject.send(_:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v51);
    outlined retain of CallScreening.State(v52, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
    outlined consume of CKStateMachine<CallScreening.State>.StateUpdate(v55, *((uint64_t *)&v55 + 1), v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58, v59);
  }
  outlined retain of CallScreening.State(v60, (void (*)(void, void, void, void, void, void, void))outlined consume of CallScreening.State);
  return v25;
}

uint64_t AnsweringMachineSyncComposer.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnsweringMachineSyncComposer.init()()
{
  return v0;
}

uint64_t AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AnsweringMachineStatusService();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v9);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - v11;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(&v12[*(int *)(v8 + 20)], v14, v13);
  id v15 = objc_allocWithZone(MEMORY[0x1E4FADBD0]);
  swift_retain();
  *(void *)uint64_t v12 = objc_msgSend(v15, sel_init);
  uint64_t v16 = &v12[*(int *)(v8 + 24)];
  *(void *)uint64_t v16 = a1;
  *((void *)v16 + 1) = a2;
  outlined init with copy of AnsweringMachineStatusService();
  uint64_t v17 = swift_allocObject();
  outlined init with take of AnsweringMachineStatusService();
  outlined destroy of AnsweringMachineStatusService((uint64_t)v12, (void (*)(void))type metadata accessor for AnsweringMachineStatusService);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:);
  v18[3] = v17;
  v18[4] = a3;
  v18[5] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DelayedAnsweringMachine<CallScreening.MainAnsweringMachine>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  return specialized DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:), v17, (uint64_t)&async function pointer to partial apply for closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:), (uint64_t)v18);
}

uint64_t sub_1C34DB2D4()
{
  type metadata accessor for AnsweringMachineStatusService();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_48_17();
  OUTLINED_FUNCTION_12_0();
  uint64_t v0 = OUTLINED_FUNCTION_25_47();
  v1(v0);
  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_285();
  return swift_deallocObject();
}

BOOL partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:)()
{
  uint64_t v0 = type metadata accessor for AnsweringMachineStatusService();
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_38_23();
  return AnsweringMachineStatusService.isAvailable()();
}

uint64_t closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v6;
  v4[11] = v5;
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:), v6, v5);
}

uint64_t closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:)()
{
  OUTLINED_FUNCTION_28_0();
  type metadata accessor for Defaults();
  OUTLINED_FUNCTION_26();
  swift_retain();
  Defaults.init()();
  OUTLINED_FUNCTION_2_10();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 800))();
  swift_release();
  OUTLINED_FUNCTION_26();
  Defaults.init()();
  OUTLINED_FUNCTION_2_10();
  uint64_t v4 = (*(uint64_t (**)(void))(v3 + 808))();
  swift_release();
  v0[2] = v2;
  v0[3] = v4;
  v0[4] = 0x4008000000000000;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:), v5, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  type metadata accessor for AnsweringMachineComposer();
  v0[12] = OUTLINED_FUNCTION_8_9();
  swift_retain();
  AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)(v0 + 2, (uint64_t)closure #1 in default argument 1 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:), 0, (uint64_t)closure #1 in default argument 2 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:), 0, v4, v3, v1, v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = (uint64_t)v5;
  void *v5 = v0;
  v5[1] = closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:);
  return AnsweringMachineComposer.compose()();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v13;

  OUTLINED_FUNCTION_49_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_5();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {

    uint64_t v9 = v5[10];
    uint64_t v10 = v5[11];
    uint64_t v11 = closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:);
  }
  else
  {
    v5[14] = v3;
    uint64_t v9 = v5[10];
    uint64_t v10 = v5[11];
    uint64_t v11 = closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:);
  }
  return MEMORY[0x1F4188298](v11, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_26_43();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  OUTLINED_FUNCTION_4_21();
  return v0(0);
}

uint64_t sub_1C34DB84C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:);
  OUTLINED_FUNCTION_44_20();
  return closure #1 in AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:)(v3, v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_26_43();
  return v4(v3);
}

void default argument 1 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)()
{
}

void default argument 2 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)()
{
}

uint64_t AnsweringMachineComposer.__allocating_init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

uint64_t AnsweringMachineComposer.compose()()
{
  OUTLINED_FUNCTION_17_2();
  v1[5] = v0;
  type metadata accessor for TelephonyUtilitiesServices();
  v1[6] = OUTLINED_FUNCTION_28_2();
  v1[7] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[8] = v2;
  OUTLINED_FUNCTION_1(v2);
  v1[9] = v3;
  v1[10] = OUTLINED_FUNCTION_28_2();
  v1[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CallScreeningActor.shared;
  v1[12] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](AnsweringMachineComposer.compose(), v4, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;

  OUTLINED_FUNCTION_55();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[5];
  uint64_t v5 = __swift_project_value_buffer(v2, (uint64_t)logger);
  v0[13] = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[14] = v6;
  v0[15] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v2);
  OUTLINED_FUNCTION_56_14();
  Logger.traceFunctionStart(file:function:line:)();
  uint64_t v7 = *(uint64_t (**)(void))(v3 + 8);
  v0[16] = v7;
  v0[17] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  OUTLINED_FUNCTION_15_5();
  uint64_t v8 = v7();
  if (((*(uint64_t (**)(uint64_t))(v4 + 32))(v8) & 1) == 0)
  {
    v6(v0[10], v5, v0[8]);
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1C2F90000, v12, v13, "Throwing Error because the feature is disabled. Do not try to create and use an AM if the feature is disabled!", v14, 2u);
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_15_5();
    v7();
    lazy protocol witness table accessor for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_40();
    __asm { BRAA            X1, X16 }
  }
  if (TUCallScreeningRTTEnabled())
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static CallScreeningRTTHelper.shared + 152))();
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[18] = v9;
  *uint64_t v9 = v0;
  v9[1] = AnsweringMachineComposer.compose();
  OUTLINED_FUNCTION_40();
  return AnsweringMachineComposer.composeStateMachine()();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 152) = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v6();
  }
  else
  {
    return MEMORY[0x1F4188298](AnsweringMachineComposer.compose(), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 168) = type metadata accessor for MainActor();
  *(void *)(v0 + 176) = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[8];
  swift_release();
  v1(v3, v2, v4);
  uint64_t v5 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v6 = objc_msgSend(self, sel_sharedInstance);
  type metadata accessor for CallStatusService();
  OUTLINED_FUNCTION_8_9();
  v0[23] = CallStatusService.init(logger:notificationCenter:callCenter:)(v3, v5, v6);
  OUTLINED_FUNCTION_37_2();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  (*(void (**)(void, void, void))(v0 + 112))(*(void *)(v0 + 88), *(void *)(v0 + 104), *(void *)(v0 + 64));
  swift_retain();
  swift_retain();
  *(void *)(v0 + 192) = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(char **)(v0 + 56);
  swift_release();
  AnsweringMachineComposer.callServices.getter(v1);
  OUTLINED_FUNCTION_37_2();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 200) = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  *(void *)(v0 + 208) = static CallScreeningViewModelComposer.viewModel;
  swift_retain();
  OUTLINED_FUNCTION_46_20();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_55();
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v7 = v0[5];
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  type metadata accessor for CallScreening.MainAnsweringMachine();
  uint64_t v10 = (uint64_t *)OUTLINED_FUNCTION_8_9();
  outlined init with copy of AnsweringMachineStatusService();
  swift_retain();
  v0[27] = specialized CallScreening.MainAnsweringMachine.init(logger:stateMachine:statusService:callServices:onCallStatusUpdate:isAnsweringMachineAvailable:)(v4, v3, v2, v6, (uint64_t)&async function pointer to partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.compose(), v1, v8, v9, v10);
  outlined destroy of AnsweringMachineStatusService(v5, (void (*)(void))type metadata accessor for TelephonyUtilitiesServices);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](AnsweringMachineComposer.compose(), v11, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  OUTLINED_FUNCTION_28_0();
  CallScreening.MainAnsweringMachine.start()();
  *(void *)(v0 + 224) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 96);
    uint64_t v3 = AnsweringMachineComposer.compose();
  }
  else
  {
    uint64_t v3 = AnsweringMachineComposer.compose();
    uint64_t v2 = 0;
  }
  return MEMORY[0x1F4188298](v3, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 232) = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  closure #2 in AnsweringMachineComposer.compose()(v1);
  OUTLINED_FUNCTION_46_20();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_28_0();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t AnsweringMachineComposer.compose()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_290();
  OUTLINED_FUNCTION_118_0();
  uint64_t v15 = *(void *)(v14 + 216);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 128);
  uint64_t v17 = *(void *)(v14 + 88);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v28 = *(void *)(v14 + 56);
  uint64_t v29 = *(void *)(v14 + 48);
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 112))(v17, *(void *)(v14 + 104), v18);
  swift_retain();
  OUTLINED_FUNCTION_56_14();
  specialized Logger.traceFunction<A>(returning:file:function:line:)();
  v16(v17, v18);
  swift_beginAccess();
  static AnsweringMachineComposer.shared = v15;
  unk_1EBBAE8E0 = &protocol witness table for CallScreening.MainAnsweringMachine;
  swift_retain();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_21();
  OUTLINED_FUNCTION_263();
  return v21(v19, v20, v21, v22, v23, v24, v25, v26, v15, v28, v29, a12, a13, a14);
}

uint64_t AnsweringMachineSyncComposer.deinit()
{
  return v0;
}

uint64_t AnsweringMachineSyncComposer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static AnsweringMachineComposer.Error.== infix(_:_:)()
{
  return 1;
}

void AnsweringMachineComposer.Error.hash(into:)()
{
}

Swift::Int AnsweringMachineComposer.Error.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AnsweringMachineComposer.isAnsweringMachineAvailable.getter()
{
  return OUTLINED_FUNCTION_35();
}

void *AnsweringMachineComposer.Config.defaultSecondsBeforeAnswerAsScreening.unsafeMutableAddressor()
{
  return &static AnsweringMachineComposer.Config.defaultSecondsBeforeAnswerAsScreening;
}

uint64_t static AnsweringMachineComposer.Config.defaultSecondsBeforeAnswerAsScreening.getter()
{
  return 17;
}

void *AnsweringMachineComposer.Config.defaultMaxSecondsForScreening.unsafeMutableAddressor()
{
  return &static AnsweringMachineComposer.Config.defaultMaxSecondsForScreening;
}

uint64_t static AnsweringMachineComposer.Config.defaultMaxSecondsForScreening.getter()
{
  return 120;
}

void *AnsweringMachineComposer.Config.defaultActivityUpdateThrottleSeconds.unsafeMutableAddressor()
{
  return &static AnsweringMachineComposer.Config.defaultActivityUpdateThrottleSeconds;
}

double static AnsweringMachineComposer.Config.defaultActivityUpdateThrottleSeconds.getter()
{
  return 3.0;
}

uint64_t AnsweringMachineComposer.Config.description.getter()
{
  _StringGuts.grow(_:)(77);
  v0._countAndFlagsBits = 0xD00000000000002ELL;
  v0._object = (void *)0x80000001C37B15A0;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001C37B15D0;
  v2._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t AnsweringMachineComposer.Config.defaultSecondsBeforeAnswerAsScreening.getter()
{
  return *(void *)v0;
}

uint64_t AnsweringMachineComposer.Config.maxSecondsForScreening.getter()
{
  return *(void *)(v0 + 8);
}

double AnsweringMachineComposer.Config.activityUpdateThrottleSeconds.getter()
{
  return *(double *)(v0 + 16);
}

ConversationKit::AnsweringMachineComposer::Config __swiftcall AnsweringMachineComposer.Config.init(defaultSecondsBeforeAnswerAsScreening:maxSecondsForScreening:activityUpdateThrottleSeconds:)(Swift::Int defaultSecondsBeforeAnswerAsScreening, Swift::Int maxSecondsForScreening, Swift::Double activityUpdateThrottleSeconds)
{
  *(void *)uint64_t v3 = defaultSecondsBeforeAnswerAsScreening;
  *(void *)(v3 + 8) = maxSecondsForScreening;
  *(Swift::Double *)(v3 + 16) = activityUpdateThrottleSeconds;
  result.activityUpdateThrottleSeconds = activityUpdateThrottleSeconds;
  result.maxSecondsForScreening = maxSecondsForScreening;
  result.defaultSecondsBeforeAnswerAsScreening = defaultSecondsBeforeAnswerAsScreening;
  return result;
}

uint64_t static AnsweringMachineComposer.shared.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t static AnsweringMachineComposer.shared.setter(uint64_t a1, uint64_t a2)
{
  static AnsweringMachineComposer.shared = a1;
  unk_1EBBAE8E0 = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*static AnsweringMachineComposer.shared.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t AnsweringMachineComposer.isEnabled.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t AnsweringMachineComposer.isEnabledM3.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t AnsweringMachineComposer.timeToWaitForCall.getter()
{
  return OUTLINED_FUNCTION_35();
}

uint64_t AnsweringMachineComposer.callServices.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TelephonyUtilitiesServices?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v21[-v7];
  uint64_t v9 = (uint64_t)v1 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer____lazy_storage___callServices;
  swift_beginAccess();
  outlined init with copy of TelephonyUtilitiesServices?(v9, (uint64_t)v8);
  uint64_t v10 = (int *)type metadata accessor for TelephonyUtilitiesServices();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v10) != 1) {
    return outlined init with take of AnsweringMachineStatusService();
  }
  outlined destroy of TelephonyUtilitiesServices?((uint64_t)v8);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(&a1[v10[5]], v12, v11);
  uint64_t v14 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v16 = v1[8];
  uint64_t v15 = v1[9];
  uint64_t v17 = self;
  swift_retain();
  swift_retain();
  *(void *)a1 = objc_msgSend(v17, sel_sharedInstance);
  uint64_t v18 = &a1[v10[6]];
  *(void *)uint64_t v18 = v14;
  *((void *)v18 + 1) = v13;
  uint64_t v19 = &a1[v10[7]];
  *(void *)uint64_t v19 = v16;
  *((void *)v19 + 1) = v15;
  outlined init with copy of AnsweringMachineStatusService();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v10);
  swift_beginAccess();
  outlined assign with take of TelephonyUtilitiesServices?((uint64_t)v5, v9);
  return swift_endAccess();
}

double AnsweringMachineComposer.config.getter@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer_config + 16);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer_config);
  *(double *)(a1 + 16) = result;
  return result;
}

id closure #1 in default argument 1 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)()
{
  return closure #1 in default argument 1 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)((SEL *)&selRef_callScreeningEnabled);
}

id closure #1 in default argument 2 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)()
{
  return closure #1 in default argument 1 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)((SEL *)&selRef_callScreeningEnabledM3);
}

id closure #1 in default argument 1 of AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)(SEL *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  id v3 = [v2 *a1];

  return v3;
}

void *AnsweringMachineComposer.init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v15 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  uint64_t v23 = a1[2];
  uint64_t v24 = (uint64_t)v10 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer____lazy_storage___callServices;
  uint64_t v25 = type metadata accessor for TelephonyUtilitiesServices();
  __swift_storeEnumTagSinglePayload(v24, 1, 1, v25);
  uint64_t v26 = (void *)((char *)v10 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer_config);
  uint64_t v43 = v22;
  uint64_t v44 = v21;
  *uint64_t v26 = v21;
  v26[1] = v22;
  v26[2] = v23;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v45 = a9;
  uint64_t v27 = __swift_project_value_buffer(v15, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v27, v15);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = OUTLINED_FUNCTION_37();
    uint64_t v40 = a6;
    uint64_t v31 = (uint8_t *)v30;
    uint64_t v32 = OUTLINED_FUNCTION_9_0();
    uint64_t v41 = a7;
    uint64_t v42 = a8;
    *(_DWORD *)uint64_t v31 = 136446210;
    uint64_t v53 = v32;
    v39[1] = v31 + 4;
    uint64_t v50 = v44;
    uint64_t v51 = v43;
    uint64_t v52 = v23;
    uint64_t v33 = AnsweringMachineComposer.Config.description.getter();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v53);
    a8 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v28, v29, "Creating answeringmachine with config %{public}s", v31, 0xCu);
    swift_arrayDestroy();
    a7 = v41;
    OUTLINED_FUNCTION_3();
    a6 = v40;
    OUTLINED_FUNCTION_3();
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
  uint64_t v35 = v47;
  v10[4] = v46;
  v10[5] = v35;
  uint64_t v36 = v49;
  v10[6] = v48;
  v10[7] = v36;
  v10[2] = a6;
  v10[3] = a7;
  uint64_t v37 = v45;
  v10[8] = a8;
  v10[9] = v37;
  return v10;
}

uint64_t AnsweringMachineComposer.composeStateMachine()()
{
  OUTLINED_FUNCTION_17_2();
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[21] = v2;
  OUTLINED_FUNCTION_1(v2);
  v1[22] = v3;
  v1[23] = OUTLINED_FUNCTION_28_2();
  v1[24] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static CKStateMachineActor.shared;
  v1[25] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](AnsweringMachineComposer.composeStateMachine(), v4, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  void (*v6)(void);
  void *v7;
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  uint64_t v4 = __swift_project_value_buffer(v2, (uint64_t)logger);
  v0[26] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[27] = v5;
  v0[28] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  OUTLINED_FUNCTION_54_14();
  Logger.traceFunctionStart(file:function:line:)();
  v0[29] = *(void *)(v3 + 8);
  v0[30] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  OUTLINED_FUNCTION_15_5();
  v6();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[31] = v7;
  *uint64_t v7 = v0;
  v7[1] = AnsweringMachineComposer.composeStateMachine();
  return AnsweringMachineComposer.composeStateTransitioner()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_46_20();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

void AnsweringMachineComposer.composeStateMachine()()
{
  OUTLINED_FUNCTION_55();
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = swift_allocObject();
  memcpy((void *)(v5 + 16), (const void *)(v0 + 16), 0x58uLL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachineContainer<CallScreening.State>);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  *(void *)(v0 + 104) = v6;
  *(void *)(v0 + 112) = TPNumberPadCharacter.rawValue.getter;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(void *)(v0 + 152) = 0;
  v1(v3, v2, v4);
  uint64_t v7 = OUTLINED_FUNCTION_26();
  *(void *)(v7 + 16) = partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeStateMachine();
  *(void *)(v7 + 24) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKStateMachine<CallScreening.State>);
  OUTLINED_FUNCTION_8_9();
  swift_retain();
  specialized CKStateMachine.init(initialState:logger:stateTransitioner:)((long long *)(v0 + 104), v3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State, @guaranteed CallScreening.StateTransition) -> (@owned CallScreening.State, @error @owned Error), v7);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 216))(v9, *(void *)(v0 + 208), v10);
  swift_retain();
  OUTLINED_FUNCTION_54_14();
  specialized Logger.traceFunction<A>(returning:file:function:line:)();
  swift_release();
  v8(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_26_43();
  OUTLINED_FUNCTION_40();
  __asm { BRAA            X2, X16 }
}

uint64_t implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.compose()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return ViewModelCallStatusUpdateService.updateViewModel(with:)(a1, a2);
}

void closure #2 in AnsweringMachineComposer.compose()(uint64_t a1)
{
  if ((*(uint64_t (**)(void))(a1 + 48))())
  {
    uint64_t v1 = self;
    id v2 = objc_msgSend(v1, sel_sharedInstance);
    id v3 = objc_msgSend(v2, sel_callServicesClientCapabilities);

    objc_msgSend(v3, sel_setWantsToScreenCalls_, 1);
    id v4 = objc_msgSend(v1, sel_sharedInstance);
    id v5 = objc_msgSend(v4, sel_callServicesClientCapabilities);

    objc_msgSend(v5, sel_save);
  }
}

uint64_t implicit closure #3 in implicit closure #2 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = (*(void *(**)(uint64_t *__return_ptr))a3)(&v13);
  if ((v14 & 1) == 0) {
    return v13;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  specialized Collection.randomElement<A>(using:)((uint64_t)v4, *(void *)(a3 + 32), *(void *)(a3 + 40));
  if (v8) {
    uint64_t v7 = 0;
  }
  uint64_t v9 = specialized static Duration.seconds<A>(_:)(v7);
  uint64_t v11 = MEMORY[0x1C8774B90](v5, v6, v9, v10);
  if (static Duration.< infix(_:_:)()) {
    return 1000000000000000000;
  }
  else {
    return v11;
  }
}

void *AnsweringMachineComposer.composeCondition(timeToWaitForCall:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TelephonyUtilitiesServices();
  MEMORY[0x1F4188790](v4 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v8, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  swift_retain();
  AnsweringMachineComposer.callServices.getter(v7);
  outlined init with take of AnsweringMachineStatusService();
  uint64_t v14 = swift_allocObject();
  outlined init with take of AnsweringMachineStatusService();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnsweringConditionTimer<String>);
  swift_allocObject();
  specialized AnsweringConditionTimer.init(logger:timeToWaitForCall:callIsScreenable:)((uint64_t)v11, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Duration), v13, (uint64_t)partial apply for closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:), v14);
  return &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@unowned Bool, @error @owned Error)(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@unowned Bool, @error @owned Error);
  return v7(v3, v4);
}

uint64_t implicit closure #5 in implicit closure #4 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a4[3];
  uint64_t v8 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, a3, v7, v8);
}

uint64_t implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeStateMachine()@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result = CallScreening.StateTransitioner.transition(state:transition:)(a1, a2, a3, a4, v8);
  if (!v5) {
    return outlined init with take of CallScreening.State(v8, a5);
  }
  return result;
}

uint64_t AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_17_2();
  v1[16] = v2;
  v1[17] = v0;
  uint64_t v3 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1(v3);
  v1[18] = v4;
  v1[19] = *(void *)(v5 + 64);
  v1[20] = OUTLINED_FUNCTION_28_2();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v1[23] = v6;
  OUTLINED_FUNCTION_1(v6);
  v1[24] = v7;
  v1[25] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static CKStateMachineActor.shared;
  v1[26] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](AnsweringMachineComposer.composeStateTransitioner(), v8, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_28_0();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[17];
  uint64_t v5 = __swift_project_value_buffer(v3, (uint64_t)logger);
  v0[27] = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[28] = v6;
  v0[29] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v3);
  OUTLINED_FUNCTION_55_15();
  Logger.traceFunctionStart(file:function:line:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[30] = v7;
  v0[31] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v1, v3);
  uint64_t v8 = v4 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer_config;
  v0[32] = *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer_config);
  v0[33] = *(void *)(v8 + 8);
  v0[34] = *(void *)(v8 + 16);
  v0[35] = type metadata accessor for MainActor();
  v0[36] = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  if (one-time initialization token for viewModel != -1) {
    swift_once();
  }
  *(void *)(v0 + 296) = static CallScreeningViewModelComposer.viewModel;
  swift_retain();
  OUTLINED_FUNCTION_46_20();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 304) = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(char **)(v0 + 176);
  swift_release();
  AnsweringMachineComposer.callServices.getter(v1);
  OUTLINED_FUNCTION_37_2();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = *(void *)(v0 + 144);
  outlined init with copy of AnsweringMachineStatusService();
  outlined init with copy of AnsweringMachineStatusService();
  *(_DWORD *)(v0 + 376) = *(_DWORD *)(v1 + 80);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 312) = v2;
  outlined init with take of AnsweringMachineStatusService();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v3;
  *uint64_t v3 = v0;
  v3[1] = AnsweringMachineComposer.composeStateTransitioner();
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 136);
  return specialized AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(v4, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeStateTransitioner(), v2, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v3 + 168);
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *(void *)(v8 + 328) = v7;
  swift_task_dealloc();
  swift_release();
  outlined destroy of AnsweringMachineStatusService(v4, (void (*)(void))type metadata accessor for TelephonyUtilitiesServices);
  OUTLINED_FUNCTION_37_2();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v13 = *(void *)(v0 + 296);
  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t, void, void))(v0 + 224))(v3, *(void *)(v0 + 216), *(void *)(v0 + 184));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnsweringMachineTrackingServiceAdapter<CallScreeningTrackingState<CKStateMachine<CallScreening.State>>>);
  OUTLINED_FUNCTION_8_9();
  uint64_t v5 = specialized AnsweringMachineTrackingServiceAdapter.init(logger:answeringMachine:)(v3, v1);
  *(void *)(v0 + 336) = v5;
  uint64_t v6 = (uint64_t *)(v5 + direct field offset for AnsweringMachineTrackingServiceAdapter.onResult);
  swift_beginAccess();
  uint64_t v7 = *v6;
  *uint64_t v6 = (uint64_t)&async function pointer to specialized thunk for @escaping @callee_guaranteed @async (@guaranteed CallScreeningTrackingState<CKStateMachine<CallScreening.State>>, @unowned CallScreeningTrackingStateResult) -> ();
  v6[1] = 0;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v7);
  outlined init with copy of AnsweringMachineStatusService();
  *(void *)(v0 + 344) = swift_allocObject();
  outlined init with take of AnsweringMachineStatusService();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v8;
  v8[2] = v4;
  long long v8[3] = v13;
  v8[4] = v11;
  v8[5] = v12;
  v8[6] = v2;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static MainActor.run<A>(resultType:body:)
                                                 + async function pointer to specialized static MainActor.run<A>(resultType:body:));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v9;
  *uint64_t v9 = v0;
  v9[1] = AnsweringMachineComposer.composeStateTransitioner();
  return v14((uint64_t)partial apply for closure #3 in AnsweringMachineComposer.composeStateTransitioner(), (uint64_t)v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  *(void *)(v6 + 368) = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_37_2();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v18 = v0[46];
  uint64_t v14 = v0[42];
  uint64_t v15 = v0[43];
  uint64_t v1 = v0[37];
  uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[30];
  uint64_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v0[28];
  uint64_t v19 = v0[27];
  uint64_t v16 = v0[25];
  uint64_t v17 = v0[23];
  uint64_t v2 = (void *)v0[16];
  uint64_t v21 = v0[22];
  outlined init with copy of AnsweringMachineStatusService();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  outlined init with take of AnsweringMachineStatusService();
  outlined init with copy of AnsweringMachineStatusService();
  uint64_t v4 = swift_allocObject();
  outlined init with take of AnsweringMachineStatusService();
  uint64_t v5 = OUTLINED_FUNCTION_26();
  *(void *)(v5 + 16) = partial apply for implicit closure #4 in implicit closure #3 in AnsweringMachineComposer.composeStateTransitioner();
  *(void *)(v5 + 24) = v4;
  v0[2] = v14;
  v0[3] = &async function pointer to partial apply for closure #2 in AnsweringMachineComposer.composeStateTransitioner();
  v0[4] = v15;
  v0[5] = partial apply for closure #6 in AnsweringMachineComposer.composeStateTransitioner();
  v0[6] = v3;
  v0[7] = partial apply for closure #4 in AnsweringMachineComposer.composeStateTransitioner();
  v0[8] = v18;
  v0[9] = partial apply for closure #5 in AnsweringMachineComposer.composeStateTransitioner();
  v0[10] = v18;
  v0[11] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> () with global actor constraint MainActor;
  v0[12] = v5;
  v20(v16, v19, v17);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain();
  OUTLINED_FUNCTION_55_15();
  specialized Logger.traceFunction<A>(returning:file:function:line:)(v6, v7, v8, v9, v10, v11, 252, v16, v0 + 2);
  swift_release();
  v22(v16, v17);
  outlined destroy of AnsweringMachineStatusService(v21, (void (*)(void))type metadata accessor for TelephonyUtilitiesServices);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *uint64_t v2 = v14;
  v2[1] = &async function pointer to partial apply for closure #2 in AnsweringMachineComposer.composeStateTransitioner();
  v2[2] = v15;
  v2[3] = partial apply for closure #6 in AnsweringMachineComposer.composeStateTransitioner();
  v2[4] = v3;
  v2[5] = partial apply for closure #4 in AnsweringMachineComposer.composeStateTransitioner();
  v2[6] = v18;
  v2[7] = partial apply for closure #5 in AnsweringMachineComposer.composeStateTransitioner();
  v2[8] = v18;
  v2[9] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> () with global actor constraint MainActor;
  v2[10] = v5;
  OUTLINED_FUNCTION_6();
  return v12();
}

void *thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State, @guaranteed CallScreening.StateTransition) -> (@owned CallScreening.State, @error @owned Error)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, void *(*a3)(long long *__return_ptr, unsigned char *, void, void, void)@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v10);
  uint64_t result = a3(v9, v10, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
  if (!v4) {
    return (void *)outlined init with take of CallScreening.State(v9, a4);
  }
  return result;
}

uint64_t closure #1 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 233) = a2;
  *(void *)(v2 + 136) = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = static CKStateMachineActor.shared;
  *(void *)(v2 + 144) = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineComposer.composeStateTransitioner(), v3, 0);
}

uint64_t closure #1 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = *(void *)(v0 + 136);
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v1 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + 40) + 104);
  swift_retain();
  outlined retain of String(v0 + 96);
  swift_retain();
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  *(void *)(v0 + 152) = v4;
  swift_release();
  outlined release of String(v0 + 96);
  swift_release();
  swift_release();
  if (v4)
  {
    uint64_t v5 = (long long *)(v4 + *(void *)(*(void *)v4 + 104));
    swift_beginAccess();
    outlined init with take of CallScreening.State(v5, v0 + 16);
    uint64_t v6 = CallScreening.State.stateTransition.getter();
    uint64_t v9 = v6;
    uint64_t v10 = v7;
    unsigned __int8 v11 = v8;
    *(void *)(v0 + 160) = v6;
    *(void *)(v0 + 168) = v7;
    *(unsigned char *)(v0 + 234) = v8;
    if (v8 > 0x1Fu)
    {
      outlined consume of CallScreening.StateTransition(v6, v7, v8);
      swift_release();
    }
    else
    {
      BOOL v12 = v6 == *(void *)(v0 + 96) && v7 == *(void *)(v0 + 104);
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        char v13 = *(unsigned char *)(v0 + 233);
        uint64_t v14 = OUTLINED_FUNCTION_26();
        *(void *)(v0 + 176) = v14;
        *(void *)(v14 + 16) = v9;
        *(void *)(v14 + 24) = v10;
        if (v13)
        {
          uint64_t v23 = OUTLINED_FUNCTION_26();
          *(void *)(v0 + 184) = v23;
          *(void *)(v23 + 16) = partial apply for closure #1 in closure #1 in AnsweringMachineComposer.composeStateTransitioner();
          *(void *)(v23 + 24) = v14;
          uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(long long *), uint64_t))((char *)&async function pointer to specialized CKStateMachine.transition(with:reason:validation:) + async function pointer to specialized CKStateMachine.transition(with:reason:validation:));
          swift_retain();
          uint64_t v24 = (void *)swift_task_alloc();
          *(void *)(v0 + 192) = v24;
          *uint64_t v24 = v0;
          v24[1] = closure #1 in AnsweringMachineComposer.composeStateTransitioner();
          unint64_t v18 = 0x80000001C37B17A0;
          uint64_t v19 = 1;
          uint64_t v20 = 0;
          uint64_t v21 = 128;
          unint64_t v17 = 0xD000000000000027;
          uint64_t v22 = v23;
        }
        else
        {
          uint64_t v15 = OUTLINED_FUNCTION_26();
          *(void *)(v0 + 208) = v15;
          *(void *)(v15 + 16) = partial apply for closure #1 in closure #1 in AnsweringMachineComposer.composeStateTransitioner();
          *(void *)(v15 + 24) = v14;
          swift_retain();
          outlined copy of CallScreening.StateTransition(v9, v10, v11);
          uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(long long *), uint64_t))((char *)&async function pointer to specialized CKStateMachine.transition(with:reason:validation:) + async function pointer to specialized CKStateMachine.transition(with:reason:validation:));
          uint64_t v16 = (void *)swift_task_alloc();
          *(void *)(v0 + 216) = v16;
          *uint64_t v16 = v0;
          v16[1] = closure #1 in AnsweringMachineComposer.composeStateTransitioner();
          unint64_t v17 = 0xD000000000000033;
          unint64_t v18 = 0x80000001C37B1710;
          uint64_t v19 = v9;
          uint64_t v20 = v10;
          uint64_t v21 = 32;
          uint64_t v22 = v15;
        }
        return v27(v19, v20, v21, v17, v18, thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State) -> (@error @owned Error)partial apply, v22);
      }
      swift_release();
      outlined consume of CallScreening.StateTransition(v9, v10, v11);
    }
  }
  OUTLINED_FUNCTION_6();
  return v26();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_99_0();
  uint64_t v5 = *(void *)(v4 + 144);
  if (v0) {
    uint64_t v6 = (uint64_t (*)())closure #1 in AnsweringMachineComposer.composeStateTransitioner();
  }
  else {
    uint64_t v6 = closure #1 in AnsweringMachineComposer.composeStateTransitioner();
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v1 + 168);
  uint64_t v6 = *(void *)(v1 + 160);
  uint64_t v7 = *v2;
  unsigned __int8 v8 = *(unsigned char *)(v3 + 234);
  OUTLINED_FUNCTION_13_1();
  *uint64_t v9 = v7;
  *(void *)(v10 + 224) = v0;
  swift_task_dealloc();
  swift_release();
  outlined consume of CallScreening.StateTransition(v6, v5, v8);
  OUTLINED_FUNCTION_99_0();
  OUTLINED_FUNCTION_85_4();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

#error "1C34DF1F0: call analysis failed (funcsize=99)"

#error "1C34DF390: call analysis failed (funcsize=99)"

void closure #1 in closure #1 in AnsweringMachineComposer.composeStateTransitioner()(long long *a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v8);
  if (v11 >> 61 == 2)
  {
    v11 &= 0x1FFFFFFFFFFFFFFFuLL;
    if (v9 == a2 && v10 == a3) {
      char v5 = 1;
    }
    else {
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v5 = 0;
    v11 &= 0x1FFFFFFFFFFFFFFFuLL;
  }
  lazy protocol witness table accessor for type CKStateMachineError and conformance CKStateMachineError();
  uint64_t v6 = (void *)swift_allocError();
  if (v5) {

  }
  else {
    swift_willThrow();
  }
}

uint64_t specialized thunk for @escaping @callee_guaranteed @async (@guaranteed CallScreeningTrackingState<CKStateMachine<CallScreening.State>>, @unowned CallScreeningTrackingStateResult) -> ()(_OWORD *a1, char a2)
{
  char v3 = a2 & 1;
  long long v4 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 48) = a1[2];
  char v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for UpdatesWithCallStatus.update(with:) in conformance CallScreeningEndingState<A>;
  return closure #1 in AnsweringMachineComposer.composeStateTransitioner()(v2 + 16, v3);
}

uint64_t closure #2 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #2 in AnsweringMachineComposer.composeStateTransitioner(), v4, v3);
}

uint64_t closure #2 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v1 = *(Swift::String **)(v0 + 16);
  swift_release();
  Swift::Bool v2 = TelephonyUtilitiesServices.isScreenable(callUUID:manualScreening:)(v1[1], 0);
  uint64_t v3 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v4 = v2;
  return v3(v4);
}

uint64_t closure #3 in AnsweringMachineComposer.composeStateTransitioner()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v4 = type metadata accessor for TelephonyUtilitiesServices();
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x1F4188790](v4 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned __int8 v8 = (char *)&v18 - v7;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  BOOL v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v9, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  outlined init with copy of AnsweringMachineStatusService();
  outlined init with copy of AnsweringMachineStatusService();
  uint64_t v14 = swift_allocObject();
  outlined init with take of AnsweringMachineStatusService();
  type metadata accessor for ScreeningService();
  uint64_t v15 = swift_allocObject();
  outlined init with copy of AnsweringMachineStatusService();
  swift_retain();
  uint64_t v16 = specialized ScreeningService.init(logger:callServices:viewModel:getStreamToken:maxSecondsForScreening:)((uint64_t)v12, (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in closure #3 in AnsweringMachineComposer.composeStateTransitioner(), v14, v18, v15);
  uint64_t result = outlined destroy of AnsweringMachineStatusService((uint64_t)v8, (void (*)(void))type metadata accessor for TelephonyUtilitiesServices);
  *uint64_t v19 = v16;
  return result;
}

uint64_t closure #4 in AnsweringMachineComposer.composeStateTransitioner()(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v11 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
  type metadata accessor for MainActor();
  long long v17 = *a1;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of String((uint64_t)&v17);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = swift_allocObject();
  long long v14 = a1[1];
  *(_OWORD *)(v13 + 56) = *a1;
  uint64_t v15 = MEMORY[0x1E4FBCFD8];
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v15;
  *(void *)(v13 + 32) = a4;
  *(void *)(v13 + 40) = a2;
  *(void *)(v13 + 48) = a3;
  *(_OWORD *)(v13 + 72) = v14;
  *(_OWORD *)(v13 + 88) = a1[2];
  *(void *)(v13 + 104) = *((void *)a1 + 6);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

uint64_t closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  type metadata accessor for MainActor();
  v7[8] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner(), v9, v8);
}

uint64_t closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_86_0();
  uint64_t v1 = *(long long **)(v0 + 56);
  swift_release();
  uint64_t v2 = swift_allocObject();
  long long v4 = v1[1];
  long long v3 = v1[2];
  long long v5 = *v1;
  *(void *)(v2 + 64) = *((void *)v1 + 6);
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 48) = v3;
  *(_OWORD *)(v2 + 16) = v5;
  *(_OWORD *)(v0 + 16) = *v1;
  outlined retain of String(v0 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v6 = OUTLINED_FUNCTION_30_15();
  ScreeningService.startScreening(callUUID:endCall:)(v6, v7, v8, v2);
  swift_release();
  OUTLINED_FUNCTION_6();
  return v9();
}

uint64_t closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static CKStateMachineActor.shared;
  v4[15] = static CKStateMachineActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner(), v6, 0);
}

uint64_t closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_118_0();
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = OUTLINED_FUNCTION_26();
  *(void *)(v0 + 128) = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + 48) + 104);
  swift_bridgeObjectRetain();
  outlined retain of String(v0 + 16);
  swift_retain();
  swift_retain();
  uint64_t v6 = swift_retain();
  uint64_t v7 = v5(v6);
  *(void *)(v0 + 136) = v7;
  outlined release of String(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  if (v7)
  {
    uint64_t v8 = *(void *)(v0 + 80);
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    if (v8)
    {
      uint64_t v9 = *(void **)(v0 + 80);
      *(void *)(v0 + 32) = 0;
      *(void *)(v0 + 40) = 0xE000000000000000;
      id v10 = v9;
      v11._countAndFlagsBits = 0x28726F727245;
      v11._object = (void *)0xE600000000000000;
      String.append(_:)(v11);
      *(void *)(v0 + 48) = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();

      uint64_t v12 = *(void *)(v0 + 32);
      unint64_t v13 = *(void *)(v0 + 40);
    }
    else
    {
      unint64_t v13 = 0xE700000000000000;
      uint64_t v12 = 0x74756F656D6954;
    }
    unint64_t v16 = v13;
    String.append(_:)(*(Swift::String *)&v12);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 144) = 0x80000001C37B16F0;
    uint64_t v17 = OUTLINED_FUNCTION_26();
    *(void *)(v0 + 152) = v17;
    *(void *)(v17 + 16) = partial apply for closure #1 in closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner();
    *(void *)(v17 + 24) = v4;
    uint64_t v19 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CKStateMachine.transition(with:reason:validation:)
                                + async function pointer to specialized CKStateMachine.transition(with:reason:validation:));
    swift_retain();
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v18;
    *uint64_t v18 = v0;
    v18[1] = closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner();
    return v19();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6();
    return v14();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  OUTLINED_FUNCTION_0_66();
  OUTLINED_FUNCTION_13_1();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 168) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_99_0();
  OUTLINED_FUNCTION_85_4();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  uint8_t *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;

  OUTLINED_FUNCTION_55();
  swift_release();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[21];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)logger);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = v1;
  uint64_t v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  id v10 = os_log_type_enabled(v8, v9);
  Swift::String v11 = (void *)v0[21];
  if (v10)
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_37();
    unint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    long long v14 = v11;
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v13 = v15;

    _os_log_impl(&dword_1C2F90000, v8, v9, "onEnterScreeningState: tranisitoning to ending state failed with error: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v16();
}

void closure #1 in closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()(long long *a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of CallScreening.State(a1, (uint64_t)v8);
  if (v9 >> 61 == 4)
  {
    v9 &= 0x1FFFFFFFFFFFFFFFuLL;
    if (v8[0] == a2 && v8[1] == a3) {
      char v5 = 1;
    }
    else {
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v5 = 0;
    v9 &= 0x1FFFFFFFFFFFFFFFuLL;
  }
  lazy protocol witness table accessor for type CKStateMachineError and conformance CKStateMachineError();
  uint64_t v6 = (void *)swift_allocError();
  if (v5) {

  }
  else {
    swift_willThrow();
  }
}

uint64_t closure #5 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v9 = static MainActor.shared.getter();
  id v10 = (void *)swift_allocObject();
  uint64_t v11 = MEMORY[0x1E4FBCFD8];
  v10[2] = v9;
  v10[3] = v11;
  v10[4] = a4;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

uint64_t closure #1 in closure #5 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #5 in AnsweringMachineComposer.composeStateTransitioner(), v6, v5);
}

uint64_t closure #1 in closure #5 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_17_2();
  swift_release();
  ScreeningService.stopScreening()();
  OUTLINED_FUNCTION_6();
  return v0();
}

uint64_t closure #6 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for TelephonyUtilitiesServices();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v13 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v13);
  outlined init with copy of AnsweringMachineStatusService();
  type metadata accessor for MainActor();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v14 = static MainActor.shared.getter();
  unint64_t v15 = (v9 + ((*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = MEMORY[0x1E4FBCFD8];
  v16[2] = v14;
  v16[3] = v17;
  v16[4] = a4;
  outlined init with take of AnsweringMachineStatusService();
  uint64_t v18 = (void *)((char *)v16 + v15);
  *uint64_t v18 = a2;
  v18[1] = a3;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  return swift_release();
}

uint64_t closure #1 in closure #6 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  type metadata accessor for MainActor();
  v7[12] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #6 in AnsweringMachineComposer.composeStateTransitioner(), v9, v8);
}

uint64_t closure #1 in closure #6 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  uint64_t v11 = v10[8];
  swift_release();
  v10[6] = type metadata accessor for TelephonyUtilitiesServices();
  v10[7] = &protocol witness table for TelephonyUtilitiesServices;
  __swift_allocate_boxed_opaque_existential_1(v10 + 3);
  outlined init with copy of AnsweringMachineStatusService();
  v10[2] = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  TranscriptionViewModel.callUUID.setter();
  uint64_t v12 = v10[7];
  __swift_project_boxed_opaque_existential_1(v10 + 3, v10[6]);
  uint64_t v13 = TranscriptionViewModel.callUUID.getter();
  (*(void (**)(uint64_t))(v12 + 64))(v13);
  swift_bridgeObjectRelease();
  TranscriptionViewModel.callerDisplayName.setter();
  TranscriptionViewModel.state.setter();
  outlined destroy of CallScreening.EnteringAnsweringStateService((uint64_t)(v10 + 2));
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_85_4();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String) -> () with global actor constraint MainActor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](thunk for @escaping @callee_guaranteed (@guaranteed String) -> () with global actor constraint MainActor, v6, v5);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String) -> () with global actor constraint MainActor()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 32);
  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_30_15();
  v1(v2);
  OUTLINED_FUNCTION_6();
  return v3();
}

uint64_t implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:)
                                                + async function pointer to specialized AnsweringConditionTimer.shouldAnswer@Sendable (_:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:);
  return v7(a1, a2);
}

uint64_t implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:)()
{
  OUTLINED_FUNCTION_17_2();
  char v3 = v2;
  OUTLINED_FUNCTION_0_5();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  void *v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_21();
  if (v0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v3 & 1;
  }
  return v6(v7);
}

BOOL closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:)(Swift::String *a1)
{
  return TelephonyUtilitiesServices.isScreenable(callUUID:manualScreening:)(*a1, 0);
}

uint64_t AnsweringMachineComposer.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of TelephonyUtilitiesServices?(v0 + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer____lazy_storage___callServices);
  return v0;
}

uint64_t AnsweringMachineComposer.__deallocating_deinit()
{
  AnsweringMachineComposer.deinit();
  return swift_deallocClassInstance();
}

void *specialized AnsweringMachineService.init(shouldAutoScreenCall:requestToScreen:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAC8]), sel_init, (unsigned __int128)0, (unsigned __int128)0, 0);
  type metadata accessor for DeviceRingerStateObserver();
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = 0;
  *(unsigned char *)(v12 + 20) = 0;
  type metadata accessor for ScreeningSoundAndHapticsManager();
  uint64_t v13 = swift_allocObject();
  v5[6] = specialized ScreeningSoundAndHapticsManager.init(with:ringerStateObserver:feedbackGenerator:)((uint64_t)v11, v12, (uint64_t)&v18, v13);
  uint64_t v14 = (void *)((char *)v5 + *(void *)(*v5 + 144));
  v14[1] = 0;
  v14[2] = 0;
  *uint64_t v14 = 0;
  _OWORD v5[2] = a1;
  v5[3] = a2;
  void v5[4] = a3;
  v5[5] = a4;
  unint64_t v15 = (char *)v5 + direct field offset for AnsweringMachineService.logger;
  uint64_t v16 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a5, v16);
  return v5;
}

unint64_t lazy protocol witness table accessor for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error;
  if (!lazy protocol witness table cache variable for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error;
  if (!lazy protocol witness table cache variable for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnsweringMachineComposer.Error and conformance AnsweringMachineComposer.Error);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.compose()()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v3 = OUTLINED_FUNCTION_35();
  return implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.compose()(v3, v4);
}

uint64_t outlined init with copy of AnsweringMachineStatusService()
{
  uint64_t v2 = OUTLINED_FUNCTION_51_16();
  v3(v2);
  OUTLINED_FUNCTION_1_9();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v1);
  return v0;
}

uint64_t specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:);
  return specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)(a2, a3, a4);
}

uint64_t specialized AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[13] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[5] = type metadata accessor for TelephonyUtilitiesServices();
  v4[6] = (uint64_t)&protocol witness table for TelephonyUtilitiesServices;
  __swift_allocate_boxed_opaque_existential_1(v4 + 2);
  outlined init with copy of AnsweringMachineStatusService();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static CallScreeningActor.shared;
  v4[20] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](specialized AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:), v6, 0);
}

uint64_t specialized AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)()
{
  uint64_t v31 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[15];
  v0[21] = __swift_project_value_buffer(v3, (uint64_t)logger);
  uint64_t v5 = *(void (**)(void))(v2 + 16);
  v0[22] = v5;
  v0[23] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  OUTLINED_FUNCTION_61_10();
  v5();
  OUTLINED_FUNCTION_53_14();
  Logger.traceFunctionStart(file:function:line:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[24] = v6;
  v0[25] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v28 = v6;
  v6(v1, v3);
  uint64_t v7 = specialized static Duration.seconds<A>(_:)(*(void *)(v4
                                                            + OBJC_IVAR____TtC15ConversationKit24AnsweringMachineComposer_config));
  uint64_t v29 = v8;
  OUTLINED_FUNCTION_61_10();
  v5();
  swift_retain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = OUTLINED_FUNCTION_12_4(v10);
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[16];
  if (v11)
  {
    uint64_t v27 = v0[18];
    uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v30 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v15 = Duration.description.getter();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v9, (os_log_type_t)v3, "Creating an Answering Machine with default seconds before answering %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    uint64_t v17 = v27;
    uint64_t v18 = v13;
  }
  else
  {

    uint64_t v17 = v12;
    uint64_t v18 = v13;
  }
  v28(v17, v18);
  uint64_t v19 = v0[13];
  uint64_t v20 = v0[14];
  uint64_t v21 = swift_allocObject();
  v0[26] = v21;
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  *(void *)(v21 + 32) = v7;
  *(void *)(v21 + 40) = v29;
  *(_OWORD *)(v21 + 48) = xmmword_1C3784F60;
  type metadata accessor for MainActor();
  swift_retain();
  v0[27] = static MainActor.shared.getter();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_7_6();
  return MEMORY[0x1F4188298](v22, v23, v24);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_28_0();
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[20];
  swift_release();
  uint64_t v3 = AnsweringMachineComposer.composeCondition(timeToWaitForCall:)((uint64_t)partial apply for implicit closure #3 in implicit closure #2 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:), v1);
  uint64_t v5 = v4;
  swift_release();
  v0[28] = v3;
  v0[29] = v5;
  return MEMORY[0x1F4188298](specialized AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:), v2, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = OUTLINED_FUNCTION_26();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 224);
  outlined init with copy of IDSLookupManager(v0 + 16, v0 + 56);
  uint64_t v6 = swift_allocObject();
  outlined init with take of Notice((long long *)(v0 + 56), v6 + 16);
  uint64_t v7 = OUTLINED_FUNCTION_26();
  *(void *)(v7 + 16) = partial apply for implicit closure #5 in implicit closure #4 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:);
  *(void *)(v7 + 24) = v6;
  v1(v3, v2, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnsweringMachineService<String>);
  OUTLINED_FUNCTION_8_9();
  specialized AnsweringMachineService.init(shouldAutoScreenCall:requestToScreen:logger:)((uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@unowned Bool, @error @owned Error), v5, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned Bool) -> (@error @owned Error), v7, v3);
  v1(v3, v2, v4);
  swift_retain();
  OUTLINED_FUNCTION_53_14();
  specialized Logger.traceFunction<A>(returning:file:function:line:)(v8);
  swift_release();
  v12(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = OUTLINED_FUNCTION_26_43();
  return v10(v9);
}

uint64_t *specialized CallScreening.MainAnsweringMachine.init(logger:stateMachine:statusService:callServices:onCallStatusUpdate:isAnsweringMachineAvailable:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v41 = a7;
  uint64_t v42 = a6;
  uint64_t v40 = a5;
  uint64_t v43 = a3;
  uint64_t v44 = a1;
  uint64_t v36 = *a9;
  uint64_t v37 = type metadata accessor for CallScreening.MachineStateObserver(0) - 8;
  MEMORY[0x1F4188790](v37);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CallScreening.CallStateObserver();
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  unint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[3] = type metadata accessor for TelephonyUtilitiesServices();
  v47[4] = (uint64_t)&protocol witness table for TelephonyUtilitiesServices;
  __swift_allocate_boxed_opaque_existential_1(v47);
  outlined init with take of AnsweringMachineStatusService();
  uint64_t v17 = (char *)a9 + OBJC_IVAR____TtCO15ConversationKit13CallScreening20MainAnsweringMachine_logger;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v18 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  uint64_t v20 = v17;
  uint64_t v21 = v44;
  v19(v20, v44, v18);
  *(uint64_t *)((char *)a9 + OBJC_IVAR____TtCO15ConversationKit13CallScreening20MainAnsweringMachine_stateMachine) = a2;
  outlined init with copy of IDSLookupManager((uint64_t)v47, (uint64_t)a9 + OBJC_IVAR____TtCO15ConversationKit13CallScreening20MainAnsweringMachine_callServices);
  uint64_t v22 = (uint64_t *)((char *)a9
                  + OBJC_IVAR____TtCO15ConversationKit13CallScreening20MainAnsweringMachine_isAnsweringMachineAvailable);
  *uint64_t v22 = v41;
  v22[1] = a8;
  v19(v16, v21, v18);
  *(void *)&v16[*(int *)(v14 + 28)] = a2;
  uint64_t v23 = *(int *)(v14 + 32);
  uint64_t v24 = v43;
  *(void *)&v16[v23] = v43;
  swift_retain_n();
  uint64_t v41 = a8;
  swift_retain();
  swift_retain();
  uint64_t v25 = CallScreening.CallStateObserver.start(onCallStatusUpdate:)(v40, v42);
  outlined destroy of AnsweringMachineStatusService((uint64_t)v16, (void (*)(void))type metadata accessor for CallScreening.CallStateObserver);
  uint64_t v39 = v18;
  v19(v12, v21, v18);
  uint64_t v26 = v37;
  *(void *)&v12[*(int *)(v37 + 28)] = a2;
  *(void *)&v12[*(int *)(v26 + 32)] = v24;
  uint64_t v40 = a2;
  swift_retain();
  swift_retain();
  uint64_t v27 = CallScreening.MachineStateObserver.start()();
  outlined destroy of AnsweringMachineStatusService((uint64_t)v12, (void (*)(void))type metadata accessor for CallScreening.MachineStateObserver);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C37696D0;
  *(void *)(v28 + 32) = v25;
  *(void *)(v28 + 40) = v27;
  *(uint64_t *)((char *)a9 + OBJC_IVAR____TtCO15ConversationKit13CallScreening20MainAnsweringMachine_observers) = v28;
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v45 = (uint64_t)a9;
    uint64_t v46 = v32;
    *(_DWORD *)uint64_t v31 = 136446210;
    swift_retain();
    uint64_t v33 = String.init<A>(reflecting:)();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v29, v30, "Created MainAnsweringMachine %{public}s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v32, -1, -1);
    MEMORY[0x1C87760E0](v31, -1, -1);
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release_n();
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v44, v39);
  return a9;
}

uint64_t outlined destroy of TelephonyUtilitiesServices?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TelephonyUtilitiesServices?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AnsweringMachineSyncComposer()
{
  return self;
}

uint64_t method lookup function for AnsweringMachineSyncComposer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnsweringMachineSyncComposer);
}

uint64_t dispatch thunk of AnsweringMachineSyncComposer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AnsweringMachineSyncComposer.compose(isInSupportedEnvirement:timeToWaitForCall:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t ObjC metadata update function for AnsweringMachineComposer()
{
  return type metadata accessor for AnsweringMachineComposer();
}

uint64_t type metadata accessor for AnsweringMachineComposer()
{
  uint64_t result = type metadata singleton initialization cache for AnsweringMachineComposer;
  if (!type metadata singleton initialization cache for AnsweringMachineComposer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AnsweringMachineComposer()
{
  type metadata accessor for TelephonyUtilitiesServices?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for AnsweringMachineComposer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnsweringMachineComposer);
}

uint64_t dispatch thunk of AnsweringMachineComposer.__allocating_init(config:isEnabled:isEnabledM3:isAnsweringMachineAvailable:timeToWaitForCall:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

void type metadata accessor for TelephonyUtilitiesServices?()
{
  if (!lazy cache variable for type metadata for TelephonyUtilitiesServices?)
  {
    type metadata accessor for TelephonyUtilitiesServices();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TelephonyUtilitiesServices?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AnsweringMachineComposer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C34E2228);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AnsweringMachineComposer.Error()
{
}

void type metadata accessor for AnsweringMachineComposer.Config()
{
}

_UNKNOWN **sub_1C34E2268()
{
  return &protocol witness table for CallScreening.MainAnsweringMachine;
}

uint64_t outlined init with take of AnsweringMachineStatusService()
{
  uint64_t v2 = OUTLINED_FUNCTION_51_16();
  v3(v2);
  OUTLINED_FUNCTION_1_9();
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v0, v1);
  return v0;
}

uint64_t outlined destroy of AnsweringMachineStatusService(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with copy of TelephonyUtilitiesServices?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TelephonyUtilitiesServices?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of TelephonyUtilitiesServices?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TelephonyUtilitiesServices?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C34E23E8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeStateMachine()@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  return implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeStateMachine()(a1, a2, a3, a4, a5);
}

void *partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State, @guaranteed CallScreening.StateTransition) -> (@owned CallScreening.State, @error @owned Error)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State, @guaranteed CallScreening.StateTransition) -> (@owned CallScreening.State, @error @owned Error)(a1, a2, *(void *(**)(long long *__return_ptr, unsigned char *, void, void, void))(v3 + 16), a3);
}

void partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeStateTransitioner()()
{
  uint64_t v0 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_38_23();
  OUTLINED_FUNCTION_30_15();
  TelephonyUtilitiesServices.timeToWaitForCall(callUUID:)();
}

uint64_t partial apply for closure #2 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_17_2();
  uint64_t v0 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_38_23();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  *uint64_t v2 = v3;
  v2[1] = partial apply for closure #2 in AnsweringMachineComposer.composeStateTransitioner();
  uint64_t v4 = OUTLINED_FUNCTION_35();
  return closure #2 in AnsweringMachineComposer.composeStateTransitioner()(v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_21();
  return v5(v2);
}

uint64_t partial apply for closure #3 in AnsweringMachineComposer.composeStateTransitioner()@<X0>(uint64_t *a1@<X8>)
{
  return closure #3 in AnsweringMachineComposer.composeStateTransitioner()(*(void *)(v1 + 24), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #4 in AnsweringMachineComposer.composeStateTransitioner()(long long *a1, uint64_t a2, uint64_t a3)
{
  return closure #4 in AnsweringMachineComposer.composeStateTransitioner()(a1, a2, a3, v3);
}

uint64_t partial apply for closure #5 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #5 in AnsweringMachineComposer.composeStateTransitioner()(a1, a2, a3, v3);
}

uint64_t sub_1C34E2674()
{
  type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_6();
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_release();

  OUTLINED_FUNCTION_48_17();
  OUTLINED_FUNCTION_12_0();
  uint64_t v3 = OUTLINED_FUNCTION_25_47();
  v4(v3);
  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_285();
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in AnsweringMachineComposer.composeStateTransitioner()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_1(v7);
  uint64_t v8 = *(void *)(v3 + 16);
  return closure #6 in AnsweringMachineComposer.composeStateTransitioner()(a1, a2, a3, v8);
}

void partial apply for implicit closure #4 in implicit closure #3 in AnsweringMachineComposer.composeStateTransitioner()()
{
  uint64_t v0 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_1(v0);
  v1._countAndFlagsBits = OUTLINED_FUNCTION_30_15();
  TelephonyUtilitiesServices.disconnectScreeningCall(callUUID:)(v1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> () with global actor constraint MainActor()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = swift_task_alloc();
  Swift::String v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *Swift::String v1 = v2;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  uint64_t v3 = OUTLINED_FUNCTION_30_15();
  return v4(v3);
}

uint64_t sub_1C34E28A8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TelephonyUtilitiesServices() - 8) + 80);
  uint64_t v2 = (v1 + 40) & ~v1;
  swift_unknownObjectRelease();
  swift_release();

  type metadata accessor for Logger();
  OUTLINED_FUNCTION_12_0();
  uint64_t v3 = OUTLINED_FUNCTION_25_47();
  v4(v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #6 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  uint64_t v0 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_98(v1);
  *uint64_t v2 = v3;
  v2[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_35_21();
  OUTLINED_FUNCTION_85_4();
  return closure #1 in closure #6 in AnsweringMachineComposer.composeStateTransitioner()(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t outlined destroy of CallScreening.EnteringAnsweringStateService(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C34E2B18()
{
  return objectdestroy_58Tm(MEMORY[0x1E4FBC8F8]);
}

uint64_t partial apply for closure #1 in closure #5 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_44_20();
  return closure #1 in closure #5 in AnsweringMachineComposer.composeStateTransitioner()(v3, v4, v5, v6);
}

uint64_t sub_1C34E2BD4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_86_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  OUTLINED_FUNCTION_35_21();
  OUTLINED_FUNCTION_85_4();
  return closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1C34E2CE8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_98(v7);
  *uint64_t v8 = v9;
  v8[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  return closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()(v6, v4, v2, v0 + 16);
}

uint64_t sub_1C34E2DE4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()(long long *a1)
{
  closure #1 in closure #1 in closure #1 in closure #4 in AnsweringMachineComposer.composeStateTransitioner()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int partial apply for implicit closure #2 in implicit closure #1 in closure #3 in AnsweringMachineComposer.composeStateTransitioner()()
{
  uint64_t v0 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_1(v0);
  v1._countAndFlagsBits = OUTLINED_FUNCTION_30_15();
  return TelephonyUtilitiesServices.getStreamToken(callUUID:)(v1);
}

uint64_t specialized ScreeningService.init(logger:callServices:viewModel:getStreamToken:maxSecondsForScreening:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = type metadata accessor for TelephonyUtilitiesServices();
  uint64_t v21 = &protocol witness table for TelephonyUtilitiesServices;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  outlined init with take of AnsweringMachineStatusService();
  uint64_t v13 = (void *)(a7 + OBJC_IVAR____TtC15ConversationKit16ScreeningService_provider);
  *uint64_t v13 = 0;
  v13[1] = 0;
  *(void *)(a7 + OBJC_IVAR____TtC15ConversationKit16ScreeningService_screeningCaptions) = 0;
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit16ScreeningService_timerService;
  type metadata accessor for TimerService();
  swift_allocObject();
  *(void *)(a7 + v14) = TimerService.init()();
  uint64_t v15 = a7 + OBJC_IVAR____TtC15ConversationKit16ScreeningService_logger;
  uint64_t v16 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a1, v16);
  outlined init with take of Notice(&v19, a7 + OBJC_IVAR____TtC15ConversationKit16ScreeningService_callServices);
  *(void *)(a7 + OBJC_IVAR____TtC15ConversationKit16ScreeningService_viewModel) = a3;
  uint64_t v17 = (void *)(a7 + OBJC_IVAR____TtC15ConversationKit16ScreeningService_getStreamToken);
  *uint64_t v17 = a4;
  v17[1] = a5;
  *(void *)(a7 + OBJC_IVAR____TtC15ConversationKit16ScreeningService_maxSecondsForScreening) = a6;
  return a7;
}

void partial apply for closure #1 in closure #1 in AnsweringMachineComposer.composeStateTransitioner()(long long *a1)
{
  closure #1 in closure #1 in AnsweringMachineComposer.composeStateTransitioner()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C34E3008()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #3 in implicit closure #2 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(a1, a2, v2 + 16);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@unowned Bool, @error @owned Error)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_98(v4);
  void *v5 = v6;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@unowned Bool, @error @owned Error);
  uint64_t v7 = (uint64_t (*)(uint64_t *, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@unowned Bool, @error @owned Error)
                                                + async function pointer to thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@unowned Bool, @error @owned Error));
  return v7(v2, v3);
}

uint64_t sub_1C34E30F4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in implicit closure #4 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return implicit closure #5 in implicit closure #4 in AnsweringMachineComposer.composeAnsweringMachineService(callServices:timeToWaitForCall:)(a1, a2, a3, (void *)(v3 + 16));
}

uint64_t sub_1C34E3148()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned Bool) -> (@error @owned Error)(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(v2 + 16))(*a1, a1[1], a2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Duration)(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t objectdestroy_35Tm()
{
  type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_48_17();
  OUTLINED_FUNCTION_12_0();
  uint64_t v0 = OUTLINED_FUNCTION_25_47();
  v1(v0);
  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_37_3();
  OUTLINED_FUNCTION_285();
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:)(Swift::String *a1)
{
  uint64_t v2 = type metadata accessor for TelephonyUtilitiesServices();
  OUTLINED_FUNCTION_1_1(v2);
  return closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:)(a1);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:)()
{
  OUTLINED_FUNCTION_28_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:);
  uint64_t v3 = OUTLINED_FUNCTION_30_15();
  return implicit closure #2 in implicit closure #1 in AnsweringMachineComposer.composeCondition(timeToWaitForCall:)(v3, v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_21();
  return v5(v2);
}

uint64_t sub_1C34E3440()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C34E3478()
{
  return objectdestroy_58Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_58Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in DelayedAnsweringMachine.init(isAnsweringMachineAvailable:makeAnsweringMachine:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_98(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  OUTLINED_FUNCTION_44_20();
  return v3();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State) -> (@error @owned Error)partial apply(long long *a1)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CallScreening.State) -> (@error @owned Error)(a1);
}

void specialized FaceTimeControlsView.handleUpdateDuringEphemeralAlert()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
  outlined consume of ConversationControlsRecipe.View?(v2, v3);
  if (v2)
  {
    OUTLINED_FUNCTION_18_54();
    uint64_t v5 = (void *)v4();
    if (v5)
    {
      id v10 = v5;
      if (objc_msgSend(v5, sel_isValid))
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationControls);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_8_0();
          *(_WORD *)uint64_t v9 = 0;
          _os_log_impl(&dword_1C2F90000, v7, v8, "setupRootView: displaying ephemeral alert, hiding new status view", v9, 2u);
          OUTLINED_FUNCTION_3();
        }

        objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView), sel_setAlpha_, 0.0);
      }
    }
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t vars8;

  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
  outlined consume of ConversationControlsRecipe.View?(v3, v4);
  if (v3)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*v2 & *v1) + 0xE0))();
    if (v5)
    {
      id v10 = v5;
      if (objc_msgSend(v5, sel_isValid))
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationControls);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v9 = 0;
          _os_log_impl(&dword_1C2F90000, v7, v8, "setupRootView: displaying ephemeral alert, hiding new status view", v9, 2u);
          MEMORY[0x1C87760E0](v9, -1, -1);
        }

        objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView), sel_setAlpha_, 0.0);
      }
    }
  }
}

void specialized FaceTimeControlsView.displayEphemeralAlert()()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
  outlined consume of ConversationControlsRecipe.View?(v1, v2);
  if (v1)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationControls);
    uint64_t v4 = v0;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_4_24();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      OUTLINED_FUNCTION_24_47();
      (*(void (**)(void))(v8 + 176))();
      uint64_t v9 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v5, v6, "⇢ [%s] 1. Starting display of ephemeral alert", v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    OUTLINED_FUNCTION_24_47();
    OUTLINED_FUNCTION_18_54();
    uint64_t v12 = (void *)v11();
    objc_msgSend(v12, sel_invalidate);

    self;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static Defaults.shared + 1016))();
    uint64_t v13 = OUTLINED_FUNCTION_8_74();
    OUTLINED_FUNCTION_337();
    uint64_t v22 = partial apply for specialized closure #1 in FaceTimeControlsView.displayEphemeralAlert();
    uint64_t v23 = v13;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    uint64_t v20 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v21 = &block_descriptor_89_0;
    uint64_t v14 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v15 = OUTLINED_FUNCTION_8_74();
    OUTLINED_FUNCTION_337();
    uint64_t v22 = partial apply for specialized closure #2 in FaceTimeControlsView.displayEphemeralAlert();
    uint64_t v23 = v15;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    uint64_t v20 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v21 = &block_descriptor_93;
    uint64_t v16 = _Block_copy(&aBlock);
    uint64_t v17 = swift_release();
    OUTLINED_FUNCTION_23_48(v17, sel_animateWithDuration_animations_completion_);
    _Block_release(v16);
    _Block_release(v14);
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t aBlock;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
  outlined consume of ConversationControlsRecipe.View?(v2, v3);
  if (v2)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationControls);
    uint64_t v5 = v0;
    os_log_type_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t aBlock = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      (*(void (**)(void))((*v1 & *v5) + 0xC8))();
      unint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &aBlock);
      uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v6, v7, "⇢ [%s] 1. Starting display of ephemeral alert", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v9, -1, -1);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }
    else
    {
    }
    uint64_t v12 = (void *)(*(uint64_t (**)(void))((*v1 & *v5) + 0xE0))();
    objc_msgSend(v12, sel_invalidate);

    uint64_t v13 = self;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v14 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v23 = partial apply for specialized closure #1 in FaceTimeControlsView.displayEphemeralAlert();
    uint64_t v24 = v15;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v20 = 1107296256;
    uint64_t v21 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v22 = &block_descriptor_49_2;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v23 = partial apply for specialized closure #2 in FaceTimeControlsView.displayEphemeralAlert();
    uint64_t v24 = v17;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v20 = 1107296256;
    uint64_t v21 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v22 = &block_descriptor_53_0;
    uint64_t v18 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v13, sel_animateWithDuration_animations_completion_, v16, v18, v14);
    _Block_release(v18);
    _Block_release(v16);
  }
}

void specialized FaceTimeControlsView.cleanUpEphemeralAlert()()
{
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationControls);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  os_log_type_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_4_24();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    (*(void (**)(void))((*v6 & *v2) + 0xB0))();
    uint64_t v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "⇢ [%s] 3. Removing ephemeral alert", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  OUTLINED_FUNCTION_18_54();
  uint64_t v11 = (void *)v10();
  objc_msgSend(v11, sel_invalidate);

  self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static Defaults.shared + 1016))();
  uint64_t v12 = OUTLINED_FUNCTION_8_74();
  OUTLINED_FUNCTION_337();
  uint64_t v21 = partial apply for specialized closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert();
  uint64_t v22 = v12;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  uint64_t v19 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v20 = &block_descriptor_109;
  uint64_t v13 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v14 = OUTLINED_FUNCTION_8_74();
  OUTLINED_FUNCTION_337();
  uint64_t v21 = partial apply for specialized closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
  uint64_t v22 = v14;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  uint64_t v19 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v20 = &block_descriptor_113;
  uint64_t v15 = _Block_copy(&aBlock);
  uint64_t v16 = swift_release();
  OUTLINED_FUNCTION_23_48(v16, sel_animateWithDuration_animations_completion_);
  _Block_release(v15);
  _Block_release(v13);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  double v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t aBlock;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationControls);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  os_log_type_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t aBlock = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    (*(void (**)(void))((*v6 & *v2) + 0xC8))();
    unint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &aBlock);
    os_log_type_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "⇢ [%s] 3. Removing ephemeral alert", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v8, -1, -1);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = (void *)(*(uint64_t (**)(void))((*v6 & *v2) + 0xE0))();
  objc_msgSend(v11, sel_invalidate);

  uint64_t v12 = self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v13 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v22 = partial apply for specialized closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert();
  uint64_t v23 = v14;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v19 = 1107296256;
  uint64_t v20 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v21 = &block_descriptor_69_0;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v22 = partial apply for specialized closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
  uint64_t v23 = v16;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v19 = 1107296256;
  uint64_t v20 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v21 = &block_descriptor_73;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v12, sel_animateWithDuration_animations_completion_, v15, v17, v13);
  _Block_release(v17);
  _Block_release(v15);
}

void one-time initialization function for paddingFromStatusViewToButtonShelf()
{
  static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf = 0x402C000000000000;
}

uint64_t *SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf.unsafeMutableAddressor()
{
  if (one-time initialization token for paddingFromStatusViewToButtonShelf != -1) {
    swift_once();
  }
  return &static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf;
}

double static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for paddingFromStatusViewToButtonShelf, (uint64_t)&static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf);
}

void one-time initialization function for paddingFromStatusViewToBottom()
{
  static SystemApertureControlsView.Constants.paddingFromStatusViewToBottom = 0x4031000000000000;
}

uint64_t *SystemApertureControlsView.Constants.paddingFromStatusViewToBottom.unsafeMutableAddressor()
{
  if (one-time initialization token for paddingFromStatusViewToBottom != -1) {
    swift_once();
  }
  return &static SystemApertureControlsView.Constants.paddingFromStatusViewToBottom;
}

double static SystemApertureControlsView.Constants.paddingFromStatusViewToBottom.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for paddingFromStatusViewToBottom, (uint64_t)&static SystemApertureControlsView.Constants.paddingFromStatusViewToBottom);
}

void one-time initialization function for paddingFromLeadingAccessoryToButtonShelf()
{
  static SystemApertureControlsView.Constants.paddingFromLeadingAccessoryToButtonShelf = 0x4030000000000000;
}

uint64_t *SystemApertureControlsView.Constants.paddingFromLeadingAccessoryToButtonShelf.unsafeMutableAddressor()
{
  if (one-time initialization token for paddingFromLeadingAccessoryToButtonShelf != -1) {
    swift_once();
  }
  return &static SystemApertureControlsView.Constants.paddingFromLeadingAccessoryToButtonShelf;
}

double static SystemApertureControlsView.Constants.paddingFromLeadingAccessoryToButtonShelf.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for paddingFromLeadingAccessoryToButtonShelf, (uint64_t)&static SystemApertureControlsView.Constants.paddingFromLeadingAccessoryToButtonShelf);
}

void one-time initialization function for paddingFromAppLaunchPillToButtonShelf()
{
  static SystemApertureControlsView.Constants.paddingFromAppLaunchPillToButtonShelf = 0x4034000000000000;
}

uint64_t *SystemApertureControlsView.Constants.paddingFromAppLaunchPillToButtonShelf.unsafeMutableAddressor()
{
  if (one-time initialization token for paddingFromAppLaunchPillToButtonShelf != -1) {
    swift_once();
  }
  return &static SystemApertureControlsView.Constants.paddingFromAppLaunchPillToButtonShelf;
}

double static SystemApertureControlsView.Constants.paddingFromAppLaunchPillToButtonShelf.getter()
{
  return static SystemApertureConstants.sensorRegionHeight.getter(&one-time initialization token for paddingFromAppLaunchPillToButtonShelf, (uint64_t)&static SystemApertureControlsView.Constants.paddingFromAppLaunchPillToButtonShelf);
}

__n128 one-time initialization function for controlsPadding()
{
  __asm { FMOV            V0.2D, #20.0 }
  static SystemApertureControlsView.Constants.controlsPadding = (__int128)result;
  *(__n128 *)&qword_1EA37E6E0 = result;
  return result;
}

long long *SystemApertureControlsView.Constants.controlsPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for controlsPadding != -1) {
    swift_once();
  }
  return &static SystemApertureControlsView.Constants.controlsPadding;
}

double static SystemApertureControlsView.Constants.controlsPadding.getter()
{
  if (one-time initialization token for controlsPadding != -1) {
    swift_once();
  }
  return *(double *)&static SystemApertureControlsView.Constants.controlsPadding;
}

void key path getter for SystemApertureControlsView.cnkContentAlpha : SystemApertureControlsView(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB0))();
}

uint64_t key path setter for SystemApertureControlsView.cnkContentAlpha : SystemApertureControlsView(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB8))(*a1);
}

id SystemApertureControlsView.cnkContentAlpha.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
  if (v3)
  {
    os_log_type_t v4 = (void *)v3;
    BOOL v5 = (double *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_cnkContentAlpha);
    uint64_t v6 = swift_beginAccess();
    (*(void (**)(uint64_t, double))((*v2 & *v4) + 0x68))(v6, *v5);
  }
  uint64_t v7 = (void *)(*(uint64_t (**)(void))((*v2 & *v1) + 0x138))();
  uint64_t v8 = (double *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_cnkContentAlpha);
  swift_beginAccess();
  objc_msgSend(v7, sel_setAlpha_, *v8);

  unint64_t v9 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView);
  if (v9) {
    objc_msgSend(v9, sel_setAlpha_, *v8);
  }
  objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView), sel_setAlpha_, *v8);
  return objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView), sel_setAlpha_, *v8);
}

double SystemApertureControlsView.cnkContentAlpha.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

id SystemApertureControlsView.cnkContentAlpha.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_cnkContentAlpha);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return SystemApertureControlsView.cnkContentAlpha.didset();
}

uint64_t (*SystemApertureControlsView.cnkContentAlpha.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return SystemApertureControlsView.cnkContentAlpha.modify;
}

uint64_t SystemApertureControlsView.cnkContentAlpha.modify(uint64_t a1, char a2)
{
  return SystemApertureControlsView.cnkContentAlpha.modify(a1, a2, (uint64_t (*)(uint64_t))SystemApertureControlsView.cnkContentAlpha.didset);
}

uint64_t key path getter for SystemApertureControlsView.context : SystemApertureControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemApertureControlsView.context : SystemApertureControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

uint64_t SystemApertureControlsView.context.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t SystemApertureControlsView.context.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*SystemApertureControlsView.context.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

id SystemApertureControlsView.controlsManager.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_controlsManager);
}

uint64_t key path getter for SystemApertureControlsView.ephemeralAlertTimer : SystemApertureControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for SystemApertureControlsView.ephemeralAlertTimer : SystemApertureControlsView(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8);
  id v4 = *a1;
  return v3(v2);
}

void *SystemApertureControlsView.ephemeralAlertTimer.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void SystemApertureControlsView.ephemeralAlertTimer.setter(void *a1)
{
}

uint64_t (*SystemApertureControlsView.ephemeralAlertTimer.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for SystemApertureControlsView.ephemeralAlert : SystemApertureControlsView@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t key path setter for SystemApertureControlsView.ephemeralAlert : SystemApertureControlsView(uint64_t a1, void **a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(id, void *, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of ConversationControlsRecipe.View?(*(id *)a1, v3);
  return v4(v2, v3, v5);
}

void SystemApertureControlsView.ephemeralAlert.didset()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_ephemeralAlert);
  swift_beginAccess();
  if (*v1) {
    specialized FaceTimeControlsView.displayEphemeralAlert()();
  }
  else {
    specialized FaceTimeControlsView.cleanUpEphemeralAlert()();
  }
}

id SystemApertureControlsView.ephemeralAlert.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  outlined copy of ConversationControlsRecipe.View?(*v0, v0[1]);
  return v1;
}

void SystemApertureControlsView.ephemeralAlert.setter(void *a1, void *a2, char a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_ephemeralAlert;
  swift_beginAccess();
  uint64_t v8 = *(void **)v7;
  unint64_t v9 = *(void **)(v7 + 8);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = a3;
  outlined copy of ConversationControlsRecipe.View?(a1, a2);
  outlined consume of ConversationControlsRecipe.View?(v8, v9);
  SystemApertureControlsView.ephemeralAlert.didset();
  outlined consume of ConversationControlsRecipe.View?(a1, a2);
}

uint64_t (*SystemApertureControlsView.ephemeralAlert.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return SystemApertureControlsView.ephemeralAlert.modify;
}

uint64_t SystemApertureControlsView.ephemeralAlert.modify(uint64_t a1, char a2)
{
  return SystemApertureControlsView.cnkContentAlpha.modify(a1, a2, (uint64_t (*)(uint64_t))SystemApertureControlsView.ephemeralAlert.didset);
}

uint64_t SystemApertureControlsView.cnkContentAlpha.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t key path getter for SystemApertureControlsView.recipe : SystemApertureControlsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
}

uint64_t key path setter for SystemApertureControlsView.recipe : SystemApertureControlsView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x118))(v6);
}

void SystemApertureControlsView.recipe.didset(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView];
  swift_getObjectType();
  if (dynamic_cast_existential_1_conditional((uint64_t)v7))
  {
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (uint64_t)&v2[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_recipe];
    swift_beginAccess();
    outlined init with copy of ConversationControlsRecipe(v11, (uint64_t)v6, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    id v13 = v7;
    v12(v6, ObjectType, v9);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 72);
    swift_beginAccess();
    uint64_t v16 = *(void *)(v11 + 56);
    if (v16) {
      uint64_t v17 = *(void *)(v11 + 72);
    }
    else {
      uint64_t v17 = 0;
    }
    swift_endAccess();
    if (v14)
    {
      if (v16) {
        BOOL v22 = v15 == v17;
      }
      else {
        BOOL v22 = 0;
      }
      if (v22) {
        goto LABEL_18;
      }
    }
    else if (!v16)
    {
      goto LABEL_18;
    }
    SystemApertureControlsView.updateLeadingAccessoryView()();
LABEL_18:
    specialized FaceTimeControlsView.handleUpdateDuringEphemeralAlert()();
    id v23 = objc_msgSend(v2, sel_layer);
    objc_msgSend(v23, sel_setHitTestsAsOpaque_, SystemApertureControlsView.allowUserInteractionWithSubview.getter() & 1);

    return;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationControls);
  os_log_t v25 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1C2F90000, v25, v19, "[SystemAperture] statusView has unexpected type", v20, 2u);
    MEMORY[0x1C87760E0](v20, -1, -1);
  }
  os_log_t v21 = v25;
}

uint64_t SystemApertureControlsView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_recipe;
  swift_beginAccess();
  return outlined init with copy of ConversationControlsRecipe(v3, a1, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
}

uint64_t SystemApertureControlsView.recipe.setter(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for ConversationControlsRecipe();
  MEMORY[0x1F4188790](v4 - 8);
  OUTLINED_FUNCTION_16_0();
  uint64_t v5 = v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_recipe;
  swift_beginAccess();
  outlined init with copy of ConversationControlsRecipe(v5, v2, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  swift_beginAccess();
  outlined assign with copy of ConversationControlsRecipe(a1, v5);
  swift_endAccess();
  SystemApertureControlsView.recipe.didset(v2);
  outlined destroy of ConversationControlsRecipe(a1);
  return outlined destroy of ConversationControlsRecipe(v2);
}

void (*SystemApertureControlsView.recipe.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  long long v3[3] = v1;
  size_t v4 = *(void *)(*(void *)(type metadata accessor for ConversationControlsRecipe() - 8) + 64);
  v3[4] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5] = v5;
  uint64_t v6 = v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_recipe;
  swift_beginAccess();
  outlined init with copy of ConversationControlsRecipe(v6, (uint64_t)v5, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  return SystemApertureControlsView.recipe.modify;
}

void SystemApertureControlsView.recipe.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  size_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of ConversationControlsRecipe(*(void *)(*(void *)a1 + 40), (uint64_t)v3, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    SystemApertureControlsView.recipe.setter((uint64_t)v3);
    outlined destroy of ConversationControlsRecipe((uint64_t)v4);
  }
  else
  {
    SystemApertureControlsView.recipe.setter(*(void *)(*(void *)a1 + 40));
  }
  free(v4);
  free(v3);
  free(v2);
}

double SystemApertureControlsView.calculateHeightForExpandedHUD()()
{
  if (one-time initialization token for controlsPadding != -1) {
    swift_once();
  }
  double v4 = *(double *)&qword_1EA37E6E0 + 0.0;
  if (*(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView])
  {
    SystemApertureControlsView.appLaunchPillSize.getter();
    double v6 = v4 + v5;
    if (one-time initialization token for paddingFromAppLaunchPillToButtonShelf != -1) {
      swift_once();
    }
    double v4 = v6 + *(double *)&static SystemApertureControlsView.Constants.paddingFromAppLaunchPillToButtonShelf;
  }
  static Layout.ConversationControls.values.getter((uint64_t)v16);
  double v7 = *(double *)&static SystemApertureControlsView.Constants.controlsPadding;
  static Layout.ConversationControls.values.getter((uint64_t)v18);
  double v8 = v7 + v19;
  if (one-time initialization token for paddingFromLeadingAccessoryToButtonShelf != -1) {
    swift_once();
  }
  double v9 = v8 + *(double *)&static SystemApertureControlsView.Constants.paddingFromLeadingAccessoryToButtonShelf;
  objc_msgSend(objc_msgSend(v0, sel_SBUISA_systemApertureObstructedAreaLayoutGuide), sel_layoutFrame);
  OUTLINED_FUNCTION_28_39();
  v20.origin.x = v8;
  v20.origin.y = v1;
  v20.size.width = v2;
  v20.size.height = v3;
  double Height = CGRectGetHeight(v20);
  double v14 = Height + SystemApertureControlsView.statusViewHeight.getter(Height, v11, v12, v13);
  if (one-time initialization token for paddingFromStatusViewToButtonShelf != -1) {
    swift_once();
  }
  if (v14 + *(double *)&static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf >= v9)
  {
    if ((~COERCE__INT64(v14 + *(double *)&static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf) & 0x7FF0000000000000) != 0)
    {
      double v9 = v14 + *(double *)&static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf;
    }
    else if ((COERCE_UNSIGNED_INT64(v14 + *(double *)&static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf) & 0xFFFFFFFFFFFFFLL) == 0)
    {
      double v9 = v14 + *(double *)&static SystemApertureControlsView.Constants.paddingFromStatusViewToButtonShelf;
    }
  }
  return v9 + v4 + v17;
}

id SystemApertureControlsView.statusView.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView);
}

uint64_t SystemApertureControlsView.showCallDetailsButton.getter()
{
  CGFloat v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView);
  CGFloat v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8);
  CGFloat v3 = v1;
  uint64_t v4 = v2();

  return v4;
}

uint64_t key path getter for SystemApertureControlsView.ephemeralAlertNotice : SystemApertureControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x138))();
  *a2 = result;
  return result;
}

void key path setter for SystemApertureControlsView.ephemeralAlertNotice : SystemApertureControlsView(id *a1)
{
}

id SystemApertureControlsView.ephemeralAlertNotice.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView____lazy_storage___ephemeralAlertNotice;
  CGFloat v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView____lazy_storage___ephemeralAlertNotice);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView____lazy_storage___ephemeralAlertNotice);
  }
  else
  {
    uint64_t v4 = v0;
    double v5 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_controlsManager);
    id v6 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDEphemeralNotice());
    id v7 = ConversationHUDEphemeralNotice.init(controlsManager:)(v5);
    double v8 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v7;
    id v3 = v7;

    CGFloat v2 = 0;
  }
  id v9 = v2;
  return v3;
}

void SystemApertureControlsView.ephemeralAlertNotice.setter(uint64_t a1)
{
}

uint64_t key path getter for SystemApertureControlsView.buttonShelfView : SystemApertureControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x150))();
  *a2 = result;
  return result;
}

void key path setter for SystemApertureControlsView.buttonShelfView : SystemApertureControlsView(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  SystemApertureControlsView.buttonShelfView.setter(v1);
}

void *SystemApertureControlsView.buttonShelfView.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  id v2 = v1;
  return v1;
}

void SystemApertureControlsView.buttonShelfView.setter(void *a1)
{
}

void SystemApertureControlsView.leadingAccessoryView.setter(uint64_t a1)
{
}

void SystemApertureControlsView.appLaunchPillView.setter(uint64_t a1)
{
}

double SystemApertureControlsView.appLaunchPillSize.getter()
{
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView];
  double v5 = 0.0;
  if (v4)
  {
    id v6 = v4;
    id v7 = objc_msgSend(v6, sel_superview);

    if (v7)
    {
      id v8 = objc_msgSend(v0, sel_window);
      if (v8)
      {
        id v9 = v8;
        objc_msgSend(v8, sel_frame);
        double v1 = v10;
        double v2 = v11;

        double v12 = OUTLINED_FUNCTION_22_42();
      }
      else
      {
        double v12 = 1.79769313e308;
      }
      id v13 = objc_msgSend(v0, sel_SBUISA_systemApertureLeadingConcentricContentLayoutGuide);
      objc_msgSend(v13, sel_layoutFrame);
      CGFloat v15 = v14;
      OUTLINED_FUNCTION_9_82();

      v25.origin.x = v15;
      v25.origin.y = v1;
      v25.size.width = v2;
      v25.size.height = v3;
      CGFloat Height = CGRectGetHeight(v25);
      LODWORD(v17) = 1148846080;
      LODWORD(v18) = 1112014848;
      objc_msgSend(v6, sel_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_, v12, Height, v17, v18);
      objc_msgSend(v0, sel_bounds);
      double v24 = v19;
      OUTLINED_FUNCTION_9_82();
      if (one-time initialization token for controlsPadding != -1) {
        swift_once();
      }
      long long v20 = static SystemApertureControlsView.Constants.controlsPadding;
      double v22 = *(double *)&qword_1EA37E6E0;
      double v21 = *(double *)&qword_1EA37E6E8;

      return UIEdgeInsetsInsetRect_1(v24, v1, v2, v3, *(double *)&v20, *((double *)&v20 + 1), v22, v21);
    }
    else
    {
    }
  }
  return v5;
}

double SystemApertureControlsView.statusViewHeight.getter(double a1, double a2, double a3, double a4)
{
  LODWORD(a3) = 1132068864;
  LODWORD(a4) = 1112014848;
  objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView), sel_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_, *(double *)(MEMORY[0x1E4FB2C70] + 8), *(double *)(MEMORY[0x1E4FB2C68] + 8), a3, a4);
  return v5;
}

id SystemApertureControlsView.__allocating_init(recipe:controlsManager:context:menuHostViewController:)(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  return SystemApertureControlsView.init(recipe:controlsManager:context:menuHostViewController:)(a1, a2, a3, a4, a5);
}

id SystemApertureControlsView.init(recipe:controlsManager:context:menuHostViewController:)(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  double v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_cnkContentAlpha] = 0x3FF0000000000000;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_ephemeralAlertTimer] = 0;
  CGFloat v15 = &v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_ephemeralAlert];
  *(void *)CGFloat v15 = 0;
  *((void *)v15 + 1) = 0;
  v15[16] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView____lazy_storage___ephemeralAlertNotice] = 0;
  unint64_t v34 = (void **)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_buttonShelfView];
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_buttonShelfView] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView] = 0;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_recipe], (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_controlsManager] = a2;
  v5[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_context] = a3;
  outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v14, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
  objc_allocWithZone((Class)type metadata accessor for ConversationControlsTrailingActionsView());
  id v37 = a4;
  id v16 = a2;
  double v17 = v5;
  uint64_t v35 = a4;
  id v36 = v16;
  *(void *)&v17[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView] = ConversationControlsTrailingActionsView.init(recipe:controlsManager:menuHostViewController:context:)((uint64_t)v14, v16, a4, a5, a3);
  double v18 = (char *)(a1 + *(int *)(v12 + 68));
  if (v18[40] <= -3 && *(void *)(*(void *)v18 + 16))
  {
    outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v14, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    id v19 = objc_allocWithZone((Class)type metadata accessor for ConversationHUDControlsButtonShelfView());
    id v20 = v36;
    id v21 = v36;
    id v22 = v37;
    id v23 = ConversationHUDControlsButtonShelfView.init(recipe:controlsManager:context:menuHostViewController:)((uint64_t)v14, v21, a3, v35);
    double v24 = v34;
    swift_beginAccess();
    CGRect v25 = *v24;
    *double v24 = v23;

    outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v14, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    id v26 = objc_allocWithZone((Class)type metadata accessor for ConversationDetailsView());
    id v27 = ConversationDetailsView.init(recipe:presentationStyle:controlsManager:)((uint64_t)v14, 0, v21);
  }
  else
  {
    outlined init with copy of ConversationControlsRecipe(a1, (uint64_t)v14, (void (*)(void))type metadata accessor for ConversationControlsRecipe);
    id v28 = objc_allocWithZone((Class)type metadata accessor for SystemApertureConversationDetailsView());
    id v27 = SystemApertureConversationDetailsView.init(recipe:)((uint64_t)v14);
    id v20 = v36;
  }
  *(void *)&v17[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView] = v27;

  uint64_t v29 = (objc_class *)type metadata accessor for SystemApertureControlsView();
  v38.receiver = v17;
  v38.super_class = v29;
  id v30 = objc_msgSendSuper2(&v38, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v31 = objc_msgSend(v30, sel_layer);
  objc_msgSend(v31, sel_setHitTestsAsOpaque_, SystemApertureControlsView.allowUserInteractionWithSubview.getter() & 1);

  SystemApertureControlsView.configureSubviews()();
  outlined destroy of ConversationControlsRecipe(a1);
  return v30;
}

id SystemApertureControlsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SystemApertureControlsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_cnkContentAlpha] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_ephemeralAlertTimer] = 0;
  double v1 = &v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_ephemeralAlert];
  *(void *)double v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView____lazy_storage___ephemeralAlertNotice] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_buttonShelfView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall SystemApertureControlsView.layoutSubviews()()
{
  double v1 = v0;
  double v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView);
  swift_getObjectType();
  uint64_t v3 = dynamic_cast_existential_1_conditional((uint64_t)v2);
  if (v3)
  {
    double v5 = (SEL *)v3;
    uint64_t v6 = v4;
    v143.receiver = v1;
    v143.super_class = (Class)type metadata accessor for SystemApertureControlsView();
    os_log_t oslog = v2;
    id v7 = objc_msgSendSuper2(&v143, sel_layoutSubviews);
    id v8 = (void *)MEMORY[0x1E4FBC8C8];
    (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1E0))(v7);
    if (v10)
    {
      OUTLINED_FUNCTION_12_63();
      double Height = CGRectGetHeight(v153);
    }
    else
    {
      double Height = v9;
    }
    OUTLINED_FUNCTION_12_63();
    if (ceil(Height) != ceil(CGRectGetHeight(v154)))
    {
      id v18 = objc_msgSend(v1, sel_systemApertureElementContext);
      aBlock[4] = TPNumberPadCharacter.rawValue.getter;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_86;
      id v19 = _Block_copy(aBlock);
      objc_msgSend(v18, sel_setElementNeedsUpdateWithCoordinatedAnimations_, v19);
      _Block_release(v19);
      uint64_t v17 = swift_unknownObjectRelease();
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0x150))(v17);
    id v21 = &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>;
    if (v20)
    {
      uint64_t v22 = v20;
      id v23 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView);
      if (!v23)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v116 = type metadata accessor for Logger();
        __swift_project_value_buffer(v116, (uint64_t)static Logger.conversationControls);
        uint64_t v117 = Logger.logObject.getter();
        os_log_type_t v118 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v117, v118))
        {
          uint64_t v119 = (uint8_t *)OUTLINED_FUNCTION_8_0();
          *(_WORD *)uint64_t v119 = 0;
          _os_log_impl(&dword_1C2F90000, v117, v118, "[SystemAperture] Unexpectedly laying out a recipe with a button shelf but no leading accessory", v119, 2u);
          OUTLINED_FUNCTION_3();
        }
        else
        {
        }
        goto LABEL_50;
      }
      unint64_t v139 = v5;
      double v24 = v23;
      OUTLINED_FUNCTION_12_63();
      double v28 = v27;
      double v30 = v29;
      if (one-time initialization token for controlsPadding != -1)
      {
        double v136 = v25;
        double v137 = v26;
        swift_once();
        double v26 = v137;
        double v25 = v136;
      }
      uint64_t v31 = (uint64_t)&static SystemApertureControlsView.Constants.controlsPadding;
      double v32 = *((double *)&static SystemApertureControlsView.Constants.controlsPadding + 1);
      uint64_t v33 = qword_1EA37E6E0;
      double v34 = UIEdgeInsetsInsetRect_1(v28, v30, v25, v26, *(double *)&static SystemApertureControlsView.Constants.controlsPadding, *((double *)&static SystemApertureControlsView.Constants.controlsPadding + 1), *(double *)&qword_1EA37E6E0, *(double *)&qword_1EA37E6E8);
      static Layout.ConversationControls.values.getter((uint64_t)v144);
      double Width = v146;
      id v36 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView);
      id v37 = (SEL *)&selRef_ringButton;
      uint64_t v138 = v6;
      if (!v36) {
        goto LABEL_21;
      }
      id v38 = v36;
      SystemApertureControlsView.appLaunchPillSize.getter();
      double v40 = Height - *(double *)&v33 - v39;
      id v41 = v38;
      double v42 = SystemApertureControlsView.appLaunchPillSize.getter();
      objc_msgSend(v41, sel_setFrame_, v32, v40, v42, v43);

      double v32 = *((double *)&static SystemApertureControlsView.Constants.controlsPadding + 1);
      objc_msgSend(v41, sel_frame);
      double Height = CGRectGetMinY(v155);
      if (one-time initialization token for paddingFromAppLaunchPillToButtonShelf == -1)
      {
LABEL_20:
        uint64_t v33 = static SystemApertureControlsView.Constants.paddingFromAppLaunchPillToButtonShelf;

LABEL_21:
        objc_msgSend((id)v22, v37[270], v32, Height - *(double *)&v33 - Width, v34, Width);
        double v45 = *(double *)v31;
        double v44 = *(double *)(v31 + 8);
        static Layout.ConversationControls.values.getter((uint64_t)v147);
        double v46 = v148;
        static Layout.ConversationControls.values.getter((uint64_t)v149);
        objc_msgSend(v24, v37[270], v44, v45, v46, v150);
        double v47 = *MEMORY[0x1E4FB2C68];
        objc_msgSend((id)v22, sel_frame);
        double MinY = CGRectGetMinY(v156);
        id v49 = objc_msgSend(v1, sel_SBUISA_systemApertureObstructedAreaLayoutGuide);
        objc_msgSend(v49, sel_layoutFrame);
        CGFloat v51 = v50;
        CGFloat v53 = v52;
        CGFloat v55 = v54;
        CGFloat v57 = v56;

        v157.origin.x = v51;
        v157.origin.y = v53;
        v157.size.width = v55;
        v157.size.height = v57;
        double v58 = MinY - CGRectGetMaxY(v157);
        uint64_t v59 = v21[106];
        id v60 = *(id *)((char *)v1 + v59);
        LODWORD(v61) = 1132068864;
        LODWORD(v62) = 1132068864;
        objc_msgSend(v60, sel_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_, v47, v58, v61, v62);
        objc_msgSend(v60, sel_frame);
        [v60 v37[270]];

        static Layout.ConversationControls.values.getter((uint64_t)aBlock);
        double v63 = v152 * -0.5;
        id v64 = *(id *)((char *)v1 + v59);
        objc_msgSend((id)v22, sel_frame);
        CGFloat v65 = CGRectGetMaxX(v158) + v63;
        objc_msgSend(v64, sel_center);
        objc_msgSend(v64, sel_setCenter_, v65);

        id v66 = *(id *)((char *)v1 + v59);
        objc_msgSend(v24, sel_center);
        objc_msgSend(v66, sel_center);
        objc_msgSend(v66, sel_setCenter_);

        objc_msgSend(*(id *)((char *)v1 + v59), sel_frame);
        double MinX = CGRectGetMinX(v159);
        objc_msgSend(v24, sel_frame);
        double v68 = MinX - CGRectGetMaxX(v160);
        objc_msgSend(v1, sel_SBUISA_standardInteritemPadding);
        double v70 = v69 + v69;
        double v71 = v68 - v70;
        double v75 = SystemApertureControlsView.statusViewHeight.getter(v70, v72, v73, v74);
        objc_msgSend(v24, sel_frame);
        double MaxX = CGRectGetMaxX(v161);
        uint64_t v77 = 0x1F7DA2000;
        objc_msgSend(v1, sel_SBUISA_standardInteritemPadding);
        double v79 = MaxX + v78;
        id v80 = OUTLINED_FUNCTION_20_53();
        objc_msgSend(v80, sel_layoutFrame);
        OUTLINED_FUNCTION_9_82();

        double v81 = OUTLINED_FUNCTION_25_48();
        uint64_t v82 = self;
        uint64_t v83 = swift_allocObject();
        *(void *)(v83 + 16) = v139;
        *(void *)(v83 + 24) = v138;
        *(double *)(v83 + 32) = v79;
        *(double *)(v83 + 40) = v81;
        *(double *)(v83 + 48) = v71;
        *(double *)(v83 + 56) = v75;
        uint64_t v84 = swift_allocObject();
        *(void *)(v84 + 16) = partial apply for closure #2 in SystemApertureControlsView.layoutSubviews();
        *(void *)(v84 + 24) = v83;
        v142[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
        v142[5] = v84;
        v142[0] = MEMORY[0x1E4F143A8];
        v142[1] = 1107296256;
        v142[2] = thunk for @escaping @callee_guaranteed () -> ();
        v142[3] = &block_descriptor_16;
        id v85 = _Block_copy(v142);
        uint64_t v86 = oslog;
        swift_retain();
        swift_release();
        objc_msgSend((id)v82, sel_performWithoutAnimation_, v85);
        _Block_release(v85);
        LOBYTE(v82) = swift_isEscapingClosureAtFileLocation();
        uint64_t v87 = swift_release();
        if (v82)
        {
          __break(1u);
          goto LABEL_53;
        }
        unsigned __int8 v88 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x138))(v87);
        id v89 = OUTLINED_FUNCTION_20_53();
        objc_msgSend(v89, sel_layoutFrame);
        OUTLINED_FUNCTION_9_82();

        double v90 = OUTLINED_FUNCTION_25_48();
        objc_msgSend(v1, sel_bounds);
        objc_msgSend(v88, v37[270], 0.0, v90, CGRectGetWidth(v162), v75);

        uint64_t v84 = 0;
        double v24 = partial apply for closure #2 in SystemApertureControlsView.layoutSubviews();
LABEL_38:
        if (objc_msgSend(v1, sel_effectiveUserInterfaceLayoutDirection) != (id)1)
        {

LABEL_49:
          outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v24);
          outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v84);
LABEL_50:
          OUTLINED_FUNCTION_28_1();
          return;
        }
        uint64_t v77 = *(void *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView);
        uint64_t v127 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView);
        v142[0] = MEMORY[0x1E4FBC860];
        if (v77)
        {
          id v128 = (id)v77;
          uint64_t v129 = oslog;
          id v130 = v128;
          MEMORY[0x1C87733A0](v127);
          OUTLINED_FUNCTION_21_48();
          if (v131) {
            OUTLINED_FUNCTION_0_68();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          uint64_t v132 = oslog;
          id v133 = v127;
        }
        id v85 = v127;
        MEMORY[0x1C87733A0]();
        OUTLINED_FUNCTION_21_48();
        if (!v131)
        {
LABEL_46:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          os_log_type_t v134 = oslog;
          MEMORY[0x1C87733A0]();
          if (*(void *)((v142[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v142[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            OUTLINED_FUNCTION_0_68();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          unint64_t v135 = v142[0];

          specialized Sequence.forEach(_:)(v135, v1);
          swift_bridgeObjectRelease();

          goto LABEL_49;
        }
LABEL_53:
        OUTLINED_FUNCTION_0_68();
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v91 = OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView;
      uint64_t v92 = *(void **)((char *)v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView);
      if (v92)
      {
        uint64_t v93 = one-time initialization token for controlsPadding;
        id v94 = v92;
        if (v93 != -1) {
          swift_once();
        }
        double v95 = *((double *)&static SystemApertureControlsView.Constants.controlsPadding + 1);
        static Layout.ConversationControls.values.getter((uint64_t)v147);
        double v96 = (Height - v148) * 0.5;
        static Layout.ConversationControls.values.getter((uint64_t)v149);
        double v97 = v150;
        static Layout.ConversationControls.values.getter((uint64_t)aBlock);
        objc_msgSend(v94, sel_setFrame_, v95, v96, v97, v152);
      }
      uint64_t v98 = OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView;
      id v99 = objc_retain(*(id *)((char *)v1
                              + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView));
      OUTLINED_FUNCTION_12_63();
      double v101 = v100;
      double v103 = v102;
      LODWORD(v100) = 1132068864;
      LODWORD(v102) = 1132068864;
      objc_msgSend(v99, sel_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_, v101, v103, v100, v102);
      double v105 = v104;
      double v107 = v106;

      OUTLINED_FUNCTION_12_63();
      double Width = CGRectGetWidth(v163);
      if (one-time initialization token for controlsPadding != -1) {
        swift_once();
      }
      objc_msgSend(*(id *)((char *)v1 + v98), sel_setFrame_, Width - *(double *)&qword_1EA37E6E8 - v105, (Height - v107) * 0.5, v105, v107);
      uint64_t v108 = *(void **)((char *)v1 + v91);
      if (v108)
      {
        unint64_t v109 = *(void **)((char *)v1 + v98);
        id v110 = v108;
        objc_msgSend(v109, sel_frame);
        double v111 = CGRectGetMinX(v164);
        objc_msgSend(v110, sel_frame);
        double v112 = v111 - CGRectGetMaxX(v165);
        objc_msgSend(v1, sel_SBUISA_standardInteritemPadding);
        double v32 = v112 - (v113 + v113);
        objc_msgSend(v110, sel_frame);
        double v114 = CGRectGetMaxX(v166);
        objc_msgSend(v1, sel_SBUISA_standardInteritemPadding);
        double Width = v115;

        double v34 = v114 + Width;
      }
      else
      {
        objc_msgSend(*(id *)((char *)v1 + v98), sel_frame);
        CGFloat v120 = CGRectGetMinX(v167);
        double v34 = *((double *)&static SystemApertureControlsView.Constants.controlsPadding + 1);
        CGFloat v121 = v120 - *((double *)&static SystemApertureControlsView.Constants.controlsPadding + 1);
        objc_msgSend(v1, sel_SBUISA_standardInteritemPadding);
        double v32 = v121 - v122;
      }
      uint64_t v31 = 0x1F7DA2000;
      objc_msgSend(OUTLINED_FUNCTION_20_53(), sel_layoutFrame);
      OUTLINED_FUNCTION_19_47();
      double Height = Height - OUTLINED_FUNCTION_27_43();
      uint64_t v123 = self;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v5;
      *(void *)(v22 + 24) = v6;
      *(double *)(v22 + 32) = v32;
      *(double *)(v22 + 40) = Height;
      id v37 = v5;
      double v24 = (void *)swift_allocObject();
      v24[2] = partial apply for closure #3 in SystemApertureControlsView.layoutSubviews();
      v24[3] = v22;
      v144[4] = partial apply for thunk for @callee_guaranteed () -> ();
      uint64_t v145 = v24;
      v144[0] = MEMORY[0x1E4F143A8];
      v144[1] = 1107296256;
      v144[2] = thunk for @escaping @callee_guaranteed () -> ();
      v144[3] = &block_descriptor_6_5;
      id v41 = _Block_copy(v144);
      id v21 = v145;
      unint64_t v124 = oslog;
      swift_retain();
      swift_release();
      objc_msgSend((id)v123, sel_performWithoutAnimation_, v41);
      _Block_release(v41);
      LOBYTE(v123) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v123 & 1) == 0)
      {
        objc_msgSend(OUTLINED_FUNCTION_20_53(), sel_layoutFrame);
        OUTLINED_FUNCTION_19_47();
        double v125 = OUTLINED_FUNCTION_27_43();
        uint64_t ObjectType = swift_getObjectType();
        -[SEL setFrame:](v37, sel_setFrame_, v34, v125 - (*(double (**)(uint64_t, uint64_t))(v6 + 32))(ObjectType, v6), v32, Height);
        double v24 = 0;
        uint64_t v84 = (uint64_t)partial apply for closure #3 in SystemApertureControlsView.layoutSubviews();
        goto LABEL_38;
      }
      __break(1u);
    }
    swift_once();
    goto LABEL_20;
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationControls);
  osos_log_t loga = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(osloga, v13))
  {
    double v14 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)double v14 = 0;
    _os_log_impl(&dword_1C2F90000, osloga, v13, "[SystemAperture] statusView has unexpected type", v14, 2u);
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_28_1();
}

id closure #2 in SystemApertureControlsView.layoutSubviews()(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t ObjectType = swift_getObjectType();
  objc_msgSend(a1, sel_setFrame_, a3, a4, a5, a6);
  objc_msgSend(a1, sel_setNeedsLayout);
  objc_msgSend(a1, sel_layoutIfNeeded);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  objc_msgSend(a1, sel_frame);
  return objc_msgSend(a1, sel_setFrame_);
}

id closure #3 in SystemApertureControlsView.layoutSubviews()(void *a1, double a2, double a3)
{
  objc_msgSend(a1, sel_setFrame_, 0.0, 0.0, a2, a3);
  objc_msgSend(a1, sel_setNeedsLayout);
  return objc_msgSend(a1, sel_layoutIfNeeded);
}

id SystemApertureControlsView.updateAdditionalView(alpha:)(double a1)
{
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView), sel_setAlpha_);
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView);
  return objc_msgSend(v3, sel_setAlpha_, a1);
}

void SystemApertureControlsView.showAppLaunchPill(buttonType:menuHost:target:action:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *(void **)((char *)v5 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView);
  if (v12)
  {
    uint64_t v13 = (uint64_t)v12 + OBJC_IVAR____TtC15ConversationKit32ConversationHUDAppLaunchPillView_buttonType;
    id v22 = v12;
    if (static ConversationControlsAppLaunchButtonType.== infix(_:_:)(v13, a1))
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationControls);
      CGFloat v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_8_0();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl(&dword_1C2F90000, v15, v16, "[SystemAperture] Updating AppLaunchButton", v17, 2u);
        OUTLINED_FUNCTION_3();
      }

      updateAppLaunchPillIfNeeded #1 () in SystemApertureControlsView.showAppLaunchPill(buttonType:menuHost:target:action:)((uint64_t)v6, a4, a5);

      return;
    }
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationControls);
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_1C2F90000, v19, v20, "[SystemAperture] Showing AppLaunchButton", v21, 2u);
    OUTLINED_FUNCTION_3();
  }

  addAppLaunchPill #1 (menuHost:target:action:) in SystemApertureControlsView.showAppLaunchPill(buttonType:menuHost:target:action:)(a2, a3, a4, a5, v6, a1);
}

uint64_t updateAppLaunchPillIfNeeded #1 () in SystemApertureControlsView.showAppLaunchPill(buttonType:menuHost:target:action:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  void (*v7)(long long *__return_ptr);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  void v31[3];
  uint64_t v32;
  uint64_t v33;

  uint64_t v3 = *(void **)(result + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView);
  if (v3)
  {
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    id v7 = *(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **(void **)(result
                                                                                             + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_controlsManager))
                                                       + 0x900);
    id v8 = v3;
    v7(&v28);
    if (!v29)
    {

      return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v28, &demangling cache variable for type metadata for Activity?);
    }
    outlined init with take of Notice(&v28, (uint64_t)v31);
    double v9 = v32;
    char v10 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    uint64_t v13 = v12;
    (*(void (**)(long long *__return_ptr))((*v6 & *v8) + 0xC8))(&v28);
    uint64_t v14 = v29;
    if (v29)
    {
      double v26 = a2;
      double v27 = a3;
      CGFloat v15 = v30;
      os_log_type_t v16 = __swift_project_boxed_opaque_existential_1(&v28, v29);
      uint64_t v17 = *(void *)(v14 - 8);
      uint64_t v18 = MEMORY[0x1F4188790](v16);
      os_log_type_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v17 + 16))(v20, v18);
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v28, &demangling cache variable for type metadata for Activity?);
      id v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
      id v23 = v22;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v14);
      if (v11 == v21 && v13 == v23)
      {

        swift_bridgeObjectRelease_n();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      }
      double v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v26;
      a3 = v27;
      uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
      if (v25)
      {
LABEL_13:

        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      }
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v28, &demangling cache variable for type metadata for Activity?);
      swift_bridgeObjectRelease();
    }
    outlined init with copy of IDSLookupManager((uint64_t)v31, (uint64_t)&v28);
    (*(void (**)(long long *))((*v6 & *v8) + 0xD0))(&v28);
    (*(void (**)(uint64_t, uint64_t))((*v6 & *v8) + 0x1C8))(a2, a3);
    goto LABEL_13;
  }
  return result;
}

void addAppLaunchPill #1 (menuHost:target:action:) in SystemApertureControlsView.showAppLaunchPill(buttonType:menuHost:target:action:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v51 = a6;
  id v52 = a1;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  CGFloat v53 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v7 - 8);
  double v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v50 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ConversationControlsRecipe();
  __n128 v13 = MEMORY[0x1F4188790](v12);
  CGFloat v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *MEMORY[0x1E4FBC8C8] & *a5;
  double v56 = *(void (**)(__n128))(v16 + 0x110);
  uint64_t v57 = v16 + 272;
  v56(v13);
  uint64_t v17 = &v15[*(int *)(v12 + 60)];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  uint64_t v21 = *((void *)v17 + 2);
  uint64_t v20 = *((void *)v17 + 3);
  uint64_t v22 = *((void *)v17 + 4);
  unsigned int v23 = v17[40];
  outlined copy of ConversationControlsRecipe.Actions?(*(void *)v17, v18, v21, v20, v22, v17[40]);
  outlined destroy of ConversationControlsRecipe((uint64_t)v15);
  if (v23 > 0xFD)
  {
LABEL_4:
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationControls);
    double v25 = a5;
    double v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      double v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      aBlock[0] = v29;
      *(_DWORD *)double v28 = 136315138;
      ((void (*)(void))v56)();
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v12);
      uint64_t v30 = specialized >> prefix<A>(_:)();
      unint64_t v32 = v31;
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
      v59[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v29, -1, -1);
      uint64_t v33 = v28;
      goto LABEL_8;
    }

    return;
  }
  if ((v23 & 0x80) == 0)
  {
    outlined consume of ConversationControlsRecipe.Actions?(v19, v18, v21, v20, v22, v23);
    goto LABEL_4;
  }
  uint64_t v34 = *(void *)(v19 + 16);
  uint64_t v35 = outlined consume of ConversationControlsRecipe.Actions?(v19, v18, v21, v20, v22, v23);
  if (!v34) {
    goto LABEL_4;
  }
  if (*(void *)((char *)a5 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView))
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationControls);
    double v26 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v26, v37)) {
      goto LABEL_9;
    }
    id v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v38 = 0;
    _os_log_impl(&dword_1C2F90000, v26, v37, "Ignoring request to show app launch pill view because it was already shown", v38, 2u);
    uint64_t v33 = v38;
LABEL_8:
    MEMORY[0x1C87760E0](v33, -1, -1);
LABEL_9:

    return;
  }
  double v39 = *(void **)((char *)a5 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_controlsManager);
  double v40 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v39) + 0x900))(v59, v35);
  id v41 = *(uint64_t (**)(void))((*v40 & *a5) + 0xC8);
  double v42 = v39;
  LOBYTE(v39) = v41();
  uint64_t v43 = v50;
  outlined init with copy of ConversationControlsRecipe(v51, v50, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  outlined init with copy of Activity?((uint64_t)v59, (uint64_t)aBlock);
  objc_allocWithZone((Class)type metadata accessor for ConversationHUDAppLaunchPillView());
  id v44 = v52;
  id v45 = v52;
  double v46 = ConversationHUDAppLaunchPillView.init(controlsManager:controlsContext:buttonType:menuHostViewController:activity:)(v42, (char)v39, v43, v44, v53, (uint64_t)aBlock);
  (*(void (**)(uint64_t, uint64_t))((*v40 & *v46) + 0x1C8))(v54, v55);
  double v47 = v46;
  SystemApertureControlsView.appLaunchPillView.setter((uint64_t)v46);
  objc_msgSend(a5, sel_addSubview_, v47);
  id v48 = objc_msgSend(a5, sel_systemApertureElementContext);
  aBlock[4] = (uint64_t)TPNumberPadCharacter.rawValue.getter;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_43_1;
  id v49 = _Block_copy(aBlock);
  objc_msgSend(v48, sel_setElementNeedsUpdateWithCoordinatedAnimations_, v49);
  _Block_release(v49);

  swift_unknownObjectRelease();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v59, &demangling cache variable for type metadata for Activity?);
}

Swift::Void __swiftcall SystemApertureControlsView.removeAppLaunchPill()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_appLaunchPillView];
  if (v1) {
    objc_msgSend(v1, sel_removeFromSuperview);
  }
  SystemApertureControlsView.appLaunchPillView.setter(0);
  id v2 = objc_msgSend(v0, sel_systemApertureElementContext);
  v4[4] = TPNumberPadCharacter.rawValue.getter;
  v4[5] = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_19_2;
  uint64_t v3 = _Block_copy(v4);
  objc_msgSend(v2, sel_setElementNeedsUpdateWithCoordinatedAnimations_, v3);
  _Block_release(v3);
  swift_unknownObjectRelease();
}

uint64_t SystemApertureControlsView.systemAperturePreferredContentSize.getter()
{
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_16_0();
  id v4 = objc_msgSend(v0, sel_window);
  if (v4)
  {
    objc_msgSend(v4, sel_frame);
    OUTLINED_FUNCTION_28_39();
    double v5 = OUTLINED_FUNCTION_22_42();
  }
  else
  {
    double v5 = 1.79769313e308;
  }
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
  uint64_t v6 = v1 + *(int *)(v2 + 60);
  uint64_t v7 = *(void *)v6;
  unsigned int v8 = *(unsigned __int8 *)(v6 + 40);
  outlined copy of ConversationControlsRecipe.Actions?(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(void *)(v6 + 32), *(unsigned __int8 *)(v6 + 40));
  outlined destroy of ConversationControlsRecipe(v1);
  if (v8 <= 0xFD)
  {
    if ((v8 & 0x80) != 0)
    {
      uint64_t v11 = *(void *)(v7 + 16);
      OUTLINED_FUNCTION_11_63();
      if (v11)
      {
        SystemApertureControlsView.calculateHeightForExpandedHUD()();
        return *(void *)&v5;
      }
    }
    else
    {
      OUTLINED_FUNCTION_11_63();
    }
  }
  id v9 = objc_msgSend(v0, sel_SBUISA_systemApertureLeadingConcentricContentLayoutGuide);
  objc_msgSend(v9, sel_layoutFrame);

  return *(void *)&v5;
}

void SystemApertureControlsView.configureSubviews()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView];
  id v2 = objc_msgSend(v1, sel_layer);
  objc_msgSend(v2, sel_setAllowsHitTesting_, SystemApertureControlsView.allowUserInteractionWithSubview.getter() & 1);

  objc_msgSend(v1, sel_setUserInteractionEnabled_, SystemApertureControlsView.allowUserInteractionWithSubview.getter() & 1);
  objc_msgSend(v0, sel_addSubview_, v1);
  OUTLINED_FUNCTION_0_3();
  uint64_t v4 = (*(uint64_t (**)(void))(v3 + 336))();
  if (v4)
  {
    double v5 = (void *)v4;
    objc_msgSend(v0, sel_addSubview_, v4);
  }
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView;
  objc_msgSend(v0, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_trailingActionsView]);
  LODWORD(v7) = 1148846080;
  objc_msgSend(*(id *)&v0[v6], sel_setContentCompressionResistancePriority_forAxis_, 0, v7);
  LODWORD(v8) = 1148846080;
  objc_msgSend(*(id *)&v0[v6], sel_setContentCompressionResistancePriority_forAxis_, 1, v8);
  OUTLINED_FUNCTION_0_3();
  uint64_t v10 = (void *)(*(uint64_t (**)(void))(v9 + 312))();
  objc_msgSend(v0, sel_insertSubview_belowSubview_, v10, v1);

  SystemApertureControlsView.updateLeadingAccessoryView()();
}

id SystemApertureControlsView.createLeadingAccessoryView()()
{
  type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (id *)((char *)v25 - v3);
  OUTLINED_FUNCTION_0_3();
  uint64_t v6 = *(void (**)(void))(v5 + 272);
  v6();
  if (v4[7])
  {
    id v7 = v4[7];
    outlined destroy of ConversationControlsRecipe((uint64_t)v4);
    double v8 = static Layout.ConversationControls.values.getter((uint64_t)v29);
    double v9 = *(double *)&v29[19];
    objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0, v8);
    uint64_t v10 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1C3769610;
    id v12 = objc_msgSend(v7, sel_heightAnchor);
    id v13 = objc_msgSend(v12, sel_constraintEqualToConstant_, v9);

    *(void *)(v11 + 32) = v13;
    id v14 = objc_msgSend(v7, sel_widthAnchor);
    id v15 = objc_msgSend(v14, sel_constraintEqualToConstant_, v9);

    *(void *)(v11 + 40) = v15;
    uint64_t v28 = v11;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_activateConstraints_, isa);
  }
  else
  {
    outlined destroy of ConversationControlsRecipe((uint64_t)v4);
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationControls);
    id v18 = v0;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_4_24();
      uint64_t v27 = swift_slowAlloc();
      v29[0] = v27;
      double v26 = v21;
      *(_DWORD *)uint64_t v21 = 136315138;
      v25[1] = v21 + 4;
      v6();
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v19, v20, "Unable to obtain leadingAccessoryView for recipe: %s", v26, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
    return 0;
  }
  return v7;
}

void SystemApertureControlsView.updateLeadingAccessoryView()()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_leadingAccessoryView], sel_removeFromSuperview);
  id v1 = SystemApertureControlsView.createLeadingAccessoryView()();
  if (v1)
  {
    uint64_t v2 = (uint64_t)v1;
    id v4 = v1;
    SystemApertureControlsView.leadingAccessoryView.setter(v2);
    id v3 = objc_msgSend(v4, sel_layer);
    objc_msgSend(v3, sel_setAllowsHitTesting_, SystemApertureControlsView.allowUserInteractionWithSubview.getter() & 1);

    objc_msgSend(v4, sel_setUserInteractionEnabled_, SystemApertureControlsView.allowUserInteractionWithSubview.getter() & 1);
    objc_msgSend(v0, sel_addSubview_, v4);
  }
}

uint64_t SystemApertureControlsView.allowUserInteractionWithSubview.getter()
{
  uint64_t v0 = type metadata accessor for ConversationControlsRecipe();
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  id v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v12 - v5;
  OUTLINED_FUNCTION_0_3();
  double v8 = *(void (**)(void))(v7 + 272);
  v8();
  LOBYTE(v1) = v6[*(int *)(v1 + 72)];
  uint64_t v9 = outlined destroy of ConversationControlsRecipe((uint64_t)v6);
  if (v1)
  {
    char v10 = 1;
  }
  else
  {
    ((void (*)(uint64_t))v8)(v9);
    uint64_t v12 = 24;
    long long v13 = 0u;
    long long v14 = 0u;
    char v15 = 6;
    char v10 = static ConversationControlsType.== infix(_:_:)((uint64_t)v3);
    outlined destroy of ConversationControlsType((uint64_t)&v12);
    outlined destroy of ConversationControlsRecipe((uint64_t)v3);
  }
  return v10 & 1;
}

id SystemApertureControlsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void SystemApertureControlsView.init(frame:)()
{
}

id SystemApertureControlsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemApertureControlsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SystemApertureFaceTimeControlsView.showAppLaunchPill(buttonType:menuHost:target:action:) in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t protocol witness for SystemApertureFaceTimeControlsView.removeAppLaunchPill() in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlert.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlert.setter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t (*protocol witness for FaceTimeControlsView.ephemeralAlert.modify in conformance SystemApertureControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x108))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlertNotice.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlertTimer.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t protocol witness for FaceTimeControlsView.ephemeralAlertTimer.setter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t (*protocol witness for FaceTimeControlsView.ephemeralAlertTimer.modify in conformance SystemApertureControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for FaceTimeControlsView.showCallDetailsButton.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t protocol witness for FaceTimeControlsView.buttonShelfView.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t protocol witness for FaceTimeControlsView.updateAdditionalView(alpha:) in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t protocol witness for SystemAperturePreferredContentSizeProvider.systemAperturePreferredContentSize.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x1E0))();
}

uint64_t protocol witness for ControlsView.context.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t protocol witness for ControlsView.cnkContentAlpha.setter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t (*protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC0))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

uint64_t protocol witness for ControlsView.recipe.getter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t protocol witness for ControlsView.recipe.setter in conformance SystemApertureControlsView()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t (*protocol witness for ControlsView.recipe.modify in conformance SystemApertureControlsView(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x120))();
  return protocol witness for ControlsView.cnkContentAlpha.modify in conformance SystemApertureOngoingTelephonyControlsView;
}

void specialized closure #1 in FaceTimeControlsView.displayEphemeralAlert()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView), sel_setAlpha_, 0.0);
    uint64_t v5 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x130))(v4);
    objc_msgSend(v5, sel_setAlpha_, 0.0);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView), sel_setAlpha_, 0.0);
    uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v6 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x138))(v4);
    objc_msgSend(v6, sel_setAlpha_, 0.0);

    (*(void (**)(double))((*v5 & *v3) + 0x1C8))(0.0);
  }
}

void specialized closure #2 in FaceTimeControlsView.displayEphemeralAlert()(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xE0))();
    if (v7)
    {
      char v10 = (void *)v7;
      uint64_t v11 = v8;
      char v12 = v9 & 1;
      if ((a1 & 1) == 0)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
        long long v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl(&dword_1C2F90000, v14, v15, "displayEphemeralAlert: statusView.alpha/ephemeralAlertStack.alpha -> 0 didn't finish", v16, 2u);
          MEMORY[0x1C87760E0](v16, -1, -1);
        }

        uint64_t v17 = (void *)(*(uint64_t (**)(id))((*v6 & *v5) + 0x130))(objc_msgSend(*(id *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView), sel_setAlpha_, 0.0));
        objc_msgSend(v17, sel_setAlpha_, 0.0);
      }
      id v18 = *(uint64_t (**)(void))((*v6 & *v5) + 0x130);
      uint64_t v19 = (void *)v18();
      objc_msgSend(v19, sel_setHidden_, 1);

      os_log_type_t v20 = (void *)v18();
      uint64_t v21 = (void *)(*(uint64_t (**)(void))((*v6 & *v20) + 0x88))();

      objc_msgSend(v21, sel_setAttributedText_, v10);
      uint64_t v22 = (void *)v18();
      unint64_t v23 = (void *)(*(uint64_t (**)(void))((*v6 & *v22) + 0xA0))();

      objc_msgSend(v23, sel_setAttributedText_, v11);
      uint64_t v24 = self;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      double v25 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v5;
      *(void *)(v26 + 24) = v10;
      *(void *)(v26 + 32) = v11;
      *(unsigned char *)(v26 + 40) = v12;
      aBlock[4] = partial apply for specialized closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert();
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_99;
      uint64_t v27 = _Block_copy(aBlock);
      uint64_t v28 = v5;
      uint64_t v5 = v10;
      id v29 = v11;
      swift_release();
      objc_msgSend(v24, sel_animateWithDuration_animations_, v27, v25);
      _Block_release(v27);
    }
  }
}

{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t (*v18)(void);
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void aBlock[6];

  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xF8))();
    if (v7)
    {
      char v10 = (void *)v7;
      uint64_t v11 = v8;
      char v12 = v9 & 1;
      if ((a1 & 1) == 0)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
        long long v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl(&dword_1C2F90000, v14, v15, "displayEphemeralAlert: statusView.alpha/ephemeralAlertStack.alpha -> 0 didn't finish", v16, 2u);
          MEMORY[0x1C87760E0](v16, -1, -1);
        }

        uint64_t v17 = (void *)(*(uint64_t (**)(id))((*v6 & *v5) + 0x138))(objc_msgSend(*(id *)((char *)v5 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView), sel_setAlpha_, 0.0));
        objc_msgSend(v17, sel_setAlpha_, 0.0);

        (*(void (**)(double))((*v6 & *v5) + 0x1C8))(0.0);
      }
      id v18 = *(uint64_t (**)(void))((*v6 & *v5) + 0x138);
      uint64_t v19 = (void *)v18();
      objc_msgSend(v19, sel_setHidden_, 1);

      os_log_type_t v20 = (void *)v18();
      uint64_t v21 = (void *)(*(uint64_t (**)(void))((*v6 & *v20) + 0x88))();

      objc_msgSend(v21, sel_setAttributedText_, v10);
      uint64_t v22 = (void *)v18();
      unint64_t v23 = (void *)(*(uint64_t (**)(void))((*v6 & *v22) + 0xA0))();

      objc_msgSend(v23, sel_setAttributedText_, v11);
      uint64_t v24 = self;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      double v25 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v5;
      *(void *)(v26 + 24) = v10;
      *(void *)(v26 + 32) = v11;
      *(unsigned char *)(v26 + 40) = v12;
      aBlock[4] = partial apply for specialized closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert();
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_59;
      uint64_t v27 = _Block_copy(aBlock);
      uint64_t v28 = v5;
      uint64_t v5 = v10;
      id v29 = v11;
      swift_release();
      objc_msgSend(v24, sel_animateWithDuration_animations_, v27, v25);
      _Block_release(v27);
    }
  }
}

void specialized closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v6 = objc_msgSend(*(id *)((char *)a1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView), sel_setAlpha_, 0.0);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  double v8 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x130);
  char v9 = (void *)((uint64_t (*)(id))v8)(v6);
  objc_msgSend(v9, sel_setHidden_, 0);

  char v10 = (void *)v8();
  (*(void (**)(void))((*v7 & *a1) + 0xF8))();
  objc_msgSend(v10, sel_setAlpha_);

  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationControls);
  char v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    char v25 = a4;
    uint64_t v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)os_log_type_t v15 = 136315138;
    (*(void (**)(void))((*v7 & *v12) + 0xB0))();
    uint64_t v17 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v13, v14, "⇢ [%s] 2. Displaying ephemeral alert", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v16, -1, -1);
    MEMORY[0x1C87760E0](v15, -1, -1);

    if ((v25 & 1) == 0) {
      return;
    }
  }
  else
  {

    if ((a4 & 1) == 0) {
      return;
    }
  }
  uint64_t v19 = self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  double v20 = (*(double (**)(void))(*(void *)static Defaults.shared + 1008))();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v12;
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert();
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_105;
  uint64_t v22 = _Block_copy(aBlock);
  unint64_t v23 = v12;
  swift_release();
  id v24 = objc_msgSend(v19, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v22, v20);
  _Block_release(v22);
  (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v23) + 0xD0))(v24);
}

{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  double v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  char v26;
  uint64_t aBlock[6];

  id v6 = objc_msgSend(*(id *)((char *)a1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView), sel_setAlpha_, 0.0);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  double v8 = (*(uint64_t (**)(id, double))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x1C8))(v6, 0.0);
  char v9 = *(uint64_t (**)(void))((*v7 & *a1) + 0x138);
  char v10 = (void *)((uint64_t (*)(uint64_t))v9)(v8);
  objc_msgSend(v10, sel_setHidden_, 0);

  uint64_t v11 = (void *)v9();
  (*(void (**)(void))((*v7 & *a1) + 0xB0))();
  objc_msgSend(v11, sel_setAlpha_);

  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  char v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationControls);
  uint64_t v13 = a1;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = a4;
    uint64_t v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    (*(void (**)(void))((*v7 & *v13) + 0xC8))();
    unint64_t v18 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v14, v15, "⇢ [%s] 2. Displaying ephemeral alert", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v17, -1, -1);
    MEMORY[0x1C87760E0](v16, -1, -1);

    if ((v26 & 1) == 0) {
      return;
    }
  }
  else
  {

    if ((a4 & 1) == 0) {
      return;
    }
  }
  double v20 = self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v21 = (*(double (**)(void))(*(void *)static Defaults.shared + 1008))();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v13;
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert();
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_65;
  unint64_t v23 = _Block_copy(aBlock);
  id v24 = v13;
  swift_release();
  char v25 = objc_msgSend(v20, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v23, v21);
  _Block_release(v23);
  (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v24) + 0xE8))(v25);
}

void specialized closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a2 + *a3);
  id v4 = *(void (**)(void, void, void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x7F8);
  uint64_t v5 = v3;
  v4(0, 0, 0);
}

void specialized closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x130))();
    objc_msgSend(v4, sel_setAlpha_, 0.0);
  }
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x138))();
    objc_msgSend(v4, sel_setAlpha_, 0.0);
  }
}

void specialized closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xE0))();
    outlined consume of ConversationControlsRecipe.View?(v7, v8);
    if (!v7)
    {
      if ((a1 & 1) == 0)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationControls);
        char v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          char v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v12 = 0;
          _os_log_impl(&dword_1C2F90000, v10, v11, "cleanUpEphemeralAlert: ephemeralAlertStack.alpha -> 0 didn't finish", v12, 2u);
          MEMORY[0x1C87760E0](v12, -1, -1);
        }

        uint64_t v13 = (void *)(*(uint64_t (**)(void))((*v6 & *v5) + 0x130))();
        objc_msgSend(v13, sel_setAlpha_, 0.0);
      }
      os_log_type_t v14 = *(uint64_t (**)(void))((*v6 & *v5) + 0x130);
      os_log_type_t v15 = (void *)v14();
      objc_msgSend(v15, sel_setHidden_, 1);

      uint64_t v16 = (void *)v14();
      uint64_t v17 = (void *)(*(uint64_t (**)(void))((*v6 & *v16) + 0x88))();

      objc_msgSend(v17, sel_setAttributedText_, 0);
      unint64_t v18 = (void *)v14();
      uint64_t v19 = (void *)(*(uint64_t (**)(void))((*v6 & *v18) + 0xA0))();

      objc_msgSend(v19, sel_setAttributedText_, 0);
      double v20 = self;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      double v21 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v5;
      unint64_t v31 = partial apply for specialized closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
      uint64_t v32 = v22;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      id v29 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v30 = &block_descriptor_119_0;
      unint64_t v23 = _Block_copy(&aBlock);
      id v24 = v5;
      swift_release();
      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v31 = partial apply for specialized closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
      uint64_t v32 = v25;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      id v29 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v30 = &block_descriptor_123_0;
      uint64_t v26 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v20, sel_animateWithDuration_animations_completion_, v23, v26, v21);
      _Block_release(v26);
      _Block_release(v23);
    }
  }
}

{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t (*v14)(void);
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  double v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t aBlock;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xF8))();
    outlined consume of ConversationControlsRecipe.View?(v7, v8);
    if (!v7)
    {
      if ((a1 & 1) == 0)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationControls);
        char v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          char v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v12 = 0;
          _os_log_impl(&dword_1C2F90000, v10, v11, "cleanUpEphemeralAlert: ephemeralAlertStack.alpha -> 0 didn't finish", v12, 2u);
          MEMORY[0x1C87760E0](v12, -1, -1);
        }

        uint64_t v13 = (void *)(*(uint64_t (**)(void))((*v6 & *v5) + 0x138))();
        objc_msgSend(v13, sel_setAlpha_, 0.0);
      }
      os_log_type_t v14 = *(uint64_t (**)(void))((*v6 & *v5) + 0x138);
      os_log_type_t v15 = (void *)v14();
      objc_msgSend(v15, sel_setHidden_, 1);

      uint64_t v16 = (void *)v14();
      uint64_t v17 = (void *)(*(uint64_t (**)(void))((*v6 & *v16) + 0x88))();

      objc_msgSend(v17, sel_setAttributedText_, 0);
      unint64_t v18 = (void *)v14();
      uint64_t v19 = (void *)(*(uint64_t (**)(void))((*v6 & *v18) + 0xA0))();

      objc_msgSend(v19, sel_setAttributedText_, 0);
      double v20 = self;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      double v21 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v5;
      unint64_t v31 = partial apply for specialized closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
      uint64_t v32 = v22;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      id v29 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v30 = &block_descriptor_79;
      unint64_t v23 = _Block_copy(&aBlock);
      id v24 = v5;
      swift_release();
      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v31 = partial apply for specialized closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
      uint64_t v32 = v25;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v28 = 1107296256;
      id v29 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v30 = &block_descriptor_83_0;
      uint64_t v26 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v20, sel_animateWithDuration_animations_completion_, v23, v26, v21);
      _Block_release(v26);
      _Block_release(v23);
    }
  }
}

uint64_t specialized closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(void *a1)
{
  uint64_t v1 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xF8);
  id v2 = *(id *)((char *)a1 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView);
  v1();
  objc_msgSend(v2, sel_setAlpha_);

  return ((uint64_t (*)(void))v1)();
}

{
  void *v2;
  void (*v3)(void);
  id v4;
  uint64_t v5;

  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB0);
  id v4 = *(id *)((char *)a1 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView);
  v3();
  objc_msgSend(v4, sel_setAlpha_);

  uint64_t v5 = ((uint64_t (*)(void))v3)();
  return (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x1C8))(v5);
}

void specialized closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = &lazy protocol witness table cache variable for type UUID and conformance UUID;
    uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
    if ((a1 & 1) == 0)
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
      uint64_t v9 = v5;
      char v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        char v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v31 = v13;
        *(_DWORD *)char v12 = 136315138;
        os_log_type_t v14 = v7;
        (*(void (**)(void))((*v7 & *v9) + 0xF8))();
        uint64_t v15 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v10, v11, "cleanUpEphemeralAlert: statusView.alpha -> %s didn't finish", v12, 0xCu);
        swift_arrayDestroy();
        uint64_t v17 = v13;
        id v6 = &lazy protocol witness table cache variable for type UUID and conformance UUID;
        MEMORY[0x1C87760E0](v17, -1, -1);
        MEMORY[0x1C87760E0](v12, -1, -1);
      }
      else
      {

        os_log_type_t v14 = v7;
      }
      unint64_t v18 = *(void (**)(void))((*v14 & *v9) + 0xF8);
      id v19 = *(id *)((char *)v9 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_statusView);
      v18();
      objc_msgSend(v19, sel_setAlpha_);

      v18();
      uint64_t v7 = v14;
    }
    if (v6[332] != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationControls);
    double v21 = v5;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v31 = v25;
      *(_DWORD *)id v24 = 136315138;
      (*(void (**)(void))((*v7 & *v21) + 0xB0))();
      uint64_t v26 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v22, v23, "⇢ [%s] 4. Removed ephemeral alert, displaying status view", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v25, -1, -1);
      MEMORY[0x1C87760E0](v24, -1, -1);
    }
    else
    {
    }
    uint64_t v28 = *(void **)((char *)v21 + OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_controlsManager);
    id v29 = *(void (**)(void))((*v7 & *v28) + 0xA00);
    uint64_t v30 = v28;
    v29();
  }
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void (*v30)(void);
  void *v31;
  uint64_t v32;

  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = &lazy protocol witness table cache variable for type UUID and conformance UUID;
    uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
    if ((a1 & 1) == 0)
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
      uint64_t v9 = v5;
      char v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        char v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v32 = v13;
        *(_DWORD *)char v12 = 136315138;
        os_log_type_t v14 = v7;
        (*(void (**)(void))((*v7 & *v9) + 0xB0))();
        uint64_t v15 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v10, v11, "cleanUpEphemeralAlert: statusView.alpha -> %s didn't finish", v12, 0xCu);
        swift_arrayDestroy();
        uint64_t v17 = v13;
        id v6 = &lazy protocol witness table cache variable for type UUID and conformance UUID;
        MEMORY[0x1C87760E0](v17, -1, -1);
        MEMORY[0x1C87760E0](v12, -1, -1);
      }
      else
      {

        os_log_type_t v14 = v7;
      }
      unint64_t v18 = *(void (**)(void))((*v14 & *v9) + 0xB0);
      id v19 = *(id *)((char *)v9 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_statusView);
      v18();
      objc_msgSend(v19, sel_setAlpha_);

      uint64_t v20 = ((uint64_t (*)(void))v18)();
      (*(void (**)(uint64_t))((*v14 & *v9) + 0x1C8))(v20);
      uint64_t v7 = v14;
    }
    if (v6[332] != -1) {
      swift_once();
    }
    double v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationControls);
    uint64_t v22 = v5;
    os_log_type_t v23 = Logger.logObject.getter();
    id v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v32 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      (*(void (**)(void))((*v7 & *v22) + 0xC8))();
      unint64_t v27 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v23, v24, "⇢ [%s] 4. Removed ephemeral alert, displaying status view", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v26, -1, -1);
      MEMORY[0x1C87760E0](v25, -1, -1);
    }
    else
    {
    }
    id v29 = *(void **)((char *)v22 + OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_controlsManager);
    uint64_t v30 = *(void (**)(void))((*v7 & *v29) + 0xA00);
    uint64_t v31 = v29;
    v30();
  }
}

uint64_t type metadata accessor for SystemApertureControlsView()
{
  uint64_t result = type metadata singleton initialization cache for SystemApertureControlsView;
  if (!type metadata singleton initialization cache for SystemApertureControlsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C34EBE84()
{
  return swift_deallocObject();
}

id partial apply for closure #3 in SystemApertureControlsView.layoutSubviews()()
{
  return closure #3 in SystemApertureControlsView.layoutSubviews()(*(void **)(v0 + 16), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

double UIEdgeInsetsInsetRect_1(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a3 - (a6 + a8);
}

uint64_t sub_1C34EBEE0()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in SystemApertureControlsView.layoutSubviews()()
{
  return closure #2 in SystemApertureControlsView.layoutSubviews()(*(void **)(v0 + 16), *(void *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t outlined copy of ConversationControlsRecipe.Actions?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 <= 0xFDu) {
    return outlined copy of ConversationControlsRecipe.Actions(result, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t outlined consume of ConversationControlsRecipe.Actions?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 <= 0xFDu) {
    return outlined consume of ConversationControlsRecipe.Actions();
  }
  return result;
}

uint64_t dispatch thunk of SystemApertureControlsStatusView.recipe.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SystemApertureControlsStatusView.recipe.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SystemApertureControlsStatusView.recipe.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SystemApertureControlsStatusView.titleLabelGlyphInset.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t ObjC metadata update function for SystemApertureControlsView()
{
  return type metadata accessor for SystemApertureControlsView();
}

uint64_t type metadata completion function for SystemApertureControlsView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SystemApertureControlsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemApertureControlsView);
}

uint64_t dispatch thunk of SystemApertureControlsView.cnkContentAlpha.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SystemApertureControlsView.cnkContentAlpha.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SystemApertureControlsView.cnkContentAlpha.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SystemApertureControlsView.context.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SystemApertureControlsView.context.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SystemApertureControlsView.context.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SystemApertureControlsView.ephemeralAlertTimer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SystemApertureControlsView.ephemeralAlertTimer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SystemApertureControlsView.ephemeralAlertTimer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SystemApertureControlsView.ephemeralAlert.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SystemApertureControlsView.ephemeralAlert.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SystemApertureControlsView.ephemeralAlert.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SystemApertureControlsView.recipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SystemApertureControlsView.recipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SystemApertureControlsView.recipe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SystemApertureControlsView.showCallDetailsButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SystemApertureControlsView.ephemeralAlertNotice.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SystemApertureControlsView.buttonShelfView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of SystemApertureControlsView.__allocating_init(recipe:controlsManager:context:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t dispatch thunk of SystemApertureControlsView.updateAdditionalView(alpha:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of SystemApertureControlsView.showAppLaunchPill(buttonType:menuHost:target:action:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of SystemApertureControlsView.removeAppLaunchPill()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of SystemApertureControlsView.systemAperturePreferredContentSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

ValueMetadata *type metadata accessor for SystemApertureControlsView.Constants()
{
  return &type metadata for SystemApertureControlsView.Constants;
}

uint64_t outlined init with copy of ConversationControlsRecipe(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1C34EC658()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in FaceTimeControlsView.displayEphemeralAlert()()
{
  specialized closure #1 in FaceTimeControlsView.displayEphemeralAlert()(v0);
}

{
  uint64_t v0;

  specialized closure #1 in FaceTimeControlsView.displayEphemeralAlert()(v0);
}

void partial apply for specialized closure #2 in FaceTimeControlsView.displayEphemeralAlert()(char a1)
{
  specialized closure #2 in FaceTimeControlsView.displayEphemeralAlert()(a1, v1);
}

{
  uint64_t v1;

  specialized closure #2 in FaceTimeControlsView.displayEphemeralAlert()(a1, v1);
}

void partial apply for specialized closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()()
{
  specialized closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

{
  uint64_t v0;

  specialized closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

void partial apply for specialized closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(uint64_t a1)
{
  specialized closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(a1, *(void *)(v1 + 16), &OBJC_IVAR____TtC15ConversationKit26SystemApertureControlsView_controlsManager);
}

{
  uint64_t v1;

  specialized closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(a1, *(void *)(v1 + 16), &OBJC_IVAR____TtC15ConversationKit27ConversationHUDControlsView_controlsManager);
}

void partial apply for specialized closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert()()
{
  specialized closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert()(v0);
}

{
  uint64_t v0;

  specialized closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert()(v0);
}

void partial apply for specialized closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1)
{
  specialized closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(a1, v1);
}

{
  uint64_t v1;

  specialized closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(a1, v1);
}

uint64_t partial apply for specialized closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()()
{
  return specialized closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(*(void **)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(*(void **)(v0 + 16));
}

void partial apply for specialized closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1)
{
  specialized closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(a1, v1);
}

{
  uint64_t v1;

  specialized closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(a1, v1);
}

uint64_t objectdestroy_55Tm()
{
  return swift_deallocObject();
}

uint64_t sub_1C34EC764()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of CallCenterProvider.currentAudioAndVideoCalls.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CallCenterProvider.activeConversations.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CallCenterProvider.callContainer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CallCenterProvider.localVideoProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CallCenterProvider.audioRoute.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CallCenterProvider.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CallCenterProvider.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of CallCenterProvider.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CallCenterProvider.conversationManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CallCenterProvider.videoDeviceController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of CallCenterProvider.disconnect(_:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of CallCenterProvider.answer(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of CallCenterProvider.activeConversation(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of CallCenterProvider.avLessConversation(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of CallCenterProvider.updateConversation(uuid:presentationContexts:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of CallCenterProvider.downgradeToAVLess(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of CallCenterProvider.setGridDisplayMode(mode:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of CallCenterProvider.buzz(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of CallCenterProvider.kick(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

uint64_t dispatch thunk of CallCenterProvider.setDownlinkMuted(_:forRemoteParticipantsIn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of CallCenterProvider.approve(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of CallCenterProvider.reject(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 176))();
}

uint64_t dispatch thunk of CallCenterProvider.generateLink(for:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 184))();
}

uint64_t dispatch thunk of CallCenterProvider.ignoreLetMeIn(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t dispatch thunk of CallCenterProvider.addScreenSharingType(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 200))();
}

uint64_t dispatch thunk of CallCenterProvider.calls(passingTest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 208))();
}

uint64_t dispatch thunk of CallCenterProvider.requestVideoUpgrade(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 216))();
}

uint64_t dispatch thunk of CallCenterProvider.launchApp(forJoin:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t dispatch thunk of CallCenterProvider.launchApp(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 232))();
}

uint64_t dispatch thunk of CallCenterProvider.requestScreenSharingPicker(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 240))();
}

uint64_t dispatch thunk of CallCenterProvider.pttStartTransmit(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 248))();
}

uint64_t dispatch thunk of CallCenterProvider.pttStopTransmit(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 256))();
}

uint64_t dispatch thunk of CallCenterProvider.pttLeaveChannel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 264))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:stateChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:localVideoToggledFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:remoteMembersChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:activeRemoteParticipantsChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:pendingMembersChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:otherInvitedHandlesChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:ignoreLetMeInRequestsChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:rejectedMembersChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:oneToOneModeChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:avModeChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:resolvedAudioVideoModeChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:removedActiveConversation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:addedActiveConversation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:letMeInRequestStateChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:linkChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:linkInvitedMemberHandlesChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:participantMediaPrioritiesChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:conversation:participant:didReact:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 144))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:conversation:participantDidStopReacting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:migratingFrom:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 160))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:mutedTalkingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenterAudioRoutesDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:activitySessionsChangedFor:fromOldConversation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 184))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:audioPausedChangedFor:remoteParticipantWithIdentifier:updatedAudioPaused:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 192))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:noticePosted:in:fromParticipant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 200))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:updatedGroupNameForConversation:withGroupPhotoData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 208))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:launchStateChanged:activitySession:conversation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 216))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:remoteScreenShareAttributesChanged:isLocallySharing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 224))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:buzzedMemberFor:member:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 232))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:collaborationsChangedFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 240))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:addedCollaborationNotice:forParticipant:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 248))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:cameraMixedWithScreenDidChangeFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 256))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:screenSharingAvailablilityChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 264))();
}

uint64_t dispatch thunk of CallCenterProviderDelegate.callCenter(_:screenSharingRequestsChangedFor:fromOldConversation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 272))();
}

void BannerPresentationManager.presentNewBanner(as:type:activityUUID:fromActivityManager:completion:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_63();
  uint64_t v15 = (void *)(*(uint64_t (**)(void))(v14 + 384))();
  if (!v15)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = (void *)OUTLINED_FUNCTION_30(v33, (uint64_t)static Logger.banners);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_2_12(v35))
    {
      uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v36);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v37, v38, "Unable to obtain ConversationControlsManager");
      OUTLINED_FUNCTION_3();
    }

    if (!v5) {
      goto LABEL_58;
    }
    lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_119_4(v39, 2);
    v5();
    goto LABEL_20;
  }
  id v130 = v15;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BNBannerSource);
  uint64_t v16 = BannerPresentationManager.requesterIdentifier.getter();
  id v18 = @nonobjc BNBannerSource.__allocating_init(for:forRequesterIdentifier:)(0, v16, v17);
  if (!v18)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    id v41 = (void *)OUTLINED_FUNCTION_30(v40, (uint64_t)static Logger.banners);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_2_12(v42))
    {
      uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v43);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v44, v45, "Unable to obtain banner source");
      OUTLINED_FUNCTION_3();
    }

    if (!v5)
    {
      OUTLINED_FUNCTION_28();
      goto LABEL_22;
    }
    lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_119_4(v46, 3);
    v5();

LABEL_20:
    OUTLINED_FUNCTION_28();
LABEL_22:

    return;
  }
  id v19 = v18;
  id v132 = 0;
  id v129 = objc_msgSend(v18, sel_layoutDescriptionWithError_, &v132);
  if (v129)
  {
    LODWORD(v121) = v7;
    double v122 = v13;
    id v128 = v3;
    uint64_t v126 = v5;
    uint64_t v20 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBannerDismissalTimer];
    id v21 = v132;
    objc_msgSend(v20, sel_invalidate);
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_systemApertureElementDismissalTimer], sel_invalidate);
    LODWORD(v123) = BannerPresentationManager.shouldPresentSystemApertureElementFromBanner(type:)(v11);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.banners);
    outlined init with copy of ConversationControlsType(v11, (uint64_t)&v132);
    outlined init with copy of ConversationControlsType(v11, (uint64_t)v137);
    uint64_t v119 = v23;
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    uint64_t v125 = (uint64_t)v19;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = OUTLINED_FUNCTION_15_1();
      uint64_t v20 = (void *)OUTLINED_FUNCTION_14_3();
      char v131 = v20;
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v27 = ConversationControlsType.debugDescription.getter();
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)&v131);
      OUTLINED_FUNCTION_124_3(v29);
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)&v132);
      *(_WORD *)(v26 + 12) = 2080;
      ConversationControlsType.associatedNotice.getter((uint64_t)v136);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notice?);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v131);
      OUTLINED_FUNCTION_124_3(v32);
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v137);
      _os_log_impl(&dword_1C2F90000, v24, v25, "presentNewBanner type:%s, notice:%s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      outlined destroy of ConversationControlsType((uint64_t)&v132);
      outlined destroy of ConversationControlsType((uint64_t)v137);
    }

    outlined init with copy of ConversationControlsType(v11, (uint64_t)&v132);
    id v60 = v130;
    uint64_t v127 = (void *)BannerPresentationManager.requesterIdentifier.getter();
    uint64_t v120 = v61;
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_5_3();
    MEMORY[0x1F4188790](v62);
    OUTLINED_FUNCTION_16_0();
    (*(void (**)(void *, uint64_t))(v63 + 16))(v20, v9);
    uint64_t v64 = one-time initialization token for shared;
    id v124 = v129;
    if (v64 != -1) {
      swift_once();
    }
    id v130 = v60;
    uint64_t v65 = static Defaults.shared;
    uint64_t v66 = one-time initialization token for shared;
    swift_retain();
    if (v66 != -1) {
      swift_once();
    }
    uint64_t v67 = static Features.shared;
    double v68 = self;
    id v69 = v67;
    id v70 = objc_msgSend(v68, sel_defaultCenter);
    double v71 = (char *)objc_allocWithZone((Class)type metadata accessor for SystemBannerHostViewController());
    double v72 = v1;
    uint64_t v116 = v71;
    char v73 = (char)v123;
    uint64_t v115 = (uint64_t)v69;
    double v74 = v130;
    double v75 = specialized SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(v130, (uint64_t)v122, (uint64_t)&v132, (uint64_t)v1, v123 & 1, v127, v120, 0, 0, v129, v65, v115, v70, (uint64_t)v20, v121 & 1, v116);
    OUTLINED_FUNCTION_0_91();
    if ((*(uint64_t (**)(void))(v76 + 744))())
    {
      uint64_t v77 = v75;
      BannerPresentationManager.presentedBanner.setter(v75);
      outlined init with copy of ConversationControlsType(v11, (uint64_t)&v132);
      os_log_type_t v118 = v72;
      if (v135 == 3)
      {
        outlined destroy of ConversationControlsType((uint64_t)&v132);
      }
      else if (v135 != 6 || v132 != (id)25 || (OUTLINED_FUNCTION_36_1(v134, v133), v78))
      {
        outlined destroy of ConversationControlsType((uint64_t)&v132);
        goto LABEL_52;
      }
      SBSUndimScreen();
LABEL_52:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSSecureCoding)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C376A6F0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v88;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
      *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 64) = v89;
      *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(1);
      *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 88) = v90;
      *(NSNumber *)(inited + 96) = NSNumber.init(BOOLeanLiteral:)(1);
      *(void *)(inited + 104) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 112) = v91;
      *(void *)(inited + 120) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithBool_, v73 & 1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
      uint64_t v92 = Dictionary.init(dictionaryLiteral:)();
      outlined init with copy of ConversationControlsType(v11, (uint64_t)v137);
      outlined init with copy of ConversationControlsType((uint64_t)v137, (uint64_t)v136);
      uint64_t v93 = swift_allocObject();
      id v94 = (void *)v125;
      *(void *)(v93 + 16) = v125;
      *(void *)(v93 + 24) = v77;
      *(void *)(v93 + 32) = v92;
      outlined init with take of ConversationControlsType(v137, (_OWORD *)(v93 + 40));
      double v95 = v126;
      double v96 = v128;
      id v129 = (id)v93;
      *(void *)(v93 + 88) = v126;
      *(void *)(v93 + 96) = v96;
      double v97 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v118) + 0xE8);
      uint64_t v98 = v77;
      id v99 = v95;
      double v100 = v98;
      swift_bridgeObjectRetain();
      id v101 = v94;
      uint64_t v102 = _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)v95);
      double v103 = (void *)v97(v102);
      if (v103)
      {
        double v104 = v103;
        if ((objc_msgSend(v103, sel_respondsToSelector_, sel_bannerPresentationManagerDismissSBBannerIfNeeded) & 1) != 0&& objc_msgSend(v104, sel_bannerPresentationManagerDismissSBBannerIfNeeded))
        {
          outlined destroy of ConversationControlsType((uint64_t)v136);
          swift_bridgeObjectRelease();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          uint64_t v125 = static OS_dispatch_queue.main.getter();
          v134.i64[1] = (uint64_t)partial apply for closure #1 in BannerPresentationManager.presentNewBanner(as:type:activityUUID:fromActivityManager:completion:);
          id v135 = v129;
          id v132 = (id)MEMORY[0x1E4F143A8];
          v133.i64[0] = 1107296256;
          v133.i64[1] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
          v134.i64[0] = (uint64_t)&block_descriptor_87;
          double v122 = _Block_copy(&v132);
          swift_retain();
          swift_release();
          uint64_t v127 = (void *)type metadata accessor for DispatchQoS();
          id v128 = &v117;
          OUTLINED_FUNCTION_5_3();
          uint64_t v126 = v105;
          MEMORY[0x1F4188790](v106);
          OUTLINED_FUNCTION_21();
          uint64_t v120 = v108 - v107;
          static DispatchQoS.unspecified.getter();
          type metadata accessor for DispatchWorkItemFlags();
          uint64_t v123 = &v117;
          OUTLINED_FUNCTION_5_3();
          uint64_t v121 = v109;
          MEMORY[0x1F4188790](v110);
          OUTLINED_FUNCTION_61();
          id v132 = (id)MEMORY[0x1E4FBC860];
          _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          double v111 = v122;
          double v112 = (void *)v125;
          MEMORY[0x1C8773BA0](0, v120, v99, v122);
          swift_unknownObjectRelease();
          _Block_release(v111);

          swift_release();
          OUTLINED_FUNCTION_26_2();
          v113();
          OUTLINED_FUNCTION_26_2();
          v114();
          goto LABEL_58;
        }
        swift_unknownObjectRelease();
      }
      closure #1 in BannerPresentationManager.presentNewBanner(as:type:activityUUID:fromActivityManager:completion:)(v101, (uint64_t)v100, v92, (uint64_t)v136, v95);
      swift_release();

      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v136);
      goto LABEL_58;
    }
    double v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.error.getter();
    double v81 = (void *)v125;
    if (OUTLINED_FUNCTION_105(v80))
    {
      uint64_t v82 = (uint8_t *)OUTLINED_FUNCTION_8_0();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl(&dword_1C2F90000, v79, (os_log_type_t)v65, "Unable to create banner for presentation", v82, 2u);
      OUTLINED_FUNCTION_3();
    }

    BannerPresentationManager.presentedBanner.setter(0);
    uint64_t v83 = v126;
    if (!v126)
    {

      goto LABEL_58;
    }
    lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
    uint64_t v84 = OUTLINED_FUNCTION_29();
    *id v85 = 6;
    v83();

    uint64_t v59 = (void *)v84;
  }
  else
  {
    id v49 = v132;
    uint64_t v50 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    id v52 = (void *)OUTLINED_FUNCTION_30(v51, (uint64_t)static Logger.conversationControls);
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_2_12(v53))
    {
      uint64_t v54 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v54);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v55, v56, "Unable to obtain layout description for banner");
      OUTLINED_FUNCTION_3();
    }

    if (!v5)
    {

      goto LABEL_58;
    }
    lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
    uint64_t v57 = OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_119_4(v58, 5);
    v5();

    uint64_t v59 = (void *)v57;
  }

LABEL_58:
  OUTLINED_FUNCTION_28();
}

void BannerPresentationManager.presentBanner(as:type:activityTypeForNewBanner:activityUUID:fromActivityManager:reply:)()
{
  OUTLINED_FUNCTION_31();
  id v1 = v0;
  uint64_t v3 = v2;
  uint64_t v111 = v4;
  LODWORD(v109) = v5;
  uint64_t v108 = v6;
  uint64_t v107 = (uint64_t *)v7;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.banners);
  outlined init with copy of ConversationControlsType((uint64_t)v9, (uint64_t)&v112);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = OUTLINED_FUNCTION_15_1();
    v116[0] = OUTLINED_FUNCTION_14_3();
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v106 = v9;
    id v110 = v1;
    outlined init with copy of ConversationControlsType((uint64_t)&v112, (uint64_t)v117);
    uint64_t v17 = v11;
    uint64_t v18 = specialized >> prefix<A>(_:)((uint64_t)v117);
    uint64_t v19 = v13;
    uint64_t v20 = v3;
    unint64_t v22 = v21;
    outlined destroy of SystemUpdateNotice?((uint64_t)v117, &demangling cache variable for type metadata for ConversationControlsType?);
    uint64_t v23 = v18;
    uint64_t v11 = v17;
    *(void *)&v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ConversationControlsType((uint64_t)&v112);
    *(_WORD *)(v16 + 12) = 2080;
    *(void *)&v117[0] = v17;
    uint64_t v24 = String.init<A>(reflecting:)();
    *(void *)&v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v116);
    id v1 = v110;
    uint64_t v9 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v3 = v20;
    uint64_t v13 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v14, v15, "Requesting banner presentation for %s as %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    outlined destroy of ConversationControlsType((uint64_t)&v112);
  }

  if (BannerPresentationManager.callForRequestedControlsType(_:)((uint64_t)v9))
  {
    uint64_t v27 = v26;
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v27 + 136))(ObjectType, v27))
    {
      uint64_t v29 = (void *)Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_2_12(v30))
      {
        unint64_t v31 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_231(v31);
        uint64_t v34 = "Call is screening, aborting banner presentation";
LABEL_17:
        OUTLINED_FUNCTION_374(&dword_1C2F90000, v32, v33, v34);
        OUTLINED_FUNCTION_3();
        goto LABEL_18;
      }
      goto LABEL_18;
    }
    uint64_t v44 = OUTLINED_FUNCTION_149_3();
    if (v45(v44))
    {
      uint64_t v29 = (void *)Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_2_12(v46))
      {
        double v47 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_231(v47);
        uint64_t v34 = "Call wants hold music, aborting banner presentation";
        goto LABEL_17;
      }
LABEL_18:

      goto LABEL_19;
    }
    uint64_t v106 = (uint64_t (*)(void))v13;
    uint64_t v52 = (uint64_t)v9;
    uint64_t v105 = v11;
    OUTLINED_FUNCTION_129_4();
    uint64_t v9 = *(uint64_t (**)(void))(v53 + 232);
    OUTLINED_FUNCTION_135_3();
    id v110 = (id)v9();
    if (v110)
    {
      OUTLINED_FUNCTION_129_4();
      uint64_t v55 = (void *)(*(uint64_t (**)(void))(v54 + 384))();
      if (v55)
      {
        id v104 = v55;
        OUTLINED_FUNCTION_6_63();
        if (((*(uint64_t (**)(void))(v56 + 88))() & 1) == 0)
        {
          OUTLINED_FUNCTION_6_63();
          double v58 = (void *)(*(uint64_t (**)(void))(v57 + 656))();
          if (v58)
          {
            uint64_t v59 = v58;
            uint64_t v9 = (uint64_t (*)(void))objc_msgSend(v58, sel_state);

            if (!v9)
            {
              outlined init with copy of ConversationControlsType(v52, (uint64_t)&v112);
              if (v115 == 1)
              {
                outlined destroy of ConversationControlsType((uint64_t)&v112);
              }
              else if (v115 != 6 || v112 != 4 || (OUTLINED_FUNCTION_36_1(v114, v113), v98))
              {
                outlined destroy of ConversationControlsType((uint64_t)&v112);
                uint64_t v99 = OUTLINED_FUNCTION_149_3();
                if ((v100(v99) & 1) == 0)
                {
                  uint64_t v88 = (void *)Logger.logObject.getter();
                  os_log_type_t v101 = static os_log_type_t.error.getter();
                  if (!OUTLINED_FUNCTION_2_12(v101)) {
                    goto LABEL_47;
                  }
                  uint64_t v102 = (_WORD *)OUTLINED_FUNCTION_8_0();
                  OUTLINED_FUNCTION_231(v102);
                  goto LABEL_46;
                }
              }
            }
          }
        }
        outlined init with copy of ConversationControlsType(v52, (uint64_t)&v112);
        int v60 = v115;
        outlined destroy of ConversationControlsType((uint64_t)&v112);
        if (v60
          || (ConversationControlsType.associatedNotice.getter((uint64_t)&v112),
              uint64_t v9 = (uint64_t (*)(void))v114.i64[0],
              outlined destroy of SystemUpdateNotice?((uint64_t)&v112, &demangling cache variable for type metadata for Notice?), v9))
        {
          uint64_t v61 = OUTLINED_FUNCTION_20();
          swift_unknownObjectWeakInit();
          outlined init with copy of ConversationControlsType(v52, (uint64_t)v117);
          outlined init with copy of FeatureEligibility?((uint64_t)v107, (uint64_t)v116, &demangling cache variable for type metadata for ConversationControlsType?);
          uint64_t v62 = type metadata accessor for UUID();
          uint64_t v107 = &v103;
          OUTLINED_FUNCTION_5_3();
          uint64_t v64 = v63;
          uint64_t v66 = *(void *)(v65 + 64);
          MEMORY[0x1F4188790](v67);
          uint64_t v68 = v111;
          id v69 = (char *)&v103 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
          OUTLINED_FUNCTION_2_1();
          v70();
          unint64_t v71 = (*(unsigned __int8 *)(v64 + 80) + 137) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
          uint64_t v72 = v71 + v66;
          uint64_t v73 = swift_allocObject();
          *(void *)(v73 + 16) = v61;
          *(void *)(v73 + 24) = v68;
          uint64_t v74 = v105;
          *(void *)(v73 + 32) = v3;
          *(void *)(v73 + 40) = v74;
          outlined init with take of ConversationControlsType(v117, (_OWORD *)(v73 + 48));
          outlined init with take of ConversationControlsType?((uint64_t)v116, v73 + 96);
          (*(void (**)(unint64_t, char *, uint64_t))(v64 + 32))(v73 + v71, v69, v62);
          *(unsigned char *)(v73 + v72) = v109 & 1;
          v114.i64[1] = (uint64_t)partial apply for closure #1 in BannerPresentationManager.presentBanner(as:type:activityTypeForNewBanner:activityUUID:fromActivityManager:reply:);
          uint64_t v115 = v73;
          uint64_t v112 = MEMORY[0x1E4F143A8];
          v113.i64[0] = 1107296256;
          v113.i64[1] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
          v114.i64[0] = (uint64_t)&block_descriptor_9_1;
          double v75 = _Block_copy(&v112);
          _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v68);
          swift_release();
          OUTLINED_FUNCTION_52_0();
          objc_msgSend(v110, sel_bannerPresentationManagerRequestToPresentBanner_, v75);
          _Block_release(v75);

LABEL_31:
          swift_unknownObjectRelease();
          goto LABEL_32;
        }
        uint64_t v88 = (void *)Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.error.getter();
        if (!OUTLINED_FUNCTION_2_12(v89))
        {
LABEL_47:

          if (v111)
          {
            lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
            uint64_t v94 = OUTLINED_FUNCTION_29();
            uint64_t v96 = OUTLINED_FUNCTION_49_16(v94, v95);
            v97(v96);

            swift_unknownObjectRelease();
            goto LABEL_21;
          }

          goto LABEL_31;
        }
        uint64_t v90 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_231(v90);
        uint64_t v93 = "Attempted to present a notice without necessary metadata";
LABEL_46:
        OUTLINED_FUNCTION_374(&dword_1C2F90000, v91, v92, v93);
        OUTLINED_FUNCTION_3();
        goto LABEL_47;
      }
      swift_unknownObjectRelease();
    }
    id v110 = v1;
    uint64_t v76 = v1;
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v109 = v3;
      uint64_t v79 = 7104878;
      uint64_t v80 = OUTLINED_FUNCTION_15_1();
      uint64_t v112 = OUTLINED_FUNCTION_14_3();
      *(_DWORD *)uint64_t v80 = 136315394;
      OUTLINED_FUNCTION_135_3();
      uint64_t v81 = v9();
      if (v81)
      {
        *(void *)&v117[0] = v81;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKBannerPresentationDelegate);
        uint64_t v82 = String.init<A>(reflecting:)();
        unint64_t v84 = v83;
      }
      else
      {
        unint64_t v84 = 0xE300000000000000;
        uint64_t v82 = 7104878;
      }
      *(void *)&v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v80 + 12) = 2080;
      uint64_t v85 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v76) + 0x180))();
      if (v85)
      {
        *(void *)&v117[0] = v85;
        type metadata accessor for ConversationControlsManager(0);
        uint64_t v79 = String.init<A>(reflecting:)();
        unint64_t v87 = v86;
      }
      else
      {
        unint64_t v87 = 0xE300000000000000;
      }
      uint64_t v9 = (uint64_t (*)(void))(v80 + 14);
      *(void *)&v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v87, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v77, v78, "Attempted to present a banner without a presentationDelegate %s and/or a controlsManager %s", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
LABEL_19:
    if (v111)
    {
      lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
      uint64_t v48 = OUTLINED_FUNCTION_29();
      uint64_t v50 = OUTLINED_FUNCTION_49_16(v48, v49);
      v51(v50);
LABEL_21:
      swift_unknownObjectRelease();
      goto LABEL_22;
    }
LABEL_32:
    swift_unknownObjectRelease();
    goto LABEL_33;
  }
  os_log_type_t v35 = (void *)Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_2_12(v36))
  {
    uint64_t v37 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_231(v37);
    OUTLINED_FUNCTION_374(&dword_1C2F90000, v38, v39, "No valid call found for requested type, aborting banner presentation");
    OUTLINED_FUNCTION_3();
  }

  if (v111)
  {
    lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
    uint64_t v40 = OUTLINED_FUNCTION_29();
    uint64_t v42 = OUTLINED_FUNCTION_49_16(v40, v41);
    v43(v42);
LABEL_22:
  }
LABEL_33:
  OUTLINED_FUNCTION_28();
}

id protocol witness for CallUIPresentationStateProvider.isPresentingFullScreenCallUI.getter in conformance BannerPresentationManager()
{
  return objc_msgSend(v0, sel_isPresentingFullScreenCallUI);
}

BOOL BannerPresentationError.isApertureError.getter()
{
  return *v0 - 9 < 2;
}

BOOL static BannerPresentationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BannerPresentationError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BannerPresentationError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id BannerPresentationManager.activityManager.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_activityManager);
}

id BannerPresentationManager.bannerActivityManager.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_bannerActivityManager);
}

uint64_t key path getter for BannerPresentationManager.presentationDelegate : BannerPresentationManager@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for BannerPresentationManager.presentationDelegate : BannerPresentationManager(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF0);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t BannerPresentationManager.presentationDelegate.getter()
{
  return BannerPresentationManager.presentationDelegate.getter(&OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentationDelegate);
}

uint64_t BannerPresentationManager.presentationDelegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*BannerPresentationManager.presentationDelegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentationDelegate;
  v3[4] = v1;
  v3[5] = v4;
  OUTLINED_FUNCTION_9_2();
  long long v3[3] = MEMORY[0x1C8776240](v1);
  return DestinationQueryController.delegate.modify;
}

uint64_t key path getter for BannerPresentationManager.audioRoutingDelegate : BannerPresentationManager@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

uint64_t key path setter for BannerPresentationManager.audioRoutingDelegate : BannerPresentationManager(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x108);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

void BannerPresentationManager.audioRoutingDelegate.didset()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (char *)v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_audioRoutingDelegate;
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x1C8776240](v4);
    (*(void (**)(uint64_t))((*v1 & *v3) + 0x468))(v5);
  }
}

uint64_t BannerPresentationManager.audioRoutingDelegate.getter()
{
  return BannerPresentationManager.presentationDelegate.getter(&OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_audioRoutingDelegate);
}

uint64_t BannerPresentationManager.presentationDelegate.getter(void *a1)
{
  uint64_t v2 = v1 + *a1;
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v2);
}

uint64_t BannerPresentationManager.audioRoutingDelegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*BannerPresentationManager.audioRoutingDelegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_audioRoutingDelegate;
  v3[4] = v1;
  v3[5] = v4;
  OUTLINED_FUNCTION_9_2();
  long long v3[3] = MEMORY[0x1C8776240](v1);
  return BannerPresentationManager.audioRoutingDelegate.modify;
}

void BannerPresentationManager.audioRoutingDelegate.modify()
{
  OUTLINED_FUNCTION_146_4();
  swift_unknownObjectWeakAssign();
  if (v1)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    BannerPresentationManager.audioRoutingDelegate.didset();
  }
  free(v0);
}

uint64_t key path getter for BannerPresentationManager.inCallConversationControlsDelegate : BannerPresentationManager@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x118))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for BannerPresentationManager.inCallConversationControlsDelegate : BannerPresentationManager(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x120);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

void BannerPresentationManager.inCallConversationControlsDelegate.didset()
{
  char v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (char *)v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_inCallConversationControlsDelegate;
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x1C8776240](v4);
    (*(void (**)(uint64_t, void))((*v1 & *v3) + 0x438))(v5, *((void *)v4 + 1));
  }
}

uint64_t BannerPresentationManager.inCallConversationControlsDelegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_inCallConversationControlsDelegate;
  OUTLINED_FUNCTION_2();
  return MEMORY[0x1C8776240](v1);
}

uint64_t BannerPresentationManager.inCallConversationControlsDelegate.setter()
{
  OUTLINED_FUNCTION_4_15();
  uint64_t v2 = v1 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_inCallConversationControlsDelegate;
  OUTLINED_FUNCTION_11_0();
  *(void *)(v2 + 8) = v0;
  swift_unknownObjectWeakAssign();
  BannerPresentationManager.inCallConversationControlsDelegate.didset();
  return swift_unknownObjectRelease();
}

void (*BannerPresentationManager.inCallConversationControlsDelegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_inCallConversationControlsDelegate;
  v3[5] = v1;
  v3[6] = v4;
  OUTLINED_FUNCTION_9_2();
  uint64_t v5 = MEMORY[0x1C8776240](v1);
  uint64_t v6 = *(void *)(v1 + 8);
  long long v3[3] = v5;
  v3[4] = v6;
  return BannerPresentationManager.inCallConversationControlsDelegate.modify;
}

void BannerPresentationManager.inCallConversationControlsDelegate.modify()
{
  OUTLINED_FUNCTION_146_4();
  *(void *)(v0[5] + v0[6] + 8) = v0[4];
  swift_unknownObjectWeakAssign();
  if (v1)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    BannerPresentationManager.inCallConversationControlsDelegate.didset();
  }
  free(v0);
}

void BannerPresentationManager._conversationControlsManager.setter(uint64_t a1)
{
}

uint64_t key path getter for BannerPresentationManager.handedOffCall : BannerPresentationManager@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x148))();
  *a2 = result;
  return result;
}

uint64_t key path setter for BannerPresentationManager.handedOffCall : BannerPresentationManager(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x150);
  id v4 = *a1;
  return v3(v2);
}

void *BannerPresentationManager.handedOffCall.getter()
{
  char v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_handedOffCall);
  OUTLINED_FUNCTION_2();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void BannerPresentationManager.handedOffCall.setter(void *a1)
{
}

uint64_t (*BannerPresentationManager.handedOffCall.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

id BannerPresentationManager.activeCall.getter()
{
  char v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_callCenter);
  if ((uint64_t)objc_msgSend(v1, sel_currentAudioAndVideoCallCount) <= 0)
  {
    id v2 = objc_msgSend(v1, sel_frontmostBargeCall);

    if (!v2) {
      return 0;
    }
  }
  id v3 = (void *)OUTLINED_FUNCTION_140_4();
  id result = objc_msgSend(v3, v4, 4);
  if (!result)
  {
    uint64_t v6 = (void *)OUTLINED_FUNCTION_140_4();
    id result = objc_msgSend(v6, v7, 3);
    if (!result)
    {
      uint64_t v8 = (void *)OUTLINED_FUNCTION_140_4();
      id result = objc_msgSend(v8, v9, 1);
      if (!result)
      {
        uint64_t v10 = (void *)OUTLINED_FUNCTION_140_4();
        id result = objc_msgSend(v10, v11, 2);
        if (!result) {
          return objc_msgSend(v1, sel_frontmostBargeCall);
        }
      }
    }
  }
  return result;
}

uint64_t BannerPresentationManager.incomingCallActivity.setter(uint64_t a1)
{
  return OUTLINED_FUNCTION_26_1(a1);
}

void BannerPresentationManager.conversationControlsManager.getter()
{
  OUTLINED_FUNCTION_31();
  char v1 = v0;
  id v2 = BannerPresentationManager.associatedCall.getter();
  SEL v4 = (void *)MEMORY[0x1E4FBC8C8];
  if (v2)
  {
    uint64_t v5 = (uint64_t)v2;
    uint64_t v6 = v3;
    uint64_t v7 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager__conversationControlsManager;
    uint64_t v8 = *(uint8_t **)&v0[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager__conversationControlsManager];
    SEL v9 = &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>;
    id v159 = v2;
    if (!v8)
    {
LABEL_38:
      OUTLINED_FUNCTION_47();
      uint64_t v65 = (void *)MEMORY[0x1C87730B0](0xD000000000000013);
      objc_msgSend(v1, sel_dismissPresentedBannerForReason_animated_, v65, 1);

      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      CGRect v158 = (uint64_t (**)(uint64_t))v6;
      uint64_t v66 = type metadata accessor for Logger();
      __swift_project_value_buffer(v66, (uint64_t)static Logger.banners);
      swift_unknownObjectRetain_n();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v67, v68))
      {
        OUTLINED_FUNCTION_37();
        v161[0] = OUTLINED_FUNCTION_9_3();
        uint64_t v157 = v7;
        *(_DWORD *)uint64_t v8 = 136315138;
        CGRect v156 = v8 + 4;
        swift_getObjectType();
        v160[0] = v5;
        swift_unknownObjectRetain();
        uint64_t v69 = String.init<A>(describing:)();
        v160[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v161);
        uint64_t v7 = v157;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        _os_log_impl(&dword_1C2F90000, v67, v68, "updateConversationControlsManager for call: %s", v8, 0xCu);
        swift_arrayDestroy();
        SEL v9 = &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>;
        OUTLINED_FUNCTION_3();
        uint64_t v71 = (uint64_t)v158;
        OUTLINED_FUNCTION_3();
      }
      else
      {
        swift_unknownObjectRelease_n();

        uint64_t v71 = (uint64_t)v158;
      }
      uint64_t v72 = *(void **)&v1[v9[127]];
      uint64_t v73 = self;
      swift_unknownObjectRetain();
      id v74 = v72;
      id v75 = objc_msgSend(v73, sel_sharedInstance);
      OUTLINED_FUNCTION_89();
      id v76 = objc_allocWithZone((Class)type metadata accessor for CallCenter());
      uint64_t v77 = CallCenter.init(callCenter:placeholderCallCenter:shouldRegisterForMediaControllerChanges:shouldRegisterForReactionsControllerChanges:)(v73, v74, 0, 1);
      os_log_type_t v78 = specialized ConversationControlsManager.__allocating_init(activeCall:callCenter:)(v5, v71, v77);
      OUTLINED_FUNCTION_0_91();
      uint64_t v80 = *(void (**)(uint64_t, _UNKNOWN **))(v79 + 1032);
      uint64_t v81 = swift_unknownObjectRetain();
      v80(v81, &protocol witness table for BannerPresentationManager);
      OUTLINED_FUNCTION_168_0();
      unint64_t v83 = *(void (**)(uint64_t, _UNKNOWN **))(v82 + 1008);
      uint64_t v84 = swift_unknownObjectRetain();
      v83(v84, &protocol witness table for BannerPresentationManager);
      OUTLINED_FUNCTION_12_64();
      (*(void (**)(void))(v85 + 256))();
      OUTLINED_FUNCTION_168_0();
      (*(void (**)(void))(v86 + 1128))();
      OUTLINED_FUNCTION_12_64();
      (*(void (**)(void))(v87 + 280))();
      OUTLINED_FUNCTION_168_0();
      (*(void (**)(void))(v88 + 1080))();
      OUTLINED_FUNCTION_168_0();
      uint64_t v90 = *(void (**)(uint64_t, _UNKNOWN **))(v89 + 1176);
      uint64_t v91 = swift_unknownObjectRetain();
      v90(v91, &protocol witness table for BannerPresentationManager);
      if (*(void *)&v1[v7])
      {
        OUTLINED_FUNCTION_91_5();
        uint64_t v93 = *(void (**)(uint64_t))(v92 + 1032);
        id v95 = v94;
        uint64_t v96 = OUTLINED_FUNCTION_157_5();
        v93(v96);

        if (*(void *)&v1[v7])
        {
          OUTLINED_FUNCTION_91_5();
          uint64_t v98 = *(void (**)(uint64_t))(v97 + 1008);
          id v100 = v99;
          uint64_t v101 = OUTLINED_FUNCTION_157_5();
          v98(v101);
        }
      }
      uint64_t v102 = v78;
      BannerPresentationManager._conversationControlsManager.setter((uint64_t)v78);
      OUTLINED_FUNCTION_12_64();
      uint64_t v104 = (*(uint64_t (**)(void))(v103 + 416))();
      if (v104)
      {
        uint64_t v105 = (void *)v104;
        OUTLINED_FUNCTION_19_6();
        (*(void (**)(void *))(v106 + 448))(v102);
      }
      uint64_t v107 = *(void (**)(void))((*v4 & *v102) + 0x270);
      v107();
      ConversationControlsManager.controlsHUDUpdate(for:)(v108, (uint64_t)v161);
      swift_unknownObjectRelease();
      outlined init with copy of ConversationControlsType((uint64_t)v161, (uint64_t)v160);
      OUTLINED_FUNCTION_12_64();
      id v110 = (void *)(*(uint64_t (**)(void))(v109 + 392))();

      if (v110
        || (ConversationControlsType.isFirstOrThirdPartyIncomingCall.getter() & 1) == 0
        || (uint64_t ObjectType = swift_getObjectType(), (v158[16](ObjectType) & 1) != 0)
        || (OUTLINED_FUNCTION_6_63(), ((*(uint64_t (**)(void))(v112 + 192))() & 1) != 0)
        || (OUTLINED_FUNCTION_6_63(), ((*(uint64_t (**)(void))(v113 + 88))() & 1) == 0)
        || (OUTLINED_FUNCTION_6_63(), ((*(uint64_t (**)(void))(v114 + 80))() & 1) != 0))
      {
        BannerPresentationManager.updatePresentedHUD(type:replacingNotice:)();
      }
      else
      {
        BannerPresentationManager.presentBanner(as:type:reply:)();
      }
      OUTLINED_FUNCTION_7_5();
      OUTLINED_FUNCTION_102_3();
      uint64_t v116 = v115();
      if (v116)
      {
        uint64_t v117 = (void *)v116;
        v107();
        uint64_t v119 = v118;
        uint64_t v120 = swift_getObjectType();
        type metadata accessor for UUID();
        CGRect v158 = (uint64_t (**)(uint64_t))v147;
        OUTLINED_FUNCTION_5_3();
        MEMORY[0x1F4188790](v121);
        OUTLINED_FUNCTION_118();
        (*(void (**)(uint64_t, uint64_t))(v119 + 200))(v120, v119);
        swift_unknownObjectRelease();
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        OUTLINED_FUNCTION_139();
        v123();
        objc_msgSend(v117, sel_bannerPresentationManagerUpdatedControlsManagerCallUUID_, isa);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v160);
      outlined destroy of ControlsHUDUpdate((uint64_t)v161);
      id v124 = *(id *)&v1[v7];
      goto LABEL_58;
    }
    uint64_t v157 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager__conversationControlsManager;
    OUTLINED_FUNCTION_129_4();
    SEL v11 = *(uint64_t (**)(void))(v10 + 624);
    CGRect v156 = v8;
    uint64_t v12 = v11();
    uint64_t v14 = v13;
    uint64_t v15 = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v15, v14);
    uint64_t v18 = v17;
    uint64_t v19 = swift_getObjectType();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
    CGRect v158 = (uint64_t (**)(uint64_t))v19;
    BOOL v22 = v16 == v20(v19, v6) && v18 == v21;
    if (v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        CGRect v154 = v147;
        uint64_t v25 = OUTLINED_FUNCTION_8(v24);
        uint64_t v27 = *(void *)(v26 + 64);
        __n128 v28 = MEMORY[0x1F4188790](v25);
        uint64_t v29 = v12;
        unint64_t v30 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
        unint64_t v31 = &v147[-v30];
        uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 56);
        uint64_t v155 = v29;
        uint64_t v33 = v32(v15, v14, v28);
        CGRect v153 = v147;
        __n128 v34 = MEMORY[0x1F4188790](v33);
        os_log_type_t v35 = &v147[-v30];
        (*(void (**)(uint64_t (**)(uint64_t), uint64_t, __n128))(v6 + 56))(v158, v6, v34);
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        double v152 = v147;
        uint64_t v37 = OUTLINED_FUNCTION_8(v36);
        MEMORY[0x1F4188790](v37);
        OUTLINED_FUNCTION_118();
        uint64_t v39 = v15 + *(int *)(v38 + 56);
        outlined init with copy of FeatureEligibility?((uint64_t)&v147[-v30], v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined init with copy of FeatureEligibility?((uint64_t)&v147[-v30], v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v40 = type metadata accessor for UUID();
        uint64_t v41 = OUTLINED_FUNCTION_33_0(v15, 1, v40);
        if (v22)
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)&v147[-v30], (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?((uint64_t)&v147[-v30], (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_33_0(v39, 1, v40);
          uint64_t v7 = v157;
          if (v22)
          {
            double v150 = (unsigned char *)v40;
            outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_94_4();
            SEL v4 = (void *)MEMORY[0x1E4FBC8C8];
            SEL v9 = &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>;
LABEL_24:
            OUTLINED_FUNCTION_7_5();
            OUTLINED_FUNCTION_102_3();
            uint64_t v55 = (void *)v54();

            int v57 = v55
               && (type metadata accessor for PlaceholderCall(), (uint64_t v56 = swift_dynamicCastClass()) != 0)
               && *(unsigned __int8 *)(v56 + 16) == 1;
            if (BannerPresentationManager.onlyHasPlaceholderCall.getter())
            {
              PlaceholderCallCenter.activeCall.getter();
              if (v58)
              {
                int v59 = *(unsigned __int8 *)(v58 + 16);
                swift_release();
                if (v59 == 1) {
                  char v60 = 1;
                }
                else {
                  char v60 = v57;
                }
                if ((v60 & 1) == 0)
                {
LABEL_34:

                  swift_unknownObjectRelease();
                  uint64_t v5 = (uint64_t)v159;
                  if (*(void *)&v1[v7])
                  {
                    OUTLINED_FUNCTION_91_5();
                    v61 += 238;
                    uint64_t v62 = *v61;
                    uint64_t v8 = (uint8_t *)v61;
                    id v64 = v63;
                    if (v62()) {
                      objc_msgSend(v64, sel_dismissConfirmLeavePTTChannelAlert);
                    }

                    uint64_t v5 = (uint64_t)v159;
                  }
                  goto LABEL_38;
                }
              }
              else if ((v57 & 1) == 0)
              {
                goto LABEL_34;
              }
            }
            else if (!v57)
            {
              goto LABEL_34;
            }
            v1[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_shouldRequestHUDPresentationOnAVUpgradeOrDowngrade] = 1;
            if (one-time initialization token for banners != -1) {
              swift_once();
            }
            uint64_t v125 = type metadata accessor for Logger();
            uint64_t v126 = __swift_project_value_buffer(v125, (uint64_t)static Logger.banners);
            uint64_t v127 = Logger.logObject.getter();
            os_log_type_t v128 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v127, v128))
            {
              id v129 = (uint8_t *)OUTLINED_FUNCTION_8_0();
              *(_WORD *)id v129 = 0;
              _os_log_impl(&dword_1C2F90000, v127, v128, "Detected AVLess transition, dont need to dismiss banner", v129, 2u);
              OUTLINED_FUNCTION_3();
            }

            OUTLINED_FUNCTION_129_4();
            (*(void (**)(id, uint64_t))(v130 + 2512))(v159, v6);
            OUTLINED_FUNCTION_7_5();
            id v132 = *(uint64_t (**)(void))(v131 + 232);
            int8x16_t v133 = (unsigned char *)(v131 + 232);
            OUTLINED_FUNCTION_135_3();
            uint64_t v134 = v132();
            if (v134)
            {
              id v135 = (void *)v134;
              CGRect v153 = v147;
              uint64_t v157 = v126;
              OUTLINED_FUNCTION_5_3();
              CGRect v154 = v133;
              MEMORY[0x1F4188790](v136);
              OUTLINED_FUNCTION_21();
              LODWORD(v156) = v57;
              (*(void (**)(uint64_t (**)(uint64_t), uint64_t))(v6 + 200))(v158, v6);
              Class v137 = UUID._bridgeToObjectiveC()().super.isa;
              int v57 = (int)v156;
              OUTLINED_FUNCTION_139();
              v138();
              objc_msgSend(v135, sel_bannerPresentationManagerUpdatedControlsManagerCallUUID_, v137);
              swift_unknownObjectRelease();
            }
            if (v57)
            {
              unint64_t v139 = Logger.logObject.getter();
              os_log_type_t v140 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v139, v140))
              {
                unint64_t v141 = (uint8_t *)OUTLINED_FUNCTION_8_0();
                *(_WORD *)unint64_t v141 = 0;
                _os_log_impl(&dword_1C2F90000, v139, v140, "Notifying presentation delegate of AV upgrade", v141, 2u);
                OUTLINED_FUNCTION_3();
              }

              OUTLINED_FUNCTION_135_3();
              uint64_t v142 = v132();
              if (v142)
              {
                objc_super v143 = (void *)v142;
                OUTLINED_FUNCTION_5_3();
                MEMORY[0x1F4188790](v144);
                OUTLINED_FUNCTION_5_1();
                (*(void (**)(uint64_t (**)(uint64_t), uint64_t))(v6 + 200))(v158, v6);
                Class v145 = UUID._bridgeToObjectiveC()().super.isa;
                OUTLINED_FUNCTION_12_1();
                v146();
                objc_msgSend(v143, sel_bannerPresentationManagerBannerPresentationManagerAVUpgradedCallUUID_, v145);
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();

                goto LABEL_58;
              }
            }
            swift_unknownObjectRelease();
LABEL_18:
            swift_unknownObjectRelease();
            goto LABEL_58;
          }
        }
        else
        {
          unint64_t v151 = v147;
          MEMORY[0x1F4188790](v41);
          uint64_t v45 = &v147[-v30];
          outlined init with copy of FeatureEligibility?(v15, (uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_33_0(v39, 1, v40);
          if (!v46)
          {
            unint64_t v149 = v147;
            OUTLINED_FUNCTION_5_3();
            double v150 = v45;
            uint64_t v48 = v40;
            uint64_t v50 = v49;
            MEMORY[0x1F4188790](v51);
            OUTLINED_FUNCTION_61();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v27, v39, v48);
            _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            int v148 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
            v52(v27, v48);
            outlined destroy of SystemUpdateNotice?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v53 = v150;
            double v150 = (unsigned char *)v48;
            v52((uint64_t)v53, v48);
            OUTLINED_FUNCTION_52_0();
            OUTLINED_FUNCTION_52_0();
            outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            SEL v4 = (void *)MEMORY[0x1E4FBC8C8];
            uint64_t v7 = v157;
            SEL v9 = &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>;
            if ((v148 & 1) == 0) {
              goto LABEL_34;
            }
            goto LABEL_24;
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_26_2();
          v47();
          OUTLINED_FUNCTION_52_0();
          uint64_t v7 = v157;
        }
        outlined destroy of SystemUpdateNotice?(v15, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
        OUTLINED_FUNCTION_94_4();
        SEL v4 = (void *)MEMORY[0x1E4FBC8C8];
        SEL v9 = &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<_ConditionalContent<ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, ModifiedContent<VideoMessageControlsView.TopControlsView, _PaddingLayout>>, _FlexFrameLayout>, _OpacityEffect>, Spacer)>;
        goto LABEL_34;
      }
    }
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  BannerPresentationManager._conversationControlsManager.setter(0);
  OUTLINED_FUNCTION_7_5();
  uint64_t v43 = (void *)(*(uint64_t (**)(void))(v42 + 232))();
  if (v43)
  {
    objc_msgSend(v43, sel_bannerPresentationManagerUpdatedControlsManagerCallUUID_, 0);
    swift_unknownObjectRelease();
  }
  uint64_t v44 = (void *)MEMORY[0x1C87730B0](0x7669746361206F4ELL, 0xEE006C6C61632065);
  objc_msgSend(v0, sel_dismissPresentedBannerForReason_animated_, v44, 1);

LABEL_58:
  OUTLINED_FUNCTION_28();
}

id BannerPresentationManager.associatedCall.getter()
{
  uint64_t v2 = v0;
  OUTLINED_FUNCTION_6_63();
  v3 += 44;
  SEL v4 = *v3;
  uint64_t v5 = (*v3)();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.banners);
    id v8 = v6;
    SEL v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v10))
    {
      SEL v11 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v46 = OUTLINED_FUNCTION_9_0();
      OUTLINED_FUNCTION_139_5(4.8149e-34);
      id v12 = objc_msgSend(v8, sel_callUUID);
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      uint64_t v44 = v13;
      uint64_t v45 = v15;
      SEL v4 = (uint64_t (*)(void))&v44;
      uint64_t v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v46);
      OUTLINED_FUNCTION_83_7();

      swift_bridgeObjectRelease();
      uint64_t v18 = "Associated call is an active call %s";
LABEL_11:
      _os_log_impl(&dword_1C2F90000, v9, (os_log_type_t)v1, v18, v11, 0xCu);
      OUTLINED_FUNCTION_360();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();

      goto LABEL_13;
    }
LABEL_12:

    goto LABEL_13;
  }
  OUTLINED_FUNCTION_30_21();
  uint64_t v20 = (*(uint64_t (**)(void))(v19 + 328))();
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.banners);
    id v8 = v21;
    SEL v9 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v23))
    {
      SEL v11 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v46 = OUTLINED_FUNCTION_9_0();
      OUTLINED_FUNCTION_139_5(4.8149e-34);
      id v24 = objc_msgSend(v8, sel_callUUID);
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      uint64_t v44 = v25;
      uint64_t v45 = v27;
      SEL v4 = (uint64_t (*)(void))&v44;
      uint64_t v28 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v46);
      OUTLINED_FUNCTION_83_7();

      swift_bridgeObjectRelease();
      uint64_t v18 = "Associated call is a handed off call %s";
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  PlaceholderCallCenter.activeCall.getter();
  if (v35)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.banners);
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      OUTLINED_FUNCTION_37();
      uint64_t v39 = OUTLINED_FUNCTION_9_3();
      *(_DWORD *)char v1 = 136315138;
      uint64_t v46 = v39;
      UUID.uuidString.getter();
      uint64_t v45 = v40;
      uint64_t v41 = String.init<A>(reflecting:)();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v37, v38, "Associated call is a placeholder call %s", v1, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
      swift_release();
    }
    else
    {

      swift_release_n();
    }
  }
LABEL_13:
  OUTLINED_FUNCTION_6_63();
  if (((*(uint64_t (**)(void))(v30 + 216))() & 1) != 0
    && (id v31 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_callCenter), sel_incomingCall)) != 0|| (id v31 = (id)v4()) != 0|| (OUTLINED_FUNCTION_30_21(), (id v31 = (id)(*(uint64_t (**)(void))(v32 + 328))()) != 0))
  {
    id v33 = v31;
    lazy protocol witness table accessor for type TUCall and conformance TUCall();
  }
  else
  {
    PlaceholderCallCenter.activeCall.getter();
    id v33 = v43;
    if (v43) {
      lazy protocol witness table accessor for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier((uint64_t)&lazy protocol witness table cache variable for type PlaceholderCall and conformance PlaceholderCall);
    }
  }
  return v33;
}

uint64_t BannerPresentationManager.onlyHasPlaceholderCall.getter()
{
  PlaceholderCallCenter.activeCall.getter();
  uint64_t v1 = v0;
  swift_release();
  if (!v1) {
    return 0;
  }
  OUTLINED_FUNCTION_83_0();
  uint64_t v3 = (void *)v2();
  if (v3)
  {

    return 0;
  }
  return 1;
}

uint64_t BannerPresentationManager.presentBanner(as:type:reply:)()
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  char v11 = -1;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v0);
  OUTLINED_FUNCTION_121_0();
  BannerPresentationManager.presentBanner(as:type:activityTypeForNewBanner:activityUUID:fromActivityManager:reply:)();
  OUTLINED_FUNCTION_12_1();
  v7(v1, v2, v3, v4, v5, v6);
  return outlined destroy of SystemUpdateNotice?((uint64_t)v9, &demangling cache variable for type metadata for ConversationControlsType?);
}

void BannerPresentationManager.updatePresentedHUD(type:replacingNotice:)()
{
  OUTLINED_FUNCTION_31();
  char v2 = v1;
  uint64_t v4 = v3;
  if (*(void *)(v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_updateWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  uint64_t v5 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  outlined init with copy of ConversationControlsType(v4, (uint64_t)v26);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  outlined init with take of ConversationControlsType(v26, (_OWORD *)(v6 + 24));
  *(unsigned char *)(v6 + 65) = v2 & 1;
  v25[4] = partial apply for closure #1 in BannerPresentationManager.updatePresentedHUD(type:replacingNotice:);
  v25[5] = v6;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 1107296256;
  void v25[2] = thunk for @escaping @callee_guaranteed () -> ();
  v25[3] = &block_descriptor_16_0;
  _Block_copy(v25);
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v7);
  v24[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v8 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  uint64_t v9 = swift_retain();
  BannerPresentationManager.updateWorkItem.setter(v9);
  uint64_t v10 = (void *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static OS_dispatch_queue.main.getter();
  OUTLINED_FUNCTION_89();
  type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_5_3();
  uint64_t v12 = v11;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = v24;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v24 - v17;
  static DispatchTime.now()();
  uint64_t v19 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_5_3();
  uint64_t v21 = v20;
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_5_1();
  demangling cache variable for type metadata for [DispatchWorkItemFlags] = 150;
  (*(void (**)(uint64_t *, void, uint64_t))(v21 + 104))(&demangling cache variable for type metadata for [DispatchWorkItemFlags], *MEMORY[0x1E4FBCAC0], v19);
  MEMORY[0x1C8772E10](v18, &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(&demangling cache variable for type metadata for [DispatchWorkItemFlags], v19);
  os_log_type_t v23 = *(void (**)(void))(v12 + 8);
  OUTLINED_FUNCTION_12_1();
  v23();
  MEMORY[0x1C8773B20](v16, v8);

  swift_release();
  OUTLINED_FUNCTION_30_15();
  OUTLINED_FUNCTION_12_1();
  v23();
  OUTLINED_FUNCTION_28();
}

void *BannerPresentationManager.presentedBanner.getter()
{
  char v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBanner);
  OUTLINED_FUNCTION_2();
  char v2 = *v1;
  id v3 = v2;
  return v2;
}

void BannerPresentationManager.presentedBanner.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBanner);
  OUTLINED_FUNCTION_11_0();
  uint64_t v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  BannerPresentationManager.presentedBanner.didset();
}

uint64_t key path getter for BannerPresentationManager.presentedBanner : BannerPresentationManager@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x188))();
  *a2 = result;
  return result;
}

void key path setter for BannerPresentationManager.presentedBanner : BannerPresentationManager(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  BannerPresentationManager.presentedBanner.setter(v1);
}

uint64_t BannerPresentationManager.presentedBanner.didset()
{
  BannerPresentationManager.invalidateAndReschedulePresentedBannerTimer(reschedule:)(1);
  BannerPresentationManager.invalidateAndRescheduleSystemApertureTimer(reschedule:)(1);
  id v1 = (void *)((char *)v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBanner);
  uint64_t result = swift_beginAccess();
  if (!*v1) {
    return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))(0);
  }
  return result;
}

Swift::Void __swiftcall BannerPresentationManager.invalidateAndRescheduleTimer(reschedule:)(Swift::Bool reschedule)
{
  BannerPresentationManager.invalidateAndReschedulePresentedBannerTimer(reschedule:)(reschedule);
  BannerPresentationManager.invalidateAndRescheduleSystemApertureTimer(reschedule:)(reschedule);
}

uint64_t key path getter for BannerPresentationManager.presentedSystemApertureElement : BannerPresentationManager@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for BannerPresentationManager.presentedSystemApertureElement : BannerPresentationManager(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A8);
  id v4 = *a1;
  return v3(v2);
}

void *BannerPresentationManager.presentedSystemApertureElement.getter()
{
  id v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedSystemApertureElement);
  OUTLINED_FUNCTION_2();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void BannerPresentationManager.presentedSystemApertureElement.setter(void *a1)
{
}

uint64_t (*BannerPresentationManager.presentedSystemApertureElement.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

id BannerPresentationManager.isAlertAvailable.getter()
{
  return BannerPresentationManager.isAlertAvailable.getter((SEL *)&selRef_isAlertAvailable);
}

uint64_t BannerPresentationManager.updateWorkItem.setter(uint64_t a1)
{
  return OUTLINED_FUNCTION_26_1(a1);
}

uint64_t BannerPresentationManager.makeSystemApertureElementProvider()()
{
  OUTLINED_FUNCTION_6_63();
  if (((*(uint64_t (**)(void))(v0 + 80))() & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_83_0();
  if (v1())
  {
    OUTLINED_FUNCTION_89();
    type metadata accessor for SystemBannerHostViewController();
    if (!swift_dynamicCastClass()) {
      swift_unknownObjectRelease();
    }
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_83_0();
  v2();
  OUTLINED_FUNCTION_1_12();
  id v4 = *(uint64_t (**)(void))(v3 + 416);
  return v4();
}

void BannerPresentationManager.makeOrphanSystemApertureElementProvider()()
{
  OUTLINED_FUNCTION_31();
  id v2 = v0;
  OUTLINED_FUNCTION_6_63();
  uint64_t v4 = (*(uint64_t (**)(void))(v3 + 384))();
  if (v4)
  {
    id v5 = (void *)v4;
    OUTLINED_FUNCTION_6_63();
    if ((*(uint64_t (**)(void))(v6 + 80))())
    {
      OUTLINED_FUNCTION_102_3();
      v7();
      ConversationControlsManager.controlsHUDUpdate(for:)(v8, (uint64_t)v26);
      swift_unknownObjectRelease();
      uint64_t v9 = v26[6];
      outlined init with copy of ConversationControlsType((uint64_t)v26, (uint64_t)v25);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      uint64_t v10 = static Defaults.shared;
      uint64_t v11 = one-time initialization token for shared;
      swift_retain();
      if (v11 != -1) {
        swift_once();
      }
      uint64_t v12 = static Features.shared;
      uint64_t v13 = self;
      id v14 = v12;
      id v15 = objc_msgSend(v13, sel_defaultCenter);
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = OUTLINED_FUNCTION_8(v16);
      MEMORY[0x1F4188790](v17);
      OUTLINED_FUNCTION_121_0();
      uint64_t v18 = (char *)objc_allocWithZone((Class)type metadata accessor for SystemBannerHostViewController());
      id v19 = v2;
      specialized SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(v5, v9, (uint64_t)v25, (uint64_t)v2, 1, 0, 0, 0, 1u, 0, v10, (uint64_t)v14, v15, v1, 0, v18);
      outlined destroy of ControlsHUDUpdate((uint64_t)v26);
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = OUTLINED_FUNCTION_30(v20, (uint64_t)static Logger.banners);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v23, v24, "Unable to obtain ConversationControlsManager");
      OUTLINED_FUNCTION_3();
    }
  }
  OUTLINED_FUNCTION_28();
}

void BannerPresentationManager.presentedBannerDismissalTimer.setter(uint64_t a1)
{
}

void BannerPresentationManager.systemApertureElementDismissalTimer.setter(uint64_t a1)
{
}

uint64_t BannerPresentationManager.inCallControlsVisible.getter()
{
  OUTLINED_FUNCTION_6_63();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 384))();
  if (!v1) {
    return 0;
  }
  id v2 = (void *)v1;
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_104_6();
  uint64_t v4 = v3();
  uint64_t v6 = v5;

  if (!v4) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);
  swift_unknownObjectRelease();
  return v8 & 1;
}

uint64_t BannerPresentationManager.requesterIdentifier.getter()
{
  type metadata accessor for BannerPresentationManager();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v1);
  if (!v3)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void BannerPresentationManager.previouslyHadMultipleCalls.didset(char a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x180))();
  if (v4)
  {
    int v5 = *((unsigned __int8 *)v1
         + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_previouslyHadMultipleCalls);
    if (v5 == 2)
    {
      if (a1 != 2)
      {
LABEL_10:
        id v7 = v4;
        (*(void (**)(void))((*v3 & *v4) + 0x270))();
        ConversationControlsManager.controlsHUDUpdate(for:)(v6, (uint64_t)v8);
        swift_unknownObjectRelease();
        BannerPresentationManager.updatePresentedHUD(type:replacingNotice:)();

        outlined destroy of ConversationControlsType((uint64_t)v8);
        return;
      }
    }
    else if (a1 == 2 || ((((a1 & 1) == 0) ^ v5) & 1) == 0)
    {
      goto LABEL_10;
    }
  }
}

void BannerPresentationManager.previouslyHadMultipleCalls.setter(char a1)
{
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_previouslyHadMultipleCalls);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_previouslyHadMultipleCalls) = a1;
  BannerPresentationManager.previouslyHadMultipleCalls.didset(v2);
}

char *BannerPresentationManager.__allocating_init(delegate:)()
{
  id v1 = objc_allocWithZone(v0);
  OUTLINED_FUNCTION_8_11();
  return BannerPresentationManager.init(delegate:)();
}

char *BannerPresentationManager.init(delegate:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_activityManager;
  uint64_t v2 = one-time initialization token for shared;
  uint64_t v3 = v0;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = static HUDActivityManager.shared;
  *(void *)&v0[v1] = static HUDActivityManager.shared;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_bannerActivityManager;
  uint64_t v6 = one-time initialization token for shared;
  id v7 = v4;
  if (v6 != -1) {
    swift_once();
  }
  char v8 = static BannerActivityManager.shared;
  *(void *)&v3[v5] = static BannerActivityManager.shared;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_inCallConversationControlsDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager__conversationControlsManager] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_handedOffCall] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_incomingCallActivity] = 0;
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_callCenter;
  uint64_t v10 = self;
  id v11 = v8;
  *(void *)&v3[v9] = objc_msgSend(v10, sel_sharedInstance);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBanner] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedSystemApertureElement] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_updateWorkItem] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBannerDismissalTimer] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_systemApertureElementDismissalTimer] = 0;
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_placeholderCallCenter;
  type metadata accessor for PlaceholderCallCenter();
  *(void *)&v3[v12] = PlaceholderCallCenter.__allocating_init(callCenter:)(objc_msgSend(v10, sel_sharedInstance));
  v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_shouldRequestHUDPresentationOnAVUpgradeOrDowngrade] = 0;
  v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_previouslyHadMultipleCalls] = 2;
  uint64_t v13 = &v3[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_defaults];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)uint64_t v13 = static Defaults.shared;
  *((void *)v13 + 1) = &protocol witness table for Defaults;
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features;
  uint64_t v15 = one-time initialization token for shared;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = static Features.shared;
  *(void *)&v3[v14] = static Features.shared;
  OUTLINED_FUNCTION_11_0();
  swift_unknownObjectWeakAssign();
  id v17 = v16;

  v63.receiver = v3;
  v63.super_class = (Class)type metadata accessor for BannerPresentationManager();
  uint64_t v18 = (char *)objc_msgSendSuper2(&v63, sel_init);
  id v19 = *(void **)&v18[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_callCenter];
  uint64_t v20 = v18;
  id v21 = objc_msgSend(v19, sel_conversationManager);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  os_log_type_t v22 = v20;
  uint64_t v23 = (void *)static OS_dispatch_queue.main.getter();
  objc_msgSend(v21, sel_addDelegate_queue_, v22, v23);

  uint64_t v24 = self;
  id v25 = objc_msgSend(v24, sel_defaultCenter);
  OUTLINED_FUNCTION_85_8(v25, v26, v27, v28, *MEMORY[0x1E4FADD90]);

  id v29 = objc_msgSend(v24, sel_defaultCenter);
  OUTLINED_FUNCTION_85_8(v29, v30, v31, v32, *MEMORY[0x1E4FADDD8]);

  id v33 = objc_msgSend(v24, sel_defaultCenter);
  uint64_t v34 = one-time initialization token for appLaunchTriggeredPreferringHUDDismissal;
  uint64_t v35 = v22;
  if (v34 != -1) {
    swift_once();
  }
  objc_msgSend(v33, sel_addObserver_selector_name_object_, v35, sel_handleAppLaunchWantsHUDDismissal_, static Strings.Notifications.appLaunchTriggeredPreferringHUDDismissal, 0);

  id v36 = objc_msgSend(v24, sel_defaultCenter);
  OUTLINED_FUNCTION_85_8(v36, v37, v38, v39, *MEMORY[0x1E4FADCE8]);

  if (_TUIsInternalInstall())
  {
    uint64_t v40 = OUTLINED_FUNCTION_20();
    swift_unknownObjectWeakInit();
    swift_retain();
    uint64_t v41 = static OS_dispatch_queue.main.getter();
    OUTLINED_FUNCTION_47();
    notifyRegisterDispatch(name:queue:handler:)(0xD000000000000027, v42, v41, (uint64_t)partial apply for closure #1 in BannerPresentationManager.init(delegate:), v40);

    swift_release_n();
  }
  uint64_t v43 = *(void **)&v35[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features];
  uint64_t v44 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v43) + 0xE0);
  uint64_t v45 = v43;
  LOBYTE(v44) = v44();

  if (v44)
  {
    uint64_t v46 = *(void **)&v35[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_activityManager];
    OUTLINED_FUNCTION_3_16();
    uint64_t v48 = *(void (**)(char *))(v47 + 176);
    uint64_t v49 = v35;
    id v50 = v46;
    v48(v35);

    uint64_t v51 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_bannerActivityManager;
    uint64_t v52 = *(void **)&v49[OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_bannerActivityManager];
    OUTLINED_FUNCTION_3_16();
    uint64_t v54 = *(void (**)(char *, _UNKNOWN **))(v53 + 152);
    uint64_t v55 = v49;
    id v56 = v52;
    v54(v35, &protocol witness table for BannerPresentationManager);

    int v57 = *(void **)&v49[v51];
    OUTLINED_FUNCTION_3_16();
    int v59 = *(void (**)(char *, _UNKNOWN **))(v58 + 200);
    char v60 = v55;
    id v61 = v57;
    v59(v35, &protocol witness table for BannerPresentationManager);
  }
  swift_unknownObjectRelease();

  return v35;
}

void closure #1 in BannerPresentationManager.init(delegate:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    BannerPresentationManager.presentSystemHUD()();
  }
}

Swift::Void __swiftcall BannerPresentationManager.presentSystemHUD()()
{
  OUTLINED_FUNCTION_6_63();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 384))();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    OUTLINED_FUNCTION_19_6();
    uint64_t v4 = (void *)(*(uint64_t (**)(void))(v3 + 656))();

    if (v4)
    {
      if (objc_msgSend(v4, sel_isContinuitySession))
      {
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v5 = type metadata accessor for Logger();
        id v33 = OUTLINED_FUNCTION_30(v5, (uint64_t)static Logger.banners);
        os_log_type_t v6 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_4_14(v6, v7, v8, v9, v10, v11, v12, v13, v31, v33))
        {
          uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_8_0();
          OUTLINED_FUNCTION_23_24(v14);
          OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v15, v16, "Ignoring presentSystemHUD because systemHUD should not be shown during continuity sessions", v17, v18, v19, v20, v32, v34);
          OUTLINED_FUNCTION_3();
        }

        return;
      }
    }
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  os_log_type_t v22 = (void *)OUTLINED_FUNCTION_30(v21, (uint64_t)static Logger.banners);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v23))
  {
    uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_22_1(v24);
    OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v25, v26, "Presenting system HUD");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_6_63();
  if (((*(uint64_t (**)(void))(v27 + 224))() & 1) == 0
    || (OUTLINED_FUNCTION_6_63(), ((*(uint64_t (**)(void))(v28 + 320))() & 1) == 0))
  {
    uint64_t v36 = 0;
    memset(v35, 0, sizeof(v35));
    char v37 = 6;
    OUTLINED_FUNCTION_27_44();
    outlined destroy of ConversationControlsType((uint64_t)v35);
  }
  v29._countAndFlagsBits = OUTLINED_FUNCTION_127_6();
  BannerPresentationManager.requestEphemeralSystemApertureAlert(reason:shouldOverridePersistentAssertion:)(v29, v30);
}

id BannerPresentationManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void BannerPresentationManager.init()()
{
}

id BannerPresentationManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BannerPresentationManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *BannerPresentationManager.callForRequestedControlsType(_:)(uint64_t a1)
{
  outlined init with copy of ConversationControlsType(a1, (uint64_t)v47);
  int v3 = v47[40];
  uint64_t v4 = outlined destroy of ConversationControlsType((uint64_t)v47);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  if (v3 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x148))(v4);
    if (v6)
    {
      int v7 = (void *)v6;
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.banners);
      outlined init with copy of ConversationControlsType(a1, (uint64_t)v47);
      id v9 = v7;
      int v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        uint64_t v46 = v44;
        *(_DWORD *)uint64_t v12 = 136315394;
        outlined init with copy of ConversationControlsType((uint64_t)v47, (uint64_t)v45);
        uint64_t v13 = specialized >> prefix<A>(_:)((uint64_t)v45);
        unint64_t v15 = v14;
        outlined destroy of SystemUpdateNotice?((uint64_t)v45, &demangling cache variable for type metadata for ConversationControlsType?);
        v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ConversationControlsType((uint64_t)v47);
        *(_WORD *)(v12 + 12) = 2080;
        id v16 = objc_msgSend(v9, sel_callUUID);
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;

        v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v10, v11, "Requested to present %s, using handed-off call %s", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v44, -1, -1);
        MEMORY[0x1C87760E0](v12, -1, -1);
      }
      else
      {
        outlined destroy of ConversationControlsType((uint64_t)v47);
      }
      lazy protocol witness table accessor for type TUCall and conformance TUCall();
      return v7;
    }
  }
  uint64_t v20 = (*(uint64_t (**)(void))((*v5 & *v1) + 0x160))();
  if (v20)
  {
    int v7 = (void *)v20;
    unint64_t v21 = lazy protocol witness table accessor for type TUCall and conformance TUCall();
  }
  else
  {
    PlaceholderCallCenter.activeCall.getter();
    if (!v22)
    {
LABEL_13:
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.banners);
      outlined init with copy of ConversationControlsType(a1, (uint64_t)v47);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v46 = v29;
        *(_DWORD *)uint64_t v28 = 136315138;
        outlined init with copy of ConversationControlsType((uint64_t)v47, (uint64_t)v45);
        uint64_t v30 = specialized >> prefix<A>(_:)((uint64_t)v45);
        unint64_t v32 = v31;
        outlined destroy of SystemUpdateNotice?((uint64_t)v45, &demangling cache variable for type metadata for ConversationControlsType?);
        v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ConversationControlsType((uint64_t)v47);
        _os_log_impl(&dword_1C2F90000, v26, v27, "Requested to present %s, but there's no matching call", v28, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v29, -1, -1);
        MEMORY[0x1C87760E0](v28, -1, -1);
      }
      else
      {
        outlined destroy of ConversationControlsType((uint64_t)v47);
      }

      return 0;
    }
    int v7 = v22;
    unint64_t v21 = lazy protocol witness table accessor for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier((uint64_t)&lazy protocol witness table cache variable for type PlaceholderCall and conformance PlaceholderCall);
  }
  unint64_t v23 = v21;
  uint64_t ObjectType = swift_getObjectType();
  if ((*(unsigned int (**)(uint64_t, unint64_t))(v23 + 184))(ObjectType, v23) == 6)
  {
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.banners);
  outlined init with copy of ConversationControlsType(a1, (uint64_t)v47);
  swift_unknownObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v46 = v37;
    *(_DWORD *)uint64_t v36 = 136315394;
    outlined init with copy of ConversationControlsType((uint64_t)v47, (uint64_t)v45);
    uint64_t v38 = specialized >> prefix<A>(_:)((uint64_t)v45);
    unint64_t v40 = v39;
    outlined destroy of SystemUpdateNotice?((uint64_t)v45, &demangling cache variable for type metadata for ConversationControlsType?);
    v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ConversationControlsType((uint64_t)v47);
    *(_WORD *)(v36 + 12) = 2080;
    uint64_t v41 = (*(uint64_t (**)(uint64_t, unint64_t))(v23 + 48))(ObjectType, v23);
    v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v34, v35, "Requested to present %s, using active or placeholder call %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v37, -1, -1);
    MEMORY[0x1C87760E0](v36, -1, -1);
  }
  else
  {
    outlined destroy of ConversationControlsType((uint64_t)v47);

    swift_unknownObjectRelease_n();
  }
  return v7;
}

void closure #1 in BannerPresentationManager.presentBanner(as:type:activityTypeForNewBanner:activityUUID:fromActivityManager:reply:)(int a1, uint64_t a2, void (*a3)(uint64_t, id), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v203 = a7;
  v206 = a3;
  uint64_t v207 = a6;
  uint64_t v205 = a4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PushToTalkNotice?);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)v195 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x1C8776240](a2 + 16);
  if (v15)
  {
    id v16 = (void *)v15;
    id v231 = 0;
    outlined init with copy of ConversationControlsType(v207, (uint64_t)v230);
    if (!a5 && (a1 & 1) == 0)
    {
      outlined init with copy of ConversationControlsType((uint64_t)v230, (uint64_t)&v226);
      if (v229 == 6 && ((unint64_t)(v226 - 13) <= 1 || v226 == 20))
      {
        int8x16_t v18 = vorrq_s8(v227, v228);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)))
        {
          outlined destroy of ConversationControlsType((uint64_t)v230);
          if (one-time initialization token for banners != -1) {
            swift_once();
          }
          uint64_t v19 = type metadata accessor for Logger();
          __swift_project_value_buffer(v19, (uint64_t)static Logger.banners);
          outlined init with copy of ConversationControlsType(v207, (uint64_t)&v226);
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
            uint64_t v23 = swift_slowAlloc();
            uint64_t v217 = v23;
            v197 = v16;
            *(_DWORD *)os_log_type_t v22 = 136315138;
            outlined init with copy of ConversationControlsType((uint64_t)&v226, (uint64_t)&v222);
            uint64_t v24 = specialized >> prefix<A>(_:)((uint64_t)&v222);
            unint64_t v26 = v25;
            outlined destroy of SystemUpdateNotice?((uint64_t)&v222, &demangling cache variable for type metadata for ConversationControlsType?);
            uint64_t v222 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v217);
            id v16 = v197;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of ConversationControlsType((uint64_t)&v226);
            _os_log_impl(&dword_1C2F90000, v20, v21, "InCallService is not visible, system controls shouldn't be presented for type %s", v22, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v23, -1, -1);
            MEMORY[0x1C87760E0](v22, -1, -1);
          }
          else
          {
            outlined destroy of ConversationControlsType((uint64_t)&v226);
          }

          goto LABEL_87;
        }
      }
      outlined destroy of ConversationControlsType((uint64_t)&v226);
    }
    LODWORD(v204) = a1;
    LODWORD(v200) = a5 == 0;
    outlined destroy of ConversationControlsType((uint64_t)v230);
    ConversationControlsType.canShowOverICS.getter();
    char v34 = v33;
    os_log_type_t v35 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v201 = a5;
    if (!a5 && (v204 & 1) != 0)
    {
      if ((v33 & 1) == 0)
      {
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        __swift_project_value_buffer(v47, (uint64_t)static Logger.banners);
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v48, v49))
        {
          id v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v50 = 0;
          _os_log_impl(&dword_1C2F90000, v48, v49, "InCallService is visible, system controls shouldn't be presented", v50, 2u);
          MEMORY[0x1C87760E0](v50, -1, -1);
        }

        uint64_t v51 = (void *)(*(uint64_t (**)(void))((*v35 & *v16) + 0x188))();
        if (v51)
        {
          uint64_t v52 = v51;
          (*(void (**)(uint64_t *__return_ptr))((*v35 & *v51) + 0x1F0))(&v226);
          outlined init with copy of ConversationControlsType((uint64_t)&v226, (uint64_t)&v222);
          if (v225 == 6 && ((unint64_t)(v222 - 13) <= 1 || v222 == 20))
          {
            int8x16_t v54 = vorrq_s8(v223, v224);
            if (!*(void *)&vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)))
            {

              outlined destroy of ConversationControlsType((uint64_t)&v226);
LABEL_87:
              lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
              id v31 = (id)swift_allocError();
              *uint64_t v97 = 1;
LABEL_88:

              if (v206)
              {
                id v98 = v31;
                v206(1, v31);
              }
LABEL_90:

              goto LABEL_91;
            }
          }
          outlined destroy of ConversationControlsType((uint64_t)&v222);

          outlined destroy of ConversationControlsType((uint64_t)&v226);
        }
        id v95 = (void *)MEMORY[0x1C87730B0](0xD000000000000040, 0x80000001C37B1CD0);
        objc_msgSend(v16, sel_dismissPresentedBannerForReason_animated_, v95, 1);

        lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
        id v31 = (id)swift_allocError();
        *uint64_t v96 = 1;
        goto LABEL_88;
      }
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.banners);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = a8;
        unint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v40 = 0;
        _os_log_impl(&dword_1C2F90000, v37, v38, "InCallService is visible, but system controls want to be presented anyways", v40, 2u);
        uint64_t v41 = v40;
        a8 = v39;
        MEMORY[0x1C87760E0](v41, -1, -1);
      }
    }
    uint64_t v226 = 3;
    int8x16_t v227 = 0u;
    int8x16_t v228 = 0u;
    char v229 = 6;
    uint64_t v42 = v207;
    char v43 = static ConversationControlsType.== infix(_:_:)(v207);
    outlined destroy of ConversationControlsType((uint64_t)&v226);
    outlined init with copy of ConversationControlsType(v42, (uint64_t)&v226);
    uint64_t v199 = a8;
    if (v43)
    {
      outlined destroy of ConversationControlsType((uint64_t)&v226);
      if (v204)
      {
LABEL_53:
        char v57 = 1;
LABEL_54:
        ConversationControlsType.associatedNotice.getter((uint64_t)&v222);
        uint64_t v58 = v224.i64[0];
        if (v224.i64[0])
        {
          uint64_t v59 = v224.i64[1];
          __swift_project_boxed_opaque_existential_1(&v222, v224.i64[0]);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v59 + 64))(&v217, v58, v59);
          int v60 = v217;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v222);
          if (v60 == 1)
          {
            swift_bridgeObjectRelease();
            int v202 = 1;
          }
          else
          {
            int v202 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)&v222, &demangling cache variable for type metadata for Notice?);
          int v202 = 0;
        }
        char v61 = v34;
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v62 = type metadata accessor for Logger();
        uint64_t v63 = __swift_project_value_buffer(v62, (uint64_t)static Logger.banners);
        id v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc();
          *(_DWORD *)uint64_t v66 = 67109632;
          LODWORD(v222) = v57 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v66 + 8) = 1024;
          LODWORD(v222) = v202 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v66 + 14) = 1024;
          LODWORD(v222) = v61 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2F90000, v64, v65, "icsControlsVisible?:%{BOOL}d, dontIntegrateNotice?:%{BOOL}d, typeCanShowOverICS?:%{BOOL}d", (uint8_t *)v66, 0x14u);
          uint64_t v67 = v66;
          os_log_type_t v35 = (void *)MEMORY[0x1E4FBC8C8];
          MEMORY[0x1C87760E0](v67, -1, -1);
        }

        outlined init with copy of ConversationControlsType(v207, (uint64_t)&v222);
        if (v57)
        {
          outlined init with copy of ConversationControlsType((uint64_t)&v222, (uint64_t)&v217);
          if (v61)
          {
            ConversationControlsType.canShowOverICSAndInCallControls.getter();
            int v69 = v68;
            outlined destroy of ConversationControlsType((uint64_t)&v217);
            uint64_t v70 = outlined destroy of ConversationControlsType((uint64_t)&v222);
            if (((v69 | v202) & 1) == 0) {
              goto LABEL_79;
            }
          }
          else
          {
            outlined destroy of ConversationControlsType((uint64_t)&v217);
            uint64_t v70 = outlined destroy of ConversationControlsType((uint64_t)&v222);
            if ((v202 & 1) == 0)
            {
LABEL_79:
              uint64_t v87 = Logger.logObject.getter();
              os_log_type_t v88 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v87, v88))
              {
                uint64_t v89 = (uint8_t *)swift_slowAlloc();
                uint64_t v90 = swift_slowAlloc();
                uint64_t v217 = v90;
                *(_DWORD *)uint64_t v89 = 136315138;
                uint64_t v91 = ConversationControlsSizeClass.description.getter(v201);
                uint64_t v213 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v217);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1C2F90000, v87, v88, "InCall controls are visible, %s shouldn't be presented", v89, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1C87760E0](v90, -1, -1);
                MEMORY[0x1C87760E0](v89, -1, -1);
              }

              lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
              id v31 = (id)swift_allocError();
              *uint64_t v93 = 1;

              if (!v206) {
                goto LABEL_90;
              }
              id v94 = v31;
              v206(0, v31);

LABEL_91:
              id v99 = v31;
LABEL_92:

              return;
            }
          }
        }
        else
        {
          uint64_t v70 = outlined destroy of ConversationControlsType((uint64_t)&v222);
        }
        uint64_t v71 = (void *)(*(uint64_t (**)(uint64_t))((*v35 & *v16) + 0x180))(v70);
        if (!v71)
        {

          return;
        }
        uint64_t v72 = v71;
        int v202 = (*(uint64_t (**)(void))((*v35 & *v71) + 0x280))();
        unsigned __int8 v73 = objc_msgSend(*(id *)((char *)v16+ OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_callCenter), sel_cnk_hasTooManyCallsForCallWaitingBanner);
        char v74 = BannerPresentationManager.shouldPresentSystemApertureElementFromBanner(type:)(v207);
        uint64_t v198 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features;
        id v75 = *(void **)((char *)v16 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features);
        id v76 = *(uint64_t (**)(void))((*v35 & *v75) + 0x50);
        uint64_t v77 = v75;
        char v78 = v76();
        uint64_t v79 = (void *)MEMORY[0x1E4FBC8C8];
        LOBYTE(v76) = v78;

        if ((v76 & 1) != 0 && (v74 & 1) == 0)
        {
          if ((v204 & 1) == 0
            || (uint64_t v80 = *(void **)((char *)v16 + v198),
                uint64_t v81 = *(uint64_t (**)(void))((*v79 & *v80) + 0xC0),
                uint64_t v82 = v80,
                LOBYTE(v81) = v81(),
                v82,
                !(v81 & 1 | ((v202 & 1) == 0) | v73 & 1)))
          {
            unint64_t v83 = Logger.logObject.getter();
            os_log_type_t v84 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v83, v84))
            {
              uint64_t v85 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v85 = 0;
              _os_log_impl(&dword_1C2F90000, v83, v84, "[SystemAperture] System HUD presentation is managed by SpringBoard, updating system aperture element instead of presenting a new banner", v85, 2u);
              MEMORY[0x1C87760E0](v85, -1, -1);
            }

            BannerPresentationManager.updatePresentedSystemApertureElement(type:sizeClass:dismissPresentedBannerReason:)(v207, v201, 0, (void *)0xD000000000000022, 0x80000001C37B1CA0, (char *)&v217);
            char v86 = v217;
            if (v217 == 11)
            {

              id v31 = 0;
              id v231 = 0;
LABEL_98:
              if (v206)
              {
                v206(v31 == 0, v31);

                id v31 = v231;
                goto LABEL_91;
              }

              goto LABEL_90;
            }
            lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
            id v31 = (id)swift_allocError();
            *id v100 = v86;

            id v231 = v31;
            uint64_t v217 = (uint64_t)v31;
            id v101 = v31;
            id v102 = v31;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
            if ((swift_dynamicCast() & 1) == 0 || v213 - 9 > 1) {
              goto LABEL_98;
            }

            outlined init with copy of ConversationControlsType(v207, (uint64_t)&v217);
            uint64_t v103 = Logger.logObject.getter();
            os_log_type_t v104 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v103, v104))
            {
              uint64_t v105 = (uint8_t *)swift_slowAlloc();
              uint64_t v106 = swift_slowAlloc();
              v197 = v16;
              uint64_t v107 = v106;
              *(void *)&long long v209 = v106;
              *(_DWORD *)uint64_t v105 = 136315138;
              uint64_t v204 = (uint64_t)(v105 + 4);
              outlined init with copy of ConversationControlsType((uint64_t)&v217, (uint64_t)&v213);
              uint64_t v108 = v72;
              uint64_t v109 = specialized >> prefix<A>(_:)((uint64_t)&v213);
              unint64_t v111 = v110;
              outlined destroy of SystemUpdateNotice?((uint64_t)&v213, &demangling cache variable for type metadata for ConversationControlsType?);
              uint64_t v112 = v109;
              uint64_t v72 = v108;
              uint64_t v213 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v111, (uint64_t *)&v209);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v79 = (void *)MEMORY[0x1E4FBC8C8];
              swift_bridgeObjectRelease();
              outlined destroy of ConversationControlsType((uint64_t)&v217);
              _os_log_impl(&dword_1C2F90000, v103, v104, "Presenting %s in system aperture is unsupported, falling back to regular banner presentation.", v105, 0xCu);
              swift_arrayDestroy();
              uint64_t v113 = v107;
              id v16 = v197;
              MEMORY[0x1C87760E0](v113, -1, -1);
              MEMORY[0x1C87760E0](v105, -1, -1);
            }
            else
            {

              outlined destroy of ConversationControlsType((uint64_t)&v217);
            }

            id v231 = 0;
          }
        }
        unsigned __int8 v221 = 0;
        uint64_t v114 = *(uint64_t (**)(void))((*v79 & *v16) + 0x188);
        v195[1] = (*v79 & *v16) + 392;
        v196 = v114;
        v197 = v16;
        uint64_t v115 = v114();
        uint64_t v204 = v63;
        v195[0] = v72;
        if (!v115)
        {
LABEL_136:
          type metadata accessor for SpringBoardUtilities();
          BOOL v141 = static SpringBoardUtilities.checkSpringBoardState(for:)();
          LODWORD(v200) = static SpringBoardUtilities.checkSpringBoardState(for:)();
          uint64_t v142 = v197;
          objc_super v143 = *(void **)((char *)v197 + v198);
          if ((*(uint64_t (**)(void))((*v79 & *v143) + 0x58))())
          {
            uint64_t v144 = *(uint64_t (**)(void))((*v79 & *v143) + 0x50);
            Class v145 = v143;
            LODWORD(v146) = v144();
          }
          else
          {
            LODWORD(v146) = 1;
          }
          uint64_t v217 = 23;
          long long v218 = 0u;
          long long v219 = 0u;
          char v220 = 6;
          uint64_t v147 = v207;
          char v148 = static ConversationControlsType.== infix(_:_:)(v207);
          outlined destroy of ConversationControlsType((uint64_t)&v217);
          outlined init with copy of ConversationControlsType(v147, (uint64_t)&v217);
          if (v148)
          {
            outlined destroy of ConversationControlsType((uint64_t)&v217);
          }
          else
          {
            uint64_t v213 = 22;
            long long v214 = 0u;
            long long v215 = 0u;
            char v216 = 6;
            char v149 = static ConversationControlsType.== infix(_:_:)((uint64_t)&v217);
            outlined destroy of ConversationControlsType((uint64_t)&v213);
            outlined destroy of ConversationControlsType((uint64_t)&v217);
            if ((v149 & 1) == 0)
            {
              HasGreenTea3 = 0;
              goto LABEL_144;
            }
          }
          HasGreenTea3 = BannerPresentationManager.onlyHasGreenTea3PCall.getter();
LABEL_144:
          id v151 = v142;
          double v152 = Logger.logObject.getter();
          os_log_type_t v153 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v152, v153))
          {
            CGRect v154 = (_DWORD *)swift_slowAlloc();
            LODWORD(v198) = v146;
            double v146 = v154;
            *CGRect v154 = 67110144;
            LODWORD(v197) = HasGreenTea3;
            uint64_t v155 = v196;
            CGRect v156 = (void *)v196();

            LODWORD(v213) = v156 != 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            *((_WORD *)v146 + 4) = 1024;
            swift_beginAccess();
            LODWORD(v213) = v221;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *((_WORD *)v146 + 7) = 1024;
            LODWORD(v213) = v141;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *((_WORD *)v146 + 10) = 1024;
            LODWORD(v213) = v200 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *((_WORD *)v146 + 13) = 1024;
            LOBYTE(HasGreenTea3) = (_BYTE)v197;
            LODWORD(v213) = v202 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1C2F90000, v152, v153, "bannerPresented?:%{BOOL}d, shouldUpdatePresentedBanner?:%{BOOL}d, isLocked: %{BOOL}d, isCoversheet: %{BOOL}d, hasMultipleCalls: %{BOOL}d", (uint8_t *)v146, 0x20u);
            uint64_t v157 = v146;
            LOBYTE(v146) = v198;
            MEMORY[0x1C87760E0](v157, -1, -1);
          }
          else
          {

            uint64_t v155 = v196;
          }

          CGRect v158 = (void *)v155();
          if (v158 && (swift_beginAccess(), v221 == 1))
          {
            uint64_t v159 = v207;
            CGRect v160 = (void *)BannerPresentationManager.updatePresentedBanner(type:)(v207);

            id v231 = v160;
            outlined init with copy of ConversationControlsType(v159, (uint64_t)&v213);
            id v161 = v160;
            id v162 = v160;
            id v163 = v160;
            CGRect v164 = Logger.logObject.getter();
            os_log_type_t v165 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v164, v165))
            {
              uint64_t v166 = swift_slowAlloc();
              uint64_t v207 = swift_slowAlloc();
              *(void *)&long long v209 = v207;
              *(_DWORD *)uint64_t v166 = 136315650;
              uint64_t v167 = ConversationControlsSizeClass.description.getter(v201);
              *(void *)&v208[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v168, (uint64_t *)&v209);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v166 + 12) = 2080;
              uint64_t v169 = ConversationControlsType.debugDescription.getter();
              *(void *)&v208[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v169, v170, (uint64_t *)&v209);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined destroy of ConversationControlsType((uint64_t)&v213);
              *(_WORD *)(v166 + 22) = 2080;
              *(void *)&v208[0] = v160;
              id v171 = v160;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
              uint64_t v172 = String.init<A>(describing:)();
              *(void *)&v208[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v173, (uint64_t *)&v209);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              _os_log_impl(&dword_1C2F90000, v164, v165, "updatePresentedBanner sizeClass: %s, type: %s, error: %s", (uint8_t *)v166, 0x20u);
              uint64_t v174 = v207;
              swift_arrayDestroy();
              MEMORY[0x1C87760E0](v174, -1, -1);
              MEMORY[0x1C87760E0](v166, -1, -1);
            }
            else
            {
              outlined destroy of ConversationControlsType((uint64_t)&v213);
            }
            v183 = (void *)MEMORY[0x1E4FBC8C8];
            v181 = (void *)v195[0];
            if (v160)
            {
              (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v195[0]) + 0x270))();
              uint64_t v185 = v184;
              uint64_t ObjectType = swift_getObjectType();
              LOBYTE(v185) = (*(uint64_t (**)(uint64_t, uint64_t))(v185 + 88))(ObjectType, v185);
              uint64_t v187 = swift_unknownObjectRelease();
              if ((v185 & 1) != 0
                && (v188 = (void *)(*(uint64_t (**)(uint64_t))((*v183 & *v181) + 0x290))(v187),
                    v188,
                    !v188))
              {
              }
              else
              {
                static String._createEmpty(withInitialCapacity:)(27);
                swift_bridgeObjectRelease();
                uint64_t v213 = 0xD000000000000019;
                *(void *)&long long v214 = 0x80000001C37B1C80;
                *(void *)&long long v209 = v160;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
                v189._countAndFlagsBits = String.init<A>(describing:)();
                String.append(_:)(v189);
                swift_bridgeObjectRelease();
                v190 = (void *)MEMORY[0x1C87730B0](v213, v214);
                swift_bridgeObjectRelease();
                objc_msgSend(v151, sel_dismissPresentedBannerForReason_animated_, v190, 1);
              }
            }
          }
          else
          {
            char v175 = v146 | ~(_BYTE)v200 | HasGreenTea3 | v202;
            v176 = Logger.logObject.getter();
            os_log_type_t v177 = static os_log_type_t.default.getter();
            BOOL v178 = os_log_type_enabled(v176, v177);
            if (v175)
            {
              v179 = (void *)v195[0];
              if (v178)
              {
                v180 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v180 = 0;
                _os_log_impl(&dword_1C2F90000, v176, v177, "Presenting new banner", v180, 2u);
                MEMORY[0x1C87760E0](v180, -1, -1);
              }

              outlined init with copy of FeatureEligibility?(v203, (uint64_t)&v209, &demangling cache variable for type metadata for ConversationControlsType?);
              outlined init with copy of ConversationControlsType(v207, (uint64_t)v208);
              if (v212 == 255)
              {
                outlined init with take of ConversationControlsType(v208, &v213);
                outlined destroy of SystemUpdateNotice?((uint64_t)&v209, &demangling cache variable for type metadata for ConversationControlsType?);
              }
              else
              {
                outlined destroy of ConversationControlsType((uint64_t)v208);
                outlined init with take of ConversationControlsType(&v209, &v213);
              }
              uint64_t v192 = swift_allocObject();
              uint64_t v194 = v205;
              uint64_t v193 = (uint64_t)v206;
              *(void *)(v192 + 16) = v206;
              *(void *)(v192 + 24) = v194;
              _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v193);
              BannerPresentationManager.presentNewBanner(as:type:activityUUID:fromActivityManager:completion:)();

              swift_release();
              outlined destroy of ConversationControlsType((uint64_t)&v213);
              id v99 = v231;
              goto LABEL_92;
            }
            v181 = (void *)v195[0];
            if (v178)
            {
              v182 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v182 = 0;
              _os_log_impl(&dword_1C2F90000, v176, v177, "Skipping banner presentation because we are on coversheet and don't have multiple calls", v182, 2u);
              MEMORY[0x1C87760E0](v182, -1, -1);
            }
          }
          if (!v206)
          {

            return;
          }
          swift_beginAccess();
          id v31 = v231;
          id v191 = v231;
          v206(v31 == 0, v31);

          goto LABEL_91;
        }
        uint64_t v116 = (void *)v115;
        uint64_t v118 = *(void *)(v115 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier);
        unint64_t v117 = *(void *)(v115 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8);
        uint64_t v119 = HIBYTE(v117) & 0xF;
        if ((v117 & 0x2000000000000000) == 0) {
          uint64_t v119 = v118 & 0xFFFFFFFFFFFFLL;
        }
        if (v119)
        {
          uint64_t v120 = *(uint64_t (**)(uint64_t))((*v79 & *v72) + 0x288);
          uint64_t v121 = swift_bridgeObjectRetain();
          if (v118 == v120(v121) && v117 == v122) {
            int v124 = 1;
          }
          else {
            int v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v79 = (void *)MEMORY[0x1E4FBC8C8];
        }
        else
        {
          int v124 = 1;
        }
        uint64_t v125 = *(uint64_t (**)(void))((*v79 & *v116) + 0x1D8);
        uint64_t v126 = v125();
        outlined init with copy of ConversationControlsType(v207, (uint64_t)&v217);
        if (v126 == 2)
        {
          outlined destroy of ConversationControlsType((uint64_t)&v217);
          outlined init with copy of ConversationControlsType(v207, (uint64_t)&v213);
        }
        else
        {
          ConversationControlsType.associatedNotice.getter((uint64_t)&v213);
          outlined destroy of ConversationControlsType((uint64_t)&v217);
          uint64_t v127 = v215;
          outlined destroy of SystemUpdateNotice?((uint64_t)&v213, &demangling cache variable for type metadata for Notice?);
          outlined init with copy of ConversationControlsType(v207, (uint64_t)&v213);
          if (v127)
          {
            ConversationControlsType.associatedNotice.getter((uint64_t)&v209);
            uint64_t v128 = v210;
            if (v210)
            {
              uint64_t v129 = v211;
              __swift_project_boxed_opaque_existential_1(&v209, v210);
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v129 + 64))(v208, v128, v129);
              char v130 = v208[0];
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v209);
              if (v130) {
                LODWORD(v128) = _stringCompareWithSmolCheck(_:_:expecting:)();
              }
              else {
                LODWORD(v128) = 1;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              outlined destroy of SystemUpdateNotice?((uint64_t)&v209, &demangling cache variable for type metadata for Notice?);
            }
LABEL_125:
            uint64_t v131 = outlined destroy of ConversationControlsType((uint64_t)&v213);
            if (((uint64_t (*)(uint64_t))v125)(v131) == 2 || v125() == 3)
            {
              if (v124 & v128)
              {
                int v132 = v200;
LABEL_131:
                unsigned __int8 v133 = v132 ^ 1;
                goto LABEL_132;
              }
              unsigned __int8 v133 = 0;
              int v132 = v200;
            }
            else
            {
              int v132 = 0;
              unsigned __int8 v133 = 0;
              if (v124 & v128) {
                goto LABEL_131;
              }
            }
LABEL_132:
            unsigned __int8 v221 = v133;
            outlined init with copy of ConversationControlsType(v207, (uint64_t)&v217);
            uint64_t v134 = Logger.logObject.getter();
            os_log_type_t v135 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v134, v135))
            {
              uint64_t v136 = swift_slowAlloc();
              uint64_t v200 = swift_slowAlloc();
              *(void *)&long long v209 = v200;
              *(_DWORD *)uint64_t v136 = 67110146;
              swift_beginAccess();
              LODWORD(v213) = v221;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v136 + 8) = 1024;
              LODWORD(v213) = v124 & 1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v136 + 14) = 1024;
              LODWORD(v213) = v128 & 1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v136 + 20) = 1024;
              LODWORD(v213) = v132;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v136 + 26) = 2080;
              outlined init with copy of ConversationControlsType((uint64_t)&v217, (uint64_t)&v213);
              uint64_t v137 = specialized >> prefix<A>(_:)((uint64_t)&v213);
              unint64_t v139 = v138;
              outlined destroy of SystemUpdateNotice?((uint64_t)&v213, &demangling cache variable for type metadata for ConversationControlsType?);
              uint64_t v213 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v139, (uint64_t *)&v209);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined destroy of ConversationControlsType((uint64_t)&v217);
              _os_log_impl(&dword_1C2F90000, v134, v135, "shouldUpdatePresentedBanner: %{BOOL}d, presentedBannerUsesActiveCall: %{BOOL}d, noticeShouldIntegrate: %{BOOL}d, presentedBannerWantsTransitionToHUD: %{BOOL}d, type: %s", (uint8_t *)v136, 0x24u);
              uint64_t v140 = v200;
              swift_arrayDestroy();
              MEMORY[0x1C87760E0](v140, -1, -1);
              MEMORY[0x1C87760E0](v136, -1, -1);
            }
            else
            {
              outlined destroy of ConversationControlsType((uint64_t)&v217);
            }
            uint64_t v79 = (void *)MEMORY[0x1E4FBC8C8];
            goto LABEL_136;
          }
        }
        LODWORD(v128) = 1;
        goto LABEL_125;
      }
    }
    else
    {
      ConversationControlsType.associatedNotice.getter((uint64_t)&v222);
      outlined destroy of ConversationControlsType((uint64_t)&v226);
      if (v224.i64[0])
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Notice);
        uint64_t v44 = type metadata accessor for PushToTalkNotice(0);
        uint64_t v45 = swift_dynamicCast() ^ 1;
        uint64_t v46 = (uint64_t)v14;
      }
      else
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)&v222, &demangling cache variable for type metadata for Notice?);
        uint64_t v44 = type metadata accessor for PushToTalkNotice(0);
        uint64_t v46 = (uint64_t)v14;
        uint64_t v45 = 1;
      }
      __swift_storeEnumTagSinglePayload(v46, v45, 1, v44);
      type metadata accessor for PushToTalkNotice(0);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v44);
      uint64_t updated = outlined destroy of SystemUpdateNotice?((uint64_t)v14, &demangling cache variable for type metadata for PushToTalkNotice?);
      if (v204)
      {
        if (EnumTagSinglePayload)
        {
          char v57 = (*(uint64_t (**)(uint64_t))((*v35 & *v16) + 0x218))(updated);
          goto LABEL_54;
        }
        goto LABEL_53;
      }
    }
    char v57 = 0;
    goto LABEL_54;
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.banners);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_1C2F90000, v28, v29, "BannerPresentationManager deallocated before banner presentation performed.", v30, 2u);
    MEMORY[0x1C87760E0](v30, -1, -1);
  }

  if (v206)
  {
    lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
    id v31 = (id)swift_allocError();
    unsigned char *v32 = 4;
    v206(0, v31);
    goto LABEL_91;
  }
}

uint64_t BannerPresentationManager.shouldPresentSystemApertureElementFromBanner(type:)(uint64_t a1)
{
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v1
                                                                   + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features))
                             + 0x50))() & 1) != 0)
  {
    outlined init with copy of ConversationControlsType(a1, (uint64_t)&v7);
    if (v10 == 6)
    {
      int8x16_t v3 = vorrq_s8(v8, v9);
      int8x8_t v4 = vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0x16 && *(void *)&v4 == 0) {
        return 1;
      }
    }
    outlined destroy of ConversationControlsType((uint64_t)&v7);
  }
  return 0;
}

void BannerPresentationManager.updatePresentedSystemApertureElement(type:sizeClass:dismissPresentedBannerReason:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v107 = a4;
  int v112 = a3;
  uint64_t v110 = a2;
  os_log_type_t v11 = (int *)type metadata accessor for HUDActivityManager.BannerUpdate(0);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v108 = (uint64_t)&v101 - v16;
  uint64_t v17 = *(void **)((char *)v6 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features);
  int8x16_t v18 = (void *)MEMORY[0x1E4FBC8C8];
  char v19 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v17) + 0xE0))(v15);
  uint64_t v111 = a1;
  if (v19)
  {
    outlined init with copy of ConversationControlsType(a1, (uint64_t)&v123);
    uint64_t v109 = a6;
    if (v126 == 3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v126 == 4)
      {
        uint64_t v23 = 0x4085E00000000000;
LABEL_43:
        id v50 = *(void **)((char *)v6 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_activityManager);
        uint64_t v106 = v6;
        uint64_t v107 = v50;
        outlined init with copy of ConversationControlsType(a1, (uint64_t)&v123);
        char v51 = ConversationControlsType.isTemporary.getter();
        uint64_t v52 = type metadata accessor for UUID();
        uint64_t v105 = &v101;
        uint64_t v53 = *(void *)(v52 - 8);
        MEMORY[0x1F4188790](v52);
        uint64_t v55 = (char *)&v101 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
        UUID.init()();
        id v56 = &v14[v11[11]];
        *((void *)v56 + 1) = 0;
        swift_unknownObjectWeakInit();
        *(void *)unint64_t v14 = v23;
        outlined init with copy of ConversationControlsType((uint64_t)&v123, (uint64_t)(v14 + 8));
        *((void *)v14 + 7) = v110;
        v14[64] = v112 & 1;
        *((void *)v56 + 1) = 0;
        swift_unknownObjectWeakAssign();
        v14[65] = v51 & 1;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(&v14[v11[8]], v55, v52);
        uint64_t v57 = type metadata accessor for Date();
        uint64_t v58 = *(void *)(v57 - 8);
        MEMORY[0x1F4188790](v57);
        int v60 = (char *)&v101 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
        static Date.now.getter();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
        outlined destroy of ConversationControlsType((uint64_t)&v123);
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(&v14[v11[9]], v60, v57);
        *(void *)&v14[v11[10]] = 0;
        uint64_t v61 = v108;
        outlined init with take of HUDActivityManager.BannerUpdate((uint64_t)v14, v108);
        uint64_t v62 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v107) + 0xF0))(v61);
        uint64_t v64 = v63;
        outlined destroy of SessionActionNotice(v61, (void (*)(void))type metadata accessor for HUDActivityManager.BannerUpdate);
        uint64_t v123 = 6;
        int8x16_t v124 = 0u;
        int8x16_t v125 = 0u;
        char v126 = 6;
        LOBYTE(v52) = static ConversationControlsType.== infix(_:_:)(v111);
        outlined destroy of ConversationControlsType((uint64_t)&v123);
        if (v52)
        {
          a6 = v109;
          if (one-time initialization token for banners != -1) {
            swift_once();
          }
          uint64_t v65 = type metadata accessor for Logger();
          __swift_project_value_buffer(v65, (uint64_t)static Logger.banners);
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v66, v67))
          {
            int v68 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)int v68 = 0;
            _os_log_impl(&dword_1C2F90000, v66, v67, "Adding incoming call activity", v68, 2u);
            MEMORY[0x1C87760E0](v68, -1, -1);
          }

          BannerPresentationManager.incomingCallActivity.setter(v64);
          if (!v62) {
            goto LABEL_52;
          }
        }
        else
        {
          swift_release();
          a6 = v109;
          if (!v62)
          {
LABEL_52:
            char v100 = 11;
LABEL_79:
            *a6 = v100;
            return;
          }
        }
        uint64_t v123 = v62;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        if (swift_dynamicCast()) {
          return;
        }
        goto LABEL_52;
      }
      if (v126 != 6
        || ((v123 & 0xFFFFFFFFFFFFFFFELL) != 0x18 ? (BOOL v20 = v123 == 21) : (BOOL v20 = 1),
            !v20 ? (BOOL v21 = v123 == 6) : (BOOL v21 = 1),
            !v21
         || (int8x16_t v22 = vorrq_s8(v124, v125),
             *(void *)&vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)))))
      {
        outlined destroy of ConversationControlsType((uint64_t)&v123);
        uint64_t v23 = 0x4082C00000000000;
        goto LABEL_43;
      }
    }
    uint64_t v23 = 0x4089000000000000;
    goto LABEL_43;
  }
  uint64_t v24 = *(uint64_t (**)(void))((*v18 & *v6) + 0x1A0);
  unint64_t v25 = (void *)v24();

  if (!v25)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.banners);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1C2F90000, v28, v29, "Unable to update presentedSystemApertureElement since its nil, making a new instance", v30, 2u);
      MEMORY[0x1C87760E0](v30, -1, -1);
    }

    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x1D8))();
    uint64_t v26 = swift_unknownObjectRelease();
  }
  uint64_t v108 = a5;
  uint64_t v31 = ((uint64_t (*)(uint64_t))v24)(v26);
  if (!v31)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.banners);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1C2F90000, v42, v43, "Unable to makeSystemApertureElementProvider", v44, 2u);
      MEMORY[0x1C87760E0](v44, -1, -1);
    }

    char v100 = 8;
    goto LABEL_79;
  }
  unint64_t v32 = (void *)v31;
  char v33 = (void *)MEMORY[0x1E4FBC8C8];
  char v34 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x50))();
  uint64_t v35 = v111;
  if ((v34 & 1) == 0)
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.banners);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1C2F90000, v37, v38, "Invalid state: features.isSystemApertureEnabled is false but presentedSystemApertureElement != nil", v39, 2u);
      MEMORY[0x1C87760E0](v39, -1, -1);
    }
  }
  BOOL v40 = (*(uint64_t (**)(void))((*v33 & *v32) + 0x550))() == 4
     && (*(uint64_t (**)(void))((*v33 & *v32) + 0x1D8))() == 0;
  ConversationControlsType.associatedNotice.getter((uint64_t)&v123);
  uint64_t v45 = v125.i64[0];
  if (!v125.i64[0])
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v123, &demangling cache variable for type metadata for Notice?);
LABEL_59:
    outlined init with copy of ConversationControlsType(v35, (uint64_t)&v123);
    goto LABEL_60;
  }
  uint64_t v46 = v125.i64[1];
  __swift_project_boxed_opaque_existential_1(&v123, v125.i64[0]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v46 + 64))(&v119, v45, v46);
  char v47 = v119;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
  if (v47)
  {
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v49 = swift_bridgeObjectRelease();
    if ((v48 & 1) == 0) {
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v49 = swift_bridgeObjectRelease();
  }
  int v69 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x188))(v49);
  if (!v69) {
    goto LABEL_59;
  }
  uint64_t v70 = v69;
  uint64_t v71 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v69) + 0x1D8))();

  if (v71 != 3) {
    goto LABEL_59;
  }
  outlined init with copy of ConversationControlsType(v35, (uint64_t)&v123);
  if (!v40)
  {
    uint64_t v119 = 25;
    long long v120 = 0u;
    long long v121 = 0u;
    char v122 = 6;
    LODWORD(v105) = static ConversationControlsType.== infix(_:_:)((uint64_t)&v123);
    outlined destroy of ConversationControlsType((uint64_t)&v119);
    outlined destroy of ConversationControlsType((uint64_t)&v123);
    goto LABEL_61;
  }
LABEL_60:
  outlined destroy of ConversationControlsType((uint64_t)&v123);
  LODWORD(v105) = 1;
LABEL_61:
  outlined init with copy of ConversationControlsType(v35, (uint64_t)&v119);
  if (!v40)
  {
LABEL_65:
    int v75 = 0;
    goto LABEL_66;
  }
  ConversationControlsType.associatedNotice.getter((uint64_t)v116);
  uint64_t v72 = v117;
  if (!v117)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v116, &demangling cache variable for type metadata for Notice?);
    goto LABEL_65;
  }
  uint64_t v73 = v118;
  __swift_project_boxed_opaque_existential_1(v116, v117);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v73 + 64))(v115, v72, v73);
  char v74 = v115[0];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  int v75 = specialized == infix<A>(_:_:)(v74, 0);
LABEL_66:
  int v104 = v75;
  outlined destroy of ConversationControlsType((uint64_t)&v119);
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v76 = type metadata accessor for Logger();
  uint64_t v77 = __swift_project_value_buffer(v76, (uint64_t)static Logger.banners);
  outlined init with copy of ConversationControlsType(v35, (uint64_t)v116);
  outlined init with copy of ConversationControlsType(v35, (uint64_t)v115);
  char v78 = v32;
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.default.getter();
  BOOL v81 = os_log_type_enabled(v79, v80);
  uint64_t v109 = a6;
  if (v81)
  {
    uint64_t v103 = v77;
    uint64_t v106 = v7;
    uint64_t v82 = swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    v114[0] = v102;
    *(_DWORD *)uint64_t v82 = 136447490;
    outlined init with copy of ConversationControlsType((uint64_t)v116, (uint64_t)v113);
    unint64_t v83 = v78;
    uint64_t v84 = specialized >> prefix<A>(_:)((uint64_t)v113);
    unint64_t v86 = v85;
    outlined destroy of SystemUpdateNotice?((uint64_t)v113, &demangling cache variable for type metadata for ConversationControlsType?);
    v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v86, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ConversationControlsType((uint64_t)v116);
    *(_WORD *)(v82 + 12) = 2080;
    ConversationControlsType.associatedNotice.getter((uint64_t)v113);
    uint64_t v87 = specialized >> prefix<A>(_:)((uint64_t)v113);
    unint64_t v89 = v88;
    outlined destroy of SystemUpdateNotice?((uint64_t)v113, &demangling cache variable for type metadata for Notice?);
    v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v89, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v90 = outlined destroy of ConversationControlsType((uint64_t)v115);
    *(_WORD *)(v82 + 22) = 2082;
    v113[0] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v83) + 0x1D8))(v90);
    uint64_t v91 = String.init<A>(reflecting:)();
    v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 32) = 2082;
    if (v112)
    {
      unint64_t v93 = 0xE300000000000000;
      uint64_t v94 = 7104878;
    }
    else
    {
      v113[0] = v110;
      uint64_t v94 = String.init<A>(reflecting:)();
      unint64_t v93 = v96;
    }
    v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v93, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 42) = 1024;
    LODWORD(v113[0]) = v105 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v82 + 48) = 1024;
    unsigned __int8 v95 = v104;
    LODWORD(v113[0]) = v104 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v79, v80, "updateSystemApertureElement type:%{public}s,\nnotice:%s,\ncurrent sizeClass:%{public}s,\nupdated sizeClass:%{public}s,\nshouldDismissPresentedBanner:%{BOOL}d,\nshouldIgnoreSizeClassUpdate:%{BOOL}d", (uint8_t *)v82, 0x36u);
    uint64_t v97 = v102;
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v97, -1, -1);
    MEMORY[0x1C87760E0](v82, -1, -1);

    uint64_t v7 = v106;
    uint64_t v35 = v111;
    char v78 = v83;
  }
  else
  {
    outlined destroy of ConversationControlsType((uint64_t)v116);
    outlined destroy of ConversationControlsType((uint64_t)v115);

    unsigned __int8 v95 = v104;
  }
  if (v95) {
    uint64_t v98 = 0;
  }
  else {
    uint64_t v98 = v110;
  }
  (*(void (**)(uint64_t, uint64_t, void, void, void))((*MEMORY[0x1E4FBC8C8] & *v78) + 0x420))(v35, v98, (v95 | v112) & 1, 0, 0);
  if ((v105 & (v108 != 0)) == 1)
  {
    id v99 = (void *)MEMORY[0x1C87730B0](v107);
    objc_msgSend(v7, sel_dismissPresentedBannerForReason_animated_, v99, 0);
  }
  else
  {
  }
  *uint64_t v109 = 11;
}

uint64_t BannerPresentationManager.onlyHasGreenTea3PCall.getter()
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
  if (result)
  {
    objc_super v2 = (void *)result;
    id v3 = objc_msgSend((id)result, sel_provider);
    unsigned int v4 = objc_msgSend(v3, sel_supportsDynamicSystemUI);

    if (v4
      && (id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init),
          unsigned int v6 = objc_msgSend(v5, sel_groupConversations),
          v5,
          v6))
    {
      char HasChinaSKU = TUDeviceHasChinaSKU();

      if (HasChinaSKU) {
        return 1;
      }
    }
    else
    {
    }
    return 0;
  }
  return result;
}

uint64_t BannerPresentationManager.updatePresentedBanner(type:)(uint64_t a1)
{
  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x188))();
  if (v4)
  {
    id v5 = (void *)v4;
    objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBannerDismissalTimer), sel_invalidate);
    objc_msgSend(*(id *)((char *)v1+ OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_systemApertureElementDismissalTimer), sel_invalidate);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.banners);
    outlined init with copy of ConversationControlsType(a1, (uint64_t)v24);
    outlined init with copy of ConversationControlsType(a1, (uint64_t)v23);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v22 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      outlined init with copy of ConversationControlsType((uint64_t)v24, (uint64_t)v21);
      uint64_t v11 = specialized >> prefix<A>(_:)((uint64_t)v21);
      unint64_t v13 = v12;
      outlined destroy of SystemUpdateNotice?((uint64_t)v21, &demangling cache variable for type metadata for ConversationControlsType?);
      v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v24);
      *(_WORD *)(v9 + 12) = 2080;
      ConversationControlsType.associatedNotice.getter((uint64_t)v21);
      uint64_t v14 = specialized >> prefix<A>(_:)((uint64_t)v21);
      unint64_t v16 = v15;
      outlined destroy of SystemUpdateNotice?((uint64_t)v21, &demangling cache variable for type metadata for Notice?);
      v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v23);
      _os_log_impl(&dword_1C2F90000, v7, v8, "updatePresentedBanner type:%s, notice:%s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v10, -1, -1);
      uint64_t v17 = v9;
      id v3 = (void *)MEMORY[0x1E4FBC8C8];
      MEMORY[0x1C87760E0](v17, -1, -1);
    }
    else
    {
      outlined destroy of ConversationControlsType((uint64_t)v24);
      outlined destroy of ConversationControlsType((uint64_t)v23);
    }

    if (((*(uint64_t (**)(uint64_t, void, uint64_t, void))((*v3 & *v5) + 0x418))(a1, 0, 1, 0) & 1) == 0)
    {
      lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
      uint64_t v18 = swift_allocError();
      *char v19 = 8;

      return v18;
    }
  }
  return 0;
}

Swift::Void __swiftcall BannerPresentationManager.dismissPresentedBanner(forReason:animated:)(Swift::String forReason, Swift::Bool animated)
{
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_6_63();
  uint64_t v6 = (*(uint64_t (**)(void))(v5 + 392))();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = OUTLINED_FUNCTION_20();
    swift_unknownObjectWeakInit();
    uint64_t v9 = (void *)swift_allocObject();
    _OWORD v9[2] = v8;
    long long v9[3] = v7;
    v9[4] = v4;
    v9[5] = v2;
    OUTLINED_FUNCTION_168_0();
    uint64_t v11 = *(void (**)(uint64_t))(v10 + 1176);
    swift_retain();
    id v12 = v7;
    OUTLINED_FUNCTION_8_11();
    swift_bridgeObjectRetain();
    uint64_t v13 = OUTLINED_FUNCTION_30_15();
    v11(v13);

    swift_release();
    OUTLINED_FUNCTION_28();
    swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_28();
  }
}

void closure #1 in BannerPresentationManager.dismissPresentedBanner(forReason:animated:)(int a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = a2 + 16;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x1C8776240](v9);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    (*(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x208))(&v47);
    if (v48)
    {
      outlined init with take of Notice(&v47, (uint64_t)v50);
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.banners);
      outlined init with copy of IDSLookupManager((uint64_t)v50, (uint64_t)&v47);
      uint64_t v13 = a3;
      swift_bridgeObjectRetain_n();
      uint64_t v14 = v13;
      unint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      int v17 = v16;
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        uint64_t v46 = v42;
        *(_DWORD *)uint64_t v18 = 136315906;
        int v41 = v17;
        uint64_t v44 = a4;
        uint64_t v20 = *(void *)&v14[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier];
        unint64_t v19 = *(void *)&v14[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v46);
        v40[3] = &v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2080;
        v40[2] = v18 + 14;
        uint64_t v21 = type metadata accessor for UUID();
        v40[1] = v40;
        uint64_t v22 = *(void *)(v21 - 8);
        MEMORY[0x1F4188790](v21);
        uint64_t v24 = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        int v43 = a1;
        uint64_t v25 = v48;
        uint64_t v26 = v49;
        __swift_project_boxed_opaque_existential_1(&v47, v48);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v29 = v28;
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
        uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
        *(_WORD *)(v18 + 22) = 1024;
        LODWORD(v45) = v43 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 28) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, a5, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2F90000, v15, (os_log_type_t)v41, "Dismissed banner:%s, notice:%s with result:%{BOOL}d for reason:%s", (uint8_t *)v18, 0x26u);
        uint64_t v30 = v42;
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v30, -1, -1);
        MEMORY[0x1C87760E0](v18, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v47, &demangling cache variable for type metadata for Notice?);
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.banners);
      unint64_t v32 = a3;
      swift_bridgeObjectRetain_n();
      char v33 = v32;
      char v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        int v43 = a1;
        uint64_t v37 = swift_slowAlloc();
        v50[0] = v37;
        *(_DWORD *)uint64_t v36 = 136315650;
        uint64_t v44 = a4;
        uint64_t v38 = *(void *)&v33[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier];
        unint64_t v39 = *(void *)&v33[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier + 8];
        swift_bridgeObjectRetain();
        *(void *)&long long v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 1024;
        LODWORD(v47) = v43 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 18) = 2080;
        swift_bridgeObjectRetain();
        *(void *)&long long v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, a5, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2F90000, v34, v35, "Dismissed banner:%s with result:%{BOOL}d for reason:%s", (uint8_t *)v36, 0x1Cu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v37, -1, -1);
        MEMORY[0x1C87760E0](v36, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    BannerPresentationManager.presentedBanner.setter(0);
  }
}

Swift::Void __swiftcall BannerPresentationManager.dismissPresentedBanner(matching:forReason:animated:)(Swift::OpaquePointer matching, Swift::String forReason, Swift::Bool animated)
{
  uint64_t v4 = v3;
  object = forReason._object;
  uint64_t countAndFlagsBits = forReason._countAndFlagsBits;
  OUTLINED_FUNCTION_6_63();
  uint64_t v10 = (*(uint64_t (**)(void))(v9 + 392))();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    OUTLINED_FUNCTION_19_6();
    (*(void (**)(long long *__return_ptr))(v12 + 496))(v16);

    outlined init with take of ConversationControlsType(v16, v17);
    uint64_t v13 = *((void *)matching._rawValue + 2);
    if (v13)
    {
      uint64_t v14 = (char *)matching._rawValue + 32;
      swift_bridgeObjectRetain();
      while ((static ConversationControlsType.== infix(_:_:)((uint64_t)v14) & 1) == 0)
      {
        v14 += 48;
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v15 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
      objc_msgSend(v4, sel_dismissPresentedBannerForReason_animated_, v15, animated);
    }
LABEL_8:
    outlined destroy of ConversationControlsType((uint64_t)v17);
  }
}

double BannerPresentationManager.getConversationControlsTypeForPresentedBanner()@<D0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_6_63();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 392))();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    OUTLINED_FUNCTION_19_6();
    (*(void (**)(long long *__return_ptr))(v5 + 496))(v7);

    outlined init with take of ConversationControlsType(v7, (_OWORD *)a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 40) = 6;
  }
  return result;
}

void closure #1 in BannerPresentationManager.updatePresentedHUD(type:replacingNotice:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    BannerPresentationManager.updateWorkItem.setter(0);
  }
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1C8776240](v5);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(a2, a3 & 1);
  }
}

void BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1A0))();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.banners);
    outlined init with copy of ConversationControlsType(a1, (uint64_t)&v55);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v13 = v50;
      *(_DWORD *)uint64_t v12 = 136446466;
      outlined init with copy of ConversationControlsType((uint64_t)&v55, (uint64_t)&v51);
      uint64_t v14 = v3;
      uint64_t v15 = a1;
      char v16 = a2;
      uint64_t v17 = specialized >> prefix<A>(_:)((uint64_t)&v51);
      unint64_t v19 = v18;
      outlined destroy of SystemUpdateNotice?((uint64_t)&v51, &demangling cache variable for type metadata for ConversationControlsType?);
      uint64_t v20 = v17;
      a2 = v16;
      a1 = v15;
      uint64_t v3 = v14;
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v50);
      uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)&v55);
      *(_WORD *)(v12 + 12) = 1024;
      LODWORD(v51) = a2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v10, v11, "updatePresentedSystemApertureHUD for type %{public}s replacingNotice: %{BOOL}d", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v13, -1, -1);
      MEMORY[0x1C87760E0](v12, -1, -1);
    }
    else
    {
      outlined destroy of ConversationControlsType((uint64_t)&v55);
    }

    if ((shouldUpdate #1 (existing:) in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(v8, a2 & 1) & 1) == 0)
    {
      (*(void (**)(uint64_t))((*v6 & *v8) + 0x428))(a1);
      goto LABEL_18;
    }
    uint64_t v21 = *(void **)((char *)v3 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features);
    if ((*(uint64_t (**)(void))((*v6 & *v21) + 0xD8))() & 1) != 0 && (a2) {
      (*(void (**)(void))((*v6 & **(void **)((char *)v3
    }
                                             + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_activityManager))
                        + 0x100))();
    BannerPresentationManager.updatePresentedSystemApertureElement(type:sizeClass:dismissPresentedBannerReason:)(a1, 0, 1, 0, 0, (char *)&v55);
    char v22 = v55;
    if (v55 != 11)
    {
      if (v55 - 9 <= 1)
      {
        updatedExistingBanner #1 () in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(v3, a2 & 1, a1);
LABEL_18:

        return;
      }
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = v8;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v55 = v26;
        *(_DWORD *)uint64_t v25 = 136315138;
        LOBYTE(v51) = v22;
        uint64_t v27 = String.init<A>(reflecting:)();
        uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v23, v24, "Unable to update presented system aperture element: %s", v25, 0xCu);
        swift_arrayDestroy();
        uint64_t v29 = v26;
        uint64_t v8 = v49;
        MEMORY[0x1C87760E0](v29, -1, -1);
        MEMORY[0x1C87760E0](v25, -1, -1);
      }
    }
    uint64_t v30 = *(void **)((char *)v3
                     + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager__conversationControlsManager);
    if (v30)
    {
      uint64_t v31 = a1;
      unint64_t v32 = *(uint64_t (**)(void))((*v6 & *v30) + 0x280);
      char v33 = v30;
      if ((v32() & 1) != 0 && ((*(uint64_t (**)(void))((*v6 & *v21) + 0xC0))() & 1) == 0)
      {
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v46))
        {
          long long v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v47 = 0;
          _os_log_impl(&dword_1C2F90000, v37, v46, "Skipping dismiss presented banner for updating SystemAperture HUD", v47, 2u);
          MEMORY[0x1C87760E0](v47, -1, -1);
        }

        goto LABEL_32;
      }

      a1 = v31;
    }
    uint64_t v55 = 22;
    long long v56 = 0u;
    long long v57 = 0u;
    char v58 = 6;
    char v34 = static ConversationControlsType.== infix(_:_:)(a1);
    outlined destroy of ConversationControlsType((uint64_t)&v55);
    outlined init with copy of ConversationControlsType(a1, (uint64_t)&v55);
    if (v34)
    {
      outlined destroy of ConversationControlsType((uint64_t)&v55);
    }
    else
    {
      uint64_t v51 = 23;
      long long v52 = 0u;
      long long v53 = 0u;
      char v54 = 6;
      char v35 = static ConversationControlsType.== infix(_:_:)((uint64_t)&v55);
      outlined destroy of ConversationControlsType((uint64_t)&v51);
      uint64_t v36 = outlined destroy of ConversationControlsType((uint64_t)&v55);
      if ((v35 & 1) == 0)
      {
        if ((a2 & 1) == 0)
        {
          BOOL v40 = (void *)(*(uint64_t (**)(uint64_t))((*v6 & *v3) + 0x188))(v36);
          if (v40)
          {
            int v41 = v40;
            (*(void (**)(uint64_t *__return_ptr))((*v6 & *v40) + 0x1F0))(&v51);
            ConversationControlsType.canShowOverICS.getter();
            char v43 = v42;
            outlined destroy of ConversationControlsType((uint64_t)&v51);
            if (v43)
            {
              uint64_t v37 = Logger.logObject.getter();
              os_log_type_t v44 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v37, v44))
              {
                uint64_t v45 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v45 = 0;
                _os_log_impl(&dword_1C2F90000, v37, v44, "Skipping dismiss presented notice", v45, 2u);
                MEMORY[0x1C87760E0](v45, -1, -1);
              }

              goto LABEL_32;
            }
          }
        }
        uint64_t v48 = (void *)MEMORY[0x1C87730B0](0xD00000000000001BLL, 0x80000001C37B1C60);
        objc_msgSend(v3, sel_dismissPresentedBannerForReason_animated_, v48, 1);

        goto LABEL_18;
      }
    }
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v39 = 0;
      _os_log_impl(&dword_1C2F90000, v37, v38, "Skipping dismiss presented banner for updating SystemAperture HUD for GreenTea3P call", v39, 2u);
      MEMORY[0x1C87760E0](v39, -1, -1);
    }

LABEL_32:
    return;
  }
  updatedExistingBanner #1 () in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(v2, a2 & 1, a1);
}

uint64_t shouldUpdate #1 (existing:) in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(void *a1, char a2)
{
  void (*v5)(unint64_t *__return_ptr);
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned char v16[48];
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char v20;

  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x1F0);
  v5(&v17);
  if (v20 == 5)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v8 = outlined destroy of ConversationControlsType((uint64_t)&v17);
  ((void (*)(unint64_t *__return_ptr, uint64_t))v5)(&v17, v8);
  if (v20 == 6 && v17 == 25)
  {
    uint64_t v9 = vorrq_s8(v18, v19);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))
    {
      outlined destroy of ConversationControlsType((uint64_t)&v17);
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.banners);
      os_log_type_t v11 = Logger.logObject.getter();
      uint64_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_1C2F90000, v11, v12, "shouldUpdatePresentedHUD=false for controlsType= incomingScreenSharingRequest", v13, 2u);
        MEMORY[0x1C87760E0](v13, -1, -1);
      }

      return 0;
    }
  }
  uint64_t v14 = outlined destroy of ConversationControlsType((uint64_t)&v17);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x1D8))(v14);
  if (v15 < 2) {
    goto LABEL_16;
  }
  if (v15 == 2) {
    return 0;
  }
  if (v15 == 3)
  {
LABEL_16:
    if (a2) {
      return 1;
    }
    v5(&v17);
    outlined init with copy of ConversationControlsType((uint64_t)&v17, (uint64_t)v16);
    uint64_t v6 = v16[40] != 0;
    outlined destroy of ConversationControlsType((uint64_t)v16);
    outlined destroy of ConversationControlsType((uint64_t)&v17);
    return v6;
  }
  uint64_t v17 = v15;
  double result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t canUpdateBanner #1 (to:) in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(uint64_t a1, id a2)
{
  if (objc_msgSend(a2, sel_isPresentingFullScreenCallUI))
  {
    ConversationControlsType.canShowOverICS.getter();
    char v4 = v3;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.banners);
    outlined init with copy of ConversationControlsType(a1, (uint64_t)v24);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v23 = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      outlined init with copy of ConversationControlsType((uint64_t)v24, (uint64_t)v22);
      uint64_t v10 = specialized >> prefix<A>(_:)((uint64_t)v22);
      unint64_t v12 = v11;
      outlined destroy of SystemUpdateNotice?((uint64_t)v22, &demangling cache variable for type metadata for ConversationControlsType?);
      v22[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v24);
      *(_WORD *)(v8 + 12) = 1024;
      LODWORD(v22[0]) = v4 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2F90000, v6, v7, "canUpdateBanner for %s is %{BOOL}d, isPresentingFullScreenCallUI: 1", (uint8_t *)v8, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v9, -1, -1);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }
    else
    {
      outlined destroy of ConversationControlsType((uint64_t)v24);
    }
  }
  else
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.banners);
    outlined init with copy of ConversationControlsType(a1, (uint64_t)v24);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v23 = v17;
      *(_DWORD *)char v16 = 136315138;
      outlined init with copy of ConversationControlsType((uint64_t)v24, (uint64_t)v22);
      uint64_t v18 = specialized >> prefix<A>(_:)((uint64_t)v22);
      unint64_t v20 = v19;
      outlined destroy of SystemUpdateNotice?((uint64_t)v22, &demangling cache variable for type metadata for ConversationControlsType?);
      v22[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v24);
      _os_log_impl(&dword_1C2F90000, v14, v15, "canUpdateBanner to %s is true because isPresentingFullScreenCallUI: 0", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v17, -1, -1);
      MEMORY[0x1C87760E0](v16, -1, -1);
    }
    else
    {
      outlined destroy of ConversationControlsType((uint64_t)v24);
    }

    char v4 = 1;
  }
  return v4 & 1;
}

void updatedExistingBanner #1 () in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (v6)
  {
    os_log_type_t v7 = v6;
    if (shouldUpdate #1 (existing:) in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(v6, a2 & 1) & 1) != 0&& (canUpdateBanner #1 (to:) in BannerPresentationManager._updatePresentedHUD(type:replacingNotice:)(a3, a1))
    {
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.banners);
      outlined init with copy of ConversationControlsType(a3, (uint64_t)v26);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        uint64_t v25 = v12;
        *(_DWORD *)uint64_t v11 = 136446466;
        outlined init with copy of ConversationControlsType((uint64_t)v26, (uint64_t)v24);
        uint64_t v13 = specialized >> prefix<A>(_:)((uint64_t)v24);
        unint64_t v15 = v14;
        outlined destroy of SystemUpdateNotice?((uint64_t)v24, &demangling cache variable for type metadata for ConversationControlsType?);
        v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ConversationControlsType((uint64_t)v26);
        *(_WORD *)(v11 + 12) = 1024;
        LODWORD(v24[0]) = a2 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2F90000, v9, v10, "updatePresentedHUD for type %{public}s replacingNotice: %{BOOL}d", (uint8_t *)v11, 0x12u);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v12, -1, -1);
        MEMORY[0x1C87760E0](v11, -1, -1);
      }
      else
      {
        outlined destroy of ConversationControlsType((uint64_t)v26);
      }

      return;
    }
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.banners);
  outlined init with copy of ConversationControlsType(a3, (uint64_t)v26);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v25 = v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    outlined init with copy of ConversationControlsType((uint64_t)v26, (uint64_t)v24);
    uint64_t v21 = specialized >> prefix<A>(_:)((uint64_t)v24);
    unint64_t v23 = v22;
    outlined destroy of SystemUpdateNotice?((uint64_t)v24, &demangling cache variable for type metadata for ConversationControlsType?);
    v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ConversationControlsType((uint64_t)v26);
    *(_WORD *)(v19 + 12) = 1024;
    LODWORD(v24[0]) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v17, v18, "skipping updatePresentedHUD for type %{public}s replacingNotice: %{BOOL}d", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v20, -1, -1);
    MEMORY[0x1C87760E0](v19, -1, -1);
  }
  else
  {
    outlined destroy of ConversationControlsType((uint64_t)v26);
  }
}

Swift::Void __swiftcall BannerPresentationManager.updatePresentedHUDCornerRadius()()
{
  OUTLINED_FUNCTION_6_63();
  if ((*(uint64_t (**)(void))(v0 + 392))())
  {
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_3_14();
    v1();
  }
}

Swift::Void __swiftcall BannerPresentationManager.bannerDismissedBySpringBoard()()
{
  id v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_236();
  OUTLINED_FUNCTION_150_5();
  if (v5())
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    os_log_type_t v7 = (void *)OUTLINED_FUNCTION_30(v6, (uint64_t)static Logger.banners);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_107(v8))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_168(&dword_1C2F90000, v9, v10, "SpringBoard requested banner dismissal");
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_236();
    OUTLINED_FUNCTION_150_5();
    if (v11())
    {
      uint64_t v12 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload(v1, 1, 1, v12);
      type metadata accessor for MainActor();
      id v13 = v2;
      uint64_t v14 = static MainActor.shared.getter();
      unint64_t v15 = (void *)swift_allocObject();
      uint64_t v16 = MEMORY[0x1E4FBCFD8];
      v15[2] = v14;
      v15[3] = v16;
      v15[4] = v13;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5();
      swift_release();
      OUTLINED_FUNCTION_47();
      v17._uint64_t countAndFlagsBits = 0xD000000000000026;
      HUDActivityManager.dismissPresentedBanner(forReason:animated:)(v17, 1);
    }
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_83_0();
    v18();
  }
}

uint64_t closure #1 in BannerPresentationManager.bannerDismissedBySpringBoard()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in BannerPresentationManager.bannerDismissedBySpringBoard(), v6, v5);
}

uint64_t closure #1 in BannerPresentationManager.bannerDismissedBySpringBoard()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_incomingCallActivity);
  if (v2)
  {
    uint64_t v3 = *(void (**)(uint64_t))(*(void *)v2 + 224);
    uint64_t v4 = swift_retain();
    v3(v4);
    swift_release();
  }
  **(unsigned char **)(v0 + 16) = v2 == 0;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

Swift::Void __swiftcall BannerPresentationManager.preloadCallChanges()()
{
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.banners);
  uint64_t v2 = v0;
  uint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_105(v4))
  {
    uint64_t v5 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v6 = (void *)swift_slowAlloc();
    _DWORD *v5 = 138412290;
    uint64_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v2;

    OUTLINED_FUNCTION_34_6(&dword_1C2F90000, v8, v9, "Prewarming %@ for a potential call change");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_360();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
}

Swift::Void __swiftcall BannerPresentationManager.requestPreferredLayoutMode()()
{
  OUTLINED_FUNCTION_6_63();
  if ((*(uint64_t (**)(void))(v0 + 416))())
  {
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_3_14();
    v1();
  }
}

Swift::Void __swiftcall BannerPresentationManager.didOpenMessages()()
{
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  char v4 = 6;
  *(void *)(OUTLINED_FUNCTION_20() + 16) = v0;
  id v1 = v0;
  BannerPresentationManager.presentBanner(as:type:reply:)();
  swift_release();
  outlined destroy of ConversationControlsType((uint64_t)v2);
}

void closure #1 in BannerPresentationManager.didOpenMessages()(char a1, void *a2, void *a3)
{
  if (a1)
  {
    char v4 = (void *)MEMORY[0x1E4FBC8C8];
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)((char *)a3
                                                                     + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features))
                               + 0x50))() & 1) == 0)
      return;
    uint64_t v5 = (*(uint64_t (**)(void))((*v4 & *a3) + 0x1A0))();
    if (v5)
    {
      os_log_t oslog = v5;
      (*(void (**)(void))((*v4 & (uint64_t)v5->isa) + 0x438))();
    }
    else
    {
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.banners);
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_1C2F90000, oslog, v18, "[SystemAperture] Unable to request preferredLayoutMode since there is no presentedSystemApertureElement", v19, 2u);
        MEMORY[0x1C87760E0](v19, -1, -1);
      }
    }
    goto LABEL_11;
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.banners);
  id v8 = a2;
  id v9 = a2;
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(oslog, v10))
  {

LABEL_11:

    return;
  }
  uint64_t v11 = (uint8_t *)swift_slowAlloc();
  uint64_t v12 = swift_slowAlloc();
  uint64_t v21 = v12;
  *(_DWORD *)uint64_t v11 = 136315138;
  if (a2)
  {
    id v13 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v14 = String.init<A>(reflecting:)();
    unint64_t v16 = v15;
  }
  else
  {
    unint64_t v16 = 0xE300000000000000;
    uint64_t v14 = 7104878;
  }
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v21);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1C2F90000, oslog, v10, "Failed to present banner after opening messages with error: %s", v11, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C87760E0](v12, -1, -1);
  MEMORY[0x1C87760E0](v11, -1, -1);
}

Swift::Void __swiftcall BannerPresentationManager.didRequestAVLessDowngrade()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_21();
  uint64_t v10 = v9 - v8;
  BannerPresentationManager.placeholderCallGroupUUID.getter(v9 - v8);
  OUTLINED_FUNCTION_33_0(v10, 1, v2);
  if (v11)
  {
    outlined destroy of SystemUpdateNotice?(v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.banners);
    id v13 = v0;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_37();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 138412290;
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v13;

      _os_log_impl(&dword_1C2F90000, v14, v15, "Requested AVLess downgrade, but couldn't find placeholderCallGroupUUID %@", v16, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_360();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v10, v2);
    OUTLINED_FUNCTION_0_20();
    uint64_t v20 = (void *)(*(uint64_t (**)(void))(v19 + 232))();
    if (v20)
    {
      uint64_t v21 = v20;
      if (objc_msgSend(v20, sel_respondsToSelector_, sel_bannerPresentationManagerAVDowngradedGroupUUID_))
      {
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v21, sel_bannerPresentationManagerAVDowngradedGroupUUID_, isa);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    uint64_t v23 = OUTLINED_FUNCTION_30_15();
    v24(v23);
  }
  OUTLINED_FUNCTION_28();
}

uint64_t BannerPresentationManager.placeholderCallGroupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  PlaceholderCallCenter.activeCall.getter();
  if (v2)
  {
    PlaceholderCall.callGroupUUID.getter(a1);
    return swift_release();
  }
  else
  {
    uint64_t v4 = type metadata accessor for UUID();
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v4);
  }
}

Swift::Void __swiftcall BannerPresentationManager.requestEphemeralSystemApertureAlert(reason:shouldOverridePersistentAssertion:)(Swift::String reason, Swift::Bool shouldOverridePersistentAssertion)
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_3_16();
  if ((*(uint64_t (**)(void))(v2 + 80))())
  {
    OUTLINED_FUNCTION_129_4();
    uint64_t v4 = (*(uint64_t (**)(void))(v3 + 416))();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      OUTLINED_FUNCTION_19_6();
      (*(void (**)(void))(v6 + 696))();

      uint64_t v7 = OUTLINED_FUNCTION_30_15();
      v8(v7);
      OUTLINED_FUNCTION_12_2();
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_12_2();
    }
  }
  else
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    os_log_t loga = OUTLINED_FUNCTION_30(v10, (uint64_t)static Logger.banners);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_4_14(v11, v12, v13, v14, v15, v16, v17, v18, v28, loga))
    {
      uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v19);
      OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v20, v21, "requestEphemeralSystemApertureAlert called when system aperture isn't supported", v22, v23, v24, v25, v29, log);
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_12_2();
  }
}

Swift::Void __swiftcall BannerPresentationManager.requestPersistentSystemApertureAlert(reason:)(Swift::String reason)
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_6_63();
  if ((*(uint64_t (**)(void))(v1 + 80))())
  {
    OUTLINED_FUNCTION_236();
    uint64_t v3 = (*(uint64_t (**)(void))(v2 + 416))();
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      OUTLINED_FUNCTION_19_6();
      (*(void (**)(void))(v5 + 696))();

      OUTLINED_FUNCTION_30_15();
      OUTLINED_FUNCTION_150_5();
      v6();
      OUTLINED_FUNCTION_12_2();
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_12_2();
    }
  }
  else
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    os_log_t loga = OUTLINED_FUNCTION_30(v8, (uint64_t)static Logger.banners);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_4_14(v9, v10, v11, v12, v13, v14, v15, v16, v26, loga))
    {
      int v17 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v17);
      OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v18, v19, "requestPersistentSystemApertureAlert called when system aperture isn't supported", v20, v21, v22, v23, v27, log);
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_12_2();
  }
}

Swift::Void __swiftcall BannerPresentationManager.invalidatePersistentSystemApertureAlert(reason:)(Swift::String reason)
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_6_63();
  if ((*(uint64_t (**)(void))(v1 + 80))())
  {
    OUTLINED_FUNCTION_236();
    uint64_t v3 = (*(uint64_t (**)(void))(v2 + 416))();
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      OUTLINED_FUNCTION_19_6();
      (*(void (**)(void))(v5 + 696))();

      OUTLINED_FUNCTION_30_15();
      OUTLINED_FUNCTION_150_5();
      v6();
      OUTLINED_FUNCTION_12_2();
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_12_2();
    }
  }
  else
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    os_log_t loga = OUTLINED_FUNCTION_30(v8, (uint64_t)static Logger.banners);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_4_14(v9, v10, v11, v12, v13, v14, v15, v16, v26, loga))
    {
      int v17 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v17);
      OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v18, v19, "invalidatePersistentSystemApertureAlert called when system aperture isn't supported", v20, v21, v22, v23, v27, log);
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_12_2();
  }
}

void BannerPresentationManager.presentShareCardViewController(_:)()
{
  OUTLINED_FUNCTION_6_63();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 392))();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    OUTLINED_FUNCTION_19_6();
    id v5 = (id)(*(uint64_t (**)(void))(v3 + 720))();

    if (v5)
    {
      type metadata accessor for ConversationHUDViewController();
      if (swift_dynamicCastClass())
      {
        uint64_t v4 = (void *)OUTLINED_FUNCTION_8_11();
        ConversationHUDViewController.presentShareCardViewController(_:)(v4);
      }
    }
  }
}

uint64_t BannerPresentationManager.isMicIndicatorVisible.getter()
{
  if (SBUIIsSystemApertureEnabled()) {
    uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
  }
  else {
    uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
  }
  uint64_t v2 = (void *)v1;
  if (!v1) {
    return 0;
  }
  OUTLINED_FUNCTION_6_63();
  char v4 = (*(uint64_t (**)(void))(v3 + 936))();

  return v4 & 1;
}

uint64_t protocol witness for SystemConversationControlsDelegate.isAlertAvailable.getter in conformance BannerPresentationManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

void protocol witness for SystemConversationControlsDelegate.dismissPresentedBanner(forReason:animated:) in conformance BannerPresentationManager(uint64_t a1, uint64_t a2, char a3)
{
  id v5 = (id)MEMORY[0x1C87730B0]();
  objc_msgSend(v3, sel_dismissPresentedBannerForReason_animated_, v5, a3 & 1);
}

id protocol witness for SystemConversationControlsDelegate.deepLinkToFullScreenCallUI() in conformance BannerPresentationManager()
{
  return objc_msgSend(v0, sel_deepLinkToFullScreenCallUI);
}

id protocol witness for SystemConversationControlsDelegate.isSpringBoardLocked.getter in conformance BannerPresentationManager()
{
  return objc_msgSend(v0, sel_isSpringBoardLocked);
}

void protocol witness for SystemConversationControlsDelegate.invalidatePersistentSystemApertureAlert(reason:) in conformance BannerPresentationManager()
{
  id v1 = (id)MEMORY[0x1C87730B0]();
  objc_msgSend(v0, sel_invalidatePersistentSystemApertureAlertWithReason_, v1);
}

uint64_t BannerPresentationManager.inCallSceneSessionIdentifier.getter()
{
  OUTLINED_FUNCTION_0_20();
  id v1 = (void *)(*(uint64_t (**)(void))(v0 + 232))();
  uint64_t v2 = (uint64_t)v1;
  if (v1)
  {
    id v3 = objc_msgSend(v1, sel_inCallSceneSessionIdentifier);
    swift_unknownObjectRelease();
    if (v3)
    {
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t BannerPresentationManager.backgroundActivitiesToSuppress.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(v1 + 232))();
  if (!v2) {
    return MEMORY[0x1E4FBC870];
  }
  id v3 = objc_msgSend(v2, sel_backgroundActivitiesToSuppress);
  OUTLINED_FUNCTION_8_11();
  swift_unknownObjectRelease();
  type metadata accessor for STBackgroundActivityIdentifier(0);
  lazy protocol witness table accessor for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier((uint64_t)&lazy protocol witness table cache variable for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier);
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

id BannerPresentationManager.hasPresentedFullScreenCallUI.getter()
{
  return BannerPresentationManager.isAlertAvailable.getter((SEL *)&selRef_hasPresentedFullScreenCallUI);
}

id BannerPresentationManager.isPresentingFullScreenCallUI.getter()
{
  return BannerPresentationManager.isAlertAvailable.getter((SEL *)&selRef_isPresentingFullScreenCallUI);
}

id BannerPresentationManager.isAmbient.getter()
{
  return BannerPresentationManager.isAlertAvailable.getter((SEL *)&selRef_isAmbient);
}

id BannerPresentationManager.isAlertAvailable.getter(SEL *a1)
{
  OUTLINED_FUNCTION_0_20();
  id v3 = (void *)(*(uint64_t (**)(void))(v2 + 232))();
  if (!v3) {
    return 0;
  }
  id v4 = [v3 *a1];
  swift_unknownObjectRelease();
  return v4;
}

id BannerPresentationManager.isSpringBoardLocked.getter()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 232))();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  if (objc_msgSend(v1, sel_respondsToSelector_, sel_bannerPresentationManagerWantsSpringBoardIsLockedStatus))id v3 = objc_msgSend(v2, sel_bannerPresentationManagerWantsSpringBoardIsLockedStatus); {
  else
  }
    id v3 = 0;
  swift_unknownObjectRelease();
  return v3;
}

void *BannerPresentationManager.presentFullscreenUI()()
{
  OUTLINED_FUNCTION_0_20();
  double result = (void *)(*(uint64_t (**)(void))(v0 + 232))();
  if (result)
  {
    objc_msgSend(result, sel_bannerPresentationManagerShowFullscreenUI);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall BannerPresentationManager.deepLinkToFullScreenCallDetailsView()()
{
}

Swift::Void __swiftcall BannerPresentationManager.deepLinkToFullScreenPTTCallDetailsView()()
{
}

void *BannerPresentationManager.deepLinkToFullScreenCallDetailsView()(SEL *a1)
{
  OUTLINED_FUNCTION_0_20();
  double result = (void *)(*(uint64_t (**)(void))(v2 + 232))();
  if (result)
  {
    id v4 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a1)) {
      [v4 *a1];
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void BannerPresentationManager.didDismiss(_:reason:)(void *a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x1E4FBC8C8];
  OUTLINED_FUNCTION_3_16();
  (*(void (**)(void))(v5 + 344))();
  OUTLINED_FUNCTION_1_12();
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 384))();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    (*(void (**)(void *__return_ptr))((*v4 & *a1) + 0x1F0))(v17);
    (*(void (**)(void *, uint64_t))((*v4 & *v8) + 0x9C8))(v17, a2);

    outlined destroy of ConversationControlsType((uint64_t)v17);
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_151_5();
  uint64_t v10 = v9();
  if (v10)
  {
    int v11 = (void *)v10;
    type metadata accessor for SystemBannerHostViewController();
    int v12 = a1;
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
      BannerPresentationManager.presentedBanner.setter(0);
      OUTLINED_FUNCTION_30_21();
      int v15 = (void *)(*(uint64_t (**)(void))(v14 + 232))();
      if (v15)
      {
        int v16 = v15;
        if (objc_msgSend(v15, sel_respondsToSelector_, sel_bannerPresentationManagerDidDismissBanner)) {
          objc_msgSend(v16, sel_bannerPresentationManagerDidDismissBanner);
        }
        swift_unknownObjectRelease();
      }
    }
  }
}

Swift::Void __swiftcall BannerPresentationManager.invalidateAndReschedulePresentedBannerTimer(reschedule:)(Swift::Bool reschedule)
{
  uint64_t v2 = v1;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_presentedBannerDismissalTimer), sel_invalidate);
  if (!reschedule) {
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_30_21();
  OUTLINED_FUNCTION_151_5();
  if (!v4()) {
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_19_6();
  id v17 = v5;
  OUTLINED_FUNCTION_104_6();
  if (v6())
  {
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_104_6();
    if ((v7() & 1) == 0)
    {
      self;
      OUTLINED_FUNCTION_0_91();
      OUTLINED_FUNCTION_121_3();
      v10();
      ConversationControlsType.dismissTimerDuration(inCallControls:)(0);
      outlined destroy of ConversationControlsType((uint64_t)aBlock);
      uint64_t v11 = OUTLINED_FUNCTION_20();
      swift_unknownObjectWeakInit();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = v17;
      aBlock[4] = partial apply for closure #1 in BannerPresentationManager.invalidateAndReschedulePresentedBannerTimer(reschedule:);
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
      aBlock[3] = &block_descriptor_36_0;
      char v13 = _Block_copy(aBlock);
      id v14 = v17;
      uint64_t v15 = swift_release();
      id v16 = OUTLINED_FUNCTION_154_5(v15, sel_scheduledTimerWithTimeInterval_repeats_block_);
      _Block_release(v13);
      BannerPresentationManager.presentedBannerDismissalTimer.setter((uint64_t)v16);

LABEL_9:
      OUTLINED_FUNCTION_108_2();
      return;
    }
  }
  OUTLINED_FUNCTION_108_2();
}

Swift::Void __swiftcall BannerPresentationManager.invalidateAndRescheduleSystemApertureTimer(reschedule:)(Swift::Bool reschedule)
{
  uint64_t v2 = v1;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_systemApertureElementDismissalTimer), sel_invalidate);
  if (!reschedule || (OUTLINED_FUNCTION_30_21(), OUTLINED_FUNCTION_83_0(), !v4()))
  {
LABEL_9:
    OUTLINED_FUNCTION_108_2();
    return;
  }
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_3_14();
  if (v5())
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_30(v6, (uint64_t)static Logger.banners);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v8))
    {
      uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v9);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v10, v11, "[SystemAperture] scheduling new ephemeral state timer");
      OUTLINED_FUNCTION_3();
    }

    self;
    OUTLINED_FUNCTION_0_91();
    OUTLINED_FUNCTION_121_3();
    v12();
    ConversationControlsType.dismissTimerDuration(inCallControls:)(0);
    outlined destroy of ConversationControlsType((uint64_t)aBlock);
    uint64_t v13 = OUTLINED_FUNCTION_20();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in BannerPresentationManager.invalidateAndRescheduleSystemApertureTimer(reschedule:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    aBlock[3] = &block_descriptor_40_2;
    id v14 = _Block_copy(aBlock);
    uint64_t v15 = swift_release();
    id v16 = OUTLINED_FUNCTION_154_5(v15, sel_scheduledTimerWithTimeInterval_repeats_block_);
    _Block_release(v14);
    BannerPresentationManager.systemApertureElementDismissalTimer.setter((uint64_t)v16);

    goto LABEL_9;
  }
  OUTLINED_FUNCTION_108_2();
}

void closure #1 in BannerPresentationManager.invalidateAndReschedulePresentedBannerTimer(reschedule:)(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v19)(uint64_t *__return_ptr);
  void *v20;
  void *v21;
  uint64_t (*v22)(void);
  void *v23;
  uint64_t v24;
  void *v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void v40[2];
  long long v41;
  long long v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  long long v46;
  char v47;

  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1C8776240](v4);
  if (!v5) {
    return;
  }
  uint64_t v6 = (void *)v5;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x1D8))() != 2)
  {
    id v19 = *(void (**)(uint64_t *__return_ptr))((*v7 & *a3) + 0x1F0);
    v19(&v44);
    switch(v47)
    {
      case 1:
      case 3:
        swift_bridgeObjectRelease();
        goto LABEL_27;
      case 2:

        goto LABEL_21;
      case 4:
        goto LABEL_27;
      case 5:
        swift_unknownObjectRelease();
        goto LABEL_21;
      case 6:
        uint64_t v37 = *((void *)&v45 + 1) | v46 | *((void *)&v46 + 1);
        if (!(v37 | v44 | (unint64_t)v45)) {
          goto LABEL_27;
        }
        os_log_type_t v38 = v37 | v45;
        if (v44 == 1 && !v38) {
          goto LABEL_27;
        }
        if (v44 == 2 && !v38)
        {
LABEL_15:
          int v21 = *(void **)((char *)v6 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_features);
          int v22 = *(uint64_t (**)(void))((*v7 & *v21) + 0x50);
          int v23 = v21;
          LOBYTE(v22) = v22();

          if ((v22 & 1) == 0)
          {
            int v24 = (*(uint64_t (**)(void))((*v7 & *v6) + 0x180))();
            if (v24)
            {
              uint64_t v25 = (void *)v24;
              uint64_t v26 = ConversationControlsManager.shouldPresentCollaborationHUD.getter();

              if (v26)
              {
                os_log_type_t v44 = 11;
                uint64_t v45 = 0u;
                os_log_type_t v46 = 0u;
                long long v47 = 6;
                BannerPresentationManager.presentBanner(as:type:reply:)(3, &v44, 0, 0);

                outlined destroy of ConversationControlsType((uint64_t)&v44);
                return;
              }
            }
            BannerPresentationManager.presentSystemHUD()();
            BannerPresentationManager.showInCallHUD()();
            goto LABEL_13;
          }
        }
        else if ((v44 != 3 || v38) {
               && (v44 != 4 || v38)
        }
               && ((unint64_t)(v44 - 5) <= 4 && !v38
                || (v44 != 10 || v38)
                && (v44 != 11 || v38)
                && (v44 != 12 || v38)
                && (v44 != 13 || v38)
                && (v44 != 14 || v38)
                && ((unint64_t)(v44 - 15) <= 4 && !v38
                 || (v44 != 20 || v38) && (v44 != 21 || v38) && (v44 & 0xFFFFFFFFFFFFFFFELL) == 0x16 && !v38)))
        {
LABEL_21:
          if (one-time initialization token for banners != -1) {
            swift_once();
          }
          uint64_t v27 = type metadata accessor for Logger();
          __swift_project_value_buffer(v27, (uint64_t)static Logger.banners);
          uint64_t v28 = a3;
          uint64_t v29 = Logger.logObject.getter();
          uint64_t v30 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            unint64_t v32 = swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 136315138;
            v40[1] = v31 + 4;
            *(void *)&int v41 = v32;
            v19(&v44);
            char v33 = specialized >> prefix<A>(_:)((uint64_t)&v44);
            char v35 = v34;
            outlined destroy of SystemUpdateNotice?((uint64_t)&v44, &demangling cache variable for type metadata for ConversationControlsType?);
            os_log_type_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, (uint64_t *)&v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_1C2F90000, v29, v30, "reset banner for %s", v31, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C87760E0](v32, -1, -1);
            MEMORY[0x1C87760E0](v31, -1, -1);
          }
          else
          {
          }
        }
LABEL_27:
        uint64_t v36 = (void *)MEMORY[0x1C87730B0](0xD000000000000023, 0x80000001C37B1C30);
        objc_msgSend(v6, sel_dismissPresentedBannerForReason_animated_, v36, 1);

        return;
      default:
        outlined destroy of ConversationControlsType((uint64_t)&v44);
        goto LABEL_15;
    }
  }
  uint64_t v8 = (*(uint64_t (**)(void))((*v7 & *v6) + 0x180))();
  if (!v8)
  {
LABEL_12:
    int v20 = (void *)MEMORY[0x1C87730B0](0xD000000000000023, 0x80000001C37B1C30);
    objc_msgSend(v6, sel_dismissPresentedBannerForReason_animated_, v20, 1);

LABEL_13:
    return;
  }
  uint64_t v9 = (void *)v8;
  uint64_t v10 = *(id *)(v8 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_noticeCoordinator);

  uint64_t v11 = (void *)(*(uint64_t (**)(void))((*v7 & *v6) + 0x188))();
  if (!v11)
  {
    char v43 = 0;
    int v41 = 0u;
    char v42 = 0u;
    goto LABEL_11;
  }
  uint64_t v12 = v11;
  (*(void (**)(long long *__return_ptr))((*v7 & *v11) + 0x208))(&v41);

  if (!*((void *)&v42 + 1))
  {
LABEL_11:

    outlined destroy of SystemUpdateNotice?((uint64_t)&v41, &demangling cache variable for type metadata for Notice?);
    goto LABEL_12;
  }
  outlined init with take of Notice(&v41, (uint64_t)&v44);
  long long v13 = v46;
  __swift_project_boxed_opaque_existential_1(&v44, v46);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  id v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void, void))(*((void *)&v13 + 1) + 8))(v13, *((void *)&v13 + 1));
  ConversationControlsNoticeCoordinator.noticeDismissed(noticeUUID:dismissContext:)();
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(long long *__return_ptr, uint64_t))((*v7 & *v10) + 0x88))(&v41, v18);
  if (*((void *)&v42 + 1))
  {

    outlined destroy of SystemUpdateNotice?((uint64_t)&v41, &demangling cache variable for type metadata for Notice?);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v41, &demangling cache variable for type metadata for Notice?);
    unint64_t v39 = (void *)MEMORY[0x1C87730B0](0xD000000000000023, 0x80000001C37B1C30);
    objc_msgSend(v6, sel_dismissPresentedBannerForReason_animated_, v39, 1);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
}

Swift::Void __swiftcall BannerPresentationManager.showInCallHUD()()
{
}

void closure #1 in BannerPresentationManager.invalidateAndRescheduleSystemApertureTimer(reschedule:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    BannerPresentationManager.systemApertureElementDismissalTimerFired()();
  }
}

Swift::Void __swiftcall BannerPresentationManager.systemApertureElementDismissalTimerFired()()
{
  OUTLINED_FUNCTION_6_63();
  if ((*(uint64_t (**)(void))(v0 + 416))())
  {
    OUTLINED_FUNCTION_19_6();
    id v9 = v1;
    OUTLINED_FUNCTION_104_6();
    if (v2())
    {
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      uint64_t v4 = (void *)OUTLINED_FUNCTION_30(v3, (uint64_t)static Logger.banners);
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_2_12(v5))
      {
        uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_22_1(v6);
        OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v7, v8, "[SystemAperture] ephemeral state timer fired, resetting banner to system HUD");
        OUTLINED_FUNCTION_3();
      }

      BannerPresentationManager.presentSystemHUD()();
    }
  }
}

BOOL BannerPresentationManager.hasAssociatedCall.getter()
{
  id v0 = BannerPresentationManager.associatedCall.getter();
  if (v0) {
    swift_unknownObjectRelease();
  }
  return v0 != 0;
}

uint64_t BannerPresentationManager.wantsBannerWithoutScene.getter()
{
  BannerPresentationManager.onlyHasHandoffEligibleCall.getter();
  if (v0) {
    char HasHandedOff = 1;
  }
  else {
    char HasHandedOff = BannerPresentationManager.onlyHasHandedOffCall.getter();
  }
  HasGreenTea3 = BannerPresentationManager.onlyHasGreenTea3PCall.getter();
  OUTLINED_FUNCTION_0_20();
  if ((*(uint64_t (**)(void))(v3 + 80))())
  {
    HasGreenTea3 |= HasHandedOff;
  }
  else
  {
    if (HasHandedOff) {
      goto LABEL_11;
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 648))() & 1) == 0)
    {
      BannerPresentationManager.onlyHasAVLessCall.getter();
      if (v4) {
LABEL_11:
      }
        HasGreenTea3 = 1;
    }
  }
  return HasGreenTea3 & 1;
}

void BannerPresentationManager.onlyHasHandoffEligibleCall.getter()
{
  if (BannerPresentationManager.onlyHasPlaceholderCall.getter())
  {
    PlaceholderCallCenter.activeCall.getter();
    if (v0) {
      swift_release();
    }
  }
}

uint64_t BannerPresentationManager.onlyHasHandedOffCall.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();

  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)(*(uint64_t (**)(void))((*v1 & *v0) + 0x160))();
  if (v3)
  {

    return 0;
  }
  return 1;
}

void BannerPresentationManager.onlyHasAVLessCall.getter()
{
  if (BannerPresentationManager.onlyHasPlaceholderCall.getter())
  {
    PlaceholderCallCenter.activeCall.getter();
    if (!v0 || (int v1 = *(unsigned __int8 *)(v0 + 16), swift_release(), v1 != 1))
    {
      PlaceholderCallCenter.activeCall.getter();
      if (v2) {
        swift_release();
      }
    }
  }
}

void BannerPresentationManager.handleCallStatusDidChange(_:)()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v16[1] = static OS_dispatch_queue.main.getter();
  uint64_t v0 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  uint64_t v1 = type metadata accessor for Notification();
  OUTLINED_FUNCTION_5_3();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  v7();
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v9 + v8, (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v17[4] = partial apply for closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:);
  v17[5] = v9;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed () -> ();
  _OWORD v17[3] = &block_descriptor_47;
  uint64_t v10 = _Block_copy(v17);
  swift_release();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_59_0();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_5_1();
  v17[0] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_172();
  _Block_release(v10);

  uint64_t v13 = OUTLINED_FUNCTION_21_3();
  v14(v13);
  OUTLINED_FUNCTION_139();
  v15();
  OUTLINED_FUNCTION_28();
}

void closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1C8776240](a1 + 16);
  if (!v7) {
    return;
  }
  unint64_t v8 = (void *)v7;
  Notification.object.getter();
  if (v72[3])
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCall);
    if (swift_dynamicCast())
    {
      uint64_t v9 = (void *)v74;
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      uint64_t v11 = (void *)__swift_project_value_buffer(v10, (uint64_t)static Logger.banners);
      id v12 = v9;
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      uint64_t v15 = &selRef_trailingBarAlpha;
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v16 = swift_slowAlloc();
        int v69 = (void *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        uint64_t v70 = (void **)v17;
        *(_DWORD *)uint64_t v16 = 136315394;
        uint64_t v71 = v11;
        v72[0] = v17;
        LODWORD(v74) = objc_msgSend(v12, sel_status);
        type metadata accessor for TUCallStatus(0);
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2112;
        uint64_t v74 = (uint64_t)v12;
        id v20 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        int v21 = v69;
        *int v69 = v12;

        uint64_t v15 = &selRef_trailingBarAlpha;
        _os_log_impl(&dword_1C2F90000, v13, v14, "handleCallStatusDidChange, status:%s for call:%@", (uint8_t *)v16, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v21, -1, -1);
        int v22 = v70;
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v22, -1, -1);
        MEMORY[0x1C87760E0](v16, -1, -1);
      }
      else
      {
      }
      uint64_t v36 = *(void *)((char *)v8 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_incomingCallActivity);
      uint64_t v37 = (void *)MEMORY[0x1E4FBC8C8];
      if (v36)
      {
        os_log_type_t v38 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v8) + 0x160);
        uint64_t v39 = swift_retain();
        BOOL v40 = (void *)v38(v39);
        if (!v40 || (int v41 = v40, v42 = [v40 v15[76]], v41, v42 != 4))
        {
          uint64_t v43 = type metadata accessor for TaskPriority();
          __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v43);
          type metadata accessor for MainActor();
          swift_retain();
          os_log_type_t v44 = v8;
          uint64_t v45 = static MainActor.shared.getter();
          os_log_type_t v46 = (void *)swift_allocObject();
          uint64_t v47 = MEMORY[0x1E4FBCFD8];
          void v46[2] = v45;
          v46[3] = v47;
          v46[4] = v36;
          v46[5] = v44;
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
          swift_release();
        }
        swift_release();
      }
      uint64_t v48 = (uint64_t)BannerPresentationManager.shouldPresentHandoffCompletedBanner(for:)(v12);
      char v49 = v48;
      if (v48)
      {
        uint64_t v50 = *(uint64_t (**)(id))((*v37 & *v8) + 0x150);
        id v51 = v12;
        uint64_t v48 = v50(v12);
      }
      long long v52 = *(uint64_t (**)(uint64_t))((*v37 & *v8) + 0x180);
      uint64_t v53 = (*v37 & *v8) + 384;

      if (v49)
      {
        uint64_t v70 = (void **)v53;
        char v54 = v12;
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = swift_slowAlloc();
          int v69 = v52;
          char v58 = (uint8_t *)v57;
          int v68 = (void *)swift_slowAlloc();
          uint64_t v71 = v8;
          v72[0] = (uint64_t)v54;
          *(_DWORD *)char v58 = 138412290;
          uint64_t v59 = v54;
          unint64_t v8 = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          int v60 = v68;
          *int v68 = v54;

          uint64_t v37 = (void *)MEMORY[0x1E4FBC8C8];
          _os_log_impl(&dword_1C2F90000, v55, v56, "handleCallStatusDidChange: showing handoff continued session banner for call: %@", v58, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1C87760E0](v60, -1, -1);
          uint64_t v61 = v58;
          long long v52 = (uint64_t (*)(uint64_t))v69;
          MEMORY[0x1C87760E0](v61, -1, -1);
        }
        else
        {

          uint64_t v55 = v54;
        }

        v72[0] = outlined bridged method (pb) of @objc TUCall.localizedHandoffRecipientDeviceCategory.getter(v54);
        v72[1] = v62;
        char v73 = 1;
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        BannerPresentationManager.presentBanner(as:type:reply:)();
        swift_release();
        outlined destroy of ConversationControlsType((uint64_t)v72);
        swift_release();
      }
      uint64_t v63 = OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_shouldRequestHUDPresentationOnAVUpgradeOrDowngrade;
      if (*((unsigned char *)v8
           + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_shouldRequestHUDPresentationOnAVUpgradeOrDowngrade) == 1
        && ([v12 v15[76]] == 1 || objc_msgSend(v12, v15[76]) == 6))
      {
        *((unsigned char *)v8 + v63) = 0;
        BannerPresentationManager.presentSystemHUD()();
      }
      uint64_t v64 = (void *)((uint64_t (*)(void))v52)();
      if (v64)
      {
        uint64_t v65 = v64;
        char v66 = (*(uint64_t (**)(void))((*v37 & *v64) + 0x280))();

        char v67 = v66 & 1;
      }
      else
      {
        char v67 = 2;
      }
      BannerPresentationManager.previouslyHadMultipleCalls.setter(v67);

      return;
    }
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v72, &demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.banners);
  uint64_t v24 = type metadata accessor for Notification();
  uint64_t v25 = *(void *)(v24 - 8);
  __n128 v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))(v28, a2, v24, v26);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v71 = v8;
    v72[0] = v32;
    uint64_t v33 = v32;
    uint64_t v70 = &v68;
    *(_DWORD *)uint64_t v31 = 136315138;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type Notification and conformance Notification);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    _os_log_impl(&dword_1C2F90000, v29, v30, "handleCallStatusDidChange: notification didn't include a call object: %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v33, -1, -1);
    MEMORY[0x1C87760E0](v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  }
}

uint64_t closure #1 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  void v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:), v7, v6);
}

uint64_t closure #1 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v1 + 224))(v2);
  BannerPresentationManager.incomingCallActivity.setter(0);
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = OUTLINED_FUNCTION_30(v3, (uint64_t)static Logger.banners);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_8_0();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C2F90000, v4, v5, "Ended incoming call activity", v6, 2u);
    OUTLINED_FUNCTION_3();
  }

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

id BannerPresentationManager.shouldPresentHandoffCompletedBanner(for:)(void *a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 584))() & 1) == 0
    || objc_msgSend(a1, sel_status) != 6
    || objc_msgSend(a1, sel_disconnectedReason) != 7)
  {
    return 0;
  }
  id v2 = objc_msgSend(a1, sel_provider);
  id v3 = objc_msgSend(v2, sel_isFaceTimeProvider);

  return v3;
}

void closure #2 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)(int a1, id a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a3 + 16;
    id v5 = a2;
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.banners);
    id v7 = a2;
    id v8 = a2;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v18[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      id v13 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2F90000, v9, v10, "Failed to present handoff completed banner with error %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v12, -1, -1);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t v16 = (void *)MEMORY[0x1C8776240](v4);
    if (v16)
    {
      uint64_t v17 = v16;
      (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v16) + 0x150))(0);
    }
    else
    {
    }
  }
}

void BannerPresentationManager.handleAppLaunchWantsHUDDismissal(_:)()
{
  OUTLINED_FUNCTION_31();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static OS_dispatch_queue.main.getter();
  uint64_t v0 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  v7[4] = partial apply for closure #1 in BannerPresentationManager.handleAppLaunchWantsHUDDismissal(_:);
  v7[5] = v0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  long long v7[3] = &block_descriptor_51_0;
  uint64_t v1 = _Block_copy(v7);
  swift_release();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_59_0();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_5_1();
  v7[0] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_172();
  _Block_release(v1);

  uint64_t v4 = OUTLINED_FUNCTION_21_3();
  v5(v4);
  OUTLINED_FUNCTION_139();
  v6();
  OUTLINED_FUNCTION_28();
}

void closure #1 in BannerPresentationManager.handleAppLaunchWantsHUDDismissal(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (void *)MEMORY[0x1C87730B0](0xD00000000000002ELL, 0x80000001C37B1C00);
    objc_msgSend(v3, sel_dismissPresentedBannerForReason_animated_, v4, 1);
  }
}

void closure #1 in BannerPresentationManager.presentNewBanner(as:type:activityUUID:fromActivityManager:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  v29[6] = *(id *)MEMORY[0x1E4F143B8];
  v29[0] = 0;
  unsigned __int8 v7 = outlined bridged method (mnnbgnnn) of @objc BNBannerSource.post(_:options:userInfo:)(a2, 1, a3, (uint64_t)v29, a1);
  id v8 = v29[0];
  if (v7)
  {
    if (a5)
    {
      id v9 = v29[0];
      ((void (*)(void))a5)(0);
    }
    else
    {
      id v27 = v8;
    }
  }
  else
  {
    id v10 = v29[0];
    uint64_t v11 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.banners);
    outlined init with copy of ConversationControlsType(a4, (uint64_t)v29);
    id v13 = v11;
    id v14 = v11;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v28 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      id v19 = v11;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v20 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v22 = ConversationControlsType.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ConversationControlsType((uint64_t)v29);
      _os_log_impl(&dword_1C2F90000, v15, v16, "Banner Source failed to post banner, error: %s type %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v18, -1, -1);
      MEMORY[0x1C87760E0](v17, -1, -1);
    }
    else
    {

      outlined destroy of ConversationControlsType((uint64_t)v29);
    }

    if (a5)
    {
      lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
      uint64_t v24 = swift_allocError();
      *uint64_t v25 = 7;
      a5();

      __n128 v26 = (void *)v24;
    }
    else
    {
      __n128 v26 = v11;
    }
  }
}

Swift::Void __swiftcall BannerPresentationManager.didUpdatePresentationModeToDismissed()()
{
  OUTLINED_FUNCTION_0_20();
  if ((*(uint64_t (**)(void))(v1 + 80))())
  {
    OUTLINED_FUNCTION_47();
    id v2 = (id)MEMORY[0x1C87730B0](0xD000000000000017);
    objc_msgSend(v0, sel_dismissPresentedBannerForReason_animated_, v2, 1);
  }
}

Swift::Void __swiftcall BannerPresentationManager.didUpdatePresentationModeToFullScreen()()
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_63();
  if (!(*(uint64_t (**)(void))(v0 + 416))())
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v39 = OUTLINED_FUNCTION_30(v7, (uint64_t)static Logger.banners);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_4_14(v8, v9, v10, v11, v12, v13, v14, v15, v36, v39))
    {
      os_log_type_t v16 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_23_24(v16);
      OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v17, v18, "Ignore request to invalidate alerting assertion since no presentedSystemApertureElement.", v19, v20, v21, v22, v37, v38);
      OUTLINED_FUNCTION_3();
    }
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_3_14();
  if (v1())
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    uint64_t v3 = OUTLINED_FUNCTION_30(v2, (uint64_t)static Logger.banners);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
      OUTLINED_FUNCTION_1_16(&dword_1C2F90000, v5, v6, "Ignore request to invalidate alerting assertion since it should remain active even if full screen.");
      OUTLINED_FUNCTION_3();
    }

LABEL_12:

    return;
  }
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_104_6();
  v23();
  OUTLINED_FUNCTION_6_63();
  if ((*(uint64_t (**)(void))(v24 + 136))())
  {
    id v25 = objc_msgSend(self, sel_sharedInstance);
    id v26 = objc_msgSend(v25, sel_frontmostAudioOrVideoCall);

    if (v26)
    {
      if (objc_msgSend(v26, sel_isEmergency) && objc_msgSend(v26, sel_isActive))
      {
        uint64_t v41 = 7;
        long long v42 = 0u;
        long long v43 = 0u;
        char v44 = 6;
        BannerPresentationManager.updatePresentedSystemApertureElement(type:sizeClass:dismissPresentedBannerReason:)((uint64_t)&v41, 0, 1, 0, 0, (char *)&v40);
        outlined destroy of ConversationControlsType((uint64_t)&v41);
        int v27 = v40;
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        uint64_t v29 = OUTLINED_FUNCTION_30(v28, (uint64_t)static Logger.banners);
        os_log_type_t v30 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_37();
          uint64_t v32 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v31 = 138412290;
          if (v27 == 11)
          {
            uint64_t v41 = 0;
            OUTLINED_FUNCTION_134_2();
            uint64_t v33 = 0;
          }
          else
          {
            lazy protocol witness table accessor for type BannerPresentationError and conformance BannerPresentationError();
            OUTLINED_FUNCTION_29();
            *uint64_t v34 = v27;
            uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v41 = v33;
            OUTLINED_FUNCTION_134_2();
          }
          void *v32 = v33;
          _os_log_impl(&dword_1C2F90000, v29, v30, "EnhancedEmergency: entered full screen, update jindo back to in call controls, error = %@", v31, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_360();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
      }
    }
  }
  OUTLINED_FUNCTION_6_63();
  (*(void (**)(void))(v35 + 352))();
}

Swift::Void __swiftcall BannerPresentationManager.handleLockScreenStatusChanged()()
{
  OUTLINED_FUNCTION_6_63();
  if ((*(uint64_t (**)(void))(v0 + 416))())
  {
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_3_14();
    v1();
  }
}

Swift::Void __swiftcall BannerPresentationManager.presentHUDForCurrentContext()()
{
  OUTLINED_FUNCTION_6_63();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 384))();
  if (v1)
  {
    id v2 = (void *)v1;
    OUTLINED_FUNCTION_19_6();
    (*(void (**)(void))(v3 + 624))();
    ConversationControlsManager.controlsHUDUpdate(for:)(v4, (uint64_t)v17);

    swift_unknownObjectRelease();
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.banners);
    outlined init with copy of ControlsHUDUpdate((uint64_t)v17, (uint64_t)v16);
    uint64_t v6 = (void *)Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_105(v7))
    {
      os_log_type_t v8 = (_DWORD *)OUTLINED_FUNCTION_37();
      uint64_t v15 = OUTLINED_FUNCTION_9_0();
      *os_log_type_t v8 = 136315138;
      outlined init with copy of ConversationControlsType((uint64_t)v16, (uint64_t)v14);
      uint64_t v9 = specialized >> prefix<A>(_:)((uint64_t)v14);
      unint64_t v11 = v10;
      outlined destroy of SystemUpdateNotice?((uint64_t)v14, &demangling cache variable for type metadata for ConversationControlsType?);
      v14[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ControlsHUDUpdate((uint64_t)v16);
      OUTLINED_FUNCTION_34_6(&dword_1C2F90000, v12, v13, "Presenting HUD for current context %s");
      OUTLINED_FUNCTION_360();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      outlined destroy of ControlsHUDUpdate((uint64_t)v16);
    }

    BannerPresentationManager.presentBanner(as:type:reply:)();
    outlined destroy of ControlsHUDUpdate((uint64_t)v17);
  }
}

Swift::Void __swiftcall BannerPresentationManager.showGreenTea3PHUD()()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 352))();
  if (v1)
  {
    id v3 = (id)v1;
    if (BannerPresentationManager.onlyHasGreenTea3PCall.getter())
    {
      if (objc_msgSend(v3, sel_status) == 4)
      {
        SBSUndimScreen();
        uint64_t v2 = 22;
      }
      else
      {
        uint64_t v2 = 23;
      }
      uint64_t v4 = v2;
      long long v5 = 0u;
      long long v6 = 0u;
      char v7 = 6;
      BannerPresentationManager.presentBanner(as:type:reply:)();

      outlined destroy of ConversationControlsType((uint64_t)&v4);
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall BannerPresentationManager.showPTTHUD()()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 384))();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    ConversationControlsManager.pttMarkChannelActive()();
  }
  v3[0] = 3;
  OUTLINED_FUNCTION_17_51();
  outlined destroy of ConversationControlsType((uint64_t)v3);
}

Swift::Void __swiftcall BannerPresentationManager.showRemoteParticipantNoticeIfNeeded()()
{
}

Swift::Void __swiftcall BannerPresentationManager.showAccessoryButtonEventsNoticeIfNeeded()()
{
}

void BannerPresentationManager.showInCallHUD()(void (*a1)(void))
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 384))();
  if (v3)
  {
    id v4 = (id)v3;
    a1();
  }
}

Swift::Void __swiftcall BannerPresentationManager.showHandoffHUD()()
{
}

Swift::Void __swiftcall BannerPresentationManager.showShareNameAndPhotoHUD()()
{
}

Swift::Void __swiftcall BannerPresentationManager.showShareNameHUD()()
{
}

Swift::Void __swiftcall BannerPresentationManager.showIncomingNameUpdateHUD()()
{
}

uint64_t BannerPresentationManager.showHandoffHUD()(uint64_t a1)
{
  uint64_t v2 = a1;
  long long v3 = 0u;
  long long v4 = 0u;
  char v5 = 6;
  BannerPresentationManager.presentBanner(as:type:reply:)();
  return outlined destroy of ConversationControlsType((uint64_t)&v2);
}

Swift::Void __swiftcall BannerPresentationManager.showEnhancedEmergenctVideoStreamingHUD()()
{
}

Swift::Void __swiftcall BannerPresentationManager.showEnhancedEmergenctMediaUploadHUD()()
{
}

uint64_t BannerPresentationManager.showEnhancedEmergenctVideoStreamingHUD()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t result = (*(uint64_t (**)(void))(v3 + 136))();
  if (result)
  {
    uint64_t result = (uint64_t)objc_msgSend(v1, sel_isPresentingFullScreenCallUI);
    if ((result & 1) == 0)
    {
      v5[0] = a1;
      OUTLINED_FUNCTION_17_51();
      return outlined destroy of ConversationControlsType((uint64_t)v5);
    }
  }
  return result;
}

Swift::Void __swiftcall BannerPresentationManager.showEnhancedEmergencyMediaUploadDuringStreamingHUD()()
{
  OUTLINED_FUNCTION_0_20();
  if (((*(uint64_t (**)(void))(v1 + 136))() & 1) != 0
    && objc_msgSend(v0, sel_isPresentingFullScreenCallUI))
  {
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    uint64_t v3 = (void *)OUTLINED_FUNCTION_30(v2, (uint64_t)static Logger.banners);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v4))
    {
      char v5 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v5);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v6, v7, "showEnhancedEmergencyMediaUploadDuringStreamingHUD, about to show enhancedEmergencyMediaUploadRequestDuringStreaming");
      OUTLINED_FUNCTION_3();
    }

    v8[0] = 19;
    OUTLINED_FUNCTION_17_51();
    outlined destroy of ConversationControlsType((uint64_t)v8);
  }
}

Swift::Void __swiftcall BannerPresentationManager.showEnhancedEmergencyRTTVideoStreamingHUD()()
{
}

Swift::Void __swiftcall BannerPresentationManager.showEnhancedEmergencyRTTMediaUploadHUD()()
{
}

uint64_t BannerPresentationManager.showEnhancedEmergencyRTTVideoStreamingHUD()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_20();
  uint64_t result = (*(uint64_t (**)(void))(v3 + 136))();
  if (result)
  {
    uint64_t result = (uint64_t)objc_msgSend(v1, sel_isPresentingFullScreenCallUI);
    if (result)
    {
      v5[0] = a1;
      OUTLINED_FUNCTION_17_51();
      return outlined destroy of ConversationControlsType((uint64_t)v5);
    }
  }
  return result;
}

Swift::Void __swiftcall BannerPresentationManager.showLagunaPullConversationHUD()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if ((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 600))())
  {
    if (SBUIIsSystemApertureEnabled())
    {
      if (one-time initialization token for banners != -1) {
        swift_once();
      }
      uint64_t v0 = type metadata accessor for Logger();
      uint64_t v1 = (void *)OUTLINED_FUNCTION_30(v0, (uint64_t)static Logger.banners);
      os_log_type_t v2 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_2_12(v2))
      {
        uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_8_0();
        OUTLINED_FUNCTION_22_1(v3);
        OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v4, v5, "Requesting system aperture alert due to request to show laguna pull HUD.");
        OUTLINED_FUNCTION_3();
      }

      unint64_t v6 = OUTLINED_FUNCTION_127_6();
      BannerPresentationManager.requestEphemeralSystemApertureAlert(reason:shouldOverridePersistentAssertion:)(*(Swift::String *)&v6, v8);
      return;
    }
    OUTLINED_FUNCTION_30_21();
    uint64_t v26 = (*(uint64_t (**)(void))(v25 + 384))();
    if (v26)
    {
      int v27 = (void *)v26;
      OUTLINED_FUNCTION_19_6();
      uint64_t v29 = (*(uint64_t (**)(void))(v28 + 656))();
      if (v29)
      {
        os_log_type_t v30 = (void *)v29;
        if (one-time initialization token for banners != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        uint64_t v32 = (void *)OUTLINED_FUNCTION_30(v31, (uint64_t)static Logger.banners);
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_107(v33))
        {
          *(_WORD *)OUTLINED_FUNCTION_8_0() = 0;
          OUTLINED_FUNCTION_168(&dword_1C2F90000, v34, v35, "Requesting laguna handoff completed banner due to request to show laguna pull HUD.");
          OUTLINED_FUNCTION_3();
        }

        *(void *)os_log_type_t v46 = 5;
        memset(&v46[8], 0, 32);
        char v47 = 6;
        OUTLINED_FUNCTION_27_44();

LABEL_32:
        outlined destroy of ConversationControlsType((uint64_t)v46);
        return;
      }
    }
    if (one-time initialization token for banners != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    uint64_t v37 = (void *)OUTLINED_FUNCTION_30(v36, (uint64_t)static Logger.banners);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v38))
    {
      uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v39);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v40, v41, "Requesting default HUD due to request to show laguna pull HUD.");
      OUTLINED_FUNCTION_3();
    }

    memset(v46, 0, sizeof(v46));
    char v47 = 6;
    OUTLINED_FUNCTION_27_44();
    goto LABEL_32;
  }
  if (one-time initialization token for banners != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  char v44 = OUTLINED_FUNCTION_30(v9, (uint64_t)static Logger.banners);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_4_14(v10, v11, v12, v13, v14, v15, v16, v17, v42, v44))
  {
    int v18 = (_WORD *)OUTLINED_FUNCTION_8_0();
    OUTLINED_FUNCTION_23_24(v18);
    OUTLINED_FUNCTION_0_9(&dword_1C2F90000, v19, v20, "Cannot show Laguna pull back banner while feature is not enabled", v21, v22, v23, v24, v43, v45);
    OUTLINED_FUNCTION_3();
  }
}

Swift::Void __swiftcall BannerPresentationManager.presentReminderNotice()()
{
  os_log_type_t v2 = (int *)type metadata accessor for SessionActionNotice(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_17_0();
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x180))())
  {
    OUTLINED_FUNCTION_19_6();
    int v24 = v5;
    uint64_t v6 = (*(uint64_t (**)(void))(v4 + 656))();
    if (v6)
    {
      int v23 = (void *)v6;
      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_104_6();
      uint64_t v8 = v7();
      if (v8)
      {
        int v22 = (void *)v8;
        OUTLINED_FUNCTION_236();
        OUTLINED_FUNCTION_151_5();
        os_log_type_t v10 = (void *)v9();

        if (!v10)
        {
          uint64_t v12 = (uint64_t)v0 + v2[5];
          uint64_t v13 = type metadata accessor for Participant(0);
          __swift_storeEnumTagSinglePayload(v12, 1, 1, v13);
          int v14 = (void *)((char *)v0 + v2[6]);
          v14[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
          v14[4] = &protocol witness table for TUConversation;
          *int v14 = v23;
          int v15 = (void *)((char *)v0 + v2[7]);
          v15[3] = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for TUConversationActivitySession);
          v15[4] = &protocol witness table for TUConversationActivitySession;
          *int v15 = v22;
          id v16 = v23;
          id v17 = v22;
          UUID.init()();
          Date.init()();
          _OWORD *v0 = xmmword_1C3785280;
          v0[1] = xmmword_1C376BCD0;
          *((unsigned char *)v0 + v2[8]) = 1;
          int v18 = (char *)v0 + v2[9];
          *(void *)int v18 = 0;
          v18[8] = 1;
          int v19 = (void *)((char *)v0 + v2[12]);
          *int v19 = 0;
          v19[1] = 0;
          *((unsigned char *)v0 + v2[13]) = 1;
          int v20 = (void *)((char *)v0 + v2[14]);
          *int v20 = 0;
          v20[1] = 0;
          int v21 = (void *)((char *)v0 + v2[15]);
          *int v21 = 0;
          v21[1] = 0;
          specialized ConversationControlsNoticeCoordinator.post(notice:)();

          outlined destroy of SessionActionNotice((uint64_t)v0, (void (*)(void))type metadata accessor for SessionActionNotice);
          return;
        }

        int v11 = v22;
      }
      else
      {

        int v11 = v23;
      }
    }
    else
    {
      int v11 = v24;
    }
  }
}

void BannerPresentationManager.conversationManager(_:removedActiveConversation:)()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(v0 + 384))();
}

void BannerPresentationManager.conversationManager(_:stateChangedFor:fromOldConversation:)()
{
  OUTLINED_FUNCTION_31();
  os_log_type_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_6_63();
  if (((*(uint64_t (**)(void))(v5 + 80))() & 1) == 0)
  {
    if (!objc_msgSend(v4, sel_avMode))
    {
      if (objc_msgSend(v4, sel_state))
      {
        if (objc_msgSend(v4, sel_state) != (id)4 && !objc_msgSend(v2, sel_state))
        {
          id v26 = objc_msgSend(v4, sel_presentationContext);
          id v27 = objc_msgSend(v26, sel_mode);

          if (v27 != (id)2)
          {
            if (one-time initialization token for banners != -1) {
              swift_once();
            }
            uint64_t v28 = type metadata accessor for Logger();
            __swift_project_value_buffer(v28, (uint64_t)static Logger.banners);
            id v29 = v4;
            os_log_type_t v30 = Logger.logObject.getter();
            os_log_type_t v31 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_107(v31))
            {
              uint64_t v32 = (uint8_t *)OUTLINED_FUNCTION_37();
              int v60 = (unsigned char *)OUTLINED_FUNCTION_9_0();
              uint64_t v62 = v60;
              *(_DWORD *)uint64_t v32 = 136315138;
              uint64_t v59 = v32 + 4;
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
              id v33 = v29;
              uint64_t v34 = String.init<A>(reflecting:)();
              uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)&v62);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C2F90000, v30, v0, "Presenting banner for joining AVLess conversation %s", v32, 0xCu);
              OUTLINED_FUNCTION_360();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
            }
            BannerPresentationManager.presentSystemHUD()();
          }
        }
      }
    }
    if (objc_msgSend(v4, sel_state) == (id)4)
    {
      OUTLINED_FUNCTION_236();
      OUTLINED_FUNCTION_151_5();
      uint64_t v7 = v6();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        OUTLINED_FUNCTION_236();
        v9 += 48;
        os_log_type_t v10 = *v9;
        int v11 = (void *)((uint64_t (*)(void))*v9)();

        if (v11)
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          int v60 = v54;
          uint64_t v13 = OUTLINED_FUNCTION_8(v12);
          uint64_t v15 = *(void *)(v14 + 64);
          __n128 v16 = MEMORY[0x1F4188790](v13);
          id v17 = &v54[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v18 = v10(v16);
          if (v18
            && (int v19 = (void *)v18,
                OUTLINED_FUNCTION_19_6(),
                int v21 = (void *)(*(uint64_t (**)(void))(v20 + 656))(),
                v19,
                v21))
          {
            id v22 = objc_msgSend(v21, sel_UUID);

            static UUID._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v23 = type metadata accessor for UUID();
            int v24 = &v54[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
            uint64_t v25 = 0;
          }
          else
          {
            uint64_t v23 = type metadata accessor for UUID();
            int v24 = &v54[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
            uint64_t v25 = 1;
          }
          uint64_t v36 = __swift_storeEnumTagSinglePayload((uint64_t)v24, v25, 1, v23);
          uint64_t v59 = v54;
          unint64_t v37 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
          os_log_type_t v38 = &v54[-v37];
          id v39 = objc_msgSend(v4, sel_UUID, MEMORY[0x1F4188790](v36).n128_f64[0]);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          type metadata accessor for UUID();
          __swift_storeEnumTagSinglePayload((uint64_t)&v54[-v37], 0, 1, v23);
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
          char v58 = v54;
          uint64_t v41 = OUTLINED_FUNCTION_8(v40);
          MEMORY[0x1F4188790](v41);
          OUTLINED_FUNCTION_17_0();
          uint64_t v43 = (uint64_t)v39 + *(int *)(v42 + 56);
          outlined init with copy of FeatureEligibility?((uint64_t)&v54[-v37], (uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined init with copy of FeatureEligibility?((uint64_t)&v54[-v37], v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          uint64_t v44 = OUTLINED_FUNCTION_33_0((uint64_t)v39, 1, v23);
          if (!v45)
          {
            MEMORY[0x1F4188790](v44);
            outlined init with copy of FeatureEligibility?((uint64_t)v39, (uint64_t)&v54[-v37], (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_33_0(v43, 1, v23);
            if (!v45)
            {
              uint64_t v57 = v54;
              OUTLINED_FUNCTION_5_3();
              uint64_t v48 = v47;
              MEMORY[0x1F4188790](v49);
              OUTLINED_FUNCTION_21();
              os_log_type_t v56 = v54;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v51 - v50, v43, v23);
              _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
              int v55 = dispatch thunk of static Equatable.== infix(_:_:)();
              long long v52 = *(void (**)(void))(v48 + 8);
              OUTLINED_FUNCTION_139();
              v52();
              outlined destroy of SystemUpdateNotice?((uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              OUTLINED_FUNCTION_139();
              v52();
              outlined destroy of SystemUpdateNotice?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              OUTLINED_FUNCTION_59_11();
              if ((v55 & 1) == 0) {
                goto LABEL_29;
              }
              goto LABEL_28;
            }
            outlined destroy of SystemUpdateNotice?((uint64_t)&v54[-v37], (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            OUTLINED_FUNCTION_26_2();
            v46();
LABEL_26:
            outlined destroy of SystemUpdateNotice?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
            OUTLINED_FUNCTION_59_11();
LABEL_29:

            goto LABEL_30;
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)&v54[-v37], (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of SystemUpdateNotice?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_33_0(v43, 1, v23);
          if (!v45) {
            goto LABEL_26;
          }
          outlined destroy of SystemUpdateNotice?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_59_11();
        }
LABEL_28:
        OUTLINED_FUNCTION_102_3();
        v53();
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  OUTLINED_FUNCTION_28();
}

id BannerPresentationManager.conversationForHandoffCompleted()()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t v2 = (*(uint64_t (**)(void))(v1 + 328))();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)v2;
  id v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit25BannerPresentationManager_callCenter), sel_activeConversationForCall_, v2);

  return v4;
}

id outlined bridged method (mnnbgnnn) of @objc BNBannerSource.post(_:options:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v10 = objc_msgSend(a5, sel_postPresentable_options_userInfo_error_, a1, a2, isa, a4);

  return v10;
}

uint64_t outlined bridged method (pb) of @objc TUCall.localizedHandoffRecipientDeviceCategory.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_localizedHandoffRecipientDeviceCategory);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void *specialized ConversationControlsManager.__allocating_init(activeCall:callCenter:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  swift_unknownObjectWeakInit();
  outlined init with take of DefaultParticipantMediaProviderCreator((uint64_t)&v34, (uint64_t)&v40);
  uint64_t v35 = 0;
  swift_unknownObjectWeakInit();
  outlined init with take of DefaultParticipantCaptionsProviderCreator((uint64_t)&v34, (uint64_t)v39);
  uint64_t v6 = self;
  swift_unknownObjectRetain();
  id v7 = objc_msgSend(v6, sel_sharedManager);
  type metadata accessor for IDSCapabilitiesChecker();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v37 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUIDSLookupManager);
  os_log_type_t v38 = &protocol witness table for TUIDSLookupManager;
  id v34 = v7;
  type metadata accessor for UUID();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  v8[2] = Dictionary.init(dictionaryLiteral:)();
  long long v8[3] = Dictionary.init(dictionaryLiteral:)();
  v8[5] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v8[6] = v9;
  outlined init with copy of IDSLookupManager((uint64_t)&v34, (uint64_t)(v8 + 7));
  id v10 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v10, sel_addObserver_selector_name_object_, v8, sel_handleLookupManagerDidChangeNotification_, *MEMORY[0x1E4FADEC0], v34);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static Defaults.shared;
  id v12 = objc_allocWithZone((Class)type metadata accessor for ConversationController(0));
  outlined init with copy of DefaultParticipantMediaProviderCreator((uint64_t)&v40, (uint64_t)&v33);
  outlined init with copy of DefaultParticipantCaptionsProviderCreator((uint64_t)v39, (uint64_t)&v34);
  uint64_t ObjectType = swift_getObjectType();
  id v14 = a3;
  swift_retain();
  specialized ConversationController.init(activeCall:callCenter:participantMediaProviderCreator:participantCaptionsProviderCreator:includeLocalParticipantInVisibleParticipants:screenSharingSession:mode:idsCapabilitiesChecker:defaults:)(a1, (uint64_t)v14, (uint64_t)&v33, (uint64_t)&v34, 0, (uint64_t)v41, 0, (uint64_t)v8, v11, (uint64_t)v12, ObjectType, a2, v32, v33, (uint64_t)v34, v35, v36, v37, (uint64_t)v38,
    v39[0],
    v39[1],
    v40,
    *(uint64_t *)&v41[0],
    *((uint64_t *)&v41[0] + 1));
  __n128 v16 = v15;
  outlined destroy of DefaultParticipantCaptionsProviderCreator((uint64_t)v39);
  outlined destroy of DefaultParticipantMediaProviderCreator((uint64_t)&v40);
  type metadata accessor for EntitlementsChecker();
  uint64_t v17 = swift_allocObject();
  id v18 = objc_allocWithZone(MEMORY[0x1E4FADBD0]);
  id v19 = v16;
  *(void *)(v17 + 16) = objc_msgSend(v18, sel_init);
  uint64_t v20 = static Defaults.shared;
  int v21 = self;
  swift_retain();
  id v22 = objc_msgSend(v21, sel_sharedInstance);
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  int v24 = (char *)objc_allocWithZone((Class)type metadata accessor for ConversationControlsManager(0));
  uint64_t v25 = specialized ConversationControlsManager.init(conversationController:entitlementsChecker:defaults:callCenter:featureFlags:)(v19, v17, v20, v22, v23, v24);
  id v26 = objc_allocWithZone(MEMORY[0x1E4F3BD90]);
  id v27 = v25;
  id v28 = objc_msgSend(v26, sel_init);

  swift_unknownObjectRelease();
  id v29 = (void **)((char *)v27 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_contentExtractor);
  swift_beginAccess();
  os_log_type_t v30 = *v29;
  *id v29 = v28;

  return v27;
}

void *specialized ConversationControlsManager.init(conversationController:entitlementsChecker:defaults:callCenter:featureFlags:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char *a6)
{
  BOOL v141 = a5;
  uint64_t v140 = a4;
  uint64_t v145 = a3;
  unint64_t v139 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Notice?>.Publisher);
  uint64_t v143 = *(void *)(v8 - 8);
  uint64_t v144 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v142 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ConversationControlsAppLaunchButtonType>);
  uint64_t v135 = *(void *)(v136 - 8);
  MEMORY[0x1F4188790](v136);
  uint64_t v134 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for ConversationControlsAppLaunchButtonType(0);
  MEMORY[0x1F4188790](v133);
  uint64_t v132 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v131 = (char *)&v114 - v13;
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<EphemeralAlert?>);
  uint64_t v129 = *(void *)(v130 - 8);
  MEMORY[0x1F4188790](v130);
  uint64_t v128 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<ForegroundApp?>);
  uint64_t v126 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  int8x16_t v125 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<TUCallTransmissionMode>);
  uint64_t v123 = *(void *)(v124 - 8);
  MEMORY[0x1F4188790](v124);
  char v122 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<ConversationControlsManager.PushToTalkChannelState>);
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x1F4188790](v121);
  uint64_t v119 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TUCallBluetoothAudioFormat?>);
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118);
  uint64_t v116 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<TURoute?>);
  uint64_t v137 = *(void *)(v138 - 8);
  MEMORY[0x1F4188790](v138);
  uint64_t v115 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for EntitlementsChecker();
  v154[4] = &protocol witness table for EntitlementsChecker;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  *(void *)&a6[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_ignoredScreenSharingRequestUUIDs] = MEMORY[0x1E4FBC860];
  v154[3] = v20;
  v154[0] = a2;
  *(void *)&a6[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_initiallyActiveParticipantIdentifiers] = MEMORY[0x1E4FBC870];
  uint64_t v22 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_coreAnalyticsReporter;
  id v23 = objc_allocWithZone((Class)CNKCoreAnalyticsReporter);
  int v24 = a6;
  *(void *)&a6[v22] = objc_msgSend(v23, sel_init);
  uint64_t v25 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_noticeCoordinator;
  *(void *)&v24[v25] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConversationControlsNoticeCoordinator()), sel_init);
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_activeNoticeCancellable] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_contentExtractor] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_shouldShowCallDetailsWhenReady] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_isOnScreenSubscription] = 0;
  uint64_t v26 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_features;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v27 = static Features.shared;
  *(void *)&v24[v26] = static Features.shared;
  uint64_t v28 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_notificationCenter;
  id v29 = self;
  id v30 = v27;
  *(void *)&v24[v28] = objc_msgSend(v29, sel_defaultCenter);
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_activeShareCardHandle] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_minReactionCountForNotice] = 1;
  v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_canPostReactionNotice] = 0;
  swift_unknownObjectWeakInit();
  v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_hasInitializedCallControlsService] = 0;
  os_log_type_t v31 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager____lazy_storage___callControlsService];
  *(void *)os_log_type_t v31 = 0;
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = 0;
  *(_OWORD *)(v31 + 24) = xmmword_1C37737D0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_systemBannerPresenter + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_systemConversationControlsDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_systemAudioConversationControlsDelegate
                + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_inCallConversationControlsDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_inCallDetailsViewControllerDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_handoffCompletedDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_approvalDelegate] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_conduitLagunaNoticeManager] = 0;
  uint64_t v114 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_lagunaQueue;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v32 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v32 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v33);
  uint64_t v151 = v21;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v34 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __n128 v35 = MEMORY[0x1F4188790](v34);
  (*(void (**)(char *, void, __n128))(v37 + 104))((char *)&v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50], v35);
  *(void *)&v24[v114] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v38 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_conversationDidChangePublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)&v24[v38] = PassthroughSubject.init()();
  uint64_t v39 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_activityManager;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v40 = static HUDActivityManager.shared;
  *(void *)&v24[v39] = static HUDActivityManager.shared;
  uint64_t v41 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_bannerActivityManager;
  uint64_t v42 = one-time initialization token for shared;
  id v43 = v40;
  if (v42 != -1) {
    swift_once();
  }
  uint64_t v44 = static BannerActivityManager.shared;
  *(void *)&v24[v41] = static BannerActivityManager.shared;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_incomingScreenSharingRequestActivity] = 0;
  char v45 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager__audioRoute];
  uint64_t v151 = 0;
  id v46 = v44;
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TURoute?);
  uint64_t v47 = v115;
  Published.init(initialValue:)();
  uint64_t v48 = v137;
  uint64_t v49 = v138;
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v45, v47, v138);
  uint64_t v50 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager__bluetoothAudioFormat];
  uint64_t v151 = 0;
  LOBYTE(v152) = 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TUCallBluetoothAudioFormat?);
  uint64_t v51 = v116;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v50, v51, v118);
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_cancellables] = MEMORY[0x1E4FBC860];
  long long v52 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager__pttChannelState];
  LOBYTE(v151) = 0;
  uint64_t v53 = v119;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v52, v53, v121);
  char v54 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager__pttChannelTransmissionMode];
  uint64_t v151 = 1;
  type metadata accessor for TUCallTransmissionMode(0);
  int v55 = v122;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v54, v55, v124);
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager____lazy_storage___pttViewModel] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager____lazy_storage___pttCallUpdateSubject] = 0;
  uint64_t v56 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_incomingTransmissionReceivedSubject;
  LOBYTE(v151) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  *(void *)&v24[v56] = CurrentValueSubject.init(_:)();
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_pttCallStatusUpdateCancellable] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_pttCallIncomingTransmissionReceivedCancellable] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_confirmLeavePTTChannelAlert] = 0;
  uint64_t v57 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager__foregroundApp];
  uint64_t v151 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ForegroundApp?);
  char v58 = v125;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v57, v58, v127);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ConversationControlsManager.CollaborationPrompt]);
  Cache.init(countLimit:)();
  type metadata accessor for ForegroundCollaborationState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v59 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager__ephemeralAlert];
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  char v153 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EphemeralAlert?);
  int v60 = v128;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v59, v60, v130);
  v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_shouldShowDelayedLMIBanner] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_isWaitingOnFirstRemoteFrame] = 0;
  v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_shouldShowAVLessLeaveConfirmation] = 0;
  uint64_t v61 = (uint64_t)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_avLessLeaveConfirmationPresentedDate];
  uint64_t v62 = type metadata accessor for Date();
  __swift_storeEnumTagSinglePayload(v61, 1, 1, v62);
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_activityLaunchTimer] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_applicationState] = 0;
  uint64_t v63 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager__appLaunchButtonType];
  uint64_t v64 = (uint64_t)v131;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of FaceIDUnavailableNotice(v64, v132);
  uint64_t v65 = v134;
  Published.init(initialValue:)();
  outlined destroy of SessionActionNotice(v64, (void (*)(void))type metadata accessor for ConversationControlsAppLaunchButtonType);
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v63, v65, v136);
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_updateForegroundCollaborationStateTask] = 0;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_screenShareCountdownTimer] = 0;
  uint64_t v66 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_participantStateDidChangeSubject;
  swift_allocObject();
  *(void *)&v24[v66] = PassthroughSubject.init()();
  char v67 = v139;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_conversationController] = v139;
  type metadata accessor for ConversationControlsJoinCountdownActionController();
  swift_allocObject();
  int v68 = v67;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_countdownController] = ConversationControlsJoinCountdownActionController.init()();
  int v69 = v140;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_callCenter] = v140;
  id v70 = v69;
  id v71 = objc_msgSend(v70, sel_conversationManager);
  type metadata accessor for CollaborationInitiationManager();
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = v71;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_collaborationInitiationManager] = v72;
  ConversationController.hasMessageCapableRemoteParticipants.getter();
  LOBYTE(v71) = v73;
  swift_beginAccess();
  char v150 = v71 & 1;
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v74 = &v68[OBJC_IVAR____TtC15ConversationKit22ConversationController_conversationState];
  swift_beginAccess();
  BOOL v75 = *(void *)v74 == 3;
  swift_beginAccess();
  LOBYTE(v149) = v75;
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v76 = ConversationController.audioRoute.getter();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v49);
  uint64_t v149 = v76;
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v77 = &v68[OBJC_IVAR____TtC15ConversationKit22ConversationController_call];
  swift_beginAccess();
  uint64_t v78 = *((void *)v77 + 1);
  uint64_t ObjectType = swift_getObjectType();
  os_log_type_t v80 = *(uint64_t (**)(uint64_t, uint64_t))(v78 + 352);
  swift_unknownObjectRetain();
  LOBYTE(v78) = v80(ObjectType, v78);
  swift_unknownObjectRelease();
  swift_beginAccess();
  char v147 = (v78 & 1) == 0;
  Published.init(initialValue:)();
  swift_endAccess();
  char v81 = ConversationController.localVideoSupported.getter();
  uint64_t v82 = *((void *)v77 + 1);
  uint64_t v83 = swift_getObjectType();
  uint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t))(v82 + 304);
  swift_unknownObjectRetain();
  LOBYTE(v82) = v84(v83, v82);
  swift_unknownObjectRelease();
  swift_beginAccess();
  char v147 = v81 & 1;
  char v148 = v82 & 1;
  Published.init(initialValue:)();
  swift_endAccess();
  outlined init with copy of IDSLookupManager((uint64_t)v154, (uint64_t)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_entitlementsChecker]);
  unint64_t v85 = &v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_defaults];
  *(void *)unint64_t v85 = v145;
  *((void *)v85 + 1) = &protocol witness table for Defaults;
  unint64_t v86 = v141;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_featureFlags] = v141;
  *(void *)&v24[OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_reactionNoticeHistory] = MEMORY[0x1E4FBC860];
  swift_retain();
  id v87 = v86;

  unint64_t v88 = (objc_class *)type metadata accessor for ConversationControlsManager(0);
  v146.receiver = v24;
  v146.super_class = v88;
  id v89 = objc_msgSendSuper2(&v146, sel_init);
  id v90 = objc_allocWithZone((Class)type metadata accessor for ConduitApprovalDelegate());
  uint64_t v91 = v89;
  id v92 = ConduitApprovalDelegate.init(_:)(v91);
  uint64_t v93 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_approvalDelegate;
  uint64_t v94 = *(void **)((char *)v91 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_approvalDelegate);
  *(void *)((char *)v91 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_approvalDelegate) = v92;

  id v95 = objc_msgSend(v70, sel_neighborhoodActivityConduit);
  objc_msgSend(v95, sel_setApprovalDelegate_, *(void *)((char *)v91 + v93));

  if (objc_msgSend(v87, sel_lagunaEnabled))
  {
    uint64_t v96 = OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_lagunaQueue;
    uint64_t v97 = *(void **)((char *)v91 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_lagunaQueue);
    uint64_t v98 = self;
    id v99 = v91;
    id v100 = v97;
    id v101 = objc_msgSend(v98, sel_sharedInstance);
    id v102 = objc_allocWithZone((Class)type metadata accessor for ConduitLagunaNoticeManager(0));
    id v103 = ConduitLagunaNoticeManager.init(_:queue:callCenter:)(v99, (uint64_t)v100, (uint64_t)v101);
    id v104 = objc_msgSend(v70, sel_neighborhoodActivityConduit);
    objc_msgSend(v104, sel_addDelegate_queue_, v103, v100);

    id v105 = objc_msgSend(v70, sel_conversationManager);
    objc_msgSend(v105, sel_addDelegate_queue_, v103, *(void *)((char *)v91 + v96));

    uint64_t v106 = (void **)((char *)v99
                   + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_conduitLagunaNoticeManager);
    swift_beginAccess();
    uint64_t v107 = *v106;
    *uint64_t v106 = v103;
  }
  uint64_t v108 = ConversationControlsManager.updateShareButtonState()();
  uint64_t v109 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v91) + 0x960))(v108);
  ConversationControlsManager.setupConversationControllerObservers()();
  uint64_t v110 = v142;
  (*(void (**)(void))((*v109 & **(void **)((char *)v91
                                           + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_noticeCoordinator))
                    + 0xA0))();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Published<Notice?>.Publisher and conformance Published<A>.Publisher);
  uint64_t v111 = v144;
  uint64_t v112 = Publisher<>.sink(receiveValue:)();

  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v154);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v110, v111);
  *(void *)((char *)v91 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_activeNoticeCancellable) = v112;
  swift_release();
  return v91;
}

char *specialized SystemBannerHostViewController.init(controlsManager:sizeClass:type:delegate:isSystemAperturePresentation:requesterIdentifier:destination:layoutDescription:defaults:features:notificationCenter:activityUUID:fromActivityManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, uint64_t a7, char *a8, unsigned __int8 a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, unsigned __int8 a15, char *a16)
{
  uint64_t v138 = a8;
  uint64_t v128 = a7;
  id v127 = a6;
  LODWORD(v136) = a5;
  uint64_t v140 = a4;
  uint64_t v142 = a14;
  uint64_t v143 = a3;
  LODWORD(v139) = a15;
  LODWORD(v129) = a9;
  uint64_t v141 = a11;
  id v133 = a10;
  uint64_t v135 = a13;
  uint64_t v134 = a12;
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Filter<CurrentValueSubject<Bool, Never>>);
  uint64_t v132 = *(void **)(v144 - 8);
  MEMORY[0x1F4188790](v144);
  uint64_t v131 = (void (**)(char *, uint64_t))((char *)v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_unknownObjectWeakInit();
  uint64_t v19 = (uint64_t)&a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_notice];
  *(void *)(v19 + 32) = 0;
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  uint64_t v20 = &a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_captureGroupName];
  *(void *)uint64_t v20 = 0xD00000000000001ALL;
  *((void *)v20 + 1) = 0x80000001C37ABFF0;
  *(void *)&a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___captureOnlyBackdropView] = 0;
  *(void *)&a16[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_shadowView] = 0;
  uint64_t v21 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationTaskSubject;
  uint64_t v149 = 0;
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<DispatchWorkItem?, Never>);
  swift_allocObject();
  uint64_t v22 = a16;
  *(void *)&a16[v21] = CurrentValueSubject.init(_:)();
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationCancellable] = 0;
  id v23 = &v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_overriddenSystemApertureContent];
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *(_OWORD *)id v23 = 0u;
  unsigned char v23[48] = -1;
  v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isTransitioningToEphemeralSystemApertureContent] = 0;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController____lazy_storage___systemApertureAlertingManager] = 0;
  int v24 = &v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_conversationControlsViewController];
  *(void *)int v24 = 0;
  *((void *)v24 + 1) = 0;
  v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_expandedForMenuPresentation] = 0;
  uint64_t v25 = &v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_requesterIdentifier];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v26 = (void **)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_layoutDescription];
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_layoutDescription] = 0;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_panGestureProxy] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_dismissalPreventionAssertion] = 0;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_gesturePriorityAssertion] = 0;
  v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isPresentingMenu] = 0;
  v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_forceSuppressSystemApertureOverAssociatedScene] = 0;
  v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isShowingSystemApertureOverAssociatedScene] = 0;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_activeLayoutMode] = 0;
  v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_canRequestAlertingAssertion] = 0;
  id v27 = &v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_nextSystemApertureLayoutMode];
  *(void *)id v27 = 0;
  v27[8] = 1;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_contentRole] = 2;
  uint64_t v28 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_leadingViewContainer;
  id v29 = (objc_class *)type metadata accessor for SystemApertureContainerView();
  *(void *)&v22[v28] = objc_msgSend(objc_allocWithZone(v29), sel_init);
  uint64_t v30 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_trailingViewContainer;
  *(void *)&v22[v30] = objc_msgSend(objc_allocWithZone(v29), sel_init);
  uint64_t v31 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_minimalViewContainer;
  *(void *)&v22[v31] = objc_msgSend(objc_allocWithZone(v29), sel_init);
  uint64_t v32 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_detachedMinimalViewContainer;
  *(void *)&v22[v32] = objc_msgSend(objc_allocWithZone(v29), sel_init);
  uint64_t v33 = (void *)*MEMORY[0x1E4FA7EF8];
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_elementIdentifier] = *MEMORY[0x1E4FA7EF8];
  uint64_t v34 = OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_keyColor;
  id v35 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  id v36 = v33;
  *(void *)&v22[v34] = objc_msgSend(v35, sel_initWithRed_green_blue_alpha_, 0.192, 0.82, 0.345, 1.0);
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsManager] = a1;
  uint64_t v37 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x288);
  uint64_t v137 = a1;
  uint64_t v38 = v37();
  uint64_t v39 = (uint64_t *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_bannerIdentifier];
  *uint64_t v39 = v38;
  v39[1] = v40;
  uint64_t v41 = a2;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_sizeClass] = a2;
  uint64_t v42 = v143;
  outlined init with copy of ConversationControlsType(v143, (uint64_t)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_controlsType]);
  ConversationControlsType.associatedNotice.getter((uint64_t)&v149);
  swift_beginAccess();
  outlined assign with take of Notice?((uint64_t)&v149, v19);
  swift_endAccess();
  id v43 = &v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_defaults];
  *(void *)id v43 = v141;
  *((void *)v43 + 1) = &protocol witness table for Defaults;
  uint64_t v44 = (void *)v134;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_features] = v134;
  char v45 = v135;
  *(void *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_notificationCenter] = v135;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_isSystemAperturePresentation] = (char)v136;
  unint64_t v147 = 0;
  unint64_t v148 = 0xE000000000000000;
  swift_retain();
  id v136 = v44;
  id v46 = v45;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v147 = 0xD000000000000021;
  unint64_t v148 = 0x80000001C37AC880;
  v47._uint64_t countAndFlagsBits = ConversationControlsSizeClass.description.getter(v41);
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 46;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  uint64_t v49 = *v39;
  uint64_t v50 = (void *)v39[1];
  swift_bridgeObjectRetain();
  v51._uint64_t countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  long long v52 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  unint64_t v53 = v148;
  char v54 = (unint64_t *)&v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_requestIdentifier];
  *char v54 = v147;
  v54[1] = v53;
  int v55 = &v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_activityUUID];
  uint64_t v56 = type metadata accessor for UUID();
  uint64_t v134 = *(void *)(v56 - 8);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v134 + 16);
  uint64_t v135 = (void *)v56;
  v57(v55, v142);
  swift_beginAccess();
  uint64_t v58 = v128;
  *(void *)uint64_t v25 = v127;
  *((void *)v25 + 1) = v58;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v59 = *v26;
  id v60 = v133;
  *uint64_t v26 = v133;
  id v133 = v60;

  uint64_t v61 = &v22[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_destination];
  *(void *)uint64_t v61 = v138;
  v61[8] = v129 & 1;

  uint64_t v62 = (objc_class *)type metadata accessor for SystemBannerHostViewController();
  v146.receiver = v22;
  v146.super_class = v62;
  uint64_t v63 = objc_msgSendSuper2(&v146, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v64 = *(void (**)(uint64_t, void, uint64_t, void))((*v52 & *v63) + 0x418);
  uint64_t v65 = v63;
  v64(v42, 0, 1, v139);
  objc_msgSend(v46, sel_addObserver_selector_name_object_, v65, sel_callStatusChanged_, *MEMORY[0x1E4FADD90], 0);
  uint64_t v66 = one-time initialization token for contextMenuWillPresent;
  char v67 = v65;
  if (v66 != -1) {
    swift_once();
  }
  objc_msgSend(v46, sel_addObserver_selector_name_object_, v67, sel_contextMenuWillPresent_, static NSNotificationName.contextMenuWillPresent, 0);

  uint64_t v68 = one-time initialization token for contextMenuDidDismiss;
  int v69 = v67;
  if (v68 != -1) {
    swift_once();
  }
  objc_msgSend(v46, sel_addObserver_selector_name_object_, v69, sel_contextMenuDidDismiss_, static NSNotificationName.contextMenuDidDismiss, 0);

  objc_msgSend(v46, sel_addObserver_selector_name_object_, v69, sel_callDisplayContextChanged_, *MEMORY[0x1E4FADDE8], 0);
  objc_msgSend(v46, sel_addObserver_selector_name_object_, v69, sel_handleSceneStateChangeNotification_, *MEMORY[0x1E4FB2E90], 0);
  objc_msgSend(v46, sel_addObserver_selector_name_object_, v69, sel_handleSceneStateChangeNotification_, *MEMORY[0x1E4FB2E80], 0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>);
  uint64_t v129 = v114;
  uint64_t v128 = *(void *)(v139 - 8);
  MEMORY[0x1F4188790](v139);
  uint64_t v138 = (char *)v114 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>);
  int8x16_t v125 = v114;
  uint64_t v124 = *((void *)v123 - 1);
  uint64_t v71 = MEMORY[0x1F4188790](v123);
  id v127 = v46;
  char v122 = (char *)v114 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v73 = *(uint64_t (**)(uint64_t))((*v52 & *v69) + 0x2B8);
  uint64_t v126 = (char *)v69;
  uint64_t v74 = *(void **)(v73(v71)
                 + OBJC_IVAR____TtC15ConversationKit29SystemApertureAlertingManager_invalidationInProgressSubject);
  swift_retain();
  swift_release();
  id v145 = v74;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>);
  BOOL v75 = v131;
  Publisher.filter(_:)();
  swift_release();
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>);
  uint64_t v77 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v79 = (char *)v114 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v145 = *(id *)((char *)v69 + OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationTaskSubject);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type CurrentValueSubject<DispatchWorkItem?, Never> and conformance CurrentValueSubject<A, B>);
  swift_retain();
  Publisher.filter(_:)();
  swift_release();
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Publishers.Filter<CurrentValueSubject<Bool, Never>> and conformance Publishers.Filter<A>);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>> and conformance Publishers.Filter<A>);
  uint64_t v80 = v144;
  Publisher.zip<A>(_:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v76);
  ((void (*)(void, uint64_t))v132[1])(v75, v80);
  uint64_t v81 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  uint64_t v132 = v114;
  uint64_t v144 = *(void *)(v81 - 8);
  uint64_t v116 = *(void *)(v144 + 64);
  MEMORY[0x1F4188790](v81);
  uint64_t v117 = (char *)((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = (char *)((char *)v114 - v117);
  NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)();
  id v121 = self;
  id v145 = objc_msgSend(v121, sel_mainRunLoop);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v119 = *(void *)(*(void *)(v84 - 8) + 64);
  MEMORY[0x1F4188790](v84 - 8);
  unint64_t v120 = (v85 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v86 = (char *)v114 - v120;
  uint64_t v118 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v86, 1, 1, v118);
  uint64_t v114[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>> and conformance Publishers.Zip<A, B>);
  v114[4] = _sSo17OS_dispatch_queueCAB7Combine9Scheduler8DispatchWlTm_0((uint64_t)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop);
  id v87 = v123;
  unint64_t v88 = v122;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of SystemUpdateNotice?((uint64_t)v86, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  id v89 = *(void (**)(char *, uint64_t))(v144 + 8);
  v144 += 8;
  uint64_t v115 = v89;
  v89(v83, v81);
  (*(void (**)(char *, char *))(v124 + 8))(v88, v87);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>, OS_dispatch_queue>);
  uint64_t v132 = v114;
  uint64_t v131 = *(void (***)(char *, uint64_t))(v130 - 8);
  MEMORY[0x1F4188790](v130);
  uint64_t v123 = (char *)v114 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v122 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>);
  int8x16_t v125 = v114;
  uint64_t v124 = *((void *)v122 - 1);
  MEMORY[0x1F4188790](v122);
  id v92 = (char *)v114 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>);
  v114[2] = v114;
  uint64_t v94 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  uint64_t v96 = (char *)v114 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchWorkItem?);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop> and conformance Publishers.Debounce<A, B>);
  uint64_t v97 = Publisher.map<A>(_:)();
  v114[1] = v114;
  MEMORY[0x1F4188790](v97);
  uint64_t v98 = (char *)((char *)v114 - v117);
  NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)();
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerTimeType.Stride?);
  uint64_t v117 = (char *)v114;
  MEMORY[0x1F4188790](v99 - 8);
  id v101 = (char *)v114 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v81;
  __swift_storeEnumTagSinglePayload((uint64_t)v101, 1, 1, v81);
  id v145 = objc_msgSend(v121, sel_mainRunLoop);
  MEMORY[0x1F4188790](v145);
  id v103 = (char *)v114 - v120;
  __swift_storeEnumTagSinglePayload((uint64_t)v114 - v120, 1, 1, v118);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?> and conformance Publishers.Map<A, B>);
  Publisher.delay<A>(for:tolerance:scheduler:options:)();
  outlined destroy of SystemUpdateNotice?((uint64_t)v103, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  outlined destroy of SystemUpdateNotice?((uint64_t)v101, &demangling cache variable for type metadata for NSRunLoop.SchedulerTimeType.Stride?);
  v115(v98, v102);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v96, v93);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v145 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v104 - 8);
  uint64_t v106 = (char *)v114 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v106, 1, 1, v107);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop> and conformance Publishers.Delay<A, B>);
  _sSo17OS_dispatch_queueCAB7Combine9Scheduler8DispatchWlTm_0((uint64_t)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  uint64_t v108 = v123;
  uint64_t v109 = v122;
  Publisher.receive<A>(on:options:)();
  outlined destroy of SystemUpdateNotice?((uint64_t)v106, (uint64_t *)&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, char *))(v124 + 8))(v92, v109);
  swift_allocObject();
  uint64_t v110 = v126;
  swift_unknownObjectWeakInit();
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Delay<Publishers.Map<Publishers.Debounce<Publishers.Zip<Publishers.Filter<CurrentValueSubject<Bool, Never>>, Publishers.Filter<CurrentValueSubject<DispatchWorkItem?, Never>>>, NSRunLoop>, DispatchWorkItem?>, NSRunLoop>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>);
  uint64_t v111 = v130;
  uint64_t v112 = Publisher<>.sink(receiveValue:)();

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, void *))(v134 + 8))(v142, v135);
  outlined destroy of ConversationControlsType(v143);
  v131[1](v108, v111);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v138, v139);
  *(void *)&v110[OBJC_IVAR____TtC15ConversationKit30SystemBannerHostViewController_invalidationCancellable] = v112;
  swift_release();
  return v110;
}

uint64_t sub_1C3501C38()
{
  swift_bridgeObjectRelease();
  id v1 = (id *)(v0 + 40);
  switch(*(unsigned char *)(v0 + 80))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  if (*(void *)(v0 + 88)) {
    swift_release();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in BannerPresentationManager.presentNewBanner(as:type:activityUUID:fromActivityManager:completion:)()
{
  closure #1 in BannerPresentationManager.presentNewBanner(as:type:activityUUID:fromActivityManager:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), v0 + 40, *(void (**)(void))(v0 + 88));
}

uint64_t sub_1C3501D14()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C3501D4C()
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_5_3();
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  id v1 = (id *)(v0 + 48);
  switch(*(unsigned char *)(v0 + 88))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v2 = (id *)(v0 + 96);
  switch(*(unsigned char *)(v0 + 136))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_153_1();
  v3();
  return swift_deallocObject();
}

uint64_t outlined init with take of ConversationControlsType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationControlsType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in BannerPresentationManager.presentBanner(as:type:activityTypeForNewBanner:activityUUID:fromActivityManager:reply:)(int a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  closure #1 in BannerPresentationManager.presentBanner(as:type:activityTypeForNewBanner:activityUUID:fromActivityManager:reply:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t, id))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v1 + 48, v1 + 96, v1 + ((*(unsigned __int8 *)(v3 + 80) + 137) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_1C3501FE8()
{
  swift_release();
  uint64_t v1 = (id *)(v0 + 24);
  switch(*(unsigned char *)(v0 + 64))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
      break;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      break;
    case 2:

      break;
    case 5:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in BannerPresentationManager.updatePresentedHUD(type:replacingNotice:)()
{
  closure #1 in BannerPresentationManager.updatePresentedHUD(type:replacingNotice:)(*(void *)(v0 + 16), v0 + 24, *(unsigned char *)(v0 + 65));
}

uint64_t type metadata accessor for BannerPresentationManager()
{
  return self;
}

void partial apply for closure #1 in BannerPresentationManager.init(delegate:)()
{
  closure #1 in BannerPresentationManager.init(delegate:)(v0);
}

uint64_t sub_1C35020CC()
{
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in BannerPresentationManager.dismissPresentedBanner(forReason:animated:)(int a1)
{
  closure #1 in BannerPresentationManager.dismissPresentedBanner(forReason:animated:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1C3502120()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BannerPresentationManager.bannerDismissedBySpringBoard()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #2 in implicit closure #1 in ScreenSharingSpectatorViewController.supportedInterfaceOrientations.getter;
  uint64_t v4 = OUTLINED_FUNCTION_18_10();
  return closure #1 in BannerPresentationManager.bannerDismissedBySpringBoard()(v4, v5, v6, v2);
}

uint64_t sub_1C3502208()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in BannerPresentationManager.didOpenMessages()(char a1, void *a2)
{
  closure #1 in BannerPresentationManager.didOpenMessages()(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1C3502248()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in BannerPresentationManager.invalidateAndReschedulePresentedBannerTimer(reschedule:)(uint64_t a1)
{
  closure #1 in BannerPresentationManager.invalidateAndReschedulePresentedBannerTimer(reschedule:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void partial apply for closure #1 in BannerPresentationManager.invalidateAndRescheduleSystemApertureTimer(reschedule:)(uint64_t a1)
{
  closure #1 in BannerPresentationManager.invalidateAndRescheduleSystemApertureTimer(reschedule:)(a1, v1);
}

uint64_t sub_1C3502298()
{
  type metadata accessor for Notification();
  OUTLINED_FUNCTION_5_3();
  swift_release();
  OUTLINED_FUNCTION_153_1();
  v0();
  return swift_deallocObject();
}

void partial apply for closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)(v2, v3);
}

void partial apply for closure #1 in BannerPresentationManager.handleAppLaunchWantsHUDDismissal(_:)()
{
  closure #1 in BannerPresentationManager.handleAppLaunchWantsHUDDismissal(_:)(v0);
}

void specialized ConversationControlsNoticeCoordinator.post(notice:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = OUTLINED_FUNCTION_70_8();
  uint64_t v3 = (void (*)(void))type metadata accessor for AppLaunchNotice(v2);
  uint64_t v4 = OUTLINED_FUNCTION_113_4((uint64_t)v3, (uint64_t)&protocol witness table for AppLaunchNotice);
  OUTLINED_FUNCTION_122_3();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45_14(v5, (uint64_t)static Logger.conversationControls);
  OUTLINED_FUNCTION_130_5();
  uint64_t v74 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = (void (*)(uint64_t))&unk_1C376A000;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_15_1();
    uint64_t v71 = OUTLINED_FUNCTION_14_3();
    *(void *)&long long v76 = v71;
    *uint64_t v9 = 136315394;
    OUTLINED_FUNCTION_28_40();
    uint64_t v10 = AppLaunchNotice.description.getter();
    uint64_t v12 = OUTLINED_FUNCTION_125_6(v10, v11);
    OUTLINED_FUNCTION_48_18(v12);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_56_15();
    uint64_t v72 = v3;
    char v73 = v4;
    v70[1] = v70;
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = v1;
    uint64_t v14 = v13;
    MEMORY[0x1F4188790](v15);
    __swift_project_boxed_opaque_existential_1(v79, v80);
    OUTLINED_FUNCTION_2_1();
    v16();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v8 = v17;
    uint64_t v1 = (void (*)(void))(v14 + 8);
    uint64_t v4 = v73;
    OUTLINED_FUNCTION_139();
    v18();
    uint64_t v19 = OUTLINED_FUNCTION_79_9();
    OUTLINED_FUNCTION_78_7(v19);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    OUTLINED_FUNCTION_98_7(&dword_1C2F90000, v6, v7, "> Adding to queue, notice: %s, uuid: %s");
    OUTLINED_FUNCTION_86_9();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    OUTLINED_FUNCTION_82_8();
  }

  OUTLINED_FUNCTION_46_21();
  OUTLINED_FUNCTION_32_27();
  OUTLINED_FUNCTION_102_5();
  if (v4)
  {
    OUTLINED_FUNCTION_63_8(v20, v21);
    uint64_t v22 = OUTLINED_FUNCTION_13_70();
    v23(v22);
  }
  uint64_t v24 = OUTLINED_FUNCTION_47_18();
  v3(v24);
  uint64_t v25 = OUTLINED_FUNCTION_33_31();
  v8(v25);
  OUTLINED_FUNCTION_3_121();
  OUTLINED_FUNCTION_53_15();
  v26();
  if (v80)
  {
    OUTLINED_FUNCTION_37_22();
    if (*((void *)&v77 + 1))
    {
      uint64_t v27 = OUTLINED_FUNCTION_6_102();
      if (v28(v27))
      {
        OUTLINED_FUNCTION_107_7();
        if (v75[3])
        {
          OUTLINED_FUNCTION_25_49();
          uint64_t v29 = OUTLINED_FUNCTION_15_67();
          if (v30(v29))
          {
            char v73 = (uint64_t *)v1;
            OUTLINED_FUNCTION_44_21();
            uint64_t v31 = (void *)Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_62_9(v32))
            {
              uint64_t v33 = (_DWORD *)OUTLINED_FUNCTION_15_1();
              uint64_t v34 = OUTLINED_FUNCTION_14_3();
              OUTLINED_FUNCTION_126_3(v34);
              *uint64_t v33 = 136315394;
              uint64_t v35 = OUTLINED_FUNCTION_2_120(v75);
              uint64_t v37 = v36(v35);
              uint64_t v39 = OUTLINED_FUNCTION_39_26(v37, v38);
              OUTLINED_FUNCTION_23_49(v39);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_11_64();
              uint64_t v40 = OUTLINED_FUNCTION_2_120(v81);
              uint64_t v42 = v41(v40);
              uint64_t v44 = OUTLINED_FUNCTION_39_26(v42, v43);
              OUTLINED_FUNCTION_21_49(v44);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_35_22(&dword_1C2F90000, v45, v46, "> Coalescing active notice with notice: %s, result: %s");
              OUTLINED_FUNCTION_58_11();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
            }

            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_110_6();
            OUTLINED_FUNCTION_3_16();
          }
          else
          {
            OUTLINED_FUNCTION_44_21();
            uint64_t v59 = (void *)Logger.logObject.getter();
            os_log_type_t v60 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_61_11(v60))
            {
              OUTLINED_FUNCTION_37();
              uint64_t v61 = OUTLINED_FUNCTION_9_3();
              OUTLINED_FUNCTION_111_3(v61);
              uint64_t v62 = OUTLINED_FUNCTION_4_105(4.8149e-34);
              uint64_t v64 = v63(v62);
              uint64_t v66 = OUTLINED_FUNCTION_39_26(v64, v65);
              OUTLINED_FUNCTION_22_43(v66);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
              OUTLINED_FUNCTION_36_25(&dword_1C2F90000, v67, v68, "> Replacing active notice with notice: %s");
              OUTLINED_FUNCTION_51_17();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
            }

            OUTLINED_FUNCTION_44_21();
            OUTLINED_FUNCTION_3_121();
            OUTLINED_FUNCTION_106_6();
          }
          OUTLINED_FUNCTION_31_1();
          v69();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v75, &demangling cache variable for type metadata for Notice?);
          unint64_t v53 = (void *)Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_12(v54))
          {
            int v55 = (_WORD *)OUTLINED_FUNCTION_8_0();
            OUTLINED_FUNCTION_22_1(v55);
            OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v56, v57, "Tried to pop next notice but there wasn't a notice to pop");
            OUTLINED_FUNCTION_3();
          }

          uint64_t v78 = 0;
          long long v76 = 0u;
          long long v77 = 0u;
          OUTLINED_FUNCTION_3_121();
          OUTLINED_FUNCTION_31_1();
          v58();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v76, &demangling cache variable for type metadata for Notice?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v79, &demangling cache variable for type metadata for Notice?);
    Swift::String v47 = (void *)Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v48))
    {
      uint64_t v49 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v49);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v50, v51, "> No active notice, present just pushed notice");
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_103_6();
    OUTLINED_FUNCTION_3_121();
    OUTLINED_FUNCTION_31_1();
    v52();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
  OUTLINED_FUNCTION_28();
}

{
  specialized ConversationControlsNoticeCoordinator.post(notice:)();
}

{
  specialized ConversationControlsNoticeCoordinator.post(notice:)();
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  _DWORD *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  os_log_type_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  os_log_type_t v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(void);
  void *v62;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  void *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  void v81[4];
  uint64_t v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  void v86[5];
  long long v87;
  long long v88;
  uint64_t v89;
  void v90[3];
  uint64_t v91;
  void v92[5];
  uint64_t v93[6];

  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  os_log_type_t v7 = v6;
  uint64_t v9 = v8;
  v93[3] = v10(0);
  v93[4] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v93);
  outlined init with copy of FaceIDUnavailableNotice(v9, (uint64_t)boxed_opaque_existential_1);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45_14(v12, (uint64_t)static Logger.conversationControls);
  OUTLINED_FUNCTION_130_5();
  uint64_t v85 = v3;
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.default.getter();
  uint64_t v15 = v14;
  uint64_t v16 = (void (*)(uint64_t))&unk_1C376A000;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v17 = OUTLINED_FUNCTION_15_1();
    uint64_t v83 = v15;
    uint64_t v18 = (_DWORD *)v17;
    uint64_t v82 = OUTLINED_FUNCTION_14_3();
    *(void *)&id v87 = v82;
    *uint64_t v18 = 136315394;
    uint64_t v19 = OUTLINED_FUNCTION_28_40();
    uint64_t v20 = ((uint64_t (*)(void *))v1)(v19);
    uint64_t v22 = OUTLINED_FUNCTION_125_6(v20, v21);
    OUTLINED_FUNCTION_48_18(v22);
    swift_bridgeObjectRelease();
    uint64_t v16 = (void (*)(uint64_t))OUTLINED_FUNCTION_56_15();
    v81[1] = v81;
    OUTLINED_FUNCTION_5_3();
    uint64_t v84 = boxed_opaque_existential_1;
    MEMORY[0x1F4188790](v23);
    __swift_project_boxed_opaque_existential_1(v90, v91);
    uint64_t v24 = OUTLINED_FUNCTION_52_16();
    v25(v24);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    OUTLINED_FUNCTION_147_4();
    uint64_t v26 = OUTLINED_FUNCTION_42_24();
    v27(v26);
    boxed_opaque_existential_1 = v84;
    uint64_t v28 = OUTLINED_FUNCTION_89_6();
    OUTLINED_FUNCTION_78_7(v28);
    os_log_type_t v7 = v1;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    OUTLINED_FUNCTION_98_7(&dword_1C2F90000, v13, (os_log_type_t)v83, "> Adding to queue, notice: %s, uuid: %s");
    OUTLINED_FUNCTION_86_9();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    OUTLINED_FUNCTION_82_8();
  }

  OUTLINED_FUNCTION_46_21();
  OUTLINED_FUNCTION_32_27();
  OUTLINED_FUNCTION_102_5();
  if (boxed_opaque_existential_1)
  {
    OUTLINED_FUNCTION_63_8(v29, v30);
    uint64_t v31 = OUTLINED_FUNCTION_13_70();
    v32(v31);
  }
  uint64_t v33 = OUTLINED_FUNCTION_47_18();
  ((void (*)(uint64_t))v1)(v33);
  uint64_t v34 = OUTLINED_FUNCTION_33_31();
  v16(v34);
  OUTLINED_FUNCTION_3_121();
  OUTLINED_FUNCTION_53_15();
  v35();
  if (v91)
  {
    OUTLINED_FUNCTION_37_22();
    if (*((void *)&v88 + 1))
    {
      id v36 = OUTLINED_FUNCTION_6_102();
      if (v37(v36))
      {
        OUTLINED_FUNCTION_107_7();
        if (v86[3])
        {
          OUTLINED_FUNCTION_25_49();
          unint64_t v38 = OUTLINED_FUNCTION_15_67();
          if (v39(v38))
          {
            uint64_t v84 = v7;
            OUTLINED_FUNCTION_44_21();
            uint64_t v40 = (void *)Logger.logObject.getter();
            uint64_t v41 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_62_9(v41))
            {
              uint64_t v42 = (_DWORD *)OUTLINED_FUNCTION_15_1();
              unint64_t v43 = OUTLINED_FUNCTION_14_3();
              OUTLINED_FUNCTION_126_3(v43);
              *uint64_t v42 = 136315394;
              uint64_t v44 = OUTLINED_FUNCTION_2_120(v86);
              uint64_t v46 = v45(v44);
              os_log_type_t v48 = OUTLINED_FUNCTION_39_26(v46, v47);
              OUTLINED_FUNCTION_23_49(v48);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_11_64();
              uint64_t v49 = OUTLINED_FUNCTION_2_120(v92);
              uint64_t v51 = v50(v49);
              unint64_t v53 = OUTLINED_FUNCTION_39_26(v51, v52);
              OUTLINED_FUNCTION_21_49(v53);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_35_22(&dword_1C2F90000, v54, v55, "> Coalescing active notice with notice: %s, result: %s");
              OUTLINED_FUNCTION_58_11();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
            }

            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_110_6();
            OUTLINED_FUNCTION_3_16();
            (*(void (**)(void *))(v78 + 144))(v86);
          }
          else
          {
            OUTLINED_FUNCTION_44_21();
            uint64_t v68 = (void *)Logger.logObject.getter();
            int v69 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_61_11(v69))
            {
              OUTLINED_FUNCTION_37();
              uint64_t v70 = OUTLINED_FUNCTION_9_3();
              OUTLINED_FUNCTION_111_3(v70);
              uint64_t v71 = OUTLINED_FUNCTION_4_105(4.8149e-34);
              char v73 = v72(v71);
              BOOL v75 = OUTLINED_FUNCTION_39_26(v73, v74);
              OUTLINED_FUNCTION_22_43(v75);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
              OUTLINED_FUNCTION_36_25(&dword_1C2F90000, v76, v77, "> Replacing active notice with notice: %s");
              OUTLINED_FUNCTION_51_17();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
            }

            OUTLINED_FUNCTION_44_21();
            OUTLINED_FUNCTION_3_121();
            uint64_t v79 = OUTLINED_FUNCTION_106_6();
            v80(v79);
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v86, &demangling cache variable for type metadata for Notice?);
          uint64_t v62 = (void *)Logger.logObject.getter();
          uint64_t v63 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_12(v63))
          {
            uint64_t v64 = (_WORD *)OUTLINED_FUNCTION_8_0();
            OUTLINED_FUNCTION_22_1(v64);
            OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v65, v66, "Tried to pop next notice but there wasn't a notice to pop");
            OUTLINED_FUNCTION_3();
          }

          id v89 = 0;
          id v87 = 0u;
          unint64_t v88 = 0u;
          OUTLINED_FUNCTION_3_121();
          OUTLINED_FUNCTION_31_1();
          v67();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v87, &demangling cache variable for type metadata for Notice?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v90, &demangling cache variable for type metadata for Notice?);
    uint64_t v56 = (void *)Logger.logObject.getter();
    uint64_t v57 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v57))
    {
      uint64_t v58 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v58);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v59, v60, "> No active notice, present just pushed notice");
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_103_6();
    OUTLINED_FUNCTION_3_121();
    OUTLINED_FUNCTION_31_1();
    v61();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t (*v31)(uint64_t *, char);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  os_log_type_t v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(void);
  void *v62;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  void *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  void v78[3];
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];
  long long v84;
  uint64_t v85;
  uint64_t v86;
  long long v87;
  long long v88;
  uint64_t v89;
  long long v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];
  uint64_t v94;
  uint64_t v95;
  unsigned char v96[48];

  OUTLINED_FUNCTION_31();
  uint64_t v2 = OUTLINED_FUNCTION_70_8();
  uint64_t v3 = type metadata accessor for SessionActionNotice(v2);
  uint64_t v4 = OUTLINED_FUNCTION_113_4(v3, (uint64_t)&protocol witness table for SessionActionNotice);
  OUTLINED_FUNCTION_122_3();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45_14(v5, (uint64_t)static Logger.conversationControls);
  outlined init with copy of IDSLookupManager((uint64_t)v96, (uint64_t)&v90);
  uint64_t v81 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = v7;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v9 = OUTLINED_FUNCTION_15_1();
    uint64_t v80 = OUTLINED_FUNCTION_14_3();
    *(void *)&id v87 = v80;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v79 = v8;
    OUTLINED_FUNCTION_28_40();
    uint64_t v10 = SessionActionNotice.description.getter();
    *(void *)&uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v87);
    v78[2] = (char *)&v84 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    *(_WORD *)(v9 + 12) = 2080;
    v78[1] = v9 + 14;
    uint64_t v12 = type metadata accessor for UUID();
    v78[0] = v78;
    OUTLINED_FUNCTION_5_3();
    uint64_t v14 = v13;
    MEMORY[0x1F4188790](v15);
    uint64_t v17 = (char *)v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    __swift_project_boxed_opaque_existential_1(&v90, v91);
    OUTLINED_FUNCTION_2_1();
    v18();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t v19 = OUTLINED_FUNCTION_147_4();
    uint64_t v20 = v1;
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
    *(void *)&uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v22, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = v20;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    OUTLINED_FUNCTION_98_7(&dword_1C2F90000, v6, (os_log_type_t)v79, "> Adding to queue, notice: %s, uuid: %s");
    OUTLINED_FUNCTION_86_9();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
  }

  id v23 = v4[2];
  if (v23 >> 62 == 3)
  {
    uint64_t v24 = v4[3];
    uint64_t v26 = *v4;
    uint64_t v25 = v4[1];
    if (v23 == 0xC000000000000000 && !(v24 | v26 | v25)
      || !v24 && (v23 == 0xC000000000000000 ? (uint64_t v27 = v26 == 1) : (uint64_t v27 = 0), v27 && !v25)
      || !v24 && (v23 == 0xC000000000000000 ? (uint64_t v28 = v26 == 7) : (uint64_t v28 = 0), v28 && !v25)
      || (uint64_t v29 = 5, !v24) && (v23 == 0xC000000000000000 ? (v30 = v26 == 10) : (v30 = 0), v30 && !v25))
    {
      uint64_t v29 = 4;
    }
  }
  else
  {
    uint64_t v29 = 5;
  }
  uint64_t v31 = ConversationControlsNoticeCoordinator.noticeQueue.modify(v93);
  specialized Dictionary.subscript.modify();
  OUTLINED_FUNCTION_102_5();
  if (v4)
  {
    OUTLINED_FUNCTION_63_8(v32, v33);
    uint64_t v34 = OUTLINED_FUNCTION_13_70();
    v35(v34);
  }
  ((void (*)(long long *, void))v29)(&v90, 0);
  id v36 = OUTLINED_FUNCTION_33_31();
  ((void (*)(uint64_t))v31)(v36);
  OUTLINED_FUNCTION_3_121();
  (*(void (**)(long long *__return_ptr))(v37 + 136))(&v90);
  if (v91)
  {
    outlined init with take of Notice(&v90, (uint64_t)v93);
    ConversationControlsNoticeCoordinator.peek()((uint64_t)&v87);
    if (*((void *)&v88 + 1))
    {
      outlined init with take of Notice(&v87, (uint64_t)&v90);
      unint64_t v38 = v91;
      uint64_t v39 = v92;
      __swift_project_boxed_opaque_existential_1(&v90, v91);
      if ((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v39 + 216))(v93, v38, v39))
      {
        ConversationControlsNoticeCoordinator.pop()();
        if (v85)
        {
          outlined init with take of Notice(&v84, (uint64_t)&v87);
          uint64_t v40 = v94;
          uint64_t v41 = v95;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v93, v94);
          if ((*(uint64_t (**)(long long *, uint64_t, uint64_t))(v41 + 208))(&v87, v40, v41))
          {
            uint64_t v80 = v1;
            outlined init with copy of IDSLookupManager((uint64_t)&v87, (uint64_t)&v84);
            uint64_t v42 = (void *)Logger.logObject.getter();
            unint64_t v43 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_62_9(v43))
            {
              uint64_t v44 = OUTLINED_FUNCTION_15_1();
              v83[0] = OUTLINED_FUNCTION_14_3();
              *(_DWORD *)uint64_t v44 = 136315394;
              uint64_t v45 = OUTLINED_FUNCTION_2_120(&v84);
              Swift::String v47 = v46(v45);
              uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v83);
              OUTLINED_FUNCTION_137_1(v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
              *(_WORD *)(v44 + 12) = 2080;
              OUTLINED_FUNCTION_2();
              uint64_t v50 = OUTLINED_FUNCTION_2_120(v93);
              long long v52 = v51(v50);
              uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v83);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_35_22(&dword_1C2F90000, v54, v55, "> Coalescing active notice with notice: %s, result: %s");
              OUTLINED_FUNCTION_58_11();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
            }

            OUTLINED_FUNCTION_2();
            outlined init with copy of IDSLookupManager((uint64_t)v93, (uint64_t)&v84);
            OUTLINED_FUNCTION_3_16();
          }
          else
          {
            outlined init with copy of IDSLookupManager((uint64_t)&v87, (uint64_t)&v84);
            uint64_t v68 = (void *)Logger.logObject.getter();
            int v69 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_61_11(v69))
            {
              OUTLINED_FUNCTION_37();
              uint64_t v81 = OUTLINED_FUNCTION_9_3();
              v83[0] = v81;
              *(_DWORD *)uint64_t v4 = 136315138;
              uint64_t v80 = (uint64_t)v4 + 4;
              uint64_t v70 = v85;
              uint64_t v71 = v86;
              __swift_project_boxed_opaque_existential_1(&v84, v85);
              uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 120))(v70, v71);
              uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v83);
              OUTLINED_FUNCTION_137_1(v74);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
              OUTLINED_FUNCTION_36_25(&dword_1C2F90000, v75, v76, "> Replacing active notice with notice: %s");
              swift_arrayDestroy();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
            }

            outlined init with copy of IDSLookupManager((uint64_t)&v87, (uint64_t)&v84);
            OUTLINED_FUNCTION_3_121();
          }
          OUTLINED_FUNCTION_31_1();
          v77();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)&v84, &demangling cache variable for type metadata for Notice?);
          uint64_t v62 = (void *)Logger.logObject.getter();
          uint64_t v63 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_12(v63))
          {
            uint64_t v64 = (_WORD *)OUTLINED_FUNCTION_8_0();
            OUTLINED_FUNCTION_22_1(v64);
            OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v65, v66, "Tried to pop next notice but there wasn't a notice to pop");
            OUTLINED_FUNCTION_3();
          }

          id v89 = 0;
          id v87 = 0u;
          unint64_t v88 = 0u;
          OUTLINED_FUNCTION_3_121();
          OUTLINED_FUNCTION_31_1();
          v67();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v87, &demangling cache variable for type metadata for Notice?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)&v90, &demangling cache variable for type metadata for Notice?);
    uint64_t v56 = (void *)Logger.logObject.getter();
    uint64_t v57 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v57))
    {
      uint64_t v58 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v58);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v59, v60, "> No active notice, present just pushed notice");
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_103_6();
    OUTLINED_FUNCTION_3_121();
    OUTLINED_FUNCTION_31_1();
    v61();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  void (*v3)(void);
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  void (*v8)(uint64_t);
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  void (*v17)(uint64_t);
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  os_log_type_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  os_log_type_t v48;
  _WORD *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  void *v53;
  os_log_type_t v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void);
  void *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(void);
  void v70[4];
  uint64_t v71;
  void (*v72)(void);
  uint64_t *v73;
  uint64_t v74;
  void v75[5];
  long long v76;
  long long v77;
  uint64_t v78;
  void v79[3];
  uint64_t v80;
  void v81[5];
  uint64_t v82;

  OUTLINED_FUNCTION_31();
  uint64_t v2 = OUTLINED_FUNCTION_70_8();
  uint64_t v3 = (void (*)(void))type metadata accessor for PushToTalkNotice(v2);
  uint64_t v4 = OUTLINED_FUNCTION_113_4((uint64_t)v3, (uint64_t)&protocol witness table for PushToTalkNotice);
  OUTLINED_FUNCTION_122_3();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45_14(v5, (uint64_t)static Logger.conversationControls);
  OUTLINED_FUNCTION_130_5();
  uint64_t v74 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = (void (*)(uint64_t))&unk_1C376A000;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v9 = (_DWORD *)OUTLINED_FUNCTION_15_1();
    uint64_t v71 = OUTLINED_FUNCTION_14_3();
    *(void *)&long long v76 = v71;
    *uint64_t v9 = 136315394;
    OUTLINED_FUNCTION_28_40();
    uint64_t v10 = PushToTalkNotice.description.getter();
    uint64_t v12 = OUTLINED_FUNCTION_125_6(v10, v11);
    OUTLINED_FUNCTION_48_18(v12);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_56_15();
    uint64_t v72 = v3;
    char v73 = v4;
    v70[1] = v70;
    OUTLINED_FUNCTION_5_3();
    uint64_t v3 = v1;
    uint64_t v14 = v13;
    MEMORY[0x1F4188790](v15);
    __swift_project_boxed_opaque_existential_1(v79, v80);
    OUTLINED_FUNCTION_2_1();
    v16();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v8 = v17;
    uint64_t v1 = (void (*)(void))(v14 + 8);
    uint64_t v4 = v73;
    OUTLINED_FUNCTION_139();
    v18();
    uint64_t v19 = OUTLINED_FUNCTION_79_9();
    OUTLINED_FUNCTION_78_7(v19);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    OUTLINED_FUNCTION_98_7(&dword_1C2F90000, v6, v7, "> Adding to queue, notice: %s, uuid: %s");
    OUTLINED_FUNCTION_86_9();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    OUTLINED_FUNCTION_82_8();
  }

  OUTLINED_FUNCTION_46_21();
  OUTLINED_FUNCTION_32_27();
  OUTLINED_FUNCTION_102_5();
  if (v4)
  {
    OUTLINED_FUNCTION_63_8(v20, v21);
    uint64_t v22 = OUTLINED_FUNCTION_13_70();
    v23(v22);
  }
  uint64_t v24 = OUTLINED_FUNCTION_47_18();
  v3(v24);
  uint64_t v25 = OUTLINED_FUNCTION_33_31();
  v8(v25);
  OUTLINED_FUNCTION_3_121();
  OUTLINED_FUNCTION_53_15();
  v26();
  if (v80)
  {
    OUTLINED_FUNCTION_37_22();
    if (*((void *)&v77 + 1))
    {
      uint64_t v27 = OUTLINED_FUNCTION_6_102();
      if (v28(v27))
      {
        OUTLINED_FUNCTION_107_7();
        if (v75[3])
        {
          OUTLINED_FUNCTION_25_49();
          uint64_t v29 = OUTLINED_FUNCTION_15_67();
          if (v30(v29))
          {
            char v73 = (uint64_t *)v1;
            OUTLINED_FUNCTION_44_21();
            uint64_t v31 = (void *)Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_62_9(v32))
            {
              uint64_t v33 = (_DWORD *)OUTLINED_FUNCTION_15_1();
              uint64_t v34 = OUTLINED_FUNCTION_14_3();
              OUTLINED_FUNCTION_126_3(v34);
              *uint64_t v33 = 136315394;
              uint64_t v35 = OUTLINED_FUNCTION_2_120(v75);
              uint64_t v37 = v36(v35);
              uint64_t v39 = OUTLINED_FUNCTION_39_26(v37, v38);
              OUTLINED_FUNCTION_23_49(v39);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_11_64();
              uint64_t v40 = OUTLINED_FUNCTION_2_120(v81);
              uint64_t v42 = v41(v40);
              uint64_t v44 = OUTLINED_FUNCTION_39_26(v42, v43);
              OUTLINED_FUNCTION_21_49(v44);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_35_22(&dword_1C2F90000, v45, v46, "> Coalescing active notice with notice: %s, result: %s");
              OUTLINED_FUNCTION_58_11();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
            }

            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_110_6();
            OUTLINED_FUNCTION_3_16();
          }
          else
          {
            OUTLINED_FUNCTION_44_21();
            uint64_t v59 = (void *)Logger.logObject.getter();
            os_log_type_t v60 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_61_11(v60))
            {
              OUTLINED_FUNCTION_37();
              uint64_t v61 = OUTLINED_FUNCTION_9_3();
              OUTLINED_FUNCTION_111_3(v61);
              uint64_t v62 = OUTLINED_FUNCTION_4_105(4.8149e-34);
              uint64_t v64 = v63(v62);
              uint64_t v66 = OUTLINED_FUNCTION_39_26(v64, v65);
              OUTLINED_FUNCTION_22_43(v66);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
              OUTLINED_FUNCTION_36_25(&dword_1C2F90000, v67, v68, "> Replacing active notice with notice: %s");
              OUTLINED_FUNCTION_51_17();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
            }

            OUTLINED_FUNCTION_44_21();
            OUTLINED_FUNCTION_3_121();
            OUTLINED_FUNCTION_106_6();
          }
          OUTLINED_FUNCTION_31_1();
          v69();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v75, &demangling cache variable for type metadata for Notice?);
          unint64_t v53 = (void *)Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_12(v54))
          {
            int v55 = (_WORD *)OUTLINED_FUNCTION_8_0();
            OUTLINED_FUNCTION_22_1(v55);
            OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v56, v57, "Tried to pop next notice but there wasn't a notice to pop");
            OUTLINED_FUNCTION_3();
          }

          uint64_t v78 = 0;
          long long v76 = 0u;
          long long v77 = 0u;
          OUTLINED_FUNCTION_3_121();
          OUTLINED_FUNCTION_31_1();
          v58();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v76, &demangling cache variable for type metadata for Notice?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v79, &demangling cache variable for type metadata for Notice?);
    Swift::String v47 = (void *)Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v48))
    {
      uint64_t v49 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v49);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v50, v51, "> No active notice, present just pushed notice");
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_103_6();
    OUTLINED_FUNCTION_3_121();
    OUTLINED_FUNCTION_31_1();
    v52();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t updated;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  void (*v10)(uint64_t);
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  os_log_type_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  os_log_type_t v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  void *v54;
  os_log_type_t v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  void *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(void);
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  void v77[5];
  long long v78;
  long long v79;
  uint64_t v80;
  void v81[3];
  uint64_t v82;
  void v83[5];
  uint64_t v84;

  OUTLINED_FUNCTION_31();
  uint64_t v3 = OUTLINED_FUNCTION_70_8();
  uint64_t updated = type metadata accessor for SystemUpdateNotice(v3);
  uint64_t v5 = OUTLINED_FUNCTION_113_4(updated, (uint64_t)&protocol witness table for SystemUpdateNotice);
  OUTLINED_FUNCTION_122_3();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45_14(v6, (uint64_t)static Logger.conversationControls);
  OUTLINED_FUNCTION_130_5();
  long long v76 = v0;
  os_log_type_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  uint64_t v9 = v8;
  uint64_t v10 = (void (*)(uint64_t))&unk_1C376A000;
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v11 = (_DWORD *)OUTLINED_FUNCTION_15_1();
    uint64_t v74 = OUTLINED_FUNCTION_14_3();
    *(void *)&uint64_t v78 = v74;
    *unint64_t v11 = 136315394;
    OUTLINED_FUNCTION_28_40();
    uint64_t v12 = SystemUpdateNotice.description.getter();
    uint64_t v14 = OUTLINED_FUNCTION_125_6(v12, v13);
    OUTLINED_FUNCTION_80_6(v14);
    swift_bridgeObjectRelease();
    uint64_t v10 = (void (*)(uint64_t))OUTLINED_FUNCTION_109_3();
    char v73 = &v71;
    OUTLINED_FUNCTION_5_3();
    BOOL v75 = v5;
    MEMORY[0x1F4188790](v15);
    __swift_project_boxed_opaque_existential_1(v81, v82);
    uint64_t v16 = OUTLINED_FUNCTION_52_16();
    v17(v16);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    OUTLINED_FUNCTION_147_4();
    uint64_t v72 = v9;
    uint64_t v18 = OUTLINED_FUNCTION_42_24();
    v19(v18);
    uint64_t v5 = v75;
    uint64_t v20 = OUTLINED_FUNCTION_89_6();
    OUTLINED_FUNCTION_133_4(v20);
    uint64_t v2 = v1;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    OUTLINED_FUNCTION_98_7(&dword_1C2F90000, v7, (os_log_type_t)v72, "> Adding to queue, notice: %s, uuid: %s");
    OUTLINED_FUNCTION_145_5();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    OUTLINED_FUNCTION_82_8();
  }

  OUTLINED_FUNCTION_46_21();
  OUTLINED_FUNCTION_32_27();
  OUTLINED_FUNCTION_102_5();
  if (v5)
  {
    OUTLINED_FUNCTION_63_8(v21, v22);
    id v23 = OUTLINED_FUNCTION_13_70();
    v24(v23);
  }
  uint64_t v25 = OUTLINED_FUNCTION_47_18();
  ((void (*)(uint64_t))v1)(v25);
  uint64_t v26 = OUTLINED_FUNCTION_33_31();
  v10(v26);
  OUTLINED_FUNCTION_3_121();
  OUTLINED_FUNCTION_53_15();
  v27();
  if (v82)
  {
    OUTLINED_FUNCTION_37_22();
    if (*((void *)&v79 + 1))
    {
      uint64_t v28 = OUTLINED_FUNCTION_6_102();
      if (v29(v28))
      {
        OUTLINED_FUNCTION_107_7();
        if (v77[3])
        {
          OUTLINED_FUNCTION_25_49();
          uint64_t v30 = OUTLINED_FUNCTION_15_67();
          if (v31(v30))
          {
            BOOL v75 = v2;
            OUTLINED_FUNCTION_44_21();
            os_log_type_t v32 = (void *)Logger.logObject.getter();
            uint64_t v33 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_62_9(v33))
            {
              uint64_t v34 = (_DWORD *)OUTLINED_FUNCTION_15_1();
              uint64_t v35 = OUTLINED_FUNCTION_14_3();
              OUTLINED_FUNCTION_126_3(v35);
              *uint64_t v34 = 136315394;
              id v36 = OUTLINED_FUNCTION_2_120(v77);
              unint64_t v38 = v37(v36);
              uint64_t v40 = OUTLINED_FUNCTION_39_26(v38, v39);
              OUTLINED_FUNCTION_23_49(v40);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_11_64();
              uint64_t v41 = OUTLINED_FUNCTION_2_120(v83);
              unint64_t v43 = v42(v41);
              uint64_t v45 = OUTLINED_FUNCTION_39_26(v43, v44);
              OUTLINED_FUNCTION_21_49(v45);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_35_22(&dword_1C2F90000, v46, v47, "> Coalescing active notice with notice: %s, result: %s");
              OUTLINED_FUNCTION_58_11();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
            }

            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_110_6();
            OUTLINED_FUNCTION_3_16();
          }
          else
          {
            OUTLINED_FUNCTION_44_21();
            os_log_type_t v60 = (void *)Logger.logObject.getter();
            uint64_t v61 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_61_11(v61))
            {
              OUTLINED_FUNCTION_37();
              uint64_t v62 = OUTLINED_FUNCTION_9_3();
              OUTLINED_FUNCTION_111_3(v62);
              uint64_t v63 = OUTLINED_FUNCTION_4_105(4.8149e-34);
              unint64_t v65 = v64(v63);
              uint64_t v67 = OUTLINED_FUNCTION_39_26(v65, v66);
              OUTLINED_FUNCTION_22_43(v67);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
              OUTLINED_FUNCTION_36_25(&dword_1C2F90000, v68, v69, "> Replacing active notice with notice: %s");
              OUTLINED_FUNCTION_51_17();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
            }

            OUTLINED_FUNCTION_44_21();
            OUTLINED_FUNCTION_3_121();
            OUTLINED_FUNCTION_106_6();
          }
          OUTLINED_FUNCTION_31_1();
          v70();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v77, &demangling cache variable for type metadata for Notice?);
          os_log_type_t v54 = (void *)Logger.logObject.getter();
          int v55 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_12(v55))
          {
            uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_8_0();
            OUTLINED_FUNCTION_22_1(v56);
            OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v57, v58, "Tried to pop next notice but there wasn't a notice to pop");
            OUTLINED_FUNCTION_3();
          }

          uint64_t v80 = 0;
          uint64_t v78 = 0u;
          uint64_t v79 = 0u;
          OUTLINED_FUNCTION_3_121();
          OUTLINED_FUNCTION_31_1();
          v59();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v78, &demangling cache variable for type metadata for Notice?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v81, &demangling cache variable for type metadata for Notice?);
    os_log_type_t v48 = (void *)Logger.logObject.getter();
    uint64_t v49 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v49))
    {
      uint64_t v50 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v50);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v51, v52, "> No active notice, present just pushed notice");
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_103_6();
    OUTLINED_FUNCTION_3_121();
    OUTLINED_FUNCTION_31_1();
    v53();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  void (*v10)(uint64_t);
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  os_log_type_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  os_log_type_t v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  void *v54;
  os_log_type_t v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  void *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(void);
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  void v77[5];
  long long v78;
  long long v79;
  uint64_t v80;
  void v81[3];
  uint64_t v82;
  void v83[5];
  uint64_t v84;

  OUTLINED_FUNCTION_31();
  uint64_t v3 = OUTLINED_FUNCTION_70_8();
  uint64_t v4 = type metadata accessor for FaceIDUnavailableNotice(v3);
  uint64_t v5 = OUTLINED_FUNCTION_113_4(v4, (uint64_t)&protocol witness table for FaceIDUnavailableNotice);
  OUTLINED_FUNCTION_122_3();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45_14(v6, (uint64_t)static Logger.conversationControls);
  OUTLINED_FUNCTION_130_5();
  long long v76 = v0;
  os_log_type_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  uint64_t v9 = v8;
  uint64_t v10 = (void (*)(uint64_t))&unk_1C376A000;
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v11 = (_DWORD *)OUTLINED_FUNCTION_15_1();
    uint64_t v74 = OUTLINED_FUNCTION_14_3();
    *(void *)&uint64_t v78 = v74;
    *unint64_t v11 = 136315394;
    OUTLINED_FUNCTION_28_40();
    uint64_t v12 = FaceIDUnavailableNotice.description.getter();
    uint64_t v14 = OUTLINED_FUNCTION_125_6(v12, v13);
    OUTLINED_FUNCTION_80_6(v14);
    swift_bridgeObjectRelease();
    uint64_t v10 = (void (*)(uint64_t))OUTLINED_FUNCTION_109_3();
    char v73 = &v71;
    OUTLINED_FUNCTION_5_3();
    BOOL v75 = v5;
    MEMORY[0x1F4188790](v15);
    __swift_project_boxed_opaque_existential_1(v81, v82);
    uint64_t v16 = OUTLINED_FUNCTION_52_16();
    v17(v16);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((uint64_t)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    OUTLINED_FUNCTION_147_4();
    uint64_t v72 = v9;
    uint64_t v18 = OUTLINED_FUNCTION_42_24();
    v19(v18);
    uint64_t v5 = v75;
    uint64_t v20 = OUTLINED_FUNCTION_89_6();
    OUTLINED_FUNCTION_133_4(v20);
    uint64_t v2 = v1;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    OUTLINED_FUNCTION_98_7(&dword_1C2F90000, v7, (os_log_type_t)v72, "> Adding to queue, notice: %s, uuid: %s");
    OUTLINED_FUNCTION_145_5();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    OUTLINED_FUNCTION_82_8();
  }

  OUTLINED_FUNCTION_46_21();
  OUTLINED_FUNCTION_32_27();
  OUTLINED_FUNCTION_102_5();
  if (v5)
  {
    OUTLINED_FUNCTION_63_8(v21, v22);
    id v23 = OUTLINED_FUNCTION_13_70();
    v24(v23);
  }
  uint64_t v25 = OUTLINED_FUNCTION_47_18();
  ((void (*)(uint64_t))v1)(v25);
  uint64_t v26 = OUTLINED_FUNCTION_33_31();
  v10(v26);
  OUTLINED_FUNCTION_3_121();
  OUTLINED_FUNCTION_53_15();
  v27();
  if (v82)
  {
    OUTLINED_FUNCTION_37_22();
    if (*((void *)&v79 + 1))
    {
      uint64_t v28 = OUTLINED_FUNCTION_6_102();
      if (v29(v28))
      {
        OUTLINED_FUNCTION_107_7();
        if (v77[3])
        {
          OUTLINED_FUNCTION_25_49();
          uint64_t v30 = OUTLINED_FUNCTION_15_67();
          if (v31(v30))
          {
            BOOL v75 = v2;
            OUTLINED_FUNCTION_44_21();
            os_log_type_t v32 = (void *)Logger.logObject.getter();
            uint64_t v33 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_62_9(v33))
            {
              uint64_t v34 = (_DWORD *)OUTLINED_FUNCTION_15_1();
              uint64_t v35 = OUTLINED_FUNCTION_14_3();
              OUTLINED_FUNCTION_126_3(v35);
              *uint64_t v34 = 136315394;
              id v36 = OUTLINED_FUNCTION_2_120(v77);
              unint64_t v38 = v37(v36);
              uint64_t v40 = OUTLINED_FUNCTION_39_26(v38, v39);
              OUTLINED_FUNCTION_23_49(v40);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_11_64();
              uint64_t v41 = OUTLINED_FUNCTION_2_120(v83);
              unint64_t v43 = v42(v41);
              uint64_t v45 = OUTLINED_FUNCTION_39_26(v43, v44);
              OUTLINED_FUNCTION_21_49(v45);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_35_22(&dword_1C2F90000, v46, v47, "> Coalescing active notice with notice: %s, result: %s");
              OUTLINED_FUNCTION_58_11();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
            }

            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_110_6();
            OUTLINED_FUNCTION_3_16();
          }
          else
          {
            OUTLINED_FUNCTION_44_21();
            os_log_type_t v60 = (void *)Logger.logObject.getter();
            uint64_t v61 = static os_log_type_t.default.getter();
            if (OUTLINED_FUNCTION_61_11(v61))
            {
              OUTLINED_FUNCTION_37();
              uint64_t v62 = OUTLINED_FUNCTION_9_3();
              OUTLINED_FUNCTION_111_3(v62);
              uint64_t v63 = OUTLINED_FUNCTION_4_105(4.8149e-34);
              unint64_t v65 = v64(v63);
              uint64_t v67 = OUTLINED_FUNCTION_39_26(v65, v66);
              OUTLINED_FUNCTION_22_43(v67);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
              OUTLINED_FUNCTION_36_25(&dword_1C2F90000, v68, v69, "> Replacing active notice with notice: %s");
              OUTLINED_FUNCTION_51_17();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
            }

            OUTLINED_FUNCTION_44_21();
            OUTLINED_FUNCTION_3_121();
            OUTLINED_FUNCTION_106_6();
          }
          OUTLINED_FUNCTION_31_1();
          v70();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
        }
        else
        {
          outlined destroy of SystemUpdateNotice?((uint64_t)v77, &demangling cache variable for type metadata for Notice?);
          os_log_type_t v54 = (void *)Logger.logObject.getter();
          int v55 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_12(v55))
          {
            uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_8_0();
            OUTLINED_FUNCTION_22_1(v56);
            OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v57, v58, "Tried to pop next notice but there wasn't a notice to pop");
            OUTLINED_FUNCTION_3();
          }

          uint64_t v80 = 0;
          uint64_t v78 = 0u;
          uint64_t v79 = 0u;
          OUTLINED_FUNCTION_3_121();
          OUTLINED_FUNCTION_31_1();
          v59();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
    }
    else
    {
      outlined destroy of SystemUpdateNotice?((uint64_t)&v78, &demangling cache variable for type metadata for Notice?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  else
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v81, &demangling cache variable for type metadata for Notice?);
    os_log_type_t v48 = (void *)Logger.logObject.getter();
    uint64_t v49 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v49))
    {
      uint64_t v50 = (_WORD *)OUTLINED_FUNCTION_8_0();
      OUTLINED_FUNCTION_22_1(v50);
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v51, v52, "> No active notice, present just pushed notice");
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_103_6();
    OUTLINED_FUNCTION_3_121();
    OUTLINED_FUNCTION_31_1();
    v53();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
  OUTLINED_FUNCTION_28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t (*v30)(uint64_t *, char);
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  unint64_t v50;
  void *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);
  void *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(void);
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t (*v64)(void);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  void (*v69)(void);
  uint64_t v70;
  int v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t *v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[3];
  long long v80;
  uint64_t v81;
  long long v82;
  long long v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[3];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[6];

  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  os_log_type_t v7 = v6;
  v91[3] = v2;
  v91[4] = v0;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v91);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(boxed_opaque_existential_1, v7, v3);
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationControls);
  outlined init with copy of IDSLookupManager((uint64_t)v91, (uint64_t)v88);
  outlined init with copy of IDSLookupManager((uint64_t)v91, (uint64_t)&v85);
  long long v77 = v10;
  unint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.default.getter();
  uint64_t v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = OUTLINED_FUNCTION_15_1();
    long long v76 = v5;
    uint64_t v15 = v14;
    uint64_t v74 = OUTLINED_FUNCTION_14_3();
    *(void *)&uint64_t v82 = v74;
    *(_DWORD *)uint64_t v15 = 136315394;
    __swift_project_boxed_opaque_existential_1(v88, v89);
    OUTLINED_FUNCTION_8_76();
    uint64_t v17 = v16();
    *(void *)&uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&v82);
    char v73 = (char *)&v80 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v72 = v15 + 14;
    uint64_t v19 = type metadata accessor for UUID();
    uint64_t v70 = (uint64_t)&v70;
    OUTLINED_FUNCTION_4();
    BOOL v75 = boxed_opaque_existential_1;
    uint64_t v21 = v20;
    MEMORY[0x1F4188790](v22);
    OUTLINED_FUNCTION_21();
    uint64_t v71 = v13;
    uint64_t v25 = v24 - v23;
    __swift_project_boxed_opaque_existential_1(&v85, v86);
    OUTLINED_FUNCTION_33_34();
    OUTLINED_FUNCTION_5_106();
    v26();
    _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = v28;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v19);
    *(void *)&uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    _os_log_impl(&dword_1C2F90000, v11, (os_log_type_t)v71, "> Adding to queue, notice: %s, uuid: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    uint64_t v5 = v76;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  }

  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v1 + 56))(&v82, v3, v1);
  uint64_t v30 = ConversationControlsNoticeCoordinator.noticeQueue.modify(v88);
  os_log_type_t v32 = specialized Dictionary.subscript.modify();
  uint64_t v33 = *(void *)(v31 + 24);
  if (v33)
  {
    uint64_t v34 = *(void *)(v31 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v31, *(void *)(v31 + 24));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v34 + 16))(v91, v33, v34);
  }
  ((void (*)(long long *, void))v32)(&v85, 0);
  v30(v88, 0);
  OUTLINED_FUNCTION_2_123();
  OUTLINED_FUNCTION_16_54();
  v35();
  if (v86)
  {
    outlined init with take of Notice(&v85, (uint64_t)v88);
    ConversationControlsNoticeCoordinator.peek()((uint64_t)&v82);
    if (*((void *)&v83 + 1))
    {
      outlined init with take of Notice(&v82, (uint64_t)&v85);
      id v36 = v86;
      uint64_t v37 = v87;
      __swift_project_boxed_opaque_existential_1(&v85, v86);
      if ((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v37 + 216))(v88, v36, v37))
      {
        ConversationControlsNoticeCoordinator.pop()();
        if (v81)
        {
          outlined init with take of Notice(&v80, (uint64_t)&v82);
          unint64_t v38 = v89;
          uint64_t v39 = v90;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v88, v89);
          if ((*(uint64_t (**)(long long *, uint64_t, uint64_t))(v39 + 208))(&v82, v38, v39))
          {
            outlined init with copy of IDSLookupManager((uint64_t)&v82, (uint64_t)&v80);
            uint64_t v40 = Logger.logObject.getter();
            uint64_t v41 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v40, v41))
            {
              uint64_t v42 = OUTLINED_FUNCTION_15_1();
              v79[0] = OUTLINED_FUNCTION_14_3();
              *(_DWORD *)uint64_t v42 = 136315394;
              long long v76 = v5;
              __swift_project_boxed_opaque_existential_1(&v80, v81);
              unint64_t v43 = OUTLINED_FUNCTION_7_100();
              uint64_t v45 = v44(v43);
              Swift::String v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v79);
              OUTLINED_FUNCTION_34_33(v47);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
              *(_WORD *)(v42 + 12) = 2080;
              swift_beginAccess();
              __swift_project_boxed_opaque_existential_1(v88, v89);
              OUTLINED_FUNCTION_8_76();
              uint64_t v49 = v48();
              uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v79);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C2F90000, v40, v41, "> Coalescing active notice with notice: %s, result: %s", (uint8_t *)v42, 0x16u);
              swift_arrayDestroy();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
            }

            swift_beginAccess();
            uint64_t v68 = v88;
          }
          else
          {
            outlined init with copy of IDSLookupManager((uint64_t)&v82, (uint64_t)&v80);
            uint64_t v61 = Logger.logObject.getter();
            uint64_t v62 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v61, v62))
            {
              uint64_t v63 = (uint8_t *)OUTLINED_FUNCTION_37();
              long long v77 = OUTLINED_FUNCTION_9_0();
              v79[0] = v77;
              *(_DWORD *)uint64_t v63 = 136315138;
              long long v76 = v63 + 4;
              __swift_project_boxed_opaque_existential_1(&v80, v81);
              OUTLINED_FUNCTION_8_76();
              unint64_t v65 = v64();
              uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v79);
              OUTLINED_FUNCTION_34_33(v67);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
              _os_log_impl(&dword_1C2F90000, v61, v62, "> Replacing active notice with notice: %s", v63, 0xCu);
              swift_arrayDestroy();
              OUTLINED_FUNCTION_3();
              OUTLINED_FUNCTION_3();
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
            }

            uint64_t v68 = (uint64_t *)&v82;
          }
          outlined init with copy of IDSLookupManager((uint64_t)v68, (uint64_t)&v80);
          OUTLINED_FUNCTION_2_123();
          OUTLINED_FUNCTION_31_1();
          v69();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
        }
        else
        {
          outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v80, &demangling cache variable for type metadata for Notice?);
          uint64_t v56 = (void *)Logger.logObject.getter();
          uint64_t v57 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_12(v57))
          {
            *(_WORD *)swift_slowAlloc() = 0;
            OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v58, v59, "Tried to pop next notice but there wasn't a notice to pop");
            OUTLINED_FUNCTION_3();
          }

          uint64_t v84 = 0;
          uint64_t v82 = 0u;
          uint64_t v83 = 0u;
          OUTLINED_FUNCTION_2_123();
          OUTLINED_FUNCTION_31_1();
          v60();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v82, &demangling cache variable for type metadata for Notice?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v85, &demangling cache variable for type metadata for Notice?);
    uint64_t v51 = (void *)Logger.logObject.getter();
    long long v52 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_12(v52))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_0_2(&dword_1C2F90000, v53, v54, "> No active notice, present just pushed notice");
      OUTLINED_FUNCTION_3();
    }

    ConversationControlsNoticeCoordinator.pop()();
    OUTLINED_FUNCTION_2_123();
    OUTLINED_FUNCTION_31_1();
    v55();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
  OUTLINED_FUNCTION_28();
}

unsigned char *storeEnumTagSinglePayload for BannerPresentationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C350391CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BannerPresentationError()
{
  return &type metadata for BannerPresentationError;
}

uint64_t method lookup function for BannerPresentationManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BannerPresentationManager);
}

uint64_t dispatch thunk of BannerPresentationManager.presentationDelegate.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of BannerPresentationManager.presentationDelegate.setter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of BannerPresentationManager.presentationDelegate.modify()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of BannerPresentationManager.audioRoutingDelegate.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of BannerPresentationManager.audioRoutingDelegate.setter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of BannerPresentationManager.audioRoutingDelegate.modify()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of BannerPresentationManager.inCallConversationControlsDelegate.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of BannerPresentationManager.inCallConversationControlsDelegate.setter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of BannerPresentationManager.inCallConversationControlsDelegate.modify()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of BannerPresentationManager.handedOffCall.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t dispatch thunk of BannerPresentationManager.handedOffCall.setter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of BannerPresentationManager.handedOffCall.modify()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of BannerPresentationManager.activeCall.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t dispatch thunk of BannerPresentationManager.conversationControlsManager.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 384))();
}

uint64_t dispatch thunk of BannerPresentationManager.presentedBanner.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of BannerPresentationManager.presentedSystemApertureElement.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 416))();
}

uint64_t dispatch thunk of BannerPresentationManager.presentedSystemApertureElement.setter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 424))();
}

uint64_t dispatch thunk of BannerPresentationManager.presentedSystemApertureElement.modify()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 432))();
}

uint64_t dispatch thunk of BannerPresentationManager.isAlertAvailable.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t dispatch thunk of BannerPresentationManager.makeSystemApertureElementProvider()()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 472))();
}

uint64_t dispatch thunk of BannerPresentationManager.makeOrphanSystemApertureElementProvider()()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 480))();
}

uint64_t dispatch thunk of BannerPresentationManager.inCallControlsVisible.getter()
{
  OUTLINED_FUNCTION_6_63();
  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t dispatch thunk of BannerPresentationManager.__allocating_init(delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 600))();
}

void partial apply for closure #2 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)(int a1, void *a2)
{
  closure #2 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)(a1, a2, v2);
}

uint64_t sub_1C3504FB0()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)()
{
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v1;
  v4[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  uint64_t v5 = OUTLINED_FUNCTION_18_10();
  return closure #1 in closure #1 in BannerPresentationManager.handleCallStatusDidChange(_:)(v5, v6, v7, v3, v2);
}

uint64_t outlined destroy of SessionActionNotice(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

unint64_t lazy protocol witness table accessor for type STBackgroundActivityIdentifier and conformance STBackgroundActivityIdentifier(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = OUTLINED_FUNCTION_148_4();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_1C350513C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BannerPresentationManager.presentBanner(as:type:activityTypeForNewBanner:activityUUID:fromActivityManager:reply:)(uint64_t result)
{
  uint64_t v2 = *(uint64_t (**)(BOOL, uint64_t))(v1 + 16);
  if (v2) {
    return v2(result == 0, result);
  }
  return result;
}

unint64_t _sSo17OS_dispatch_queueCAB7Combine9Scheduler8DispatchWlTm_0(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_6_6(a1);
  if (!result)
  {
    type metadata accessor for NSObject(255, v3);
    unint64_t result = OUTLINED_FUNCTION_148_4();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t outlined init with copy of FaceIDUnavailableNotice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_89();
  v4(v3);
  OUTLINED_FUNCTION_0();
  uint64_t v5 = OUTLINED_FUNCTION_89_0();
  v6(v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_80_6(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  *(void *)(v1 + 32) = v1 + 128;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_82_8()
{
  __swift_destroy_boxed_opaque_existential_1(v1 - 168);
  return __swift_destroy_boxed_opaque_existential_1(v0 + 208);
}

uint64_t OUTLINED_FUNCTION_83_7()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_86_9()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_106_6()
{
  return v0 + 120;
}

void OUTLINED_FUNCTION_107_7()
{
  ConversationControlsNoticeCoordinator.pop()();
}

uint64_t OUTLINED_FUNCTION_109_3()
{
  __swift_destroy_boxed_opaque_existential_1(v2 - 168);
  *(_WORD *)(v1 + 12) = 2080;
  *(void *)(v0 + 24) = v1 + 14;
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_110_6()
{
  return outlined init with copy of IDSLookupManager(v1 - 168, v0 + 120);
}

uint64_t *OUTLINED_FUNCTION_113_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 104) = a1;
  *(void *)(v2 - 96) = a2;
  return __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v2 - 128));
}

void OUTLINED_FUNCTION_119_4(unsigned char *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
}

uint64_t OUTLINED_FUNCTION_125_6(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 + 160));
}

uint64_t OUTLINED_FUNCTION_126_3(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_130_5()
{
  return outlined init with copy of IDSLookupManager(v1 - 128, v0 + 208);
}

uint64_t OUTLINED_FUNCTION_134_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_139_5(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_148_4()
{
  return swift_getWitnessTable();
}

uint64_t OUTLINED_FUNCTION_157_5()
{
  return 0;
}

uint64_t ParticipantViewRepresentableViewModel.participant.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15ConversationKit11ParticipantVWOcTm_14(v1, a1, (void (*)(void))type metadata accessor for Participant);
}

uint64_t ParticipantViewRepresentableViewModel.isLocal.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewRepresentableViewModel(0) + 20));
}

uint64_t type metadata accessor for ParticipantViewRepresentableViewModel(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantViewRepresentableViewModel);
}

uint64_t ParticipantViewRepresentableViewModel.participantViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ParticipantViewRepresentableViewModel(0);
  return _s15ConversationKit11ParticipantVWOcTm_14(v1 + *(int *)(v3 + 24), a1, (void (*)(void))type metadata accessor for ParticipantViewModel);
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_14(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t ParticipantViewRepresentableViewModel.orientation.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ParticipantViewRepresentableViewModel(0) + 28));
}

uint64_t ParticipantViewRepresentableViewModel.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Participant(0) + 20);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t ParticipantViewRepresentableViewModel.isVideoEnabled.getter()
{
  type metadata accessor for ParticipantViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_21();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for ParticipantViewRepresentableViewModel(0);
  _s15ConversationKit11ParticipantVWOcTm_14(v0 + *(int *)(v5 + 24), v4, (void (*)(void))type metadata accessor for ParticipantViewModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v9 = v4
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                + 48);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
    uint64_t v8 = v4 + *(int *)(v7 + 48);
    outlined destroy of ParticipantVideoOverlayView.ViewModel(v4 + *(int *)(v7 + 64));
    uint64_t v9 = v8;
LABEL_5:
    outlined destroy of ParticipantVideoView.ViewModel(v9);
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1(v4, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
    return 1;
  }
  uint64_t v11 = v4
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
               + 48);
  uint64_t v12 = *(void **)v11;
  uint64_t v13 = *(void *)(v11 + 72);
  uint64_t v14 = *(void *)(v11 + 80);
  _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1(v4, (void (*)(void))type metadata accessor for ParticipantViewModel.ParticipantDetails);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of AnsweringMachineCallStatus?(v13, v14);
  return 0;
}

#error "1C350593C: call analysis failed (funcsize=104)"

BOOL static ParticipantViewRepresentableViewModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static Participant.== infix(_:_:)();
  if ((v4 & 1) != 0
    && (uint64_t v5 = type metadata accessor for ParticipantViewRepresentableViewModel(0),
        *(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v5 + 20)))
    && (uint64_t v6 = v5, static ParticipantViewModel.== infix(_:_:)(), (v7 & 1) != 0))
  {
    return *(void *)(a1 + *(int *)(v6 + 28)) == *(void *)(a2 + *(int *)(v6 + 28));
  }
  else
  {
    return 0;
  }
}

uint64_t ParticipantViewRepresentable.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15ConversationKit11ParticipantVWOcTm_14(v1, a1, (void (*)(void))type metadata accessor for ParticipantViewRepresentableViewModel);
}

uint64_t ParticipantViewRepresentable.viewModel.setter(uint64_t a1)
{
  return outlined assign with take of ParticipantViewRepresentableViewModel(a1, v1);
}

uint64_t (*ParticipantViewRepresentable.viewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewRepresentable.isInRoster.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ParticipantViewRepresentable(0) + 20));
}

uint64_t ParticipantViewRepresentable.isInRoster.setter(char a1)
{
  uint64_t result = type metadata accessor for ParticipantViewRepresentable(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

double (*ParticipantViewRepresentable.isInRoster.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ParticipantViewRepresentable.init(viewModel:isInRoster:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  outlined init with take of ParticipantViewModel(a1, a3, (void (*)(void))type metadata accessor for ParticipantViewRepresentableViewModel);
  uint64_t result = type metadata accessor for ParticipantViewRepresentable(0);
  *(unsigned char *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

char *ParticipantViewRepresentable.makeUIView(context:)()
{
  type metadata accessor for ParticipantViewRepresentableViewModel(0);
  id v0 = objc_allocWithZone((Class)type metadata accessor for ParticipantView());
  return ParticipantView.init(frame:localParticipant:)();
}

uint64_t ParticipantViewRepresentable.updateUIView(_:context:)()
{
  uint64_t v1 = type metadata accessor for ParticipantViewRepresentableViewModel(0);
  ParticipantView.configure(with:isOneToOneMode:)(v0 + *(int *)(v1 + 24), 0);
  uint64_t v2 = type metadata accessor for ParticipantViewRepresentable(0);
  return ParticipantView.isInRoster.setter(*(unsigned char *)(v0 + *(int *)(v2 + 20)));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ParticipantViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ParticipantViewRepresentable and conformance ParticipantViewRepresentable(&lazy protocol witness table cache variable for type ParticipantViewRepresentable and conformance ParticipantViewRepresentable);
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ParticipantViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ParticipantViewRepresentable and conformance ParticipantViewRepresentable(&lazy protocol witness table cache variable for type ParticipantViewRepresentable and conformance ParticipantViewRepresentable);
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance ParticipantViewRepresentable()
{
}

uint64_t outlined assign with take of ParticipantViewRepresentableViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ParticipantViewRepresentableViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ParticipantViewRepresentable(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for ParticipantViewRepresentable);
}

uint64_t outlined init with take of ParticipantViewModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t base witness table accessor for View in ParticipantViewRepresentable()
{
  return lazy protocol witness table accessor for type ParticipantViewRepresentable and conformance ParticipantViewRepresentable(&lazy protocol witness table cache variable for type ParticipantViewRepresentable and conformance ParticipantViewRepresentable);
}

void *initializeBufferWithCopyOfBuffer for ParticipantViewRepresentableViewModel(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Participant.State(0);
    uint64_t v149 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_18;
      case 4u:
        uint64_t v10 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v12 = *(int *)(v11 + 48);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)a2 + v12);
        uint64_t v15 = *(void *)((char *)a2 + v12 + 16);
        uint64_t v16 = *(void *)((char *)a2 + v12 + 24);
        *((void *)v13 + 2) = v15;
        *((void *)v13 + 3) = v16;
        *((_WORD *)v13 + 16) = *((_WORD *)v14 + 16);
        *((void *)v13 + 5) = *((void *)v14 + 5);
        v13[48] = v14[48];
        *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
        v13[88] = v14[88];
        v13[89] = v14[89];
        uint64_t v17 = *((void *)v14 + 15);
        swift_bridgeObjectRetain();
        if (v17)
        {
          if (v17 == 1)
          {
            uint64_t v18 = v13 + 96;
            uint64_t v19 = v14 + 96;
            size_t v20 = 209;
            goto LABEL_12;
          }
          uint64_t v22 = *((void *)v14 + 16);
          *((void *)v13 + 15) = v17;
          *((void *)v13 + 16) = v22;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8))((uint64_t)(v13 + 96), (uint64_t)(v14 + 96), v17);
        }
        else
        {
          long long v21 = *((_OWORD *)v14 + 7);
          *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
          *((_OWORD *)v13 + 7) = v21;
          *((void *)v13 + 16) = *((void *)v14 + 16);
        }
        *((_DWORD *)v13 + 34) = *((_DWORD *)v14 + 34);
        long long v23 = *((_OWORD *)v14 + 10);
        *((_OWORD *)v13 + 9) = *((_OWORD *)v14 + 9);
        *((_OWORD *)v13 + 10) = v23;
        *((_OWORD *)v13 + 11) = *((_OWORD *)v14 + 11);
        v13[192] = v14[192];
        uint64_t v18 = v13 + 208;
        uint64_t v19 = v14 + 208;
        *((void *)v13 + 25) = *((void *)v14 + 25);
        size_t v20 = 97;
LABEL_12:
        memcpy(v18, v19, v20);
        uint64_t v24 = *((void *)v14 + 39);
        if (v24)
        {
          uint64_t v25 = *((void *)v14 + 40);
          uint64_t v26 = *((void *)v14 + 41);
          *((void *)v13 + 39) = v24;
          *((void *)v13 + 40) = v25;
          *((void *)v13 + 41) = v26;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
          *((void *)v13 + 41) = *((void *)v14 + 41);
        }
        uint64_t v27 = *(int *)(v11 + 64);
        uint64_t v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        uint64_t v30 = *((void *)v29 + 1);
        if (v30)
        {
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = v30;
          uint64_t v31 = *((void *)v29 + 3);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = v31;
          v28[32] = v29[32];
          *(_OWORD *)(v28 + 40) = *(_OWORD *)(v29 + 40);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v32 = *((_OWORD *)v29 + 1);
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
          *((_OWORD *)v28 + 1) = v32;
          long long v33 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v33;
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
LABEL_19:
        uint64_t v34 = (int *)type metadata accessor for Participant(0);
        uint64_t v35 = v34[5];
        id v36 = (char *)a1 + v35;
        uint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = type metadata accessor for UUID();
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
        v39(v36, v37, v38);
        uint64_t v40 = v34[6];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        v41[4] = v42[4];
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        uint64_t v43 = v34[7];
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        uint64_t v46 = *(void **)v45;
        objc_super v146 = v39;
        uint64_t v148 = v38;
        if (*(void *)v45)
        {
          uint64_t v47 = *((void *)v45 + 1);
          *(void *)uint64_t v44 = v46;
          *((void *)v44 + 1) = v47;
          v44[16] = v45[16];
          uint64_t v48 = *((void *)v45 + 4);
          *((void *)v44 + 3) = *((void *)v45 + 3);
          *((void *)v44 + 4) = v48;
          id v49 = v46;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v50 = *((_OWORD *)v45 + 1);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          *((_OWORD *)v44 + 1) = v50;
          *((void *)v44 + 4) = *((void *)v45 + 4);
        }
        *(void *)((char *)a1 + v34[8]) = *(void *)((char *)a2 + v34[8]);
        uint64_t v51 = v34[9];
        long long v52 = (void *)((char *)a1 + v51);
        unint64_t v53 = (void *)((char *)a2 + v51);
        uint64_t v54 = v53[1];
        void *v52 = *v53;
        v52[1] = v54;
        *((unsigned char *)a1 + v34[10]) = *((unsigned char *)a2 + v34[10]);
        *(void *)((char *)a1 + v34[11]) = *(void *)((char *)a2 + v34[11]);
        uint64_t v55 = v34[12];
        uint64_t v56 = *(void **)((char *)a2 + v55);
        *(void *)((char *)a1 + v55) = v56;
        *((unsigned char *)a1 + v34[13]) = *((unsigned char *)a2 + v34[13]);
        uint64_t v57 = v34[14];
        uint64_t v58 = (char *)a1 + v57;
        uint64_t v59 = (char *)a2 + v57;
        uint64_t v60 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v61 = v56;
        if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v60))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
        }
        uint64_t v63 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v64 = *(int *)(v63 + 20);
        unint64_t v65 = &v58[v64];
        uint64_t v66 = &v59[v64];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v59[v64], 1, v60))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v65, v66, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v60);
        }
        v58[*(int *)(v63 + 24)] = v59[*(int *)(v63 + 24)];
        *((unsigned char *)a1 + v34[15]) = *((unsigned char *)a2 + v34[15]);
        *(void *)((char *)a1 + v34[16]) = *(void *)((char *)a2 + v34[16]);
        uint64_t v68 = v149;
        uint64_t v69 = *(int *)(v149 + 24);
        *((unsigned char *)a1 + *(int *)(v149 + 20)) = *((unsigned char *)a2 + *(int *)(v149 + 20));
        uint64_t v70 = (char *)a1 + v69;
        uint64_t v71 = (char *)a2 + v69;
        type metadata accessor for ParticipantViewModel(0);
        swift_retain();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          v146(v70, v71, v148);
          uint64_t v85 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
          uint64_t v86 = v85[5];
          id v87 = &v70[v86];
          unint64_t v88 = &v71[v86];
          uint64_t v90 = *(void *)v88;
          uint64_t v89 = *((void *)v88 + 1);
          *(void *)id v87 = v90;
          *((void *)v87 + 1) = v89;
          v70[v85[6]] = v71[v85[6]];
          v70[v85[7]] = v71[v85[7]];
          v70[v85[8]] = v71[v85[8]];
          v70[v85[9]] = v71[v85[9]];
          v70[v85[10]] = v71[v85[10]];
          v70[v85[11]] = v71[v85[11]];
          swift_bridgeObjectRetain();
          uint64_t v91 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                       + 48);
          id v92 = &v70[v91];
          uint64_t v93 = &v71[v91];
          uint64_t v94 = *(void **)&v71[v91];
          uint64_t v95 = *((void *)v93 + 1);
          *(void *)id v92 = v94;
          *((void *)v92 + 1) = v95;
          uint64_t v96 = *((void *)v93 + 3);
          *((void *)v92 + 2) = *((void *)v93 + 2);
          *((void *)v92 + 3) = v96;
          uint64_t v97 = *((void *)v93 + 5);
          *((void *)v92 + 4) = *((void *)v93 + 4);
          *((void *)v92 + 5) = v97;
          uint64_t v98 = *((void *)v93 + 7);
          *((void *)v92 + 6) = *((void *)v93 + 6);
          *((void *)v92 + 7) = v98;
          v92[64] = v93[64];
          v92[65] = v93[65];
          uint64_t v99 = *((void *)v93 + 10);
          id v100 = v94;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v99)
          {
            *((void *)v92 + 9) = *((void *)v93 + 9);
            *((void *)v92 + 10) = v99;
            uint64_t v101 = *((void *)v93 + 12);
            *((void *)v92 + 11) = *((void *)v93 + 11);
            *((void *)v92 + 12) = v101;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v119 = *(_OWORD *)(v93 + 88);
            *(_OWORD *)(v92 + 72) = *(_OWORD *)(v93 + 72);
            *(_OWORD *)(v92 + 88) = v119;
          }
          uint64_t v68 = v149;
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v146(v70, v71, v148);
          char v73 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
          uint64_t v74 = v73[5];
          BOOL v75 = &v70[v74];
          long long v76 = &v71[v74];
          uint64_t v78 = *(void *)v76;
          uint64_t v77 = *((void *)v76 + 1);
          *(void *)BOOL v75 = v78;
          *((void *)v75 + 1) = v77;
          v70[v73[6]] = v71[v73[6]];
          v70[v73[7]] = v71[v73[7]];
          v70[v73[8]] = v71[v73[8]];
          v70[v73[9]] = v71[v73[9]];
          v70[v73[10]] = v71[v73[10]];
          v70[v73[11]] = v71[v73[11]];
          swift_bridgeObjectRetain();
          uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
          uint64_t v80 = *(int *)(v79 + 48);
          uint64_t v81 = &v70[v80];
          uint64_t v82 = &v71[v80];
          uint64_t v83 = *(void *)&v71[v80 + 24];
          if (v83)
          {
            uint64_t v84 = *((void *)v82 + 4);
            *((void *)v81 + 3) = v83;
            *((void *)v81 + 4) = v84;
            (**(void (***)(char *, char *))(v83 - 8))(v81, v82);
          }
          else
          {
            long long v113 = *((_OWORD *)v82 + 1);
            *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
            *((_OWORD *)v81 + 1) = v113;
            *((void *)v81 + 4) = *((void *)v82 + 4);
          }
          memcpy(v81 + 40, v82 + 40, 0x84uLL);
          uint64_t v114 = *(int *)(v79 + 64);
          uint64_t v115 = &v70[v114];
          uint64_t v116 = &v71[v114];
          switch(v116[104])
          {
            case 1:
              long long v117 = *(_OWORD *)(v116 + 24);
              *(_OWORD *)(v115 + 24) = v117;
              (**(void (***)(void *, char *))(v117 - 8))(v115, v116);
              uint64_t v118 = *((void *)v116 + 6);
              *((void *)v115 + 5) = *((void *)v116 + 5);
              *((void *)v115 + 6) = v118;
              v115[104] = 1;
              swift_bridgeObjectRetain();
              break;
            case 2:
              uint64_t v122 = *((void *)v116 + 1);
              *(void *)uint64_t v115 = *(void *)v116;
              *((void *)v115 + 1) = v122;
              uint64_t v123 = (void *)*((void *)v116 + 3);
              *((void *)v115 + 2) = *((void *)v116 + 2);
              *((void *)v115 + 3) = v123;
              *((_WORD *)v115 + 16) = *((_WORD *)v116 + 16);
              *((void *)v115 + 5) = *((void *)v116 + 5);
              v115[48] = v116[48];
              uint64_t v124 = (void *)*((void *)v116 + 7);
              *((void *)v115 + 7) = v124;
              v115[104] = 2;
              swift_bridgeObjectRetain();
              id v125 = v123;
              id v126 = v124;
              uint64_t v68 = v149;
              break;
            case 3:
              uint64_t v127 = *((void *)v116 + 1);
              *(void *)uint64_t v115 = *(void *)v116;
              *((void *)v115 + 1) = v127;
              uint64_t v128 = (void *)*((void *)v116 + 3);
              *((void *)v115 + 2) = *((void *)v116 + 2);
              *((void *)v115 + 3) = v128;
              *((_WORD *)v115 + 16) = *((_WORD *)v116 + 16);
              *((void *)v115 + 5) = *((void *)v116 + 5);
              v115[48] = v116[48];
              uint64_t v130 = (void *)*((void *)v116 + 7);
              uint64_t v129 = *((void *)v116 + 8);
              *((void *)v115 + 7) = v130;
              *((void *)v115 + 8) = v129;
              uint64_t v131 = *((void *)v116 + 9);
              uint64_t v132 = (void *)*((void *)v116 + 10);
              *((void *)v115 + 9) = v131;
              *((void *)v115 + 10) = v132;
              v115[104] = 3;
              swift_bridgeObjectRetain();
              id v133 = v128;
              uint64_t v68 = v149;
              id v134 = v130;
              swift_bridgeObjectRetain();
              id v135 = v132;
              break;
            case 4:
              id v136 = *(void **)v116;
              uint64_t v137 = *((void *)v116 + 1);
              *(void *)uint64_t v115 = *(void *)v116;
              *((void *)v115 + 1) = v137;
              uint64_t v138 = *((void *)v116 + 3);
              *((void *)v115 + 2) = *((void *)v116 + 2);
              *((void *)v115 + 3) = v138;
              uint64_t v139 = *((void *)v116 + 5);
              *((void *)v115 + 4) = *((void *)v116 + 4);
              *((void *)v115 + 5) = v139;
              uint64_t v140 = *((void *)v116 + 7);
              *((void *)v115 + 6) = *((void *)v116 + 6);
              *((void *)v115 + 7) = v140;
              v115[64] = v116[64];
              v115[65] = v116[65];
              uint64_t v147 = *((void *)v116 + 10);
              id v141 = v136;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v147)
              {
                *((void *)v115 + 9) = *((void *)v116 + 9);
                *((void *)v115 + 10) = v147;
                uint64_t v142 = *((void *)v116 + 12);
                *((void *)v115 + 11) = *((void *)v116 + 11);
                *((void *)v115 + 12) = v142;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v145 = *(_OWORD *)(v116 + 88);
                *(_OWORD *)(v115 + 72) = *(_OWORD *)(v116 + 72);
                *(_OWORD *)(v115 + 88) = v145;
              }
              v115[104] = 4;
              break;
            case 5:
              uint64_t v143 = *(void **)v116;
              *(void *)uint64_t v115 = *(void *)v116;
              v115[104] = 5;
              id v144 = v143;
              break;
            default:
              memcpy(v115, v116, 0x69uLL);
              break;
          }
        }
        else
        {
          v146(v70, v71, v148);
          uint64_t v102 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
          uint64_t v103 = v102[5];
          uint64_t v104 = &v70[v103];
          uint64_t v105 = &v71[v103];
          uint64_t v107 = *(void *)v105;
          uint64_t v106 = *((void *)v105 + 1);
          *(void *)uint64_t v104 = v107;
          *((void *)v104 + 1) = v106;
          v70[v102[6]] = v71[v102[6]];
          v70[v102[7]] = v71[v102[7]];
          v70[v102[8]] = v71[v102[8]];
          v70[v102[9]] = v71[v102[9]];
          v70[v102[10]] = v71[v102[10]];
          v70[v102[11]] = v71[v102[11]];
          swift_bridgeObjectRetain();
          uint64_t v108 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                        + 48);
          uint64_t v109 = &v70[v108];
          uint64_t v110 = &v71[v108];
          uint64_t v111 = *((void *)v110 + 3);
          if (v111)
          {
            uint64_t v112 = *((void *)v110 + 4);
            *((void *)v109 + 3) = v111;
            *((void *)v109 + 4) = v112;
            (**(void (***)(char *, char *))(v111 - 8))(v109, v110);
          }
          else
          {
            long long v120 = *((_OWORD *)v110 + 1);
            *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
            *((_OWORD *)v109 + 1) = v120;
            *((void *)v109 + 4) = *((void *)v110 + 4);
          }
          memcpy(v109 + 40, v110 + 40, 0x84uLL);
        }
        swift_storeEnumTagMultiPayload();
        *(void *)((char *)a1 + *(int *)(v68 + 28)) = *(void *)((char *)a2 + *(int *)(v68 + 28));
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_19;
    }
  }
  return a1;
}

void destroy for ParticipantViewRepresentableViewModel(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v4 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    case 4u:
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v21 = a1 + *(int *)(v20 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v21 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v21 + 96);
      }
      if (*(void *)(v21 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + *(int *)(v20 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  int v5 = (int *)type metadata accessor for Participant(0);
  uint64_t v6 = a1 + v5[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = (id *)(a1 + v5[7]);
  if (*v9)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v10 = a1 + v5[14];
  uint64_t v11 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  uint64_t v12 = v10 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v12, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v12, v11);
  }
  swift_release();
  uint64_t v13 = a1 + *(int *)(a2 + 24);
  type metadata accessor for ParticipantViewModel(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v8(v13, v7);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v18 = v13
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
LABEL_21:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v18 + 80))
      {
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
      }
      break;
    case 1:
      v8(v13, v7);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      uint64_t v17 = v13 + *(int *)(v16 + 48);
      if (*(void *)(v17 + 24)) {
        __swift_destroy_boxed_opaque_existential_1(v17);
      }
      uint64_t v18 = v13 + *(int *)(v16 + 64);
      switch(*(unsigned char *)(v18 + 104))
      {
        case 1:
          __swift_destroy_boxed_opaque_existential_1(v18);
          goto LABEL_23;
        case 2:
          swift_bridgeObjectRelease();

          id v22 = *(id *)(v18 + 56);
          goto LABEL_36;
        case 3:
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          id v22 = *(id *)(v18 + 80);
          goto LABEL_36;
        case 4:
          goto LABEL_21;
        case 5:
          id v22 = *(id *)v18;
LABEL_36:

          break;
        default:
          return;
      }
      break;
    case 0:
      v8(v13, v7);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v15 = v13
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      if (*(void *)(v15 + 24))
      {
        __swift_destroy_boxed_opaque_existential_1(v15);
      }
      break;
  }
}

unsigned char *initializeWithCopy for ParticipantViewRepresentableViewModel(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_16;
    case 4u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      *(_OWORD *)uint64_t v10 = *(_OWORD *)&a2[v9];
      uint64_t v12 = *(void *)&a2[v9 + 16];
      uint64_t v13 = *(void *)&a2[v9 + 24];
      *((void *)v10 + 2) = v12;
      *((void *)v10 + 3) = v13;
      *((_WORD *)v10 + 16) = *((_WORD *)v11 + 16);
      *((void *)v10 + 5) = *((void *)v11 + 5);
      v10[48] = v11[48];
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
      *(_OWORD *)(v10 + 72) = *(_OWORD *)(v11 + 72);
      v10[88] = v11[88];
      v10[89] = v11[89];
      uint64_t v14 = *((void *)v11 + 15);
      swift_bridgeObjectRetain();
      if (v14)
      {
        if (v14 == 1)
        {
          uint64_t v15 = v10 + 96;
          uint64_t v16 = v11 + 96;
          size_t v17 = 209;
          goto LABEL_10;
        }
        uint64_t v19 = *((void *)v11 + 16);
        *((void *)v10 + 15) = v14;
        *((void *)v10 + 16) = v19;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v14 - 8))((uint64_t)(v10 + 96), (uint64_t)(v11 + 96), v14);
      }
      else
      {
        long long v18 = *((_OWORD *)v11 + 7);
        *((_OWORD *)v10 + 6) = *((_OWORD *)v11 + 6);
        *((_OWORD *)v10 + 7) = v18;
        *((void *)v10 + 16) = *((void *)v11 + 16);
      }
      *((_DWORD *)v10 + 34) = *((_DWORD *)v11 + 34);
      long long v20 = *((_OWORD *)v11 + 10);
      *((_OWORD *)v10 + 9) = *((_OWORD *)v11 + 9);
      *((_OWORD *)v10 + 10) = v20;
      *((_OWORD *)v10 + 11) = *((_OWORD *)v11 + 11);
      v10[192] = v11[192];
      uint64_t v15 = v10 + 208;
      uint64_t v16 = v11 + 208;
      *((void *)v10 + 25) = *((void *)v11 + 25);
      size_t v17 = 97;
LABEL_10:
      memcpy(v15, v16, v17);
      uint64_t v21 = *((void *)v11 + 39);
      if (v21)
      {
        uint64_t v22 = *((void *)v11 + 40);
        uint64_t v23 = *((void *)v11 + 41);
        *((void *)v10 + 39) = v21;
        *((void *)v10 + 40) = v22;
        *((void *)v10 + 41) = v23;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v10 + 312) = *(_OWORD *)(v11 + 312);
        *((void *)v10 + 41) = *((void *)v11 + 41);
      }
      uint64_t v24 = *(int *)(v8 + 64);
      uint64_t v25 = &a1[v24];
      uint64_t v26 = &a2[v24];
      uint64_t v27 = *((void *)v26 + 1);
      if (v27)
      {
        *(void *)uint64_t v25 = *(void *)v26;
        *((void *)v25 + 1) = v27;
        uint64_t v28 = *((void *)v26 + 3);
        *((void *)v25 + 2) = *((void *)v26 + 2);
        *((void *)v25 + 3) = v28;
        v25[32] = v26[32];
        *(_OWORD *)(v25 + 40) = *(_OWORD *)(v26 + 40);
        *((void *)v25 + 7) = *((void *)v26 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *((_OWORD *)v26 + 1);
        *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
        *((_OWORD *)v25 + 1) = v29;
        long long v30 = *((_OWORD *)v26 + 3);
        *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
        *((_OWORD *)v25 + 3) = v30;
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_17:
      uint64_t v31 = (int *)type metadata accessor for Participant(0);
      uint64_t v32 = v31[5];
      long long v33 = &a1[v32];
      uint64_t v34 = &a2[v32];
      uint64_t v35 = type metadata accessor for UUID();
      id v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
      v36(v33, v34, v35);
      uint64_t v37 = v31[6];
      uint64_t v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      v38[4] = v39[4];
      *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
      uint64_t v40 = v31[7];
      uint64_t v41 = &a1[v40];
      uint64_t v42 = &a2[v40];
      uint64_t v43 = *(void **)v42;
      uint64_t v143 = v35;
      long long v145 = v36;
      if (*(void *)v42)
      {
        uint64_t v44 = *((void *)v42 + 1);
        *(void *)uint64_t v41 = v43;
        *((void *)v41 + 1) = v44;
        v41[16] = v42[16];
        uint64_t v45 = *((void *)v42 + 4);
        *((void *)v41 + 3) = *((void *)v42 + 3);
        *((void *)v41 + 4) = v45;
        id v46 = v43;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v47 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v47;
        *((void *)v41 + 4) = *((void *)v42 + 4);
      }
      *(void *)&a1[v31[8]] = *(void *)&a2[v31[8]];
      uint64_t v48 = v31[9];
      id v49 = &a1[v48];
      long long v50 = &a2[v48];
      uint64_t v51 = v50[1];
      *id v49 = *v50;
      v49[1] = v51;
      a1[v31[10]] = a2[v31[10]];
      *(void *)&a1[v31[11]] = *(void *)&a2[v31[11]];
      uint64_t v52 = v31[12];
      unint64_t v53 = *(void **)&a2[v52];
      *(void *)&a1[v52] = v53;
      a1[v31[13]] = a2[v31[13]];
      uint64_t v54 = v31[14];
      uint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      uint64_t v57 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v58 = v53;
      if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v57))
      {
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v57);
      }
      uint64_t v60 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v61 = *(int *)(v60 + 20);
      uint64_t v62 = &v55[v61];
      uint64_t v63 = &v56[v61];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v56[v61], 1, v57))
      {
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v62, v63, v57);
        __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v57);
      }
      v55[*(int *)(v60 + 24)] = v56[*(int *)(v60 + 24)];
      a1[v31[15]] = a2[v31[15]];
      *(void *)&a1[v31[16]] = *(void *)&a2[v31[16]];
      uint64_t v65 = a3;
      uint64_t v66 = *(int *)(a3 + 24);
      a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
      uint64_t v67 = &a1[v66];
      uint64_t v68 = &a2[v66];
      type metadata accessor for ParticipantViewModel(0);
      swift_retain();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v145(v67, v68, v143);
        uint64_t v82 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
        uint64_t v83 = v82[5];
        uint64_t v84 = &v67[v83];
        uint64_t v85 = &v68[v83];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        *(void *)uint64_t v84 = v87;
        *((void *)v84 + 1) = v86;
        v67[v82[6]] = v68[v82[6]];
        v67[v82[7]] = v68[v82[7]];
        v67[v82[8]] = v68[v82[8]];
        v67[v82[9]] = v68[v82[9]];
        v67[v82[10]] = v68[v82[10]];
        v67[v82[11]] = v68[v82[11]];
        swift_bridgeObjectRetain();
        uint64_t v88 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                     + 48);
        uint64_t v89 = &v67[v88];
        uint64_t v90 = &v68[v88];
        uint64_t v91 = *(void **)&v68[v88];
        uint64_t v92 = *((void *)v90 + 1);
        *(void *)uint64_t v89 = v91;
        *((void *)v89 + 1) = v92;
        uint64_t v93 = *((void *)v90 + 3);
        *((void *)v89 + 2) = *((void *)v90 + 2);
        *((void *)v89 + 3) = v93;
        uint64_t v94 = *((void *)v90 + 5);
        *((void *)v89 + 4) = *((void *)v90 + 4);
        *((void *)v89 + 5) = v94;
        uint64_t v95 = *((void *)v90 + 7);
        *((void *)v89 + 6) = *((void *)v90 + 6);
        *((void *)v89 + 7) = v95;
        v89[64] = v90[64];
        v89[65] = v90[65];
        uint64_t v96 = *((void *)v90 + 10);
        id v97 = v91;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v96)
        {
          *((void *)v89 + 9) = *((void *)v90 + 9);
          *((void *)v89 + 10) = v96;
          uint64_t v98 = *((void *)v90 + 12);
          *((void *)v89 + 11) = *((void *)v90 + 11);
          *((void *)v89 + 12) = v98;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v116 = *(_OWORD *)(v90 + 88);
          *(_OWORD *)(v89 + 72) = *(_OWORD *)(v90 + 72);
          *(_OWORD *)(v89 + 88) = v116;
        }
        uint64_t v65 = a3;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v145(v67, v68, v143);
        uint64_t v70 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
        uint64_t v71 = v70[5];
        uint64_t v72 = &v67[v71];
        char v73 = &v68[v71];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        *(void *)uint64_t v72 = v75;
        *((void *)v72 + 1) = v74;
        v67[v70[6]] = v68[v70[6]];
        v67[v70[7]] = v68[v70[7]];
        v67[v70[8]] = v68[v70[8]];
        v67[v70[9]] = v68[v70[9]];
        v67[v70[10]] = v68[v70[10]];
        v67[v70[11]] = v68[v70[11]];
        swift_bridgeObjectRetain();
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
        uint64_t v77 = *(int *)(v76 + 48);
        uint64_t v78 = &v67[v77];
        uint64_t v79 = &v68[v77];
        uint64_t v80 = *(void *)&v68[v77 + 24];
        if (v80)
        {
          uint64_t v81 = *((void *)v79 + 4);
          *((void *)v78 + 3) = v80;
          *((void *)v78 + 4) = v81;
          (**(void (***)(char *, char *))(v80 - 8))(v78, v79);
        }
        else
        {
          long long v110 = *((_OWORD *)v79 + 1);
          *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
          *((_OWORD *)v78 + 1) = v110;
          *((void *)v78 + 4) = *((void *)v79 + 4);
        }
        memcpy(v78 + 40, v79 + 40, 0x84uLL);
        uint64_t v111 = *(int *)(v76 + 64);
        uint64_t v112 = &v67[v111];
        long long v113 = &v68[v111];
        switch(v113[104])
        {
          case 1:
            long long v114 = *(_OWORD *)(v113 + 24);
            *(_OWORD *)(v112 + 24) = v114;
            (**(void (***)(void *, char *))(v114 - 8))(v112, v113);
            uint64_t v115 = *((void *)v113 + 6);
            *((void *)v112 + 5) = *((void *)v113 + 5);
            *((void *)v112 + 6) = v115;
            v112[104] = 1;
            swift_bridgeObjectRetain();
            break;
          case 2:
            uint64_t v119 = *((void *)v113 + 1);
            *(void *)uint64_t v112 = *(void *)v113;
            *((void *)v112 + 1) = v119;
            long long v120 = (void *)*((void *)v113 + 3);
            *((void *)v112 + 2) = *((void *)v113 + 2);
            *((void *)v112 + 3) = v120;
            *((_WORD *)v112 + 16) = *((_WORD *)v113 + 16);
            *((void *)v112 + 5) = *((void *)v113 + 5);
            v112[48] = v113[48];
            id v121 = (void *)*((void *)v113 + 7);
            *((void *)v112 + 7) = v121;
            v112[104] = 2;
            swift_bridgeObjectRetain();
            id v122 = v120;
            id v123 = v121;
            uint64_t v65 = a3;
            break;
          case 3:
            uint64_t v124 = *((void *)v113 + 1);
            *(void *)uint64_t v112 = *(void *)v113;
            *((void *)v112 + 1) = v124;
            id v125 = (void *)*((void *)v113 + 3);
            *((void *)v112 + 2) = *((void *)v113 + 2);
            *((void *)v112 + 3) = v125;
            *((_WORD *)v112 + 16) = *((_WORD *)v113 + 16);
            *((void *)v112 + 5) = *((void *)v113 + 5);
            v112[48] = v113[48];
            uint64_t v127 = (void *)*((void *)v113 + 7);
            uint64_t v126 = *((void *)v113 + 8);
            *((void *)v112 + 7) = v127;
            *((void *)v112 + 8) = v126;
            uint64_t v128 = *((void *)v113 + 9);
            uint64_t v129 = (void *)*((void *)v113 + 10);
            *((void *)v112 + 9) = v128;
            *((void *)v112 + 10) = v129;
            v112[104] = 3;
            swift_bridgeObjectRetain();
            id v130 = v125;
            uint64_t v65 = a3;
            id v131 = v127;
            swift_bridgeObjectRetain();
            id v132 = v129;
            break;
          case 4:
            id v133 = *(void **)v113;
            uint64_t v134 = *((void *)v113 + 1);
            *(void *)uint64_t v112 = *(void *)v113;
            *((void *)v112 + 1) = v134;
            uint64_t v135 = *((void *)v113 + 3);
            *((void *)v112 + 2) = *((void *)v113 + 2);
            *((void *)v112 + 3) = v135;
            uint64_t v136 = *((void *)v113 + 5);
            *((void *)v112 + 4) = *((void *)v113 + 4);
            *((void *)v112 + 5) = v136;
            uint64_t v137 = *((void *)v113 + 7);
            *((void *)v112 + 6) = *((void *)v113 + 6);
            *((void *)v112 + 7) = v137;
            v112[64] = v113[64];
            v112[65] = v113[65];
            uint64_t v144 = *((void *)v113 + 10);
            id v138 = v133;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v144)
            {
              *((void *)v112 + 9) = *((void *)v113 + 9);
              *((void *)v112 + 10) = v144;
              uint64_t v139 = *((void *)v113 + 12);
              *((void *)v112 + 11) = *((void *)v113 + 11);
              *((void *)v112 + 12) = v139;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v142 = *(_OWORD *)(v113 + 88);
              *(_OWORD *)(v112 + 72) = *(_OWORD *)(v113 + 72);
              *(_OWORD *)(v112 + 88) = v142;
            }
            v112[104] = 4;
            break;
          case 5:
            uint64_t v140 = *(void **)v113;
            *(void *)uint64_t v112 = *(void *)v113;
            v112[104] = 5;
            id v141 = v140;
            break;
          default:
            memcpy(v112, v113, 0x69uLL);
            break;
        }
      }
      else
      {
        v145(v67, v68, v143);
        uint64_t v99 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
        uint64_t v100 = v99[5];
        uint64_t v101 = &v67[v100];
        uint64_t v102 = &v68[v100];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        *(void *)uint64_t v101 = v104;
        *((void *)v101 + 1) = v103;
        v67[v99[6]] = v68[v99[6]];
        v67[v99[7]] = v68[v99[7]];
        v67[v99[8]] = v68[v99[8]];
        v67[v99[9]] = v68[v99[9]];
        v67[v99[10]] = v68[v99[10]];
        v67[v99[11]] = v68[v99[11]];
        swift_bridgeObjectRetain();
        uint64_t v105 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                      + 48);
        uint64_t v106 = &v67[v105];
        uint64_t v107 = &v68[v105];
        uint64_t v108 = *((void *)v107 + 3);
        if (v108)
        {
          uint64_t v109 = *((void *)v107 + 4);
          *((void *)v106 + 3) = v108;
          *((void *)v106 + 4) = v109;
          (**(void (***)(char *, char *))(v108 - 8))(v106, v107);
        }
        else
        {
          long long v117 = *((_OWORD *)v107 + 1);
          *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
          *((_OWORD *)v106 + 1) = v117;
          *((void *)v106 + 4) = *((void *)v107 + 4);
        }
        memcpy(v106 + 40, v107 + 40, 0x84uLL);
      }
      swift_storeEnumTagMultiPayload();
      *(void *)&a1[*(int *)(v65 + 28)] = *(void *)&a2[*(int *)(v65 + 28)];
      return a1;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      goto LABEL_17;
  }
}

char *assignWithCopy for ParticipantViewRepresentableViewModel(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v6 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_17;
      case 4u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        *(_OWORD *)uint64_t v11 = *(_OWORD *)&a2[v10];
        *((void *)v11 + 2) = *(void *)&a2[v10 + 16];
        uint64_t v13 = *(void *)&a2[v10 + 24];
        *((_WORD *)v11 + 16) = *((_WORD *)v12 + 16);
        *((void *)v11 + 3) = v13;
        *((void *)v11 + 5) = *((void *)v12 + 5);
        v11[48] = v12[48];
        long long v14 = *(_OWORD *)(v12 + 72);
        long long v15 = *(_OWORD *)(v12 + 56);
        v11[88] = v12[88];
        *(_OWORD *)(v11 + 56) = v15;
        *(_OWORD *)(v11 + 72) = v14;
        v11[89] = v12[89];
        uint64_t v16 = *((void *)v12 + 15);
        swift_bridgeObjectRetain();
        if (v16)
        {
          if (v16 == 1)
          {
            size_t v17 = v11 + 96;
            long long v18 = v12 + 96;
            size_t v19 = 209;
            goto LABEL_11;
          }
          *((void *)v11 + 15) = v16;
          *((void *)v11 + 16) = *((void *)v12 + 16);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8))((uint64_t)(v11 + 96), (uint64_t)(v12 + 96), v16);
        }
        else
        {
          long long v20 = *((_OWORD *)v12 + 6);
          long long v21 = *((_OWORD *)v12 + 7);
          *((void *)v11 + 16) = *((void *)v12 + 16);
          *((_OWORD *)v11 + 6) = v20;
          *((_OWORD *)v11 + 7) = v21;
        }
        *((_DWORD *)v11 + 34) = *((_DWORD *)v12 + 34);
        *((void *)v11 + 18) = *((void *)v12 + 18);
        *((void *)v11 + 19) = *((void *)v12 + 19);
        long long v22 = *((_OWORD *)v12 + 10);
        long long v23 = *((_OWORD *)v12 + 11);
        v11[192] = v12[192];
        *((_OWORD *)v11 + 10) = v22;
        *((_OWORD *)v11 + 11) = v23;
        *((void *)v11 + 25) = *((void *)v12 + 25);
        size_t v17 = v11 + 208;
        long long v18 = v12 + 208;
        size_t v19 = 97;
LABEL_11:
        memcpy(v17, v18, v19);
        uint64_t v24 = *((void *)v12 + 39);
        if (v24)
        {
          uint64_t v25 = *((void *)v12 + 40);
          *((void *)v11 + 39) = v24;
          *((void *)v11 + 40) = v25;
          *((void *)v11 + 41) = *((void *)v12 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v26 = *(_OWORD *)(v12 + 312);
          *((void *)v11 + 41) = *((void *)v12 + 41);
          *(_OWORD *)(v11 + 312) = v26;
        }
        uint64_t v27 = *(int *)(v9 + 64);
        uint64_t v28 = &a1[v27];
        long long v29 = &a2[v27];
        if (*((void *)v29 + 1))
        {
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = *((void *)v29 + 1);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = *((void *)v29 + 3);
          v28[32] = v29[32];
          *((void *)v28 + 5) = *((void *)v29 + 5);
          *((void *)v28 + 6) = *((void *)v29 + 6);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v30 = *(_OWORD *)v29;
          long long v31 = *((_OWORD *)v29 + 1);
          long long v32 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v32;
          *(_OWORD *)uint64_t v28 = v30;
          *((_OWORD *)v28 + 1) = v31;
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  long long v33 = (int *)type metadata accessor for Participant(0);
  uint64_t v34 = v33[5];
  uint64_t v35 = &a1[v34];
  id v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v37 - 8);
  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
  uint64_t v39 = v33[6];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  v40[2] = v41[2];
  v40[3] = v41[3];
  void v40[4] = v41[4];
  uint64_t v42 = v33[7];
  uint64_t v43 = (uint64_t)&a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = *(void **)&a1[v42];
  id v46 = *(void **)&a2[v42];
  uint64_t v137 = v38;
  uint64_t v138 = v37;
  if (v45)
  {
    if (v46)
    {
      *(void *)uint64_t v43 = v46;
      id v47 = v46;

      uint64_t v48 = *((void *)v44 + 1);
      *(unsigned char *)(v43 + 16) = v44[16];
      *(void *)(v43 + 8) = v48;
      *(void *)(v43 + 24) = *((void *)v44 + 3);
      *(void *)(v43 + 32) = *((void *)v44 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Participant.RemoteIdentifiers(v43);
      uint64_t v51 = *((void *)v44 + 4);
      long long v52 = *((_OWORD *)v44 + 1);
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
      *(_OWORD *)(v43 + 16) = v52;
      *(void *)(v43 + 32) = v51;
    }
  }
  else if (v46)
  {
    *(void *)uint64_t v43 = v46;
    uint64_t v49 = *((void *)v44 + 1);
    *(unsigned char *)(v43 + 16) = v44[16];
    *(void *)(v43 + 8) = v49;
    *(void *)(v43 + 24) = *((void *)v44 + 3);
    *(void *)(v43 + 32) = *((void *)v44 + 4);
    id v50 = v46;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v53 = *(_OWORD *)v44;
    long long v54 = *((_OWORD *)v44 + 1);
    *(void *)(v43 + 32) = *((void *)v44 + 4);
    *(_OWORD *)uint64_t v43 = v53;
    *(_OWORD *)(v43 + 16) = v54;
  }
  *(void *)&a1[v33[8]] = *(void *)&a2[v33[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = v33[9];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  *(void *)uint64_t v56 = *(void *)v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v33[10]] = a2[v33[10]];
  *(void *)&a1[v33[11]] = *(void *)&a2[v33[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = v33[12];
  uint64_t v59 = *(void **)&a1[v58];
  uint64_t v60 = *(void **)&a2[v58];
  *(void *)&a1[v58] = v60;
  id v61 = v60;

  a1[v33[13]] = a2[v33[13]];
  uint64_t v62 = v33[14];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = type metadata accessor for Date();
  LODWORD(v59) = __swift_getEnumTagSinglePayload((uint64_t)v63, 1, v65);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v64, 1, v65);
  uint64_t v139 = a3;
  if (v59)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
      __swift_storeEnumTagSinglePayload((uint64_t)v63, 0, 1, v65);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v67 = *(void *)(v65 - 8);
  if (EnumTagSinglePayload)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v63, v65);
LABEL_30:
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v63, v64, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v63, v64, v65);
LABEL_31:
  uint64_t v69 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v70 = *(int *)(v69 + 20);
  uint64_t v71 = &v63[v70];
  uint64_t v72 = &v64[v70];
  int v73 = __swift_getEnumTagSinglePayload((uint64_t)&v63[v70], 1, v65);
  int v74 = __swift_getEnumTagSinglePayload((uint64_t)v72, 1, v65);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v71, v72, v65);
      __swift_storeEnumTagSinglePayload((uint64_t)v71, 0, 1, v65);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v75 = *(void *)(v65 - 8);
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v71, v65);
LABEL_36:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v71, v72, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v71, v72, v65);
LABEL_37:
  uint64_t v77 = v139;
  v63[*(int *)(v69 + 24)] = v64[*(int *)(v69 + 24)];
  a1[v33[15]] = a2[v33[15]];
  *(void *)&a1[v33[16]] = *(void *)&a2[v33[16]];
  swift_retain();
  swift_release();
  a1[*(int *)(v139 + 20)] = a2[*(int *)(v139 + 20)];
  if (a1 != a2)
  {
    uint64_t v78 = *(int *)(v139 + 24);
    uint64_t v79 = &a1[v78];
    uint64_t v80 = &a2[v78];
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)&a1[v78], (void (*)(void))type metadata accessor for ParticipantViewModel);
    type metadata accessor for ParticipantViewModel(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v79, v80, v138);
      uint64_t v91 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v92 = v91[5];
      uint64_t v93 = &v79[v92];
      uint64_t v94 = &v80[v92];
      *(void *)uint64_t v93 = *(void *)v94;
      *((void *)v93 + 1) = *((void *)v94 + 1);
      v79[v91[6]] = v80[v91[6]];
      v79[v91[7]] = v80[v91[7]];
      v79[v91[8]] = v80[v91[8]];
      v79[v91[9]] = v80[v91[9]];
      v79[v91[10]] = v80[v91[10]];
      v79[v91[11]] = v80[v91[11]];
      swift_bridgeObjectRetain();
      uint64_t v95 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
      uint64_t v96 = &v79[v95];
      id v97 = &v80[v95];
      uint64_t v98 = *(void **)&v80[v95];
      *(void *)uint64_t v96 = v98;
      *((void *)v96 + 1) = *((void *)v97 + 1);
      *((void *)v96 + 2) = *((void *)v97 + 2);
      *((void *)v96 + 3) = *((void *)v97 + 3);
      *((void *)v96 + 4) = *((void *)v97 + 4);
      *((void *)v96 + 5) = *((void *)v97 + 5);
      *((void *)v96 + 6) = *((void *)v97 + 6);
      *((void *)v96 + 7) = *((void *)v97 + 7);
      v96[64] = v97[64];
      v96[65] = v97[65];
      uint64_t v99 = *((void *)v97 + 10);
      id v100 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v99)
      {
        *((void *)v96 + 9) = *((void *)v97 + 9);
        *((void *)v96 + 10) = *((void *)v97 + 10);
        *((void *)v96 + 11) = *((void *)v97 + 11);
        *((void *)v96 + 12) = *((void *)v97 + 12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v115 = *(_OWORD *)(v97 + 88);
        *(_OWORD *)(v96 + 72) = *(_OWORD *)(v97 + 72);
        *(_OWORD *)(v96 + 88) = v115;
      }
      uint64_t v77 = v139;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v79, v80, v138);
      uint64_t v82 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v83 = v82[5];
      uint64_t v84 = &v79[v83];
      uint64_t v85 = &v80[v83];
      *(void *)uint64_t v84 = *(void *)v85;
      *((void *)v84 + 1) = *((void *)v85 + 1);
      v79[v82[6]] = v80[v82[6]];
      v79[v82[7]] = v80[v82[7]];
      v79[v82[8]] = v80[v82[8]];
      v79[v82[9]] = v80[v82[9]];
      v79[v82[10]] = v80[v82[10]];
      v79[v82[11]] = v80[v82[11]];
      swift_bridgeObjectRetain();
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      uint64_t v87 = *(int *)(v86 + 48);
      uint64_t v88 = &v79[v87];
      uint64_t v89 = &v80[v87];
      uint64_t v90 = *(void *)&v80[v87 + 24];
      if (v90)
      {
        *((void *)v88 + 3) = v90;
        *((void *)v88 + 4) = *((void *)v89 + 4);
        (**(void (***)(char *, char *))(v90 - 8))(v88, v89);
      }
      else
      {
        long long v109 = *(_OWORD *)v89;
        long long v110 = *((_OWORD *)v89 + 1);
        *((void *)v88 + 4) = *((void *)v89 + 4);
        *(_OWORD *)uint64_t v88 = v109;
        *((_OWORD *)v88 + 1) = v110;
      }
      memcpy(v88 + 40, v89 + 40, 0x84uLL);
      uint64_t v111 = *(int *)(v86 + 64);
      uint64_t v112 = &v79[v111];
      long long v113 = &v80[v111];
      switch(v113[104])
      {
        case 1:
          uint64_t v114 = *((void *)v113 + 3);
          *((void *)v112 + 3) = v114;
          *((void *)v112 + 4) = *((void *)v113 + 4);
          (**(void (***)(void *, char *))(v114 - 8))(v112, v113);
          *((void *)v112 + 5) = *((void *)v113 + 5);
          *((void *)v112 + 6) = *((void *)v113 + 6);
          v112[104] = 1;
          swift_bridgeObjectRetain();
          break;
        case 2:
          *(void *)uint64_t v112 = *(void *)v113;
          *((void *)v112 + 1) = *((void *)v113 + 1);
          *((void *)v112 + 2) = *((void *)v113 + 2);
          uint64_t v119 = (void *)*((void *)v113 + 3);
          *((void *)v112 + 3) = v119;
          v112[32] = v113[32];
          v112[33] = v113[33];
          uint64_t v120 = *((void *)v113 + 5);
          v112[48] = v113[48];
          *((void *)v112 + 5) = v120;
          id v121 = (void *)*((void *)v113 + 7);
          *((void *)v112 + 7) = v121;
          v112[104] = 2;
          swift_bridgeObjectRetain();
          id v122 = v119;
          id v123 = v121;
          break;
        case 3:
          *(void *)uint64_t v112 = *(void *)v113;
          *((void *)v112 + 1) = *((void *)v113 + 1);
          *((void *)v112 + 2) = *((void *)v113 + 2);
          uint64_t v124 = (void *)*((void *)v113 + 3);
          *((void *)v112 + 3) = v124;
          v112[32] = v113[32];
          v112[33] = v113[33];
          uint64_t v125 = *((void *)v113 + 5);
          v112[48] = v113[48];
          *((void *)v112 + 5) = v125;
          uint64_t v126 = (void *)*((void *)v113 + 7);
          *((void *)v112 + 7) = v126;
          *((void *)v112 + 8) = *((void *)v113 + 8);
          *((void *)v112 + 9) = *((void *)v113 + 9);
          uint64_t v127 = (void *)*((void *)v113 + 10);
          *((void *)v112 + 10) = v127;
          v112[104] = 3;
          swift_bridgeObjectRetain();
          id v128 = v124;
          id v129 = v126;
          swift_bridgeObjectRetain();
          id v130 = v127;
          break;
        case 4:
          id v131 = *(void **)v113;
          *(void *)uint64_t v112 = *(void *)v113;
          *((void *)v112 + 1) = *((void *)v113 + 1);
          *((void *)v112 + 2) = *((void *)v113 + 2);
          *((void *)v112 + 3) = *((void *)v113 + 3);
          *((void *)v112 + 4) = *((void *)v113 + 4);
          *((void *)v112 + 5) = *((void *)v113 + 5);
          *((void *)v112 + 6) = *((void *)v113 + 6);
          *((void *)v112 + 7) = *((void *)v113 + 7);
          v112[64] = v113[64];
          v112[65] = v113[65];
          uint64_t v132 = *((void *)v113 + 10);
          id v133 = v131;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v132)
          {
            *((void *)v112 + 9) = *((void *)v113 + 9);
            *((void *)v112 + 10) = *((void *)v113 + 10);
            *((void *)v112 + 11) = *((void *)v113 + 11);
            *((void *)v112 + 12) = *((void *)v113 + 12);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v136 = *(_OWORD *)(v113 + 88);
            *(_OWORD *)(v112 + 72) = *(_OWORD *)(v113 + 72);
            *(_OWORD *)(v112 + 88) = v136;
          }
          uint64_t v77 = v139;
          v112[104] = 4;
          break;
        case 5:
          uint64_t v134 = *(void **)v113;
          *(void *)uint64_t v112 = *(void *)v113;
          v112[104] = 5;
          id v135 = v134;
          break;
        default:
          memcpy(v112, v113, 0x69uLL);
          break;
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v79, v80, v138);
      uint64_t v101 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v102 = v101[5];
      uint64_t v103 = &v79[v102];
      uint64_t v104 = &v80[v102];
      *(void *)uint64_t v103 = *(void *)v104;
      *((void *)v103 + 1) = *((void *)v104 + 1);
      v79[v101[6]] = v80[v101[6]];
      v79[v101[7]] = v80[v101[7]];
      v79[v101[8]] = v80[v101[8]];
      v79[v101[9]] = v80[v101[9]];
      v79[v101[10]] = v80[v101[10]];
      v79[v101[11]] = v80[v101[11]];
      swift_bridgeObjectRetain();
      uint64_t v105 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                    + 48);
      uint64_t v106 = &v79[v105];
      uint64_t v107 = &v80[v105];
      uint64_t v108 = *(void *)&v80[v105 + 24];
      if (v108)
      {
        *((void *)v106 + 3) = v108;
        *((void *)v106 + 4) = *((void *)v107 + 4);
        (**(void (***)(char *, char *))(v108 - 8))(v106, v107);
      }
      else
      {
        long long v116 = *(_OWORD *)v107;
        long long v117 = *((_OWORD *)v107 + 1);
        *((void *)v106 + 4) = *((void *)v107 + 4);
        *(_OWORD *)uint64_t v106 = v116;
        *((_OWORD *)v106 + 1) = v117;
      }
      memcpy(v106 + 40, v107 + 40, 0x84uLL);
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(v77 + 28)] = *(void *)&a2[*(int *)(v77 + 28)];
  return a1;
}

uint64_t _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for ParticipantViewRepresentableViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      goto LABEL_5;
    case 4u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      memcpy(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], 0x150uLL);
      uint64_t v9 = *(int *)(v8 + 64);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      long long v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v12;
      long long v13 = *((_OWORD *)v11 + 3);
      *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
      *((_OWORD *)v10 + 3) = v13;
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  long long v15 = (int *)type metadata accessor for Participant(0);
  uint64_t v16 = v15[5];
  size_t v17 = &a1[v16];
  long long v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
  v51(v17, v18, v19);
  uint64_t v20 = v15[6];
  long long v21 = &a1[v20];
  long long v22 = &a2[v20];
  *(_DWORD *)long long v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  uint64_t v23 = v15[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((void *)v24 + 4) = *((void *)v25 + 4);
  *(void *)&a1[v15[8]] = *(void *)&a2[v15[8]];
  *(_OWORD *)&a1[v15[9]] = *(_OWORD *)&a2[v15[9]];
  a1[v15[10]] = a2[v15[10]];
  *(void *)&a1[v15[11]] = *(void *)&a2[v15[11]];
  *(void *)&a1[v15[12]] = *(void *)&a2[v15[12]];
  a1[v15[13]] = a2[v15[13]];
  uint64_t v27 = v15[14];
  uint64_t v28 = &a1[v27];
  long long v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for Date();
  long long v52 = a3;
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
  }
  uint64_t v32 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v34 = &v28[v33];
  uint64_t v35 = &v29[v33];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v29[v33], 1, v30))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v34, v35, v30);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, v30);
  }
  v28[*(int *)(v32 + 24)] = v29[*(int *)(v32 + 24)];
  a1[v15[15]] = a2[v15[15]];
  *(void *)&a1[v15[16]] = *(void *)&a2[v15[16]];
  uint64_t v37 = v52[6];
  a1[v52[5]] = a2[v52[5]];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  type metadata accessor for ParticipantViewModel(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v51(v38, v39, v19);
    id v47 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    *(_OWORD *)&v38[v47[5]] = *(_OWORD *)&v39[v47[5]];
    v38[v47[6]] = v39[v47[6]];
    v38[v47[7]] = v39[v47[7]];
    v38[v47[8]] = v39[v47[8]];
    v38[v47[9]] = v39[v47[9]];
    v38[v47[10]] = v39[v47[10]];
    v38[v47[11]] = v39[v47[11]];
    uint64_t v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                 + 48);
    uint64_t v44 = &v38[v48];
    uint64_t v45 = &v39[v48];
    size_t v46 = 104;
  }
  else
  {
    v51(v38, v39, v19);
    uint64_t v41 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    *(_OWORD *)&v38[v41[5]] = *(_OWORD *)&v39[v41[5]];
    v38[v41[6]] = v39[v41[6]];
    v38[v41[7]] = v39[v41[7]];
    v38[v41[8]] = v39[v41[8]];
    v38[v41[9]] = v39[v41[9]];
    v38[v41[10]] = v39[v41[10]];
    v38[v41[11]] = v39[v41[11]];
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      memcpy(&v38[*(int *)(v42 + 48)], &v39[*(int *)(v42 + 48)], 0xACuLL);
      uint64_t v43 = *(int *)(v42 + 64);
      uint64_t v44 = &v38[v43];
      uint64_t v45 = &v39[v43];
      size_t v46 = 105;
    }
    else
    {
      uint64_t v49 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      uint64_t v44 = &v38[v49];
      uint64_t v45 = &v39[v49];
      size_t v46 = 172;
    }
  }
  memcpy(v44, v45, v46);
  swift_storeEnumTagMultiPayload();
  *(void *)&a1[v52[7]] = *(void *)&a2[v52[7]];
  return a1;
}

char *assignWithTake for ParticipantViewRepresentableViewModel(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v5 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        goto LABEL_5;
      case 4u:
        uint64_t v6 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&a1[*(int *)(v7 + 48)], &a2[*(int *)(v7 + 48)], 0x150uLL);
        uint64_t v8 = *(int *)(v7 + 64);
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        long long v11 = *((_OWORD *)v10 + 1);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *((_OWORD *)v9 + 1) = v11;
        long long v12 = *((_OWORD *)v10 + 3);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
        *((_OWORD *)v9 + 3) = v12;
LABEL_5:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
        break;
    }
  }
  uint64_t v14 = (int *)type metadata accessor for Participant(0);
  uint64_t v15 = v14[5];
  uint64_t v16 = &a1[v15];
  size_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v18 - 8);
  uint64_t v67 = v18;
  (*(void (**)(char *, char *))(v66 + 40))(v16, v17);
  uint64_t v19 = v14[6];
  uint64_t v20 = &a1[v19];
  long long v21 = &a2[v19];
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  v20[3] = v21[3];
  v20[4] = v21[4];
  uint64_t v22 = v14[7];
  uint64_t v23 = (uint64_t)&a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void **)&a1[v22];
  if (v25)
  {
    if (*(void *)v24)
    {
      *(void *)uint64_t v23 = *(void *)v24;

      *(void *)(v23 + 8) = *((void *)v24 + 1);
      *(unsigned char *)(v23 + 16) = v24[16];
      uint64_t v26 = *((void *)v24 + 4);
      *(void *)(v23 + 24) = *((void *)v24 + 3);
      *(void *)(v23 + 32) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Participant.RemoteIdentifiers(v23);
  }
  long long v27 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v27;
  *(void *)(v23 + 32) = *((void *)v24 + 4);
LABEL_11:
  *(void *)&a1[v14[8]] = *(void *)&a2[v14[8]];
  swift_bridgeObjectRelease();
  uint64_t v28 = v14[9];
  long long v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)long long v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  a1[v14[10]] = a2[v14[10]];
  *(void *)&a1[v14[11]] = *(void *)&a2[v14[11]];
  swift_bridgeObjectRelease();
  uint64_t v33 = v14[12];
  uint64_t v34 = *(void **)&a1[v33];
  *(void *)&a1[v33] = *(void *)&a2[v33];

  a1[v14[13]] = a2[v14[13]];
  uint64_t v35 = v14[14];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v38 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v38);
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38);
  if (EnumTagSinglePayload)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v41 = *(void *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v38);
LABEL_16:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v36, v37, v38);
LABEL_17:
  uint64_t v43 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = &v36[v44];
  size_t v46 = &v37[v44];
  int v47 = __swift_getEnumTagSinglePayload((uint64_t)&v36[v44], 1, v38);
  int v48 = __swift_getEnumTagSinglePayload((uint64_t)v46, 1, v38);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v45, v46, v38);
      __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v38);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v49 = *(void *)(v38 - 8);
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v38);
LABEL_22:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v45, v46, v38);
LABEL_23:
  v36[*(int *)(v43 + 24)] = v37[*(int *)(v43 + 24)];
  a1[v14[15]] = a2[v14[15]];
  *(void *)&a1[v14[16]] = *(void *)&a2[v14[16]];
  swift_release();
  a1[a3[5]] = a2[a3[5]];
  if (a1 != a2)
  {
    uint64_t v51 = a3[6];
    long long v52 = &a1[v51];
    long long v53 = &a2[v51];
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)&a1[v51], (void (*)(void))type metadata accessor for ParticipantViewModel);
    type metadata accessor for ParticipantViewModel(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v52, v53, v67);
      id v61 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)&v52[v61[5]] = *(_OWORD *)&v53[v61[5]];
      v52[v61[6]] = v53[v61[6]];
      v52[v61[7]] = v53[v61[7]];
      v52[v61[8]] = v53[v61[8]];
      v52[v61[9]] = v53[v61[9]];
      v52[v61[10]] = v53[v61[10]];
      v52[v61[11]] = v53[v61[11]];
      uint64_t v62 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
      uint64_t v58 = &v52[v62];
      uint64_t v59 = &v53[v62];
      size_t v60 = 104;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v52, v53, v67);
      uint64_t v55 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)&v52[v55[5]] = *(_OWORD *)&v53[v55[5]];
      v52[v55[6]] = v53[v55[6]];
      v52[v55[7]] = v53[v55[7]];
      v52[v55[8]] = v53[v55[8]];
      v52[v55[9]] = v53[v55[9]];
      v52[v55[10]] = v53[v55[10]];
      v52[v55[11]] = v53[v55[11]];
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      memcpy(&v52[*(int *)(v56 + 48)], &v53[*(int *)(v56 + 48)], 0xACuLL);
      uint64_t v57 = *(int *)(v56 + 64);
      uint64_t v58 = &v52[v57];
      uint64_t v59 = &v53[v57];
      size_t v60 = 105;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v52, v53, v67);
      uint64_t v63 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)&v52[v63[5]] = *(_OWORD *)&v53[v63[5]];
      v52[v63[6]] = v53[v63[6]];
      v52[v63[7]] = v53[v63[7]];
      v52[v63[8]] = v53[v63[8]];
      v52[v63[9]] = v53[v63[9]];
      v52[v63[10]] = v53[v63[10]];
      v52[v63[11]] = v53[v63[11]];
      uint64_t v64 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      uint64_t v58 = &v52[v64];
      uint64_t v59 = &v53[v64];
      size_t v60 = 172;
    }
    memcpy(v58, v59, v60);
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantViewRepresentableViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3509F40);
}

uint64_t sub_1C3509F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    if (a2 == 254)
    {
      unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
      if (v10 >= 2) {
        return OUTLINED_FUNCTION_4_106(v10);
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = type metadata accessor for ParticipantViewModel(0);
    uint64_t v9 = a1 + *(int *)(a3 + 24);
  }
  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ParticipantViewRepresentableViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C350A004);
}

void sub_1C350A004()
{
  uint64_t v4 = OUTLINED_FUNCTION_30_6();
  type metadata accessor for Participant(v4);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v1;
  }
  else
  {
    if (v3 == 254)
    {
      *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
      return;
    }
    uint64_t v7 = type metadata accessor for ParticipantViewModel(0);
    uint64_t v8 = v1 + *(int *)(v2 + 24);
  }
  __swift_storeEnumTagSinglePayload(v8, v0, v0, v7);
}

uint64_t type metadata completion function for ParticipantViewRepresentableViewModel()
{
  uint64_t result = type metadata accessor for Participant(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ParticipantViewModel(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ParticipantViewRepresentable(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Participant.State(0);
    uint64_t v148 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_18;
      case 4u:
        uint64_t v10 = type metadata accessor for Date();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v12 = *(int *)(v11 + 48);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)a2 + v12);
        uint64_t v15 = *(void *)((char *)a2 + v12 + 16);
        uint64_t v16 = *(void *)((char *)a2 + v12 + 24);
        *((void *)v13 + 2) = v15;
        *((void *)v13 + 3) = v16;
        *((_WORD *)v13 + 16) = *((_WORD *)v14 + 16);
        *((void *)v13 + 5) = *((void *)v14 + 5);
        v13[48] = v14[48];
        *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
        v13[88] = v14[88];
        v13[89] = v14[89];
        uint64_t v17 = *((void *)v14 + 15);
        swift_bridgeObjectRetain();
        if (v17)
        {
          if (v17 == 1)
          {
            uint64_t v18 = v13 + 96;
            uint64_t v19 = v14 + 96;
            size_t v20 = 209;
            goto LABEL_12;
          }
          uint64_t v22 = *((void *)v14 + 16);
          *((void *)v13 + 15) = v17;
          *((void *)v13 + 16) = v22;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8))((uint64_t)(v13 + 96), (uint64_t)(v14 + 96), v17);
        }
        else
        {
          long long v21 = *((_OWORD *)v14 + 7);
          *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
          *((_OWORD *)v13 + 7) = v21;
          *((void *)v13 + 16) = *((void *)v14 + 16);
        }
        *((_DWORD *)v13 + 34) = *((_DWORD *)v14 + 34);
        long long v23 = *((_OWORD *)v14 + 10);
        *((_OWORD *)v13 + 9) = *((_OWORD *)v14 + 9);
        *((_OWORD *)v13 + 10) = v23;
        *((_OWORD *)v13 + 11) = *((_OWORD *)v14 + 11);
        v13[192] = v14[192];
        uint64_t v18 = v13 + 208;
        uint64_t v19 = v14 + 208;
        *((void *)v13 + 25) = *((void *)v14 + 25);
        size_t v20 = 97;
LABEL_12:
        memcpy(v18, v19, v20);
        uint64_t v24 = *((void *)v14 + 39);
        if (v24)
        {
          uint64_t v25 = *((void *)v14 + 40);
          uint64_t v26 = *((void *)v14 + 41);
          *((void *)v13 + 39) = v24;
          *((void *)v13 + 40) = v25;
          *((void *)v13 + 41) = v26;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
          *((void *)v13 + 41) = *((void *)v14 + 41);
        }
        uint64_t v27 = *(int *)(v11 + 64);
        uint64_t v28 = (char *)a1 + v27;
        long long v29 = (char *)a2 + v27;
        uint64_t v30 = *((void *)v29 + 1);
        if (v30)
        {
          *(void *)uint64_t v28 = *(void *)v29;
          *((void *)v28 + 1) = v30;
          uint64_t v31 = *((void *)v29 + 3);
          *((void *)v28 + 2) = *((void *)v29 + 2);
          *((void *)v28 + 3) = v31;
          v28[32] = v29[32];
          *(_OWORD *)(v28 + 40) = *(_OWORD *)(v29 + 40);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v32 = *((_OWORD *)v29 + 1);
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
          *((_OWORD *)v28 + 1) = v32;
          long long v33 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v33;
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
LABEL_19:
        uint64_t v34 = (int *)type metadata accessor for Participant(0);
        uint64_t v35 = v34[5];
        uint64_t v36 = (char *)a1 + v35;
        uint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = type metadata accessor for UUID();
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
        v39(v36, v37, v38);
        uint64_t v40 = v34[6];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        v41[4] = v42[4];
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        uint64_t v43 = v34[7];
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        size_t v46 = *(void **)v45;
        uint64_t v149 = v39;
        uint64_t v151 = v38;
        if (*(void *)v45)
        {
          uint64_t v47 = *((void *)v45 + 1);
          *(void *)uint64_t v44 = v46;
          *((void *)v44 + 1) = v47;
          v44[16] = v45[16];
          uint64_t v48 = *((void *)v45 + 4);
          *((void *)v44 + 3) = *((void *)v45 + 3);
          *((void *)v44 + 4) = v48;
          id v49 = v46;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v50 = *((_OWORD *)v45 + 1);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          *((_OWORD *)v44 + 1) = v50;
          *((void *)v44 + 4) = *((void *)v45 + 4);
        }
        *(void *)((char *)a1 + v34[8]) = *(void *)((char *)a2 + v34[8]);
        uint64_t v51 = v34[9];
        long long v52 = (void *)((char *)a1 + v51);
        long long v53 = (void *)((char *)a2 + v51);
        uint64_t v54 = v53[1];
        void *v52 = *v53;
        v52[1] = v54;
        *((unsigned char *)a1 + v34[10]) = *((unsigned char *)a2 + v34[10]);
        *(void *)((char *)a1 + v34[11]) = *(void *)((char *)a2 + v34[11]);
        uint64_t v55 = v34[12];
        uint64_t v56 = *(void **)((char *)a2 + v55);
        *(void *)((char *)a1 + v55) = v56;
        *((unsigned char *)a1 + v34[13]) = *((unsigned char *)a2 + v34[13]);
        uint64_t v57 = v34[14];
        uint64_t v58 = (char *)a1 + v57;
        uint64_t v59 = (char *)a2 + v57;
        uint64_t v60 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v61 = v56;
        if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v60))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
        }
        uint64_t v63 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v64 = *(int *)(v63 + 20);
        uint64_t v65 = &v58[v64];
        uint64_t v66 = &v59[v64];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v59[v64], 1, v60))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v65, v66, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v60);
        }
        v58[*(int *)(v63 + 24)] = v59[*(int *)(v63 + 24)];
        *((unsigned char *)a1 + v34[15]) = *((unsigned char *)a2 + v34[15]);
        *(void *)((char *)a1 + v34[16]) = *(void *)((char *)a2 + v34[16]);
        uint64_t v68 = (int *)type metadata accessor for ParticipantViewRepresentableViewModel(0);
        *((unsigned char *)a1 + v68[5]) = *((unsigned char *)a2 + v68[5]);
        uint64_t v69 = v68[6];
        uint64_t v70 = (char *)a1 + v69;
        uint64_t v71 = (char *)a2 + v69;
        type metadata accessor for ParticipantViewModel(0);
        swift_retain();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v147 = v68;
          v149(v70, v71, v151);
          uint64_t v85 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
          uint64_t v86 = v85[5];
          uint64_t v87 = &v70[v86];
          uint64_t v88 = &v71[v86];
          uint64_t v90 = *(void *)v88;
          uint64_t v89 = *((void *)v88 + 1);
          *(void *)uint64_t v87 = v90;
          *((void *)v87 + 1) = v89;
          v70[v85[6]] = v71[v85[6]];
          v70[v85[7]] = v71[v85[7]];
          v70[v85[8]] = v71[v85[8]];
          v70[v85[9]] = v71[v85[9]];
          v70[v85[10]] = v71[v85[10]];
          v70[v85[11]] = v71[v85[11]];
          swift_bridgeObjectRetain();
          uint64_t v91 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                       + 48);
          uint64_t v92 = &v70[v91];
          uint64_t v93 = &v71[v91];
          uint64_t v94 = *(void **)&v71[v91];
          uint64_t v95 = *((void *)v93 + 1);
          *(void *)uint64_t v92 = v94;
          *((void *)v92 + 1) = v95;
          uint64_t v96 = *((void *)v93 + 3);
          *((void *)v92 + 2) = *((void *)v93 + 2);
          *((void *)v92 + 3) = v96;
          uint64_t v97 = *((void *)v93 + 5);
          *((void *)v92 + 4) = *((void *)v93 + 4);
          *((void *)v92 + 5) = v97;
          uint64_t v98 = *((void *)v93 + 7);
          *((void *)v92 + 6) = *((void *)v93 + 6);
          *((void *)v92 + 7) = v98;
          v92[64] = v93[64];
          v92[65] = v93[65];
          uint64_t v99 = *((void *)v93 + 10);
          id v100 = v94;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v99)
          {
            *((void *)v92 + 9) = *((void *)v93 + 9);
            *((void *)v92 + 10) = v99;
            uint64_t v101 = *((void *)v93 + 12);
            *((void *)v92 + 11) = *((void *)v93 + 11);
            *((void *)v92 + 12) = v101;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v120 = *(_OWORD *)(v93 + 88);
            *(_OWORD *)(v92 + 72) = *(_OWORD *)(v93 + 72);
            *(_OWORD *)(v92 + 88) = v120;
          }
          uint64_t v112 = v148;
          uint64_t v68 = v147;
        }
        else if (EnumCaseMultiPayload == 1)
        {
          v149(v70, v71, v151);
          int v73 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
          uint64_t v74 = v73[5];
          uint64_t v75 = &v70[v74];
          uint64_t v76 = &v71[v74];
          uint64_t v78 = *(void *)v76;
          uint64_t v77 = *((void *)v76 + 1);
          *(void *)uint64_t v75 = v78;
          *((void *)v75 + 1) = v77;
          v70[v73[6]] = v71[v73[6]];
          v70[v73[7]] = v71[v73[7]];
          v70[v73[8]] = v71[v73[8]];
          v70[v73[9]] = v71[v73[9]];
          v70[v73[10]] = v71[v73[10]];
          v70[v73[11]] = v71[v73[11]];
          swift_bridgeObjectRetain();
          uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
          uint64_t v80 = *(int *)(v79 + 48);
          uint64_t v81 = &v70[v80];
          uint64_t v82 = &v71[v80];
          uint64_t v83 = *(void *)&v71[v80 + 24];
          if (v83)
          {
            uint64_t v84 = *((void *)v82 + 4);
            *((void *)v81 + 3) = v83;
            *((void *)v81 + 4) = v84;
            (**(void (***)(char *, char *))(v83 - 8))(v81, v82);
          }
          else
          {
            long long v114 = *((_OWORD *)v82 + 1);
            *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
            *((_OWORD *)v81 + 1) = v114;
            *((void *)v81 + 4) = *((void *)v82 + 4);
          }
          memcpy(v81 + 40, v82 + 40, 0x84uLL);
          uint64_t v115 = *(int *)(v79 + 64);
          long long v116 = &v70[v115];
          long long v117 = &v71[v115];
          switch(v117[104])
          {
            case 1:
              long long v118 = *(_OWORD *)(v117 + 24);
              *(_OWORD *)(v116 + 24) = v118;
              (**(void (***)(void *, char *))(v118 - 8))(v116, v117);
              uint64_t v119 = *((void *)v117 + 6);
              *((void *)v116 + 5) = *((void *)v117 + 5);
              *((void *)v116 + 6) = v119;
              v116[104] = 1;
              swift_bridgeObjectRetain();
              goto LABEL_49;
            case 2:
              uint64_t v122 = *((void *)v117 + 1);
              *(void *)long long v116 = *(void *)v117;
              *((void *)v116 + 1) = v122;
              id v123 = (void *)*((void *)v117 + 3);
              *((void *)v116 + 2) = *((void *)v117 + 2);
              *((void *)v116 + 3) = v123;
              *((_WORD *)v116 + 16) = *((_WORD *)v117 + 16);
              *((void *)v116 + 5) = *((void *)v117 + 5);
              v116[48] = v117[48];
              uint64_t v124 = (void *)*((void *)v117 + 7);
              *((void *)v116 + 7) = v124;
              v116[104] = 2;
              swift_bridgeObjectRetain();
              id v125 = v123;
              id v126 = v124;
              goto LABEL_49;
            case 3:
              uint64_t v127 = *((void *)v117 + 1);
              *(void *)long long v116 = *(void *)v117;
              *((void *)v116 + 1) = v127;
              id v128 = (void *)*((void *)v117 + 3);
              *((void *)v116 + 2) = *((void *)v117 + 2);
              *((void *)v116 + 3) = v128;
              *((_WORD *)v116 + 16) = *((_WORD *)v117 + 16);
              *((void *)v116 + 5) = *((void *)v117 + 5);
              v116[48] = v117[48];
              id v129 = v68;
              id v131 = (void *)*((void *)v117 + 7);
              uint64_t v130 = *((void *)v117 + 8);
              *((void *)v116 + 7) = v131;
              *((void *)v116 + 8) = v130;
              uint64_t v132 = (void *)*((void *)v117 + 10);
              *((void *)v116 + 9) = *((void *)v117 + 9);
              *((void *)v116 + 10) = v132;
              v116[104] = 3;
              swift_bridgeObjectRetain();
              id v133 = v128;
              id v134 = v131;
              uint64_t v68 = v129;
              swift_bridgeObjectRetain();
              id v135 = v132;
              uint64_t v112 = v148;
              break;
            case 4:
              long long v136 = *(void **)v117;
              uint64_t v137 = *((void *)v117 + 1);
              *(void *)long long v116 = *(void *)v117;
              *((void *)v116 + 1) = v137;
              uint64_t v138 = *((void *)v117 + 3);
              *((void *)v116 + 2) = *((void *)v117 + 2);
              *((void *)v116 + 3) = v138;
              uint64_t v139 = *((void *)v117 + 5);
              *((void *)v116 + 4) = *((void *)v117 + 4);
              *((void *)v116 + 5) = v139;
              uint64_t v140 = *((void *)v117 + 7);
              *((void *)v116 + 6) = *((void *)v117 + 6);
              *((void *)v116 + 7) = v140;
              v116[64] = v117[64];
              v116[65] = v117[65];
              uint64_t v150 = *((void *)v117 + 10);
              id v141 = v136;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v150)
              {
                *((void *)v116 + 9) = *((void *)v117 + 9);
                *((void *)v116 + 10) = v150;
                uint64_t v142 = *((void *)v117 + 12);
                *((void *)v116 + 11) = *((void *)v117 + 11);
                *((void *)v116 + 12) = v142;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v145 = *(_OWORD *)(v117 + 88);
                *(_OWORD *)(v116 + 72) = *(_OWORD *)(v117 + 72);
                *(_OWORD *)(v116 + 88) = v145;
              }
              uint64_t v112 = v148;
              v116[104] = 4;
              break;
            case 5:
              uint64_t v143 = *(void **)v117;
              *(void *)long long v116 = *(void *)v117;
              v116[104] = 5;
              id v144 = v143;
              goto LABEL_49;
            default:
              memcpy(v116, v117, 0x69uLL);
LABEL_49:
              uint64_t v112 = v148;
              break;
          }
        }
        else
        {
          v149(v70, v71, v151);
          uint64_t v102 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
          uint64_t v103 = v102[5];
          uint64_t v104 = &v70[v103];
          uint64_t v105 = &v71[v103];
          uint64_t v107 = *(void *)v105;
          uint64_t v106 = *((void *)v105 + 1);
          *(void *)uint64_t v104 = v107;
          *((void *)v104 + 1) = v106;
          v70[v102[6]] = v71[v102[6]];
          v70[v102[7]] = v71[v102[7]];
          v70[v102[8]] = v71[v102[8]];
          v70[v102[9]] = v71[v102[9]];
          v70[v102[10]] = v71[v102[10]];
          v70[v102[11]] = v71[v102[11]];
          swift_bridgeObjectRetain();
          uint64_t v108 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                        + 48);
          long long v109 = &v70[v108];
          long long v110 = &v71[v108];
          uint64_t v111 = *((void *)v110 + 3);
          uint64_t v112 = v148;
          if (v111)
          {
            uint64_t v113 = *((void *)v110 + 4);
            *((void *)v109 + 3) = v111;
            *((void *)v109 + 4) = v113;
            (**(void (***)(char *, char *))(v111 - 8))(v109, v110);
          }
          else
          {
            long long v121 = *((_OWORD *)v110 + 1);
            *(_OWORD *)long long v109 = *(_OWORD *)v110;
            *((_OWORD *)v109 + 1) = v121;
            *((void *)v109 + 4) = *((void *)v110 + 4);
          }
          memcpy(v109 + 40, v110 + 40, 0x84uLL);
        }
        swift_storeEnumTagMultiPayload();
        *(void *)((char *)a1 + v68[7]) = *(void *)((char *)a2 + v68[7]);
        *((unsigned char *)a1 + *(int *)(v112 + 20)) = *((unsigned char *)a2 + *(int *)(v112 + 20));
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_19;
    }
  }
  return a1;
}

void destroy for ParticipantViewRepresentable(uint64_t a1)
{
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v2 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      break;
    case 4u:
      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v19 = a1 + *(int *)(v18 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v19 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v19 + 96);
      }
      if (*(void *)(v19 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + *(int *)(v18 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  int v3 = (int *)type metadata accessor for Participant(0);
  uint64_t v4 = a1 + v3[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = (id *)(a1 + v3[7]);
  if (*v7)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = a1 + v3[14];
  uint64_t v9 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = v8 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v10, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v10, v9);
  }
  swift_release();
  uint64_t v11 = a1 + *(int *)(type metadata accessor for ParticipantViewRepresentableViewModel(0) + 24);
  type metadata accessor for ParticipantViewModel(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v6(v11, v5);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v16 = v11
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
LABEL_21:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v16 + 80))
      {
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
      }
      break;
    case 1:
      v6(v11, v5);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      uint64_t v15 = v11 + *(int *)(v14 + 48);
      if (*(void *)(v15 + 24)) {
        __swift_destroy_boxed_opaque_existential_1(v15);
      }
      uint64_t v16 = v11 + *(int *)(v14 + 64);
      switch(*(unsigned char *)(v16 + 104))
      {
        case 1:
          __swift_destroy_boxed_opaque_existential_1(v16);
          goto LABEL_23;
        case 2:
          swift_bridgeObjectRelease();

          id v20 = *(id *)(v16 + 56);
          goto LABEL_36;
        case 3:
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          id v20 = *(id *)(v16 + 80);
          goto LABEL_36;
        case 4:
          goto LABEL_21;
        case 5:
          id v20 = *(id *)v16;
LABEL_36:

          break;
        default:
          return;
      }
      break;
    case 0:
      v6(v11, v5);
      type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      swift_bridgeObjectRelease();
      uint64_t v13 = v11
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      if (*(void *)(v13 + 24))
      {
        __swift_destroy_boxed_opaque_existential_1(v13);
      }
      break;
  }
}

unsigned char *initializeWithCopy for ParticipantViewRepresentable(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant.State(0);
  uint64_t v146 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_16;
    case 4u:
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v10 = *(int *)(v9 + 48);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      *(_OWORD *)uint64_t v11 = *(_OWORD *)&a2[v10];
      uint64_t v13 = *(void *)&a2[v10 + 16];
      uint64_t v14 = *(void *)&a2[v10 + 24];
      *((void *)v11 + 2) = v13;
      *((void *)v11 + 3) = v14;
      *((_WORD *)v11 + 16) = *((_WORD *)v12 + 16);
      *((void *)v11 + 5) = *((void *)v12 + 5);
      v11[48] = v12[48];
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
      *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
      v11[88] = v12[88];
      v11[89] = v12[89];
      uint64_t v15 = *((void *)v12 + 15);
      swift_bridgeObjectRetain();
      if (v15)
      {
        if (v15 == 1)
        {
          uint64_t v16 = v11 + 96;
          uint64_t v17 = v12 + 96;
          size_t v18 = 209;
          goto LABEL_10;
        }
        uint64_t v20 = *((void *)v12 + 16);
        *((void *)v11 + 15) = v15;
        *((void *)v11 + 16) = v20;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8))((uint64_t)(v11 + 96), (uint64_t)(v12 + 96), v15);
      }
      else
      {
        long long v19 = *((_OWORD *)v12 + 7);
        *((_OWORD *)v11 + 6) = *((_OWORD *)v12 + 6);
        *((_OWORD *)v11 + 7) = v19;
        *((void *)v11 + 16) = *((void *)v12 + 16);
      }
      *((_DWORD *)v11 + 34) = *((_DWORD *)v12 + 34);
      long long v21 = *((_OWORD *)v12 + 10);
      *((_OWORD *)v11 + 9) = *((_OWORD *)v12 + 9);
      *((_OWORD *)v11 + 10) = v21;
      *((_OWORD *)v11 + 11) = *((_OWORD *)v12 + 11);
      v11[192] = v12[192];
      uint64_t v16 = v11 + 208;
      uint64_t v17 = v12 + 208;
      *((void *)v11 + 25) = *((void *)v12 + 25);
      size_t v18 = 97;
LABEL_10:
      memcpy(v16, v17, v18);
      uint64_t v22 = *((void *)v12 + 39);
      if (v22)
      {
        uint64_t v23 = *((void *)v12 + 40);
        uint64_t v24 = *((void *)v12 + 41);
        *((void *)v11 + 39) = v22;
        *((void *)v11 + 40) = v23;
        *((void *)v11 + 41) = v24;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v11 + 312) = *(_OWORD *)(v12 + 312);
        *((void *)v11 + 41) = *((void *)v12 + 41);
      }
      uint64_t v25 = *(int *)(v9 + 64);
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      uint64_t v28 = *((void *)v27 + 1);
      if (v28)
      {
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v28;
        uint64_t v29 = *((void *)v27 + 3);
        *((void *)v26 + 2) = *((void *)v27 + 2);
        *((void *)v26 + 3) = v29;
        v26[32] = v27[32];
        *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
        *((void *)v26 + 7) = *((void *)v27 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v30 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v30;
        long long v31 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v31;
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_17:
      long long v32 = (int *)type metadata accessor for Participant(0);
      uint64_t v33 = v32[5];
      uint64_t v34 = &a1[v33];
      uint64_t v35 = &a2[v33];
      uint64_t v36 = type metadata accessor for UUID();
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
      v37(v34, v35, v36);
      uint64_t v38 = v32[6];
      uint64_t v39 = &a1[v38];
      uint64_t v40 = &a2[v38];
      v39[4] = v40[4];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
      uint64_t v41 = v32[7];
      uint64_t v42 = &a1[v41];
      uint64_t v43 = &a2[v41];
      uint64_t v44 = *(void **)v43;
      uint64_t v147 = v37;
      uint64_t v148 = v36;
      if (*(void *)v43)
      {
        uint64_t v45 = *((void *)v43 + 1);
        *(void *)uint64_t v42 = v44;
        *((void *)v42 + 1) = v45;
        v42[16] = v43[16];
        uint64_t v46 = *((void *)v43 + 4);
        *((void *)v42 + 3) = *((void *)v43 + 3);
        *((void *)v42 + 4) = v46;
        id v47 = v44;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v48 = *((_OWORD *)v43 + 1);
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
        *((_OWORD *)v42 + 1) = v48;
        *((void *)v42 + 4) = *((void *)v43 + 4);
      }
      *(void *)&a1[v32[8]] = *(void *)&a2[v32[8]];
      uint64_t v49 = v32[9];
      long long v50 = &a1[v49];
      uint64_t v51 = &a2[v49];
      uint64_t v52 = v51[1];
      *long long v50 = *v51;
      v50[1] = v52;
      a1[v32[10]] = a2[v32[10]];
      *(void *)&a1[v32[11]] = *(void *)&a2[v32[11]];
      uint64_t v53 = v32[12];
      uint64_t v54 = *(void **)&a2[v53];
      *(void *)&a1[v53] = v54;
      a1[v32[13]] = a2[v32[13]];
      uint64_t v55 = v32[14];
      uint64_t v56 = &a1[v55];
      uint64_t v57 = &a2[v55];
      uint64_t v58 = type metadata accessor for Date();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v59 = v54;
      if (__swift_getEnumTagSinglePayload((uint64_t)v57, 1, v58))
      {
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
        __swift_storeEnumTagSinglePayload((uint64_t)v56, 0, 1, v58);
      }
      uint64_t v61 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v62 = *(int *)(v61 + 20);
      uint64_t v63 = &v56[v62];
      uint64_t v64 = &v57[v62];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v57[v62], 1, v58))
      {
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v63, v64, v58);
        __swift_storeEnumTagSinglePayload((uint64_t)v63, 0, 1, v58);
      }
      v56[*(int *)(v61 + 24)] = v57[*(int *)(v61 + 24)];
      a1[v32[15]] = a2[v32[15]];
      *(void *)&a1[v32[16]] = *(void *)&a2[v32[16]];
      uint64_t v66 = (int *)type metadata accessor for ParticipantViewRepresentableViewModel(0);
      a1[v66[5]] = a2[v66[5]];
      uint64_t v67 = v66[6];
      uint64_t v68 = &a1[v67];
      uint64_t v69 = &a2[v67];
      type metadata accessor for ParticipantViewModel(0);
      swift_retain();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        long long v145 = v66;
        v147(v68, v69, v148);
        uint64_t v83 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
        uint64_t v84 = v83[5];
        uint64_t v85 = &v68[v84];
        uint64_t v86 = &v69[v84];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        *(void *)uint64_t v85 = v88;
        *((void *)v85 + 1) = v87;
        v68[v83[6]] = v69[v83[6]];
        v68[v83[7]] = v69[v83[7]];
        v68[v83[8]] = v69[v83[8]];
        v68[v83[9]] = v69[v83[9]];
        v68[v83[10]] = v69[v83[10]];
        v68[v83[11]] = v69[v83[11]];
        swift_bridgeObjectRetain();
        uint64_t v89 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                     + 48);
        uint64_t v90 = &v68[v89];
        uint64_t v91 = &v69[v89];
        uint64_t v92 = *(void **)&v69[v89];
        uint64_t v93 = *((void *)v91 + 1);
        *(void *)uint64_t v90 = v92;
        *((void *)v90 + 1) = v93;
        uint64_t v94 = *((void *)v91 + 3);
        *((void *)v90 + 2) = *((void *)v91 + 2);
        *((void *)v90 + 3) = v94;
        uint64_t v95 = *((void *)v91 + 5);
        *((void *)v90 + 4) = *((void *)v91 + 4);
        *((void *)v90 + 5) = v95;
        uint64_t v96 = *((void *)v91 + 7);
        *((void *)v90 + 6) = *((void *)v91 + 6);
        *((void *)v90 + 7) = v96;
        v90[64] = v91[64];
        v90[65] = v91[65];
        uint64_t v97 = *((void *)v91 + 10);
        id v98 = v92;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v97)
        {
          *((void *)v90 + 9) = *((void *)v91 + 9);
          *((void *)v90 + 10) = v97;
          uint64_t v99 = *((void *)v91 + 12);
          *((void *)v90 + 11) = *((void *)v91 + 11);
          *((void *)v90 + 12) = v99;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v118 = *(_OWORD *)(v91 + 88);
          *(_OWORD *)(v90 + 72) = *(_OWORD *)(v91 + 72);
          *(_OWORD *)(v90 + 88) = v118;
        }
        uint64_t v110 = v146;
        uint64_t v66 = v145;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v147(v68, v69, v148);
        uint64_t v71 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
        uint64_t v72 = v71[5];
        int v73 = &v68[v72];
        uint64_t v74 = &v69[v72];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        *(void *)int v73 = v76;
        *((void *)v73 + 1) = v75;
        v68[v71[6]] = v69[v71[6]];
        v68[v71[7]] = v69[v71[7]];
        v68[v71[8]] = v69[v71[8]];
        v68[v71[9]] = v69[v71[9]];
        v68[v71[10]] = v69[v71[10]];
        v68[v71[11]] = v69[v71[11]];
        swift_bridgeObjectRetain();
        uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
        uint64_t v78 = *(int *)(v77 + 48);
        uint64_t v79 = &v68[v78];
        uint64_t v80 = &v69[v78];
        uint64_t v81 = *(void *)&v69[v78 + 24];
        if (v81)
        {
          uint64_t v82 = *((void *)v80 + 4);
          *((void *)v79 + 3) = v81;
          *((void *)v79 + 4) = v82;
          (**(void (***)(char *, char *))(v81 - 8))(v79, v80);
        }
        else
        {
          long long v112 = *((_OWORD *)v80 + 1);
          *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
          *((_OWORD *)v79 + 1) = v112;
          *((void *)v79 + 4) = *((void *)v80 + 4);
        }
        memcpy(v79 + 40, v80 + 40, 0x84uLL);
        uint64_t v113 = *(int *)(v77 + 64);
        long long v114 = &v68[v113];
        uint64_t v115 = &v69[v113];
        switch(v115[104])
        {
          case 1:
            long long v116 = *(_OWORD *)(v115 + 24);
            *(_OWORD *)(v114 + 24) = v116;
            (**(void (***)(void *, char *))(v116 - 8))(v114, v115);
            uint64_t v117 = *((void *)v115 + 6);
            *((void *)v114 + 5) = *((void *)v115 + 5);
            *((void *)v114 + 6) = v117;
            v114[104] = 1;
            swift_bridgeObjectRetain();
            goto LABEL_47;
          case 2:
            uint64_t v120 = *((void *)v115 + 1);
            *(void *)long long v114 = *(void *)v115;
            *((void *)v114 + 1) = v120;
            long long v121 = (void *)*((void *)v115 + 3);
            *((void *)v114 + 2) = *((void *)v115 + 2);
            *((void *)v114 + 3) = v121;
            *((_WORD *)v114 + 16) = *((_WORD *)v115 + 16);
            *((void *)v114 + 5) = *((void *)v115 + 5);
            v114[48] = v115[48];
            uint64_t v122 = (void *)*((void *)v115 + 7);
            *((void *)v114 + 7) = v122;
            v114[104] = 2;
            swift_bridgeObjectRetain();
            id v123 = v121;
            id v124 = v122;
            goto LABEL_47;
          case 3:
            uint64_t v125 = *((void *)v115 + 1);
            *(void *)long long v114 = *(void *)v115;
            *((void *)v114 + 1) = v125;
            id v126 = (void *)*((void *)v115 + 3);
            *((void *)v114 + 2) = *((void *)v115 + 2);
            *((void *)v114 + 3) = v126;
            *((_WORD *)v114 + 16) = *((_WORD *)v115 + 16);
            *((void *)v114 + 5) = *((void *)v115 + 5);
            v114[48] = v115[48];
            uint64_t v127 = v66;
            id v129 = (void *)*((void *)v115 + 7);
            uint64_t v128 = *((void *)v115 + 8);
            *((void *)v114 + 7) = v129;
            *((void *)v114 + 8) = v128;
            uint64_t v130 = (void *)*((void *)v115 + 10);
            *((void *)v114 + 9) = *((void *)v115 + 9);
            *((void *)v114 + 10) = v130;
            v114[104] = 3;
            swift_bridgeObjectRetain();
            id v131 = v126;
            id v132 = v129;
            uint64_t v66 = v127;
            swift_bridgeObjectRetain();
            id v133 = v130;
            uint64_t v110 = v146;
            break;
          case 4:
            id v134 = *(void **)v115;
            uint64_t v135 = *((void *)v115 + 1);
            *(void *)long long v114 = *(void *)v115;
            *((void *)v114 + 1) = v135;
            uint64_t v136 = *((void *)v115 + 3);
            *((void *)v114 + 2) = *((void *)v115 + 2);
            *((void *)v114 + 3) = v136;
            uint64_t v137 = *((void *)v115 + 5);
            *((void *)v114 + 4) = *((void *)v115 + 4);
            *((void *)v114 + 5) = v137;
            uint64_t v138 = *((void *)v115 + 7);
            *((void *)v114 + 6) = *((void *)v115 + 6);
            *((void *)v114 + 7) = v138;
            v114[64] = v115[64];
            v114[65] = v115[65];
            uint64_t v149 = *((void *)v115 + 10);
            id v139 = v134;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v149)
            {
              *((void *)v114 + 9) = *((void *)v115 + 9);
              *((void *)v114 + 10) = v149;
              uint64_t v140 = *((void *)v115 + 12);
              *((void *)v114 + 11) = *((void *)v115 + 11);
              *((void *)v114 + 12) = v140;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v143 = *(_OWORD *)(v115 + 88);
              *(_OWORD *)(v114 + 72) = *(_OWORD *)(v115 + 72);
              *(_OWORD *)(v114 + 88) = v143;
            }
            uint64_t v110 = v146;
            v114[104] = 4;
            break;
          case 5:
            id v141 = *(void **)v115;
            *(void *)long long v114 = *(void *)v115;
            v114[104] = 5;
            id v142 = v141;
            goto LABEL_47;
          default:
            memcpy(v114, v115, 0x69uLL);
LABEL_47:
            uint64_t v110 = v146;
            break;
        }
      }
      else
      {
        v147(v68, v69, v148);
        id v100 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
        uint64_t v101 = v100[5];
        uint64_t v102 = &v68[v101];
        uint64_t v103 = &v69[v101];
        uint64_t v105 = *(void *)v103;
        uint64_t v104 = *((void *)v103 + 1);
        *(void *)uint64_t v102 = v105;
        *((void *)v102 + 1) = v104;
        v68[v100[6]] = v69[v100[6]];
        v68[v100[7]] = v69[v100[7]];
        v68[v100[8]] = v69[v100[8]];
        v68[v100[9]] = v69[v100[9]];
        v68[v100[10]] = v69[v100[10]];
        v68[v100[11]] = v69[v100[11]];
        swift_bridgeObjectRetain();
        uint64_t v106 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                      + 48);
        uint64_t v107 = &v68[v106];
        uint64_t v108 = &v69[v106];
        uint64_t v109 = *((void *)v108 + 3);
        uint64_t v110 = v146;
        if (v109)
        {
          uint64_t v111 = *((void *)v108 + 4);
          *((void *)v107 + 3) = v109;
          *((void *)v107 + 4) = v111;
          (**(void (***)(char *, char *))(v109 - 8))(v107, v108);
        }
        else
        {
          long long v119 = *((_OWORD *)v108 + 1);
          *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
          *((_OWORD *)v107 + 1) = v119;
          *((void *)v107 + 4) = *((void *)v108 + 4);
        }
        memcpy(v107 + 40, v108 + 40, 0x84uLL);
      }
      swift_storeEnumTagMultiPayload();
      *(void *)&a1[v66[7]] = *(void *)&a2[v66[7]];
      a1[*(int *)(v110 + 20)] = a2[*(int *)(v110 + 20)];
      return a1;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_17;
  }
}

char *assignWithCopy for ParticipantViewRepresentable(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v5 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v6 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_17;
      case 4u:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v9 = *(int *)(v8 + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        *(_OWORD *)uint64_t v10 = *(_OWORD *)&a2[v9];
        *((void *)v10 + 2) = *(void *)&a2[v9 + 16];
        uint64_t v12 = *(void *)&a2[v9 + 24];
        *((_WORD *)v10 + 16) = *((_WORD *)v11 + 16);
        *((void *)v10 + 3) = v12;
        *((void *)v10 + 5) = *((void *)v11 + 5);
        v10[48] = v11[48];
        long long v13 = *(_OWORD *)(v11 + 72);
        long long v14 = *(_OWORD *)(v11 + 56);
        v10[88] = v11[88];
        *(_OWORD *)(v10 + 56) = v14;
        *(_OWORD *)(v10 + 72) = v13;
        v10[89] = v11[89];
        uint64_t v15 = *((void *)v11 + 15);
        swift_bridgeObjectRetain();
        if (v15)
        {
          if (v15 == 1)
          {
            uint64_t v16 = v10 + 96;
            uint64_t v17 = v11 + 96;
            size_t v18 = 209;
            goto LABEL_11;
          }
          *((void *)v10 + 15) = v15;
          *((void *)v10 + 16) = *((void *)v11 + 16);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8))((uint64_t)(v10 + 96), (uint64_t)(v11 + 96), v15);
        }
        else
        {
          long long v19 = *((_OWORD *)v11 + 6);
          long long v20 = *((_OWORD *)v11 + 7);
          *((void *)v10 + 16) = *((void *)v11 + 16);
          *((_OWORD *)v10 + 6) = v19;
          *((_OWORD *)v10 + 7) = v20;
        }
        *((_DWORD *)v10 + 34) = *((_DWORD *)v11 + 34);
        *((void *)v10 + 18) = *((void *)v11 + 18);
        *((void *)v10 + 19) = *((void *)v11 + 19);
        long long v21 = *((_OWORD *)v11 + 10);
        long long v22 = *((_OWORD *)v11 + 11);
        v10[192] = v11[192];
        *((_OWORD *)v10 + 10) = v21;
        *((_OWORD *)v10 + 11) = v22;
        *((void *)v10 + 25) = *((void *)v11 + 25);
        uint64_t v16 = v10 + 208;
        uint64_t v17 = v11 + 208;
        size_t v18 = 97;
LABEL_11:
        memcpy(v16, v17, v18);
        uint64_t v23 = *((void *)v11 + 39);
        if (v23)
        {
          uint64_t v24 = *((void *)v11 + 40);
          *((void *)v10 + 39) = v23;
          *((void *)v10 + 40) = v24;
          *((void *)v10 + 41) = *((void *)v11 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v25 = *(_OWORD *)(v11 + 312);
          *((void *)v10 + 41) = *((void *)v11 + 41);
          *(_OWORD *)(v10 + 312) = v25;
        }
        uint64_t v26 = *(int *)(v8 + 64);
        uint64_t v27 = &a1[v26];
        uint64_t v28 = &a2[v26];
        if (*((void *)v28 + 1))
        {
          *(void *)uint64_t v27 = *(void *)v28;
          *((void *)v27 + 1) = *((void *)v28 + 1);
          *((void *)v27 + 2) = *((void *)v28 + 2);
          *((void *)v27 + 3) = *((void *)v28 + 3);
          v27[32] = v28[32];
          *((void *)v27 + 5) = *((void *)v28 + 5);
          *((void *)v27 + 6) = *((void *)v28 + 6);
          *((void *)v27 + 7) = *((void *)v28 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v29 = *(_OWORD *)v28;
          long long v30 = *((_OWORD *)v28 + 1);
          long long v31 = *((_OWORD *)v28 + 3);
          *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
          *((_OWORD *)v27 + 3) = v31;
          *(_OWORD *)uint64_t v27 = v29;
          *((_OWORD *)v27 + 1) = v30;
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
        break;
    }
  }
  long long v32 = (int *)type metadata accessor for Participant(0);
  uint64_t v33 = v32[5];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v36 - 8);
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v34, v35, v36);
  uint64_t v38 = v32[6];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  uint64_t v39[2] = v40[2];
  v39[3] = v40[3];
  v39[4] = v40[4];
  uint64_t v41 = v32[7];
  uint64_t v42 = (uint64_t)&a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v44 = *(void **)&a1[v41];
  uint64_t v45 = *(void **)&a2[v41];
  uint64_t v139 = v36;
  if (v44)
  {
    if (v45)
    {
      *(void *)uint64_t v42 = v45;
      id v46 = v45;

      uint64_t v47 = *((void *)v43 + 1);
      *(unsigned char *)(v42 + 16) = v43[16];
      *(void *)(v42 + 8) = v47;
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      *(void *)(v42 + 32) = *((void *)v43 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Participant.RemoteIdentifiers(v42);
      uint64_t v50 = *((void *)v43 + 4);
      long long v51 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v51;
      *(void *)(v42 + 32) = v50;
    }
  }
  else if (v45)
  {
    *(void *)uint64_t v42 = v45;
    uint64_t v48 = *((void *)v43 + 1);
    *(unsigned char *)(v42 + 16) = v43[16];
    *(void *)(v42 + 8) = v48;
    *(void *)(v42 + 24) = *((void *)v43 + 3);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    id v49 = v45;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)v43;
    long long v53 = *((_OWORD *)v43 + 1);
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    *(_OWORD *)uint64_t v42 = v52;
    *(_OWORD *)(v42 + 16) = v53;
  }
  *(void *)&a1[v32[8]] = *(void *)&a2[v32[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v32[9];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v32[10]] = a2[v32[10]];
  *(void *)&a1[v32[11]] = *(void *)&a2[v32[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v32[12];
  uint64_t v58 = *(void **)&a1[v57];
  id v59 = *(void **)&a2[v57];
  *(void *)&a1[v57] = v59;
  id v60 = v59;

  a1[v32[13]] = a2[v32[13]];
  uint64_t v61 = v32[14];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v64 = type metadata accessor for Date();
  LODWORD(v58) = __swift_getEnumTagSinglePayload((uint64_t)v62, 1, v64);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v63, 1, v64);
  uint64_t v137 = v37;
  if (v58)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v64);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v66 = *(void *)(v64 - 8);
  if (EnumTagSinglePayload)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v64);
LABEL_30:
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v66 + 24))(v62, v63, v64);
LABEL_31:
  uint64_t v68 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v69 = *(int *)(v68 + 20);
  uint64_t v70 = &v62[v69];
  uint64_t v71 = &v63[v69];
  int v72 = __swift_getEnumTagSinglePayload((uint64_t)&v62[v69], 1, v64);
  int v73 = __swift_getEnumTagSinglePayload((uint64_t)v71, 1, v64);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v70, v71, v64);
      __swift_storeEnumTagSinglePayload((uint64_t)v70, 0, 1, v64);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v74 = *(void *)(v64 - 8);
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v70, v64);
LABEL_36:
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v70, v71, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 24))(v70, v71, v64);
LABEL_37:
  v62[*(int *)(v68 + 24)] = v63[*(int *)(v68 + 24)];
  a1[v32[15]] = a2[v32[15]];
  *(void *)&a1[v32[16]] = *(void *)&a2[v32[16]];
  swift_retain();
  swift_release();
  uint64_t v76 = type metadata accessor for ParticipantViewRepresentableViewModel(0);
  uint64_t v77 = v76;
  a1[*(int *)(v76 + 20)] = a2[*(int *)(v76 + 20)];
  if (a1 != a2)
  {
    uint64_t v78 = *(int *)(v76 + 24);
    uint64_t v79 = &a1[v78];
    uint64_t v80 = &a2[v78];
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)&a1[v78], (void (*)(void))type metadata accessor for ParticipantViewModel);
    type metadata accessor for ParticipantViewModel(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v136 = v77;
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v79, v80, v139);
      uint64_t v91 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v92 = v91[5];
      uint64_t v93 = &v79[v92];
      uint64_t v94 = &v80[v92];
      *(void *)uint64_t v93 = *(void *)v94;
      *((void *)v93 + 1) = *((void *)v94 + 1);
      v79[v91[6]] = v80[v91[6]];
      v79[v91[7]] = v80[v91[7]];
      v79[v91[8]] = v80[v91[8]];
      v79[v91[9]] = v80[v91[9]];
      v79[v91[10]] = v80[v91[10]];
      v79[v91[11]] = v80[v91[11]];
      swift_bridgeObjectRetain();
      uint64_t v95 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
      uint64_t v96 = &v79[v95];
      uint64_t v97 = &v80[v95];
      id v98 = *(void **)&v80[v95];
      *(void *)uint64_t v96 = v98;
      *((void *)v96 + 1) = *((void *)v97 + 1);
      *((void *)v96 + 2) = *((void *)v97 + 2);
      *((void *)v96 + 3) = *((void *)v97 + 3);
      *((void *)v96 + 4) = *((void *)v97 + 4);
      *((void *)v96 + 5) = *((void *)v97 + 5);
      *((void *)v96 + 6) = *((void *)v97 + 6);
      *((void *)v96 + 7) = *((void *)v97 + 7);
      v96[64] = v97[64];
      v96[65] = v97[65];
      uint64_t v99 = *((void *)v97 + 10);
      id v100 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v99)
      {
        *((void *)v96 + 9) = *((void *)v97 + 9);
        *((void *)v96 + 10) = *((void *)v97 + 10);
        *((void *)v96 + 11) = *((void *)v97 + 11);
        *((void *)v96 + 12) = *((void *)v97 + 12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v115 = *(_OWORD *)(v97 + 88);
        *(_OWORD *)(v96 + 72) = *(_OWORD *)(v97 + 72);
        *(_OWORD *)(v96 + 88) = v115;
      }
      uint64_t v77 = v136;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v79, v80, v139);
      uint64_t v82 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v83 = v82[5];
      uint64_t v84 = &v79[v83];
      uint64_t v85 = &v80[v83];
      *(void *)uint64_t v84 = *(void *)v85;
      *((void *)v84 + 1) = *((void *)v85 + 1);
      v79[v82[6]] = v80[v82[6]];
      v79[v82[7]] = v80[v82[7]];
      v79[v82[8]] = v80[v82[8]];
      v79[v82[9]] = v80[v82[9]];
      v79[v82[10]] = v80[v82[10]];
      v79[v82[11]] = v80[v82[11]];
      swift_bridgeObjectRetain();
      uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      uint64_t v87 = *(int *)(v86 + 48);
      uint64_t v88 = &v79[v87];
      uint64_t v89 = &v80[v87];
      uint64_t v90 = *(void *)&v80[v87 + 24];
      if (v90)
      {
        *((void *)v88 + 3) = v90;
        *((void *)v88 + 4) = *((void *)v89 + 4);
        (**(void (***)(char *, char *))(v90 - 8))(v88, v89);
      }
      else
      {
        long long v109 = *(_OWORD *)v89;
        long long v110 = *((_OWORD *)v89 + 1);
        *((void *)v88 + 4) = *((void *)v89 + 4);
        *(_OWORD *)uint64_t v88 = v109;
        *((_OWORD *)v88 + 1) = v110;
      }
      memcpy(v88 + 40, v89 + 40, 0x84uLL);
      uint64_t v111 = *(int *)(v86 + 64);
      long long v112 = &v79[v111];
      uint64_t v113 = &v80[v111];
      switch(v113[104])
      {
        case 1:
          uint64_t v114 = *((void *)v113 + 3);
          *((void *)v112 + 3) = v114;
          *((void *)v112 + 4) = *((void *)v113 + 4);
          (**(void (***)(void *, char *))(v114 - 8))(v112, v113);
          *((void *)v112 + 5) = *((void *)v113 + 5);
          *((void *)v112 + 6) = *((void *)v113 + 6);
          v112[104] = 1;
          swift_bridgeObjectRetain();
          break;
        case 2:
          *(void *)long long v112 = *(void *)v113;
          *((void *)v112 + 1) = *((void *)v113 + 1);
          *((void *)v112 + 2) = *((void *)v113 + 2);
          long long v119 = (void *)*((void *)v113 + 3);
          *((void *)v112 + 3) = v119;
          v112[32] = v113[32];
          v112[33] = v113[33];
          uint64_t v120 = *((void *)v113 + 5);
          v112[48] = v113[48];
          *((void *)v112 + 5) = v120;
          long long v121 = (void *)*((void *)v113 + 7);
          *((void *)v112 + 7) = v121;
          v112[104] = 2;
          swift_bridgeObjectRetain();
          id v122 = v119;
          id v123 = v121;
          break;
        case 3:
          *(void *)long long v112 = *(void *)v113;
          *((void *)v112 + 1) = *((void *)v113 + 1);
          *((void *)v112 + 2) = *((void *)v113 + 2);
          id v124 = (void *)*((void *)v113 + 3);
          *((void *)v112 + 3) = v124;
          v112[32] = v113[32];
          v112[33] = v113[33];
          uint64_t v125 = *((void *)v113 + 5);
          v112[48] = v113[48];
          *((void *)v112 + 5) = v125;
          id v126 = (void *)*((void *)v113 + 7);
          *((void *)v112 + 7) = v126;
          *((void *)v112 + 8) = *((void *)v113 + 8);
          *((void *)v112 + 9) = *((void *)v113 + 9);
          uint64_t v127 = (void *)*((void *)v113 + 10);
          *((void *)v112 + 10) = v127;
          v112[104] = 3;
          swift_bridgeObjectRetain();
          id v128 = v124;
          id v129 = v126;
          swift_bridgeObjectRetain();
          id v130 = v127;
          break;
        case 4:
          id v131 = *(void **)v113;
          *(void *)long long v112 = *(void *)v113;
          *((void *)v112 + 1) = *((void *)v113 + 1);
          *((void *)v112 + 2) = *((void *)v113 + 2);
          *((void *)v112 + 3) = *((void *)v113 + 3);
          *((void *)v112 + 4) = *((void *)v113 + 4);
          *((void *)v112 + 5) = *((void *)v113 + 5);
          *((void *)v112 + 6) = *((void *)v113 + 6);
          *((void *)v112 + 7) = *((void *)v113 + 7);
          v112[64] = v113[64];
          v112[65] = v113[65];
          uint64_t v138 = *((void *)v113 + 10);
          id v132 = v131;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v138)
          {
            *((void *)v112 + 9) = *((void *)v113 + 9);
            *((void *)v112 + 10) = *((void *)v113 + 10);
            *((void *)v112 + 11) = *((void *)v113 + 11);
            *((void *)v112 + 12) = *((void *)v113 + 12);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v135 = *(_OWORD *)(v113 + 88);
            *(_OWORD *)(v112 + 72) = *(_OWORD *)(v113 + 72);
            *(_OWORD *)(v112 + 88) = v135;
          }
          v112[104] = 4;
          break;
        case 5:
          id v133 = *(void **)v113;
          *(void *)long long v112 = *(void *)v113;
          v112[104] = 5;
          id v134 = v133;
          break;
        default:
          memcpy(v112, v113, 0x69uLL);
          break;
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v79, v80, v139);
      uint64_t v101 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      uint64_t v102 = v101[5];
      uint64_t v103 = &v79[v102];
      uint64_t v104 = &v80[v102];
      *(void *)uint64_t v103 = *(void *)v104;
      *((void *)v103 + 1) = *((void *)v104 + 1);
      v79[v101[6]] = v80[v101[6]];
      v79[v101[7]] = v80[v101[7]];
      v79[v101[8]] = v80[v101[8]];
      v79[v101[9]] = v80[v101[9]];
      v79[v101[10]] = v80[v101[10]];
      v79[v101[11]] = v80[v101[11]];
      swift_bridgeObjectRetain();
      uint64_t v105 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                    + 48);
      uint64_t v106 = &v79[v105];
      uint64_t v107 = &v80[v105];
      uint64_t v108 = *(void *)&v80[v105 + 24];
      if (v108)
      {
        *((void *)v106 + 3) = v108;
        *((void *)v106 + 4) = *((void *)v107 + 4);
        (**(void (***)(char *, char *))(v108 - 8))(v106, v107);
      }
      else
      {
        long long v116 = *(_OWORD *)v107;
        long long v117 = *((_OWORD *)v107 + 1);
        *((void *)v106 + 4) = *((void *)v107 + 4);
        *(_OWORD *)uint64_t v106 = v116;
        *((_OWORD *)v106 + 1) = v117;
      }
      memcpy(v106 + 40, v107 + 40, 0x84uLL);
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(v77 + 28)] = *(void *)&a2[*(int *)(v77 + 28)];
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *initializeWithTake for ParticipantViewRepresentable(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      goto LABEL_5;
    case 4u:
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      memcpy(&a1[*(int *)(v7 + 48)], &a2[*(int *)(v7 + 48)], 0x150uLL);
      uint64_t v8 = *(int *)(v7 + 64);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      long long v11 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v11;
      long long v12 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v12;
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      break;
  }
  long long v14 = (int *)type metadata accessor for Participant(0);
  uint64_t v15 = v14[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for UUID();
  long long v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
  v51(v16, v17, v18);
  uint64_t v19 = v14[6];
  long long v20 = &a1[v19];
  long long v21 = &a2[v19];
  *(_DWORD *)long long v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  uint64_t v22 = v14[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((void *)v23 + 4) = *((void *)v24 + 4);
  *(void *)&a1[v14[8]] = *(void *)&a2[v14[8]];
  *(_OWORD *)&a1[v14[9]] = *(_OWORD *)&a2[v14[9]];
  a1[v14[10]] = a2[v14[10]];
  *(void *)&a1[v14[11]] = *(void *)&a2[v14[11]];
  *(void *)&a1[v14[12]] = *(void *)&a2[v14[12]];
  a1[v14[13]] = a2[v14[13]];
  uint64_t v26 = v14[14];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v28, 1, v29))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
    __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v29);
  }
  uint64_t v31 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v32 = *(int *)(v31 + 20);
  uint64_t v33 = &v27[v32];
  uint64_t v34 = &v28[v32];
  if (__swift_getEnumTagSinglePayload((uint64_t)&v28[v32], 1, v29))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v33, v34, v29);
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v29);
  }
  v27[*(int *)(v31 + 24)] = v28[*(int *)(v31 + 24)];
  a1[v14[15]] = a2[v14[15]];
  *(void *)&a1[v14[16]] = *(void *)&a2[v14[16]];
  uint64_t v36 = (int *)type metadata accessor for ParticipantViewRepresentableViewModel(0);
  a1[v36[5]] = a2[v36[5]];
  uint64_t v37 = v36[6];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  type metadata accessor for ParticipantViewModel(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v51(v38, v39, v18);
    uint64_t v47 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    *(_OWORD *)&v38[v47[5]] = *(_OWORD *)&v39[v47[5]];
    v38[v47[6]] = v39[v47[6]];
    v38[v47[7]] = v39[v47[7]];
    v38[v47[8]] = v39[v47[8]];
    v38[v47[9]] = v39[v47[9]];
    v38[v47[10]] = v39[v47[10]];
    v38[v47[11]] = v39[v47[11]];
    uint64_t v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                 + 48);
    uint64_t v44 = &v38[v48];
    uint64_t v45 = &v39[v48];
    size_t v46 = 104;
  }
  else
  {
    v51(v38, v39, v18);
    uint64_t v41 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
    *(_OWORD *)&v38[v41[5]] = *(_OWORD *)&v39[v41[5]];
    v38[v41[6]] = v39[v41[6]];
    v38[v41[7]] = v39[v41[7]];
    v38[v41[8]] = v39[v41[8]];
    v38[v41[9]] = v39[v41[9]];
    v38[v41[10]] = v39[v41[10]];
    v38[v41[11]] = v39[v41[11]];
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      memcpy(&v38[*(int *)(v42 + 48)], &v39[*(int *)(v42 + 48)], 0xACuLL);
      uint64_t v43 = *(int *)(v42 + 64);
      uint64_t v44 = &v38[v43];
      uint64_t v45 = &v39[v43];
      size_t v46 = 105;
    }
    else
    {
      uint64_t v49 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      uint64_t v44 = &v38[v49];
      uint64_t v45 = &v39[v49];
      size_t v46 = 172;
    }
  }
  memcpy(v44, v45, v46);
  swift_storeEnumTagMultiPayload();
  *(void *)&a1[v36[7]] = *(void *)&a2[v36[7]];
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for ParticipantViewRepresentable(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v5 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        goto LABEL_5;
      case 4u:
        uint64_t v6 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&a1[*(int *)(v7 + 48)], &a2[*(int *)(v7 + 48)], 0x150uLL);
        uint64_t v8 = *(int *)(v7 + 64);
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        long long v11 = *((_OWORD *)v10 + 1);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *((_OWORD *)v9 + 1) = v11;
        long long v12 = *((_OWORD *)v10 + 3);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
        *((_OWORD *)v9 + 3) = v12;
LABEL_5:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
        break;
    }
  }
  long long v14 = (int *)type metadata accessor for Participant(0);
  uint64_t v15 = v14[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v18 - 8);
  uint64_t v69 = v18;
  (*(void (**)(char *, char *))(v68 + 40))(v16, v17);
  uint64_t v19 = v14[6];
  long long v20 = &a1[v19];
  long long v21 = &a2[v19];
  *long long v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  v20[3] = v21[3];
  v20[4] = v21[4];
  uint64_t v22 = v14[7];
  uint64_t v23 = (uint64_t)&a1[v22];
  uint64_t v24 = &a2[v22];
  long long v25 = *(void **)&a1[v22];
  if (v25)
  {
    if (*(void *)v24)
    {
      *(void *)uint64_t v23 = *(void *)v24;

      *(void *)(v23 + 8) = *((void *)v24 + 1);
      *(unsigned char *)(v23 + 16) = v24[16];
      uint64_t v26 = *((void *)v24 + 4);
      *(void *)(v23 + 24) = *((void *)v24 + 3);
      *(void *)(v23 + 32) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Participant.RemoteIdentifiers(v23);
  }
  long long v27 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v27;
  *(void *)(v23 + 32) = *((void *)v24 + 4);
LABEL_11:
  *(void *)&a1[v14[8]] = *(void *)&a2[v14[8]];
  swift_bridgeObjectRelease();
  uint64_t v28 = v14[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  a1[v14[10]] = a2[v14[10]];
  *(void *)&a1[v14[11]] = *(void *)&a2[v14[11]];
  swift_bridgeObjectRelease();
  uint64_t v33 = v14[12];
  uint64_t v34 = *(void **)&a1[v33];
  *(void *)&a1[v33] = *(void *)&a2[v33];

  a1[v14[13]] = a2[v14[13]];
  uint64_t v35 = v14[14];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v38 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v38);
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38);
  if (EnumTagSinglePayload)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v41 = *(void *)(v38 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v38);
LABEL_16:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v36, v37, v38);
LABEL_17:
  uint64_t v43 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = &v36[v44];
  size_t v46 = &v37[v44];
  int v47 = __swift_getEnumTagSinglePayload((uint64_t)&v36[v44], 1, v38);
  int v48 = __swift_getEnumTagSinglePayload((uint64_t)v46, 1, v38);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v45, v46, v38);
      __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v38);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v49 = *(void *)(v38 - 8);
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v38);
LABEL_22:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v45, v46, v38);
LABEL_23:
  v36[*(int *)(v43 + 24)] = v37[*(int *)(v43 + 24)];
  a1[v14[15]] = a2[v14[15]];
  *(void *)&a1[v14[16]] = *(void *)&a2[v14[16]];
  swift_release();
  uint64_t v51 = type metadata accessor for ParticipantViewRepresentableViewModel(0);
  uint64_t v52 = v51;
  a1[*(int *)(v51 + 20)] = a2[*(int *)(v51 + 20)];
  if (a1 != a2)
  {
    uint64_t v53 = *(int *)(v51 + 24);
    uint64_t v54 = &a1[v53];
    uint64_t v55 = &a2[v53];
    _s15ConversationKit20ParticipantViewModelO0C7DetailsVWOhTm_1((uint64_t)&a1[v53], (void (*)(void))type metadata accessor for ParticipantViewModel);
    type metadata accessor for ParticipantViewModel(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v54, v55, v69);
      uint64_t v63 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)&v54[v63[5]] = *(_OWORD *)&v55[v63[5]];
      v54[v63[6]] = v55[v63[6]];
      v54[v63[7]] = v55[v63[7]];
      v54[v63[8]] = v55[v63[8]];
      v54[v63[9]] = v55[v63[9]];
      v54[v63[10]] = v55[v63[10]];
      v54[v63[11]] = v55[v63[11]];
      uint64_t v64 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantMonogramView.ViewModel))
                   + 48);
      id v60 = &v54[v64];
      uint64_t v61 = &v55[v64];
      size_t v62 = 104;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v54, v55, v69);
      uint64_t v57 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)&v54[v57[5]] = *(_OWORD *)&v55[v57[5]];
      v54[v57[6]] = v55[v57[6]];
      v54[v57[7]] = v55[v57[7]];
      v54[v57[8]] = v55[v57[8]];
      v54[v57[9]] = v55[v57[9]];
      v54[v57[10]] = v55[v57[10]];
      v54[v57[11]] = v55[v57[11]];
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel, ParticipantVideoOverlayView.ViewModel));
      memcpy(&v54[*(int *)(v58 + 48)], &v55[*(int *)(v58 + 48)], 0xACuLL);
      uint64_t v59 = *(int *)(v58 + 64);
      id v60 = &v54[v59];
      uint64_t v61 = &v55[v59];
      size_t v62 = 105;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v54, v55, v69);
      uint64_t v65 = (int *)type metadata accessor for ParticipantViewModel.ParticipantDetails(0);
      *(_OWORD *)&v54[v65[5]] = *(_OWORD *)&v55[v65[5]];
      v54[v65[6]] = v55[v65[6]];
      v54[v65[7]] = v55[v65[7]];
      v54[v65[8]] = v55[v65[8]];
      v54[v65[9]] = v55[v65[9]];
      v54[v65[10]] = v55[v65[10]];
      v54[v65[11]] = v55[v65[11]];
      uint64_t v66 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParticipantViewModel.ParticipantDetails, ParticipantVideoView.ViewModel))
                   + 48);
      id v60 = &v54[v66];
      uint64_t v61 = &v55[v66];
      size_t v62 = 172;
    }
    memcpy(v60, v61, v62);
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(v52 + 28)] = *(void *)&a2[*(int *)(v52 + 28)];
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C350E254);
}

uint64_t sub_1C350E254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ParticipantViewRepresentableViewModel(0);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 2) {
      return OUTLINED_FUNCTION_4_106(v9);
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ParticipantViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C350E2F8);
}

void sub_1C350E2F8()
{
  uint64_t v4 = OUTLINED_FUNCTION_30_6();
  type metadata accessor for ParticipantViewRepresentableViewModel(v4);
  OUTLINED_FUNCTION_1_5();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    __swift_storeEnumTagSinglePayload(v1, v0, v0, v5);
  }
  else
  {
    *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
  }
}

uint64_t type metadata completion function for ParticipantViewRepresentable()
{
  uint64_t result = type metadata accessor for ParticipantViewRepresentableViewModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ParticipantViewRepresentable and conformance ParticipantViewRepresentable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ParticipantViewRepresentable(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL RemoteControlRequirements.isComplete.getter(int a1)
{
  return (~a1 & 0x1FLL) == 0;
}

uint64_t ScreenSharingSpectatorViewModel.__allocating_init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  swift_allocObject();
  swift_getObjectType();
  uint64_t v0 = OUTLINED_FUNCTION_2_7();
  return specialized ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(v0, v1, v2, v3);
}

void *RemoteControlRequirements.hasGroupSession.unsafeMutableAddressor()
{
  return &static RemoteControlRequirements.hasGroupSession;
}

uint64_t static RemoteControlRequirements.hasGroupSession.getter()
{
  return 1;
}

void *RemoteControlRequirements.hasTwoParticipants.unsafeMutableAddressor()
{
  return &static RemoteControlRequirements.hasTwoParticipants;
}

uint64_t static RemoteControlRequirements.hasTwoParticipants.getter()
{
  return 2;
}

void *RemoteControlRequirements.devicesAreCompatible.unsafeMutableAddressor()
{
  return &static RemoteControlRequirements.devicesAreCompatible;
}

uint64_t static RemoteControlRequirements.devicesAreCompatible.getter()
{
  return 4;
}

void *RemoteControlRequirements.serverBagEnabled.unsafeMutableAddressor()
{
  return &static RemoteControlRequirements.serverBagEnabled;
}

uint64_t static RemoteControlRequirements.serverBagEnabled.getter()
{
  return 8;
}

void *RemoteControlRequirements.broadcasterIsEligible.unsafeMutableAddressor()
{
  return &static RemoteControlRequirements.broadcasterIsEligible;
}

uint64_t static RemoteControlRequirements.broadcasterIsEligible.getter()
{
  return 16;
}

uint64_t RemoteControlRequirements.rawValue.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*RemoteControlRequirements.rawValue.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void protocol witness for OptionSet.init(rawValue:) in conformance RemoteControlRequirements(void *a1@<X8>)
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance RemoteControlRequirements()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RemoteControlRequirements()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RemoteControlRequirements(void *a1@<X8>)
{
}

uint64_t (*ScreenSharingSpectatorViewModel._broadcastingParticipant.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.broadcastingParticipant : ScreenSharingSpectatorViewModel(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 216))();
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.broadcastingParticipant : ScreenSharingSpectatorViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FeatureEligibility?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Participant?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 224))(v6);
}

uint64_t ScreenSharingSpectatorViewModel.broadcastingParticipant.init@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(a1, a2, &demangling cache variable for type metadata for Participant?);
}

uint64_t ScreenSharingSpectatorViewModel.broadcastingParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v3 + 912))();
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__broadcastingParticipant;
  OUTLINED_FUNCTION_2();
  return outlined init with copy of FeatureEligibility?(v4, a1, &demangling cache variable for type metadata for Participant?);
}

uint64_t ScreenSharingSpectatorViewModel.broadcastingParticipant.setter(uint64_t a1)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_12_65();
  v2();
  swift_release();
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for Participant?);
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.broadcastingParticipant.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__broadcastingParticipant;
  swift_beginAccess();
  outlined assign with copy of Participant?(a2, v3);
  return swift_endAccess();
}

void (*ScreenSharingSpectatorViewModel.broadcastingParticipant.modify())(void *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_17_52();
  OUTLINED_FUNCTION_16_51((uint64_t)v1);
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v2 + 912))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel___observationRegistrar);
  uint64_t v3 = _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  OUTLINED_FUNCTION_11_3(v3);
  swift_release();
  OUTLINED_FUNCTION_39_27();
  *(void *)(v0 + 56) = ScreenSharingSpectatorViewModel._broadcastingParticipant.modify();
  return ScreenSharingSpectatorViewModel.broadcastingParticipant.modify;
}

void ScreenSharingSpectatorViewModel.broadcastingParticipant.modify(void *a1)
{
}

uint64_t (*ScreenSharingSpectatorViewModel._isZoomEnabled.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.isZoomEnabled : ScreenSharingSpectatorViewModel@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 264))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.isZoomEnabled : ScreenSharingSpectatorViewModel(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 272))(*a1);
}

uint64_t ScreenSharingSpectatorViewModel.isZoomEnabled.init@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ScreenSharingSpectatorViewModel.isZoomEnabled.getter()
{
  return ScreenSharingSpectatorViewModel.isZoomEnabled.getter((uint64_t)&unk_1C3785660, &OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isZoomEnabled);
}

uint64_t ScreenSharingSpectatorViewModel.isZoomEnabled.setter()
{
  return ScreenSharingSpectatorViewModel.isZoomEnabled.setter();
}

{
  void (*v0)(void);

  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_12_65();
  v0();
  return swift_release();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.isZoomEnabled.setter(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isZoomEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a2;
  return result;
}

void (*ScreenSharingSpectatorViewModel.isZoomEnabled.modify())(void *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_17_52();
  OUTLINED_FUNCTION_16_51((uint64_t)v1);
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v2 + 912))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel___observationRegistrar);
  uint64_t v3 = _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  OUTLINED_FUNCTION_11_3(v3);
  swift_release();
  OUTLINED_FUNCTION_39_27();
  *(void *)(v0 + 56) = ScreenSharingSpectatorViewModel._isZoomEnabled.modify();
  return ScreenSharingSpectatorViewModel.isZoomEnabled.modify;
}

void ScreenSharingSpectatorViewModel.isZoomEnabled.modify(void *a1)
{
}

uint64_t (*ScreenSharingSpectatorViewModel._isPipped.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.isPipped : ScreenSharingSpectatorViewModel@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 312))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.isPipped : ScreenSharingSpectatorViewModel(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 320))(*a1);
}

uint64_t ScreenSharingSpectatorViewModel.isPipped.getter()
{
  return ScreenSharingSpectatorViewModel.isZoomEnabled.getter((uint64_t)&unk_1C3785688, &OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isPipped);
}

uint64_t ScreenSharingSpectatorViewModel.isPipped.setter()
{
  return ScreenSharingSpectatorViewModel.isZoomEnabled.setter();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.isPipped.setter(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isPipped);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a2;
  return result;
}

void (*ScreenSharingSpectatorViewModel.isPipped.modify())(void *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_17_52();
  OUTLINED_FUNCTION_16_51((uint64_t)v1);
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v2 + 912))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel___observationRegistrar);
  uint64_t v3 = _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  OUTLINED_FUNCTION_11_3(v3);
  swift_release();
  OUTLINED_FUNCTION_39_27();
  *(void *)(v0 + 56) = ScreenSharingSpectatorViewModel._isPipped.modify();
  return ScreenSharingSpectatorViewModel.isPipped.modify;
}

void ScreenSharingSpectatorViewModel.isPipped.modify(void *a1)
{
}

uint64_t (*ScreenSharingSpectatorViewModel._disableRequestButton.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.disableRequestButton : ScreenSharingSpectatorViewModel@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 360))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.disableRequestButton : ScreenSharingSpectatorViewModel(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 368))(*a1);
}

uint64_t ScreenSharingSpectatorViewModel.disableRequestButton.getter()
{
  return ScreenSharingSpectatorViewModel.isZoomEnabled.getter((uint64_t)&unk_1C37856B0, &OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__disableRequestButton);
}

uint64_t ScreenSharingSpectatorViewModel.isZoomEnabled.getter(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v4 + 912))();
  swift_release();
  uint64_t v5 = (unsigned __int8 *)(v2 + *a2);
  OUTLINED_FUNCTION_2();
  return *v5;
}

uint64_t ScreenSharingSpectatorViewModel.disableRequestButton.setter()
{
  return ScreenSharingSpectatorViewModel.isZoomEnabled.setter();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.disableRequestButton.setter(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned char *)(a1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__disableRequestButton);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a2;
  return result;
}

void (*ScreenSharingSpectatorViewModel.disableRequestButton.modify())(void *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_17_52();
  OUTLINED_FUNCTION_16_51((uint64_t)v1);
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v2 + 912))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel___observationRegistrar);
  uint64_t v3 = _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  OUTLINED_FUNCTION_11_3(v3);
  swift_release();
  OUTLINED_FUNCTION_39_27();
  *(void *)(v0 + 56) = ScreenSharingSpectatorViewModel._disableRequestButton.modify();
  return ScreenSharingSpectatorViewModel.disableRequestButton.modify;
}

void ScreenSharingSpectatorViewModel.disableRequestButton.modify(void *a1)
{
}

uint64_t (*ScreenSharingSpectatorViewModel._activeParticipantObserver.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.activeParticipantObserver : ScreenSharingSpectatorViewModel@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 408))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.activeParticipantObserver : ScreenSharingSpectatorViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 416);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ScreenSharingSpectatorViewModel.activeParticipantObserver.getter()
{
  return ScreenSharingSpectatorViewModel.activeParticipantObserver.getter();
}

{
  uint64_t v0;

  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v0 + 912))();
  swift_release();
  OUTLINED_FUNCTION_2();
  return swift_retain();
}

uint64_t ScreenSharingSpectatorViewModel.activeParticipantObserver.setter()
{
  return ScreenSharingSpectatorViewModel.activeParticipantObserver.setter();
}

{
  void (*v0)(void);

  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_12_65();
  v0();
  swift_release();
  return swift_release();
}

void (*ScreenSharingSpectatorViewModel.activeParticipantObserver.modify())(void *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_17_52();
  OUTLINED_FUNCTION_16_51((uint64_t)v1);
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v2 + 912))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel___observationRegistrar);
  uint64_t v3 = _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  OUTLINED_FUNCTION_11_3(v3);
  swift_release();
  OUTLINED_FUNCTION_39_27();
  *(void *)(v0 + 56) = ScreenSharingSpectatorViewModel._activeParticipantObserver.modify();
  return ScreenSharingSpectatorViewModel.activeParticipantObserver.modify;
}

void ScreenSharingSpectatorViewModel.activeParticipantObserver.modify(void *a1)
{
}

uint64_t (*ScreenSharingSpectatorViewModel._sessionObserver.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.sessionObserver : ScreenSharingSpectatorViewModel@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 456))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.sessionObserver : ScreenSharingSpectatorViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 464);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ScreenSharingSpectatorViewModel.sessionObserver.getter()
{
  return ScreenSharingSpectatorViewModel.activeParticipantObserver.getter();
}

uint64_t ScreenSharingSpectatorViewModel.sessionObserver.setter()
{
  return ScreenSharingSpectatorViewModel.activeParticipantObserver.setter();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.activeParticipantObserver.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(a1 + *a3);
  swift_beginAccess();
  *uint64_t v4 = a2;
  swift_retain();
  return swift_release();
}

void (*ScreenSharingSpectatorViewModel.sessionObserver.modify())(void *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_17_52();
  OUTLINED_FUNCTION_16_51((uint64_t)v1);
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v2 + 912))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel___observationRegistrar);
  uint64_t v3 = _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
  OUTLINED_FUNCTION_11_3(v3);
  swift_release();
  OUTLINED_FUNCTION_39_27();
  *(void *)(v0 + 56) = ScreenSharingSpectatorViewModel._sessionObserver.modify();
  return ScreenSharingSpectatorViewModel.sessionObserver.modify;
}

void ScreenSharingSpectatorViewModel.sessionObserver.modify(void *a1)
{
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState : ScreenSharingSpectatorViewModel@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 504))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState : ScreenSharingSpectatorViewModel()
{
  return ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.setter();
}

uint64_t ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 912))();
  swift_release();
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isTransitioningRemoteControlState);
}

uint64_t ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.setter()
{
  return ScreenSharingSpectatorViewModel.isZoomEnabled.setter();
}

uint64_t ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v0 + 912))();
  swift_release();
  return swift_retain();
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask : ScreenSharingSpectatorViewModel()
{
  return ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.setter();
}

uint64_t ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.setter()
{
  return ScreenSharingSpectatorViewModel.activeParticipantObserver.setter();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1
            + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isTransitioningRemoteControlStateTask) = a2;
  swift_retain();
  return swift_release();
}

uint64_t ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime.init@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 912))();
  swift_release();
  return *(void *)(v0
                   + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlStateTransitionTime);
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime : ScreenSharingSpectatorViewModel()
{
  return ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime.setter();
}

uint64_t ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_12_65();
  v0();
  return swift_release();
}

uint64_t ScreenSharingSpectatorViewModel._remoteControlState.didset(unint64_t *a1)
{
  void (*v8)(unint64_t *__return_ptr, unint64_t);
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = *a1;
  uint64_t v8 = *(void (**)(unint64_t *__return_ptr, unint64_t))(*(void *)v2 + 648);
  unsigned int v9 = *a1 >> 61;
  uint64_t v10 = outlined copy of RemoteControlState(*a1);
  v8(&v23, v10);
  long long v11 = v23;
  if (v9 == 4)
  {
    if (*(void *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) >> 61 != 2
      || (v23 & 0xE000000000000000) != 0xA000000000000000)
    {
      goto LABEL_22;
    }
LABEL_15:
    if (v23 != 0xA000000000000000)
    {
      if (v23 != 0xA000000000000010) {
        goto LABEL_22;
      }
      long long v11 = 0xA000000000000010;
    }
    goto LABEL_18;
  }
  if (v9 == 2)
  {
    if (v23 >> 61 != 5) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (v9 != 1) {
    goto LABEL_22;
  }
  if (v23 >> 61 != 2)
  {
    if (v23 >> 61 == 4)
    {
      long long v12 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      outlined consume of RemoteControlState(v7);
      uint64_t result = outlined consume of RemoteControlState(v11);
      if (v12 >> 61 != 2) {
        return result;
      }
      goto LABEL_19;
    }
LABEL_22:
    outlined consume of RemoteControlState(v7);
    return outlined consume of RemoteControlState(v11);
  }
LABEL_18:
  outlined consume of RemoteControlState(v7);
  outlined consume of RemoteControlState(v11);
LABEL_19:
  ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.setter();
  uint64_t v15 = ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.getter();
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1C8773690](v16, MEMORY[0x1E4FBC848] + 8, v17, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v18 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v18);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v19 = static MainActor.shared.getter();
  long long v20 = (void *)swift_allocObject();
  long long v21 = MEMORY[0x1E4FBCFD8];
  v20[2] = v19;
  v20[3] = v21;
  v20[4] = v2;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset, (uint64_t)v20);
  return ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.setter();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  void v4[6] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v7;
  v4[8] = v6;
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset, v7, v6);
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v1 = ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime.getter();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
     + async function pointer to specialized Clock.sleep(for:tolerance:);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset;
  return ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t))v6)(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_49_0();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v8 = closure #1 in closure #1 in ScreenSharingInteractionTransport.didSendData();
  }
  else {
    uint64_t v8 = closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset;
  }
  return MEMORY[0x1F4188298](v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  swift_release();
  ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.setter();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t ScreenSharingSpectatorViewModel._remoteControlState.setter(void *a1)
{
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlState);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlState) = *a1;
  outlined copy of RemoteControlState(v2);
  outlined consume of RemoteControlState(v2);
  unint64_t v4 = v2;
  ScreenSharingSpectatorViewModel._remoteControlState.didset(&v4);
  return outlined consume of RemoteControlState(v2);
}

void *key path getter for ScreenSharingSpectatorViewModel.remoteControlState : ScreenSharingSpectatorViewModel@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 648))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.remoteControlState : ScreenSharingSpectatorViewModel(unint64_t *a1)
{
  unint64_t v2 = *a1;
  outlined copy of RemoteControlState(v2);
  return ScreenSharingSpectatorViewModel.remoteControlState.setter(&v2);
}

void ScreenSharingSpectatorViewModel.remoteControlState.init(void *a1@<X8>)
{
}

unint64_t ScreenSharingSpectatorViewModel.remoteControlState.getter@<X0>(unint64_t *a1@<X8>)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v3 + 912))();
  swift_release();
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlState);
  *a1 = v4;
  return outlined copy of RemoteControlState(v4);
}

uint64_t ScreenSharingSpectatorViewModel.remoteControlState.setter(unint64_t *a1)
{
  unint64_t v2 = *a1;
  swift_getKeyPath();
  uint64_t v5 = v1;
  unint64_t v6 = v2;
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v3 + 920))();
  outlined consume of RemoteControlState(v2);
  return swift_release();
}

unint64_t closure #1 in ScreenSharingSpectatorViewModel.remoteControlState.setter(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  outlined copy of RemoteControlState(a2);
  return ScreenSharingSpectatorViewModel._remoteControlState.setter(&v3);
}

uint64_t ScreenSharingSpectatorViewModel.requirmentsLock.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v0 + 912))();
  swift_release();
  return swift_retain();
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.requirmentsLock : ScreenSharingSpectatorViewModel()
{
  return ScreenSharingSpectatorViewModel.requirmentsLock.setter();
}

uint64_t ScreenSharingSpectatorViewModel.requirmentsLock.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_12_65();
  v0();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.requirmentsLock.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__requirmentsLock) = a2;
  swift_retain();
  return swift_release();
}

void ScreenSharingSpectatorViewModel._remoteControlRequirements.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_24_0();
  a21 = v22;
  a22 = v23;
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_51_18(v24, (uint64_t)static Log.screenSharing);
  long long v25 = (void *)Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_84_4(v26))
  {
    long long v27 = (_DWORD *)OUTLINED_FUNCTION_37();
    a10 = OUTLINED_FUNCTION_9_0();
    *long long v27 = 136315138;
    OUTLINED_FUNCTION_4_19();
    (*(void (**)(void))(v28 + 752))();
    uint64_t v29 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_33_8();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_31(&dword_1C2F90000, v31, v32, "Updated remote control requirements satisfied %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_33_8();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t key path getter for ScreenSharingSpectatorViewModel.remoteControlRequirements : ScreenSharingSpectatorViewModel@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 752))();
  *a1 = result;
  return result;
}

uint64_t key path setter for ScreenSharingSpectatorViewModel.remoteControlRequirements : ScreenSharingSpectatorViewModel()
{
  return ScreenSharingSpectatorViewModel.remoteControlRequirements.setter();
}

uint64_t ScreenSharingSpectatorViewModel.remoteControlRequirements.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 912))();
  swift_release();
  return *(void *)(v0 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements);
}

uint64_t ScreenSharingSpectatorViewModel.remoteControlRequirements.setter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_12_65();
  v0();
  return swift_release();
}

id ScreenSharingSpectatorViewModel.interactionController.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel_interactionController));
}

uint64_t ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  swift_getObjectType();
  uint64_t v0 = OUTLINED_FUNCTION_2_7();
  return specialized ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(v0, v1, v2, v3);
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(uint64_t a1, void *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_2();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for TaskPriority();
    OUTLINED_FUNCTION_0_53(v7);
    type metadata accessor for MainActor();
    swift_retain();
    id v8 = a2;
    uint64_t v9 = static MainActor.shared.getter();
    uint64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = MEMORY[0x1E4FBCFD8];
    v10[2] = v9;
    v10[3] = v11;
    v10[4] = v6;
    v10[5] = v8;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  void v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:), v7, v6);
}

uint64_t closure #1 in closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  uint64_t v7 = v0;
  swift_release();
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(unint64_t *__return_ptr))(v1 + 376))(&v6);
  ScreenSharingSpectatorViewModel.remoteControlState.setter(&v6);
  OUTLINED_FUNCTION_4_19();
  (*(void (**)(unint64_t *__return_ptr))(v2 + 648))(&v6);
  switch(v6 >> 61)
  {
    case 1uLL:
      uint64_t v5 = *(void *)(v0 + 16);
      outlined consume of RemoteControlState(v6);
      (*(void (**)(uint64_t))(*(void *)v5 + 368))(1);
      break;
    case 5uLL:
      goto LABEL_3;
    default:
      outlined consume of RemoteControlState(v6);
LABEL_3:
      (*(void (**)(void))(**(void **)(v0 + 16) + 368))(0);
      break;
  }
  OUTLINED_FUNCTION_6();
  return v3();
}

#error "1C3510DC8: call analysis failed (funcsize=286)"

#error "1C35111C4: call analysis failed (funcsize=86)"

void specialized OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3)
{
  uint64_t v3 = a3 + 4;
  os_unfair_lock_lock(a3 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v4, (uint64_t)&v5);
  os_unfair_lock_unlock(v3);
}

uint64_t closure #2 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  uint64_t v0 = (os_unfair_lock_s *)(ScreenSharingSpectatorViewModel.requirmentsLock.getter() + 16);
  os_unfair_lock_lock(v0);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v0);
  return swift_release();
}

uint64_t closure #1 in closure #2 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.screenSharing);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v28 = v3;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    var48[0] = v10;
    *(_DWORD *)uint64_t v9 = 134218242;
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    type metadata accessor for ScreenSharingInteractionSession();
    swift_retain();
    uint64_t v11 = String.init<A>(reflecting:)();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, var48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v7, v8, "Updating participant requirement with active count %ld for session %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v10, -1, -1);
    MEMORY[0x1C87760E0](v9, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(uint64_t))(*(void *)a3 + 912))(KeyPath);
  swift_release();
  if (v13 == 2)
  {
    var48[0] = a3;
    swift_getKeyPath();
    _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    uint64_t v15 = swift_release();
    uint64_t v23 = OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements;
    uint64_t v24 = *(void *)(a3 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements);
    if ((v24 & 2) == 0)
    {
      unint64_t v25 = v24 | 2;
LABEL_11:
      *(void *)(a3 + v23) = v25;
    }
  }
  else
  {
    var48[0] = a3;
    swift_getKeyPath();
    _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ScreenSharingSpectatorViewModel and conformance ScreenSharingSpectatorViewModel, (void (*)(uint64_t))type metadata accessor for ScreenSharingSpectatorViewModel);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    uint64_t v15 = swift_release();
    uint64_t v23 = OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements;
    uint64_t v26 = *(void *)(a3 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlRequirements);
    if ((v26 & 2) != 0)
    {
      unint64_t v25 = v26 & 0xFFFFFFFFFFFFFFFDLL;
      goto LABEL_11;
    }
  }
  ScreenSharingSpectatorViewModel._remoteControlRequirements.didset(v15, v16, v17, v18, v19, v20, v21, v22, v28, v29, v30, var48[0], var48[1], var48[2], var48[3], var48[4], var48[5], var48[6], var48[7],
    var48[8],
    var48[9],
    var48[10]);
  var48[0] = a3;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return swift_release();
}

uint64_t ScreenSharingSpectatorViewModel.activeControlParticipant.getter@<X0>(char *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_31_32();
  v3();
  uint64_t result = outlined consume of RemoteControlState(v7);
  if ((v7 >> 61) - 2 <= 2
    && (uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v1
                                                                                          + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel_interactionController))
                                                    + 0xF8))(result)) != 0)
  {
    ScreenSharingInteractionSession.activeControlParticipant.getter(&v6);
    uint64_t result = swift_release();
    char v5 = v6;
  }
  else
  {
    char v5 = 0;
  }
  *a1 = v5;
  return result;
}

void ScreenSharingSpectatorViewModel.statusText.getter()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_63();
  uint64_t v4 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_13_13();
  MEMORY[0x1F4188790](v6);
  os_log_type_t v8 = (char *)&v116._object - v7;
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_32();
  v9();
  if (__swift_getEnumTagSinglePayload(v1, 1, v4) != 1)
  {
    outlined init with take of Participant(v1, (uint64_t)v8);
    OUTLINED_FUNCTION_50();
    (*(void (**)(unint64_t *__return_ptr))(v10 + 648))(&v115);
    unint64_t v11 = v115;
    OUTLINED_FUNCTION_3_2();
    (*(void (**)(unsigned __int8 *__return_ptr))(v12 + 784))(&v114);
    int v13 = v114;
    OUTLINED_FUNCTION_3_2();
    char v15 = (*(uint64_t (**)(void))(v14 + 504))();
    OUTLINED_FUNCTION_3_2();
    char v17 = (*(uint64_t (**)(void))(v16 + 264))();
    if (!v13) {
      goto LABEL_6;
    }
    if (v13 != 1)
    {
      id v18 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      uint64_t v20 = "SCREEN_SHARING_YOU_ARE_CONTROLLING";
LABEL_24:
      OUTLINED_FUNCTION_19_1(v19, (unint64_t)(v20 - 32) | 0x8000000000000000);

LABEL_57:
      outlined consume of RemoteControlState(v11);
      goto LABEL_58;
    }
    if (v15)
    {
LABEL_6:
      if (v11 >> 61 != 2)
      {
        if (v11 >> 61 == 5 && (v11 == 0xA000000000000000 || v11 == 0xA000000000000010))
        {
          if (v15) {
            goto LABEL_28;
          }
        }
        else
        {
          outlined consume of RemoteControlState(v11);
        }
        goto LABEL_14;
      }
      if ((v17 & 1) == 0)
      {
        outlined consume of RemoteControlState(v11);
        if ((v15 & 1) == 0)
        {
LABEL_28:
          id v42 = objc_msgSend(self, sel_conversationKit);
          OUTLINED_FUNCTION_13_22();
          OUTLINED_FUNCTION_19_1(0xD000000000000020, 0x80000001C37B1DE0);

LABEL_58:
          _s15ConversationKit11ParticipantVWOhTm_9((uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
          goto LABEL_59;
        }
LABEL_14:
        Participant.screenInfo.getter(v109);
        if (v110 == 1)
        {
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          goto LABEL_36;
        }
        if (v113)
        {
          outlined destroy of Participant.ScreenInfo((uint64_t)v109);
          goto LABEL_36;
        }
        uint64_t v43 = v112;
        outlined destroy of Participant.ScreenInfo((uint64_t)v109);
        uint64_t v44 = (void *)TUScreenShareDeviceFamily.displayName.getter(v43);
        if (!v45)
        {
LABEL_36:
          Participant.screenInfo.getter(v109);
          if (v110 == 1)
          {
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
            uint64_t v69 = 0;
            char v70 = 1;
          }
          else
          {
            char v70 = v113;
            if (v113) {
              uint64_t v69 = 0;
            }
            else {
              uint64_t v69 = v112;
            }
            outlined destroy of Participant.ScreenInfo((uint64_t)v109);
          }
          uint64_t v71 = String.deviceAdjustedLocalizedKey(forDeviceFamily:)(v69, v70, 0xD000000000000018, 0x80000001C3797C20);
          int v73 = v72;
          id v74 = objc_msgSend(self, sel_conversationKit);
          OUTLINED_FUNCTION_13_22();
          v75._uint64_t countAndFlagsBits = v71;
          v75._object = v73;
          v76.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
          v76.value._object = (void *)0xEF74694B6E6F6974;
          v77._uint64_t countAndFlagsBits = 0;
          v77._object = (void *)0xE000000000000000;
          v116._uint64_t countAndFlagsBits = 0;
          Swift::String v106 = NSLocalizedString(_:tableName:bundle:value:comment:)(v75, v76, (NSBundle)v74, v77, v116);
          swift_bridgeObjectRelease();

          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v78 = (__n128 *)swift_allocObject();
          OUTLINED_FUNCTION_45_15(v78, (__n128)xmmword_1C3769620);
          if (v79)
          {
            id v80 = v79;
            uint64_t v81 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v80);
            if (v82)
            {
              uint64_t v83 = v81;
              unint64_t v84 = v82;
              if (objc_msgSend(v80, sel_shouldHideContact))
              {
                uint64_t v85 = type metadata accessor for PersonNameComponents();
                uint64_t v105 = &v103;
                uint64_t v104 = (void *)v85;
                OUTLINED_FUNCTION_4();
                uint64_t v87 = v86;
                MEMORY[0x1F4188790](v88);
                OUTLINED_FUNCTION_60();
                swift_bridgeObjectRetain();
                PersonNameComponents.init()();
                PersonNameComponents.givenName.setter();
                PersonNameComponents.familyName.setter();
                if (one-time initialization token for initials != -1) {
                  swift_once();
                }
                OUTLINED_FUNCTION_26_44();
                id v89 = (id)static NSPersonNameComponentsFormatter.initials;
                Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
                id v91 = objc_msgSend(v89, sel_stringFromPersonNameComponents_, isa);

                static String._unconditionallyBridgeFromObjectiveC(_:)();
                (*(void (**)(uint64_t, void *))(v87 + 8))(v71, v104);
                OUTLINED_FUNCTION_37_23();
                StringProtocol.localizedUppercase.getter();

                swift_bridgeObjectRelease();
                id v92 = 0;
                unint64_t v93 = v84;
                goto LABEL_51;
              }

              swift_bridgeObjectRelease();
            }
            else
            {
            }
          }
          _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v8, v0, (void (*)(void))type metadata accessor for Participant);
          OUTLINED_FUNCTION_50_17();
          ParticipantContactDetailsCache.contactDetails(for:)();
          OUTLINED_FUNCTION_49_17();
          uint64_t v83 = v110;
          unint64_t v93 = v111;
          id v92 = v94;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          _s15ConversationKit11ParticipantVWOhTm_9(v0, (void (*)(void))type metadata accessor for Participant);
LABEL_51:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v78[3].n128_u64[1] = MEMORY[0x1E4FBB1A0];
          v78[4].n128_u64[0] = lazy protocol witness table accessor for type String and conformance String();
          v78[2].n128_u64[0] = v83;
          v78[2].n128_u64[1] = v93;
          OUTLINED_FUNCTION_55_16();
LABEL_52:
          String.init(format:_:)();
          swift_bridgeObjectRelease();
          goto LABEL_58;
        }
        uint64_t v104 = v45;
        v106._object = v44;
        id v46 = objc_msgSend(self, sel_conversationKit);
        OUTLINED_FUNCTION_13_22();
        uint64_t v105 = (void *)OUTLINED_FUNCTION_0_23(v47, 0x80000001C37B1DC0);
        v106._uint64_t countAndFlagsBits = v48;

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v49 = (__n128 *)swift_allocObject();
        OUTLINED_FUNCTION_45_15(v49, (__n128)xmmword_1C37696D0);
        if (v50)
        {
          id v51 = v50;
          uint64_t v52 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v51);
          if (v53)
          {
            uint64_t v54 = v52;
            unint64_t v55 = v53;
            if (objc_msgSend(v51, sel_shouldHideContact))
            {
              uint64_t v103 = v54;
              uint64_t v56 = type metadata accessor for PersonNameComponents();
              uint64_t v102 = &v103;
              OUTLINED_FUNCTION_4();
              uint64_t v58 = v57;
              MEMORY[0x1F4188790](v59);
              OUTLINED_FUNCTION_60();
              swift_bridgeObjectRetain();
              PersonNameComponents.init()();
              PersonNameComponents.givenName.setter();
              PersonNameComponents.familyName.setter();
              if (one-time initialization token for initials != -1) {
                swift_once();
              }
              OUTLINED_FUNCTION_26_44();
              id v60 = (id)static NSPersonNameComponentsFormatter.initials;
              Class v61 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
              id v62 = objc_msgSend(v60, sel_stringFromPersonNameComponents_, v61);

              uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v65 = v64;

              (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v54, v56);
              uint64_t v107 = v63;
              uint64_t v108 = v65;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol.localizedUppercase.getter();

              swift_bridgeObjectRelease();
              id v66 = 0;
              unint64_t v67 = v55;
              unint64_t v68 = v103;
              goto LABEL_63;
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
        _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v8, v0, (void (*)(void))type metadata accessor for Participant);
        OUTLINED_FUNCTION_50_17();
        ParticipantContactDetailsCache.contactDetails(for:)();
        OUTLINED_FUNCTION_49_17();
        unint64_t v68 = v110;
        unint64_t v67 = v111;
        id v66 = v98;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        _s15ConversationKit11ParticipantVWOhTm_9(v0, (void (*)(void))type metadata accessor for Participant);
LABEL_63:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        unint64_t v99 = MEMORY[0x1E4FBB1A0];
        v49[3].n128_u64[1] = MEMORY[0x1E4FBB1A0];
        unint64_t v100 = lazy protocol witness table accessor for type String and conformance String();
        v49[2].n128_u64[0] = v68;
        v49[2].n128_u64[1] = v67;
        v49[6].n128_u64[0] = v99;
        v49[6].n128_u64[1] = v100;
        object = v106._object;
        v49[4].n128_u64[0] = v100;
        v49[4].n128_u64[1] = (unint64_t)object;
        v49[5].n128_u64[0] = (unint64_t)v104;
        goto LABEL_52;
      }
      id v18 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      uint64_t v20 = "SCREEN_SHARING_CONTROLLING_ZOOM_OUT";
      goto LABEL_24;
    }
    id v21 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    uint64_t v22 = OUTLINED_FUNCTION_0_23(0xD000000000000020, 0x80000001C37B1E70);
    uint64_t v24 = v23;

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v25 = (__n128 *)swift_allocObject();
    OUTLINED_FUNCTION_45_15(v25, (__n128)xmmword_1C3769620);
    v106._object = v24;
    v106._uint64_t countAndFlagsBits = v22;
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v27);
      if (v29)
      {
        uint64_t v30 = (void *)v28;
        unint64_t v31 = v29;
        if (objc_msgSend(v27, sel_shouldHideContact))
        {
          uint64_t v105 = v30;
          uint64_t v32 = type metadata accessor for PersonNameComponents();
          uint64_t v104 = &v103;
          uint64_t v103 = v32;
          OUTLINED_FUNCTION_4();
          uint64_t v34 = v33;
          MEMORY[0x1F4188790](v35);
          OUTLINED_FUNCTION_60();
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          PersonNameComponents.givenName.setter();
          PersonNameComponents.familyName.setter();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          OUTLINED_FUNCTION_26_44();
          id v36 = (id)static NSPersonNameComponentsFormatter.initials;
          Class v37 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v38 = objc_msgSend(v36, sel_stringFromPersonNameComponents_, v37);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          (*(void (**)(void *, uint64_t))(v34 + 8))(v30, v103);
          OUTLINED_FUNCTION_37_23();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          id v39 = 0;
          unint64_t v40 = v31;
          uint64_t v41 = v105;
          goto LABEL_56;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v8, v0, (void (*)(void))type metadata accessor for Participant);
    OUTLINED_FUNCTION_50_17();
    ParticipantContactDetailsCache.contactDetails(for:)();
    OUTLINED_FUNCTION_49_17();
    uint64_t v95 = v25;
    uint64_t v96 = (void *)v110;
    unint64_t v40 = v111;
    uint64_t v105 = (void *)v11;
    id v39 = v97;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v41 = v96;
    unint64_t v25 = v95;
    swift_release();
    unint64_t v11 = (unint64_t)v105;
    _s15ConversationKit11ParticipantVWOhTm_9(v0, (void (*)(void))type metadata accessor for Participant);
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v25[3].n128_u64[1] = MEMORY[0x1E4FBB1A0];
    v25[4].n128_u64[0] = lazy protocol witness table accessor for type String and conformance String();
    v25[2].n128_u64[0] = (unint64_t)v41;
    v25[2].n128_u64[1] = v40;
    OUTLINED_FUNCTION_55_16();
    String.init(format:_:)();
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v1, &demangling cache variable for type metadata for Participant?);
LABEL_59:
  OUTLINED_FUNCTION_28();
}

uint64_t ScreenSharingSpectatorViewModel.isContentTransformEnabled.getter()
{
  if (static Platform.current.getter()) {
    return 1;
  }
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_31_32();
  v1();
  BOOL v0 = (v3 >> 61) - 5 < 0xFFFFFFFD;
  outlined consume of RemoteControlState(v3);
  return v0;
}

uint64_t ScreenSharingSpectatorViewModel.contentOrientation.getter()
{
  uint64_t v1 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_17_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_3_2();
  if (((*(uint64_t (**)(void))(v7 + 800))() & 1) == 0) {
    return 1;
  }
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_32();
  v8();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v1))
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
    return 0;
  }
  else
  {
    _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v6, v0, (void (*)(void))type metadata accessor for Participant);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
    uint64_t v9 = Participant.deviceOrientation.getter();
    _s15ConversationKit11ParticipantVWOhTm_9(v0, (void (*)(void))type metadata accessor for Participant);
  }
  return v9;
}

double ScreenSharingSpectatorViewModel.contentSize.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_36();
  uint64_t v5 = v3 - v4;
  MEMORY[0x1F4188790](v6);
  os_log_type_t v8 = (char *)v32 - v7;
  uint64_t v9 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_13_13();
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)v32 - v12;
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_32();
  v14();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for Participant?);
    return 0.0;
  }
  outlined init with take of Participant((uint64_t)v8, (uint64_t)v13);
  uint64_t v16 = ScreenSharingSpectatorViewModel.contentOrientation.getter();
  if ((v17 & 1) == 0)
  {
    if ((v16 | 2) == 3)
    {
      Participant.aspectRatio.getter();
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for AspectRatio?);
      if ((v36 & 1) == 0)
      {
        outlined init with take of AspectRatio((uint64_t)v35, (uint64_t)v37);
        outlined init with take of AspectRatio((uint64_t)v37, (uint64_t)v38);
        double v15 = 1.0;
        if ((v39 & 1) == 0) {
          double v15 = *(double *)v38;
        }
LABEL_17:
        _s15ConversationKit11ParticipantVWOhTm_9((uint64_t)v13, (void (*)(void))type metadata accessor for Participant);
        return v15;
      }
    }
    else
    {
      Participant.aspectRatio.getter();
      outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for AspectRatio?);
      if ((v36 & 1) == 0)
      {
        outlined init with take of AspectRatio((uint64_t)v35, (uint64_t)v37);
        outlined init with take of AspectRatio((uint64_t)v37, (uint64_t)v38);
        double v15 = 1.0;
        if ((v39 & 1) == 0) {
          double v15 = *(double *)&v38[2];
        }
        goto LABEL_17;
      }
    }
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationKit);
  _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v13, v0, (void (*)(void))type metadata accessor for Participant);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (_DWORD *)OUTLINED_FUNCTION_37();
    v38[0] = OUTLINED_FUNCTION_9_0();
    *id v21 = 136315138;
    v32[1] = v21 + 1;
    uint64_t v33 = type metadata accessor for Participant;
    _s15ConversationKit11ParticipantVWOcTm_15(v0, v5, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload(v5, 0, 1, v9);
    uint64_t v22 = specialized >> prefix<A>(_:)();
    unint64_t v24 = v23;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v5, &demangling cache variable for type metadata for Participant?);
    v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = v0;
    uint64_t v26 = v33;
    _s15ConversationKit11ParticipantVWOhTm_9(v25, (void (*)(void))v33);
    OUTLINED_FUNCTION_59(&dword_1C2F90000, v27, v28, "Couldn't determine participant orientation or size, falling back to a square aspect ratio for participant: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();

    uint64_t v29 = (uint64_t)v13;
    uint64_t v30 = v26;
  }
  else
  {

    _s15ConversationKit11ParticipantVWOhTm_9(v0, (void (*)(void))type metadata accessor for Participant);
    uint64_t v29 = (uint64_t)v13;
    uint64_t v30 = type metadata accessor for Participant;
  }
  _s15ConversationKit11ParticipantVWOhTm_9(v29, (void (*)(void))v30);
  return 1.0;
}

double ScreenSharingSpectatorViewModel.contentScale.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_16_0();
  uint64_t v3 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_32();
  v7();
  if (__swift_getEnumTagSinglePayload(v0, 1, v3) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0, &demangling cache variable for type metadata for Participant?);
    return 1.0;
  }
  outlined init with take of Participant(v0, (uint64_t)v6);
  Participant.screenInfo.getter(v13);
  if (v14 == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
  }
  else
  {
    if ((v17 & 1) == 0)
    {
      double v9 = v16;
      outlined destroy of Participant.ScreenInfo((uint64_t)v13);
      goto LABEL_9;
    }
    outlined destroy of Participant.ScreenInfo((uint64_t)v13);
  }
  double v9 = 1.0;
LABEL_9:
  Participant.screenInfo.getter(v13);
  if (v14 == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    double v10 = 1.0;
  }
  else
  {
    double v10 = v15;
    outlined destroy of Participant.ScreenInfo((uint64_t)v13);
  }
  double v8 = v9 * v10;
  _s15ConversationKit11ParticipantVWOhTm_9((uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
  return v8;
}

uint64_t ScreenSharingSpectatorViewModel.cornerRadius.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v12[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_32();
  v7();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1) {
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4, &demangling cache variable for type metadata for Participant?);
  }
  outlined init with take of Participant((uint64_t)v4, v0);
  Participant.screenInfo.getter(v12);
  if (v12[3] == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OUTLINED_FUNCTION_50();
    (*(void (**)(void))(v9 + 392))();
  }
  else
  {
    if (v15 & 1) == 0 && (v13)
    {
      switch(v14)
      {
        case 0:
        case 1:
        case 3:
        case 4:
          break;
        case 2:
          Participant.ScreenInfo.isMaybeTouchIDDevice()();
          break;
        default:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUScreenShareDeviceFamily?);
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          JUMPOUT(0x1C3512F94);
      }
    }
    outlined destroy of Participant.ScreenInfo((uint64_t)v12);
  }
  OUTLINED_FUNCTION_13_30();
  OUTLINED_FUNCTION_83_0();
  v10();
  return _s15ConversationKit11ParticipantVWOhTm_9(v0, (void (*)(void))type metadata accessor for Participant);
}

uint64_t ScreenSharingSpectatorViewModel.bezelEffects.getter()
{
  uint64_t v8 = MEMORY[0x1E4FBC870];
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v0 + 856))()) {
    specialized Set._Variant.insert(_:)(&v5, 0);
  }
  OUTLINED_FUNCTION_13_30();
  OUTLINED_FUNCTION_83_0();
  if ((v1() & 1) == 0)
  {
    OUTLINED_FUNCTION_13_30();
    OUTLINED_FUNCTION_83_0();
    if ((v2() & 1) == 0)
    {
      specialized Set._Variant.insert(_:)(&v7, 1u);
      OUTLINED_FUNCTION_4_19();
      OUTLINED_FUNCTION_83_0();
      v3();
      if (v6[1] == 1) {
        specialized Set._Variant.insert(_:)(v6, 2u);
      }
    }
  }
  return v8;
}

uint64_t ScreenSharingSpectatorViewModel.bezelShieldMaterial.getter()
{
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_31_32();
  v0();
  OUTLINED_FUNCTION_3_2();
  char v2 = (*(uint64_t (**)(void))(v1 + 504))();
  if (v6 >> 61 == 4)
  {
    char v3 = v2;
    int v4 = *(unsigned __int8 *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    outlined consume of RemoteControlState(v6);
    if (!(v3 & 1 | (v4 != 2))) {
      return 1;
    }
  }
  else
  {
    outlined consume of RemoteControlState(v6);
  }
  return 0;
}

uint64_t ScreenSharingSpectatorViewModel.shouldShowModalOverlay.getter()
{
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v0 + 312))()) {
    return 0;
  }
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_31_32();
  v2();
  OUTLINED_FUNCTION_3_2();
  char v4 = (*(uint64_t (**)(void))(v3 + 504))();
  switch(v6 >> 61)
  {
    case 1uLL:
      outlined consume of RemoteControlState(v6);
      goto LABEL_11;
    case 2uLL:
      outlined consume of RemoteControlState(v6);
      goto LABEL_10;
    case 4uLL:
      int v5 = *(unsigned __int8 *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      outlined consume of RemoteControlState(v6);
      if (v5 != 2) {
        return 0;
      }
      goto LABEL_11;
    case 5uLL:
      if (v6 != 0xA000000000000000 && v6 != 0xA000000000000010) {
        goto LABEL_12;
      }
LABEL_10:
      if ((v4 & 1) == 0) {
        return 0;
      }
LABEL_11:
      uint64_t result = 1;
      break;
    default:
LABEL_12:
      outlined consume of RemoteControlState(v6);
      return 0;
  }
  return result;
}

BOOL ScreenSharingSpectatorViewModel.shouldShowHomeButton.getter()
{
  uint64_t v1 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_17_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  unint64_t v6 = (unint64_t *)((char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(unint64_t *__return_ptr))(v7 + 648))(v15);
  unsigned int v8 = (v15[0] >> 61) - 2;
  outlined consume of RemoteControlState(v15[0]);
  if (v8 > 2) {
    return 0;
  }
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_34_32();
  v9();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v1))
  {
    double v10 = &demangling cache variable for type metadata for Participant?;
    uint64_t v11 = v6;
LABEL_6:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, v10);
    return 0;
  }
  _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v6, v0, (void (*)(void))type metadata accessor for Participant);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
  Participant.screenInfo.getter(v15);
  _s15ConversationKit11ParticipantVWOhTm_9(v0, (void (*)(void))type metadata accessor for Participant);
  if (v15[3] == 1)
  {
    double v10 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
    uint64_t v11 = v15;
    goto LABEL_6;
  }
  if ((v16 & 1) == 0)
  {
    unint64_t v13 = v15[24];
    outlined destroy of Participant.ScreenInfo((uint64_t)v15);
    return v13 - 1 < 2;
  }
  outlined destroy of Participant.ScreenInfo((uint64_t)v15);
  return 0;
}

Swift::Void __swiftcall ScreenSharingSpectatorViewModel.handleHomeButtonTapped()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = type metadata accessor for SystemGestureEvent();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  unint64_t v6 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel_interactionController))
                           + 0xF8);
  uint64_t v7 = v6();
  if (v7)
  {
    unsigned int v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 280))(v7);
    swift_release();
    if (v8)
    {
      if (one-time initialization token for screenSharing != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.screenSharing);
      swift_retain_n();
      double v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        os_log_type_t v16 = v11;
        char v17 = v10;
        uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_37();
        uint64_t v18 = OUTLINED_FUNCTION_9_0();
        *(_DWORD *)uint64_t v12 = 136315138;
        if (v6())
        {
          type metadata accessor for ScreenSharingInteractionSession();
          uint64_t v13 = String.init<A>(reflecting:)();
          unint64_t v15 = v14;
        }
        else
        {
          unint64_t v15 = 0xE300000000000000;
          uint64_t v13 = 7104878;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v17, v16, "Sending home button event to remote control session: %s", v12, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, *MEMORY[0x1E4F99D00], v2);
      CaptureUIInteraction.sendHardwareGesture(_:)();

      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
    }
  }
  OUTLINED_FUNCTION_28();
}

Swift::Void __swiftcall ScreenSharingSpectatorViewModel.requestOrEndRemoteControl()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v27 = v0;
  uint64_t v28 = v1;
  OUTLINED_FUNCTION_50();
  v2 += 81;
  uint64_t v3 = *v2;
  ((void (*)(unint64_t *__return_ptr))*v2)(&v22);
  int v4 = 1 << (v22 >> 61);
  if ((v4 & 0xB) != 0)
  {
    outlined consume of RemoteControlState(v22);
    goto LABEL_3;
  }
  if ((v4 & 0x14) == 0)
  {
    if (v22 == 0xA000000000000010)
    {
      OUTLINED_FUNCTION_13_30();
      OUTLINED_FUNCTION_83_0();
      v20();
LABEL_14:
      OUTLINED_FUNCTION_22();
      return;
    }
LABEL_3:
    if (one-time initialization token for screenSharing != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_51_18(v5, (uint64_t)static Log.screenSharing);
    unint64_t v6 = (void *)Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_84_4(v7))
    {
      OUTLINED_FUNCTION_37();
      unint64_t v22 = OUTLINED_FUNCTION_9_0();
      OUTLINED_FUNCTION_28_41(4.8149e-34);
      v3();
      uint64_t v8 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, (uint64_t *)&v22);
      OUTLINED_FUNCTION_0_11();
      OUTLINED_FUNCTION_33_8();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_30_31(&dword_1C2F90000, v10, v11, "Unexpected user interaction to start/end screen sharing in current state %s");
      OUTLINED_FUNCTION_78_0();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {

      OUTLINED_FUNCTION_33_8();
    }
    goto LABEL_14;
  }
  outlined consume of RemoteControlState(v22);
  OUTLINED_FUNCTION_13_30();
  OUTLINED_FUNCTION_22();
  v12(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22, v23, v24, v25, v26);
}

Swift::Void __swiftcall ScreenSharingSpectatorViewModel.requestRemoteControl()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v1 = OUTLINED_FUNCTION_8(v0);
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v2 + 272))(0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_0_53(v3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
}

uint64_t closure #1 in ScreenSharingSpectatorViewModel.requestRemoteControl()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteControlRequest?);
  v0[5] = swift_task_alloc();
  v0[6] = type metadata accessor for RemoteControlRequest(0);
  v0[7] = swift_task_alloc();
  v0[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ScreenSharingSpectatorViewModel.requestRemoteControl(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  void *v15;
  uint64_t (*v17)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  UUID.init()();
  Date.init()();
  if (one-time initialization token for screenSharing != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v3, (uint64_t)static Log.screenSharing);
  _s15ConversationKit11ParticipantVWOcTm_15(v2, v1, (void (*)(void))type metadata accessor for RemoteControlRequest);
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  unint64_t v6 = os_log_type_enabled(v4, v5);
  os_log_type_t v7 = v0[7];
  if (v6)
  {
    uint64_t v8 = v0[5];
    unint64_t v9 = v0[6];
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v18 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v10 = 136446210;
    _s15ConversationKit11ParticipantVWOcTm_15(v7, v8, (void (*)(void))type metadata accessor for RemoteControlRequest);
    __swift_storeEnumTagSinglePayload(v8, 0, 1, v9);
    uint64_t v11 = specialized >> prefix<A>(_:)();
    uint64_t v13 = v12;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v8, &demangling cache variable for type metadata for RemoteControlRequest?);
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s15ConversationKit11ParticipantVWOhTm_9(v7, (void (*)(void))type metadata accessor for RemoteControlRequest);
    _os_log_impl(&dword_1C2F90000, v4, v5, "Sending remote control request %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    _s15ConversationKit11ParticipantVWOhTm_9(v0[7], (void (*)(void))type metadata accessor for RemoteControlRequest);
  }

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v14 = *(int **)((*MEMORY[0x1E4FBC8C8] & *(void *)static ScreenSharingInteractionController.shared) + 0x228);
  uint64_t v17 = (uint64_t (*)(void))((char *)v14 + *v14);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[10] = v15;
  *uint64_t v15 = v0;
  v15[1] = closure #1 in ScreenSharingSpectatorViewModel.requestRemoteControl();
  return v17();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_0_5();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v3 = v2;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = closure #1 in ScreenSharingSpectatorViewModel.requestRemoteControl();
  }
  else {
    uint64_t v5 = closure #1 in ScreenSharingSpectatorViewModel.requestRemoteControl();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_17_2();
  _s15ConversationKit11ParticipantVWOhTm_9(*(void *)(v0 + 64), (void (*)(void))type metadata accessor for RemoteControlRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v1();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  void *v18;
  uint64_t v19;

  uint64_t v18 = v0;
  uint64_t v1 = (void *)v0[11];
  _s15ConversationKit11ParticipantVWOhTm_9(v0[8], (void (*)(void))type metadata accessor for RemoteControlRequest);
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (void *)v0[11];
    os_log_type_t v7 = (_DWORD *)OUTLINED_FUNCTION_37();
    uint64_t v8 = OUTLINED_FUNCTION_9_0();
    *os_log_type_t v7 = 136315138;
    uint64_t v17 = v8;
    v0[2] = v6;
    unint64_t v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v12, v13, "Error sending remote control request %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v14 = (void *)v0[11];
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v15();
}

Swift::Void __swiftcall ScreenSharingSpectatorViewModel.endRemoteControl()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0
                                                                  + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel_interactionController))
                            + 0x208))();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 408))(v1))
  {
    AnyCancellable.cancel()();
    swift_release();
  }
}

Swift::Void __swiftcall ScreenSharingSpectatorViewModel.cancelOrEndRemoteControl()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v26 = v0;
  uint64_t v27 = v1;
  OUTLINED_FUNCTION_50();
  v2 += 81;
  uint64_t v3 = *v2;
  ((void (*)(unint64_t *__return_ptr))*v2)(&v21);
  switch(v21 >> 61)
  {
    case 1uLL:
      outlined consume of RemoteControlState(v21);
      OUTLINED_FUNCTION_0_3();
      (*(void (**)(void))(v19 + 512))();
      goto LABEL_12;
    case 2uLL:
    case 4uLL:
      outlined consume of RemoteControlState(v21);
      OUTLINED_FUNCTION_13_30();
      OUTLINED_FUNCTION_22();
      v11(v11, v12, v13, v14, v15, v16, v17, v18, v20, v21, v22, v23, v24, v25);
      return;
    case 5uLL:
      goto LABEL_3;
    default:
      outlined consume of RemoteControlState(v21);
LABEL_3:
      if (one-time initialization token for screenSharing != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      OUTLINED_FUNCTION_51_18(v4, (uint64_t)static Log.screenSharing);
      uint64_t v5 = (void *)Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_84_4(v6))
      {
        OUTLINED_FUNCTION_37();
        unint64_t v21 = OUTLINED_FUNCTION_9_0();
        OUTLINED_FUNCTION_28_41(4.8149e-34);
        v3();
        uint64_t v7 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)&v21);
        OUTLINED_FUNCTION_0_11();
        OUTLINED_FUNCTION_33_8();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30_31(&dword_1C2F90000, v9, v10, "Unexpected user interaction to start/end screen sharing in current state %s");
        OUTLINED_FUNCTION_78_0();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {

        OUTLINED_FUNCTION_33_8();
      }
LABEL_12:
      OUTLINED_FUNCTION_22();
      return;
  }
}

uint64_t ScreenSharingSpectatorViewModel.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ScreenSharingSpectatorViewModel.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ScreenSharingSpectatorViewModel.deinit()
{
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__broadcastingParticipant, &demangling cache variable for type metadata for Participant?);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of RemoteControlState(*(void *)(v0
                                                   + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlState));
  swift_release();

  type metadata accessor for ObservationRegistrar();
  OUTLINED_FUNCTION_0();
  uint64_t v1 = OUTLINED_FUNCTION_28_6();
  v2(v1);
  return v0;
}

uint64_t ScreenSharingSpectatorViewModel.__deallocating_deinit()
{
  ScreenSharingSpectatorViewModel.deinit();
  OUTLINED_FUNCTION_3_2();
  return swift_deallocClassInstance();
}

void ScreenSharingSpectatorViewModel.screenSharingStateMonitorDidUpdateScreenInfoForParticipant(_:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_36();
  uint64_t v7 = v5 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v66 - v9;
  uint64_t v11 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_36();
  uint64_t v15 = v13 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v66 - v17;
  type metadata accessor for ScreenSharingStateMonitor();
  uint64_t v19 = (void *)swift_dynamicCastClass();
  if (v19)
  {
    unint64_t v68 = v0;
    uint64_t v20 = *MEMORY[0x1E4FBC8C8] & *v19;
    uint64_t v21 = v2;
    uint64_t v22 = *(void (**)(uint64_t))(v20 + 264);
    uint64_t v69 = v21;
    uint64_t v23 = swift_unknownObjectRetain();
    v22(v23);
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for Participant?);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationKit);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_84_4(v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl(&dword_1C2F90000, v25, (os_log_type_t)v18, "Couldn't find active participant, not updating screen sharing view.", v27, 2u);
        OUTLINED_FUNCTION_3();
      }

      __swift_storeEnumTagSinglePayload(v7, 1, 1, v11);
      OUTLINED_FUNCTION_50();
      (*(void (**)(uint64_t))(v28 + 224))(v7);
      goto LABEL_23;
    }
    outlined init with take of Participant((uint64_t)v10, (uint64_t)v18);
    char v37 = Participant.screenState.getter();
    _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v18, v15, (void (*)(void))type metadata accessor for Participant);
    if (v37 == 2)
    {
      _s15ConversationKit11ParticipantVWOhTm_9(v15, (void (*)(void))type metadata accessor for Participant);
    }
    else
    {
      char v38 = Participant.isReceivingScreenFrames.getter();
      _s15ConversationKit11ParticipantVWOhTm_9(v15, (void (*)(void))type metadata accessor for Participant);
      if (v38)
      {
        Participant.screenProvider.getter((uint64_t)v74);
        if (v74[3])
        {
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?);
          char v39 = v68;
          OUTLINED_FUNCTION_34_32();
          v40();
          Participant.requiresScreenInfoUpdate(from:)();
          char v42 = v41;
          outlined destroy of OS_dispatch_queue.SchedulerOptions?(v7, &demangling cache variable for type metadata for Participant?);
          if ((v42 & 1) == 0) {
            goto LABEL_22;
          }
          _s15ConversationKit11ParticipantVWOcTm_15((uint64_t)v18, v7, (void (*)(void))type metadata accessor for Participant);
          __swift_storeEnumTagSinglePayload(v7, 0, 1, v11);
          (*(void (**)(uint64_t))(*(void *)v39 + 224))(v7);
          Participant.screenInfo.getter(v74);
          if (one-time initialization token for screenSharing != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          uint64_t v44 = __swift_project_value_buffer(v43, (uint64_t)static Log.screenSharing);
          outlined init with copy of FeatureEligibility?((uint64_t)v74, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          unint64_t v67 = (_DWORD *)v44;
          uint64_t v45 = Logger.logObject.getter();
          os_log_type_t v46 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v45, v46))
          {
            uint64_t v47 = (uint8_t *)OUTLINED_FUNCTION_37();
            id v71 = (id)OUTLINED_FUNCTION_9_0();
            *(_DWORD *)uint64_t v47 = 136315138;
            id v66 = v47 + 4;
            uint64_t v48 = specialized >> prefix<A>(_:)((uint64_t)v72);
            uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v71);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
            _os_log_impl(&dword_1C2F90000, v45, v46, "Received broadcaster screen info %s", v47, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();
          }
          else
          {
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          }

          id v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v51, v52))
          {
            unint64_t v53 = (_DWORD *)OUTLINED_FUNCTION_37();
            v72[0] = OUTLINED_FUNCTION_9_0();
            _DWORD *v53 = 136315138;
            unint64_t v67 = v53 + 1;
            id v71 = objc_msgSend(self, sel_currentDeviceFamily);
            type metadata accessor for TUScreenShareDeviceFamily(0);
            uint64_t v54 = String.init<A>(reflecting:)();
            id v71 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v72);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_59(&dword_1C2F90000, v56, v57, "Local user device type is %s");
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();
          }

          outlined init with copy of FeatureEligibility?((uint64_t)v74, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          if (v72[3] == 1)
          {
            swift_unknownObjectRelease();
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
          }
          else
          {
            if (v73)
            {
              outlined destroy of Participant.ScreenInfo((uint64_t)v72);
            }
            else
            {
              uint64_t v58 = v72[23];
              outlined destroy of Participant.ScreenInfo((uint64_t)v72);
              uint64_t v59 = (uint8_t *)objc_msgSend(self, sel_currentDeviceFamily);
              id v60 = v68;
              uint64_t v61 = ScreenSharingSpectatorViewModel.requirmentsLock.getter();
              MEMORY[0x1F4188790](v61);
              *(&v66 - 4) = v59;
              *(&v66 - 3) = (uint8_t *)v58;
              *(&v66 - 2) = v60;
              MEMORY[0x1F4188790](v62);
              *(&v66 - 2) = (uint8_t *)partial apply for closure #1 in ScreenSharingSpectatorViewModel.screenSharingStateMonitorDidUpdateScreenInfoForParticipant(_:);
              *(&v66 - 1) = v63;
              uint64_t v65 = v64 + 4;
              os_unfair_lock_lock(v64 + 4);
              partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
              os_unfair_lock_unlock(v65);
              swift_release();
            }
            swift_unknownObjectRelease();
          }
          uint64_t v50 = (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?;
        }
        else
        {
          swift_unknownObjectRelease();
          uint64_t v50 = (uint64_t *)&demangling cache variable for type metadata for ParticipantVideoProvider?;
        }
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v74, v50);
        _s15ConversationKit11ParticipantVWOhTm_9((uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
        goto LABEL_24;
      }
    }
LABEL_22:
    _s15ConversationKit11ParticipantVWOhTm_9((uint64_t)v18, (void (*)(void))type metadata accessor for Participant);
LABEL_23:
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationKit);
  swift_unknownObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (_DWORD *)OUTLINED_FUNCTION_37();
    v74[0] = OUTLINED_FUNCTION_9_0();
    _DWORD *v32 = 136315138;
    swift_getObjectType();
    uint64_t v33 = _typeName(_:qualified:)();
    v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v35, v36, "screenSharingStateMonitorDidUpdateScreenInfoForParticipant(_:) was unexpectedly passed a %s");
    OUTLINED_FUNCTION_78_0();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
LABEL_24:
  OUTLINED_FUNCTION_28();
}

#error "1C35151B4: call analysis failed (funcsize=141)"

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  OUTLINED_FUNCTION_49_0();
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  *(void *)(v1 + 56) = v0;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v1 + 64) = v12;
  *(void *)(v1 + 72) = *(void *)(v12 - 8);
  *(void *)(v1 + 80) = swift_task_alloc();
  *(void *)(v1 + 88) = swift_task_alloc();
  *(void *)(v1 + 40) = v11;
  *(void *)(v1 + 48) = v9;
  *(void *)(v1 + 16) = v7;
  *(void *)(v1 + 24) = v5;
  *(unsigned char *)(v1 + 32) = v3 & 1;
  return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[10];
  char v2 = v0[8];
  char v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
  dispatch thunk of Clock.now.getter();
  _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x1E4FBD178]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return MEMORY[0x1F4188178](v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_5();
  char v3 = v2;
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v4[12];
  uint64_t v6 = v4[11];
  uint64_t v7 = v4[8];
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v9 = v8;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  v5(v6, v7);
  if (v0)
  {
    return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v8 + 8);
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_17_2();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6();
  return v0();
}

void *specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t result = a2(&v4);
  if (!v2) {
    return (void *)v4;
  }
  return result;
}

uint64_t sub_1C3515BC4()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.broadcastingParticipant.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.broadcastingParticipant.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for ScreenSharingSpectatorViewModel()
{
  uint64_t result = type metadata singleton initialization cache for ScreenSharingSpectatorViewModel;
  if (!type metadata singleton initialization cache for ScreenSharingSpectatorViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3515C6C()
{
  OUTLINED_FUNCTION_50();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 264))();
  return OUTLINED_FUNCTION_36_3(v1);
}

uint64_t sub_1C3515CBC()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.isZoomEnabled.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.isZoomEnabled.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1C3515D28()
{
  OUTLINED_FUNCTION_50();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 312))();
  return OUTLINED_FUNCTION_36_3(v1);
}

uint64_t sub_1C3515D78()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.isPipped.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.isPipped.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1C3515DE4()
{
  OUTLINED_FUNCTION_50();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 360))();
  return OUTLINED_FUNCTION_36_3(v1);
}

uint64_t sub_1C3515E34()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.disableRequestButton.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.disableRequestButton.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1C3515EA0@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 408))();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.activeParticipantObserver.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.activeParticipantObserver.setter(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__activeParticipantObserver);
}

uint64_t sub_1C3515F18@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 456))();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.sessionObserver.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.activeParticipantObserver.setter(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__sessionObserver);
}

uint64_t sub_1C3515F90()
{
  OUTLINED_FUNCTION_50();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 504))();
  return OUTLINED_FUNCTION_36_3(v1);
}

uint64_t sub_1C3515FE0()
{
  return ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.setter();
}

uint64_t sub_1C3516010@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 752))();
  *a1 = result;
  return result;
}

uint64_t sub_1C3516060()
{
  return ScreenSharingSpectatorViewModel.remoteControlRequirements.setter();
}

uint64_t sub_1C3516088()
{
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.requestRemoteControl()()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_10(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  return closure #1 in ScreenSharingSpectatorViewModel.requestRemoteControl()();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.screenSharingStateMonitorDidUpdateScreenInfoForParticipant(_:)()
{
  return closure #1 in ScreenSharingSpectatorViewModel.screenSharingStateMonitorDidUpdateScreenInfoForParticipant(_:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t lazy protocol witness table accessor for type RemoteControlRequirements and conformance RemoteControlRequirements()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements;
  if (!lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements;
  if (!lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements;
  if (!lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements;
  if (!lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteControlRequirements and conformance RemoteControlRequirements);
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteControlRequirements()
{
  return &type metadata for RemoteControlRequirements;
}

uint64_t ObjC metadata update function for ScreenSharingSpectatorViewModel()
{
  return type metadata accessor for ScreenSharingSpectatorViewModel();
}

void type metadata completion function for ScreenSharingSpectatorViewModel()
{
  type metadata accessor for Participant?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ScreenSharingSpectatorViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingSpectatorViewModel);
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.broadcastingParticipant.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.broadcastingParticipant.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.broadcastingParticipant.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isZoomEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isZoomEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isZoomEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isPipped.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isPipped.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isPipped.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.disableRequestButton.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.disableRequestButton.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.disableRequestButton.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.activeParticipantObserver.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.activeParticipantObserver.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.activeParticipantObserver.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.sessionObserver.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.sessionObserver.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.sessionObserver.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.remoteControlState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.remoteControlRequirements.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.__allocating_init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  return (*(uint64_t (**)(void))(v0 + 776))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.activeControlParticipant.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.statusText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.isContentTransformEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.contentSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.contentScale.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.cornerRadius.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.bezelEffects.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.bezelShieldMaterial.getter()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 848))() & 1;
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.shouldShowModalOverlay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.shouldShowHomeButton.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.handleHomeButtonTapped()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.requestOrEndRemoteControl()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.requestRemoteControl()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.endRemoteControl()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.cancelOrEndRemoteControl()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.access<A>(keyPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of ScreenSharingSpectatorViewModel.withMutation<A, B>(keyPath:_:)()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 920))();
}

#error "1C3516B10: call analysis failed (funcsize=15)"

uint64_t sub_1C3516B24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScreenSharingSpectatorViewModel.requirmentsLock.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.requirmentsLock.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.requirmentsLock.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.remoteControlState.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.remoteControlState.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3516B8C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  char v3 = (void *)OUTLINED_FUNCTION_10(v2);
  *char v3 = v4;
  v3[1] = partial apply for closure #2 in CallScreeningEndingState.enteredState();
  uint64_t v5 = OUTLINED_FUNCTION_18_10();
  return closure #1 in ScreenSharingSpectatorViewModel._remoteControlState.didset(v5, v6, v7, v1);
}

uint64_t _s15ConversationKit31ScreenSharingSpectatorViewModelCAC11Observation10ObservableAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3516CB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

__n128 partial apply for closure #1 in ScreenSharingSpectatorViewModel.remoteControlStateTransitionTime.setter()
{
  __n128 result = *(__n128 *)(v0 + 24);
  *(__n128 *)(*(void *)(v0 + 16)
            + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__remoteControlStateTransitionTime) = result;
  return result;
}

uint64_t sub_1C3516CFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.setter()
{
  return closure #1 in ScreenSharingSpectatorViewModel.isTransitioningRemoteControlStateTask.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in ScreenSharingSpectatorViewModel.isTransitioningRemoteControlState.setter()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC15ConversationKit31ScreenSharingSpectatorViewModel__isTransitioningRemoteControlState) = *(unsigned char *)(v0 + 24);
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_15(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t _s15ConversationKit11ParticipantVWOhTm_9(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = OUTLINED_FUNCTION_28_6();
  v4(v3);
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  return closure #1 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(v0);
}

uint64_t sub_1C3516E20()
{
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  return closure #2 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)();
}

uint64_t partial apply for closure #1 in closure #2 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  return closure #1 in closure #2 in closure #2 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(v0[2], v0[3], v0[4]);
}

void *specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<X0>(uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr)@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, a2);
  if (!v3)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v6 & 1;
  }
  return result;
}

void *partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, *(void *(**)(uint64_t *__return_ptr))(v2 + 16), a2);
}

uint64_t sub_1C3516ED0()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)()
{
  OUTLINED_FUNCTION_49_0();
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_10(v3);
  *uint64_t v4 = v5;
  v4[1] = partial apply for closure #1 in VideoMessageInboxController.updateCallItems();
  uint64_t v6 = OUTLINED_FUNCTION_18_10();
  return closure #1 in closure #1 in ScreenSharingSpectatorViewModel.init(serverBag:interactionController:screenSharingStateMonitor:)(v6, v7, v8, v2, v1);
}

uint64_t sub_1C3516FC0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C3516FF8()
{
  swift_release();

  OUTLINED_FUNCTION_75();
  return swift_deallocObject();
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply()
{
  return partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
}

uint64_t CNKBannerPresentationManager.presentationDelegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0xE8);
  uint64_t v3 = v1;
  uint64_t v4 = v2();

  return v4;
}

void CNKBannerPresentationManager.presentationDelegate.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_3_11();
  uint64_t v3 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)*v1) + 0xF0);
  id v4 = *v1;
  v3(a1);
}

id key path getter for CNKBannerPresentationManager.presentationDelegate : CNKBannerPresentationManager@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_presentationDelegate);
  *a2 = result;
  return result;
}

uint64_t CNKBannerPresentationManager.audioRoutingDelegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 256);
  id v4 = v3;
  OUTLINED_FUNCTION_8_75();
  uint64_t v5 = v2();

  return v5;
}

void CNKBannerPresentationManager.audioRoutingDelegate.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_11_65();
  OUTLINED_FUNCTION_14_2();
  id v3 = *(void (**)(uint64_t))(v2 + 264);
  id v5 = v4;
  v3(a1);
}

id key path getter for CNKBannerPresentationManager.audioRoutingDelegate : CNKBannerPresentationManager@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_audioRoutingDelegate);
  *a2 = result;
  return result;
}

uint64_t CNKBannerPresentationManager.handedOffCall.getter()
{
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 328);
  id v4 = v3;
  OUTLINED_FUNCTION_8_75();
  uint64_t v5 = v2();

  return v5;
}

void CNKBannerPresentationManager.handedOffCall.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_11_65();
  OUTLINED_FUNCTION_14_2();
  id v3 = *(void (**)(uint64_t))(v2 + 336);
  id v5 = v4;
  v3(a1);
}

id key path getter for CNKBannerPresentationManager.handedOffCall : CNKBannerPresentationManager@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_handedOffCall);
  *a2 = result;
  return result;
}

uint64_t CNKBannerPresentationManager.inCallControlsVisible.getter()
{
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 536);
  id v4 = v3;
  OUTLINED_FUNCTION_8_75();
  char v5 = v2();

  return v5 & 1;
}

uint64_t CNKBannerPresentationManager.isMicIndicatorVisible.getter()
{
  return CNKBannerPresentationManager.isMicIndicatorVisible.getter(BannerPresentationManager.isMicIndicatorVisible.getter);
}

uint64_t CNKBannerPresentationManager.onlyHasPlaceholderCall.getter()
{
  return CNKBannerPresentationManager.isMicIndicatorVisible.getter(BannerPresentationManager.onlyHasPlaceholderCall.getter);
}

void CNKBannerPresentationManager.conversationIsAVLess.getter()
{
  OUTLINED_FUNCTION_9_83();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 384);
  id v4 = v3;
  OUTLINED_FUNCTION_3_122();
  char v5 = (void *)v2();

  if (v5)
  {
    OUTLINED_FUNCTION_5_13();
    (*(void (**)(void))(v6 + 800))();
  }
  OUTLINED_FUNCTION_10_73();
}

void CNKBannerPresentationManager.localAudioTogglingDelegate.getter()
{
  OUTLINED_FUNCTION_9_83();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 384);
  id v4 = v3;
  OUTLINED_FUNCTION_3_122();
  char v5 = (void *)v2();

  if (v5)
  {
    OUTLINED_FUNCTION_5_13();
    (*(void (**)(void))(v6 + 1144))();
  }
  OUTLINED_FUNCTION_10_73();
}

void CNKBannerPresentationManager.localAudioTogglingDelegate.setter()
{
  OUTLINED_FUNCTION_9_83();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_11_65();
  OUTLINED_FUNCTION_14_2();
  id v4 = *(uint64_t (**)(void))(v3 + 384);
  id v6 = v5;
  OUTLINED_FUNCTION_7_96();
  uint64_t v7 = (void *)v4();

  if (v7)
  {
    OUTLINED_FUNCTION_6_63();
    (*(void (**)(uint64_t))(v8 + 1152))(v2);
  }
  else
  {
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_10_73();
}

id key path getter for CNKBannerPresentationManager.localAudioTogglingDelegate : CNKBannerPresentationManager@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_localAudioTogglingDelegate);
  *a2 = result;
  return result;
}

void CNKBannerPresentationManager.placeholderCallGroupUUID.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_3_11();
  id v3 = *v1;
  BannerPresentationManager.placeholderCallGroupUUID.getter(a1);
}

Class @objc CNKBannerPresentationManager.placeholderCallGroupUUID.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = a1;
  a3();

  uint64_t v9 = type metadata accessor for UUID();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  }
  return isa;
}

void CNKBannerPresentationManager.callUUID.getter()
{
  OUTLINED_FUNCTION_9_83();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_11_65();
  OUTLINED_FUNCTION_14_2();
  id v4 = *(uint64_t (**)(void))(v3 + 384);
  id v6 = v5;
  OUTLINED_FUNCTION_7_96();
  uint64_t v7 = (void *)v4();

  if (v7)
  {
    OUTLINED_FUNCTION_6_63();
    (*(void (**)(void))(v8 + 632))();

    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  uint64_t v10 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload(v2, v9, 1, v10);
  OUTLINED_FUNCTION_10_73();
}

void CNKBannerPresentationManager.shouldShowCallDetailsWhenReady.getter()
{
  OUTLINED_FUNCTION_9_83();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 384);
  id v4 = v3;
  OUTLINED_FUNCTION_3_122();
  id v5 = (void *)v2();

  if (v5)
  {
    OUTLINED_FUNCTION_5_13();
    (*(void (**)(void))(v6 + 808))();
  }
  OUTLINED_FUNCTION_10_73();
}

void CNKBannerPresentationManager.applicationState.getter()
{
  OUTLINED_FUNCTION_9_83();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 384);
  id v4 = v3;
  OUTLINED_FUNCTION_3_122();
  id v5 = (void *)v2();

  if (v5)
  {
    OUTLINED_FUNCTION_5_13();
    (*(void (**)(void))(v6 + 2328))();
  }
  OUTLINED_FUNCTION_10_73();
}

void CNKBannerPresentationManager.applicationState.setter()
{
  OUTLINED_FUNCTION_9_83();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_11_65();
  OUTLINED_FUNCTION_14_2();
  id v4 = *(uint64_t (**)(void))(v3 + 384);
  id v6 = v5;
  OUTLINED_FUNCTION_7_96();
  uint64_t v7 = (void *)v4();

  if (v7)
  {
    OUTLINED_FUNCTION_6_63();
    (*(void (**)(uint64_t))(v8 + 2336))(v2);
  }
  OUTLINED_FUNCTION_10_73();
}

uint64_t CNKBannerPresentationManager.wantsBannerWithoutScene.getter()
{
  return CNKBannerPresentationManager.isMicIndicatorVisible.getter(BannerPresentationManager.wantsBannerWithoutScene.getter);
}

uint64_t CNKBannerPresentationManager.isMicIndicatorVisible.getter(uint64_t (*a1)(void))
{
  OUTLINED_FUNCTION_3_11();
  id v3 = *v1;
  LOBYTE(a1) = a1();

  return a1 & 1;
}

uint64_t CNKBannerPresentationManager.activeCall.getter()
{
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 352);
  id v4 = v3;
  OUTLINED_FUNCTION_8_75();
  uint64_t v5 = v2();

  return v5;
}

BOOL CNKBannerPresentationManager.hasAssociatedCall.getter()
{
  OUTLINED_FUNCTION_5_4();
  id v1 = *v0;
  id v2 = BannerPresentationManager.associatedCall.getter();

  if (v2) {
    swift_unknownObjectRelease();
  }
  return v2 != 0;
}

Swift::Void __swiftcall CNKBannerPresentationManager.presentSystemHUD()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.presentHUDForCurrentContext()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.showInCallHUD()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.showGreenTea3PHUD()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.showPTTHUD()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.showRemoteParticipantNoticeIfNeeded()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.showAccessoryButtonEventsNoticeIfNeeded()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.showHandoffHUD()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.showLagunaPullConversationHUD()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.presentReminderNotice()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.preloadCallChanges()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.bannerDismissedBySpringBoard()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.refreshShareableContentWithBundleIdentifier(_:)(Swift::String_optional a1)
{
  object = a1.value._object;
  uint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_11_65();
  OUTLINED_FUNCTION_14_2();
  id v4 = *(uint64_t (**)(void))(v3 + 384);
  id v6 = v5;
  uint64_t v7 = (void *)v4();

  if (v7)
  {
    OUTLINED_FUNCTION_6_63();
    (*(void (**)(uint64_t, void *))(v8 + 1960))(countAndFlagsBits, object);
  }
}

Swift::Void __swiftcall CNKBannerPresentationManager.dismissPresentedBanner(forReason:animated:)(Swift::String forReason, Swift::Bool animated)
{
  object = forReason._object;
  uint64_t countAndFlagsBits = forReason._countAndFlagsBits;
  OUTLINED_FUNCTION_3_11();
  id v6 = *v2;
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
  objc_msgSend(v6, sel_dismissPresentedBannerForReason_animated_, v7, animated);
}

Swift::Void __swiftcall CNKBannerPresentationManager.invalidatePersistentSystemApertureAlert(reason:)(Swift::String reason)
{
  object = reason._object;
  uint64_t countAndFlagsBits = reason._countAndFlagsBits;
  OUTLINED_FUNCTION_3_11();
  id v4 = *v1;
  id v5 = (void *)MEMORY[0x1C87730B0](countAndFlagsBits, object);
  objc_msgSend(v4, sel_invalidatePersistentSystemApertureAlertWithReason_, v5);
}

Swift::Void __swiftcall CNKBannerPresentationManager.didUpdatePresentationModeToFullScreen()()
{
}

Swift::Void __swiftcall CNKBannerPresentationManager.didUpdatePresentationModeToDismissed()()
{
}

id CNKBannerPresentationManager.didUpdatePresentationModeToFullScreen()(SEL *a1)
{
  OUTLINED_FUNCTION_3_11();
  return [*v1 *a1];
}

uint64_t CNKBannerPresentationManager.makeSystemApertureElementProvider()()
{
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  id v2 = *(uint64_t (**)(void))(v1 + 472);
  id v4 = v3;
  OUTLINED_FUNCTION_8_75();
  uint64_t v5 = v2();

  return v5;
}

Swift::Void __swiftcall CNKBannerPresentationManager.handleLockScreenStatusChanged()()
{
}

void CNKBannerPresentationManager.presentSystemHUD()(void (*a1)(void))
{
  OUTLINED_FUNCTION_3_11();
  id v3 = *v1;
  a1();
}

uint64_t CNKBannerPresentationManager.conversationControlsManager.getter()
{
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_4_107();
  OUTLINED_FUNCTION_14_2();
  id v2 = *(uint64_t (**)(void))(v1 + 384);
  id v4 = v3;
  OUTLINED_FUNCTION_8_75();
  uint64_t v5 = v2();

  return v5;
}

id CNKBannerPresentationManager.value.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  return v1;
}

void CNKBannerPresentationManager.value.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___CNKBannerPresentationManager_value);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*CNKBannerPresentationManager.value.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

void __swiftcall CNKBannerPresentationManager.init()(CNKBannerPresentationManager *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_msgSend(v1, sel_init);
}

id CNKBannerPresentationManager.init()()
{
  objc_allocWithZone((Class)type metadata accessor for BannerPresentationManager());
  id v1 = v0;
  *(void *)&v1[OBJC_IVAR___CNKBannerPresentationManager_value] = BannerPresentationManager.init(delegate:)();

  v3.receiver = v1;
  v3.super_class = (Class)CNKBannerPresentationManager;
  return objc_msgSendSuper2(&v3, sel_init);
}

id CNKBannerPresentationManager.init(delegate:)(uint64_t a1)
{
  id v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDelegate_, a1);
  swift_unknownObjectRelease();
  return v1;
}

void CNKBannerPresentationManager.init(delegate:)()
{
  OUTLINED_FUNCTION_9_83();
  uint64_t v2 = v1;
  objc_super v3 = (char *)objc_msgSend(v0, sel_init);
  id v4 = (id *)&v3[OBJC_IVAR___CNKBannerPresentationManager_value];
  swift_beginAccess();
  uint64_t v5 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)*v4) + 0xF0);
  id v6 = *v4;
  v5(v2);

  OUTLINED_FUNCTION_10_73();
}

char *keypath_get_selector_presentationDelegate()
{
  return sel_presentationDelegate;
}

id sub_1C3518E24(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPresentationDelegate_, *a1);
}

char *keypath_get_selector_audioRoutingDelegate()
{
  return sel_audioRoutingDelegate;
}

id sub_1C3518E48(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAudioRoutingDelegate_, *a1);
}

char *keypath_get_selector_handedOffCall()
{
  return sel_handedOffCall;
}

id sub_1C3518E6C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHandedOffCall_, *a1);
}

char *keypath_get_selector_localAudioTogglingDelegate()
{
  return sel_localAudioTogglingDelegate;
}

id sub_1C3518E90(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLocalAudioTogglingDelegate_, *a1);
}

char *keypath_get_selector_applicationState()
{
  return sel_applicationState;
}

id sub_1C3518EB0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_applicationState);
  *a2 = result;
  return result;
}

id sub_1C3518EE4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setApplicationState_, *a1);
}

unint64_t type metadata accessor for CNKBannerPresentationManager()
{
  unint64_t result = lazy cache variable for type metadata for CNKBannerPresentationManager;
  if (!lazy cache variable for type metadata for CNKBannerPresentationManager)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNKBannerPresentationManager);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(char *))(a1 + 32);
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id NotificationObserver.notificationCenter.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t NotificationObserver.__allocating_init(name:notificationCenter:onNotificaiton:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  NotificationObserver.init(name:notificationCenter:onNotificaiton:)(a1, a2, a3, a4);
  return v8;
}

uint64_t NotificationObserver.init(name:notificationCenter:onNotificaiton:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a2;
  v11[4] = a3;
  v11[5] = a4;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v11[3] = &block_descriptor_88;
  uint64_t v7 = _Block_copy(v11);
  id v8 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v8, sel_addObserverForName_object_queue_usingBlock_, a1, v4, 0, v7);

  swift_release();
  _Block_release(v7);
  swift_unknownObjectRelease();

  swift_release();
  return v4;
}

uint64_t NotificationObserver.deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_removeObserver_, v0);

  return v0;
}

uint64_t NotificationObserver.__deallocating_deinit()
{
  NotificationObserver.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NotificationObserver()
{
  return self;
}

uint64_t method lookup function for NotificationObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NotificationObserver);
}

uint64_t dispatch thunk of NotificationObserver.__allocating_init(name:notificationCenter:onNotificaiton:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

id PushToTalkTalkButtonGestureRecognizer.__allocating_init(interval:maximumVerticalVelocity:target:action:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return PushToTalkTalkButtonGestureRecognizer.init(interval:maximumVerticalVelocity:target:action:)(a1, a2, a3, a4);
}

uint64_t PushToTalkTalkButtonGestureRecognizer.recognizedGestureWorkItem.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_recognizedGestureWorkItem) = a1;
  return swift_release();
}

id PushToTalkTalkButtonGestureRecognizer.init(interval:maximumVerticalVelocity:target:action:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_timer] = 0;
  uint64_t v9 = (uint64_t)&v4[OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_previous];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (location: CGPoint, time: Date));
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_recognizedGestureWorkItem] = 0;
  uint64_t v11 = &v4[OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_interval];
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_1_5();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  *(double *)&v4[OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_maximumVerticalVelocity] = a4;
  outlined init with copy of Environment<DynamicTypeSize>.Content(a2, (uint64_t)v30, &demangling cache variable for type metadata for Any?);
  uint64_t v15 = v31;
  if (v31)
  {
    __swift_project_boxed_opaque_existential_1(v30, v31);
    v28[1] = v28;
    OUTLINED_FUNCTION_5_3();
    uint64_t v16 = a1;
    uint64_t v17 = a3;
    uint64_t v19 = v18;
    MEMORY[0x1F4188790](v20);
    OUTLINED_FUNCTION_21();
    uint64_t v23 = v22 - v21;
    (*(void (**)(uint64_t))(v19 + 16))(v22 - v21);
    uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v15);
    a3 = v17;
    a1 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = (objc_class *)type metadata accessor for PushToTalkTalkButtonGestureRecognizer();
  v29.receiver = v4;
  v29.super_class = v25;
  id v26 = objc_msgSendSuper2(&v29, sel_initWithTarget_action_, v24, a3);
  swift_unknownObjectRelease();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a2, &demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v12);
  return v26;
}

uint64_t type metadata accessor for PushToTalkTalkButtonGestureRecognizer()
{
  uint64_t result = type metadata singleton initialization cache for PushToTalkTalkButtonGestureRecognizer;
  if (!type metadata singleton initialization cache for PushToTalkTalkButtonGestureRecognizer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id PushToTalkTalkButtonGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  return PushToTalkTalkButtonGestureRecognizer.touchesBegan(_:with:)(a1, a2, (SEL *)&selRef_touchesBegan_withEvent_);
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

id PushToTalkTalkButtonGestureRecognizer.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  return PushToTalkTalkButtonGestureRecognizer.touchesBegan(_:with:)(a1, a2, (SEL *)&selRef_touchesMoved_withEvent_);
}

id PushToTalkTalkButtonGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for PushToTalkTalkButtonGestureRecognizer();
  objc_msgSendSuper2(&v13, *a3, isa, a2);

  id v7 = objc_msgSend(v3, sel_view);
  objc_msgSend(v3, sel_locationInView_, v7);
  double v9 = v8;
  double v11 = v10;

  return PushToTalkTalkButtonGestureRecognizer.update(location:)(v9, v11);
}

uint64_t PushToTalkTalkButtonGestureRecognizer.touchesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  return PushToTalkTalkButtonGestureRecognizer.touchesEnded(_:with:)(a1, a2, (SEL *)&selRef_touchesEnded_withEvent_, 3);
}

uint64_t PushToTalkTalkButtonGestureRecognizer.touchesCancelled(_:with:)(uint64_t a1, uint64_t a2)
{
  return PushToTalkTalkButtonGestureRecognizer.touchesEnded(_:with:)(a1, a2, (SEL *)&selRef_touchesCancelled_withEvent_, 4);
}

uint64_t PushToTalkTalkButtonGestureRecognizer.touchesEnded(_:with:)(uint64_t a1, uint64_t a2, SEL *a3, uint64_t a4)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for PushToTalkTalkButtonGestureRecognizer();
  objc_msgSendSuper2(&v10, *a3, isa, a2);

  uint64_t result = (uint64_t)objc_msgSend(v4, sel_state);
  if (result <= 2) {
    return (uint64_t)objc_msgSend(v4, sel_setState_, a4);
  }
  return result;
}

uint64_t @objc PushToTalkTalkButtonGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PushToTalkTalkButtonGestureRecognizer.reset()()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for PushToTalkTalkButtonGestureRecognizer();
  objc_msgSendSuper2(&v7, sel_reset);
  objc_msgSend(v0, sel_setState_, 0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (location: CGPoint, time: Date)?);
  MEMORY[0x1F4188790](v1 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (location: CGPoint, time: Date));
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  uint64_t v6 = (uint64_t)&v0[OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_previous];
  swift_beginAccess();
  outlined assign with take of (location: CGPoint, time: Date)?(v4, v6);
  swift_endAccess();
  if (*(void *)&v0[OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_recognizedGestureWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
}

id PushToTalkTalkButtonGestureRecognizer.update(location:)(double a1, double a2)
{
  uint64_t v3 = (uint64_t)v2;
  id result = objc_msgSend(v2, sel_state);
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (location: CGPoint, time: Date));
    id v74 = v68;
    OUTLINED_FUNCTION_0();
    uint64_t v9 = *(void *)(v8 + 64);
    MEMORY[0x1F4188790](v10);
    unint64_t v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v12 = (double *)((char *)v68 - v11);
    uint64_t v14 = (char *)v68 + *(int *)(v13 + 48) - v11;
    *uint64_t v12 = a1;
    v12[1] = a2;
    uint64_t v69 = v14;
    uint64_t v15 = Date.init()();
    MEMORY[0x1F4188790](v15);
    uint64_t v16 = (double *)((char *)v68 - v11);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (location: CGPoint, time: Date)?);
    Swift::String v75 = v68;
    MEMORY[0x1F4188790](v17 - 8);
    unint64_t v70 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v71 = v18;
    uint64_t v19 = (double *)((char *)v68 - v70);
    uint64_t v20 = v3 + OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_previous;
    swift_beginAccess();
    uint64_t v72 = v20;
    outlined init with copy of Environment<DynamicTypeSize>.Content(v20, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (location: CGPoint, time: Date)?);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v7);
    uint64_t v73 = (uint64_t)v68 - v11;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (location: CGPoint, time: Date)?);
      uint64_t v22 = swift_allocObject();
      swift_unknownObjectWeakInit();
      aBlock[4] = partial apply for closure #1 in PushToTalkTalkButtonGestureRecognizer.update(location:);
      aBlock[5] = v22;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_89;
      _Block_copy(aBlock);
      Swift::String v75 = (void *)v7;
      type metadata accessor for DispatchWorkItemFlags();
      OUTLINED_FUNCTION_0();
      MEMORY[0x1F4188790](v23);
      OUTLINED_FUNCTION_21();
      uint64_t v76 = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v24 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      swift_release();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v25 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v26 = type metadata accessor for DispatchTime();
      OUTLINED_FUNCTION_5_3();
      uint64_t v28 = v27;
      MEMORY[0x1F4188790](v29);
      uint64_t v31 = (char *)v68 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1F4188790](v32);
      unint64_t v34 = (char *)v68 - v33;
      static DispatchTime.now()();
      MEMORY[0x1C8772E10](v34, v3 + OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_interval);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v28 + 8);
      v35(v34, v26);
      MEMORY[0x1C8773B20](v31, v24);

      v35(v31, v26);
      uint64_t v36 = swift_retain();
      PushToTalkTalkButtonGestureRecognizer.recognizedGestureWorkItem.setter(v36);
      uint64_t v37 = swift_release();
      MEMORY[0x1F4188790](v37);
      char v38 = (char *)v68 - v70;
      uint64_t v39 = v73;
      outlined init with copy of Environment<DynamicTypeSize>.Content(v73, (uint64_t)v68 - v70, &demangling cache variable for type metadata for (location: CGPoint, time: Date));
      __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, (uint64_t)v75);
      OUTLINED_FUNCTION_6_103();
      outlined assign with take of (location: CGPoint, time: Date)?((uint64_t)v38, v3);
      swift_endAccess();
      return (id)outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v39, &demangling cache variable for type metadata for (location: CGPoint, time: Date));
    }
    else
    {
      v68[1] = v68;
      uint64_t v40 = *(int *)(v7 + 48);
      char v41 = (char *)v16 + v40;
      char v42 = (char *)v19 + v40;
      double v43 = *v19;
      double v44 = v19[1];
      *uint64_t v16 = *v19;
      v16[1] = v44;
      uint64_t v45 = type metadata accessor for Date();
      OUTLINED_FUNCTION_1_5();
      unint64_t v70 = v3;
      uint64_t v46 = v7;
      uint64_t v48 = v47;
      uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v47 + 32))(v41, v42, v45);
      Swift::String v75 = v68;
      __n128 v50 = MEMORY[0x1F4188790](v49);
      id v51 = (double *)((char *)v68 - v11);
      os_log_type_t v52 = (char *)v68 + *(int *)(v46 + 48) - v11;
      *id v51 = v43;
      v51[1] = v44;
      unint64_t v53 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v48 + 16);
      uint64_t v54 = v53(v52, v41, v45, v50);
      __n128 v55 = MEMORY[0x1F4188790](v54);
      uint64_t v56 = (double *)((char *)v68 - v11);
      uint64_t v57 = v46;
      uint64_t v58 = v69;
      uint64_t v59 = v70;
      id v60 = (char *)v56 + *(int *)(v57 + 48);
      double *v56 = a1;
      v56[1] = a2;
      v53(v60, v58, v45, v55);
      PushToTalkTalkButtonGestureRecognizer.velocity(previous:current:)(v43, v44, a1, a2);
      double v62 = v61;
      uint64_t v63 = *(void (**)(void))(v48 + 8);
      OUTLINED_FUNCTION_12_1();
      v63();
      OUTLINED_FUNCTION_12_1();
      v63();
      if (*(double *)(v59
                     + OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_maximumVerticalVelocity) < fabs(v62))
      {
        if (*(void *)(v59
                       + OBJC_IVAR____TtC15ConversationKit37PushToTalkTalkButtonGestureRecognizer_recognizedGestureWorkItem))
        {
          swift_retain();
          dispatch thunk of DispatchWorkItem.cancel()();
          swift_release();
        }
      }
      uint64_t v64 = outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v16, &demangling cache variable for type metadata for (location: CGPoint, time: Date));
      MEMORY[0x1F4188790](v64);
      id v66 = (char *)v68 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v67 = v73;
      outlined init with copy of Environment<DynamicTypeSize>.Content(v73, (uint64_t)v66, &demangling cache variable for type metadata for (location: CGPoint, time: Date));
      __swift_storeEnumTagSinglePayload((uint64_t)v66, 0, 1, v57);
      OUTLINED_FUNCTION_6_103();
      outlined assign with take of (location: CGPoint, time: Date)?((uint64_t)v66, v59);
      swift_endAccess();
      return (id)outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v67, &demangling cache variable for type metadata for (location: CGPoint, time: Date));
    }
  }
  return result;
}

uint64_t outlined assign with take of (location: CGPoint, time: Date)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (location: CGPoint, time: Date)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void closure #1 in PushToTalkTalkButtonGestureRecognizer.update(location:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    objc_msgSend(v2, sel_setState_, 1);
  }
}

double PushToTalkTalkButtonGestureRecognizer.velocity(previous:current:)(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (location: CGPoint, time: Date));
  OUTLINED_FUNCTION_0();
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = (double *)((char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (char *)v12 + *(int *)(v13 + 48);
  *uint64_t v12 = a1;
  v12[1] = a2;
  uint64_t v15 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1_5();
  uint64_t v46 = v16;
  uint64_t v17 = *(uint64_t (**)(void))(v16 + 16);
  OUTLINED_FUNCTION_4_108();
  uint64_t v18 = v17();
  MEMORY[0x1F4188790](v18);
  unint64_t v47 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = (char *)v12 + *(int *)(v8 + 48);
  *uint64_t v12 = a3;
  v12[1] = a4;
  OUTLINED_FUNCTION_4_108();
  v17();
  if (static Date.> infix(_:_:)())
  {
    uint64_t v45 = v19;
    double v43 = v14;
    uint64_t v20 = Date.distance(to:)();
    double v22 = v21;
    double v44 = v41;
    MEMORY[0x1F4188790](v20);
    uint64_t v23 = (double *)((char *)v41 - v47);
    unint64_t v24 = v47;
    v41[1] = (char *)v41 + *(int *)(v8 + 48) - v47;
    *uint64_t v23 = a1;
    v23[1] = a2;
    OUTLINED_FUNCTION_4_108();
    uint64_t v25 = v17();
    v41[0] = v41;
    MEMORY[0x1F4188790](v25);
    uint64_t v26 = (double *)((char *)v41 - v24);
    *uint64_t v26 = a3;
    v26[1] = a4;
    OUTLINED_FUNCTION_4_108();
    v17();
    uint64_t v27 = v46;
    char v42 = *(void (**)(void))(v46 + 8);
    uint64_t v28 = v42;
    OUTLINED_FUNCTION_12_1();
    v28();
    OUTLINED_FUNCTION_12_1();
    uint64_t v29 = ((uint64_t (*)(void))v28)();
    double v44 = v41;
    double v30 = (a1 - a3) / v22;
    MEMORY[0x1F4188790](v29);
    OUTLINED_FUNCTION_7_97();
    uint64_t v31 = *((void *)v12 + 1);
    *(double *)uint64_t v32 = *v12;
    *((void *)v32 + 1) = v31;
    uint64_t v33 = *(uint64_t (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v35 = v33(&v32[v34], v43, v15);
    MEMORY[0x1F4188790](v35);
    OUTLINED_FUNCTION_7_97();
    uint64_t v36 = *((void *)v12 + 1);
    *(double *)uint64_t v37 = *v12;
    *((void *)v37 + 1) = v36;
    v33(&v37[v38], v45, v15);
    uint64_t v39 = v42;
    OUTLINED_FUNCTION_12_1();
    v39();
    OUTLINED_FUNCTION_12_1();
    v39();
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, &demangling cache variable for type metadata for (location: CGPoint, time: Date));
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, &demangling cache variable for type metadata for (location: CGPoint, time: Date));
    return 0.0;
  }
  return v30;
}

id PushToTalkTalkButtonGestureRecognizer.__allocating_init(target:action:)(void *a1, uint64_t a2)
{
  if (a1[3])
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    OUTLINED_FUNCTION_5_3();
    uint64_t v6 = v5;
    MEMORY[0x1F4188790](v7);
    OUTLINED_FUNCTION_21();
    (*(void (**)(uint64_t))(v6 + 16))(v9 - v8);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    OUTLINED_FUNCTION_12_1();
    v11();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v12 = objc_msgSend(objc_allocWithZone(v2), sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v12;
}

void PushToTalkTalkButtonGestureRecognizer.init(target:action:)()
{
}

id PushToTalkTalkButtonGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushToTalkTalkButtonGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for PushToTalkTalkButtonGestureRecognizer()
{
  return type metadata accessor for PushToTalkTalkButtonGestureRecognizer();
}

void type metadata completion function for PushToTalkTalkButtonGestureRecognizer()
{
  type metadata accessor for DispatchTimeInterval();
  if (v0 <= 0x3F)
  {
    type metadata accessor for (location: CGPoint, time: Date)?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PushToTalkTalkButtonGestureRecognizer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PushToTalkTalkButtonGestureRecognizer);
}

uint64_t dispatch thunk of PushToTalkTalkButtonGestureRecognizer.__allocating_init(interval:maximumVerticalVelocity:target:action:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

void type metadata accessor for (location: CGPoint, time: Date)?()
{
  if (!lazy cache variable for type metadata for (location: CGPoint, time: Date)?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (location: CGPoint, time: Date));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (location: CGPoint, time: Date)?);
    }
  }
}

uint64_t sub_1C351A8E0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in PushToTalkTalkButtonGestureRecognizer.update(location:)()
{
  closure #1 in PushToTalkTalkButtonGestureRecognizer.update(location:)(v0);
}

uint64_t static SymbolImageProviding.symbolImage(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v9, v5, v6);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 8))(v9, a2, a3);
  outlined release of SymbolImageDescription((uint64_t)v9);
  return v7;
}

void SymbolImageDescribers.ConversationControls.symbolImageDescription.getter(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = 0xD000000000000013;
      unint64_t v3 = 0x80000001C379E1D0;
      id v10 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_89();
      goto LABEL_41;
    case 2:
      id v11 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_89();
      unint64_t v3 = 0xEE006C6C69662E68;
      uint64_t v4 = 0x73616C732E63696DLL;
      goto LABEL_41;
    case 3:
      OUTLINED_FUNCTION_38_24();
      id v12 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_6_104();
      goto LABEL_41;
    case 4:
      OUTLINED_FUNCTION_35_23();
      id v2 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = 0;
      unint64_t v3 = 0xE900000000000079;
      goto LABEL_41;
    case 5:
      OUTLINED_FUNCTION_35_23();
      uint64_t v13 = (void *)*MEMORY[0x1E4FB28C8];
      uint64_t v14 = self;
      id v2 = v13;
      id v8 = objc_msgSend(v14, sel_labelColor);
      unint64_t v3 = 0xEF6873616C732E79;
      goto LABEL_41;
    case 6:
      id v15 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_4_109();
      uint64_t v4 = v16 + 21;
      uint64_t v17 = "rectangle.inset.filled.and.person.filled";
      goto LABEL_39;
    case 7:
      OUTLINED_FUNCTION_38_24();
      id v18 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_6_104();
      goto LABEL_13;
    case 8:
      OUTLINED_FUNCTION_11_66();
      id v19 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_27_45();
      goto LABEL_13;
    case 9:
      uint64_t v4 = 0x2E6F65646976;
      goto LABEL_23;
    case 10:
      id v21 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_4_109();
      uint64_t v4 = v22 | 4;
      unint64_t v3 = 0x80000001C379CF10;
      goto LABEL_37;
    case 11:
      id v23 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_89();
      unint64_t v3 = 0xE400000000000000;
      uint64_t v20 = 7;
      uint64_t v24 = 2;
      uint64_t v4 = 1802398060;
      break;
    case 12:
      OUTLINED_FUNCTION_31_33();
      id v25 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_36_26();
      goto LABEL_46;
    case 13:
      OUTLINED_FUNCTION_11_66();
      uint64_t v6 = (id *)MEMORY[0x1E4FB2998];
      goto LABEL_19;
    case 14:
    case 34:
      OUTLINED_FUNCTION_11_66();
      uint64_t v6 = (id *)MEMORY[0x1E4FB2908];
LABEL_19:
      id v26 = *v6;
      id v8 = (id)OUTLINED_FUNCTION_27_45();
      goto LABEL_46;
    case 15:
      OUTLINED_FUNCTION_30_32();
      id v27 = (id)*MEMORY[0x1E4FB2908];
      id v8 = (id)OUTLINED_FUNCTION_26_45();
      goto LABEL_46;
    case 16:
      OUTLINED_FUNCTION_39_28();
      id v28 = (id)*MEMORY[0x1E4FB2908];
      id v8 = (id)OUTLINED_FUNCTION_25_50();
      goto LABEL_46;
    case 17:
      OUTLINED_FUNCTION_29_34();
LABEL_23:
      uint64_t v4 = v4 & 0xFFFFFFFFFFFFLL | 0x6966000000000000;
      id v29 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_6_104();
      goto LABEL_37;
    case 18:
      OUTLINED_FUNCTION_11_66();
      id v30 = (id)*MEMORY[0x1E4FB2988];
      id v8 = (id)OUTLINED_FUNCTION_27_45();
      goto LABEL_27;
    case 19:
      OUTLINED_FUNCTION_30_32();
      id v31 = (id)*MEMORY[0x1E4FB2988];
      id v8 = (id)OUTLINED_FUNCTION_26_45();
      goto LABEL_27;
    case 20:
      OUTLINED_FUNCTION_39_28();
      id v32 = (id)*MEMORY[0x1E4FB2988];
      id v8 = (id)OUTLINED_FUNCTION_25_50();
LABEL_27:
      uint64_t v20 = 5;
      goto LABEL_42;
    case 21:
      OUTLINED_FUNCTION_32_28();
      id v33 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_16_52();
      uint64_t v20 = 5;
      goto LABEL_47;
    case 22:
      OUTLINED_FUNCTION_32_28();
      id v34 = (id)*MEMORY[0x1E4FB2950];
      id v8 = (id)OUTLINED_FUNCTION_16_52();
      uint64_t v20 = 4;
      uint64_t v24 = 1;
      break;
    case 23:
      id v35 = (id)*MEMORY[0x1E4FB2908];
      id v8 = (id)OUTLINED_FUNCTION_4_109();
      uint64_t v4 = v36 + 5;
      uint64_t v37 = "iphone.and.arrow.forward";
      goto LABEL_32;
    case 24:
      id v38 = (id)*MEMORY[0x1E4FB2908];
      id v8 = (id)OUTLINED_FUNCTION_4_109();
      uint64_t v4 = v39 + 3;
      uint64_t v37 = "ipad.and.arrow.forward";
LABEL_32:
      unint64_t v3 = (unint64_t)(v37 - 32) | 0x8000000000000000;
      goto LABEL_46;
    case 25:
      OUTLINED_FUNCTION_29_34();
      goto LABEL_45;
    case 26:
      id v40 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_89();
      unint64_t v3 = 0xEF726577736E612ELL;
      uint64_t v4 = 0x65707974656C6574;
      goto LABEL_46;
    case 27:
      uint64_t v4 = 0x2E6F65646976;
LABEL_45:
      uint64_t v4 = v4 & 0xFFFFFFFFFFFFLL | 0x6966000000000000;
      id v47 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_6_104();
      goto LABEL_46;
    case 28:
    case 33:
      OUTLINED_FUNCTION_31_33();
      id v7 = (id)*MEMORY[0x1E4FB2998];
      id v8 = (id)OUTLINED_FUNCTION_36_26();
LABEL_13:
      uint64_t v20 = 7;
      goto LABEL_47;
    case 29:
      id v41 = (id)*MEMORY[0x1E4FB2998];
      OUTLINED_FUNCTION_89();
      unint64_t v3 = 0xEF6C6C69662E6E77;
      OUTLINED_FUNCTION_29_34();
      uint64_t v4 = v4 & 0xFFFFFFFFFFFFLL | 0x6F64000000000000;
      goto LABEL_46;
    case 30:
      id v42 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_26_45();
      uint64_t v4 = 0x322E6E6F73726570;
LABEL_37:
      uint64_t v20 = 4;
      goto LABEL_47;
    case 31:
      id v43 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_4_109();
      uint64_t v4 = v44 - 1;
      uint64_t v17 = "person.crop.circle";
LABEL_39:
      unint64_t v3 = (unint64_t)(v17 - 32) | 0x8000000000000000;
      goto LABEL_41;
    case 32:
      id v45 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_89();
      unint64_t v3 = 0xEB00000000656C63;
      uint64_t v4 = 0x7269632E6F666E69;
      goto LABEL_41;
    case 35:
      uint64_t v4 = 0xD000000000000013;
      unint64_t v3 = 0x80000001C379E1F0;
      id v46 = (id)*MEMORY[0x1E4FB2908];
      id v8 = (id)OUTLINED_FUNCTION_89();
LABEL_46:
      uint64_t v20 = 6;
LABEL_47:
      uint64_t v24 = 2;
      break;
    default:
      id v9 = (id)*MEMORY[0x1E4FB28C8];
      id v8 = (id)OUTLINED_FUNCTION_89();
      unint64_t v3 = 0xEC0000006C6C6966;
      uint64_t v4 = 0x2E6567617373656DLL;
LABEL_41:
      uint64_t v20 = 4;
LABEL_42:
      uint64_t v24 = 3;
      break;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v2;
  *(_WORD *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v20;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v8;
}

long long *SymbolImageDescription.badConnectionTitle1.unsafeMutableAddressor()
{
  if (one-time initialization token for badConnectionTitle1 != -1) {
    swift_once();
  }
  return &static SymbolImageDescription.badConnectionTitle1;
}

uint64_t static SymbolImageDescribers.ConversationControls.continueHandoff.getter()
{
  if (static Platform.current.getter() == 1) {
    return 24;
  }
  else {
    return 23;
  }
}

unint64_t SymbolImageDescribers.ConversationActivityIcon.symbolName.getter(char a1)
{
  unint64_t result = 0x76742E79616C70;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x74656B636F72;
      break;
    case 2:
      unint64_t result = 0x722E657275676966;
      break;
    case 3:
      unint64_t result = 6775138;
      break;
    case 4:
      unint64_t result = 1802465122;
      break;
    case 5:
      unint64_t result = 0x65626F6C67;
      break;
    case 6:
      unint64_t result = 0x65762E736B6F6F62;
      break;
    case 7:
      unint64_t result = 0x656C626269726373;
      break;
    case 8:
      unint64_t result = 0x6F6E2E636973756DLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000028;
      break;
    case 10:
      unint64_t result = 6516580;
      break;
    case 11:
      unint64_t result = 0x322E6E6F73726570;
      break;
    case 12:
      unint64_t result = 0xD000000000000022;
      break;
    case 13:
      unint64_t result = 0x6F746F6870;
      break;
    default:
      return result;
  }
  return result;
}

id SymbolImageDescription.symbol(enabled:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  int v5 = *(unsigned __int8 *)(v2 + 33);
  if (v5 == 1)
  {
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    BOOL v9 = (a1 & 1) == 0;
    if (a1) {
      uint64_t v10 = 0x6C6C69662ELL;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v9) {
      id v11 = (void *)0xE000000000000000;
    }
    else {
      id v11 = (void *)0xE500000000000000;
    }
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = v10;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v25;
    uint64_t v13 = v24;
    id v15 = *(void **)(v2 + 24);
    uint64_t v16 = *(void **)(v3 + 56);
    id v17 = v16;
    id result = v15;
    id v19 = result;
  }
  else
  {
    uint64_t v16 = *(void **)(v2 + 56);
    id v19 = *(id *)(v2 + 24);
    uint64_t v13 = *(void *)v3;
    uint64_t v14 = *(void *)(v3 + 8);
    id result = (id)outlined retain of SymbolImageDescription(v3);
  }
  uint64_t v20 = *(void *)(v3 + 40);
  char v21 = *(unsigned char *)(v3 + 48);
  char v22 = *(unsigned char *)(v3 + 32);
  uint64_t v23 = *(void *)(v3 + 16);
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v23;
  *(void *)(a2 + 24) = v19;
  *(unsigned char *)(a2 + 32) = v22;
  *(unsigned char *)(a2 + 33) = v5;
  *(void *)(a2 + 40) = v20;
  *(unsigned char *)(a2 + 48) = v21;
  *(void *)(a2 + 56) = v16;
  return result;
}

void SymbolImageDescribers.LocalParticipantView.symbolImageDescription.getter(char a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3 = 0xE900000000000065;
  uint64_t v4 = (void *)*MEMORY[0x1E4FB28D0];
  uint64_t v5 = 0x7669737275632E66;
  uint64_t v6 = 4;
  uint64_t v7 = 2;
  char v8 = 0;
  char v9 = 0;
  switch(a1)
  {
    case 1:
      goto LABEL_19;
    case 2:
      OUTLINED_FUNCTION_10_74();
      uint64_t v5 = v11 | 6;
      goto LABEL_4;
    case 3:
      char v9 = 0;
      char v8 = 1;
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x73746365666665;
      goto LABEL_17;
    case 4:
      OUTLINED_FUNCTION_10_74();
      uint64_t v5 = v12 + 18;
      OUTLINED_FUNCTION_28_42();
      uint64_t v6 = 6;
      goto LABEL_18;
    case 5:
      OUTLINED_FUNCTION_9_84();
      uint64_t v7 = -1;
      unint64_t v3 = 0xED0000656C637269;
      uint64_t v5 = 0x632E64726F636572;
      uint64_t v6 = 6;
      goto LABEL_19;
    case 6:
      OUTLINED_FUNCTION_9_84();
      unint64_t v3 = 0x80000001C37B23E0;
      uint64_t v5 = 0xD000000000000010;
      goto LABEL_12;
    case 7:
      OUTLINED_FUNCTION_9_84();
      uint64_t v4 = (void *)*MEMORY[0x1E4FB2988];
      uint64_t v7 = -1;
      uint64_t v5 = 0x69662E6573756170;
      unint64_t v3 = 0xEA00000000006C6CLL;
      uint64_t v6 = 7;
      goto LABEL_19;
    case 8:
      OUTLINED_FUNCTION_9_84();
      unint64_t v3 = 0x6C637269632ELL;
      OUTLINED_FUNCTION_33_32();
      uint64_t v5 = 0x7075737275632E66;
      goto LABEL_12;
    case 9:
      OUTLINED_FUNCTION_9_84();
      unint64_t v3 = 0xEB000000006C6C69;
      uint64_t v5 = 0x662E656C63726963;
LABEL_12:
      uint64_t v6 = 6;
      uint64_t v7 = 3;
      uint64_t v4 = v13;
      goto LABEL_19;
    case 10:
      OUTLINED_FUNCTION_9_84();
      uint64_t v5 = 0x69662E6F65646976;
      unint64_t v3 = 0xEA00000000006C6CLL;
      goto LABEL_17;
    case 11:
      uint64_t v5 = 0xD000000000000013;
      OUTLINED_FUNCTION_28_42();
      char v8 = 1;
      uint64_t v6 = 4;
      uint64_t v7 = 2;
      char v9 = 1;
      goto LABEL_19;
    case 12:
      char v8 = 0;
      char v9 = 1;
      unint64_t v3 = 0xE400000000000000;
      uint64_t v6 = 4;
      uint64_t v7 = 2;
      uint64_t v5 = 1700951395;
      goto LABEL_19;
    case 13:
      OUTLINED_FUNCTION_9_84();
      unint64_t v3 = 0x7369776B636FLL;
      OUTLINED_FUNCTION_33_32();
      uint64_t v5 = 0x6C63737275632E66;
      goto LABEL_17;
    default:
      OUTLINED_FUNCTION_10_74();
      uint64_t v5 = v10 | 2;
LABEL_4:
      OUTLINED_FUNCTION_28_42();
LABEL_17:
      uint64_t v6 = 4;
LABEL_18:
      uint64_t v7 = 2;
LABEL_19:
      id v14 = v4;
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = v3;
      *(void *)(a2 + 16) = v7;
      *(void *)(a2 + 24) = v14;
      *(unsigned char *)(a2 + 32) = v8;
      *(unsigned char *)(a2 + 33) = v9;
      *(void *)(a2 + 40) = v6;
      OUTLINED_FUNCTION_7_98();
      return;
  }
}

id one-time initialization function for badConnectionTitle1()
{
  uint64_t v0 = (void *)*MEMORY[0x1E4FB2988];
  *(void *)&static SymbolImageDescription.badConnectionTitle1 = 0xD00000000000001DLL;
  *((void *)&static SymbolImageDescription.badConnectionTitle1 + 1) = 0x80000001C37B11E0;
  qword_1EA37E720 = 3;
  unk_1EA37E728 = v0;
  LOWORD(xmmword_1EA37E730) = 0;
  return OUTLINED_FUNCTION_0_101(v0, (uint64_t)&static SymbolImageDescription.badConnectionTitle1);
}

uint64_t SymbolImageDescription.init(name:scale:textStyle:staticWeight:hierarchicalColor:isPrivate:fillWhenEnabled:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(unsigned char *)(a9 + 32) = a8;
  *(unsigned char *)(a9 + 33) = a10;
  *(void *)(a9 + 40) = a5;
  *(unsigned char *)(a9 + 48) = a6 & 1;
  *(void *)(a9 + 56) = a7;
  return result;
}

uint64_t static SymbolImageDescription.badConnectionTitle1.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for badConnectionTitle1 != -1) {
    swift_once();
  }
  return outlined init with copy of SymbolImageDescription((uint64_t)&static SymbolImageDescription.badConnectionTitle1, a1);
}

uint64_t outlined init with copy of SymbolImageDescription(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t SymbolImageDescription.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SymbolImageDescription.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SymbolImageDescription.name.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SymbolImageDescription.scale.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SymbolImageDescription.scale.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*SymbolImageDescription.scale.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

id SymbolImageDescription.textStyle.getter()
{
  return *(id *)(v0 + 24);
}

void SymbolImageDescription.textStyle.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*SymbolImageDescription.textStyle.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SymbolImageDescription.isPrivate.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SymbolImageDescription.isPrivate.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*SymbolImageDescription.isPrivate.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SymbolImageDescription.fillWhenEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t SymbolImageDescription.fillWhenEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*SymbolImageDescription.fillWhenEnabled.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t SymbolImageDescription.staticWeight.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t SymbolImageDescription.staticWeight.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*SymbolImageDescription.staticWeight.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void *SymbolImageDescription.hierarchicalColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

void SymbolImageDescription.hierarchicalColor.setter(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
}

uint64_t (*SymbolImageDescription.hierarchicalColor.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void SymbolImageDescription.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  id v5 = *(id *)(v0 + 24);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v1 = v5;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined release of BackgroundView<A>(&v5);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 33) & 1);
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = *(void *)(v0 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  unint64_t v3 = *(void **)(v0 + 56);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    id v4 = v3;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static SymbolImageDescription.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
    uint64_t v7 = *(void **)(a1 + 24);
    id v20 = *(id *)(a2 + 24);
    id v21 = v7;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
    {
      outlined retain of UIColor?(&v21);
      outlined retain of UIColor?(&v20);
      swift_bridgeObjectRelease_n();
      outlined release of BackgroundView<A>(&v20);
      outlined release of BackgroundView<A>(&v21);
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined retain of UIColor?(&v21);
      outlined retain of UIColor?(&v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of BackgroundView<A>(&v20);
      outlined release of BackgroundView<A>(&v21);
      uint64_t result = 0;
      if ((v13 & 1) == 0) {
        return result;
      }
    }
    if (((*(unsigned __int8 *)(a1 + 32) ^ *(unsigned __int8 *)(a2 + 32)) & 1) != 0
      || ((*(unsigned __int8 *)(a1 + 33) ^ *(unsigned __int8 *)(a2 + 33)) & 1) != 0)
    {
      return 0;
    }
    char v14 = *(unsigned char *)(a2 + 48);
    if (*(unsigned char *)(a1 + 48))
    {
      if (!*(unsigned char *)(a2 + 48)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 40) != *(void *)(a2 + 40)) {
        char v14 = 1;
      }
      if (v14) {
        return 0;
      }
    }
    id v15 = *(void **)(a1 + 56);
    uint64_t v16 = *(void **)(a2 + 56);
    if (v15)
    {
      if (v16)
      {
        type metadata accessor for UIColor();
        id v17 = v16;
        id v18 = v15;
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          return 1;
        }
      }
    }
    else if (!v16)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

Swift::Int SymbolImageDescription.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SymbolImageDescription()
{
  return Hasher._finalize()();
}

void *static SymbolImageDescribers.DrawerDisc.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.DrawerDisc.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.DrawerDisc(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.DrawerDisc.allCases.getter;
}

BOOL static SymbolImageDescribers.DrawerPill.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SymbolImageDescribers.DrawerPill.hash(into:)(uint64_t a1, char a2)
{
}

void *static SymbolImageDescribers.DrawerPill.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.DrawerPill.allCases.getter;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SymbolImageDescribers.DrawerPill(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static SymbolImageDescribers.DrawerPill.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SymbolImageDescribers.DrawerPill()
{
  return SymbolImageDescribers.DrawerPill.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SymbolImageDescribers.DrawerPill(uint64_t a1)
{
  SymbolImageDescribers.DrawerPill.hash(into:)(a1, *v1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.DrawerPill(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.DrawerPill.allCases.getter;
}

void *static SymbolImageDescribers.DrawerTable.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.DrawerTable.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.DrawerTable(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.DrawerTable.allCases.getter;
}

void *static SymbolImageDescribers.Captions.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.Captions.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.Captions(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.Captions.allCases.getter;
}

void *static SymbolImageDescribers.ConversationControls.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.ConversationControls.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.ConversationControls(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.ConversationControls.allCases.getter;
}

void *static SymbolImageDescribers.ConversationControlsSubtitles.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.ConversationControlsSubtitles.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.ConversationControlsSubtitles(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.ConversationControlsSubtitles.allCases.getter;
}

BOOL static SymbolImageDescribers.ConversationActivityIcon.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SymbolImageDescribers.ConversationActivityIcon.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

void *static SymbolImageDescribers.ConversationActivityIcon.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.ConversationActivityIcon.allCases.getter;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SymbolImageDescribers.ConversationActivityIcon(char *a1, char *a2)
{
  return static SymbolImageDescribers.ConversationActivityIcon.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SymbolImageDescribers.ConversationActivityIcon()
{
  return SymbolImageDescribers.ConversationActivityIcon.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SymbolImageDescribers.ConversationActivityIcon(uint64_t a1)
{
  SymbolImageDescribers.ConversationActivityIcon.hash(into:)(a1, *v1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.ConversationActivityIcon(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.ConversationActivityIcon.allCases.getter;
}

void *static SymbolImageDescribers.EphemeralAlerts.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.EphemeralAlerts.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.EphemeralAlerts(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.EphemeralAlerts.allCases.getter;
}

void *static SymbolImageDescribers.BottomBar.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.BottomBar.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.BottomBar(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.BottomBar.allCases.getter;
}

void *static SymbolImageDescribers.Roster.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.Roster.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.Roster(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.Roster.allCases.getter;
}

void *static SymbolImageDescribers.LocalParticipantView.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.LocalParticipantView.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.LocalParticipantView(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.LocalParticipantView.allCases.getter;
}

void *static SymbolImageDescribers.ParticipantView.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.ParticipantView.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.ParticipantView(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.ParticipantView.allCases.getter;
}

void *static SymbolImageDescribers.TVHandoff.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.TVHandoff.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.TVHandoff(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.TVHandoff.allCases.getter;
}

Swift::Int SymbolImageDescribers.DrawerPill.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t static SymbolImageDescribers.FaceID.== infix(_:_:)()
{
  return 1;
}

void SymbolImageDescribers.FaceID.hash(into:)()
{
  Swift::UInt v0 = OUTLINED_FUNCTION_89();
  Hasher._combine(_:)(v0);
}

void *static SymbolImageDescribers.FaceID.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolImageDescribers.FaceID.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolImageDescribers.FaceID(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolImageDescribers.FaceID.allCases.getter;
}

void SymbolImageDescribers.DrawerDisc.symbolImageDescription.getter(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000012;
  OUTLINED_FUNCTION_81();
  char v5 = (id *)MEMORY[0x1E4FB2998];
  uint64_t v6 = 4;
  switch(v7)
  {
    case 1:
      unint64_t v1 = 0xEE006C6C69662E68;
      unint64_t v3 = 0x73616C732E63696DLL;
      goto LABEL_7;
    case 2:
      OUTLINED_FUNCTION_81();
      char v5 = (id *)MEMORY[0x1E4FB2998];
      uint64_t v6 = 4;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 3:
      OUTLINED_FUNCTION_17_53();
      goto LABEL_7;
    case 4:
      unint64_t v1 = 0xE500000000000000;
      unint64_t v3 = 0x6B72616D78;
      char v5 = (id *)MEMORY[0x1E4FB2990];
      uint64_t v6 = 6;
      break;
    case 5:
      unint64_t v3 = v4 + 16;
      OUTLINED_FUNCTION_81();
      char v5 = (id *)MEMORY[0x1E4FB2998];
LABEL_7:
      uint64_t v6 = 4;
      break;
    default:
      break;
  }
  id v8 = *v5;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = 3;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v6;
  OUTLINED_FUNCTION_7_98();
}

void protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.DrawerDisc(uint64_t a1@<X8>)
{
}

void protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.LocalParticipantView(uint64_t a1@<X8>)
{
  SymbolImageDescribers.LocalParticipantView.symbolImageDescription.getter(*v1, a1);
}

uint64_t SymbolImageDescribers.DrawerPill.symbolImageDescription.getter@<X0>(char a1@<W0>, unint64_t *a2@<X8>)
{
  id v4 = (id)*MEMORY[0x1E4FB28F0];
  unint64_t v5 = 0xD000000000000010;
  if (a1) {
    unint64_t v5 = 0xD000000000000016;
  }
  unint64_t v6 = 0x80000001C37B2430;
  if ((a1 & 1) == 0) {
    unint64_t v6 = 0x80000001C37A5510;
  }
  *a2 = v5;
  a2[1] = v6;
  return OUTLINED_FUNCTION_15_68((uint64_t)v4, 3);
}

uint64_t protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.DrawerPill@<X0>(unint64_t *a1@<X8>)
{
  return SymbolImageDescribers.DrawerPill.symbolImageDescription.getter(*v1, a1);
}

void SymbolImageDescribers.DrawerTable.symbolImageDescription.getter(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      id v11 = (id)*MEMORY[0x1E4FB28C8];
      uint64_t v7 = OUTLINED_FUNCTION_24_48();
      uint64_t v12 = 5;
      uint64_t v3 = 1937075312;
      goto LABEL_19;
    case 2:
      uint64_t v3 = 0xD000000000000010;
      OUTLINED_FUNCTION_28_42();
      id v14 = v13;
      uint64_t v7 = OUTLINED_FUNCTION_3_123();
      uint64_t v12 = 5;
      goto LABEL_19;
    case 3:
      id v15 = (id)*MEMORY[0x1E4FB28C8];
      uint64_t v7 = OUTLINED_FUNCTION_3_123();
      uint64_t v16 = 0x2E6F65646976;
      goto LABEL_8;
    case 4:
      id v17 = (id)*MEMORY[0x1E4FB28D8];
      uint64_t v7 = OUTLINED_FUNCTION_3_123();
      uint64_t v16 = 0x2E656E6F6870;
LABEL_8:
      uint64_t v3 = v16 & 0xFFFFFFFFFFFFLL | 0x6966000000000000;
      unint64_t v4 = 0xEA00000000006C6CLL;
      goto LABEL_18;
    case 5:
      id v18 = (id)*MEMORY[0x1E4FB28C8];
      uint64_t v7 = OUTLINED_FUNCTION_3_123();
      unint64_t v4 = 0xED00006C6C69662ELL;
      uint64_t v3 = 0x322E6E6F73726570;
      goto LABEL_18;
    case 6:
      char v19 = (void *)*MEMORY[0x1E4FB28C8];
      uint64_t v3 = self;
      id v2 = v19;
      id v20 = objc_msgSend((id)v3, sel_labelColor);
      unint64_t v4 = 0xE900000000000079;
      OUTLINED_FUNCTION_14_66();
      goto LABEL_16;
    case 7:
      uint64_t v3 = 1802398060;
      id v21 = (id)*MEMORY[0x1E4FB28C8];
      uint64_t v7 = OUTLINED_FUNCTION_24_48();
      goto LABEL_18;
    case 8:
      id v22 = (id)*MEMORY[0x1E4FB28D0];
      OUTLINED_FUNCTION_13_71();
      uint64_t v3 = 0xD000000000000014;
      OUTLINED_FUNCTION_28_42();
      uint64_t v12 = 4;
      uint64_t v9 = 2;
      goto LABEL_19;
    case 9:
    case 12:
      uint64_t v3 = 0x6B72616D78;
      id v6 = (id)*MEMORY[0x1E4FB2950];
      uint64_t v7 = OUTLINED_FUNCTION_3_123();
      unint64_t v4 = 0xE500000000000000;
      goto LABEL_14;
    case 10:
      id v23 = (id)*MEMORY[0x1E4FB2950];
      uint64_t v7 = OUTLINED_FUNCTION_89();
      char v8 = 1;
      uint64_t v9 = -1;
      uint64_t v3 = 0x72616D6B63656863;
      unint64_t v4 = 0xE90000000000006BLL;
LABEL_14:
      uint64_t v12 = 7;
      goto LABEL_19;
    case 11:
      uint64_t v3 = 1802398060;
      id v24 = (id)*MEMORY[0x1E4FB2950];
      uint64_t v7 = OUTLINED_FUNCTION_13_71();
      unint64_t v4 = 0xE400000000000000;
      goto LABEL_16;
    case 13:
      id v25 = (id)*MEMORY[0x1E4FB28C8];
      OUTLINED_FUNCTION_13_71();
      unint64_t v4 = 0xE90000000000006CLL;
      OUTLINED_FUNCTION_37_24();
LABEL_18:
      uint64_t v12 = 4;
      goto LABEL_19;
    default:
      id v10 = (id)*MEMORY[0x1E4FB2990];
      uint64_t v7 = OUTLINED_FUNCTION_13_71();
      unint64_t v4 = 0xEC0000006C6C6966;
      uint64_t v3 = 0x2E6567617373656DLL;
LABEL_16:
      uint64_t v12 = 4;
      uint64_t v9 = 1;
LABEL_19:
      *(void *)a2 = v3;
      *(void *)(a2 + 8) = v4;
      *(void *)(a2 + 16) = v9;
      *(void *)(a2 + 24) = v2;
      *(unsigned char *)(a2 + 32) = v8;
      *(unsigned char *)(a2 + 33) = 0;
      *(void *)(a2 + 40) = v12;
      *(unsigned char *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = v7;
      return;
  }
}

double protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.DrawerTable()
{
  char v0 = OUTLINED_FUNCTION_22_44();
  SymbolImageDescribers.DrawerTable.symbolImageDescription.getter(v0, v1);
  *(void *)&double result = OUTLINED_FUNCTION_12_66(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13, v10, v14).n128_u64[0];
  return result;
}

uint64_t SymbolImageDescribers.Captions.symbolImageDescription.getter@<X0>(char a1@<W0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = 0xD000000000000028;
  uint64_t v4 = (id *)MEMORY[0x1E4FB28D8];
  if (a1)
  {
    unint64_t v5 = 0x80000001C37B24C0;
    BOOL v6 = a1 == 1;
    unint64_t v7 = 0xEF656C626275622ELL;
    uint64_t v8 = (id *)MEMORY[0x1E4FB28D8];
    if (a1 == 1) {
      uint64_t v8 = (id *)MEMORY[0x1E4FB28D8];
    }
    else {
      unint64_t v3 = 0x736E6F6974706163;
    }
  }
  else
  {
    char v9 = static Platform.current.getter();
    uint64_t v8 = (id *)MEMORY[0x1E4FB28C8];
    BOOL v6 = v9 == 2;
    if (v9 == 2) {
      uint64_t v8 = v4;
    }
    else {
      unint64_t v3 = 0xD000000000000034;
    }
    unint64_t v7 = 0x80000001C37B24F0;
    unint64_t v5 = 0x80000001C37B2530;
  }
  if (v6) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = v7;
  }
  id v11 = *v8;
  *a2 = v3;
  a2[1] = v10;
  return OUTLINED_FUNCTION_2_121((uint64_t)v11, -1);
}

double protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.Captions()
{
  char v0 = OUTLINED_FUNCTION_22_44();
  uint64_t v2 = SymbolImageDescribers.Captions.symbolImageDescription.getter(v0, v1);
  *(void *)&double result = OUTLINED_FUNCTION_12_66(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13, v10, v14).n128_u64[0];
  return result;
}

double protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.ConversationControls()
{
  char v0 = OUTLINED_FUNCTION_22_44();
  SymbolImageDescribers.ConversationControls.symbolImageDescription.getter(v0, v1);
  *(void *)&double result = OUTLINED_FUNCTION_12_66(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13, v10, v14).n128_u64[0];
  return result;
}

uint64_t SymbolImageDescribers.ConversationControlsSubtitles.symbolImageDescription.getter@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x76742E79616C70;
  switch(a1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006574;
      uint64_t v3 = 0x6F6E2E636973756DLL;
      break;
    case 2:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x74656B636F72;
      break;
    case 3:
      unint64_t v2 = 0xEA00000000006E75;
      uint64_t v3 = 0x722E657275676966;
      break;
    case 4:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6775138;
      break;
    case 5:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1802465122;
      break;
    case 6:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x65626F6C67;
      break;
    case 7:
      unint64_t v2 = 0xEE006C6163697472;
      uint64_t v3 = 0x65762E736B6F6F62;
      break;
    case 8:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x656C626269726373;
      break;
    case 9:
      OUTLINED_FUNCTION_81();
      uint64_t v3 = 0xD000000000000028;
      break;
    case 10:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6516580;
      break;
    case 11:
      unint64_t v2 = 0xE900000000000079;
      OUTLINED_FUNCTION_14_66();
      break;
    case 12:
      uint64_t v5 = 0x2E6F65646976;
      goto LABEL_15;
    case 13:
      uint64_t v5 = 0x2E656E6F6870;
LABEL_15:
      uint64_t v3 = v5 & 0xFFFFFFFFFFFFLL | 0x6966000000000000;
      unint64_t v2 = 0xEA00000000006C6CLL;
      break;
    default:
      break;
  }
  id v6 = (id)*MEMORY[0x1E4FB2950];
  *a2 = v3;
  a2[1] = v2;
  return OUTLINED_FUNCTION_2_121((uint64_t)v6, 1);
}

uint64_t protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.ConversationControlsSubtitles@<X0>(uint64_t *a1@<X8>)
{
  return SymbolImageDescribers.ConversationControlsSubtitles.symbolImageDescription.getter(*v1, a1);
}

id SymbolImageDescribers.ConversationActivityIcon.symbolImageDescription.getter@<X0>(char a1@<W0>, unint64_t *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4FB2928];
  *a2 = SymbolImageDescribers.ConversationActivityIcon.symbolName.getter(a1);
  a2[1] = v3;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_2_121(v6, 3);
  return v4;
}

id protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.ConversationActivityIcon@<X0>(unint64_t *a1@<X8>)
{
  return SymbolImageDescribers.ConversationActivityIcon.symbolImageDescription.getter(*v1, a1);
}

uint64_t SymbolImageDescribers.EphemeralAlerts.symbolImageDescription.getter@<X0>(char a1@<W0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = 0xD000000000000013;
  unint64_t v4 = 0x80000001C379E1D0;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v3 = 0x6C6C69662E63696DLL;
      break;
    case 2:
      OUTLINED_FUNCTION_17_53();
      break;
    case 3:
      OUTLINED_FUNCTION_81();
      unint64_t v3 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v4 = 0xE900000000000079;
      OUTLINED_FUNCTION_14_66();
      break;
    case 5:
      unint64_t v3 = 0xD000000000000028;
      OUTLINED_FUNCTION_81();
      break;
    default:
      break;
  }
  id v5 = (id)*MEMORY[0x1E4FB2908];
  *a2 = v3;
  a2[1] = v4;
  return OUTLINED_FUNCTION_2_121((uint64_t)v5, 1);
}

uint64_t protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.EphemeralAlerts@<X0>(unint64_t *a1@<X8>)
{
  return SymbolImageDescribers.EphemeralAlerts.symbolImageDescription.getter(*v1, a1);
}

id SymbolImageDescribers.BottomBar.symbolImageDescription.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (void *)*MEMORY[0x1E4FB2988];
  *(void *)a1 = 0x7269632E706F7473;
  *(void *)(a1 + 8) = 0xEB00000000656C63;
  *(void *)(a1 + 16) = 3;
  *(void *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = 0;
  return OUTLINED_FUNCTION_0_101(v1, a1);
}

id SymbolImageDescribers.Roster.symbolImageDescription.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (void *)*MEMORY[0x1E4FB2988];
  *(void *)a1 = 1937075312;
  *(void *)(a1 + 8) = 0xE400000000000000;
  *(void *)(a1 + 16) = 3;
  *(void *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = 0;
  return OUTLINED_FUNCTION_0_101(v1, a1);
}

void SymbolImageDescribers.ParticipantView.symbolImageDescription.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_81();
  unint64_t v3 = 0xD000000000000022;
  unint64_t v4 = (id *)MEMORY[0x1E4FB28C8];
  uint64_t v5 = 6;
  uint64_t v6 = 3;
  switch(v7)
  {
    case 1:
      OUTLINED_FUNCTION_81();
      unint64_t v4 = (id *)MEMORY[0x1E4FB28C8];
      goto LABEL_4;
    case 2:
      unint64_t v1 = 0xEF657369776B636FLL;
      unint64_t v3 = 0x6C632E776F727261;
LABEL_4:
      uint64_t v5 = 6;
      uint64_t v6 = 3;
      break;
    case 3:
      uint64_t v6 = -1;
      unint64_t v1 = 0xE90000000000006CLL;
      OUTLINED_FUNCTION_37_24();
      unint64_t v4 = (id *)MEMORY[0x1E4FB2998];
      uint64_t v5 = 4;
      break;
    default:
      break;
  }
  id v8 = *v4;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v5;
  OUTLINED_FUNCTION_7_98();
}

void protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.ParticipantView(uint64_t a1@<X8>)
{
}

id SymbolImageDescribers.TVHandoff.symbolImageDescription.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1 = (void *)*MEMORY[0x1E4FB2950];
  strcpy((char *)a1, "appletv.fill");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  *(void *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = 0;
  return OUTLINED_FUNCTION_0_101(v1, a1);
}

uint64_t SymbolImageDescribers.Recents.symbolImageDescription.getter@<X0>(char a1@<W0>, void *a2@<X8>)
{
  id v4 = (id)*MEMORY[0x1E4FB2950];
  unint64_t v5 = 0x80000001C37B2590;
  if ((a1 & 1) == 0) {
    unint64_t v5 = 0x80000001C37B25B0;
  }
  *a2 = 0xD00000000000001ALL;
  a2[1] = v5;
  return OUTLINED_FUNCTION_15_68((uint64_t)v4, 2);
}

uint64_t protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.Recents@<X0>(void *a1@<X8>)
{
  return SymbolImageDescribers.Recents.symbolImageDescription.getter(*v1, a1);
}

void SymbolImageDescribers.VideoMessaging.symbolImageDescription.getter(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = (id *)MEMORY[0x1E4FB28C8];
    }
    else {
      unint64_t v3 = (id *)MEMORY[0x1E4FB2988];
    }
    if (a1 == 1) {
      unint64_t v4 = 0x69662E6F65646976;
    }
    else {
      unint64_t v4 = 0xD000000000000011;
    }
    if (a1 == 1) {
      unint64_t v5 = 0xEA00000000006C6CLL;
    }
    else {
      unint64_t v5 = 0x80000001C37B25D0;
    }
    if (a1 == 1) {
      uint64_t v6 = 5;
    }
    else {
      uint64_t v6 = 4;
    }
  }
  else
  {
    unint64_t v5 = 0xE90000000000006CLL;
    unint64_t v4 = 0x6C69662E79616C70;
    unint64_t v3 = (id *)MEMORY[0x1E4FB2908];
    uint64_t v6 = 4;
  }
  id v7 = *v3;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = 2;
  *(void *)(a2 + 24) = v7;
  *(_WORD *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v6;
  OUTLINED_FUNCTION_7_98();
}

void protocol witness for SymbolImageDescribing.symbolImageDescription.getter in conformance SymbolImageDescribers.VideoMessaging(uint64_t a1@<X8>)
{
  SymbolImageDescribers.VideoMessaging.symbolImageDescription.getter(*v1, a1);
}

id SymbolImageDescribers.FaceID.symbolImageDescription.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1 = (void *)*MEMORY[0x1E4FB2998];
  *(void *)a1 = 0x646965636166;
  *(void *)(a1 + 8) = 0xE600000000000000;
  *(void *)(a1 + 16) = 3;
  *(void *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = 0;
  return OUTLINED_FUNCTION_0_101(v1, a1);
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescription and conformance SymbolImageDescription()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescription and conformance SymbolImageDescription;
  if (!lazy protocol witness table cache variable for type SymbolImageDescription and conformance SymbolImageDescription)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescription and conformance SymbolImageDescription);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.DrawerDisc and conformance SymbolImageDescribers.DrawerDisc()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerDisc and conformance SymbolImageDescribers.DrawerDisc;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerDisc and conformance SymbolImageDescribers.DrawerDisc)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerDisc and conformance SymbolImageDescribers.DrawerDisc);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.DrawerDisc()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.DrawerDisc] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.DrawerDisc]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.DrawerPill and conformance SymbolImageDescribers.DrawerPill()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerPill and conformance SymbolImageDescribers.DrawerPill;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerPill and conformance SymbolImageDescribers.DrawerPill)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerPill and conformance SymbolImageDescribers.DrawerPill);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.DrawerPill()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.DrawerPill] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.DrawerPill]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.DrawerTable and conformance SymbolImageDescribers.DrawerTable()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerTable and conformance SymbolImageDescribers.DrawerTable;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerTable and conformance SymbolImageDescribers.DrawerTable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.DrawerTable and conformance SymbolImageDescribers.DrawerTable);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.DrawerTable()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.DrawerTable] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.DrawerTable]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.Captions and conformance SymbolImageDescribers.Captions()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.Captions and conformance SymbolImageDescribers.Captions;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.Captions and conformance SymbolImageDescribers.Captions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.Captions and conformance SymbolImageDescribers.Captions);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.Captions()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.Captions] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.Captions]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.ConversationControls and conformance SymbolImageDescribers.ConversationControls()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationControls and conformance SymbolImageDescribers.ConversationControls;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationControls and conformance SymbolImageDescribers.ConversationControls)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationControls and conformance SymbolImageDescribers.ConversationControls);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.ConversationControls()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.ConversationControls] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.ConversationControls]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.ConversationControlsSubtitles and conformance SymbolImageDescribers.ConversationControlsSubtitles()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationControlsSubtitles and conformance SymbolImageDescribers.ConversationControlsSubtitles;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationControlsSubtitles and conformance SymbolImageDescribers.ConversationControlsSubtitles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationControlsSubtitles and conformance SymbolImageDescribers.ConversationControlsSubtitles);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.ConversationControlsSubtitles()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.ConversationControlsSubtitles] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.ConversationControlsSubtitles]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.ConversationActivityIcon and conformance SymbolImageDescribers.ConversationActivityIcon()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationActivityIcon and conformance SymbolImageDescribers.ConversationActivityIcon;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationActivityIcon and conformance SymbolImageDescribers.ConversationActivityIcon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.ConversationActivityIcon and conformance SymbolImageDescribers.ConversationActivityIcon);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.ConversationActivityIcon()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.ConversationActivityIcon] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.ConversationActivityIcon]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.EphemeralAlerts and conformance SymbolImageDescribers.EphemeralAlerts()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.EphemeralAlerts and conformance SymbolImageDescribers.EphemeralAlerts;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.EphemeralAlerts and conformance SymbolImageDescribers.EphemeralAlerts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.EphemeralAlerts and conformance SymbolImageDescribers.EphemeralAlerts);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.EphemeralAlerts()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.EphemeralAlerts] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.EphemeralAlerts]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.BottomBar and conformance SymbolImageDescribers.BottomBar()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.BottomBar and conformance SymbolImageDescribers.BottomBar;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.BottomBar and conformance SymbolImageDescribers.BottomBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.BottomBar and conformance SymbolImageDescribers.BottomBar);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.BottomBar()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.BottomBar] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.BottomBar]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.Roster and conformance SymbolImageDescribers.Roster()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.Roster and conformance SymbolImageDescribers.Roster;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.Roster and conformance SymbolImageDescribers.Roster)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.Roster and conformance SymbolImageDescribers.Roster);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.Roster()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.Roster] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.Roster]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.LocalParticipantView and conformance SymbolImageDescribers.LocalParticipantView()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.LocalParticipantView and conformance SymbolImageDescribers.LocalParticipantView;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.LocalParticipantView and conformance SymbolImageDescribers.LocalParticipantView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.LocalParticipantView and conformance SymbolImageDescribers.LocalParticipantView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.LocalParticipantView and conformance SymbolImageDescribers.LocalParticipantView;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.LocalParticipantView and conformance SymbolImageDescribers.LocalParticipantView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.LocalParticipantView and conformance SymbolImageDescribers.LocalParticipantView);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.LocalParticipantView()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.LocalParticipantView] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.LocalParticipantView]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.ParticipantView and conformance SymbolImageDescribers.ParticipantView()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.ParticipantView and conformance SymbolImageDescribers.ParticipantView;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.ParticipantView and conformance SymbolImageDescribers.ParticipantView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.ParticipantView and conformance SymbolImageDescribers.ParticipantView);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.ParticipantView()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.ParticipantView] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.ParticipantView]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.TVHandoff and conformance SymbolImageDescribers.TVHandoff()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.TVHandoff and conformance SymbolImageDescribers.TVHandoff;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.TVHandoff and conformance SymbolImageDescribers.TVHandoff)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.TVHandoff and conformance SymbolImageDescribers.TVHandoff);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.TVHandoff()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.TVHandoff] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.TVHandoff]);
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.VideoMessaging and conformance SymbolImageDescribers.VideoMessaging()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.VideoMessaging and conformance SymbolImageDescribers.VideoMessaging;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.VideoMessaging and conformance SymbolImageDescribers.VideoMessaging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.VideoMessaging and conformance SymbolImageDescribers.VideoMessaging);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.Recents and conformance SymbolImageDescribers.Recents()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.Recents and conformance SymbolImageDescribers.Recents;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.Recents and conformance SymbolImageDescribers.Recents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.Recents and conformance SymbolImageDescribers.Recents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolImageDescribers.FaceID and conformance SymbolImageDescribers.FaceID()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolImageDescribers.FaceID and conformance SymbolImageDescribers.FaceID;
  if (!lazy protocol witness table cache variable for type SymbolImageDescribers.FaceID and conformance SymbolImageDescribers.FaceID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolImageDescribers.FaceID and conformance SymbolImageDescribers.FaceID);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolImageDescribers.FaceID()
{
  return lazy protocol witness table accessor for type [UIWindow] and conformance [A](&lazy protocol witness table cache variable for type [SymbolImageDescribers.FaceID] and conformance [A], &demangling cache variable for type metadata for [SymbolImageDescribers.FaceID]);
}

void destroy for SymbolImageDescription(uint64_t a1)
{
  swift_bridgeObjectRelease();

  unint64_t v2 = *(void **)(a1 + 56);
}

uint64_t initializeWithCopy for SymbolImageDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  unint64_t v5 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

uint64_t assignWithCopy for SymbolImageDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v4 = *(void **)(a2 + 24);
  unint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v7 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  id v8 = *(void **)(a1 + 56);
  uint64_t v9 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v9;
  id v10 = v9;

  return a1;
}

uint64_t assignWithTake for SymbolImageDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  id v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  return a1;
}

void type metadata accessor for SymbolImageDescription()
{
}

void type metadata accessor for SymbolImageDescribers()
{
}

void type metadata accessor for SymbolImageDescribers.DrawerDisc()
{
}

void type metadata accessor for SymbolImageDescribers.DrawerPill()
{
}

void type metadata accessor for SymbolImageDescribers.DrawerTable()
{
}

void type metadata accessor for SymbolImageDescribers.Captions()
{
}

uint64_t getEnumTagSinglePayload for SymbolImageDescribers.ConversationControls(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDD)
  {
    if (a2 + 35 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 35) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 36;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v5 = v6 - 36;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SymbolImageDescribers.ConversationControls(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDC)
  {
    unsigned int v6 = ((a2 - 221) >> 8) + 1;
    *unint64_t result = a2 + 35;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C351D7E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 35;
        break;
    }
  }
  return result;
}

void type metadata accessor for SymbolImageDescribers.ConversationControls()
{
}

void type metadata accessor for SymbolImageDescribers.ConversationControlsSubtitles()
{
}

void type metadata accessor for SymbolImageDescribers.ConversationActivityIcon()
{
}

uint64_t getEnumTagSinglePayload for SymbolImageDescribers.DrawerDisc(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_23_50(-1);
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 6);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 6);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 6);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_23_50(v8);
}

unsigned char *storeEnumTagSinglePayload for SymbolImageDescribers.DrawerDisc(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_21_50((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_18_55((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C351D970);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_19_48((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_20_54(result, a2 + 5);
        break;
    }
  }
  return result;
}

void type metadata accessor for SymbolImageDescribers.EphemeralAlerts()
{
}

void type metadata accessor for SymbolImageDescribers.BottomBar()
{
}

void type metadata accessor for SymbolImageDescribers.Roster()
{
}

uint64_t getEnumTagSinglePayload for SymbolImageDescribers.DrawerTable(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_23_50(-1);
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 14);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 14);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 14);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_23_50(v8);
}

unsigned char *storeEnumTagSinglePayload for SymbolImageDescribers.DrawerTable(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_21_50((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_18_55((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C351DB00);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_19_48((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_20_54(result, a2 + 13);
        break;
    }
  }
  return result;
}

void type metadata accessor for SymbolImageDescribers.LocalParticipantView()
{
}

unsigned char *storeEnumTagSinglePayload for SymbolImageDescribers.ParticipantView(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C351DC00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for SymbolImageDescribers.ParticipantView()
{
}

void type metadata accessor for SymbolImageDescribers.TVHandoff()
{
}

uint64_t getEnumTagSinglePayload for SymbolImageDescribers.Captions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_23_50(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 3);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 3);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 3);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_23_50(v8);
}

unsigned char *storeEnumTagSinglePayload for SymbolImageDescribers.Captions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_21_50((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_18_55((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C351DD80);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_19_48((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_20_54(result, a2 + 2);
        break;
    }
  }
  return result;
}

void type metadata accessor for SymbolImageDescribers.VideoMessaging()
{
}

uint64_t getEnumTagSinglePayload for SymbolImageDescribers.DrawerPill(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_23_50(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_23_50((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_23_50(v8);
}

unsigned char *storeEnumTagSinglePayload for SymbolImageDescribers.DrawerPill(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_21_50((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_18_55((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C351DEF4);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_19_48((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_20_54(result, a2 + 1);
        break;
    }
  }
  return result;
}

void type metadata accessor for SymbolImageDescribers.Recents()
{
}

unsigned char *storeEnumTagSinglePayload for SymbolImageDescribers.BottomBar(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C351DFC4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for SymbolImageDescribers.FaceID()
{
}

uint64_t dispatch thunk of static SymbolImageProviding.symbolImage(for:)(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  char v5 = *((unsigned char *)a1 + 32);
  char v6 = *((unsigned char *)a1 + 33);
  uint64_t v7 = *((void *)a1 + 5);
  char v8 = *((unsigned char *)a1 + 48);
  uint64_t v9 = *((void *)a1 + 7);
  id v10 = *(uint64_t (**)(long long *))(a3 + 8);
  long long v12 = *a1;
  uint64_t v13 = v3;
  uint64_t v14 = v4;
  char v15 = v5;
  char v16 = v6;
  uint64_t v17 = v7;
  char v18 = v8;
  uint64_t v19 = v9;
  return v10(&v12);
}

uint64_t dispatch thunk of SymbolImageDescribing.symbolImageDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ClarityUIContact.displayName.getter()
{
  return CNContact.clarityUIDisplayName.getter();
}

id ClarityUIContact.avatar.getter@<X0>(void *a1@<X8>)
{
  int v2 = *(void **)v1;
  id v5 = *(id *)(v1 + 8);
  *a1 = *(void *)v1;
  a1[1] = v5;
  id v3 = v2;
  return v5;
}

uint64_t ClarityUIContact.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void ClarityUIContact.callHistoryPredicate.getter()
{
  id v31 = *v0;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  id v1 = objc_msgSend(*v0, sel_tuHandlesForPhoneNumbers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_13;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v4 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x1C87744F0](v4, v2);
    }
    else {
      id v5 = *(id *)(v2 + 8 * v4 + 32);
    }
    char v6 = v5;
    id v7 = objc_msgSend(v5, sel_value);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    uint64_t v11 = outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(v6, (SEL *)&selRef_normalizedValue);
    uint64_t v13 = v12;
    id v14 = objc_allocWithZone(MEMORY[0x1E4F57C78]);
    @nonobjc CHHandle.init(type:value:normalizedValue:)(2, v8, v10, v11, v13);
    MEMORY[0x1C87733A0]();
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      OUTLINED_FUNCTION_1_4();
    }
    ++v4;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  while (v3 != v4);
LABEL_13:
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v31, sel_tuHandlesForEmailAddresses);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v16 >> 62))
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17) {
      goto LABEL_15;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    id v29 = self;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_predicateForCallsWithAnyRemoteParticipantHandles_, isa);

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_25;
  }
LABEL_15:
  if (v17 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x1C87744F0](v18, v16);
      }
      else {
        id v19 = *(id *)(v16 + 8 * v18 + 32);
      }
      id v20 = v19;
      id v21 = objc_msgSend(v19, sel_value);
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      uint64_t v25 = outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(v20, (SEL *)&selRef_normalizedValue);
      uint64_t v27 = v26;
      id v28 = objc_allocWithZone(MEMORY[0x1E4F57C78]);
      @nonobjc CHHandle.init(type:value:normalizedValue:)(3, v22, v24, v25, v27);
      MEMORY[0x1C87733A0]();
      if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        OUTLINED_FUNCTION_1_4();
      }
      ++v18;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    while (v17 != v18);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
}

unint64_t static ClarityUIContact.requiredDescriptors(for:)(uint64_t a1)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  unint64_t v2 = static CNContact.requiredDescriptorsForClarityUIDisplayName.getter();
  id v3 = objc_msgSend(self, sel_settingsWithContactStore_, a1);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BB40]), sel_initWithSettings_, v3);

  id v5 = objc_msgSend(v4, sel_descriptorForRequiredKeys);
  char v6 = (void *)*MEMORY[0x1E4F1AE28];
  id v7 = (void *)*MEMORY[0x1E4F1ADA8];
  uint64_t v8 = (void *)*MEMORY[0x1E4F1AE48];
  if (v2 >> 62)
  {
    id v19 = v6;
    id v20 = v7;
    id v21 = v8;
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v10 = v6;
    id v11 = v7;
    id v12 = v8;
    swift_bridgeObjectRetain();
  }
  if (__OFADD__(v9, 4))
  {
    __break(1u);
  }
  else
  {
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v9 + 4, 1);
    specialized Array._endMutation()();
    uint64_t v13 = swift_unknownObjectRetain();
    MEMORY[0x1C87733A0](v13);
    OUTLINED_FUNCTION_10_32();
    if (!v14) {
      goto LABEL_5;
    }
  }
  OUTLINED_FUNCTION_0_102();
LABEL_5:
  OUTLINED_FUNCTION_2_122();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v15 = swift_unknownObjectRetain();
  MEMORY[0x1C87733A0](v15);
  OUTLINED_FUNCTION_10_32();
  if (v14) {
    OUTLINED_FUNCTION_0_102();
  }
  OUTLINED_FUNCTION_2_122();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v16 = swift_unknownObjectRetain();
  MEMORY[0x1C87733A0](v16);
  OUTLINED_FUNCTION_10_32();
  if (v14) {
    OUTLINED_FUNCTION_0_102();
  }
  OUTLINED_FUNCTION_2_122();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v17 = swift_unknownObjectRetain();
  MEMORY[0x1C87733A0](v17);
  OUTLINED_FUNCTION_10_32();
  if (v14) {
    OUTLINED_FUNCTION_0_102();
  }
  OUTLINED_FUNCTION_2_122();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return v2;
}

ConversationKit::ClarityUIContact __swiftcall ClarityUIContact.init(cnContact:contactStore:)(CNContact cnContact, CNContactStore contactStore)
{
  id v4 = v2;
  id v5 = cnContact.super.isa;
  char v6 = contactStore.super.isa;
  id v7 = [(objc_class *)v5 identifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v9;

  *id v4 = v5;
  v4[1] = v6;
  v4[2] = (objc_class *)v8;
  v4[3] = v10;
  result.id._object = v14;
  result.id._uint64_t countAndFlagsBits = v13;
  result.contactStore.super.Class isa = v12;
  result.cnContact.super.Class isa = v11;
  return result;
}

uint64_t static ClarityUIContact.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t static CNContact.requiredDescriptorsForClarityUIDisplayName.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C3771690;
  id v1 = objc_msgSend(self, sel_descriptorForRequiredKeysForStyle_, 0);
  unint64_t v2 = (void *)*MEMORY[0x1E4F1ADF0];
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  id v3 = (void *)*MEMORY[0x1E4F1AEA0];
  id v4 = (void *)*MEMORY[0x1E4F1ADE0];
  id v5 = (void **)MEMORY[0x1E4F1AEC0];
  *(void *)(v0 + 48) = *MEMORY[0x1E4F1AEA0];
  *(void *)(v0 + 56) = v4;
  char v6 = *v5;
  id v7 = (void *)*MEMORY[0x1E4F1ADC8];
  *(void *)(v0 + 64) = *v5;
  *(void *)(v0 + 72) = v7;
  uint64_t v8 = (void *)*MEMORY[0x1E4F1AEE0];
  *(void *)(v0 + 80) = *MEMORY[0x1E4F1AEE0];
  specialized Array._endMutation()();
  id v9 = v2;
  id v10 = v3;
  id v11 = v4;
  id v12 = v6;
  id v13 = v7;
  id v14 = v8;
  return v0;
}

uint64_t CNContact.clarityUIDisplayName.getter()
{
  id v1 = objc_msgSend(v0, sel_nickname);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v25[0] = v2;
  uint64_t v26 = v2;
  uint64_t v27 = v4;
  uint64_t v5 = type metadata accessor for CharacterSet();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  swift_bridgeObjectRetain();
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v9 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v11 = v10;
  id v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12((char *)v25 - v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    uint64_t v14 = v25[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = CNContact.shortName.getter();
    uint64_t v4 = v15;
  }
  uint64_t v16 = v14;
  uint64_t v26 = v14;
  uint64_t v27 = v4;
  MEMORY[0x1F4188790](v14);
  swift_bridgeObjectRetain();
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v17 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v19 = v18;
  v12((char *)v25 - v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v20) {
    return v16;
  }
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(self, sel_stringFromContact_style_, v25[1], 0);
  if (!v22) {
    return CNContact.fallbackDisplayName.getter();
  }
  uint64_t v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v24;
}

uint64_t CNContact.shortName.getter()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for PersonNameComponents();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  PersonNameComponents.init()();
  id v6 = objc_msgSend(v1, sel_givenName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.givenName.setter();
  id v7 = objc_msgSend(v1, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.middleName.setter();
  id v8 = objc_msgSend(v1, sel_familyName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.familyName.setter();
  uint64_t v9 = self;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(v9, sel_localizedStringFromPersonNameComponents_style_options_, isa, 1, 0);

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v12;
}

uint64_t CNContact.fallbackDisplayName.getter()
{
  id v1 = objc_msgSend(v0, sel_tuHandlesForEmailAddresses);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_8;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    id v3 = (id)MEMORY[0x1C87744F0](0, v2);
  }
  else {
    id v3 = *(id *)(v2 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = outlined bridged method (ob) of @objc TUHandle.normalizedValue.getter(v4);
  if (v6) {
    return v5;
  }
LABEL_9:
  id v8 = objc_msgSend(v0, sel_tuHandlesForPhoneNumbers);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v9 >> 62))
  {
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_17;
  }
LABEL_11:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v9 & 0xC000000000000001) == 0, v9);
  if ((v9 & 0xC000000000000001) != 0) {
    id v10 = (id)MEMORY[0x1C87744F0](0, v9);
  }
  else {
    id v10 = *(id *)(v9 + 32);
  }
  id v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v5 = outlined bridged method (ob) of @objc TUHandle.normalizedValue.getter(v11);
  if (v12) {
    return v5;
  }
LABEL_18:
  id v15 = objc_msgSend(v0, sel_handles);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v16 + 16))
  {
    uint64_t v13 = *(void *)(v16 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v13;
}

id ClarityUIContact.cnContact.getter()
{
  return *v0;
}

id ClarityUIContact.contactStore.getter()
{
  return *(id *)(v0 + 8);
}

void ClarityUIContact.contactStore.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*ClarityUIContact.contactStore.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t ClarityUIContact.fullImage.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = outlined bridged method (pb) of @objc CNContact.imageData.getter(*v0);
  if (v3 >> 60 == 15) {
    return 0;
  }
  uint64_t v4 = v2;
  unint64_t v5 = v3;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  outlined copy of Data._Representation(v4, v5);
  id v6 = UIImage.__allocating_init(data:)(v4, v5);
  if (!v6)
  {
LABEL_8:
    outlined consume of Data?(v4, v5);
    return 0;
  }
  uint64_t v7 = v6;
  id v8 = (CGImage *)objc_msgSend(v6, sel_CGImage);
  if (!v8)
  {

    goto LABEL_8;
  }
  unint64_t v9 = v8;
  objc_msgSend(v1, sel_cropRect);
  CGImageRef v10 = CGImageCreateWithImageInRect(v9, v14);
  if (!v10)
  {

    goto LABEL_8;
  }
  CGImageRef v11 = v10;
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_initWithCGImage_, v10);
  uint64_t v12 = Image.init(uiImage:)();

  outlined consume of Data?(v4, v5);
  return v12;
}

BOOL ClarityUIContact.preferredContentMode.getter()
{
  uint64_t v1 = outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(*v0, (SEL *)&selRef_imageType);
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v1 != v4 || v3 != v5)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v7 & 1) != 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t protocol witness for Identifiable.id.getter in conformance ClarityUIContact@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ClarityUIContact.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ClarityUIContact.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int ClarityUIContact.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClarityUIContact()
{
  return Hasher._finalize()();
}

id @nonobjc CHHandle.init(type:value:normalizedValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = (void *)MEMORY[0x1C87730B0](a2, a3);
  swift_bridgeObjectRelease();
  if (a5)
  {
    CGImageRef v10 = (void *)MEMORY[0x1C87730B0](a4, a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    CGImageRef v10 = 0;
  }
  id v11 = objc_msgSend(v5, sel_initWithType_value_normalizedValue_, a1, v9, v10);

  return v11;
}

uint64_t outlined bridged method (pb) of @objc TUHandle.normalizedValue.getter(void *a1)
{
  return outlined bridged method (pb) of @objc TUConversationLink.displayName.getter(a1, (SEL *)&selRef_normalizedValue);
}

uint64_t outlined bridged method (pb) of @objc CNContact.imageData.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_imageData);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type ClarityUIContact and conformance ClarityUIContact()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIContact and conformance ClarityUIContact;
  if (!lazy protocol witness table cache variable for type ClarityUIContact and conformance ClarityUIContact)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIContact and conformance ClarityUIContact);
  }
  return result;
}

uint64_t destroy for ClarityUIContact(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ClarityUIContact(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  id v6 = v3;
  id v7 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClarityUIContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClarityUIContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ClarityUIContact()
{
  return &type metadata for ClarityUIContact;
}

uint64_t AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = *v1;
  v2[13] = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
  uint64_t v4 = *(void *)(v3 + 80);
  v2[15] = v4;
  v2[16] = swift_getTupleTypeMetadata2();
  uint64_t v5 = type metadata accessor for Optional();
  v2[17] = v5;
  OUTLINED_FUNCTION_1(v5);
  v2[18] = v6;
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  OUTLINED_FUNCTION_4_110();
  v2[21] = v7;
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v2[28] = TupleTypeMetadata2;
  OUTLINED_FUNCTION_1(TupleTypeMetadata2);
  v2[29] = v9;
  v2[30] = swift_task_alloc();
  OUTLINED_FUNCTION_4_110();
  v2[31] = v10;
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  uint64_t v11 = *(void *)(v4 - 8);
  v2[35] = v11;
  v2[36] = *(void *)(v11 + 64);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v12 = static CallScreeningActor.shared;
  v2[40] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](AnsweringMachineService.handleNewIncomingCall(_:), v12, 0);
}

uint64_t AnsweringMachineService.handleNewIncomingCall(_:)()
{
  Swift::String v116 = v0;
  id v1 = *(void (**)(void))(v0[35] + 16);
  OUTLINED_FUNCTION_94();
  v1();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  unsigned __int8 v114 = v1;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[38];
    uint64_t v4 = v0[39];
    uint64_t v6 = v0[35];
    uint64_t v7 = v0[15];
    log = v2;
    id v8 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v115 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)id v8 = 136446210;
    ((void (*)(uint64_t, uint64_t, uint64_t))v114)(v5, v4, v7);
    uint64_t v9 = *(void (**)(void))(v6 + 8);
    ((void (*)(uint64_t, uint64_t))v9)(v4, v7);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    unint64_t v111 = v9;
    ((void (*)(uint64_t, uint64_t))v9)(v5, v7);
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, log, v3, "New incoming call: %{public}s", v8, 0xCu);
    OUTLINED_FUNCTION_88_1();
    OUTLINED_FUNCTION_3();
    id v1 = v114;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    unint64_t v111 = *(void (**)(void))(v0[35] + 8);
    ((void (*)(void, void))v111)(v0[39], v0[15]);
  }
  uint64_t v13 = v0[34];
  uint64_t v15 = v0[15];
  uint64_t v14 = v0[16];
  uint64_t v16 = v0[12];
  OUTLINED_FUNCTION_94();
  v1();
  uint64_t v17 = 1;
  __swift_storeEnumTagSinglePayload(v13, 0, 1, v15);
  uint64_t v18 = v16 + *(void *)(*(void *)v16 + 144);
  swift_beginAccess();
  uint64_t v113 = v18;
  if (!__swift_getEnumTagSinglePayload(v18, 1, v14))
  {
    OUTLINED_FUNCTION_94();
    v1();
    uint64_t v17 = 0;
  }
  uint64_t v20 = v0[33];
  uint64_t v19 = v0[34];
  uint64_t v21 = v0[30];
  uint64_t v22 = v0[31];
  uint64_t v23 = v0[27];
  uint64_t v24 = v0[28];
  uint64_t v25 = v0[15];
  __swift_storeEnumTagSinglePayload(v20, v17, 1, v25);
  uint64_t v26 = v21 + *(int *)(v24 + 48);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  v27(v21, v19, v23);
  v27(v26, v20, v23);
  if (__swift_getEnumTagSinglePayload(v21, 1, v25) == 1)
  {
    id v28 = *(void (**)(void))(v0[31] + 8);
    OUTLINED_FUNCTION_50_1();
    v28();
    OUTLINED_FUNCTION_50_1();
    v28();
    OUTLINED_FUNCTION_4_26();
    if (!v29) {
      goto LABEL_13;
    }
    OUTLINED_FUNCTION_50_1();
    v28();
  }
  else
  {
    v27(v0[32], v0[30], v0[27]);
    OUTLINED_FUNCTION_4_26();
    if (v29)
    {
      uint64_t v30 = v0[34];
      uint64_t v31 = v0[32];
      uint64_t v32 = v0[27];
      uint64_t v33 = v0[15];
      id v34 = *(void (**)(uint64_t, uint64_t))(v0[31] + 8);
      v34(v0[33], v32);
      v34(v30, v32);
      ((void (*)(uint64_t, uint64_t))v111)(v31, v33);
LABEL_13:
      (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
      goto LABEL_14;
    }
    uint64_t v61 = v0[38];
    uint64_t v62 = v0[32];
    uint64_t v63 = v0[31];
    uint64_t v64 = v0[15];
    OUTLINED_FUNCTION_26_46();
    v65();
    char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
    ((void (*)(uint64_t, uint64_t))v111)(v61, v64);
    uint64_t v67 = *(void (**)(void))(v63 + 8);
    OUTLINED_FUNCTION_19_49();
    v67();
    OUTLINED_FUNCTION_19_49();
    v67();
    ((void (*)(uint64_t, uint64_t))v111)(v62, v64);
    OUTLINED_FUNCTION_19_49();
    v67();
    if ((v66 & 1) == 0)
    {
LABEL_14:
      (*(void (**)(void, uint64_t, void))(v0[18] + 16))(v0[20], v113, v0[17]);
      OUTLINED_FUNCTION_4_26();
      if (v29)
      {
        (*(void (**)(void, void))(v0[18] + 8))(v0[20], v0[17]);
      }
      else
      {
        uint64_t v35 = v0[35];
        uint64_t v37 = (void *)v0[25];
        uint64_t v36 = (uint64_t *)v0[26];
        uint64_t v38 = v0[24];
        uint64_t v39 = (uint64_t *)v0[20];
        uint64_t v40 = v0[21];
        uint64_t v41 = v0[15];
        uint64_t v42 = v0[16];
        uint64_t v43 = *(int *)(v42 + 48);
        uint64_t v44 = (char *)v36 + v43;
        uint64_t v45 = *v39;
        *uint64_t v36 = *v39;
        uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        v105((char *)v36 + v43, (char *)v39 + v43, v41);
        id v46 = (char *)v37 + *(int *)(v42 + 48);
        *uint64_t v37 = v45;
        ((void (*)(char *, char *, uint64_t))v114)(v46, v44, v41);
        (*(void (**)(uint64_t, void *, uint64_t))(v40 + 16))(v38, v37, v42);
        OUTLINED_FUNCTION_26_46();
        v47();
        swift_retain_n();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          os_log_type_t type = v49;
          uint64_t v51 = v0[38];
          uint64_t v52 = v0[21];
          uint64_t v53 = v0[15];
          uint64_t v103 = v48;
          uint64_t v54 = (uint8_t *)OUTLINED_FUNCTION_37();
          uint64_t v102 = OUTLINED_FUNCTION_9_0();
          *(_DWORD *)uint64_t v54 = 136446210;
          uint64_t v115 = v102;
          OUTLINED_FUNCTION_24_49();
          v55();
          uint64_t v56 = OUTLINED_FUNCTION_286();
          ((void (*)(uint64_t))v105)(v56);
          uint64_t v57 = *(void (**)(void))(v52 + 8);
          OUTLINED_FUNCTION_50_1();
          v57();
          uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v60 = v59;
          ((void (*)(uint64_t, uint64_t))v111)(v51, v53);
          v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, &v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_50_1();
          v57();
          _os_log_impl(&dword_1C2F90000, v103, type, "Removing call: %{public}s", v54, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
          OUTLINED_FUNCTION_3();
        }
        else
        {
          uint64_t v79 = v0[23];
          uint64_t v80 = v0[16];
          uint64_t v57 = *(void (**)(void))(v0[21] + 8);
          ((void (*)(void, uint64_t))v57)(v0[24], v80);

          ((void (*)(uint64_t, uint64_t))v57)(v79, v80);
        }
        uint64_t v81 = v0[26];
        uint64_t v82 = v0[16];
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        MEMORY[0x1C8773690](v45, MEMORY[0x1E4FBC848] + 8, v83, MEMORY[0x1E4FBC0F0]);
        swift_release();
        ((void (*)(uint64_t, uint64_t))v57)(v81, v82);
      }
      uint64_t v84 = v0[35];
      uint64_t v85 = (uint64_t *)v0[19];
      *(void *)os_log_type_t typea = v0[18];
      uint64_t v112 = v0[17];
      uint64_t v86 = v0[15];
      uint64_t v88 = v0[13];
      uint64_t v87 = v0[14];
      uint64_t v104 = v0[38];
      uint64_t v106 = v0[12];
      os_log_t loga = (os_log_t)v0[16];
      static TaskPriority.userInitiated.getter();
      uint64_t v89 = type metadata accessor for TaskPriority();
      __swift_storeEnumTagSinglePayload(v87, 0, 1, v89);
      OUTLINED_FUNCTION_24_49();
      v90();
      uint64_t v91 = static CallScreeningActor.shared;
      unint64_t v92 = lazy protocol witness table accessor for type CallScreeningActor.ActorType and conformance CallScreeningActor.ActorType();
      unint64_t v93 = (*(unsigned __int8 *)(v84 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v94 = swift_allocObject();
      *(void *)(v94 + 16) = v91;
      *(void *)(v94 + 24) = v92;
      *(void *)(v94 + 32) = v86;
      *(_OWORD *)(v94 + 40) = *(_OWORD *)(v88 + 88);
      *(void *)(v94 + 56) = *(void *)(v88 + 104);
      *(void *)(v94 + 64) = v106;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v94 + v93, v104, v86);
      swift_retain();
      swift_retain();
      uint64_t v95 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v87, (uint64_t)&async function pointer to partial apply for closure #1 in AnsweringMachineService.handleNewIncomingCall(_:), v94);
      v0[41] = v95;
      *uint64_t v85 = v95;
      OUTLINED_FUNCTION_24_49();
      v96();
      __swift_storeEnumTagSinglePayload((uint64_t)v85, 0, 1, (uint64_t)loga);
      swift_beginAccess();
      id v97 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)typea + 40);
      swift_retain();
      v97(v113, v85, v112);
      swift_endAccess();
      id v98 = (void *)swift_task_alloc();
      v0[42] = v98;
      uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *id v98 = v0;
      v98[1] = AnsweringMachineService.handleNewIncomingCall(_:);
      uint64_t v100 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v101 = MEMORY[0x1E4FBC0F0];
      return MEMORY[0x1F4187D90](v99, v95, v100, v99, v101);
    }
  }
  OUTLINED_FUNCTION_94();
  v114();
  unint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v71 = v0[37];
    uint64_t v70 = v0[38];
    uint64_t v72 = v0[15];
    uint64_t v73 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v115 = OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_37_25(4.8751e-34);
    ((void (*)(uint64_t, uint64_t, uint64_t))v114)(v70, v71, v72);
    OUTLINED_FUNCTION_50_1();
    v111();
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v76 = v75;
    OUTLINED_FUNCTION_50_1();
    v111();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v68, v69, "New incoming call already being handled: %{public}s", v73, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    ((void (*)(void, void))v111)(v0[37], v0[15]);
  }

  OUTLINED_FUNCTION_11_67();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v77();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 320);
  if (v0) {
    uint64_t v4 = AnsweringMachineService.handleNewIncomingCall(_:);
  }
  else {
    uint64_t v4 = AnsweringMachineService.handleNewIncomingCall(_:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_release();
  OUTLINED_FUNCTION_11_67();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  return v0();
}

uint64_t AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_11_2();
  OUTLINED_FUNCTION_15_69();
  uint64_t v28 = v18[24];
  uint64_t v29 = v18[23];
  uint64_t v30 = v18[22];
  uint64_t v31 = v18[20];
  uint64_t v32 = v18[19];
  uint64_t v33 = v18[14];
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_6();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, v28, v29, v30, v31, v32, v33, a16, a17, a18);
}

uint64_t AnsweringMachineService.__allocating_init(shouldAutoScreenCall:requestToScreen:logger:)()
{
  OUTLINED_FUNCTION_1_2();
  uint64_t v0 = swift_allocObject();
  AnsweringMachineService.init(shouldAutoScreenCall:requestToScreen:logger:)();
  return v0;
}

uint64_t AnsweringMachineService.currentCall.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
  uint64_t v5 = *(void *)(v3 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = 1;
  if (!__swift_getEnumTagSinglePayload(v4, 1, TupleTypeMetadata2))
  {
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t))(v8 + 16))(a1);
    uint64_t v7 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a1, v7, 1, v5);
}

void *AnsweringMachineService.init(shouldAutoScreenCall:requestToScreen:logger:)()
{
  OUTLINED_FUNCTION_1_2();
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADAC8]), sel_init, (unsigned __int128)0, (unsigned __int128)0, 0);
  type metadata accessor for DeviceRingerStateObserver();
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *(unsigned char *)(v7 + 20) = 0;
  type metadata accessor for ScreeningSoundAndHapticsManager();
  uint64_t v8 = swift_allocObject();
  v1[6] = specialized ScreeningSoundAndHapticsManager.init(with:ringerStateObserver:feedbackGenerator:)((uint64_t)v6, v7, (uint64_t)&v14, v8);
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 144);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, TupleTypeMetadata2);
  v1[2] = v5;
  v1[3] = v4;
  v1[4] = v3;
  v1[5] = v2;
  unint64_t v11 = (char *)v1 + direct field offset for AnsweringMachineService.logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_48();
  (*(void (**)(char *, uint64_t))(v12 + 32))(v11, v0);
  return v1;
}

uint64_t AnsweringMachineService.requestToScreen(call:)(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = *v1;
  v2[8] = *v1;
  v2[9] = *(void *)(v3 + 80);
  OUTLINED_FUNCTION_5_3();
  v2[10] = v4;
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static CallScreeningActor.shared;
  v2[15] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](AnsweringMachineService.requestToScreen(call:), v5, 0);
}

#error "1C3520E0C: call analysis failed (funcsize=117)"

uint64_t AnsweringMachineService.requestToScreen(call:)()
{
  id v1 = (void (*)(uint64_t, void))v0[20];
  uint64_t v2 = v0[6];
  swift_release();
  v1(v2, 0);
  v0[23] = 0;
  uint64_t v3 = v0[15];
  return MEMORY[0x1F4188298](AnsweringMachineService.requestToScreen(call:), v3, 0);
}

uint64_t AnsweringMachineService.requestToScreen(call:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (*a10)(uint64_t, uint64_t, uint64_t), uint64_t a11, uint64_t a12, os_log_t log, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_11_2();
  a25 = v27;
  a26 = v28;
  OUTLINED_FUNCTION_15_69();
  a24 = v26;
  (*(void (**)(void, void, void))(v26 + 136))(*(void *)(v26 + 96), *(void *)(v26 + 48), *(void *)(v26 + 72));
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = *(void (**)(void))(v26 + 152);
    log = v29;
    uint64_t v33 = *(void *)(v26 + 96);
    uint64_t v32 = *(void *)(v26 + 104);
    uint64_t v34 = *(void *)(v26 + 72);
    a10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 136);
    a11 = *(void *)(v26 + 64);
    uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_37();
    a14 = OUTLINED_FUNCTION_9_0();
    a15 = a14;
    OUTLINED_FUNCTION_37_25(4.8751e-34);
    a12 = v36;
    a10(v32, v33, v34);
    OUTLINED_FUNCTION_50_1();
    v31();
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v39 = v38;
    OUTLINED_FUNCTION_50_1();
    v31();
    *(void *)(v26 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, log, v30, "Screening call: %{public}s", v35, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    OUTLINED_FUNCTION_26_2();
    v40();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_7_6();
  return v42(v41, v42, v43, v44, v45, v46, v47, v48, a9, a10, a11, a12, log, a14, a15, a16, a17, a18);
}

uint64_t AnsweringMachineService.requestToScreen(call:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (*a9)(uint64_t), uint64_t a10, os_log_t log, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_11_2();
  a25 = v28;
  a26 = v29;
  OUTLINED_FUNCTION_15_69();
  a24 = v27;
  os_log_type_t v30 = *(void **)(v27 + 184);
  (*(void (**)(void, void, void))(v27 + 136))(*(void *)(v27 + 88), *(void *)(v27 + 48), *(void *)(v27 + 72));
  id v31 = v30;
  id v32 = v30;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = *(void **)(v27 + 184);
    uint64_t v36 = *(void (**)(void))(v27 + 152);
    a9 = *(void (**)(uint64_t))(v27 + 136);
    a10 = *(void *)(v27 + 64);
    swift_slowAlloc();
    a12 = (void *)OUTLINED_FUNCTION_21_51();
    a13 = OUTLINED_FUNCTION_9_0();
    a14 = a13;
    *(_DWORD *)uint64_t v26 = 136446466;
    uint64_t v37 = OUTLINED_FUNCTION_286();
    a9(v37);
    log = v33;
    OUTLINED_FUNCTION_4_1();
    v36();
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v40 = v39;
    OUTLINED_FUNCTION_4_1();
    v36();
    *(void *)(v27 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &a14);
    OUTLINED_FUNCTION_286();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2112;
    id v41 = v35;
    uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v27 + 24) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a12 = v42;

    uint64_t v43 = v33;
    _os_log_impl(&dword_1C2F90000, v33, v34, "Failed to screen call: %{public}s with error %@", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_88_1();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_88_1();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v43 = *(NSObject **)(v27 + 184);
    OUTLINED_FUNCTION_26_2();
    v44();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_7_6();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, log, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  uint64_t v6 = *a4;
  v5[7] = *a4;
  uint64_t v7 = *(void *)(v6 + 80);
  v5[8] = v7;
  v5[9] = *(void *)(v7 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static CallScreeningActor.shared;
  v5[13] = static CallScreeningActor.shared;
  return MEMORY[0x1F4188298](closure #1 in AnsweringMachineService.handleNewIncomingCall(_:), v8, 0);
}

#error "1C3521664: call analysis failed (funcsize=124)"

uint64_t closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 152) = v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 104);
  if (v1)
  {
    uint64_t v8 = closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  }
  else
  {
    *(unsigned char *)(v5 + 176) = a1 & 1;
    uint64_t v8 = closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10, uint8_t *a11, uint64_t a12, uint64_t a13, os_log_t log, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_11_2();
  a25 = v27;
  a26 = v28;
  OUTLINED_FUNCTION_15_69();
  a24 = v26;
  if (*(unsigned char *)(v26 + 176) == 1 && (static Task<>.isCancelled.getter() & 1) == 0)
  {
    uint64_t v49 = (void *)swift_task_alloc();
    *(void *)(v26 + 160) = v49;
    *uint64_t v49 = v26;
    v49[1] = closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
    OUTLINED_FUNCTION_7_6();
    return AnsweringMachineService.requestToScreen(call:)(v50);
  }
  else
  {
    (*(void (**)(void, void, void))(v26 + 120))(*(void *)(v26 + 80), *(void *)(v26 + 48), *(void *)(v26 + 64));
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    id v32 = *(void (**)(void))(v26 + 136);
    if (v31)
    {
      a13 = v26 + 24;
      log = v29;
      uint64_t v34 = *(void *)(v26 + 80);
      uint64_t v33 = *(void *)(v26 + 88);
      uint64_t v35 = *(void *)(v26 + 64);
      a9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 120);
      a10 = *(void *)(v26 + 56);
      uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_37();
      a12 = OUTLINED_FUNCTION_9_0();
      a15 = a12;
      *(_DWORD *)uint64_t v36 = 136446210;
      a11 = v36 + 4;
      a9(v33, v34, v35);
      OUTLINED_FUNCTION_4_1();
      v32();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v39 = v38;
      OUTLINED_FUNCTION_286();
      OUTLINED_FUNCTION_4_1();
      v32();
      *(void *)(v26 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v29 = log;
      _os_log_impl(&dword_1C2F90000, log, v30, "Will not screen call: %{public}s", v36, 0xCu);
      OUTLINED_FUNCTION_88_1();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      ((void (*)(void, void))v32)(*(void *)(v26 + 80), *(void *)(v26 + 64));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_7_6();
    return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, log, a15, a16, a17, a18);
  }
}

uint64_t closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)()
{
  OUTLINED_FUNCTION_0_5();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_2_2();
  void *v5 = v4;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 104);
    return MEMORY[0x1F4188298](closure #1 in AnsweringMachineService.handleNewIncomingCall(_:), v6, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_7_4();
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v2 = *(void **)(v0 + 152);
  OUTLINED_FUNCTION_33_33();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_107(v5))
  {
    OUTLINED_FUNCTION_37();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_21_51();
    OUTLINED_FUNCTION_24_3(5.7779e-34);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_16_53(v7);
    *uint64_t v6 = v1;

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v8, v9, "Failed to handle new incoming call with error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v2 = *(void **)(v0 + 168);
  OUTLINED_FUNCTION_33_33();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_107(v5))
  {
    OUTLINED_FUNCTION_37();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_21_51();
    OUTLINED_FUNCTION_24_3(5.7779e-34);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_16_53(v7);
    *uint64_t v6 = v1;

    OUTLINED_FUNCTION_52_1(&dword_1C2F90000, v8, v9, "Failed to handle new incoming call with error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t AnsweringMachineService.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_26_2();
  v1();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
  swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_26_2();
  v2();
  return v0;
}

uint64_t AnsweringMachineService.__deallocating_deinit()
{
  AnsweringMachineService.deinit();
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type CallScreeningActor.ActorType and conformance CallScreeningActor.ActorType()
{
  unint64_t result = lazy protocol witness table cache variable for type CallScreeningActor.ActorType and conformance CallScreeningActor.ActorType;
  if (!lazy protocol witness table cache variable for type CallScreeningActor.ActorType and conformance CallScreeningActor.ActorType)
  {
    type metadata accessor for CallScreeningActor.ActorType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallScreeningActor.ActorType and conformance CallScreeningActor.ActorType);
  }
  return result;
}

uint64_t sub_1C3522088()
{
  uint64_t v1 = *(void *)(v0 + 32);
  OUTLINED_FUNCTION_5_3();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[2];
  uint64_t v6 = (uint64_t *)v1[8];
  uint64_t v7 = (uint64_t)v1
     + ((*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in AnsweringMachineService.handleNewIncomingCall(_:);
  return closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)(a1, v5, v4, v6, v7);
}

uint64_t partial apply for closure #1 in AnsweringMachineService.handleNewIncomingCall(_:)()
{
  OUTLINED_FUNCTION_0_5();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t specialized ScreeningSoundAndHapticsManager.init(with:ringerStateObserver:feedbackGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[3] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUCallSoundPlayer);
  v12[4] = &protocol witness table for TUCallSoundPlayer;
  v12[0] = a1;
  v11[3] = type metadata accessor for DeviceRingerStateObserver();
  v11[4] = &protocol witness table for DeviceRingerStateObserver;
  v11[0] = a2;
  outlined init with copy of Conversation((uint64_t)v12, a4 + 56);
  outlined init with copy of Conversation((uint64_t)v11, a4 + 96);
  if (*(void *)(a3 + 24))
  {
    outlined init with copy of ShakyMaker?(a3, a4 + 16);
  }
  else
  {
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A00]), sel_init);
    v10[3] = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINotificationFeedbackGenerator);
    v10[4] = &protocol witness table for UINotificationFeedbackGenerator;
    v10[0] = v8;
    outlined init with take of ShakyMaker?((uint64_t)v10, a4 + 16);
  }
  ScreeningSoundAndHapticsManager.registerForUpdates()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  outlined destroy of ShakyMaker?(a3);
  return a4;
}

uint64_t type metadata completion function for AnsweringMachineService()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
    swift_getTupleTypeMetadata2();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for AnsweringMachineService()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for AnsweringMachineService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnsweringMachineService);
}

uint64_t dispatch thunk of AnsweringMachineService.__allocating_init(shouldAutoScreenCall:requestToScreen:logger:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t outlined init with take of ShakyMaker?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShakyMaker?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ShakyMaker?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShakyMaker?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id ConversationControlsNoticeCoordinator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ConversationControlsNoticeCoordinator.noticeTapped(notice:completionHandler:)()
{
  void (*v15)(long long *__return_ptr);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  void *v23;
  void (*v24)(void);
  char v25;
  void (*v26)(void);
  void (*v27)(void);
  void *v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  void (*v39)(void);
  void *v40;
  void (*v41)(void);
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(void);
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  void (*v52)(void);
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  char v56;
  void v57[3];
  NSObject *v58;
  void *v59;
  uint64_t v60;
  void (*v61)(long long *__return_ptr);
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void (*v67)(void);
  void v68[3];
  uint64_t v69;
  uint64_t v70;
  long long v71;
  uint64_t v72;
  void v73[3];
  uint64_t v74;

  OUTLINED_FUNCTION_31();
  id v1 = v0;
  uint64_t v65 = v2;
  uint64_t v67 = v3;
  uint64_t v5 = v4;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationControls);
  outlined init with copy of IDSLookupManager((uint64_t)v5, (uint64_t)v73);
  uint64_t v64 = v7;
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  char v66 = v1;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_37();
    *(void *)&uint64_t v71 = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v10 = 136315138;
    __swift_project_boxed_opaque_existential_1(v73, v74);
    OUTLINED_FUNCTION_8_76();
    uint64_t v12 = v11();
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v71);
    OUTLINED_FUNCTION_20_55(v14);
    id v1 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    _os_log_impl(&dword_1C2F90000, v8, v9, "noticeTapped: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  }

  uint64_t v15 = *(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88);
  uint64_t v16 = (*MEMORY[0x1E4FBC8C8] & *v1) + 136;
  v15(&v71);
  if (!v72)
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v71, &demangling cache variable for type metadata for Notice?);
    goto LABEL_10;
  }
  unint64_t v60 = v16;
  uint64_t v61 = v15;
  outlined init with take of Notice(&v71, (uint64_t)v73);
  OUTLINED_FUNCTION_9_85(v5, v5[3]);
  uint64_t v63 = v57;
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17;
  uint64_t v20 = *(void *)(v19 + 64);
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_33_34();
  OUTLINED_FUNCTION_5_106();
  v22();
  uint64_t v23 = __swift_project_boxed_opaque_existential_1(v73, v74);
  uint64_t v62 = v20;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_33_34();
  OUTLINED_FUNCTION_5_106();
  v24();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v26 = *(void (**)(void))(v18 + 8);
  OUTLINED_FUNCTION_12_1();
  v26();
  OUTLINED_FUNCTION_12_1();
  v26();
  if (v25)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
LABEL_10:
    uint64_t v27 = v67;
    goto LABEL_18;
  }
  outlined init with copy of IDSLookupManager((uint64_t)v5, (uint64_t)&v71);
  uint64_t v28 = v66;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    LODWORD(v66) = v30;
    uint64_t v58 = v29;
    BOOL v31 = OUTLINED_FUNCTION_15_1();
    uint64_t v64 = OUTLINED_FUNCTION_14_3();
    uint64_t v70 = v64;
    *(_DWORD *)BOOL v31 = 136315394;
    uint64_t v63 = (void *)(v31 + 4);
    id v32 = v28;
    uint64_t v33 = __swift_project_boxed_opaque_existential_1(&v71, v72);
    unint64_t v59 = v57;
    MEMORY[0x1F4188790](v33);
    v57[1] = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
    OUTLINED_FUNCTION_32_30();
    OUTLINED_FUNCTION_5_106();
    v35();
    UUID.uuidString.getter();
    v57[2] = v26;
    OUTLINED_FUNCTION_12_1();
    v26();
    uint64_t v36 = OUTLINED_FUNCTION_41_0();
    v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
    *(_WORD *)(v31 + 12) = 2080;
    OUTLINED_FUNCTION_16_54();
    v39();
    if (v69)
    {
      uint64_t v40 = __swift_project_boxed_opaque_existential_1(v68, v69);
      MEMORY[0x1F4188790](v40);
      OUTLINED_FUNCTION_32_30();
      OUTLINED_FUNCTION_5_106();
      v41();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v68, &demangling cache variable for type metadata for Notice?);
      uint64_t v42 = UUID.uuidString.getter();
      uint64_t v44 = v43;
      OUTLINED_FUNCTION_12_1();
      v45();
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v68, &demangling cache variable for type metadata for Notice?);
      uint64_t v44 = 0xE100000000000000;
      uint64_t v42 = 45;
    }
    uint64_t v27 = v67;
    uint64_t v46 = v58;
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v70);
    OUTLINED_FUNCTION_20_55(v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v46, (os_log_type_t)v66, "Tapped notice:%s doesn't match activeNotice:%s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);

    uint64_t v27 = v67;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
LABEL_18:
  OUTLINED_FUNCTION_15_70();
  uint64_t v48 = OUTLINED_FUNCTION_92_0();
  if (v49(v48))
  {
    OUTLINED_FUNCTION_15_70();
    uint64_t v50 = OUTLINED_FUNCTION_92_0();
    uint64_t v52 = (void (*)(void))v51(v50);
    if (v52)
    {
      uint64_t v53 = (uint64_t)v52;
      v52();
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v53);
    }
  }
  if (v27)
  {
    OUTLINED_FUNCTION_15_70();
    uint64_t v54 = OUTLINED_FUNCTION_92_0();
    uint64_t v56 = v55(v54);
    v27(v56 & 1);
  }
  OUTLINED_FUNCTION_28();
}

void ConversationControlsNoticeCoordinator.post(notice:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  specialized ConversationControlsNoticeCoordinator.post(notice:)();
}

Swift::Void __swiftcall ConversationControlsNoticeCoordinator.flushNotices(priority:)(ConversationKit::NoticePriority priority)
{
  id v1 = ConversationControlsNoticeCoordinator.noticeQueue.modify(v7);
  uint64_t v3 = specialized Dictionary.subscript.modify();
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v2, *(void *)(v2 + 24));
    (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
  }
  ((void (*)(uint64_t *, void))v3)(&v6, 0);
  v1(v7, 0);
}

void ConversationControlsNoticeCoordinator.dismissAndGetNextNotice(dismissContext:)()
{
  void (*v19)(long long *__return_ptr);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  long long v35;
  uint64_t v36;
  void v37[3];
  uint64_t v38;

  OUTLINED_FUNCTION_31();
  id v32 = v1;
  uint64_t v33 = v2;
  uint64_t v4 = v3;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  uint64_t v6 = v0;
  uint64_t v7 = Logger.logObject.getter();
  int v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, (os_log_type_t)v8);
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v34 = v4;
  if (v9)
  {
    unint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_37();
    BOOL v31 = OUTLINED_FUNCTION_9_0();
    *(void *)&uint64_t v35 = v31;
    *(_DWORD *)unint64_t v11 = 136315138;
    OUTLINED_FUNCTION_16_54();
    v12();
    if (v38)
    {
      OUTLINED_FUNCTION_9_85(v37, v38);
      uint64_t v29 = (uint64_t)&v29;
      OUTLINED_FUNCTION_4();
      os_log_type_t v30 = v8;
      MEMORY[0x1F4188790](v13);
      OUTLINED_FUNCTION_21();
      uint64_t v4 = v34;
      OUTLINED_FUNCTION_5_106();
      v14();
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v37, &demangling cache variable for type metadata for Notice?);
      uint64_t v15 = UUID.uuidString.getter();
      unint64_t v17 = v16;
      uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
      OUTLINED_FUNCTION_12_1();
      v18();
      LOBYTE(v8) = v30;
    }
    else
    {
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v37, &demangling cache variable for type metadata for Notice?);
      unint64_t v17 = 0xE600000000000000;
      uint64_t v15 = 0x3E656E6F6E3CLL;
    }
    v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v7, (os_log_type_t)v8, "dismissing notice: %s", v11, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v19 = *(void (**)(long long *__return_ptr))((*v10 & *v6) + 0x88);
  v19(&v35);
  if (v36)
  {
    outlined init with take of Notice(&v35, (uint64_t)v37);
    uint64_t v20 = OUTLINED_FUNCTION_9_85(v37, v38);
    OUTLINED_FUNCTION_4();
    uint64_t v22 = v21;
    MEMORY[0x1F4188790](v23);
    OUTLINED_FUNCTION_21();
    uint64_t v26 = v25 - v24;
    OUTLINED_FUNCTION_5_106();
    v27();
    ConversationControlsNoticeCoordinator.noticeDismissed(noticeUUID:dismissContext:)();
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v26, v20);
    v19((long long *)v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v35, &demangling cache variable for type metadata for Notice?);
    *(void *)(v4 + 32) = 0;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
  }
  OUTLINED_FUNCTION_28();
}

void ConversationControlsNoticeCoordinator.noticeDismissed(noticeUUID:dismissContext:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_16_54();
  v6();
  if (v57)
  {
    uint64_t v53 = v3;
    uint64_t v54 = v1;
    outlined init with take of Notice(&v56, (uint64_t)v58);
    uint64_t v7 = OUTLINED_FUNCTION_9_85(v58, v58[3]);
    uint64_t v3 = &v48;
    OUTLINED_FUNCTION_4();
    uint64_t v9 = v8;
    uint64_t v11 = *(void *)(v10 + 64);
    MEMORY[0x1F4188790](v12);
    OUTLINED_FUNCTION_5_106();
    v13();
    char v14 = static UUID.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
    v15((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    if (v14)
    {
      uint64_t v52 = v15;
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
      MEMORY[0x1F4188790](v17);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v7);
      uint64_t v18 = v54;
      swift_bridgeObjectRetain_n();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      int v21 = v20;
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v22 = OUTLINED_FUNCTION_15_1();
        uint64_t v51 = &v48;
        uint64_t v23 = v22;
        uint64_t v50 = OUTLINED_FUNCTION_14_3();
        *(void *)&long long v56 = v50;
        *(_DWORD *)uint64_t v23 = 136315394;
        os_log_t v49 = v19;
        if (v18) {
          uint64_t v24 = (uint64_t)v53;
        }
        else {
          uint64_t v24 = 4271950;
        }
        if (v18) {
          unint64_t v25 = (unint64_t)v18;
        }
        else {
          unint64_t v25 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)&v56);
        LODWORD(v53) = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2080;
        uint64_t v26 = UUID.uuidString.getter();
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = OUTLINED_FUNCTION_24_50();
        v29(v28);
        uint64_t v19 = v49;
        _os_log_impl(&dword_1C2F90000, v49, (os_log_type_t)v53, "[%s] noticeDismissed: %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v45 = OUTLINED_FUNCTION_24_50();
        v46(v45);
      }

      ConversationControlsNoticeCoordinator.pop()();
      OUTLINED_FUNCTION_31_1();
      v47();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      goto LABEL_23;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v56, &demangling cache variable for type metadata for Notice?);
  }
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationControls);
  uint64_t v31 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_4();
  uint64_t v33 = v32;
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_62();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v33 + 16))(v3, v5, v31);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_37();
    uint64_t v38 = OUTLINED_FUNCTION_9_0();
    uint64_t v54 = &v48;
    v58[0] = v38;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v39 = UUID.uuidString.getter();
    *(void *)&long long v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = OUTLINED_FUNCTION_5_15();
    v42(v41);
    _os_log_impl(&dword_1C2F90000, v35, v36, "Received request to dismiss previously dismissed notice: %s", v37, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v43 = OUTLINED_FUNCTION_5_15();
    v44(v43);
  }

LABEL_23:
  OUTLINED_FUNCTION_28();
}

id ConversationControlsNoticeCoordinator.conversationManager.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator_conversationManager));
}

uint64_t key path getter for ConversationControlsNoticeCoordinator.unblockTimer : ConversationControlsNoticeCoordinator@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationControlsNoticeCoordinator.unblockTimer : ConversationControlsNoticeCoordinator(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78);
  id v4 = *a1;
  return v3(v2);
}

void *ConversationControlsNoticeCoordinator.unblockTimer.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator_unblockTimer);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void ConversationControlsNoticeCoordinator.unblockTimer.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator_unblockTimer);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*ConversationControlsNoticeCoordinator.unblockTimer.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for ConversationControlsNoticeCoordinator.activeNotice : ConversationControlsNoticeCoordinator(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
}

uint64_t key path setter for ConversationControlsNoticeCoordinator.activeNotice : ConversationControlsNoticeCoordinator(uint64_t a1, void **a2)
{
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)v4, &demangling cache variable for type metadata for Notice?);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90))(v4);
}

uint64_t ConversationControlsNoticeCoordinator.activeNotice.didset()
{
  uint64_t v1 = v0;
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  id v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
  objc_msgSend(v3, sel_invalidate);

  (*(void (**)(long long *__return_ptr))((*v2 & *v1) + 0x88))(&aBlock);
  if (!v15) {
    return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&aBlock, &demangling cache variable for type metadata for Notice?);
  }
  outlined init with take of Notice(&aBlock, (uint64_t)v18);
  uint64_t v4 = v19;
  uint64_t v5 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  double v6 = (*(double (**)(uint64_t, uint64_t))(v5 + 48))(v4, v5);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  double v7 = v6 + (*(double (**)(void))(*(void *)static Defaults.shared + 1000))();
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = partial apply for closure #1 in ConversationControlsNoticeCoordinator.activeNotice.didset;
  uint64_t v17 = v9;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  char v14 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  uint64_t v15 = &block_descriptor_90;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_release();
  id v11 = objc_msgSend(v8, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v10, v7);
  _Block_release(v10);
  (*(void (**)(id))((*v2 & *v1) + 0x78))(v11);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

void closure #1 in ConversationControlsNoticeCoordinator.activeNotice.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1C8776240](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
    double v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1C2F90000, v6, v7, "unblockTimer fired, pop next notice", v8, 2u);
      MEMORY[0x1C87760E0](v8, -1, -1);
    }

    ConversationControlsNoticeCoordinator.pop()();
    (*(void (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x90))(&v9);
  }
}

void ConversationControlsNoticeCoordinator.pop()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_16_54();
  v3();
  uint64_t v44 = v2;
  if (*((void *)&v47 + 1))
  {
    outlined init with take of Notice(&v46, (uint64_t)&v49);
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationControls);
    outlined init with copy of IDSLookupManager((uint64_t)&v49, (uint64_t)&v46);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)OUTLINED_FUNCTION_37();
      v45[0] = OUTLINED_FUNCTION_9_0();
      *(_DWORD *)os_log_type_t v7 = 136315138;
      __swift_project_boxed_opaque_existential_1(&v46, *((uint64_t *)&v47 + 1));
      OUTLINED_FUNCTION_8_76();
      uint64_t v9 = v8();
      uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v45);
      OUTLINED_FUNCTION_25_51(v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
      _os_log_impl(&dword_1C2F90000, v5, v6, "Popping next notice, dismiss active notice: %s", v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_3();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    }

    __swift_project_boxed_opaque_existential_1(&v49, v50);
    uint64_t v12 = OUTLINED_FUNCTION_92_0();
    char v14 = (void (*)(void))v13(v12);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      v14();
      outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v15);
    }
    uint64_t v16 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator_conversationManager);
    OUTLINED_FUNCTION_9_85(&v49, v50);
    OUTLINED_FUNCTION_4();
    MEMORY[0x1F4188790](v17);
    OUTLINED_FUNCTION_21();
    OUTLINED_FUNCTION_33_34();
    OUTLINED_FUNCTION_5_106();
    v18();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_12_1();
    v20();
    objc_msgSend(v16, sel_removeConversationNoticeWithUUID_, isa);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v46, &demangling cache variable for type metadata for Notice?);
  }
  ConversationControlsNoticeCoordinator.noticeQueue.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  *(void *)&long long v49 = v22;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v49);
  swift_bridgeObjectRelease();
  os_log_type_t v23 = v49;
  uint64_t v24 = *(void *)(v49 + 16);
  if (v24)
  {
    for (uint64_t i = 0; v24 != i; ++i)
    {
      uint64_t v26 = (void (*)(void))ConversationControlsNoticeCoordinator.noticeQueue.modify(v45);
      uint64_t v28 = (void (*)(void))specialized Dictionary.subscript.modify();
      uint64_t v29 = *(void *)(v27 + 24);
      if (v29)
      {
        uint64_t v30 = *(void *)(v27 + 32);
        __swift_mutable_project_boxed_opaque_existential_1(v27, *(void *)(v27 + 24));
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 32))(&v46, v29, v30);
        OUTLINED_FUNCTION_6_105();
        v28();
        OUTLINED_FUNCTION_6_105();
        v26();
        if (*((void *)&v47 + 1))
        {
          swift_release();
          outlined init with take of Notice(&v46, (uint64_t)&v49);
          if (one-time initialization token for conversationControls != -1) {
            swift_once();
          }
          uint64_t v35 = type metadata accessor for Logger();
          __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationControls);
          outlined init with copy of IDSLookupManager((uint64_t)&v49, (uint64_t)&v46);
          os_log_type_t v36 = Logger.logObject.getter();
          os_log_type_t v37 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v36, v37))
          {
            uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_37();
            v45[0] = OUTLINED_FUNCTION_9_0();
            *(_DWORD *)uint64_t v38 = 136315138;
            __swift_project_boxed_opaque_existential_1(&v46, *((uint64_t *)&v47 + 1));
            uint64_t v39 = OUTLINED_FUNCTION_7_100();
            uint64_t v41 = v40(v39);
            uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v45);
            OUTLINED_FUNCTION_25_51(v43);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
            _os_log_impl(&dword_1C2F90000, v36, v37, "Popped next notice: %s", v38, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
            OUTLINED_FUNCTION_3();
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
          }

          outlined init with take of Notice(&v49, v44);
          goto LABEL_29;
        }
      }
      else
      {
        OUTLINED_FUNCTION_6_105();
        v28();
        OUTLINED_FUNCTION_6_105();
        v26();
        long long v46 = 0u;
        long long v47 = 0u;
        uint64_t v48 = 0;
      }
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v46, &demangling cache variable for type metadata for Notice?);
    }
  }
  swift_release();
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.conversationControls);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_2_12(v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl(&dword_1C2F90000, v32, v23, "No more notices to retrieve", v34, 2u);
    OUTLINED_FUNCTION_3();
  }

  *(void *)(v44 + 32) = 0;
  *(_OWORD *)uint64_t v44 = 0u;
  *(_OWORD *)(v44 + 16) = 0u;
LABEL_29:
  OUTLINED_FUNCTION_28();
}

uint64_t ConversationControlsNoticeCoordinator.activeNotice.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_41_0();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t ConversationControlsNoticeCoordinator.activeNotice.setter(uint64_t a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)v5, &demangling cache variable for type metadata for Notice?);
  id v3 = v1;
  static Published.subscript.setter();
  ConversationControlsNoticeCoordinator.activeNotice.didset();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1, &demangling cache variable for type metadata for Notice?);
}

void (*ConversationControlsNoticeCoordinator.activeNotice.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return ConversationControlsNoticeCoordinator.activeNotice.modify;
}

void ConversationControlsNoticeCoordinator.activeNotice.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    outlined init with copy of Environment<DynamicTypeSize>.Content(*a1, (uint64_t)v2 + 40, &demangling cache variable for type metadata for Notice?);
    ConversationControlsNoticeCoordinator.activeNotice.setter((uint64_t)v2 + 40);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v2, &demangling cache variable for type metadata for Notice?);
  }
  else
  {
    ConversationControlsNoticeCoordinator.activeNotice.setter(*a1);
  }
  free(v2);
}

uint64_t key path getter for ConversationControlsNoticeCoordinator.$activeNotice : ConversationControlsNoticeCoordinator(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
}

uint64_t key path setter for ConversationControlsNoticeCoordinator.$activeNotice : ConversationControlsNoticeCoordinator(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Notice?>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  os_log_type_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8))(v7);
}

uint64_t ConversationControlsNoticeCoordinator.$activeNotice.getter()
{
  return swift_endAccess();
}

uint64_t ConversationControlsNoticeCoordinator.$activeNotice.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Notice?>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Notice?>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
}

void (*ConversationControlsNoticeCoordinator.$activeNotice.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  long long v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Notice?>.Publisher);
  v3[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[5] = v5;
  size_t v6 = *(void *)(v5 + 64);
  uint64_t v3[6] = malloc(v6);
  v3[7] = malloc(v6);
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Notice?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ConversationControlsNoticeCoordinator.$activeNotice.modify;
}

void ConversationControlsNoticeCoordinator.$activeNotice.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    ConversationControlsNoticeCoordinator.$activeNotice.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ConversationControlsNoticeCoordinator.$activeNotice.setter(*(void *)(*(void *)a1 + 56));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t ConversationControlsNoticeCoordinator.noticeQueue.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator____lazy_storage___noticeQueue;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator____lazy_storage___noticeQueue))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator____lazy_storage___noticeQueue);
  }
  else
  {
    uint64_t v2 = closure #1 in ConversationControlsNoticeCoordinator.noticeQueue.getter();
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in ConversationControlsNoticeCoordinator.noticeQueue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NoticePriority, NoticeQueue)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C3775280;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(inited + 64) = &type metadata for CoalescingNoticeQueue;
  *(void *)(inited + 72) = &protocol witness table for CoalescingNoticeQueue;
  *(void *)(inited + 40) = v1;
  *(unsigned char *)(inited + 80) = 1;
  *(void *)(inited + 112) = &type metadata for CoalescingNoticeQueue;
  *(void *)(inited + 120) = &protocol witness table for CoalescingNoticeQueue;
  *(void *)(inited + 88) = v1;
  *(unsigned char *)(inited + 128) = 2;
  *(void *)(inited + 160) = &type metadata for ReplacingNoticeQueue;
  *(void *)(inited + 168) = &protocol witness table for ReplacingNoticeQueue;
  *(void *)(inited + 136) = v1;
  *(unsigned char *)(inited + 176) = 3;
  *(void *)(inited + 208) = &type metadata for CoalescingNoticeQueue;
  *(void *)(inited + 216) = &protocol witness table for CoalescingNoticeQueue;
  *(void *)(inited + 184) = v1;
  *(unsigned char *)(inited + 224) = 4;
  *(void *)(inited + 256) = &type metadata for CoalescingNoticeQueue;
  *(void *)(inited + 264) = &protocol witness table for CoalescingNoticeQueue;
  *(void *)(inited + 232) = v1;
  *(unsigned char *)(inited + 272) = 5;
  *(void *)(inited + 304) = &type metadata for CoalescingNoticeQueue;
  *(void *)(inited + 312) = &protocol witness table for CoalescingNoticeQueue;
  *(void *)(inited + 280) = v1;
  *(unsigned char *)(inited + 320) = 6;
  *(void *)(inited + 352) = &type metadata for ReplacingNoticeQueue;
  *(void *)(inited + 360) = &protocol witness table for ReplacingNoticeQueue;
  *(void *)(inited + 328) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NoticeQueue);
  lazy protocol witness table accessor for type NoticePriority and conformance NoticePriority();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t ConversationControlsNoticeCoordinator.noticeQueue.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator____lazy_storage___noticeQueue) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationControlsNoticeCoordinator.noticeQueue.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = ConversationControlsNoticeCoordinator.noticeQueue.getter();
  return ConversationControlsNoticeCoordinator.noticeQueue.modify;
}

uint64_t ConversationControlsNoticeCoordinator.noticeQueue.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return ConversationControlsNoticeCoordinator.noticeQueue.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  ConversationControlsNoticeCoordinator.noticeQueue.setter(v2);
  return swift_bridgeObjectRelease();
}

id ConversationControlsNoticeCoordinator.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Notice?>);
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_21();
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator_conversationManager;
  uint64_t v3 = self;
  uint64_t v4 = v0;
  id v5 = objc_msgSend(v3, sel_sharedInstance);
  id v6 = objc_msgSend(v5, sel_conversationManager);

  *(void *)&v0[v2] = v6;
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator_unblockTimer] = 0;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for Notice?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notice?);
  Published.init(initialValue:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v12, &demangling cache variable for type metadata for Notice?);
  uint64_t v7 = OUTLINED_FUNCTION_41_0();
  v8(v7);
  *(void *)&v4[OBJC_IVAR____TtC15ConversationKit37ConversationControlsNoticeCoordinator____lazy_storage___noticeQueue] = 0;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for ConversationControlsNoticeCoordinator();
  return objc_msgSendSuper2(&v10, sel_init);
}

id ConversationControlsNoticeCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationControlsNoticeCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ConversationControlsNoticeCoordinator.peek()@<X0>(uint64_t a1@<X8>)
{
  ConversationControlsNoticeCoordinator.noticeQueue.getter();
  swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  *(void *)&long long v14 = v3;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v14);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v14 + 16);
  if (v4)
  {
    uint64_t v12 = a1;
    for (uint64_t i = 0; i != v4; ++i)
    {
      id v6 = (void (*)(void))ConversationControlsNoticeCoordinator.noticeQueue.modify(v13);
      uint64_t v8 = (void (*)(void))specialized Dictionary.subscript.modify();
      uint64_t v9 = *(void *)(v7 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(v7 + 32);
        __swift_mutable_project_boxed_opaque_existential_1(v7, *(void *)(v7 + 24));
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v14, v9, v10);
        OUTLINED_FUNCTION_6_105();
        v8();
        OUTLINED_FUNCTION_6_105();
        v6();
        if (*((void *)&v15 + 1))
        {
          swift_release();
          return outlined init with take of Notice(&v14, v12);
        }
      }
      else
      {
        OUTLINED_FUNCTION_6_105();
        v8();
        OUTLINED_FUNCTION_6_105();
        v6();
        long long v14 = 0u;
        long long v15 = 0u;
        uint64_t v16 = 0;
      }
      outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v14, &demangling cache variable for type metadata for Notice?);
    }
    uint64_t result = swift_release();
    a1 = v12;
  }
  else
  {
    uint64_t result = swift_release();
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4 = a4;
  id v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = a3 - (void)a2;
  if (a2 - a1 >= (uint64_t)(a3 - (void)a2))
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, a3 - (void)a2, a4);
    uint64_t v10 = &v4[v9];
    if (v7 >= v6 || v9 < 1) {
      goto LABEL_39;
    }
    uint64_t v16 = (unsigned __int8 *)(a3 - 1);
    while (1)
    {
      uint64_t v17 = v16 + 1;
      unsigned int v18 = *(v6 - 1);
      if (*(v10 - 1) >= v18)
      {
        BOOL v20 = v17 != v10 || v16 >= v10;
        LOBYTE(v18) = *--v10;
        if (!v20) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v19 = v17 != v6 || v16 >= v6;
        --v6;
        if (!v19) {
          goto LABEL_35;
        }
      }
      *uint64_t v16 = v18;
LABEL_35:
      --v16;
      if (v6 <= v7 || v10 <= v4) {
        goto LABEL_39;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  uint64_t v10 = &v4[v8];
  if ((unint64_t)v6 < a3 && v8 >= 1)
  {
    while (1)
    {
      unsigned int v12 = *v6;
      if (v12 < *v4) {
        break;
      }
      LOBYTE(v12) = *v4;
      BOOL v13 = v7 == v4++;
      if (!v13) {
        goto LABEL_11;
      }
LABEL_12:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3) {
        goto LABEL_17;
      }
    }
    BOOL v13 = v7 == v6++;
    if (v13) {
      goto LABEL_12;
    }
LABEL_11:
    *uint64_t v7 = v12;
    goto LABEL_12;
  }
LABEL_17:
  id v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, v10 - v4, v6);
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, char a2))()
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify((uint64_t)(v4 + 4), a2 & 1, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[5] = v3;
  *((unsigned char *)v8 + 56) = a2;
  uint64_t v9 = *v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 57) = v11 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v11 & 1) == 0;
  Swift::Int v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v15 = v10;
  char v16 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<NoticePriority, NoticeQueue>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v14))
  {
    uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v16 & 1) == (v18 & 1))
    {
      uint64_t v15 = v17;
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_5:
  uint64_t v8[6] = v15;
  if (v16)
  {
    outlined init with take of Notice((long long *)(*(void *)(*v4 + 56) + 40 * v15), (uint64_t)v8);
  }
  else
  {
    v8[4] = 0;
    *(_OWORD *)uint64_t v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
  }
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(unsigned char *)(*a1 + 57), *(uint64_t **)(*a1 + 40), *(void *)(*a1 + 48), *(unsigned __int8 *)(*a1 + 56));
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v1, &demangling cache variable for type metadata for NoticeQueue?);
  free(v1);
}

uint64_t (*specialized _NativeDictionary.subscript.modify(uint64_t a1, char a2, char a3))(uint64_t result)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 24) = a2;
  char v7 = a2 & 1;
  uint64_t v8 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 1);
  *(unsigned char *)(a1 + 25) = v10 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SharePlayDiscoverabilityType, [String : Application]>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
  {
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v15 & 1) == (v17 & 1))
    {
      unint64_t v14 = v16;
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (uint64_t (*)(uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *(void *)(a1 + 16) = v14;
  if (v15) {
    uint64_t v18 = *(void *)(*(void *)(*v4 + 56) + 8 * v14);
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)a1 = v18;
  return _NativeDictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

void specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  outlined init with copy of Environment<DynamicTypeSize>.Content(a1, (uint64_t)&v10, &demangling cache variable for type metadata for NoticeQueue?);
  if (v11)
  {
    outlined init with take of Notice(&v10, (uint64_t)v12);
    uint64_t v9 = *a3;
    if (a2)
    {
      outlined init with take of Notice(v12, *(void *)(v9 + 56) + 40 * a4);
    }
    else
    {
      outlined init with take of Notice(v12, (uint64_t)&v10);
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, (uint64_t)&v10, v9);
    }
  }
  else
  {
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)&v10, &demangling cache variable for type metadata for NoticeQueue?);
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NoticeQueue);
      lazy protocol witness table accessor for type NoticePriority and conformance NoticePriority();
      _NativeDictionary._delete(at:)();
    }
  }
}

uint64_t type metadata accessor for ConversationControlsNoticeCoordinator()
{
  uint64_t result = type metadata singleton initialization cache for ConversationControlsNoticeCoordinator;
  if (!type metadata singleton initialization cache for ConversationControlsNoticeCoordinator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for ConversationControlsNoticeCoordinator()
{
  return type metadata accessor for ConversationControlsNoticeCoordinator();
}

void type metadata completion function for ConversationControlsNoticeCoordinator()
{
  type metadata accessor for Published<Notice?>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ConversationControlsNoticeCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsNoticeCoordinator);
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.unblockTimer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.unblockTimer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.unblockTimer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.activeNotice.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.activeNotice.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.activeNotice.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.$activeNotice.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.$activeNotice.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationControlsNoticeCoordinator.$activeNotice.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

void type metadata accessor for Published<Notice?>()
{
  if (!lazy cache variable for type metadata for Published<Notice?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Notice?);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Notice?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SharePlayDiscoverabilityType and conformance SharePlayDiscoverabilityType()
{
  unint64_t result = lazy protocol witness table cache variable for type SharePlayDiscoverabilityType and conformance SharePlayDiscoverabilityType;
  if (!lazy protocol witness table cache variable for type SharePlayDiscoverabilityType and conformance SharePlayDiscoverabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharePlayDiscoverabilityType and conformance SharePlayDiscoverabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharePlayDiscoverabilityType and conformance SharePlayDiscoverabilityType;
  if (!lazy protocol witness table cache variable for type SharePlayDiscoverabilityType and conformance SharePlayDiscoverabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharePlayDiscoverabilityType and conformance SharePlayDiscoverabilityType);
  }
  return result;
}

uint64_t sub_1C3526C58()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationControlsNoticeCoordinator.activeNotice.didset(uint64_t a1)
{
  closure #1 in ConversationControlsNoticeCoordinator.activeNotice.didset(a1, v1);
}

id EffectsLayoutController.__allocating_init(containingViewController:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return EffectsLayoutController.init(containingViewController:)(a1);
}

id EffectsLayoutController.init(containingViewController:)(void *a1)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for EffectsLayoutController();
  id v3 = objc_msgSendSuper2(&v5, sel_init);

  return v3;
}

uint64_t type metadata accessor for EffectsLayoutController()
{
  return self;
}

BOOL EffectsLayoutController.shouldAlwaysPresentExpandedApps(for:)()
{
  unint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_currentDevice);
  id v2 = objc_msgSend(v1, sel_userInterfaceIdiom);

  if (v2 == (id)1) {
    return 1;
  }
  id v4 = objc_msgSend(v0, sel_currentDevice);
  id v5 = objc_msgSend(v4, sel_userInterfaceIdiom);

  return v5 == (id)5;
}

void EffectsLayoutController.effectBrowserViewController(_:presentExpandedAppViewController:animated:completion:)(void *a1, void *a2, char a3, void (*a4)(void), uint64_t a5)
{
  if (a2)
  {
    uint64_t v11 = MEMORY[0x1C8776240](v5 + OBJC_IVAR____TtC15ConversationKit23EffectsLayoutController_containingViewController);
    if (v11)
    {
      BOOL v12 = (void *)v11;
      id v13 = a2;
      EffectsLayoutController.effectsBrowserSize(with:)(a1);
      double v15 = v14;
      double v17 = v16;
      id v18 = OUTLINED_FUNCTION_0_103();
      if (v18)
      {
        BOOL v19 = v18;
        objc_msgSend(v18, sel_setAlpha_, 0.0);

        id v20 = OUTLINED_FUNCTION_0_103();
        if (v20)
        {
          uint64_t v21 = v20;
          objc_msgSend(v20, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

          objc_msgSend(v12, sel_addChildViewController_, v13);
          id v22 = objc_msgSend(v12, sel_view);
          if (v22)
          {
            os_log_type_t v23 = v22;
            id v24 = OUTLINED_FUNCTION_0_103();
            if (v24)
            {
              unint64_t v25 = v24;
              objc_msgSend(v23, sel_addSubview_, v24);

              objc_msgSend(v13, sel_didMoveToParentViewController_, v12);
              id v26 = OUTLINED_FUNCTION_0_103();
              if (v26)
              {
                uint64_t v27 = v26;
                char v90 = a3;
                uint64_t v88 = (uint64_t)a4;
                uint64_t v89 = a5;
                id v28 = objc_msgSend(v26, sel_centerXAnchor);

                id v29 = objc_msgSend(a1, sel_view);
                if (v29)
                {
                  uint64_t v30 = v29;
                  id v31 = objc_msgSend(v29, sel_centerXAnchor);

                  id v32 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v31);
                  type metadata accessor for UILayoutPriority(0);
                  LODWORD(aBlock) = 1148846080;
                  int v97 = 1065353216;
                  lazy protocol witness table accessor for type UILayoutPriority and conformance UILayoutPriority();
                  static _UIKitNumericRawRepresentable.- infix(_:_:)();
                  LODWORD(v33) = v98[0];
                  objc_msgSend(v32, sel_setPriority_, v33);
                  id v34 = OUTLINED_FUNCTION_0_103();
                  if (v34)
                  {
                    uint64_t v35 = v34;
                    id v36 = objc_msgSend(v34, sel_trailingAnchor);

                    id v37 = objc_msgSend(v12, sel_view);
                    if (v37)
                    {
                      uint64_t v38 = v37;
                      id v39 = objc_msgSend(v37, sel_trailingAnchor);

                      char v40 = static Platform.current.getter();
                      double v41 = 0.0;
                      if (v40 == 1)
                      {
                        Layout.LocalParticipantViewCameraControls.init()((uint64_t)v98);
                        double v42 = v99;
                        static Platform.current.getter();
                        double v41 = -v42;
                      }
                      id v43 = objc_msgSend(v36, sel_constraintLessThanOrEqualToAnchor_constant_, v39, v41);

                      LODWORD(v44) = 1148846080;
                      objc_msgSend(v43, sel_setPriority_, v44);
                      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                      uint64_t v45 = swift_allocObject();
                      *(_OWORD *)(v45 + 16) = xmmword_1C3771690;
                      *(void *)(v45 + 32) = v43;
                      *(void *)(v45 + 40) = v32;
                      id v46 = v43;
                      id v87 = v32;
                      id v47 = OUTLINED_FUNCTION_0_103();
                      if (v47)
                      {
                        uint64_t v48 = v47;
                        id v49 = objc_msgSend(v47, sel_topAnchor);

                        id v50 = objc_msgSend(v12, sel_view);
                        if (v50)
                        {
                          uint64_t v51 = v50;
                          id v52 = objc_msgSend(v50, sel_topAnchor);

                          if (one-time initialization token for browserVerticalPadding != -1) {
                            swift_once();
                          }
                          id v53 = objc_msgSend(v49, sel_constraintGreaterThanOrEqualToAnchor_constant_, v52, *(double *)&static Layout.EffectsControlsView.browserVerticalPadding);

                          *(void *)(v45 + 48) = v53;
                          id v54 = OUTLINED_FUNCTION_0_103();
                          if (v54)
                          {
                            uint64_t v55 = v54;
                            id v56 = objc_msgSend(v54, sel_bottomAnchor);

                            id v57 = objc_msgSend(a1, sel_view);
                            if (v57)
                            {
                              uint64_t v58 = v57;
                              id v59 = objc_msgSend(v57, sel_topAnchor);

                              id v60 = objc_msgSend(v56, sel_constraintEqualToAnchor_constant_, v59, -*(double *)&static Layout.EffectsControlsView.browserVerticalPadding);
                              *(void *)(v45 + 56) = v60;
                              id v61 = OUTLINED_FUNCTION_0_103();
                              if (v61)
                              {
                                uint64_t v62 = v61;
                                id v63 = objc_msgSend(v61, sel_widthAnchor);

                                id v64 = objc_msgSend(v63, sel_constraintEqualToConstant_, v15);
                                *(void *)(v45 + 64) = v64;
                                id v65 = OUTLINED_FUNCTION_0_103();
                                if (v65)
                                {
                                  char v66 = v65;
                                  id v67 = objc_msgSend(v65, sel_heightAnchor);

                                  id v68 = objc_msgSend(v67, sel_constraintLessThanOrEqualToConstant_, v17);
                                  *(void *)(v45 + 72) = v68;
                                  id v69 = OUTLINED_FUNCTION_0_103();
                                  if (v69)
                                  {
                                    uint64_t v70 = v69;
                                    uint64_t v71 = self;
                                    id v72 = objc_msgSend(v70, sel_heightAnchor);

                                    id v73 = objc_msgSend(v72, sel_constraintGreaterThanOrEqualToConstant_, v17 * 0.5);
                                    *(void *)(v45 + 80) = v73;
                                    uint64_t aBlock = v45;
                                    specialized Array._endMutation()();
                                    type metadata accessor for NSLayoutConstraint();
                                    Class isa = Array._bridgeToObjectiveC()().super.isa;
                                    swift_bridgeObjectRelease();
                                    objc_msgSend(v71, sel_activateConstraints_, isa);

                                    if (v90)
                                    {
                                      unint64_t v75 = self;
                                      uint64_t v76 = swift_allocObject();
                                      *(void *)(v76 + 16) = v13;
                                      uint64_t v95 = partial apply for closure #1 in EffectsLayoutController.effectBrowserViewController(_:presentExpandedAppViewController:animated:completion:);
                                      uint64_t v96 = v76;
                                      uint64_t aBlock = MEMORY[0x1E4F143A8];
                                      uint64_t v92 = 1107296256;
                                      unint64_t v93 = thunk for @escaping @callee_guaranteed () -> ();
                                      uint64_t v94 = &block_descriptor_91;
                                      Swift::String v77 = _Block_copy(&aBlock);
                                      id v78 = v13;
                                      swift_release();
                                      uint64_t v79 = swift_allocObject();
                                      *(void *)(v79 + 16) = v88;
                                      *(void *)(v79 + 24) = v89;
                                      uint64_t v95 = partial apply for closure #2 in SpamAlertBuilder.buildReportGroupInitiatorAlert(for:with:didDismiss:);
                                      uint64_t v96 = v79;
                                      uint64_t aBlock = MEMORY[0x1E4F143A8];
                                      uint64_t v92 = 1107296256;
                                      unint64_t v93 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
                                      uint64_t v94 = &block_descriptor_6_6;
                                      uint64_t v80 = _Block_copy(&aBlock);
                                      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v88);
                                      swift_release();
                                      objc_msgSend(v75, sel_animateWithDuration_delay_options_animations_completion_, 0x10000, v77, v80, 0.3, 0.0);

                                      _Block_release(v80);
                                      _Block_release(v77);
LABEL_38:
                                      OUTLINED_FUNCTION_1_130();
                                      return;
                                    }
                                    id v85 = OUTLINED_FUNCTION_0_103();
                                    if (v85)
                                    {
                                      uint64_t v86 = v85;
                                      objc_msgSend(v85, sel_setAlpha_, 1.0);

                                      if (a4) {
                                        a4();
                                      }

                                      goto LABEL_38;
                                    }
                                    goto LABEL_54;
                                  }
LABEL_53:
                                  __break(1u);
LABEL_54:
                                  __break(1u);
                                  return;
                                }
LABEL_52:
                                __break(1u);
                                goto LABEL_53;
                              }
LABEL_51:
                              __break(1u);
                              goto LABEL_52;
                            }
LABEL_50:
                            __break(1u);
                            goto LABEL_51;
                          }
LABEL_49:
                          __break(1u);
                          goto LABEL_50;
                        }
LABEL_48:
                        __break(1u);
                        goto LABEL_49;
                      }
LABEL_47:
                      __break(1u);
                      goto LABEL_48;
                    }
LABEL_46:
                    __break(1u);
                    goto LABEL_47;
                  }
LABEL_45:
                  __break(1u);
                  goto LABEL_46;
                }
LABEL_44:
                __break(1u);
                goto LABEL_45;
              }
LABEL_43:
              __break(1u);
              goto LABEL_44;
            }
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v82 = one-time initialization token for conversationKit;
    a2;
    if (v82 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    OUTLINED_FUNCTION_1_130();
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    OUTLINED_FUNCTION_1_130();
    os_log(_:dso:log:type:_:)();
  }
}

void EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:)(uint64_t a1, void *a2, char a3, uint64_t (*a4)(id), uint64_t a5)
{
  if (a2)
  {
    uint64_t v9 = (void *)swift_allocObject();
    _OWORD v9[2] = a2;
    long long v9[3] = a4;
    v9[4] = a5;
    if (a3)
    {
      long long v10 = self;
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = a2;
      os_log_type_t v23 = partial apply for closure #2 in EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:);
      uint64_t v24 = v11;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v20 = 1107296256;
      uint64_t v21 = thunk for @escaping @callee_guaranteed () -> ();
      id v22 = &block_descriptor_15_3;
      BOOL v12 = _Block_copy(&aBlock);
      id v13 = a2;
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)a4);
      swift_release();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = partial apply for closure #1 in EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:);
      *(void *)(v14 + 24) = v9;
      os_log_type_t v23 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v24 = v14;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v20 = 1107296256;
      uint64_t v21 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      id v22 = &block_descriptor_21_1;
      double v15 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v10, sel_animateWithDuration_delay_options_animations_completion_, 0x20000, v12, v15, 0.3, 0.0);
      swift_release();
      _Block_release(v15);
      _Block_release(v12);
    }
    else
    {
      id v18 = a2;
      _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy((uint64_t)a4);
      id v16 = objc_msgSend(v18, sel_view);
      if (v16)
      {
        double v17 = v16;
        objc_msgSend(v16, sel_setAlpha_, 0.0);

        closure #1 in EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:)(v18, a4);
        swift_release();
      }
      else
      {

        __break(1u);
      }
    }
  }
}

id closure #1 in EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:)(void *a1, uint64_t (*a2)(id))
{
  id result = objc_msgSend(a1, sel_view);
  if (result)
  {
    uint64_t v5 = result;
    objc_msgSend(result, sel_removeFromSuperview);

    id result = objc_msgSend(a1, sel_removeFromParentViewController);
    if (a2) {
      return (id)a2(result);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in EffectsLayoutController.effectBrowserViewController(_:presentExpandedAppViewController:animated:completion:)(void *a1, double a2)
{
  id v3 = objc_msgSend(a1, sel_view);
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v3, sel_setAlpha_, a2);
  }
  else
  {
    __break(1u);
  }
}

void EffectsLayoutController.effectsBrowserSize(with:)(void *a1)
{
  id v3 = (void *)MEMORY[0x1C8776240](v1 + OBJC_IVAR____TtC15ConversationKit23EffectsLayoutController_containingViewController);
  if (!v3) {
    return;
  }
  id v4 = v3;
  id v5 = objc_msgSend(v3, sel_view);
  if (!v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  id v6 = v5;
  id v7 = objc_msgSend(a1, sel_view);
  unsigned int v8 = objc_msgSend(v6, sel_containsView_, v7);

  if (v8)
  {
    id v9 = objc_msgSend(a1, sel_view);
    if (!v9)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    long long v10 = v9;
    id v11 = objc_msgSend(a1, sel_view);
    if (!v11)
    {
LABEL_15:
      __break(1u);
      return;
    }
    BOOL v12 = v11;
    objc_msgSend(v11, sel_frame);
    double v14 = v13;
    double v16 = v15;

    id v17 = objc_msgSend(v4, sel_view);
    objc_msgSend(v10, sel_convertPoint_toView_, v17, v14, v16);
  }
  id v18 = objc_msgSend(v4, sel_view);
  if (!v18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v19 = v18;
  objc_msgSend(v18, sel_safeAreaInsetFrame);
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  CGFloat v25 = v24;
  CGFloat v27 = v26;

  v28.origin.x = v21;
  v28.origin.y = v23;
  v28.size.width = v25;
  v28.size.height = v27;
  CGRectGetHeight(v28);
  if (one-time initialization token for browserVerticalPadding != -1) {
    swift_once();
  }
}

id EffectsLayoutController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void EffectsLayoutController.init()()
{
}

id EffectsLayoutController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EffectsLayoutController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C3528064()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in EffectsLayoutController.effectBrowserViewController(_:presentExpandedAppViewController:animated:completion:)()
{
  closure #1 in EffectsLayoutController.effectBrowserViewController(_:presentExpandedAppViewController:animated:completion:)(*(void **)(v0 + 16), 1.0);
}

uint64_t sub_1C35280BC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1C35280FC()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

id partial apply for closure #1 in EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:)()
{
  return closure #1 in EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:)(*(void **)(v0 + 16), *(uint64_t (**)(id))(v0 + 24));
}

void partial apply for closure #2 in EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:)()
{
  closure #1 in EffectsLayoutController.effectBrowserViewController(_:presentExpandedAppViewController:animated:completion:)(*(void **)(v0 + 16), 0.0);
}

uint64_t sub_1C3528170()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t method lookup function for EffectsLayoutController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EffectsLayoutController);
}

uint64_t dispatch thunk of EffectsLayoutController.__allocating_init(containingViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of EffectsLayoutController.shouldAlwaysPresentExpandedApps(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of EffectsLayoutController.effectBrowserViewController(_:presentExpandedAppViewController:animated:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of EffectsLayoutController.effectBrowserViewController(_:dismissExpandedAppViewController:animated:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of EffectsLayoutController.expandedAppViewControllerSize(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t sub_1C35282A4()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(void *)(v0 + 16));
}

uint64_t InCallControlsActivityCellViewModel.cellStyle.getter()
{
  uint64_t v1 = type metadata accessor for InCallControlsActivityCellViewModel();
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v5 = OUTLINED_FUNCTION_3_24();
  uint64_t v7 = v6(v5);
  if (!v8)
  {
    OUTLINED_FUNCTION_15_71(v7, 0, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
LABEL_8:
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v4, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t v9 = v7;
  unint64_t v10 = v8;
  uint64_t v11 = swift_bridgeObjectRelease();
  if ((v10 & 0x2000000000000000) != 0) {
    uint64_t v13 = HIBYTE(v10) & 0xF;
  }
  else {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
  }
  OUTLINED_FUNCTION_15_71(v11, v12, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
  if (!v13) {
    goto LABEL_8;
  }
  char v14 = InCallControlsActivityCellViewModel.shouldBeSmallCell.getter();
  outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v4, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
  char v15 = v14 ^ 1;
  return v15 & 1;
}

uint64_t type metadata accessor for InCallControlsActivityCellViewModel()
{
  uint64_t result = type metadata singleton initialization cache for InCallControlsActivityCellViewModel;
  if (!type metadata singleton initialization cache for InCallControlsActivityCellViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

BOOL static InCallControlsActivityCellViewModel.CellStyle.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

id InCallControlsActivityCellViewModel.activityMetadata.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  char v14 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  double v16 = (char *)v59 - v15;
  uint64_t v17 = v0 + 2;
  uint64_t v18 = v0[5];
  uint64_t v19 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v18);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 16))(&v67, v18, v19);
  if (v67 == 2)
  {
    id v21 = OUTLINED_FUNCTION_6_106();
    if ((InCallControlsActivityCellViewModel.shouldCollaborationShowAppIcon.getter() & 1) == 0)
    {
      uint64_t v22 = v0[5];
      uint64_t v23 = v0[6];
      __swift_project_boxed_opaque_existential_1(v17, v22);
      (*(void (**)(uint64_t, uint64_t))(v23 + 112))(v22, v23);
      uint64_t v24 = type metadata accessor for Collaboration(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v24) == 1)
      {
        outlined destroy of SystemUpdateNotice?((uint64_t)v5, &demangling cache variable for type metadata for Collaboration?);
      }
      else
      {
        uint64_t v44 = *((void *)v5 + 11);
        uint64_t v43 = *((void *)v5 + 12);
        swift_bridgeObjectRetain();
        outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v5, (void (*)(void))type metadata accessor for Collaboration);
        if (v43)
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          id v45 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)static CollaborationImageFetcher.shared
                                                                + 136))(v44, v43);
          swift_bridgeObjectRelease();
          if (v45)
          {
LABEL_21:
            id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A38]), sel_initWithPlatformImage_, v45);
            objc_msgSend(v21, sel_setImage_, v51);

            return v21;
          }
        }
      }
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImageView);
    uint64_t v47 = v1[5];
    uint64_t v46 = v1[6];
    __swift_project_boxed_opaque_existential_1(v17, v47);
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 32))(v47, v46);
    id v50 = static UIImageView.appIcon(for:)(v48, v49);
    swift_bridgeObjectRelease();
    if (!v50) {
      return v21;
    }
    id v45 = objc_msgSend(v50, sel_image);

    if (!v45) {
      return v21;
    }
    goto LABEL_21;
  }
  if (v67 != 6) {
    return OUTLINED_FUNCTION_6_106();
  }
  uint64_t v20 = type metadata accessor for InCallControlsActivityCellViewModel();
  outlined init with copy of FeatureEligibility?((uint64_t)v1 + *(int *)(v20 + 32), (uint64_t)v9, &demangling cache variable for type metadata for Participant?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) != 1)
  {
    uint64_t v61 = v20;
    outlined init with take of Participant((uint64_t)v9, (uint64_t)v16);
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A78]), sel_init);
    double v26 = *(void **)&v16[*(int *)(v10 + 28)];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v27);
      if (v29)
      {
        uint64_t v30 = v28;
        uint64_t v31 = v29;
        if (objc_msgSend(v27, sel_shouldHideContact))
        {
          uint64_t v60 = v30;
          v59[0] = type metadata accessor for PersonNameComponents();
          v59[1] = v59;
          OUTLINED_FUNCTION_4();
          uint64_t v33 = v32;
          MEMORY[0x1F4188790](v34);
          OUTLINED_FUNCTION_60();
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          PersonNameComponents.givenName.setter();
          PersonNameComponents.familyName.setter();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          swift_beginAccess();
          id v35 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v37 = objc_msgSend(v35, sel_stringFromPersonNameComponents_, isa);

          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v40 = v39;

          (*(void (**)(uint64_t, void))(v33 + 8))(v30, v59[0]);
          uint64_t v62 = v38;
          uint64_t v63 = v40;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          id v41 = 0;
          uint64_t v42 = v60;
          goto LABEL_25;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    outlined init with copy of InCallControlsActivityCellViewModel((uint64_t)v16, (uint64_t)v14, (void (*)(void))type metadata accessor for Participant);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    uint64_t v42 = v65;
    uint64_t v31 = v66;
    id v41 = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v14, (void (*)(void))type metadata accessor for Participant);
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined bridged method (mbnn) of @objc UINavigationItem.title.setter(v42, v31, v21);
    id v52 = (char *)v1 + *(int *)(v61 + 36);
    if ((v52[96] & 1) == 0)
    {
      id v53 = (void *)*((void *)v52 + 9);
      uint64_t v54 = TUScreenShareDeviceFamily.displayName.getter((uint64_t)v53);
      if (v55)
      {
        id v56 = (void *)MEMORY[0x1C87730B0](v54);
        swift_bridgeObjectRelease();
      }
      else
      {
        id v56 = 0;
      }
      objc_msgSend(v21, sel_setSummary_, v56);

      id v57 = TUScreenShareDeviceFamily.linkPresentationImage.getter(v53);
      if (v57)
      {
        uint64_t v58 = v57;
        objc_msgSend(v21, sel_setImage_, v57);
      }
    }
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v16, (void (*)(void))type metadata accessor for Participant);
    return v21;
  }
  outlined destroy of SystemUpdateNotice?((uint64_t)v9, &demangling cache variable for type metadata for Participant?);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A78]), sel_init);
}

void *InCallControlsActivityCellViewModel.contacts.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  uint64_t v5 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = v0[5];
  uint64_t v13 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v12);
  char v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 104))(v12, v13);
  uint64_t v15 = v14;
  if (v14)
  {
    id v16 = objc_msgSend(v14, sel_activity);
    unsigned int v17 = objc_msgSend(v16, sel_isScreenSharingActivity);

    if (!v17) {
      return 0;
    }
    uint64_t v18 = type metadata accessor for InCallControlsActivityCellViewModel();
    outlined init with copy of FeatureEligibility?((uint64_t)v2 + *(int *)(v18 + 32), v1, &demangling cache variable for type metadata for Participant?);
    if (__swift_getEnumTagSinglePayload(v1, 1, v5) == 1)
    {
      outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Participant?);
      return 0;
    }
    outlined init with take of Participant(v1, (uint64_t)v11);
    uint64_t v19 = *(int *)(v5 + 28);
    uint64_t v20 = *(void **)&v11[v19];
    if (v20)
    {
      id v21 = v20;
      outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v21);
      if (v22)
      {
        if (objc_msgSend(v21, sel_shouldHideContact))
        {
          uint64_t v23 = type metadata accessor for PersonNameComponents();
          uint64_t v38 = (uint64_t)&v38;
          OUTLINED_FUNCTION_4();
          uint64_t v25 = v24;
          MEMORY[0x1F4188790](v26);
          OUTLINED_FUNCTION_60();
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          PersonNameComponents.givenName.setter();
          PersonNameComponents.familyName.setter();
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          swift_beginAccess();
          id v27 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v29 = objc_msgSend(v27, sel_stringFromPersonNameComponents_, isa);

          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v32 = v31;

          (*(void (**)(void *, uint64_t))(v25 + 8))(v15, v23);
          uint64_t v39 = (void *)v30;
          uint64_t v40 = v32;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.localizedUppercase.getter();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_15:
          uint64_t v15 = *(void **)&v11[v19];
          if (!v15)
          {
LABEL_18:
            outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v11, (void (*)(void))type metadata accessor for Participant);
            return v15;
          }
          id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel__initWithHandle_, v15);
LABEL_17:
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v35 = swift_allocObject();
          *(_OWORD *)(v35 + 16) = xmmword_1C3769830;
          *(void *)(v35 + 32) = v34;
          uint64_t v39 = (void *)v35;
          id v36 = v34;
          specialized Array._endMutation()();
          uint64_t v15 = v39;

          goto LABEL_18;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    outlined init with copy of InCallControlsActivityCellViewModel((uint64_t)v11, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v33 = v41;
    id v34 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  return v15;
}

uint64_t InCallControlsActivityCellViewModel.shouldShowActionButton.getter()
{
  OUTLINED_FUNCTION_20_56();
  uint64_t v1 = OUTLINED_FUNCTION_17_54();
  v2(v1);
  if (v7 == 6)
  {
    uint64_t v3 = *(void *)(v0 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 328))(ObjectType, v3) ^ 1;
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

double InCallControlsActivityCellViewModel.activityCellHeight.getter()
{
  OUTLINED_FUNCTION_20_56();
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v0, v1);
  if (!v3) {
    return 60.0;
  }
  uint64_t v4 = v2;
  unint64_t v5 = v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6) {
    return 60.0;
  }
  char v7 = InCallControlsActivityCellViewModel.shouldBeSmallCell.getter();
  double result = 173.0;
  if (v7) {
    return 60.0;
  }
  return result;
}

uint64_t InCallControlsActivitySectionHeaderViewModel.init(activity:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_62();
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  char v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 104))(v5, v6);
  if (!v7) {
    goto LABEL_4;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_activeRemoteParticipants);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v9) = specialized Set.isEmpty.getter(v10);
  swift_bridgeObjectRelease();
  if (v9)
  {

LABEL_4:
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    (*(void (**)(uint64_t, uint64_t))(v12 + 112))(v11, v12);
    uint64_t v13 = type metadata accessor for Collaboration(0);
    __swift_getEnumTagSinglePayload(v1, 1, v13);
    outlined destroy of SystemUpdateNotice?(v1, &demangling cache variable for type metadata for Collaboration?);
    char v14 = (objc_class *)objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_4_6();
    v15.super.Class isa = v14;
    OUTLINED_FUNCTION_2_29(v16, v17, v18, v19, v15);

    goto LABEL_8;
  }
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 16))(v34, v20, v21);
  switch(LOBYTE(v34[0]))
  {
    case 6:
      id v33 = objc_msgSend(v8, sel_activity);

      uint64_t v22 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      break;
    default:
      uint64_t v22 = (objc_class *)objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      OUTLINED_FUNCTION_47();
      break;
  }
  OUTLINED_FUNCTION_4_6();
  v23.super.Class isa = v22;
  OUTLINED_FUNCTION_2_29(v24, v25, v26, v27, v23);

LABEL_8:
  uint64_t v28 = String.init(format:_:)();
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  v34[0] = v28;
  v34[1] = v30;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v31 = StringProtocol.localizedUppercase.getter();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v31;
}

double InCallControlsActivityCellViewModel.init(call:activity:localParticipant:participants:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v88 = a5;
  uint64_t v89 = a4;
  *(void *)&long long v91 = type metadata accessor for Participant.State(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_10_5();
  *(void *)&long long v90 = v11;
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v74 - v13;
  uint64_t v81 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_4();
  uint64_t v76 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_10_5();
  uint64_t v75 = v17;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v74 - v20;
  MEMORY[0x1F4188790](v19);
  NSBundle v23 = (char *)&v74 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v25 = OUTLINED_FUNCTION_8(v24);
  MEMORY[0x1F4188790](v25);
  uint64_t v80 = (uint64_t)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a6 = a1;
  a6[1] = a2;
  uint64_t v84 = a3;
  outlined init with copy of IDSLookupManager(a3, (uint64_t)(a6 + 2));
  uint64_t v27 = type metadata accessor for InCallControlsActivityCellViewModel();
  *(void *)&long long v93 = (char *)a6 + *(int *)(v27 + 24);
  outlined init with copy of FeatureEligibility?(v89, v93, &demangling cache variable for type metadata for Participant?);
  uint64_t v85 = v27;
  *(void *)((char *)a6 + *(int *)(v27 + 28)) = v88;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 328);
  swift_unknownObjectRetain();
  uint64_t v82 = a2;
  uint64_t v83 = a1;
  uint64_t v78 = a2 + 328;
  uint64_t v79 = ObjectType;
  Swift::String v77 = v29;
  if (v29(ObjectType, a2))
  {
    uint64_t v30 = v80;
    outlined init with copy of FeatureEligibility?(v93, v80, &demangling cache variable for type metadata for Participant?);
    uint64_t v31 = v81;
    uint64_t v32 = a6;
    goto LABEL_23;
  }
  uint64_t v74 = a6;
  uint64_t v33 = *(void *)(v88 + 16);
  if (v33)
  {
    uint64_t v34 = v88 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
    *(void *)&long long v92 = &v95[12];
    uint64_t v86 = &v94[2];
    *(void *)&long long v93 = *(void *)(v76 + 72);
    swift_bridgeObjectRetain();
    uint64_t v35 = v90;
    id v87 = v23;
    while (1)
    {
      outlined init with copy of InCallControlsActivityCellViewModel(v34, (uint64_t)v23, (void (*)(void))type metadata accessor for Participant);
      outlined init with copy of InCallControlsActivityCellViewModel((uint64_t)v23, (uint64_t)v14, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        id v37 = &v14[*(int *)(v36 + 48)];
        OUTLINED_FUNCTION_8_2((uint64_t *)&v14[*(int *)(v36 + 64)]);
        memcpy(v95, v37, sizeof(v95));
        type metadata accessor for Date();
        OUTLINED_FUNCTION_0();
        OUTLINED_FUNCTION_26_2();
        v38();
        outlined init with copy of FeatureEligibility?(v92, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
        outlined destroy of Participant.MediaInfo((uint64_t)v95);
        if (*((void *)&v96[1] + 1) != 1)
        {
          memcpy(v95, v96, 0xD1uLL);
          char v39 = v95[5];
          outlined destroy of Participant.ScreenInfo((uint64_t)v95);
          uint64_t v35 = v90;
          NSBundle v23 = v87;
          goto LABEL_10;
        }
      }
      else
      {
        outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v14, (void (*)(void))type metadata accessor for Participant.State);
        memset(v96, 0, 24);
        *((void *)&v96[1] + 1) = 1;
        bzero(&v96[2], 0xB1uLL);
      }
      outlined destroy of SystemUpdateNotice?((uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      char v39 = 2;
LABEL_10:
      outlined init with copy of InCallControlsActivityCellViewModel((uint64_t)v23, (uint64_t)v21, (void (*)(void))type metadata accessor for Participant);
      if (v39 == 2) {
        goto LABEL_17;
      }
      outlined init with copy of InCallControlsActivityCellViewModel((uint64_t)v21, v35, (void (*)(void))type metadata accessor for Participant.State);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        outlined destroy of InCallControlsActivityCellViewModel(v35, (void (*)(void))type metadata accessor for Participant.State);
        memset(v94, 0, 24);
        *((void *)&v94[1] + 1) = 1;
        bzero(v86, 0xB1uLL);
LABEL_16:
        outlined destroy of SystemUpdateNotice?((uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
LABEL_17:
        outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v21, (void (*)(void))type metadata accessor for Participant);
        goto LABEL_18;
      }
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      id v41 = (const void *)(v35 + *(int *)(v40 + 48));
      OUTLINED_FUNCTION_8_2((uint64_t *)(v35 + *(int *)(v40 + 64)));
      memcpy(v95, v41, sizeof(v95));
      type metadata accessor for Date();
      OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_26_2();
      v42();
      outlined init with copy of FeatureEligibility?(v92, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
      outlined destroy of Participant.MediaInfo((uint64_t)v95);
      if (*((void *)&v94[1] + 1) == 1) {
        goto LABEL_16;
      }
      memcpy(v96, v94, 0xD1uLL);
      char v43 = BYTE8(v96[2]);
      outlined destroy of Participant.ScreenInfo((uint64_t)v96);
      outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v21, (void (*)(void))type metadata accessor for Participant);
      if (v43)
      {
        uint64_t v30 = v80;
        outlined init with take of Participant((uint64_t)v23, v80);
        uint64_t v61 = v30;
        uint64_t v62 = 0;
        goto LABEL_22;
      }
LABEL_18:
      outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v23, (void (*)(void))type metadata accessor for Participant);
      v34 += v93;
      if (!--v33) {
        goto LABEL_21;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_21:
  uint64_t v30 = v80;
  uint64_t v61 = v80;
  uint64_t v62 = 1;
LABEL_22:
  uint64_t v31 = v81;
  __swift_storeEnumTagSinglePayload(v61, v62, 1, v81);
  swift_bridgeObjectRelease();
  uint64_t v32 = v74;
LABEL_23:
  uint64_t v44 = v85;
  uint64_t v45 = (uint64_t)v32 + *(int *)(v85 + 32);
  outlined init with take of Participant?(v30, v45);
  uint64_t v46 = v82;
  uint64_t v47 = v79;
  if (v77(v79, v82))
  {
    uint64_t v48 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v46 + 176))(v47, v46);
    if (v48)
    {
      id v49 = v48;
      specialized Participant.ScreenShareAttributes.init(_:)(v49, (uint64_t)v95);
      uint64_t v50 = v95[0];
      uint64_t v51 = v95[1];
      uint64_t v52 = LOBYTE(v95[2]);
      long long v92 = *(_OWORD *)&v95[5];
      long long v93 = *(_OWORD *)&v95[3];
      long long v90 = *(_OWORD *)&v95[9];
      long long v91 = *(_OWORD *)&v95[7];
      uint64_t v53 = v95[11];

      swift_unknownObjectRelease();
      outlined destroy of SystemUpdateNotice?(v89, &demangling cache variable for type metadata for Participant?);
      __swift_destroy_boxed_opaque_existential_1(v84);
      uint64_t v54 = (char *)v32 + *(int *)(v44 + 36);
      *(void *)uint64_t v54 = v50;
      *((void *)v54 + 1) = v51;
      *((void *)v54 + 2) = v52;
      *(_OWORD *)(v54 + 24) = v93;
      *(_OWORD *)(v54 + 40) = v92;
      *(_OWORD *)(v54 + 56) = v91;
      double result = *(double *)&v90;
      *(_OWORD *)(v54 + 72) = v90;
      *((void *)v54 + 11) = v53;
      v54[96] = 0;
      return result;
    }
  }
  if (__swift_getEnumTagSinglePayload(v45, 1, v31))
  {
    memset(v96, 0, 24);
    *((void *)&v96[1] + 1) = 1;
    bzero(&v96[2], 0xB1uLL);
LABEL_29:
    swift_unknownObjectRelease();
    outlined destroy of SystemUpdateNotice?(v89, &demangling cache variable for type metadata for Participant?);
    __swift_destroy_boxed_opaque_existential_1(v84);
    outlined destroy of SystemUpdateNotice?((uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for Participant.ScreenInfo?);
    id v57 = (char *)v32 + *(int *)(v44 + 36);
    double result = 0.0;
    *((_OWORD *)v57 + 4) = 0u;
    *((_OWORD *)v57 + 5) = 0u;
    *((_OWORD *)v57 + 2) = 0u;
    *((_OWORD *)v57 + 3) = 0u;
    *(_OWORD *)id v57 = 0u;
    *((_OWORD *)v57 + 1) = 0u;
    v57[96] = 1;
    return result;
  }
  uint64_t v56 = v75;
  outlined init with copy of InCallControlsActivityCellViewModel(v45, v75, (void (*)(void))type metadata accessor for Participant);
  Participant.screenInfo.getter(v96);
  outlined destroy of InCallControlsActivityCellViewModel(v56, (void (*)(void))type metadata accessor for Participant);
  if (*((void *)&v96[1] + 1) == 1) {
    goto LABEL_29;
  }
  memcpy(v95, v96, 0xD1uLL);
  char v58 = v95[26];
  if (v95[26])
  {
    swift_unknownObjectRelease();
    *(void *)&long long v93 = 0;
    uint64_t v59 = 0x4024000000000000;
    char v60 = 1;
  }
  else
  {
    *(void *)&long long v93 = v95[14];
    if (v95[16])
    {
      switch(v95[23])
      {
        case 0:
        case 1:
        case 4:
          swift_unknownObjectRelease();
          char v60 = 0;
          uint64_t v59 = 0x4024000000000000;
          break;
        case 2:
          Swift::Bool v63 = Participant.ScreenInfo.isMaybeTouchIDDevice()();
          swift_unknownObjectRelease();
          if (v63) {
            uint64_t v59 = 0x4024000000000000;
          }
          else {
            uint64_t v59 = 0x4049000000000000;
          }
          char v60 = v95[26];
          break;
        case 3:
          swift_unknownObjectRelease();
          char v60 = 0;
          uint64_t v59 = 0x4034000000000000;
          break;
        default:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUScreenShareDeviceFamily?);
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          JUMPOUT(0x1C3529FC4);
      }
    }
    else
    {
      uint64_t v59 = v95[15];
      swift_unknownObjectRelease();
      char v60 = 0;
    }
  }
  id v64 = v32;
  outlined destroy of SystemUpdateNotice?(v89, &demangling cache variable for type metadata for Participant?);
  __swift_destroy_boxed_opaque_existential_1(v84);
  if (v60)
  {
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    long long v68 = 0uLL;
    long long v69 = 0uLL;
    long long v70 = 0uLL;
  }
  else
  {
    uint64_t v65 = v95[25];
    uint64_t v66 = v95[24];
    uint64_t v67 = v95[23];
    long long v70 = *(_OWORD *)&v95[21];
    long long v69 = *(_OWORD *)&v95[19];
    long long v68 = *(_OWORD *)&v95[17];
  }
  v94[0] = v68;
  v94[1] = v69;
  v94[2] = v70;
  LOBYTE(v94[3]) = v60;
  outlined destroy of Participant.ScreenInfo((uint64_t)v95);
  Participant.ScreenShareAttributes.init(displayScale:displayCornerRadius:deviceFamily:deviceHomeButtonType:style:systemRootLayerTransform:)(*(double *)&v93, v58, v59, 0, v67, v60, v66, v60, (uint64_t)v96, v65, v60, (uint64_t)v94);
  uint64_t v71 = LOBYTE(v96[1]);
  uint64_t v72 = *((void *)&v96[5] + 1);
  uint64_t v73 = (uint64_t)v64 + *(int *)(v85 + 36);
  *(_OWORD *)uint64_t v73 = v96[0];
  *(void *)(v73 + 16) = v71;
  *(_OWORD *)(v73 + 24) = *(_OWORD *)((char *)&v96[1] + 8);
  *(_OWORD *)(v73 + 40) = *(_OWORD *)((char *)&v96[2] + 8);
  *(_OWORD *)(v73 + 56) = *(_OWORD *)((char *)&v96[3] + 8);
  double result = *((double *)&v96[4] + 1);
  *(_OWORD *)(v73 + 72) = *(_OWORD *)((char *)&v96[4] + 8);
  *(void *)(v73 + 88) = v72;
  *(unsigned char *)(v73 + 96) = 0;
  return result;
}

uint64_t TUScreenShareDeviceFamily.displayName.getter(uint64_t a1)
{
  uint64_t v2 = a1;
  switch(a1)
  {
    case 0:
      return v2;
    case 1:
    case 2:
    case 3:
      id v4 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_4_16();
      goto LABEL_4;
    case 4:
      id v3 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_4_16();
      OUTLINED_FUNCTION_47();
LABEL_4:
      OUTLINED_FUNCTION_4_6();
      v5.super.Class isa = v1;
      uint64_t v2 = OUTLINED_FUNCTION_2_29(v6, v7, v8, v9, v5);

      return v2;
    default:
      OUTLINED_FUNCTION_12_67();
      v11._uint64_t countAndFlagsBits = 0xD000000000000038;
      v11._object = (void *)0x80000001C37B28E0;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_18_56();
      __break(1u);
      JUMPOUT(0x1C352A1BCLL);
  }
}

uint64_t InCallControlsActivitySectionHeaderViewModel.title.getter(uint64_t a1)
{
  return a1;
}

void InCallControlsActivityCellViewModel.CellStyle.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int InCallControlsActivityCellViewModel.CellStyle.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InCallControlsActivityCellViewModel.CellStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static InCallControlsActivityCellViewModel.CellStyle.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InCallControlsActivityCellViewModel.CellStyle()
{
  return InCallControlsActivityCellViewModel.CellStyle.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance InCallControlsActivityCellViewModel.CellStyle(uint64_t a1)
{
  InCallControlsActivityCellViewModel.CellStyle.hash(into:)(a1, *v1);
}

uint64_t InCallControlsActivityCellViewModel.call.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t InCallControlsActivityCellViewModel.activity.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IDSLookupManager(v1 + 16, a1);
}

uint64_t InCallControlsActivityCellViewModel.localParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for InCallControlsActivityCellViewModel();
  return outlined init with copy of FeatureEligibility?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Participant?);
}

uint64_t InCallControlsActivityCellViewModel.participants.getter()
{
  type metadata accessor for InCallControlsActivityCellViewModel();
  return swift_bridgeObjectRetain();
}

uint64_t InCallControlsActivityCellViewModel.sharingParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for InCallControlsActivityCellViewModel();
  return outlined init with copy of FeatureEligibility?(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for Participant?);
}

__n128 InCallControlsActivityCellViewModel.sharingAttributes.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InCallControlsActivityCellViewModel() + 36);
  char v4 = *(unsigned char *)(v3 + 96);
  long long v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  __n128 result = *(__n128 *)(v3 + 64);
  long long v8 = *(_OWORD *)(v3 + 80);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 96) = v4;
  return result;
}

id TUScreenShareDeviceFamily.linkPresentationImage.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x656E6F687069;
  switch((unint64_t)a1)
  {
    case 0uLL:
      return v1;
    case 1uLL:
      uint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x79616C70736964;
      goto LABEL_5;
    case 2uLL:
      goto LABEL_5;
    case 3uLL:
      uint64_t v2 = 0xEE00657061637364;
      uint64_t v3 = 0x6E616C2E64617069;
      goto LABEL_5;
    case 4uLL:
      uint64_t v2 = 0xEA00000000006F72;
      uint64_t v3 = 0x702E6E6F69736976;
LABEL_5:
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
      id v4 = @nonobjc UIImage.init(_systemName:)(v3, v2);
      if (!v4) {
        return 0;
      }
      long long v5 = v4;
      id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F30A38]), sel_initWithPlatformImage_, v4);

      return v1;
    default:
      OUTLINED_FUNCTION_12_67();
      v7._object = (void *)0x80000001C37B28E0;
      v7._uint64_t countAndFlagsBits = 0xD000000000000038;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_18_56();
      __break(1u);
      JUMPOUT(0x1C352A574);
  }
}

uint64_t InCallControlsActivityCellViewModel.shouldCollaborationShowAppIcon.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  id v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v5 = OUTLINED_FUNCTION_17_54();
  v6(v5);
  uint64_t v7 = type metadata accessor for Collaboration(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v7) == 1)
  {
    outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for Collaboration?);
    return 0;
  }
  uint64_t v9 = *((void *)v4 + 11);
  uint64_t v8 = *((void *)v4 + 12);
  swift_bridgeObjectRetain();
  outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v4, (void (*)(void))type metadata accessor for Collaboration);
  if (!v8) {
    return 0;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)static CollaborationImageFetcher.shared + 136))(v9, v8);
  swift_bridgeObjectRelease();
  if (v10)
  {

    return 0;
  }
  return 1;
}

uint64_t InCallControlsActivityCellViewModel.shouldBeSmallCell.getter()
{
  uint64_t v1 = type metadata accessor for InCallControlsActivityCellViewModel();
  uint64_t v2 = OUTLINED_FUNCTION_8(v1);
  MEMORY[0x1F4188790](v2);
  id v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v5 = OUTLINED_FUNCTION_3_24();
  uint64_t v7 = (void *)v6(v5);
  if (!v7)
  {
    OUTLINED_FUNCTION_15_71(0, v8, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
    goto LABEL_5;
  }
  uint64_t v9 = v7;
  id v10 = objc_msgSend(v7, sel_activity);
  unsigned __int8 v11 = objc_msgSend(v10, sel_isScreenSharingActivity);

  OUTLINED_FUNCTION_15_71(v12, v13, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
  if ((v11 & 1) == 0)
  {
LABEL_5:
    char v14 = InCallControlsActivityCellViewModel.shouldCollaborationShowAppIcon.getter();
    goto LABEL_6;
  }
  char v14 = 1;
LABEL_6:
  outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v4, (void (*)(void))type metadata accessor for InCallControlsActivityCellViewModel);
  return v14 & 1;
}

uint64_t outlined init with copy of InCallControlsActivityCellViewModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of InCallControlsActivityCellViewModel(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t outlined init with take of Participant?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized Participant.ScreenShareAttributes.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_displayScale);
  if (v4)
  {
    uint64_t v5 = v4;
    objc_msgSend(v4, sel_doubleValue);
    double v7 = v6;
  }
  else
  {
    double v7 = 1.0;
  }
  id v8 = objc_msgSend(a1, sel_cornerRadius);
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (v8)
  {
    objc_msgSend(v8, sel_doubleValue);
    uint64_t v11 = v12;
  }
  id v13 = objc_msgSend(a1, sel_systemRootLayerTransform);
  if (v13)
  {
    char v14 = v13;
    objc_msgSend(v13, sel_CGAffineTransformValue);
    double v16 = v24;
    uint64_t v15 = v25;
    uint64_t v18 = v26;
    double v17 = v27;
    uint64_t v19 = v28;
    uint64_t v10 = v29;
  }
  else
  {
    double v17 = 1.0;
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    double v16 = 1.0;
  }
  BOOL v20 = v9 == 0;
  id v21 = objc_msgSend(a1, sel_deviceFamily);
  id v22 = objc_msgSend(a1, sel_deviceHomeButtonType);
  id v23 = objc_msgSend(a1, sel_style);

  *(double *)a2 = v7;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v20;
  *(double *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v18;
  *(double *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v23;
}

unint64_t lazy protocol witness table accessor for type InCallControlsActivityCellViewModel.CellStyle and conformance InCallControlsActivityCellViewModel.CellStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallControlsActivityCellViewModel.CellStyle and conformance InCallControlsActivityCellViewModel.CellStyle;
  if (!lazy protocol witness table cache variable for type InCallControlsActivityCellViewModel.CellStyle and conformance InCallControlsActivityCellViewModel.CellStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallControlsActivityCellViewModel.CellStyle and conformance InCallControlsActivityCellViewModel.CellStyle);
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsActivitySectionHeaderViewModel()
{
  return &type metadata for InCallControlsActivitySectionHeaderViewModel;
}

uint64_t initializeBufferWithCopyOfBuffer for InCallControlsActivityCellViewModel(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(void *)a1 = v5;
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    double v6 = a3;
    double v7 = a2;
    uint64_t v8 = a2[1];
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = a2 + 2;
    long long v10 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v10;
    uint64_t v11 = v10;
    uint64_t v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
    swift_unknownObjectRetain();
    v12(a1 + 16, v9, v11);
    uint64_t v13 = v6[6];
    char v14 = (char *)(a1 + v13);
    uint64_t v15 = (char *)v7 + v13;
    double v16 = (int *)type metadata accessor for Participant(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, (uint64_t)v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      id v141 = v7;
      uint64_t v18 = type metadata accessor for Participant.State(0);
      uint64_t v143 = (uint64_t)v16;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v19 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v14, v15, v19);
          goto LABEL_20;
        case 4u:
          uint64_t v20 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v14, v15, v20);
          uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v21 = *(int *)(v137 + 48);
          id v22 = &v14[v21];
          id v23 = &v15[v21];
          *(_OWORD *)id v22 = *(_OWORD *)&v15[v21];
          uint64_t v24 = *(void *)&v15[v21 + 16];
          uint64_t v25 = *(void *)&v15[v21 + 24];
          *((void *)v22 + 2) = v24;
          *((void *)v22 + 3) = v25;
          *((_WORD *)v22 + 16) = *((_WORD *)v23 + 16);
          *((void *)v22 + 5) = *((void *)v23 + 5);
          v22[48] = v23[48];
          *(_OWORD *)(v22 + 56) = *(_OWORD *)(v23 + 56);
          *(_OWORD *)(v22 + 72) = *(_OWORD *)(v23 + 72);
          v22[88] = v23[88];
          v22[89] = v23[89];
          uint64_t v26 = *((void *)v23 + 15);
          swift_bridgeObjectRetain();
          if (v26)
          {
            if (v26 == 1)
            {
              double v27 = v22 + 96;
              uint64_t v28 = v23 + 96;
              size_t v29 = 209;
              goto LABEL_14;
            }
            uint64_t v31 = *((void *)v23 + 16);
            *((void *)v22 + 15) = v26;
            *((void *)v22 + 16) = v31;
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))((uint64_t)(v22 + 96), (uint64_t)(v23 + 96), v26);
          }
          else
          {
            long long v30 = *((_OWORD *)v23 + 7);
            *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
            *((_OWORD *)v22 + 7) = v30;
            *((void *)v22 + 16) = *((void *)v23 + 16);
          }
          *((_DWORD *)v22 + 34) = *((_DWORD *)v23 + 34);
          long long v32 = *((_OWORD *)v23 + 10);
          *((_OWORD *)v22 + 9) = *((_OWORD *)v23 + 9);
          *((_OWORD *)v22 + 10) = v32;
          *((_OWORD *)v22 + 11) = *((_OWORD *)v23 + 11);
          v22[192] = v23[192];
          double v27 = v22 + 208;
          uint64_t v28 = v23 + 208;
          *((void *)v22 + 25) = *((void *)v23 + 25);
          size_t v29 = 97;
LABEL_14:
          memcpy(v27, v28, v29);
          uint64_t v33 = *((void *)v23 + 39);
          if (v33)
          {
            uint64_t v34 = *((void *)v23 + 40);
            uint64_t v35 = *((void *)v23 + 41);
            *((void *)v22 + 39) = v33;
            *((void *)v22 + 40) = v34;
            *((void *)v22 + 41) = v35;
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v22 + 312) = *(_OWORD *)(v23 + 312);
            *((void *)v22 + 41) = *((void *)v23 + 41);
          }
          uint64_t v36 = *(int *)(v137 + 64);
          id v37 = &v14[v36];
          uint64_t v38 = &v15[v36];
          uint64_t v39 = *((void *)v38 + 1);
          double v16 = (int *)v143;
          if (v39)
          {
            *(void *)id v37 = *(void *)v38;
            *((void *)v37 + 1) = v39;
            uint64_t v40 = *((void *)v38 + 3);
            *((void *)v37 + 2) = *((void *)v38 + 2);
            *((void *)v37 + 3) = v40;
            v37[32] = v38[32];
            *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
            *((void *)v37 + 7) = *((void *)v38 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v41 = *((_OWORD *)v38 + 1);
            *(_OWORD *)id v37 = *(_OWORD *)v38;
            *((_OWORD *)v37 + 1) = v41;
            long long v42 = *((_OWORD *)v38 + 3);
            *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
            *((_OWORD *)v37 + 3) = v42;
          }
LABEL_20:
          swift_storeEnumTagMultiPayload();
LABEL_21:
          uint64_t v43 = v16[5];
          uint64_t v44 = &v14[v43];
          uint64_t v45 = &v15[v43];
          uint64_t v46 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
          uint64_t v47 = v16[6];
          uint64_t v48 = &v14[v47];
          id v49 = &v15[v47];
          v48[4] = v49[4];
          *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
          uint64_t v50 = v16[7];
          uint64_t v51 = &v14[v50];
          uint64_t v52 = &v15[v50];
          uint64_t v53 = *(void **)v52;
          uint64_t v139 = v6;
          if (*(void *)v52)
          {
            uint64_t v54 = *((void *)v52 + 1);
            *(void *)uint64_t v51 = v53;
            *((void *)v51 + 1) = v54;
            v51[16] = v52[16];
            uint64_t v55 = *((void *)v52 + 4);
            *((void *)v51 + 3) = *((void *)v52 + 3);
            *((void *)v51 + 4) = v55;
            id v56 = v53;
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v57 = *((_OWORD *)v52 + 1);
            *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
            *((_OWORD *)v51 + 1) = v57;
            *((void *)v51 + 4) = *((void *)v52 + 4);
          }
          *(void *)&v14[v16[8]] = *(void *)&v15[v16[8]];
          uint64_t v58 = v16[9];
          uint64_t v59 = &v14[v58];
          char v60 = &v15[v58];
          uint64_t v61 = *((void *)v60 + 1);
          *(void *)uint64_t v59 = *(void *)v60;
          *((void *)v59 + 1) = v61;
          v14[v16[10]] = v15[v16[10]];
          *(void *)&v14[v16[11]] = *(void *)&v15[v16[11]];
          uint64_t v62 = v16[12];
          Swift::Bool v63 = *(void **)&v15[v62];
          *(void *)&v14[v62] = v63;
          v14[v16[13]] = v15[v16[13]];
          uint64_t v64 = v16[14];
          uint64_t v65 = &v14[v64];
          uint64_t v66 = &v15[v64];
          uint64_t v67 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v68 = v63;
          if (__swift_getEnumTagSinglePayload((uint64_t)v66, 1, v67))
          {
            uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
            __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v67);
          }
          uint64_t v70 = type metadata accessor for Participant.CountdownInfo(0);
          uint64_t v71 = *(int *)(v70 + 20);
          uint64_t v72 = &v65[v71];
          uint64_t v73 = &v66[v71];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v66[v71], 1, v67))
          {
            uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v72, v73, v67);
            __swift_storeEnumTagSinglePayload((uint64_t)v72, 0, 1, v67);
          }
          double v6 = v139;
          v65[*(int *)(v70 + 24)] = v66[*(int *)(v70 + 24)];
          double v16 = (int *)v143;
          v14[*(int *)(v143 + 60)] = v15[*(int *)(v143 + 60)];
          *(void *)&v14[*(int *)(v143 + 64)] = *(void *)&v15[*(int *)(v143 + 64)];
          swift_retain();
          __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v143);
          double v7 = v141;
          break;
        default:
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
          goto LABEL_21;
      }
    }
    uint64_t v75 = v6[8];
    *(void *)(a1 + v6[7]) = *(uint64_t *)((char *)v7 + v6[7]);
    uint64_t v76 = (char *)(a1 + v75);
    Swift::String v77 = (char *)v7 + v75;
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v77, 1, (uint64_t)v16))
    {
      uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
      memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      id v142 = v7;
      uint64_t v79 = type metadata accessor for Participant.State(0);
      uint64_t v144 = (uint64_t)v16;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v80 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16))(v76, v77, v80);
          goto LABEL_48;
        case 4u:
          uint64_t v81 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16))(v76, v77, v81);
          uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v82 = *(int *)(v138 + 48);
          uint64_t v83 = &v76[v82];
          uint64_t v84 = &v77[v82];
          *(_OWORD *)uint64_t v83 = *(_OWORD *)&v77[v82];
          uint64_t v85 = *(void *)&v77[v82 + 16];
          uint64_t v86 = *(void *)&v77[v82 + 24];
          *((void *)v83 + 2) = v85;
          *((void *)v83 + 3) = v86;
          *((_WORD *)v83 + 16) = *((_WORD *)v84 + 16);
          *((void *)v83 + 5) = *((void *)v84 + 5);
          v83[48] = v84[48];
          *(_OWORD *)(v83 + 56) = *(_OWORD *)(v84 + 56);
          *(_OWORD *)(v83 + 72) = *(_OWORD *)(v84 + 72);
          v83[88] = v84[88];
          v83[89] = v84[89];
          uint64_t v87 = *((void *)v84 + 15);
          swift_bridgeObjectRetain();
          if (v87)
          {
            if (v87 == 1)
            {
              uint64_t v88 = v83 + 96;
              uint64_t v89 = v84 + 96;
              size_t v90 = 209;
              goto LABEL_42;
            }
            uint64_t v92 = *((void *)v84 + 16);
            *((void *)v83 + 15) = v87;
            *((void *)v83 + 16) = v92;
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v87 - 8))((uint64_t)(v83 + 96), (uint64_t)(v84 + 96), v87);
          }
          else
          {
            long long v91 = *((_OWORD *)v84 + 7);
            *((_OWORD *)v83 + 6) = *((_OWORD *)v84 + 6);
            *((_OWORD *)v83 + 7) = v91;
            *((void *)v83 + 16) = *((void *)v84 + 16);
          }
          *((_DWORD *)v83 + 34) = *((_DWORD *)v84 + 34);
          long long v93 = *((_OWORD *)v84 + 10);
          *((_OWORD *)v83 + 9) = *((_OWORD *)v84 + 9);
          *((_OWORD *)v83 + 10) = v93;
          *((_OWORD *)v83 + 11) = *((_OWORD *)v84 + 11);
          v83[192] = v84[192];
          uint64_t v88 = v83 + 208;
          uint64_t v89 = v84 + 208;
          *((void *)v83 + 25) = *((void *)v84 + 25);
          size_t v90 = 97;
LABEL_42:
          memcpy(v88, v89, v90);
          uint64_t v94 = *((void *)v84 + 39);
          if (v94)
          {
            uint64_t v95 = *((void *)v84 + 40);
            uint64_t v96 = *((void *)v84 + 41);
            *((void *)v83 + 39) = v94;
            *((void *)v83 + 40) = v95;
            *((void *)v83 + 41) = v96;
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v83 + 312) = *(_OWORD *)(v84 + 312);
            *((void *)v83 + 41) = *((void *)v84 + 41);
          }
          uint64_t v97 = *(int *)(v138 + 64);
          id v98 = &v76[v97];
          double v99 = &v77[v97];
          uint64_t v100 = *((void *)v99 + 1);
          double v16 = (int *)v144;
          if (v100)
          {
            *(void *)id v98 = *(void *)v99;
            *((void *)v98 + 1) = v100;
            uint64_t v101 = *((void *)v99 + 3);
            *((void *)v98 + 2) = *((void *)v99 + 2);
            *((void *)v98 + 3) = v101;
            v98[32] = v99[32];
            *(_OWORD *)(v98 + 40) = *(_OWORD *)(v99 + 40);
            *((void *)v98 + 7) = *((void *)v99 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v102 = *((_OWORD *)v99 + 1);
            *(_OWORD *)id v98 = *(_OWORD *)v99;
            *((_OWORD *)v98 + 1) = v102;
            long long v103 = *((_OWORD *)v99 + 3);
            *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
            *((_OWORD *)v98 + 3) = v103;
          }
LABEL_48:
          swift_storeEnumTagMultiPayload();
LABEL_49:
          uint64_t v104 = v16[5];
          uint64_t v105 = &v76[v104];
          uint64_t v106 = &v77[v104];
          uint64_t v107 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16))(v105, v106, v107);
          uint64_t v108 = v16[6];
          long long v109 = &v76[v108];
          unint64_t v110 = &v77[v108];
          v109[4] = v110[4];
          *(_DWORD *)long long v109 = *(_DWORD *)v110;
          uint64_t v111 = v16[7];
          uint64_t v112 = &v76[v111];
          uint64_t v113 = &v77[v111];
          unsigned __int8 v114 = *(void **)v113;
          uint64_t v140 = v6;
          if (*(void *)v113)
          {
            uint64_t v115 = *((void *)v113 + 1);
            *(void *)uint64_t v112 = v114;
            *((void *)v112 + 1) = v115;
            v112[16] = v113[16];
            uint64_t v116 = *((void *)v113 + 4);
            *((void *)v112 + 3) = *((void *)v113 + 3);
            *((void *)v112 + 4) = v116;
            id v117 = v114;
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v118 = *((_OWORD *)v113 + 1);
            *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
            *((_OWORD *)v112 + 1) = v118;
            *((void *)v112 + 4) = *((void *)v113 + 4);
          }
          *(void *)&v76[v16[8]] = *(void *)&v77[v16[8]];
          uint64_t v119 = v16[9];
          uint64_t v120 = &v76[v119];
          long long v121 = &v77[v119];
          uint64_t v122 = *((void *)v121 + 1);
          *(void *)uint64_t v120 = *(void *)v121;
          *((void *)v120 + 1) = v122;
          v76[v16[10]] = v77[v16[10]];
          *(void *)&v76[v16[11]] = *(void *)&v77[v16[11]];
          uint64_t v123 = v16[12];
          id v124 = *(void **)&v77[v123];
          *(void *)&v76[v123] = v124;
          v76[v16[13]] = v77[v16[13]];
          uint64_t v125 = v16[14];
          id v126 = &v76[v125];
          uint64_t v127 = &v77[v125];
          uint64_t v128 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v129 = v124;
          if (__swift_getEnumTagSinglePayload((uint64_t)v127, 1, v128))
          {
            uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v126, v127, v128);
            __swift_storeEnumTagSinglePayload((uint64_t)v126, 0, 1, v128);
          }
          uint64_t v131 = type metadata accessor for Participant.CountdownInfo(0);
          uint64_t v132 = *(int *)(v131 + 20);
          id v133 = &v126[v132];
          id v134 = &v127[v132];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v127[v132], 1, v128))
          {
            uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v133, v134, *(void *)(*(void *)(v135 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v133, v134, v128);
            __swift_storeEnumTagSinglePayload((uint64_t)v133, 0, 1, v128);
          }
          double v6 = v140;
          v126[*(int *)(v131 + 24)] = v127[*(int *)(v131 + 24)];
          v76[*(int *)(v144 + 60)] = v77[*(int *)(v144 + 60)];
          *(void *)&v76[*(int *)(v144 + 64)] = *(void *)&v77[*(int *)(v144 + 64)];
          swift_retain();
          __swift_storeEnumTagSinglePayload((uint64_t)v76, 0, 1, v144);
          double v7 = v142;
          break;
        default:
          memcpy(v76, v77, *(void *)(*(void *)(v79 - 8) + 64));
          goto LABEL_49;
      }
    }
    memcpy((void *)(a1 + v6[9]), (char *)v7 + v6[9], 0x61uLL);
  }
  return a1;
}

uint64_t destroy for InCallControlsActivityCellViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  double v6 = (int *)type metadata accessor for Participant(0);
  if (!__swift_getEnumTagSinglePayload(v5, 1, (uint64_t)v6))
  {
    type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
        break;
      case 4u:
        uint64_t v23 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v5, v23);
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v25 = v5 + *(int *)(v24 + 48);
        swift_bridgeObjectRelease();
        if (*(void *)(v25 + 120) >= 2uLL) {
          __swift_destroy_boxed_opaque_existential_1(v25 + 96);
        }
        if (*(void *)(v25 + 312))
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(v5 + *(int *)(v24 + 64) + 8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        break;
      default:
        break;
    }
    uint64_t v8 = v5 + v6[5];
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    long long v10 = (id *)(v5 + v6[7]);
    if (*v10)
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v11 = v5 + v6[14];
    uint64_t v12 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    }
    uint64_t v13 = v11 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
    if (!__swift_getEnumTagSinglePayload(v13, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v13, v12);
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + *(int *)(a2 + 32);
  uint64_t result = __swift_getEnumTagSinglePayload(v14, 1, (uint64_t)v6);
  if (!result)
  {
    type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v16 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v14, v16);
        break;
      case 4u:
        uint64_t v26 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v14, v26);
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v28 = v14 + *(int *)(v27 + 48);
        swift_bridgeObjectRelease();
        if (*(void *)(v28 + 120) >= 2uLL) {
          __swift_destroy_boxed_opaque_existential_1(v28 + 96);
        }
        if (*(void *)(v28 + 312))
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(v14 + *(int *)(v27 + 64) + 8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        break;
      default:
        break;
    }
    uint64_t v17 = v14 + v6[5];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
    uint64_t v19 = (id *)(v14 + v6[7]);
    if (*v19)
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v20 = v14 + v6[14];
    uint64_t v21 = type metadata accessor for Date();
    if (!__swift_getEnumTagSinglePayload(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
    }
    uint64_t v22 = v20 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
    if (!__swift_getEnumTagSinglePayload(v22, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v22, v21);
    }
    return swift_release();
  }
  return result;
}

_OWORD *initializeWithCopy for InCallControlsActivityCellViewModel(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  double v6 = a1 + 1;
  uint64_t v7 = a2 + 1;
  long long v8 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a1 + 40) = v8;
  uint64_t v9 = v8;
  long long v10 = **(void (***)(_OWORD *, _OWORD *, uint64_t))(v8 - 8);
  swift_unknownObjectRetain();
  v10(v6, v7, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)v5 + v11;
  uint64_t v13 = (char *)v4 + v11;
  uint64_t v14 = (int *)type metadata accessor for Participant(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, (uint64_t)v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    id v141 = v4;
    uint64_t v16 = type metadata accessor for Participant.State(0);
    uint64_t v137 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v17 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
        goto LABEL_18;
      case 4u:
        uint64_t v18 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v12, v13, v18);
        uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v19 = *(int *)(v135 + 48);
        uint64_t v20 = &v12[v19];
        uint64_t v21 = &v13[v19];
        *(_OWORD *)uint64_t v20 = *(_OWORD *)&v13[v19];
        uint64_t v22 = *(void *)&v13[v19 + 16];
        uint64_t v23 = *(void *)&v13[v19 + 24];
        *((void *)v20 + 2) = v22;
        *((void *)v20 + 3) = v23;
        *((_WORD *)v20 + 16) = *((_WORD *)v21 + 16);
        *((void *)v20 + 5) = *((void *)v21 + 5);
        v20[48] = v21[48];
        *(_OWORD *)(v20 + 56) = *(_OWORD *)(v21 + 56);
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(v21 + 72);
        v20[88] = v21[88];
        v20[89] = v21[89];
        uint64_t v24 = *((void *)v21 + 15);
        swift_bridgeObjectRetain();
        if (v24)
        {
          if (v24 == 1)
          {
            uint64_t v25 = v20 + 96;
            uint64_t v26 = v21 + 96;
            size_t v27 = 209;
            goto LABEL_12;
          }
          uint64_t v29 = *((void *)v21 + 16);
          *((void *)v20 + 15) = v24;
          *((void *)v20 + 16) = v29;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))((uint64_t)(v20 + 96), (uint64_t)(v21 + 96), v24);
        }
        else
        {
          long long v28 = *((_OWORD *)v21 + 7);
          *((_OWORD *)v20 + 6) = *((_OWORD *)v21 + 6);
          *((_OWORD *)v20 + 7) = v28;
          *((void *)v20 + 16) = *((void *)v21 + 16);
        }
        *((_DWORD *)v20 + 34) = *((_DWORD *)v21 + 34);
        long long v30 = *((_OWORD *)v21 + 10);
        *((_OWORD *)v20 + 9) = *((_OWORD *)v21 + 9);
        *((_OWORD *)v20 + 10) = v30;
        *((_OWORD *)v20 + 11) = *((_OWORD *)v21 + 11);
        v20[192] = v21[192];
        uint64_t v25 = v20 + 208;
        uint64_t v26 = v21 + 208;
        *((void *)v20 + 25) = *((void *)v21 + 25);
        size_t v27 = 97;
LABEL_12:
        memcpy(v25, v26, v27);
        uint64_t v31 = *((void *)v21 + 39);
        if (v31)
        {
          uint64_t v32 = *((void *)v21 + 40);
          uint64_t v33 = *((void *)v21 + 41);
          *((void *)v20 + 39) = v31;
          *((void *)v20 + 40) = v32;
          *((void *)v20 + 41) = v33;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v20 + 312) = *(_OWORD *)(v21 + 312);
          *((void *)v20 + 41) = *((void *)v21 + 41);
        }
        uint64_t v34 = *(int *)(v135 + 64);
        uint64_t v35 = &v12[v34];
        uint64_t v36 = &v13[v34];
        uint64_t v37 = *((void *)v36 + 1);
        if (v37)
        {
          *(void *)uint64_t v35 = *(void *)v36;
          *((void *)v35 + 1) = v37;
          uint64_t v38 = *((void *)v36 + 3);
          *((void *)v35 + 2) = *((void *)v36 + 2);
          *((void *)v35 + 3) = v38;
          v35[32] = v36[32];
          *(_OWORD *)(v35 + 40) = *(_OWORD *)(v36 + 40);
          *((void *)v35 + 7) = *((void *)v36 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v39 = *((_OWORD *)v36 + 1);
          *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
          *((_OWORD *)v35 + 1) = v39;
          long long v40 = *((_OWORD *)v36 + 3);
          *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
          *((_OWORD *)v35 + 3) = v40;
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
LABEL_19:
        uint64_t v41 = v14[5];
        long long v42 = &v12[v41];
        uint64_t v43 = &v13[v41];
        uint64_t v44 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v42, v43, v44);
        uint64_t v45 = v14[6];
        uint64_t v46 = &v12[v45];
        uint64_t v47 = &v13[v45];
        v46[4] = v47[4];
        *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
        uint64_t v48 = v14[7];
        id v49 = &v12[v48];
        uint64_t v50 = &v13[v48];
        uint64_t v51 = *(void **)v50;
        uint64_t v139 = v5;
        if (*(void *)v50)
        {
          uint64_t v52 = *((void *)v50 + 1);
          *(void *)id v49 = v51;
          *((void *)v49 + 1) = v52;
          v49[16] = v50[16];
          uint64_t v53 = *((void *)v50 + 4);
          *((void *)v49 + 3) = *((void *)v50 + 3);
          *((void *)v49 + 4) = v53;
          id v54 = v51;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v55 = *((_OWORD *)v50 + 1);
          *(_OWORD *)id v49 = *(_OWORD *)v50;
          *((_OWORD *)v49 + 1) = v55;
          *((void *)v49 + 4) = *((void *)v50 + 4);
        }
        *(void *)&v12[v14[8]] = *(void *)&v13[v14[8]];
        uint64_t v56 = v14[9];
        long long v57 = &v12[v56];
        uint64_t v58 = &v13[v56];
        uint64_t v59 = *((void *)v58 + 1);
        *(void *)long long v57 = *(void *)v58;
        *((void *)v57 + 1) = v59;
        v12[v14[10]] = v13[v14[10]];
        *(void *)&v12[v14[11]] = *(void *)&v13[v14[11]];
        uint64_t v60 = v14[12];
        uint64_t v61 = *(void **)&v13[v60];
        *(void *)&v12[v60] = v61;
        v12[v14[13]] = v13[v14[13]];
        uint64_t v62 = v14[14];
        Swift::Bool v63 = &v12[v62];
        uint64_t v64 = &v13[v62];
        uint64_t v65 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v66 = v61;
        if (__swift_getEnumTagSinglePayload((uint64_t)v64, 1, v65))
        {
          uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
          __swift_storeEnumTagSinglePayload((uint64_t)v63, 0, 1, v65);
        }
        uint64_t v5 = v139;
        uint64_t v68 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v69 = *(int *)(v68 + 20);
        uint64_t v70 = &v63[v69];
        uint64_t v71 = &v64[v69];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v64[v69], 1, v65))
        {
          uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v70, v71, v65);
          __swift_storeEnumTagSinglePayload((uint64_t)v70, 0, 1, v65);
        }
        a3 = v137;
        v63[*(int *)(v68 + 24)] = v64[*(int *)(v68 + 24)];
        v12[v14[15]] = v13[v14[15]];
        *(void *)&v12[v14[16]] = *(void *)&v13[v14[16]];
        swift_retain();
        __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, (uint64_t)v14);
        uint64_t v4 = v141;
        break;
      default:
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        goto LABEL_19;
    }
  }
  uint64_t v73 = a3[8];
  *(void *)((char *)v5 + a3[7]) = *(void *)((char *)v4 + a3[7]);
  uint64_t v74 = (char *)v5 + v73;
  uint64_t v75 = (char *)v4 + v73;
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v75, 1, (uint64_t)v14))
  {
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
  }
  else
  {
    id v142 = v4;
    uint64_t v77 = type metadata accessor for Participant.State(0);
    uint64_t v138 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v78 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v74, v75, v78);
        goto LABEL_46;
      case 4u:
        uint64_t v79 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v74, v75, v79);
        uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v80 = *(int *)(v136 + 48);
        uint64_t v81 = &v74[v80];
        uint64_t v82 = &v75[v80];
        *(_OWORD *)uint64_t v81 = *(_OWORD *)&v75[v80];
        uint64_t v83 = *(void *)&v75[v80 + 16];
        uint64_t v84 = *(void *)&v75[v80 + 24];
        *((void *)v81 + 2) = v83;
        *((void *)v81 + 3) = v84;
        *((_WORD *)v81 + 16) = *((_WORD *)v82 + 16);
        *((void *)v81 + 5) = *((void *)v82 + 5);
        v81[48] = v82[48];
        *(_OWORD *)(v81 + 56) = *(_OWORD *)(v82 + 56);
        *(_OWORD *)(v81 + 72) = *(_OWORD *)(v82 + 72);
        v81[88] = v82[88];
        v81[89] = v82[89];
        uint64_t v85 = *((void *)v82 + 15);
        swift_bridgeObjectRetain();
        if (v85)
        {
          if (v85 == 1)
          {
            uint64_t v86 = v81 + 96;
            uint64_t v87 = v82 + 96;
            size_t v88 = 209;
            goto LABEL_40;
          }
          uint64_t v90 = *((void *)v82 + 16);
          *((void *)v81 + 15) = v85;
          *((void *)v81 + 16) = v90;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v85 - 8))((uint64_t)(v81 + 96), (uint64_t)(v82 + 96), v85);
        }
        else
        {
          long long v89 = *((_OWORD *)v82 + 7);
          *((_OWORD *)v81 + 6) = *((_OWORD *)v82 + 6);
          *((_OWORD *)v81 + 7) = v89;
          *((void *)v81 + 16) = *((void *)v82 + 16);
        }
        *((_DWORD *)v81 + 34) = *((_DWORD *)v82 + 34);
        long long v91 = *((_OWORD *)v82 + 10);
        *((_OWORD *)v81 + 9) = *((_OWORD *)v82 + 9);
        *((_OWORD *)v81 + 10) = v91;
        *((_OWORD *)v81 + 11) = *((_OWORD *)v82 + 11);
        v81[192] = v82[192];
        uint64_t v86 = v81 + 208;
        uint64_t v87 = v82 + 208;
        *((void *)v81 + 25) = *((void *)v82 + 25);
        size_t v88 = 97;
LABEL_40:
        memcpy(v86, v87, v88);
        uint64_t v92 = *((void *)v82 + 39);
        if (v92)
        {
          uint64_t v93 = *((void *)v82 + 40);
          uint64_t v94 = *((void *)v82 + 41);
          *((void *)v81 + 39) = v92;
          *((void *)v81 + 40) = v93;
          *((void *)v81 + 41) = v94;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v81 + 312) = *(_OWORD *)(v82 + 312);
          *((void *)v81 + 41) = *((void *)v82 + 41);
        }
        uint64_t v95 = *(int *)(v136 + 64);
        uint64_t v96 = &v74[v95];
        uint64_t v97 = &v75[v95];
        uint64_t v98 = *((void *)v97 + 1);
        if (v98)
        {
          *(void *)uint64_t v96 = *(void *)v97;
          *((void *)v96 + 1) = v98;
          uint64_t v99 = *((void *)v97 + 3);
          *((void *)v96 + 2) = *((void *)v97 + 2);
          *((void *)v96 + 3) = v99;
          v96[32] = v97[32];
          *(_OWORD *)(v96 + 40) = *(_OWORD *)(v97 + 40);
          *((void *)v96 + 7) = *((void *)v97 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v100 = *((_OWORD *)v97 + 1);
          *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
          *((_OWORD *)v96 + 1) = v100;
          long long v101 = *((_OWORD *)v97 + 3);
          *((_OWORD *)v96 + 2) = *((_OWORD *)v97 + 2);
          *((_OWORD *)v96 + 3) = v101;
        }
LABEL_46:
        swift_storeEnumTagMultiPayload();
LABEL_47:
        uint64_t v102 = v14[5];
        long long v103 = &v74[v102];
        uint64_t v104 = &v75[v102];
        uint64_t v105 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16))(v103, v104, v105);
        uint64_t v106 = v14[6];
        uint64_t v107 = &v74[v106];
        uint64_t v108 = &v75[v106];
        v107[4] = v108[4];
        *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
        uint64_t v109 = v14[7];
        unint64_t v110 = &v74[v109];
        uint64_t v111 = &v75[v109];
        uint64_t v112 = *(void **)v111;
        uint64_t v140 = v5;
        if (*(void *)v111)
        {
          uint64_t v113 = *((void *)v111 + 1);
          *(void *)unint64_t v110 = v112;
          *((void *)v110 + 1) = v113;
          v110[16] = v111[16];
          uint64_t v114 = *((void *)v111 + 4);
          *((void *)v110 + 3) = *((void *)v111 + 3);
          *((void *)v110 + 4) = v114;
          id v115 = v112;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v116 = *((_OWORD *)v111 + 1);
          *(_OWORD *)unint64_t v110 = *(_OWORD *)v111;
          *((_OWORD *)v110 + 1) = v116;
          *((void *)v110 + 4) = *((void *)v111 + 4);
        }
        *(void *)&v74[v14[8]] = *(void *)&v75[v14[8]];
        uint64_t v117 = v14[9];
        long long v118 = &v74[v117];
        uint64_t v119 = &v75[v117];
        uint64_t v120 = *((void *)v119 + 1);
        *(void *)long long v118 = *(void *)v119;
        *((void *)v118 + 1) = v120;
        v74[v14[10]] = v75[v14[10]];
        *(void *)&v74[v14[11]] = *(void *)&v75[v14[11]];
        uint64_t v121 = v14[12];
        uint64_t v122 = *(void **)&v75[v121];
        *(void *)&v74[v121] = v122;
        v74[v14[13]] = v75[v14[13]];
        uint64_t v123 = v14[14];
        id v124 = &v74[v123];
        uint64_t v125 = &v75[v123];
        uint64_t v126 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v127 = v122;
        if (__swift_getEnumTagSinglePayload((uint64_t)v125, 1, v126))
        {
          uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 16))(v124, v125, v126);
          __swift_storeEnumTagSinglePayload((uint64_t)v124, 0, 1, v126);
        }
        uint64_t v5 = v140;
        uint64_t v129 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v130 = *(int *)(v129 + 20);
        uint64_t v131 = &v124[v130];
        uint64_t v132 = &v125[v130];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v125[v130], 1, v126))
        {
          uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v131, v132, *(void *)(*(void *)(v133 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 16))(v131, v132, v126);
          __swift_storeEnumTagSinglePayload((uint64_t)v131, 0, 1, v126);
        }
        a3 = v138;
        v124[*(int *)(v129 + 24)] = v125[*(int *)(v129 + 24)];
        v74[v14[15]] = v75[v14[15]];
        *(void *)&v74[v14[16]] = *(void *)&v75[v14[16]];
        swift_retain();
        __swift_storeEnumTagSinglePayload((uint64_t)v74, 0, 1, (uint64_t)v14);
        uint64_t v4 = v142;
        break;
      default:
        memcpy(v74, v75, *(void *)(*(void *)(v77 - 8) + 64));
        goto LABEL_47;
    }
  }
  memcpy((char *)v5 + a3[9], (char *)v4 + a3[9], 0x61uLL);
  return v5;
}

void *assignWithCopy for InCallControlsActivityCellViewModel(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v5[1] = v6;
  __swift_assign_boxed_opaque_existential_1(v5 + 2, v4 + 2);
  uint64_t v7 = a3[6];
  long long v8 = (char *)v5 + v7;
  uint64_t v9 = (char *)v4 + v7;
  long long v10 = (int *)type metadata accessor for Participant(0);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      v288 = v4;
      uint64_t v13 = type metadata accessor for Participant.State(0);
      v284 = a3;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v14 = type metadata accessor for Date();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
          goto LABEL_28;
        case 4u:
          uint64_t v18 = type metadata accessor for Date();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 16))(v8, v9, v18);
          __src = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v19 = __src[12];
          uint64_t v20 = &v8[v19];
          uint64_t v21 = &v9[v19];
          *(_OWORD *)uint64_t v20 = *(_OWORD *)&v9[v19];
          *((void *)v20 + 2) = *(void *)&v9[v19 + 16];
          uint64_t v22 = *(void *)&v9[v19 + 24];
          *((_WORD *)v20 + 16) = *((_WORD *)v21 + 16);
          *((void *)v20 + 3) = v22;
          *((void *)v20 + 5) = *((void *)v21 + 5);
          v20[48] = v21[48];
          long long v23 = *(_OWORD *)(v21 + 72);
          long long v24 = *(_OWORD *)(v21 + 56);
          v20[88] = v21[88];
          *(_OWORD *)(v20 + 56) = v24;
          *(_OWORD *)(v20 + 72) = v23;
          v20[89] = v21[89];
          uint64_t v25 = *((void *)v21 + 15);
          swift_bridgeObjectRetain();
          if (v25)
          {
            if (v25 == 1)
            {
              uint64_t v26 = v20 + 96;
              size_t v27 = v21 + 96;
              size_t v28 = 209;
              goto LABEL_22;
            }
            *((void *)v20 + 15) = v25;
            *((void *)v20 + 16) = *((void *)v21 + 16);
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v25 - 8))((uint64_t)(v20 + 96), (uint64_t)(v21 + 96), v25);
          }
          else
          {
            long long v40 = *((_OWORD *)v21 + 6);
            long long v41 = *((_OWORD *)v21 + 7);
            *((void *)v20 + 16) = *((void *)v21 + 16);
            *((_OWORD *)v20 + 6) = v40;
            *((_OWORD *)v20 + 7) = v41;
          }
          *((_DWORD *)v20 + 34) = *((_DWORD *)v21 + 34);
          *((void *)v20 + 18) = *((void *)v21 + 18);
          *((void *)v20 + 19) = *((void *)v21 + 19);
          long long v42 = *((_OWORD *)v21 + 10);
          long long v43 = *((_OWORD *)v21 + 11);
          v20[192] = v21[192];
          *((_OWORD *)v20 + 10) = v42;
          *((_OWORD *)v20 + 11) = v43;
          *((void *)v20 + 25) = *((void *)v21 + 25);
          uint64_t v26 = v20 + 208;
          size_t v27 = v21 + 208;
          size_t v28 = 97;
LABEL_22:
          memcpy(v26, v27, v28);
          uint64_t v44 = *((void *)v21 + 39);
          if (v44)
          {
            uint64_t v45 = *((void *)v21 + 40);
            *((void *)v20 + 39) = v44;
            *((void *)v20 + 40) = v45;
            *((void *)v20 + 41) = *((void *)v21 + 41);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v46 = *(_OWORD *)(v21 + 312);
            *((void *)v20 + 41) = *((void *)v21 + 41);
            *(_OWORD *)(v20 + 312) = v46;
          }
          uint64_t v47 = __src[16];
          uint64_t v48 = &v8[v47];
          id v49 = &v9[v47];
          if (*((void *)v49 + 1))
          {
            *(void *)uint64_t v48 = *(void *)v49;
            *((void *)v48 + 1) = *((void *)v49 + 1);
            *((void *)v48 + 2) = *((void *)v49 + 2);
            *((void *)v48 + 3) = *((void *)v49 + 3);
            v48[32] = v49[32];
            *((void *)v48 + 5) = *((void *)v49 + 5);
            *((void *)v48 + 6) = *((void *)v49 + 6);
            *((void *)v48 + 7) = *((void *)v49 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v50 = *(_OWORD *)v49;
            long long v51 = *((_OWORD *)v49 + 1);
            long long v52 = *((_OWORD *)v49 + 3);
            *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
            *((_OWORD *)v48 + 3) = v52;
            *(_OWORD *)uint64_t v48 = v50;
            *((_OWORD *)v48 + 1) = v51;
          }
LABEL_28:
          swift_storeEnumTagMultiPayload();
LABEL_29:
          uint64_t v53 = v10[5];
          id v54 = &v8[v53];
          long long v55 = &v9[v53];
          uint64_t v56 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
          uint64_t v57 = v10[6];
          uint64_t v58 = &v8[v57];
          uint64_t v59 = &v9[v57];
          int v60 = *(_DWORD *)v59;
          v58[4] = v59[4];
          *(_DWORD *)uint64_t v58 = v60;
          uint64_t v61 = v10[7];
          uint64_t v62 = &v8[v61];
          Swift::Bool v63 = &v9[v61];
          uint64_t v64 = *(void **)v63;
          v282 = v5;
          if (*(void *)v63)
          {
            *(void *)uint64_t v62 = v64;
            uint64_t v65 = *((void *)v63 + 1);
            v62[16] = v63[16];
            *((void *)v62 + 1) = v65;
            *((void *)v62 + 3) = *((void *)v63 + 3);
            *((void *)v62 + 4) = *((void *)v63 + 4);
            id v66 = v64;
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v67 = *(_OWORD *)v63;
            long long v68 = *((_OWORD *)v63 + 1);
            *((void *)v62 + 4) = *((void *)v63 + 4);
            *(_OWORD *)uint64_t v62 = v67;
            *((_OWORD *)v62 + 1) = v68;
          }
          *(void *)&v8[v10[8]] = *(void *)&v9[v10[8]];
          uint64_t v69 = v10[9];
          uint64_t v70 = &v8[v69];
          uint64_t v71 = &v9[v69];
          *uint64_t v70 = *v71;
          v70[1] = v71[1];
          v8[v10[10]] = v9[v10[10]];
          *(void *)&v8[v10[11]] = *(void *)&v9[v10[11]];
          uint64_t v72 = v10[12];
          uint64_t v73 = *(void **)&v9[v72];
          *(void *)&v8[v72] = v73;
          v8[v10[13]] = v9[v10[13]];
          uint64_t v74 = v10[14];
          uint64_t v75 = &v8[v74];
          uint64_t v76 = &v9[v74];
          uint64_t v77 = type metadata accessor for Date();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v78 = v73;
          if (__swift_getEnumTagSinglePayload((uint64_t)v76, 1, v77))
          {
            uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v75, v76, v77);
            __swift_storeEnumTagSinglePayload((uint64_t)v75, 0, 1, v77);
          }
          uint64_t v5 = v282;
          uint64_t v80 = type metadata accessor for Participant.CountdownInfo(0);
          uint64_t v81 = *(int *)(v80 + 20);
          uint64_t v82 = &v75[v81];
          uint64_t v83 = &v76[v81];
          if (__swift_getEnumTagSinglePayload((uint64_t)&v76[v81], 1, v77))
          {
            uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
            memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v82, v83, v77);
            __swift_storeEnumTagSinglePayload((uint64_t)v82, 0, 1, v77);
          }
          a3 = v284;
          v75[*(int *)(v80 + 24)] = v76[*(int *)(v80 + 24)];
          v8[v10[15]] = v9[v10[15]];
          *(void *)&v8[v10[16]] = *(void *)&v9[v10[16]];
          swift_retain();
          __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
          break;
        default:
          memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
          goto LABEL_29;
      }
      goto LABEL_69;
    }
LABEL_7:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_70;
  }
  if (v12)
  {
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v8, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_7;
  }
  v285 = a3;
  v288 = v4;
  if (v5 != v4)
  {
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v8, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v16 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v17 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 16))(v8, v9, v17);
        goto LABEL_48;
      case 4u:
        uint64_t v29 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v29 - 8) + 16))(v8, v9, v29);
        __srca = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v30 = __srca[12];
        uint64_t v31 = &v8[v30];
        uint64_t v32 = &v9[v30];
        *(_OWORD *)uint64_t v31 = *(_OWORD *)&v9[v30];
        *((void *)v31 + 2) = *(void *)&v9[v30 + 16];
        uint64_t v33 = *(void *)&v9[v30 + 24];
        *((_WORD *)v31 + 16) = *((_WORD *)v32 + 16);
        *((void *)v31 + 3) = v33;
        *((void *)v31 + 5) = *((void *)v32 + 5);
        v31[48] = v32[48];
        long long v34 = *(_OWORD *)(v32 + 72);
        long long v35 = *(_OWORD *)(v32 + 56);
        v31[88] = v32[88];
        *(_OWORD *)(v31 + 56) = v35;
        *(_OWORD *)(v31 + 72) = v34;
        v31[89] = v32[89];
        uint64_t v36 = *((void *)v32 + 15);
        swift_bridgeObjectRetain();
        if (v36)
        {
          if (v36 == 1)
          {
            uint64_t v37 = v31 + 96;
            uint64_t v38 = v32 + 96;
            size_t v39 = 209;
            goto LABEL_42;
          }
          *((void *)v31 + 15) = v36;
          *((void *)v31 + 16) = *((void *)v32 + 16);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v36 - 8))((uint64_t)(v31 + 96), (uint64_t)(v32 + 96), v36);
        }
        else
        {
          long long v85 = *((_OWORD *)v32 + 6);
          long long v86 = *((_OWORD *)v32 + 7);
          *((void *)v31 + 16) = *((void *)v32 + 16);
          *((_OWORD *)v31 + 6) = v85;
          *((_OWORD *)v31 + 7) = v86;
        }
        *((_DWORD *)v31 + 34) = *((_DWORD *)v32 + 34);
        *((void *)v31 + 18) = *((void *)v32 + 18);
        *((void *)v31 + 19) = *((void *)v32 + 19);
        long long v87 = *((_OWORD *)v32 + 10);
        long long v88 = *((_OWORD *)v32 + 11);
        v31[192] = v32[192];
        *((_OWORD *)v31 + 10) = v87;
        *((_OWORD *)v31 + 11) = v88;
        *((void *)v31 + 25) = *((void *)v32 + 25);
        uint64_t v37 = v31 + 208;
        uint64_t v38 = v32 + 208;
        size_t v39 = 97;
LABEL_42:
        memcpy(v37, v38, v39);
        uint64_t v89 = *((void *)v32 + 39);
        if (v89)
        {
          uint64_t v90 = *((void *)v32 + 40);
          *((void *)v31 + 39) = v89;
          *((void *)v31 + 40) = v90;
          *((void *)v31 + 41) = *((void *)v32 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v91 = *(_OWORD *)(v32 + 312);
          *((void *)v31 + 41) = *((void *)v32 + 41);
          *(_OWORD *)(v31 + 312) = v91;
        }
        uint64_t v92 = __srca[16];
        uint64_t v93 = &v8[v92];
        uint64_t v94 = &v9[v92];
        if (*((void *)v94 + 1))
        {
          *(void *)uint64_t v93 = *(void *)v94;
          *((void *)v93 + 1) = *((void *)v94 + 1);
          *((void *)v93 + 2) = *((void *)v94 + 2);
          *((void *)v93 + 3) = *((void *)v94 + 3);
          v93[32] = v94[32];
          *((void *)v93 + 5) = *((void *)v94 + 5);
          *((void *)v93 + 6) = *((void *)v94 + 6);
          *((void *)v93 + 7) = *((void *)v94 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v95 = *(_OWORD *)v94;
          long long v96 = *((_OWORD *)v94 + 1);
          long long v97 = *((_OWORD *)v94 + 3);
          *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
          *((_OWORD *)v93 + 3) = v97;
          *(_OWORD *)uint64_t v93 = v95;
          *((_OWORD *)v93 + 1) = v96;
        }
LABEL_48:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64));
        break;
    }
  }
  uint64_t v98 = v10[5];
  uint64_t v99 = &v8[v98];
  long long v100 = &v9[v98];
  uint64_t v101 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 24))(v99, v100, v101);
  uint64_t v102 = v10[6];
  long long v103 = &v8[v102];
  uint64_t v104 = &v9[v102];
  *long long v103 = *v104;
  v103[1] = v104[1];
  v103[2] = v104[2];
  v103[3] = v104[3];
  v103[4] = v104[4];
  uint64_t v105 = v10[7];
  uint64_t v106 = (uint64_t)&v8[v105];
  uint64_t v107 = &v9[v105];
  uint64_t v108 = *(void **)&v8[v105];
  uint64_t v109 = *(void **)&v9[v105];
  if (v108)
  {
    if (v109)
    {
      *(void *)uint64_t v106 = v109;
      id v110 = v109;

      uint64_t v111 = *((void *)v107 + 1);
      *(unsigned char *)(v106 + 16) = v107[16];
      *(void *)(v106 + 8) = v111;
      *(void *)(v106 + 24) = *((void *)v107 + 3);
      *(void *)(v106 + 32) = *((void *)v107 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Participant.RemoteIdentifiers(v106);
      uint64_t v114 = *((void *)v107 + 4);
      long long v115 = *((_OWORD *)v107 + 1);
      *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
      *(_OWORD *)(v106 + 16) = v115;
      *(void *)(v106 + 32) = v114;
    }
  }
  else if (v109)
  {
    *(void *)uint64_t v106 = v109;
    uint64_t v112 = *((void *)v107 + 1);
    *(unsigned char *)(v106 + 16) = v107[16];
    *(void *)(v106 + 8) = v112;
    *(void *)(v106 + 24) = *((void *)v107 + 3);
    *(void *)(v106 + 32) = *((void *)v107 + 4);
    id v113 = v109;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v116 = *(_OWORD *)v107;
    long long v117 = *((_OWORD *)v107 + 1);
    *(void *)(v106 + 32) = *((void *)v107 + 4);
    *(_OWORD *)uint64_t v106 = v116;
    *(_OWORD *)(v106 + 16) = v117;
  }
  *(void *)&v8[v10[8]] = *(void *)&v9[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v118 = v10[9];
  uint64_t v119 = &v8[v118];
  uint64_t v120 = &v9[v118];
  *uint64_t v119 = *v120;
  v119[1] = v120[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[v10[10]] = v9[v10[10]];
  *(void *)&v8[v10[11]] = *(void *)&v9[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v121 = v10[12];
  uint64_t v122 = *(void **)&v8[v121];
  uint64_t v123 = *(void **)&v9[v121];
  *(void *)&v8[v121] = v123;
  id v124 = v123;

  v8[v10[13]] = v9[v10[13]];
  uint64_t v125 = v10[14];
  uint64_t v126 = &v8[v125];
  id v127 = &v9[v125];
  uint64_t v128 = type metadata accessor for Date();
  LODWORD(v122) = __swift_getEnumTagSinglePayload((uint64_t)v126, 1, v128);
  int v129 = __swift_getEnumTagSinglePayload((uint64_t)v127, 1, v128);
  if (v122)
  {
    if (!v129)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v126, v127, v128);
      __swift_storeEnumTagSinglePayload((uint64_t)v126, 0, 1, v128);
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  uint64_t v130 = *(void *)(v128 - 8);
  if (v129)
  {
    (*(void (**)(char *, uint64_t))(v130 + 8))(v126, v128);
LABEL_61:
    uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v126, v127, *(void *)(*(void *)(v131 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(char *, char *, uint64_t))(v130 + 24))(v126, v127, v128);
LABEL_62:
  uint64_t v132 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v133 = *(int *)(v132 + 20);
  id v134 = &v126[v133];
  __srcb = v127;
  uint64_t v135 = &v127[v133];
  int v136 = __swift_getEnumTagSinglePayload((uint64_t)&v126[v133], 1, v128);
  int v137 = __swift_getEnumTagSinglePayload((uint64_t)v135, 1, v128);
  if (!v136)
  {
    uint64_t v138 = *(void *)(v128 - 8);
    if (!v137)
    {
      (*(void (**)(char *, char *, uint64_t))(v138 + 24))(v134, v135, v128);
      goto LABEL_68;
    }
    (*(void (**)(char *, uint64_t))(v138 + 8))(v134, v128);
    goto LABEL_67;
  }
  if (v137)
  {
LABEL_67:
    uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v134, v135, *(void *)(*(void *)(v139 - 8) + 64));
    goto LABEL_68;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v134, v135, v128);
  __swift_storeEnumTagSinglePayload((uint64_t)v134, 0, 1, v128);
LABEL_68:
  a3 = v285;
  v126[*(int *)(v132 + 24)] = __srcb[*(int *)(v132 + 24)];
  v8[v10[15]] = v9[v10[15]];
  *(void *)&v8[v10[16]] = *(void *)&v9[v10[16]];
  swift_retain();
  swift_release();
LABEL_69:
  uint64_t v4 = v288;
LABEL_70:
  *(void *)((char *)v5 + a3[7]) = *(void *)((char *)v4 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v140 = a3[8];
  id v141 = (char *)v5 + v140;
  id v142 = (char *)v4 + v140;
  int v143 = __swift_getEnumTagSinglePayload((uint64_t)v5 + v140, 1, (uint64_t)v10);
  int v144 = __swift_getEnumTagSinglePayload((uint64_t)v142, 1, (uint64_t)v10);
  if (!v143)
  {
    if (v144)
    {
      outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v141, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_76;
    }
    v287 = a3;
    v289 = v4;
    if (v5 != v4)
    {
      outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v141, (void (*)(void))type metadata accessor for Participant.State);
      uint64_t v148 = type metadata accessor for Participant.State(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v149 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 16))(v141, v142, v149);
          goto LABEL_119;
        case 4u:
          uint64_t v161 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v161 - 8) + 16))(v141, v142, v161);
          __srcd = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v162 = __srcd[12];
          id v163 = &v141[v162];
          CGRect v164 = &v142[v162];
          *(_OWORD *)id v163 = *(_OWORD *)&v142[v162];
          *((void *)v163 + 2) = *(void *)&v142[v162 + 16];
          uint64_t v165 = *(void *)&v142[v162 + 24];
          *((_WORD *)v163 + 16) = *((_WORD *)v164 + 16);
          *((void *)v163 + 3) = v165;
          *((void *)v163 + 5) = *((void *)v164 + 5);
          v163[48] = v164[48];
          long long v166 = *(_OWORD *)(v164 + 72);
          long long v167 = *(_OWORD *)(v164 + 56);
          v163[88] = v164[88];
          *(_OWORD *)(v163 + 56) = v167;
          *(_OWORD *)(v163 + 72) = v166;
          v163[89] = v164[89];
          uint64_t v168 = *((void *)v164 + 15);
          swift_bridgeObjectRetain();
          if (v168)
          {
            if (v168 == 1)
            {
              uint64_t v169 = v163 + 96;
              unint64_t v170 = v164 + 96;
              size_t v171 = 209;
              goto LABEL_113;
            }
            *((void *)v163 + 15) = v168;
            *((void *)v163 + 16) = *((void *)v164 + 16);
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v168 - 8))((uint64_t)(v163 + 96), (uint64_t)(v164 + 96), v168);
          }
          else
          {
            long long v217 = *((_OWORD *)v164 + 6);
            long long v218 = *((_OWORD *)v164 + 7);
            *((void *)v163 + 16) = *((void *)v164 + 16);
            *((_OWORD *)v163 + 6) = v217;
            *((_OWORD *)v163 + 7) = v218;
          }
          *((_DWORD *)v163 + 34) = *((_DWORD *)v164 + 34);
          *((void *)v163 + 18) = *((void *)v164 + 18);
          *((void *)v163 + 19) = *((void *)v164 + 19);
          long long v219 = *((_OWORD *)v164 + 10);
          long long v220 = *((_OWORD *)v164 + 11);
          v163[192] = v164[192];
          *((_OWORD *)v163 + 10) = v219;
          *((_OWORD *)v163 + 11) = v220;
          *((void *)v163 + 25) = *((void *)v164 + 25);
          uint64_t v169 = v163 + 208;
          unint64_t v170 = v164 + 208;
          size_t v171 = 97;
LABEL_113:
          memcpy(v169, v170, v171);
          uint64_t v221 = *((void *)v164 + 39);
          if (v221)
          {
            uint64_t v222 = *((void *)v164 + 40);
            *((void *)v163 + 39) = v221;
            *((void *)v163 + 40) = v222;
            *((void *)v163 + 41) = *((void *)v164 + 41);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v223 = *(_OWORD *)(v164 + 312);
            *((void *)v163 + 41) = *((void *)v164 + 41);
            *(_OWORD *)(v163 + 312) = v223;
          }
          uint64_t v224 = __srcd[16];
          char v225 = &v141[v224];
          uint64_t v226 = &v142[v224];
          if (*((void *)v226 + 1))
          {
            *(void *)char v225 = *(void *)v226;
            *((void *)v225 + 1) = *((void *)v226 + 1);
            *((void *)v225 + 2) = *((void *)v226 + 2);
            *((void *)v225 + 3) = *((void *)v226 + 3);
            v225[32] = v226[32];
            *((void *)v225 + 5) = *((void *)v226 + 5);
            *((void *)v225 + 6) = *((void *)v226 + 6);
            *((void *)v225 + 7) = *((void *)v226 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v227 = *(_OWORD *)v226;
            long long v228 = *((_OWORD *)v226 + 1);
            long long v229 = *((_OWORD *)v226 + 3);
            *((_OWORD *)v225 + 2) = *((_OWORD *)v226 + 2);
            *((_OWORD *)v225 + 3) = v229;
            *(_OWORD *)char v225 = v227;
            *((_OWORD *)v225 + 1) = v228;
          }
LABEL_119:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v141, v142, *(void *)(*(void *)(v148 - 8) + 64));
          break;
      }
    }
    uint64_t v230 = v10[5];
    id v231 = &v141[v230];
    v232 = &v142[v230];
    uint64_t v233 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 24))(v231, v232, v233);
    uint64_t v234 = v10[6];
    v235 = &v141[v234];
    v236 = &v142[v234];
    char *v235 = *v236;
    v235[1] = v236[1];
    v235[2] = v236[2];
    v235[3] = v236[3];
    v235[4] = v236[4];
    uint64_t v237 = v10[7];
    uint64_t v238 = (uint64_t)&v141[v237];
    v239 = &v142[v237];
    v240 = *(void **)&v141[v237];
    v241 = *(void **)&v142[v237];
    v242 = v5;
    if (v240)
    {
      if (v241)
      {
        *(void *)uint64_t v238 = v241;
        id v243 = v241;

        uint64_t v244 = *((void *)v239 + 1);
        *(unsigned char *)(v238 + 16) = v239[16];
        *(void *)(v238 + 8) = v244;
        *(void *)(v238 + 24) = *((void *)v239 + 3);
        *(void *)(v238 + 32) = *((void *)v239 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Participant.RemoteIdentifiers(v238);
        uint64_t v247 = *((void *)v239 + 4);
        long long v248 = *((_OWORD *)v239 + 1);
        *(_OWORD *)uint64_t v238 = *(_OWORD *)v239;
        *(_OWORD *)(v238 + 16) = v248;
        *(void *)(v238 + 32) = v247;
      }
    }
    else if (v241)
    {
      *(void *)uint64_t v238 = v241;
      uint64_t v245 = *((void *)v239 + 1);
      *(unsigned char *)(v238 + 16) = v239[16];
      *(void *)(v238 + 8) = v245;
      *(void *)(v238 + 24) = *((void *)v239 + 3);
      *(void *)(v238 + 32) = *((void *)v239 + 4);
      id v246 = v241;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v249 = *(_OWORD *)v239;
      long long v250 = *((_OWORD *)v239 + 1);
      *(void *)(v238 + 32) = *((void *)v239 + 4);
      *(_OWORD *)uint64_t v238 = v249;
      *(_OWORD *)(v238 + 16) = v250;
    }
    *(void *)&v141[v10[8]] = *(void *)&v142[v10[8]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v251 = v10[9];
    v252 = &v141[v251];
    v253 = &v142[v251];
    *(void *)v252 = *(void *)v253;
    *((void *)v252 + 1) = *((void *)v253 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v141[v10[10]] = v142[v10[10]];
    *(void *)&v141[v10[11]] = *(void *)&v142[v10[11]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v254 = v10[12];
    v255 = *(void **)&v141[v254];
    v256 = *(void **)&v142[v254];
    *(void *)&v141[v254] = v256;
    id v257 = v256;

    v141[v10[13]] = v142[v10[13]];
    uint64_t v258 = v10[14];
    v259 = &v141[v258];
    v260 = &v142[v258];
    uint64_t v261 = type metadata accessor for Date();
    int v262 = __swift_getEnumTagSinglePayload((uint64_t)v259, 1, v261);
    __srce = v260;
    int v263 = __swift_getEnumTagSinglePayload((uint64_t)v260, 1, v261);
    if (v262)
    {
      if (!v263)
      {
        v264 = v260;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 16))(v259, v260, v261);
        __swift_storeEnumTagSinglePayload((uint64_t)v259, 0, 1, v261);
        goto LABEL_133;
      }
    }
    else
    {
      uint64_t v265 = *(void *)(v261 - 8);
      if (!v263)
      {
        v264 = v260;
        (*(void (**)(char *, char *, uint64_t))(v265 + 24))(v259, v260, v261);
LABEL_133:
        uint64_t v5 = v242;
        uint64_t v267 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v268 = *(int *)(v267 + 20);
        v269 = &v259[v268];
        v270 = &v264[v268];
        int v271 = __swift_getEnumTagSinglePayload((uint64_t)&v259[v268], 1, v261);
        int v272 = __swift_getEnumTagSinglePayload((uint64_t)v270, 1, v261);
        if (v271)
        {
          if (!v272)
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 16))(v269, v270, v261);
            __swift_storeEnumTagSinglePayload((uint64_t)v269, 0, 1, v261);
LABEL_139:
            a3 = v287;
            v259[*(int *)(v267 + 24)] = __srce[*(int *)(v267 + 24)];
            v141[v10[15]] = v142[v10[15]];
            *(void *)&v141[v10[16]] = *(void *)&v142[v10[16]];
            swift_retain();
            swift_release();
LABEL_140:
            uint64_t v4 = v289;
            goto LABEL_141;
          }
        }
        else
        {
          uint64_t v273 = *(void *)(v261 - 8);
          if (!v272)
          {
            (*(void (**)(char *, char *, uint64_t))(v273 + 24))(v269, v270, v261);
            goto LABEL_139;
          }
          (*(void (**)(char *, uint64_t))(v273 + 8))(v269, v261);
        }
        uint64_t v274 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v269, v270, *(void *)(*(void *)(v274 - 8) + 64));
        goto LABEL_139;
      }
      (*(void (**)(char *, uint64_t))(v265 + 8))(v259, v261);
    }
    uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    v264 = v260;
    memcpy(v259, v260, *(void *)(*(void *)(v266 - 8) + 64));
    goto LABEL_133;
  }
  if (!v144)
  {
    v289 = v4;
    uint64_t v145 = type metadata accessor for Participant.State(0);
    v286 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v146 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v146 - 8) + 16))(v141, v142, v146);
        goto LABEL_99;
      case 4u:
        uint64_t v150 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v150 - 8) + 16))(v141, v142, v150);
        __srcc = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        uint64_t v151 = __srcc[12];
        uint64_t v152 = &v141[v151];
        char v153 = &v142[v151];
        *(_OWORD *)uint64_t v152 = *(_OWORD *)&v142[v151];
        *((void *)v152 + 2) = *(void *)&v142[v151 + 16];
        uint64_t v154 = *(void *)&v142[v151 + 24];
        *((_WORD *)v152 + 16) = *((_WORD *)v153 + 16);
        *((void *)v152 + 3) = v154;
        *((void *)v152 + 5) = *((void *)v153 + 5);
        v152[48] = v153[48];
        long long v155 = *(_OWORD *)(v153 + 72);
        long long v156 = *(_OWORD *)(v153 + 56);
        v152[88] = v153[88];
        *(_OWORD *)(v152 + 56) = v156;
        *(_OWORD *)(v152 + 72) = v155;
        v152[89] = v153[89];
        uint64_t v157 = *((void *)v153 + 15);
        swift_bridgeObjectRetain();
        if (v157)
        {
          if (v157 == 1)
          {
            CGRect v158 = v152 + 96;
            uint64_t v159 = v153 + 96;
            size_t v160 = 209;
            goto LABEL_93;
          }
          *((void *)v152 + 15) = v157;
          *((void *)v152 + 16) = *((void *)v153 + 16);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v157 - 8))((uint64_t)(v152 + 96), (uint64_t)(v153 + 96), v157);
        }
        else
        {
          long long v172 = *((_OWORD *)v153 + 6);
          long long v173 = *((_OWORD *)v153 + 7);
          *((void *)v152 + 16) = *((void *)v153 + 16);
          *((_OWORD *)v152 + 6) = v172;
          *((_OWORD *)v152 + 7) = v173;
        }
        *((_DWORD *)v152 + 34) = *((_DWORD *)v153 + 34);
        *((void *)v152 + 18) = *((void *)v153 + 18);
        *((void *)v152 + 19) = *((void *)v153 + 19);
        long long v174 = *((_OWORD *)v153 + 10);
        long long v175 = *((_OWORD *)v153 + 11);
        v152[192] = v153[192];
        *((_OWORD *)v152 + 10) = v174;
        *((_OWORD *)v152 + 11) = v175;
        *((void *)v152 + 25) = *((void *)v153 + 25);
        CGRect v158 = v152 + 208;
        uint64_t v159 = v153 + 208;
        size_t v160 = 97;
LABEL_93:
        memcpy(v158, v159, v160);
        uint64_t v176 = *((void *)v153 + 39);
        if (v176)
        {
          uint64_t v177 = *((void *)v153 + 40);
          *((void *)v152 + 39) = v176;
          *((void *)v152 + 40) = v177;
          *((void *)v152 + 41) = *((void *)v153 + 41);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v178 = *(_OWORD *)(v153 + 312);
          *((void *)v152 + 41) = *((void *)v153 + 41);
          *(_OWORD *)(v152 + 312) = v178;
        }
        uint64_t v179 = __srcc[16];
        v180 = &v141[v179];
        v181 = &v142[v179];
        if (*((void *)v181 + 1))
        {
          *(void *)v180 = *(void *)v181;
          *((void *)v180 + 1) = *((void *)v181 + 1);
          *((void *)v180 + 2) = *((void *)v181 + 2);
          *((void *)v180 + 3) = *((void *)v181 + 3);
          v180[32] = v181[32];
          *((void *)v180 + 5) = *((void *)v181 + 5);
          *((void *)v180 + 6) = *((void *)v181 + 6);
          *((void *)v180 + 7) = *((void *)v181 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v182 = *(_OWORD *)v181;
          long long v183 = *((_OWORD *)v181 + 1);
          long long v184 = *((_OWORD *)v181 + 3);
          *((_OWORD *)v180 + 2) = *((_OWORD *)v181 + 2);
          *((_OWORD *)v180 + 3) = v184;
          *(_OWORD *)v180 = v182;
          *((_OWORD *)v180 + 1) = v183;
        }
LABEL_99:
        swift_storeEnumTagMultiPayload();
LABEL_100:
        uint64_t v185 = v10[5];
        v186 = &v141[v185];
        uint64_t v187 = &v142[v185];
        uint64_t v188 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 16))(v186, v187, v188);
        uint64_t v189 = v10[6];
        v190 = &v141[v189];
        id v191 = &v142[v189];
        int v192 = *(_DWORD *)v191;
        v190[4] = v191[4];
        *(_DWORD *)v190 = v192;
        uint64_t v193 = v10[7];
        uint64_t v194 = &v141[v193];
        v195 = &v142[v193];
        v196 = *(void **)v195;
        v283 = v5;
        if (*(void *)v195)
        {
          *(void *)uint64_t v194 = v196;
          uint64_t v197 = *((void *)v195 + 1);
          v194[16] = v195[16];
          *((void *)v194 + 1) = v197;
          *((void *)v194 + 3) = *((void *)v195 + 3);
          *((void *)v194 + 4) = *((void *)v195 + 4);
          id v198 = v196;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v199 = *(_OWORD *)v195;
          long long v200 = *((_OWORD *)v195 + 1);
          *((void *)v194 + 4) = *((void *)v195 + 4);
          *(_OWORD *)uint64_t v194 = v199;
          *((_OWORD *)v194 + 1) = v200;
        }
        *(void *)&v141[v10[8]] = *(void *)&v142[v10[8]];
        uint64_t v201 = v10[9];
        int v202 = &v141[v201];
        uint64_t v203 = &v142[v201];
        *(void *)int v202 = *(void *)v203;
        *((void *)v202 + 1) = *((void *)v203 + 1);
        v141[v10[10]] = v142[v10[10]];
        *(void *)&v141[v10[11]] = *(void *)&v142[v10[11]];
        uint64_t v204 = v10[12];
        uint64_t v205 = *(void **)&v142[v204];
        *(void *)&v141[v204] = v205;
        v141[v10[13]] = v142[v10[13]];
        uint64_t v206 = v10[14];
        uint64_t v207 = &v141[v206];
        v208 = &v142[v206];
        uint64_t v209 = type metadata accessor for Date();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v210 = v205;
        if (__swift_getEnumTagSinglePayload((uint64_t)v208, 1, v209))
        {
          uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v207, v208, *(void *)(*(void *)(v211 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 16))(v207, v208, v209);
          __swift_storeEnumTagSinglePayload((uint64_t)v207, 0, 1, v209);
        }
        uint64_t v5 = v283;
        uint64_t v212 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v213 = *(int *)(v212 + 20);
        long long v214 = &v207[v213];
        long long v215 = &v208[v213];
        if (__swift_getEnumTagSinglePayload((uint64_t)&v208[v213], 1, v209))
        {
          uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
          memcpy(v214, v215, *(void *)(*(void *)(v216 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v209 - 8) + 16))(v214, v215, v209);
          __swift_storeEnumTagSinglePayload((uint64_t)v214, 0, 1, v209);
        }
        a3 = v286;
        v207[*(int *)(v212 + 24)] = v208[*(int *)(v212 + 24)];
        v141[v10[15]] = v142[v10[15]];
        *(void *)&v141[v10[16]] = *(void *)&v142[v10[16]];
        swift_retain();
        __swift_storeEnumTagSinglePayload((uint64_t)v141, 0, 1, (uint64_t)v10);
        break;
      default:
        memcpy(v141, v142, *(void *)(*(void *)(v145 - 8) + 64));
        goto LABEL_100;
    }
    goto LABEL_140;
  }
LABEL_76:
  uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  memcpy(v141, v142, *(void *)(*(void *)(v147 - 8) + 64));
LABEL_141:
  memcpy((char *)v5 + a3[9], (char *)v4 + a3[9], 0x61uLL);
  return v5;
}

uint64_t initializeWithTake for InCallControlsActivityCellViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = a3[6];
  long long v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  long long v10 = (int *)type metadata accessor for Participant(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for Participant.State(0);
    uint64_t v77 = v3;
    uint64_t v79 = v4;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v20 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v8, v9, v20);
        goto LABEL_7;
      case 4u:
        uint64_t v13 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&v8[*(int *)(v14 + 48)], &v9[*(int *)(v14 + 48)], 0x150uLL);
        uint64_t v15 = *(int *)(v14 + 64);
        uint64_t v16 = &v8[v15];
        uint64_t v17 = &v9[v15];
        long long v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *((_OWORD *)v16 + 1) = v18;
        long long v19 = *((_OWORD *)v17 + 3);
        *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
        *((_OWORD *)v16 + 3) = v19;
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
        break;
    }
    uint64_t v21 = v10[5];
    uint64_t v22 = &v8[v21];
    long long v23 = &v9[v21];
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
    uint64_t v25 = v10[6];
    uint64_t v26 = &v8[v25];
    size_t v27 = &v9[v25];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    uint64_t v28 = v10[7];
    uint64_t v29 = &v8[v28];
    uint64_t v30 = &v9[v28];
    long long v31 = *((_OWORD *)v30 + 1);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v31;
    *((void *)v29 + 4) = *((void *)v30 + 4);
    *(void *)&v8[v10[8]] = *(void *)&v9[v10[8]];
    *(_OWORD *)&v8[v10[9]] = *(_OWORD *)&v9[v10[9]];
    v8[v10[10]] = v9[v10[10]];
    *(void *)&v8[v10[11]] = *(void *)&v9[v10[11]];
    *(void *)&v8[v10[12]] = *(void *)&v9[v10[12]];
    v8[v10[13]] = v9[v10[13]];
    uint64_t v32 = v10[14];
    uint64_t v33 = &v8[v32];
    long long v34 = &v9[v32];
    uint64_t v35 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
    }
    uint64_t v37 = type metadata accessor for Participant.CountdownInfo(0);
    uint64_t v38 = *(int *)(v37 + 20);
    size_t v39 = &v33[v38];
    long long v40 = &v34[v38];
    if (__swift_getEnumTagSinglePayload((uint64_t)&v34[v38], 1, v35))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v39, v40, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v35);
    }
    v33[*(int *)(v37 + 24)] = v34[*(int *)(v37 + 24)];
    v8[v10[15]] = v9[v10[15]];
    *(void *)&v8[v10[16]] = *(void *)&v9[v10[16]];
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
    uint64_t v3 = v77;
    uint64_t v4 = v79;
  }
  uint64_t v42 = v3[8];
  *(void *)(a1 + v3[7]) = *(void *)(v4 + v3[7]);
  long long v43 = (char *)(a1 + v42);
  uint64_t v44 = (char *)(v4 + v42);
  if (__swift_getEnumTagSinglePayload(v4 + v42, 1, (uint64_t)v10))
  {
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    uint64_t v46 = type metadata accessor for Participant.State(0);
    id v78 = v3;
    uint64_t v80 = v4;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v54 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v43, v44, v54);
        goto LABEL_21;
      case 4u:
        uint64_t v47 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v43, v44, v47);
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&v43[*(int *)(v48 + 48)], &v44[*(int *)(v48 + 48)], 0x150uLL);
        uint64_t v49 = *(int *)(v48 + 64);
        long long v50 = &v43[v49];
        long long v51 = &v44[v49];
        long long v52 = *((_OWORD *)v51 + 1);
        *(_OWORD *)long long v50 = *(_OWORD *)v51;
        *((_OWORD *)v50 + 1) = v52;
        long long v53 = *((_OWORD *)v51 + 3);
        *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
        *((_OWORD *)v50 + 3) = v53;
LABEL_21:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v43, v44, *(void *)(*(void *)(v46 - 8) + 64));
        break;
    }
    uint64_t v55 = v10[5];
    uint64_t v56 = &v43[v55];
    uint64_t v57 = &v44[v55];
    uint64_t v58 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(v56, v57, v58);
    uint64_t v59 = v10[6];
    int v60 = &v43[v59];
    uint64_t v61 = &v44[v59];
    *(_DWORD *)int v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    uint64_t v62 = v10[7];
    Swift::Bool v63 = &v43[v62];
    uint64_t v64 = &v44[v62];
    long long v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)Swift::Bool v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((void *)v63 + 4) = *((void *)v64 + 4);
    *(void *)&v43[v10[8]] = *(void *)&v44[v10[8]];
    *(_OWORD *)&v43[v10[9]] = *(_OWORD *)&v44[v10[9]];
    v43[v10[10]] = v44[v10[10]];
    *(void *)&v43[v10[11]] = *(void *)&v44[v10[11]];
    *(void *)&v43[v10[12]] = *(void *)&v44[v10[12]];
    v43[v10[13]] = v44[v10[13]];
    uint64_t v66 = v10[14];
    long long v67 = &v43[v66];
    long long v68 = &v44[v66];
    uint64_t v69 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v68, 1, v69))
    {
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v67, v68, *(void *)(*(void *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v67, v68, v69);
      __swift_storeEnumTagSinglePayload((uint64_t)v67, 0, 1, v69);
    }
    uint64_t v71 = type metadata accessor for Participant.CountdownInfo(0);
    uint64_t v72 = *(int *)(v71 + 20);
    uint64_t v73 = &v67[v72];
    uint64_t v74 = &v68[v72];
    if (__swift_getEnumTagSinglePayload((uint64_t)&v68[v72], 1, v69))
    {
      uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v73, v74, v69);
      __swift_storeEnumTagSinglePayload((uint64_t)v73, 0, 1, v69);
    }
    v67[*(int *)(v71 + 24)] = v68[*(int *)(v71 + 24)];
    v43[v10[15]] = v44[v10[15]];
    *(void *)&v43[v10[16]] = *(void *)&v44[v10[16]];
    __swift_storeEnumTagSinglePayload((uint64_t)v43, 0, 1, (uint64_t)v10);
    uint64_t v3 = v78;
    uint64_t v4 = v80;
  }
  memcpy((void *)(a1 + v3[9]), (const void *)(v4 + v3[9]), 0x61uLL);
  return a1;
}

uint64_t assignWithTake for InCallControlsActivityCellViewModel(uint64_t a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v6;
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v7 = *((_OWORD *)v4 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)v4 + 1);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v4[6];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)(a1 + v8);
  long long v10 = (char *)v4 + v8;
  uint64_t v11 = (int *)type metadata accessor for Participant(0);
  LODWORD(v6) = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v11);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)v11);
  if (v6)
  {
    if (!EnumTagSinglePayload)
    {
      uint64_t v13 = type metadata accessor for Participant.State(0);
      long long v175 = a3;
      uint64_t v177 = v4;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v23 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v9, v10, v23);
          goto LABEL_12;
        case 4u:
          uint64_t v16 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          memcpy(&v9[*(int *)(v17 + 48)], &v10[*(int *)(v17 + 48)], 0x150uLL);
          uint64_t v18 = *(int *)(v17 + 64);
          long long v19 = &v9[v18];
          uint64_t v20 = &v10[v18];
          long long v21 = *((_OWORD *)v20 + 1);
          *(_OWORD *)long long v19 = *(_OWORD *)v20;
          *((_OWORD *)v19 + 1) = v21;
          long long v22 = *((_OWORD *)v20 + 3);
          *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
          *((_OWORD *)v19 + 3) = v22;
LABEL_12:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
          break;
      }
      uint64_t v24 = v11[5];
      uint64_t v25 = &v9[v24];
      uint64_t v26 = &v10[v24];
      uint64_t v27 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
      uint64_t v28 = v11[6];
      uint64_t v29 = &v9[v28];
      uint64_t v30 = &v10[v28];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      uint64_t v31 = v11[7];
      uint64_t v32 = &v9[v31];
      uint64_t v33 = &v10[v31];
      long long v34 = *((_OWORD *)v33 + 1);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v34;
      *((void *)v32 + 4) = *((void *)v33 + 4);
      *(void *)&v9[v11[8]] = *(void *)&v10[v11[8]];
      *(_OWORD *)&v9[v11[9]] = *(_OWORD *)&v10[v11[9]];
      v9[v11[10]] = v10[v11[10]];
      *(void *)&v9[v11[11]] = *(void *)&v10[v11[11]];
      *(void *)&v9[v11[12]] = *(void *)&v10[v11[12]];
      v9[v11[13]] = v10[v11[13]];
      uint64_t v35 = v11[14];
      uint64_t v36 = &v9[v35];
      uint64_t v37 = &v10[v35];
      uint64_t v38 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      }
      uint64_t v40 = type metadata accessor for Participant.CountdownInfo(0);
      uint64_t v41 = *(int *)(v40 + 20);
      uint64_t v42 = &v36[v41];
      long long v43 = &v37[v41];
      if (__swift_getEnumTagSinglePayload((uint64_t)&v37[v41], 1, v38))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v42, v43, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v38);
      }
      v36[*(int *)(v40 + 24)] = v37[*(int *)(v40 + 24)];
      v9[v11[15]] = v10[v11[15]];
      *(void *)&v9[v11[16]] = *(void *)&v10[v11[16]];
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, (uint64_t)v11);
      goto LABEL_42;
    }
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_43;
  }
  if (EnumTagSinglePayload)
  {
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    goto LABEL_6;
  }
  if ((void *)a1 != v4)
  {
    outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v9, (void (*)(void))type metadata accessor for Participant.State);
    uint64_t v15 = type metadata accessor for Participant.State(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v52 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v9, v10, v52);
        goto LABEL_23;
      case 4u:
        uint64_t v45 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v9, v10, v45);
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&v9[*(int *)(v46 + 48)], &v10[*(int *)(v46 + 48)], 0x150uLL);
        uint64_t v47 = *(int *)(v46 + 64);
        uint64_t v48 = &v9[v47];
        uint64_t v49 = &v10[v47];
        long long v50 = *((_OWORD *)v49 + 1);
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = v50;
        long long v51 = *((_OWORD *)v49 + 3);
        *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
        *((_OWORD *)v48 + 3) = v51;
LABEL_23:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
        break;
    }
  }
  uint64_t v177 = v4;
  uint64_t v53 = v11[5];
  uint64_t v54 = &v9[v53];
  uint64_t v55 = &v10[v53];
  uint64_t v56 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 40))(v54, v55, v56);
  uint64_t v57 = v11[6];
  uint64_t v58 = &v9[v57];
  uint64_t v59 = &v10[v57];
  *uint64_t v58 = *v59;
  v58[1] = v59[1];
  v58[2] = v59[2];
  v58[3] = v59[3];
  v58[4] = v59[4];
  uint64_t v60 = v11[7];
  uint64_t v61 = (uint64_t)&v9[v60];
  uint64_t v62 = &v10[v60];
  Swift::Bool v63 = *(void **)&v9[v60];
  if (v63)
  {
    if (*(void *)v62)
    {
      *(void *)uint64_t v61 = *(void *)v62;

      *(void *)(v61 + 8) = *((void *)v62 + 1);
      *(unsigned char *)(v61 + 16) = v62[16];
      uint64_t v64 = *((void *)v62 + 4);
      *(void *)(v61 + 24) = *((void *)v62 + 3);
      *(void *)(v61 + 32) = v64;
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    outlined destroy of Participant.RemoteIdentifiers(v61);
  }
  long long v65 = *((_OWORD *)v62 + 1);
  *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
  *(_OWORD *)(v61 + 16) = v65;
  *(void *)(v61 + 32) = *((void *)v62 + 4);
LABEL_29:
  *(void *)&v9[v11[8]] = *(void *)&v10[v11[8]];
  swift_bridgeObjectRelease();
  uint64_t v66 = v11[9];
  long long v67 = &v9[v66];
  long long v68 = &v10[v66];
  uint64_t v70 = *(void *)v68;
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)long long v67 = v70;
  *((void *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  v9[v11[10]] = v10[v11[10]];
  *(void *)&v9[v11[11]] = *(void *)&v10[v11[11]];
  swift_bridgeObjectRelease();
  uint64_t v71 = v11[12];
  uint64_t v72 = *(void **)&v9[v71];
  *(void *)&v9[v71] = *(void *)&v10[v71];

  v9[v11[13]] = v10[v11[13]];
  uint64_t v73 = v11[14];
  uint64_t v74 = &v9[v73];
  uint64_t v75 = &v10[v73];
  uint64_t v76 = type metadata accessor for Date();
  int v77 = __swift_getEnumTagSinglePayload((uint64_t)v74, 1, v76);
  __src = v75;
  int v78 = __swift_getEnumTagSinglePayload((uint64_t)v75, 1, v76);
  long long v175 = a3;
  if (v77)
  {
    if (!v78)
    {
      uint64_t v79 = v75;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32))(v74, v75, v76);
      __swift_storeEnumTagSinglePayload((uint64_t)v74, 0, 1, v76);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  uint64_t v80 = *(void *)(v76 - 8);
  if (v78)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v76);
LABEL_34:
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v79 = v75;
    memcpy(v74, v75, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_35;
  }
  uint64_t v79 = v75;
  (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v74, v75, v76);
LABEL_35:
  uint64_t v82 = type metadata accessor for Participant.CountdownInfo(0);
  uint64_t v83 = *(int *)(v82 + 20);
  uint64_t v84 = &v74[v83];
  long long v85 = &v79[v83];
  int v86 = __swift_getEnumTagSinglePayload((uint64_t)&v74[v83], 1, v76);
  int v87 = __swift_getEnumTagSinglePayload((uint64_t)v85, 1, v76);
  if (!v86)
  {
    uint64_t v88 = *(void *)(v76 - 8);
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 40))(v84, v85, v76);
      goto LABEL_41;
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v84, v76);
    goto LABEL_40;
  }
  if (v87)
  {
LABEL_40:
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    memcpy(v84, v85, *(void *)(*(void *)(v89 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32))(v84, v85, v76);
  __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v76);
LABEL_41:
  v74[*(int *)(v82 + 24)] = __src[*(int *)(v82 + 24)];
  v9[v11[15]] = v10[v11[15]];
  *(void *)&v9[v11[16]] = *(void *)&v10[v11[16]];
  swift_release();
LABEL_42:
  a3 = v175;
  uint64_t v4 = v177;
LABEL_43:
  *(void *)(a1 + a3[7]) = *(void *)((char *)v4 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[8];
  long long v91 = (char *)(a1 + v90);
  uint64_t v92 = (char *)v4 + v90;
  int v93 = __swift_getEnumTagSinglePayload(a1 + v90, 1, (uint64_t)v11);
  int v94 = __swift_getEnumTagSinglePayload((uint64_t)v92, 1, (uint64_t)v11);
  if (!v93)
  {
    if (v94)
    {
      outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v91, (void (*)(void))type metadata accessor for Participant);
      goto LABEL_48;
    }
    if ((void *)a1 != v4)
    {
      outlined destroy of InCallControlsActivityCellViewModel((uint64_t)v91, (void (*)(void))type metadata accessor for Participant.State);
      uint64_t v97 = type metadata accessor for Participant.State(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 5u:
          uint64_t v134 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 32))(v91, v92, v134);
          goto LABEL_67;
        case 4u:
          uint64_t v127 = type metadata accessor for Date();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 32))(v91, v92, v127);
          uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          memcpy(&v91[*(int *)(v128 + 48)], &v92[*(int *)(v128 + 48)], 0x150uLL);
          uint64_t v129 = *(int *)(v128 + 64);
          uint64_t v130 = &v91[v129];
          uint64_t v131 = &v92[v129];
          long long v132 = *((_OWORD *)v131 + 1);
          *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
          *((_OWORD *)v130 + 1) = v132;
          long long v133 = *((_OWORD *)v131 + 3);
          *((_OWORD *)v130 + 2) = *((_OWORD *)v131 + 2);
          *((_OWORD *)v130 + 3) = v133;
LABEL_67:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v91, v92, *(void *)(*(void *)(v97 - 8) + 64));
          break;
      }
    }
    long long v178 = v4;
    uint64_t v135 = v11[5];
    int v136 = &v91[v135];
    int v137 = &v92[v135];
    uint64_t v138 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 40))(v136, v137, v138);
    uint64_t v139 = v11[6];
    uint64_t v140 = &v91[v139];
    id v141 = &v92[v139];
    *uint64_t v140 = *v141;
    v140[1] = v141[1];
    v140[2] = v141[2];
    v140[3] = v141[3];
    v140[4] = v141[4];
    uint64_t v142 = v11[7];
    uint64_t v143 = (uint64_t)&v91[v142];
    int v144 = &v92[v142];
    uint64_t v145 = *(void **)&v91[v142];
    if (v145)
    {
      if (*(void *)v144)
      {
        *(void *)uint64_t v143 = *(void *)v144;

        *(void *)(v143 + 8) = *((void *)v144 + 1);
        *(unsigned char *)(v143 + 16) = v144[16];
        uint64_t v146 = *((void *)v144 + 4);
        *(void *)(v143 + 24) = *((void *)v144 + 3);
        *(void *)(v143 + 32) = v146;
        swift_bridgeObjectRelease();
        goto LABEL_73;
      }
      outlined destroy of Participant.RemoteIdentifiers(v143);
    }
    long long v147 = *((_OWORD *)v144 + 1);
    *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
    *(_OWORD *)(v143 + 16) = v147;
    *(void *)(v143 + 32) = *((void *)v144 + 4);
LABEL_73:
    *(void *)&v91[v11[8]] = *(void *)&v92[v11[8]];
    swift_bridgeObjectRelease();
    uint64_t v148 = v11[9];
    uint64_t v149 = &v91[v148];
    uint64_t v150 = &v92[v148];
    uint64_t v152 = *(void *)v150;
    uint64_t v151 = *((void *)v150 + 1);
    *(void *)uint64_t v149 = v152;
    *((void *)v149 + 1) = v151;
    swift_bridgeObjectRelease();
    v91[v11[10]] = v92[v11[10]];
    *(void *)&v91[v11[11]] = *(void *)&v92[v11[11]];
    swift_bridgeObjectRelease();
    uint64_t v153 = v11[12];
    uint64_t v154 = *(void **)&v91[v153];
    *(void *)&v91[v153] = *(void *)&v92[v153];

    v91[v11[13]] = v92[v11[13]];
    uint64_t v155 = v11[14];
    long long v156 = &v91[v155];
    uint64_t v157 = &v92[v155];
    uint64_t v158 = type metadata accessor for Date();
    int v159 = __swift_getEnumTagSinglePayload((uint64_t)v156, 1, v158);
    __srca = v157;
    int v160 = __swift_getEnumTagSinglePayload((uint64_t)v157, 1, v158);
    uint64_t v176 = a3;
    if (v159)
    {
      if (!v160)
      {
        uint64_t v161 = v157;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v158 - 8) + 32))(v156, v157, v158);
        __swift_storeEnumTagSinglePayload((uint64_t)v156, 0, 1, v158);
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v162 = *(void *)(v158 - 8);
      if (!v160)
      {
        uint64_t v161 = v157;
        (*(void (**)(char *, char *, uint64_t))(v162 + 40))(v156, v157, v158);
LABEL_79:
        uint64_t v164 = type metadata accessor for Participant.CountdownInfo(0);
        uint64_t v165 = *(int *)(v164 + 20);
        long long v166 = &v156[v165];
        long long v167 = &v161[v165];
        int v168 = __swift_getEnumTagSinglePayload((uint64_t)&v156[v165], 1, v158);
        int v169 = __swift_getEnumTagSinglePayload((uint64_t)v167, 1, v158);
        if (v168)
        {
          if (!v169)
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v158 - 8) + 32))(v166, v167, v158);
            __swift_storeEnumTagSinglePayload((uint64_t)v166, 0, 1, v158);
LABEL_85:
            v156[*(int *)(v164 + 24)] = __srca[*(int *)(v164 + 24)];
            v91[v11[15]] = v92[v11[15]];
            *(void *)&v91[v11[16]] = *(void *)&v92[v11[16]];
            swift_release();
LABEL_86:
            a3 = v176;
            uint64_t v4 = v178;
            goto LABEL_87;
          }
        }
        else
        {
          uint64_t v170 = *(void *)(v158 - 8);
          if (!v169)
          {
            (*(void (**)(char *, char *, uint64_t))(v170 + 40))(v166, v167, v158);
            goto LABEL_85;
          }
          (*(void (**)(char *, uint64_t))(v170 + 8))(v166, v158);
        }
        uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(v166, v167, *(void *)(*(void *)(v171 - 8) + 64));
        goto LABEL_85;
      }
      (*(void (**)(char *, uint64_t))(v162 + 8))(v156, v158);
    }
    uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v161 = v157;
    memcpy(v156, v157, *(void *)(*(void *)(v163 - 8) + 64));
    goto LABEL_79;
  }
  if (!v94)
  {
    uint64_t v95 = type metadata accessor for Participant.State(0);
    uint64_t v176 = a3;
    long long v178 = v4;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        uint64_t v105 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 32))(v91, v92, v105);
        goto LABEL_54;
      case 4u:
        uint64_t v98 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 32))(v91, v92, v98);
        uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
        memcpy(&v91[*(int *)(v99 + 48)], &v92[*(int *)(v99 + 48)], 0x150uLL);
        uint64_t v100 = *(int *)(v99 + 64);
        uint64_t v101 = &v91[v100];
        uint64_t v102 = &v92[v100];
        long long v103 = *((_OWORD *)v102 + 1);
        *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v103;
        long long v104 = *((_OWORD *)v102 + 3);
        *((_OWORD *)v101 + 2) = *((_OWORD *)v102 + 2);
        *((_OWORD *)v101 + 3) = v104;
LABEL_54:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
        break;
    }
    uint64_t v106 = v11[5];
    uint64_t v107 = &v91[v106];
    uint64_t v108 = &v92[v106];
    uint64_t v109 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32))(v107, v108, v109);
    uint64_t v110 = v11[6];
    uint64_t v111 = &v91[v110];
    uint64_t v112 = &v92[v110];
    *(_DWORD *)uint64_t v111 = *(_DWORD *)v112;
    v111[4] = v112[4];
    uint64_t v113 = v11[7];
    uint64_t v114 = &v91[v113];
    long long v115 = &v92[v113];
    long long v116 = *((_OWORD *)v115 + 1);
    *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
    *((_OWORD *)v114 + 1) = v116;
    *((void *)v114 + 4) = *((void *)v115 + 4);
    *(void *)&v91[v11[8]] = *(void *)&v92[v11[8]];
    *(_OWORD *)&v91[v11[9]] = *(_OWORD *)&v92[v11[9]];
    v91[v11[10]] = v92[v11[10]];
    *(void *)&v91[v11[11]] = *(void *)&v92[v11[11]];
    *(void *)&v91[v11[12]] = *(void *)&v92[v11[12]];
    v91[v11[13]] = v92[v11[13]];
    uint64_t v117 = v11[14];
    uint64_t v118 = &v91[v117];
    uint64_t v119 = &v92[v117];
    uint64_t v120 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v119, 1, v120))
    {
      uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v118, v119, *(void *)(*(void *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 32))(v118, v119, v120);
      __swift_storeEnumTagSinglePayload((uint64_t)v118, 0, 1, v120);
    }
    uint64_t v122 = type metadata accessor for Participant.CountdownInfo(0);
    uint64_t v123 = *(int *)(v122 + 20);
    id v124 = &v118[v123];
    uint64_t v125 = &v119[v123];
    if (__swift_getEnumTagSinglePayload((uint64_t)&v119[v123], 1, v120))
    {
      uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(v124, v125, *(void *)(*(void *)(v126 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 32))(v124, v125, v120);
      __swift_storeEnumTagSinglePayload((uint64_t)v124, 0, 1, v120);
    }
    v118[*(int *)(v122 + 24)] = v119[*(int *)(v122 + 24)];
    v91[v11[15]] = v92[v11[15]];
    *(void *)&v91[v11[16]] = *(void *)&v92[v11[16]];
    __swift_storeEnumTagSinglePayload((uint64_t)v91, 0, 1, (uint64_t)v11);
    goto LABEL_86;
  }
LABEL_48:
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  memcpy(v91, v92, *(void *)(*(void *)(v96 - 8) + 64));
LABEL_87:
  memcpy((void *)(a1 + a3[9]), (char *)v4 + a3[9], 0x61uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for InCallControlsActivityCellViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C3531404);
}

uint64_t sub_1C3531404(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for InCallControlsActivityCellViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C35314A4);
}

void *sub_1C35314A4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 24);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for InCallControlsActivityCellViewModel()
{
  type metadata accessor for Participant?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for InCallControlsActivityCellViewModel.CellStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C35316ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InCallControlsActivityCellViewModel.CellStyle()
{
  return &type metadata for InCallControlsActivityCellViewModel.CellStyle;
}

uint64_t SharePlayAppCell.init(app:onTap:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v4;
  *(void *)(a4 + 32) = *(void *)(a1 + 32);
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  uint64_t v5 = (uint64_t *)(a4 + *(int *)(type metadata accessor for SharePlayAppCell() + 24));
  uint64_t *v5 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for SharePlayAppCell()
{
  uint64_t result = type metadata singleton initialization cache for SharePlayAppCell;
  if (!type metadata singleton initialization cache for SharePlayAppCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id SharePlayAppCell.app.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  id v6 = (id)v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t SharePlayAppCell.onTap.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

uint64_t SharePlayAppCell.icon.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for ColorScheme();
  uint64_t v6 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Image.ResizingMode();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = *(id *)(v1 + 32);
  Image.init(uiImage:)();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4F3EBF8], v8);
  uint64_t v17 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t KeyPath = swift_getKeyPath();
  id v19 = objc_msgSend(self, sel_mainScreen);
  id v20 = objc_msgSend(v19, sel_traitCollection);

  id v21 = objc_msgSend(v20, sel_userInterfaceStyle);
  long long v22 = (unsigned int *)MEMORY[0x1E4F3C5B8];
  if (v21 != (id)2) {
    long long v22 = (unsigned int *)MEMORY[0x1E4F3C5C0];
  }
  uint64_t v24 = v30;
  uint64_t v23 = v31;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v30, *v22, v31);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v5 + *(int *)(v3 + 36), v24, v23);
  uint64_t *v5 = KeyPath;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v5, (uint64_t)&v15[*(int *)(v13 + 44)], &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  *(void *)uint64_t v15 = v17;
  *((void *)v15 + 1) = 0x3FF0000000000000;
  *((_WORD *)v15 + 8) = 0;
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v5, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v24, v23);
  swift_release();
  static Platform.current.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v25 = v32;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v15, v32, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
  uint64_t v26 = (_OWORD *)(v25
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>)
                          + 36));
  long long v27 = v34;
  *uint64_t v26 = v33;
  v26[1] = v27;
  v26[2] = v35;
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v15, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>);
}

uint64_t SharePlayAppCell.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v16[1] = a1;
  uint64_t v3 = type metadata accessor for SharePlayAppCell();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier>);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  closure #1 in SharePlayAppCell.body.getter(v2, (uint64_t)v8);
  uint64_t v12 = *(void *)(v2 + 24);
  void v16[2] = *(void *)(v2 + 16);
  long long v16[3] = v12;
  lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>> and conformance <A> Group<A>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>);
  outlined init with copy of SharePlayAppCell(v2, (uint64_t)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = swift_allocObject();
  outlined init with take of SharePlayAppCell((uint64_t)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  View.onTapGesture(count:perform:)();
  swift_release();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier>);
}

uint64_t closure #1 in SharePlayAppCell.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>);
  MEMORY[0x1F4188790](v33);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>.Storage);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>);
  MEMORY[0x1F4188790](v30);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v28 = (uint64_t)&v28 - v12;
  uint64_t v13 = type metadata accessor for DynamicTypeSize();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  id v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  id v19 = (char *)&v28 - v18;
  type metadata accessor for SharePlayAppCell();
  uint64_t v20 = a1;
  specialized Environment.wrappedValue.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4F3CB38], v13);
  LOBYTE(a1) = static DynamicTypeSize.< infix(_:_:)();
  id v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v16, v13);
  v21(v19, v13);
  static Platform.current.getter();
  if (a1)
  {
    *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
    *((void *)v8 + 1) = 0x4020000000000000;
    unsigned char v8[16] = 0;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>);
    closure #1 in closure #1 in SharePlayAppCell.body.getter(v20, (uint64_t)&v8[*(int *)(v22 + 44)]);
    static Platform.current.getter();
    static Alignment.center.getter();
    specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v8, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>);
    uint64_t v23 = &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>;
    uint64_t v24 = v28;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v10, v28, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>);
    outlined init with copy of Environment<DynamicTypeSize>.Content(v24, v31, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>);
    _ConditionalContent<>.init(storage:)();
    uint64_t v25 = v24;
  }
  else
  {
    *(void *)uint64_t v4 = static VerticalAlignment.center.getter();
    *((void *)v4 + 1) = 0x4020000000000000;
    v4[16] = 0;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>);
    closure #2 in closure #1 in SharePlayAppCell.body.getter(v20, (uint64_t)&v4[*(int *)(v26 + 44)]);
    uint64_t v23 = &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>;
    outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v4, v31, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>);
    _ConditionalContent<>.init(storage:)();
    uint64_t v25 = (uint64_t)v4;
  }
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v25, v23);
}

unint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>> and conformance <A> Group<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>);
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>);
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t closure #1 in closure #1 in SharePlayAppCell.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = type metadata accessor for Font.Leading();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.lineLimit(_:reservesSpace:)>>.0);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v46 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>)
      - 8;
  MEMORY[0x1F4188790](v50);
  uint64_t v47 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)
      - 8;
  MEMORY[0x1F4188790](v49);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v48 = (uint64_t)&v43 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v45 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v44 = (uint64_t)&v43 - v17;
  SharePlayAppCell.icon.getter((uint64_t)&v43 - v17);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v54 = v18;
  uint64_t v55 = v19;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  static Font.caption2.getter();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F3E0F8], v3);
  Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v25 = Text.font(_:)();
  uint64_t v27 = v26;
  LOBYTE(v4) = v28;
  uint64_t v30 = v29;
  swift_release();
  LOBYTE(v4) = v4 & 1;
  outlined consume of Text.Storage(v20, v22, v24);
  swift_bridgeObjectRelease();
  uint64_t v54 = v25;
  uint64_t v55 = v27;
  char v56 = v4;
  uint64_t v57 = v30;
  uint64_t v31 = v46;
  View.lineLimit(_:reservesSpace:)();
  outlined consume of Text.Storage(v25, v27, v4);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = v51;
  uint64_t v33 = v52;
  uint64_t v35 = (uint64_t)v47;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v47, v31, v52);
  uint64_t v36 = v35 + *(int *)(v50 + 44);
  *(void *)uint64_t v36 = KeyPath;
  *(unsigned char *)(v36 + 8) = 1;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
  outlined init with copy of Environment<DynamicTypeSize>.Content(v35, (uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>);
  *(_WORD *)&v11[*(int *)(v49 + 44)] = 256;
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v35, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>);
  uint64_t v37 = v48;
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v11, v48, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>);
  uint64_t v39 = v44;
  uint64_t v38 = v45;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v44, v45, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  outlined init with copy of Environment<DynamicTypeSize>.Content(v37, (uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>);
  uint64_t v40 = v53;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v38, v53, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>));
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v11, v40 + *(int *)(v41 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v37, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v39, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v38, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
}

uint64_t closure #2 in closure #1 in SharePlayAppCell.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for Font.Leading();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v32 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v31 - v10;
  SharePlayAppCell.icon.getter((uint64_t)&v31 - v10);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v34 = v12;
  uint64_t v35 = v13;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  static Font.caption2.getter();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F3E0F8], v3);
  Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v19 = Text.font(_:)();
  uint64_t v21 = v20;
  LOBYTE(v4) = v22;
  uint64_t v24 = v23;
  swift_release();
  char v25 = v4 & 1;
  outlined consume of Text.Storage(v14, v16, v18);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v27 = v32;
  outlined init with copy of Environment<DynamicTypeSize>.Content((uint64_t)v11, v32, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  uint64_t v28 = v33;
  outlined init with copy of Environment<DynamicTypeSize>.Content(v27, v33, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  uint64_t v29 = v28
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>))
               + 48);
  *(void *)uint64_t v29 = v19;
  *(void *)(v29 + 8) = v21;
  *(unsigned char *)(v29 + 16) = v25;
  *(void *)(v29 + 24) = v24;
  *(void *)(v29 + 32) = KeyPath;
  *(void *)(v29 + 40) = 2;
  *(unsigned char *)(v29 + 48) = 0;
  *(_WORD *)(v29 + 49) = 256;
  outlined copy of Text.Storage(v19, v21, v25);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
  outlined consume of Text.Storage(v19, v21, v25);
  swift_release();
  swift_bridgeObjectRelease();
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v27, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>);
}

uint64_t outlined init with copy of SharePlayAppCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharePlayAppCell();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3532CDC()
{
  uint64_t v1 = (int *)(type metadata accessor for SharePlayAppCell() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v3 = v2 + v1[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for DynamicTypeSize();
    OUTLINED_FUNCTION_0();
    (*(void (**)(uint64_t))(v4 + 8))(v3);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SharePlayAppCell.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for SharePlayAppCell() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v3 = *(uint64_t (**)(_OWORD *))(v2 + 40);
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  uint64_t v7 = *(void *)(v2 + 32);
  return v3(v6);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>> and conformance <A> Group<A>();
    lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SharePlayAppCell()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for SharePlayAppCell(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[6];
    long long v15 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v15;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    *(void *)(a1 + 48) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v11 = (id)v15;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SharePlayAppCell(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DynamicTypeSize();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for SharePlayAppCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v13;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = (id)v13;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for SharePlayAppCell(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)a2[4];
  uint64_t v7 = (void *)a1[4];
  a1[4] = v6;
  id v8 = v6;

  uint64_t v9 = a2[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)a1 + v10, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for SharePlayAppCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for SharePlayAppCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (const void *)(a2 + v9);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1 + v9, &demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SharePlayAppCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C35335D4);
}

uint64_t sub_1C35335D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SharePlayAppCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3533674);
}

uint64_t sub_1C3533674(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<DynamicTypeSize>);
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SharePlayAppCell()
{
  type metadata accessor for Environment<DynamicTypeSize>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<DynamicTypeSize>.Content()
{
  if (!lazy cache variable for type metadata for Environment<DynamicTypeSize>.Content)
  {
    type metadata accessor for DynamicTypeSize();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<DynamicTypeSize>.Content);
    }
  }
}

uint64_t sub_1C35337F4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier>);
  lazy protocol witness table accessor for type ModifiedContent<Group<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<<<opaque return type of View.lineLimit(_:reservesSpace:)>>.0, _EnvironmentKeyWritingModifier<TextAlignment>>, _FixedSizeLayout>)>>, _FlexFrameLayout>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Image, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<ColorScheme>>, _FrameLayout>, ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _FixedSizeLayout>)>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  return swift_getOpaqueTypeConformance2();
}

uint64_t ParticipantAvatar.init(_:colorStyle:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v10 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v13 = v12 - v11;
  int v14 = *a2;
  outlined init with copy of Participant?(a1, v12 - v11);
  if (__swift_getEnumTagSinglePayload(v13, 1, v6) != 1)
  {
    uint64_t v23 = *(void **)(v13 + *(int *)(v6 + 28));
    int v47 = v14;
    uint64_t v46 = a1;
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = outlined bridged method (pb) of @objc TUHandle.siriDisplayName.getter(v24);
      if (v26)
      {
        uint64_t v27 = v25;
        uint64_t v28 = v26;
        if (objc_msgSend(v24, sel_shouldHideContact))
        {
          uint64_t v45 = v27;
          uint64_t v29 = type metadata accessor for PersonNameComponents();
          uint64_t v44 = &v43;
          uint64_t v30 = *(void *)(v29 - 8);
          MEMORY[0x1F4188790](v29);
          OUTLINED_FUNCTION_21();
          uint64_t v33 = v32 - v31;
          swift_bridgeObjectRetain();
          PersonNameComponents.init()();
          PersonNameComponents.givenName.setter();
          PersonNameComponents.familyName.setter();
          uint64_t v43 = v28;
          if (one-time initialization token for initials != -1) {
            swift_once();
          }
          swift_beginAccess();
          id v34 = (id)static NSPersonNameComponentsFormatter.initials;
          Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
          id v36 = objc_msgSend(v34, sel_stringFromPersonNameComponents_, isa);

          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;

          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v29);
          uint64_t v48 = v37;
          uint64_t v49 = v39;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v21 = StringProtocol.localizedUppercase.getter();
          uint64_t v22 = v40;

          swift_bridgeObjectRelease();
          id v16 = 0;
          uint64_t v17 = v45;
          uint64_t v19 = v45;
          uint64_t v18 = v43;
          uint64_t v20 = v43;
          goto LABEL_12;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    outlined init with copy of Participant(v13, v9);
    swift_retain();
    ParticipantContactDetailsCache.contactDetails(for:)();
    id v16 = v50;
    uint64_t v18 = v52;
    uint64_t v19 = v53;
    uint64_t v20 = v54;
    uint64_t v44 = v55;
    uint64_t v45 = v51;
    uint64_t v22 = v56;
    id v41 = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v17 = v51;
    swift_release();
    uint64_t v42 = v9;
    uint64_t v21 = (uint64_t)v55;
    outlined destroy of Participant(v42);
LABEL_12:
    outlined destroy of Participant?(v46);
    uint64_t result = outlined destroy of Participant(v13);
    LOBYTE(v14) = v47;
    goto LABEL_13;
  }
  outlined destroy of Participant?(a1);
  uint64_t result = outlined destroy of Participant?(v13);
  id v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
LABEL_13:
  *(void *)a3 = v16;
  *(void *)(a3 + 8) = v17;
  *(void *)(a3 + 16) = v18;
  *(void *)(a3 + 24) = v19;
  *(void *)(a3 + 32) = v20;
  *(void *)(a3 + 40) = v21;
  *(void *)(a3 + 48) = v22;
  *(unsigned char *)(a3 + 56) = v14;
  return result;
}

uint64_t outlined init with copy of Participant?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *ParticipantContactView.__allocating_init(colorStyle:)(unsigned __int8 *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ParticipantContactView.init(colorStyle:)(a1);
}

void ParticipantContactView.gradient.setter(uint64_t a1)
{
}

void ParticipantContactView.contactDetails.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[3];
  long long v9 = *((_OWORD *)a1 + 2);
  long long v10 = *(_OWORD *)(a1 + 1);
  uint64_t v4 = a1[6];
  uint64_t v5 = v1 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails;
  swift_beginAccess();
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  *(void *)uint64_t v5 = v2;
  *(_OWORD *)(v5 + 8) = v10;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = v9;
  *(void *)(v5 + 48) = v4;
  outlined consume of ParticipantContactDetails?(v6, v7, v8);
  ParticipantContactView.contactDetails.didset();
}

void *ParticipantContactView.contactDetails.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_1_131();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return outlined copy of ParticipantContactDetails?(v2, v3, v4);
}

void *key path getter for ParticipantContactView.contactDetails : ParticipantContactView@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails;
  swift_beginAccess();
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  *a2 = *(void *)v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  return outlined copy of ParticipantContactDetails?(v4, v5, v6);
}

void key path setter for ParticipantContactView.contactDetails : ParticipantContactView(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  v7[0] = *(void **)a1;
  v7[1] = v1;
  v7[2] = v2;
  long long v7[3] = v3;
  uint64_t v7[4] = v4;
  v7[5] = v5;
  void v7[6] = v6;
  outlined copy of ParticipantContactDetails?(v7[0], (uint64_t)v1, (uint64_t)v2);
  ParticipantContactView.contactDetails.setter((uint64_t *)v7);
}

void ParticipantContactView.contactDetails.didset()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails;
  swift_beginAccess();
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  v9[0] = v2;
  v9[1] = v3;
  _OWORD v9[2] = v4;
  long long v9[3] = v5;
  v9[4] = v6;
  v9[5] = v7;
  v9[6] = v8;
  outlined copy of ParticipantContactDetails?(v2, v3, v4);
  ParticipantContactView.updateViews(using:)((uint64_t)v9);
  outlined consume of ParticipantContactDetails?(v2, v3, v4);
}

id ParticipantContactView.updateViews(using:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    id v16 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactMonogram];
    MonogramView.text.setter(0, 0xE000000000000000);
    uint64_t v17 = *(void **)&v1[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView];
    uint64_t v18 = (void *)specialized static UIImage.image(named:)(6);
    objc_msgSend(v17, sel_setImage_, v18);

    id v19 = objc_msgSend(v17, sel_layer);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v22 = CAFilter.__allocating_init(type:)(v20, v21);
    objc_msgSend(v19, sel_setCompositingFilter_, v22);

    objc_msgSend(v17, sel_setHidden_, 0);
    objc_msgSend(v16, sel_setHidden_, 1);
    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView], sel_setHidden_, 0);
    goto LABEL_27;
  }
  id v5 = *(id *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v8 = one-time initialization token for shared;
  id v52 = *(id *)a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  char v9 = (*(uint64_t (**)(void))(*(void *)static Defaults.shared + 616))();
  char v10 = v9;
  uint64_t v51 = v4;
  if (v5)
  {
    id v11 = objc_msgSend(v52, sel_thumbnailImageData);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v15 = 0xF000000000000000;
    }
    if (v10) {
      goto LABEL_12;
    }
LABEL_9:
    outlined consume of Data?(v13, v15);
LABEL_13:
    uint64_t v23 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactMonogram];
    if (v5)
    {
      id v24 = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v25 = String.count.getter();
      uint64_t v26 = v51;
      outlined consume of ParticipantContactDetails?(v5, v51, v3);
      if ((unint64_t)(v25 - 1) > 1)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0xE000000000000000;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = v7;
        uint64_t v28 = v6;
      }
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0xE000000000000000;
      uint64_t v26 = v51;
    }
    id v49 = v23;
    MonogramView.text.setter(v27, v28);
    uint64_t v32 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView];
    if (v5
      && (id v33 = v52,
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRetain(),
          uint64_t v34 = String.count.getter(),
          outlined consume of ParticipantContactDetails?(v5, v26, v3),
          (unint64_t)(v34 - 1) < 2))
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = (void *)specialized static UIImage.image(named:)(6);
    }
    objc_msgSend(v32, sel_setImage_, v35, v49);

    id v36 = objc_msgSend(v32, sel_layer);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v39 = CAFilter.__allocating_init(type:)(v37, v38);
    objc_msgSend(v36, sel_setCompositingFilter_, v39);

    uint64_t v40 = &selRef_ringButton;
    if (v5)
    {
      id v41 = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v42 = String.count.getter();
      outlined consume of ParticipantContactDetails?(v5, v51, v3);
      unint64_t v43 = v42 - 1;
      uint64_t v26 = v51;
      objc_msgSend(v32, sel_setHidden_, v43 < 2);
      id v44 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v45 = String.count.getter();
      outlined consume of ParticipantContactDetails?(v5, v51, v3);
      unint64_t v46 = v45 - 3;
      uint64_t v40 = &selRef_ringButton;
      BOOL v47 = v46 < 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      objc_msgSend(v32, sel_setHidden_, 0);
      BOOL v47 = 1;
    }
    objc_msgSend(v50, v40[190], v47);
    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView], v40[190], 0);
    outlined consume of ParticipantContactDetails?(v5, v26, v3);
    goto LABEL_27;
  }
  uint64_t v13 = 0;
  unint64_t v15 = 0xF000000000000000;
  if ((v9 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  if (v15 >> 60 == 15) {
    goto LABEL_13;
  }
  uint64_t v29 = *(void **)&v2[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  outlined copy of Data._Representation(v13, v15);
  outlined copy of Data._Representation(v13, v15);
  id v30 = UIImage.__allocating_init(data:)(v13, v15);
  objc_msgSend(v29, sel_setImage_, v30);

  id v31 = objc_msgSend(v29, sel_layer);
  objc_msgSend(v31, sel_setCompositingFilter_, 0);

  objc_msgSend(v29, sel_setHidden_, 0);
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactMonogram], sel_setHidden_, 1);
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView], sel_setHidden_, 1);
  outlined consume of ParticipantContactDetails?(v5, v51, v3);
  outlined consume of Data?(v13, v15);
  outlined consume of Data?(v13, v15);
LABEL_27:
  objc_msgSend(v2, sel_setNeedsLayout);
  return objc_msgSend(v2, sel_layoutIfNeeded);
}

void (*ParticipantContactView.contactDetails.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ParticipantContactView.contactDetails.modify;
}

void ParticipantContactView.contactDetails.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    ParticipantContactView.contactDetails.didset();
  }
}

uint64_t ParticipantContactView.gradient.getter()
{
  return swift_bridgeObjectRetain();
}

void key path setter for ParticipantContactView.gradient : ParticipantContactView()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  ParticipantContactView.gradient.setter(v0);
}

void (*ParticipantContactView.gradient.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = ParticipantContactView.gradient.getter();
  return ParticipantContactView.gradient.modify;
}

void ParticipantContactView.gradient.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    GradientView.colors.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    GradientView.colors.setter(*a1);
  }
}

char *ParticipantContactView.init(colorStyle:)(unsigned __int8 *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unsigned __int8 v4 = *a1;
  uint64_t v5 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView;
  id v6 = objc_allocWithZone((Class)type metadata accessor for GradientView());
  uint64_t v7 = v1;
  *(void *)&v1[v5] = objc_msgSend(v6, sel_init);
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView;
  *(void *)&v7[v8] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  char v9 = &v7[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails];
  *((void *)v9 + 6) = 0;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)char v9 = 0u;
  unsigned __int8 v29 = v4;
  id v10 = objc_allocWithZone((Class)type metadata accessor for MonogramView());
  *(void *)&v7[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactMonogram] = MonogramView.init(colorStyle:)(&v29);

  v28.receiver = v7;
  v28.super_class = ObjectType;
  id v11 = (char *)objc_msgSendSuper2(&v28, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView];
  uint64_t v13 = v11;
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView;
  id v15 = *(id *)&v13[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView];
  id v16 = (void *)specialized static UIImage.image(named:)(6);
  objc_msgSend(v15, sel_setImage_, v16);

  if (v4)
  {
    OUTLINED_FUNCTION_4_111();
    uint64_t v17 = one-time initialization token for overlayContent;
    uint64_t v18 = v13;
    if (v17 != -1) {
      swift_once();
    }
    objc_msgSend(v18, sel_setBackgroundColor_, static Colors.ParticipantViews.overlayContent);

    id v19 = *(void **)&v13[v14];
    uint64_t v20 = self;
    uint64_t v21 = v19;
    id v22 = objc_msgSend(v20, sel_whiteColor);
    objc_msgSend(v21, sel_setTintColor_, v22);
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_4_111();
  OUTLINED_FUNCTION_4_111();
  uint64_t v23 = one-time initialization token for contactMonogramIcon;
  id v24 = *(id *)&v13[v14];
  if (v23 != -1) {
    swift_once();
  }
  objc_msgSend(v24, sel_setTintColor_, static Colors.ParticipantViews.contactMonogramIcon);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 320))() & 1) == 0)
  {
    uint64_t v21 = v13;
    id v22 = objc_msgSend(v21, sel_layer);
    closure #1 in ParticipantContactView.init(colorStyle:)(v22);
LABEL_11:
  }
  OUTLINED_FUNCTION_4_111();
  uint64_t v25 = v13;
  id v26 = objc_msgSend(v25, sel_layer);
  objc_msgSend(v26, sel_setShadowPathIsBounds_, 1);

  return v25;
}

id closure #1 in ParticipantContactView.init(colorStyle:)(void *a1)
{
  if (one-time initialization token for shadow != -1) {
    swift_once();
  }
  id v2 = objc_msgSend((id)static Colors.ParticipantViews.shadow, sel_CGColor);
  objc_msgSend(a1, sel_setShadowColor_, v2);

  objc_msgSend(a1, sel_setShadowRadius_, 25.0);
  LODWORD(v3) = 1062501089;
  return objc_msgSend(a1, sel_setShadowOpacity_, v3);
}

id ParticipantContactView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ParticipantContactView.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView;
  *(void *)(v0 + v1) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GradientView()), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView;
  *(void *)(v0 + v2) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  OUTLINED_FUNCTION_0_104(OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id ParticipantContactView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ParticipantContactView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView;
  *(void *)(v0 + v1) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GradientView()), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView;
  *(void *)(v0 + v2) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  OUTLINED_FUNCTION_0_104(OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails);
  OUTLINED_FUNCTION_2_113();
  __break(1u);
}

id ParticipantContactView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ParticipantContactView.init(frame:)()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView;
  *(void *)(v0 + v1) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GradientView()), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView;
  *(void *)(v0 + v2) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1838]), sel_init);
  OUTLINED_FUNCTION_0_104(OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails);
  OUTLINED_FUNCTION_2_113();
  __break(1u);
}

Swift::Void __swiftcall ParticipantContactView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  ParticipantContactView._layout()();
}

void ParticipantContactView._layout()()
{
  uint64_t v1 = (uint64_t)v0;
  objc_msgSend(v0, sel_bounds);
  if (!CGRectIsInfinite(v20) || (objc_msgSend(v0, sel_bounds), !CGRectIsEmpty(v21)))
  {
    objc_msgSend(v0, sel_bounds);
    double v3 = v2;
    double v5 = v4;
    id v6 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView];
    id v7 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_gradientView), sel_superview);

    if (v5 >= v3) {
      double v8 = v3;
    }
    else {
      double v8 = v5;
    }
    double v9 = v8 * 0.5;
    if (v7) {
      id v10 = v6;
    }
    else {
      id v10 = (void *)v1;
    }
    id v11 = objc_msgSend(v10, sel_layer);
    objc_msgSend(v11, sel_setCornerRadius_, v9);

    objc_msgSend(v6, sel_setFrame_, 0.0, 0.0, v3, v5);
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactMonogram), sel_setFrame_, 0.0, 0.0, v3, v5);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if (((*(uint64_t (**)(void))(*(void *)static Defaults.shared + 616))() & 1) != 0
      && (uint64_t v12 = (void *)(v1 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactDetails),
          swift_beginAccess(),
          v12[2])
      && *v12)
    {
      uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView);
      objc_msgSend(v13, sel_setFrame_, 0.0, 0.0, v3, v5);
      id v14 = objc_msgSend(v13, sel_layer);
      closure #2 in ParticipantContactView._layout()(v14, v1);
    }
    else
    {
      id v15 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView);
      v22.origin.x = 0.0;
      v22.origin.y = 0.0;
      v22.size.double width = v3;
      v22.size.double height = v5;
      CGFloat v16 = fmax(floor(v3 * 0.04), 1.0);
      CGRect v23 = CGRectInset(v22, v16, v16);
      double width = v23.size.width;
      double height = v23.size.height;
      v23.origin.x = 0.0;
      v23.origin.y = 0.0;
      v23.size.double width = v3;
      v23.size.double height = v5;
      CGFloat v19 = CGRectGetMidX(v23) - width * 0.5;
      v24.origin.x = 0.0;
      v24.origin.y = 0.0;
      v24.size.double width = v3;
      v24.size.double height = v5;
      objc_msgSend(v15, sel_setFrame_, v19, CGRectGetMidY(v24) - height * 0.5, width, height);
      id v14 = objc_msgSend(v15, sel_layer);
      objc_msgSend(v14, sel_setMasksToBounds_, 0);
      objc_msgSend(v14, sel_setCornerRadius_, 0.0);
    }
  }
}

id closure #2 in ParticipantContactView._layout()(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_setMasksToBounds_, 1);
  objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC15ConversationKit22ParticipantContactView_contactImageView), sel_frame);
  double v4 = CGRectGetHeight(v7) * 0.5;
  return objc_msgSend(a1, sel_setCornerRadius_, v4);
}

id ParticipantContactView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *ParticipantAvatar.contactDetails.getter()
{
  uint64_t v0 = (void *)OUTLINED_FUNCTION_1_131();
  *objc_super v2 = v0;
  v2[1] = v1;
  _OWORD v2[2] = v3;
  v2[3] = v4;
  v2[4] = v5;
  v2[5] = v6;
  v2[6] = v7;
  return outlined copy of ParticipantContactDetails?(v0, v1, v3);
}

__n128 ParticipantAvatar.contactDetails.setter(long long *a1)
{
  long long v8 = a1[1];
  long long v9 = *a1;
  __n128 v7 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_1_131();
  outlined consume of ParticipantContactDetails?(v3, v4, v5);
  *(_OWORD *)uint64_t v1 = v9;
  *(_OWORD *)(v1 + 16) = v8;
  __n128 result = v7;
  *(__n128 *)(v1 + 32) = v7;
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t (*ParticipantAvatar.contactDetails.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

void ParticipantAvatar.colorStyle.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 56);
}

unsigned char *ParticipantAvatar.colorStyle.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 56) = *result;
  return result;
}

uint64_t (*ParticipantAvatar.colorStyle.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

__n128 ParticipantAvatar.init(contactDetails:colorStyle:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v4 = *a2;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a3 + 32) = result;
  *(void *)(a3 + 48) = v3;
  *(unsigned char *)(a3 + 56) = v4;
  return result;
}

char *ParticipantAvatar.makeUIView(context:)()
{
  unsigned __int8 v3 = *(unsigned char *)(v0 + 56);
  id v1 = objc_allocWithZone((Class)type metadata accessor for ParticipantContactView());
  return ParticipantContactView.init(colorStyle:)(&v3);
}

void ParticipantAvatar.updateUIView(_:context:)()
{
  v6[0] = (void *)OUTLINED_FUNCTION_1_131();
  v6[1] = v0;
  _OWORD v6[2] = v1;
  v6[3] = v2;
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v5;
  outlined copy of ParticipantContactDetails?(v6[0], (uint64_t)v0, (uint64_t)v1);
  ParticipantContactView.contactDetails.setter((uint64_t *)v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ParticipantAvatar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ParticipantAvatar and conformance ParticipantAvatar();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ParticipantAvatar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ParticipantAvatar and conformance ParticipantAvatar();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance ParticipantAvatar()
{
}

uint64_t type metadata accessor for ParticipantContactView()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type ParticipantAvatar and conformance ParticipantAvatar()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantAvatar and conformance ParticipantAvatar;
  if (!lazy protocol witness table cache variable for type ParticipantAvatar and conformance ParticipantAvatar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantAvatar and conformance ParticipantAvatar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticipantAvatar and conformance ParticipantAvatar;
  if (!lazy protocol witness table cache variable for type ParticipantAvatar and conformance ParticipantAvatar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantAvatar and conformance ParticipantAvatar);
  }
  return result;
}

uint64_t sub_1C35356D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ParticipantContactView.gradient.getter();
  *a1 = result;
  return result;
}

uint64_t method lookup function for ParticipantContactView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantContactView);
}

uint64_t dispatch thunk of ParticipantContactView.__allocating_init(colorStyle:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t destroy for ParticipantAvatar(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    unsigned __int8 v3 = *(void **)a1;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ParticipantAvatar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    long long v5 = *(void **)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v7;
    uint64_t v9 = *(void *)(a2 + 40);
    uint64_t v10 = *(void *)(a2 + 48);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    id v11 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for ParticipantAvatar(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (*(void *)(a1 + 16))
  {
    if (v4)
    {
      long long v5 = *(void **)a1;
      uint64_t v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v7 = v6;

      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ParticipantContactDetails(a1);
      long long v11 = a2[1];
      long long v10 = a2[2];
      long long v12 = *a2;
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)a1 = v12;
    }
  }
  else if (v4)
  {
    uint64_t v8 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    id v9 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v13 = *a2;
    long long v14 = a2[1];
    long long v15 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)a1 = v13;
  }
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  return a1;
}

uint64_t outlined destroy of ParticipantContactDetails(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for ParticipantAvatar(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    outlined destroy of ParticipantContactDetails(a1);
LABEL_5:
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    goto LABEL_6;
  }
  long long v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantAvatar(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantAvatar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantAvatar()
{
  return &type metadata for ParticipantAvatar;
}

uint64_t *CollaborationImageFetcher.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static CollaborationImageFetcher.shared;
}

void IMCoreCollaborationImageProvider.fetchCollaborationImage(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)MEMORY[0x1C87730B0]();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.default.getter();
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  OUTLINED_FUNCTION_5_3();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_5_1();
  DispatchQoS.qosClass.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  DispatchQoS.QoSClass.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v4, v14);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v18 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  aBlock[4] = partial apply for closure #1 in IMCoreCollaborationImageProvider.fetchCollaborationImage(for:completion:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [Any]?) -> ();
  aBlock[3] = &block_descriptor_92;
  CGRect v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  IMSPIQueryMessageWithGUIDAndLoadAttachmentsWithQOS();

  _Block_release(v20);
}

void closure #1 in IMCoreCollaborationImageProvider.fetchCollaborationImage(for:completion:)(uint64_t a1, void (*a2)(id))
{
  if (!a1) {
    goto LABEL_15;
  }
  specialized _arrayConditionalCast<A, B>(_:)(a1);
  if (!v3) {
    goto LABEL_15;
  }
  unint64_t v4 = v3;
  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    a2(0);
    return;
  }
LABEL_5:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v4 & 0xC000000000000001) == 0, v4);
  if ((v4 & 0xC000000000000001) != 0) {
    id v5 = (id)MEMORY[0x1C87744F0](0, v4);
  }
  else {
    id v5 = *(id *)(v4 + 32);
  }
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v6, sel_richLinkMetadata);

  if (!v7) {
    goto LABEL_15;
  }
  id v8 = objc_msgSend(v7, sel_image);

  if (!v8) {
    goto LABEL_15;
  }
  id v9 = objc_msgSend(v8, sel_platformImage);

  if (!v9) {
    goto LABEL_15;
  }
  id v10 = v9;
  a2(v9);
}

uint64_t IMCoreCollaborationImageProvider.deinit()
{
  return v0;
}

uint64_t IMCoreCollaborationImageProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t IMCoreCollaborationImageProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t IMCoreCollaborationImageProvider.init()()
{
  return v0;
}

uint64_t protocol witness for CollaborationImageProvider.fetchCollaborationImage(for:completion:) in conformance IMCoreCollaborationImageProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_1C353602C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in IMCoreCollaborationImageProvider.fetchCollaborationImage(for:completion:)(uint64_t a1)
{
  closure #1 in IMCoreCollaborationImageProvider.fetchCollaborationImage(for:completion:)(a1, *(void (**)(id))(v1 + 16));
}

uint64_t CollaborationImageFetcher.__allocating_init(provider:)(uint64_t a1)
{
  return CollaborationImageFetcher.__allocating_init(provider:)(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))specialized CollaborationImageFetcher.__allocating_init(provider:));
}

uint64_t static CollaborationImageFetcher.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t CollaborationImageFetcher.provider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IDSLookupManager(v1 + 16, a1);
}

uint64_t CollaborationImageFetcher.init(provider:)(uint64_t a1)
{
  return CollaborationImageFetcher.__allocating_init(provider:)(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))specialized CollaborationImageFetcher.init(provider:));
}

uint64_t CollaborationImageFetcher.__allocating_init(provider:)(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  OUTLINED_FUNCTION_5_3();
  __n128 v8 = MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v11 + 16))(v10, v8);
  uint64_t v12 = a2(v10, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

UIImage_optional __swiftcall CollaborationImageFetcher.image(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_5_3();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_63();
  uint64_t v9 = *(void **)(v1 + 56);
  *uint64_t v2 = v9;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v2, *MEMORY[0x1E4FBCBE8], v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = (objc_class *)(*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v2, v5);
  if (v9)
  {
    swift_beginAccess();
    uint64_t v13 = *(void *)(v1 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = specialized Dictionary.subscript.getter(countAndFlagsBits, (uint64_t)object, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14 == 1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (objc_class *)v14;
    }
  }
  else
  {
    __break(1u);
  }
  result.value.super.Class isa = v11;
  result.is_nil = v12;
  return result;
}

uint64_t CollaborationImageFetcher.startTrackingCollaborations(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with copy of IDSLookupManager(a1, (uint64_t)v17);
  uint64_t v7 = (void *)swift_allocObject();
  outlined init with take of Notice(v17, (uint64_t)(v7 + 2));
  v7[7] = v4;
  v7[8] = a2;
  v7[9] = a3;
  aBlock[4] = partial apply for closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:);
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6_7;
  uint64_t v8 = _Block_copy(aBlock);
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_63();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_5_1();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_5_107();
  OUTLINED_FUNCTION_3_124();
  _Block_release(v8);
  uint64_t v11 = OUTLINED_FUNCTION_4_112();
  v12(v11);
  uint64_t v13 = OUTLINED_FUNCTION_6_107();
  v14(v13);
  return swift_release();
}

uint64_t closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  Conversation.currentCollaboration.getter(v14, v15, (uint64_t)v13);
  outlined init with copy of Collaboration?((uint64_t)v13, (uint64_t)v10);
  uint64_t v16 = type metadata accessor for Collaboration(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v16) == 1)
  {
    uint64_t v17 = outlined destroy of Collaboration?((uint64_t)v10);
LABEL_6:
    (*(void (**)(uint64_t))(*a2 + 152))(v17);
    return outlined destroy of Collaboration?((uint64_t)v13);
  }
  uint64_t v19 = *((void *)v10 + 11);
  uint64_t v18 = *((void *)v10 + 12);
  swift_bridgeObjectRetain();
  uint64_t v17 = outlined destroy of Collaboration((uint64_t)v10);
  if (!v18) {
    goto LABEL_6;
  }
  swift_beginAccess();
  uint64_t v20 = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CGRect v21 = (void *)specialized Dictionary.subscript.getter(v19, v18, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of UIView??(v21);
  if (v21 == (void *)1)
  {
    (*(void (**)(void))(*a2 + 152))();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    CGRect v22 = (void *)specialized Dictionary._Variant.removeValue(forKey:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    outlined consume of UIView??(v22);
    uint64_t v23 = a2[6];
    uint64_t v29 = a2[5];
    __swift_project_boxed_opaque_existential_1(a2 + 2, v29);
    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    uint64_t v25 = (void *)swift_allocObject();
    void v25[2] = v24;
    v25[3] = v19;
    v25[4] = v18;
    v25[5] = a3;
    void v25[6] = a4;
    id v26 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), void *, uint64_t, uint64_t))(v23 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v26(v19, v18, partial apply for closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:), v25, v29, v23);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of Collaboration?((uint64_t)v13);
    return swift_release();
  }
  else
  {
    outlined destroy of Collaboration?((uint64_t)v13);
    return swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v26 = *(id *)(result + 56);
    swift_release();
    uint64_t v13 = (void *)swift_allocObject();
    _OWORD v13[2] = a2;
    void v13[3] = a3;
    uint64_t v13[4] = a4;
    v13[5] = a1;
    v13[6] = a5;
    v13[7] = a6;
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_30;
    uint64_t v14 = _Block_copy(aBlock);
    uint64_t v15 = type metadata accessor for DispatchQoS();
    uint64_t v25 = (uint64_t)&v25;
    uint64_t v16 = *(void *)(v15 - 8);
    MEMORY[0x1F4188790](v15);
    uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v19 = a1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v21 = *(void *)(v20 - 8);
    MEMORY[0x1F4188790](v20);
    uint64_t v23 = (char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v24 = v26;
    MEMORY[0x1C8773BA0](0, v18, v23, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    id v10 = a4;
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)a4, a2, a3);
    swift_endAccess();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (a4) {
    return a5(result);
  }
  return result;
}

Swift::Void __swiftcall CollaborationImageFetcher.stopTrackingAll()()
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_9_2;
  uint64_t v0 = _Block_copy(aBlock);
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_63();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_5_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_5_1();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_5_107();
  OUTLINED_FUNCTION_3_124();
  _Block_release(v0);
  uint64_t v3 = OUTLINED_FUNCTION_4_112();
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_6_107();
  v6(v5);
  swift_release();
}

uint64_t closure #1 in CollaborationImageFetcher.stopTrackingAll()()
{
  return swift_endAccess();
}

uint64_t CollaborationImageFetcher.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CollaborationImageFetcher.__deallocating_deinit()
{
  CollaborationImageFetcher.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized CollaborationImageFetcher.__allocating_init(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CollaborationImageFetcher();
  uint64_t v10 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  uint64_t v11 = specialized CollaborationImageFetcher.init(provider:)((uint64_t)v9, v10, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v11;
}

uint64_t specialized CollaborationImageFetcher.init(provider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for IMCoreCollaborationImageProvider();
  uint64_t v7 = &protocol witness table for IMCoreCollaborationImageProvider;
  *(void *)&long long v5 = a1;
  type metadata accessor for OS_dispatch_queue();
  *(void *)(a2 + 56) = static OS_dispatch_queue.main.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIImage?);
  *(void *)(a2 + 64) = Dictionary.init(dictionaryLiteral:)();
  outlined init with take of Notice(&v5, a2 + 16);
  return a2;
}

uint64_t specialized CollaborationImageFetcher.init(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for OS_dispatch_queue();
  *(void *)(a2 + 56) = static OS_dispatch_queue.main.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIImage?);
  *(void *)(a2 + 64) = Dictionary.init(dictionaryLiteral:)();
  outlined init with take of Notice(&v9, a2 + 16);
  return a2;
}

uint64_t sub_1C35370AC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)()
{
  return closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)((void *)(v0 + 16), *(void **)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t partial apply for closure #1 in CollaborationImageFetcher.stopTrackingAll()()
{
  return closure #1 in CollaborationImageFetcher.stopTrackingAll()();
}

uint64_t dispatch thunk of CollaborationImageProvider.fetchCollaborationImage(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for IMCoreCollaborationImageProvider()
{
  return self;
}

uint64_t method lookup function for IMCoreCollaborationImageProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IMCoreCollaborationImageProvider);
}

uint64_t dispatch thunk of IMCoreCollaborationImageProvider.fetchCollaborationImage(for:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of IMCoreCollaborationImageProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for CollaborationImageFetcher()
{
  return self;
}

uint64_t method lookup function for CollaborationImageFetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CollaborationImageFetcher);
}

uint64_t dispatch thunk of CollaborationImageFetcher.__allocating_init(provider:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of CollaborationImageFetcher.image(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of CollaborationImageFetcher.startTrackingCollaborations(with:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of CollaborationImageFetcher.stopTrackingAll()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t outlined init with copy of Collaboration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Collaboration?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Collaboration?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C3537318()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C3537350()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)(void *a1)
{
  return closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1C35373A8()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)()
{
  return closure #1 in closure #1 in closure #1 in CollaborationImageFetcher.startTrackingCollaborations(with:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48));
}

#error "1C3537954: call analysis failed (funcsize=140)"

#error "1C3537BA0: call analysis failed (funcsize=144)"

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v37;
    uint64_t v32 = v38;
    uint64_t v2 = v39;
    int64_t v3 = v40;
    unint64_t v4 = v41;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v32 = a1 + 56;
    uint64_t v6 = ~v5;
    uint64_t v7 = -v5;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = v6;
    int64_t v3 = 0;
  }
  int64_t v31 = (unint64_t)(v2 + 64) >> 6;
  unint64_t v9 = 0x1EA345000uLL;
  uint64_t v10 = static ReportSpamManager.logger;
  uint64_t v11 = &selRef_contactStoreDidChange_;
  uint64_t v33 = v1;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v12 = (v4 - 1) & v4;
      unint64_t v13 = __clz(__rbit64(v4)) | (v3 << 6);
      int64_t v14 = v3;
      goto LABEL_29;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v16 >= v31) {
      goto LABEL_37;
    }
    unint64_t v17 = *(void *)(v32 + 8 * v16);
    int64_t v14 = v3 + 1;
    if (!v17)
    {
      int64_t v14 = v3 + 2;
      if (v3 + 2 >= v31) {
        goto LABEL_37;
      }
      unint64_t v17 = *(void *)(v32 + 8 * v14);
      if (!v17)
      {
        int64_t v14 = v3 + 3;
        if (v3 + 3 >= v31) {
          goto LABEL_37;
        }
        unint64_t v17 = *(void *)(v32 + 8 * v14);
        if (!v17)
        {
          int64_t v14 = v3 + 4;
          if (v3 + 4 >= v31) {
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v32 + 8 * v14);
          if (!v17)
          {
            int64_t v14 = v3 + 5;
            if (v3 + 5 >= v31) {
              goto LABEL_37;
            }
            unint64_t v17 = *(void *)(v32 + 8 * v14);
            if (!v17)
            {
              int64_t v18 = v3 + 6;
              while (v18 < v31)
              {
                unint64_t v17 = *(void *)(v32 + 8 * v18++);
                if (v17)
                {
                  int64_t v14 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_37:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
LABEL_29:
    id v15 = *(id *)(*(void *)(v1 + 48) + 8 * v13);
    if (!v15) {
      goto LABEL_37;
    }
    while (1)
    {
      unint64_t v35 = v12;
      int64_t v36 = v14;
      if (*(void *)(v9 + 1880) != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)v10);
      id v20 = v15;
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v42 = (void *)v34;
        *(_DWORD *)uint64_t v23 = 136315138;
        uint64_t v24 = v10;
        id v25 = objc_msgSend(v20, sel_value);
        id v26 = v11;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;

        uint64_t v10 = v24;
        uint64_t v30 = v27;
        uint64_t v11 = v26;
        *(void *)(v23 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, (uint64_t *)&v42);

        uint64_t v1 = v33;
        unint64_t v9 = 0x1EA345000;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v21, v22, "TUCall: unblock handle %s", (uint8_t *)v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v34, -1, -1);
        MEMORY[0x1C87760E0](v23, -1, -1);
      }
      else
      {
      }
      unint64_t v4 = v35;
      [v20 v11[366]];

      int64_t v3 = v36;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = v42;
        swift_unknownObjectRelease();
        int64_t v14 = v3;
        uint64_t v12 = v4;
        if (v15) {
          continue;
        }
      }
      goto LABEL_37;
    }
  }
  __break(1u);
}

Swift::Bool __swiftcall TUCall.isBlocked()()
{
  TUCall.isBlocked()();
  return result;
}

Swift::Void __swiftcall SpamModelable.unblockUnknown()()
{
  SpamModelable.unblockUnknown()(v0, v1, (SEL *)&selRef_unblock);
}

uint64_t TUCall.isGroupFaceTimeWithUnknownInitiator.getter()
{
  id v1 = objc_msgSend(v0, sel_remoteParticipantHandles);
  OUTLINED_FUNCTION_1_132();
  OUTLINED_FUNCTION_46_22((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Set.count.getter(v2);
  uint64_t v4 = swift_bridgeObjectRelease();
  if (v3 < 2) {
    return 0;
  }
  uint64_t v5 = TUCall.unknownHandles.getter(v4);
  id v6 = objc_msgSend(v0, sel_initiator);
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  while (1)
  {
    unint64_t v9 = *(void **)(v5 + 8 * v8 + 32);
    if (v9) {
      break;
    }
    if (!v6) {
      goto LABEL_13;
    }
LABEL_9:
    if (v7 == ++v8)
    {

      OUTLINED_FUNCTION_32_1();
      return 0;
    }
  }
  if (!v6) {
    goto LABEL_9;
  }
  id v10 = v9;
  id v11 = v6;
  char v12 = OUTLINED_FUNCTION_49_18();

  if ((v12 & 1) == 0) {
    goto LABEL_9;
  }

LABEL_13:
  OUTLINED_FUNCTION_32_1();
  return 1;
}

id CHHandle.tuHandle.getter()
{
  unint64_t v1 = (unint64_t)objc_msgSend(v0, sel_type);
  if (v1 > 3) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = qword_1C3786F70[v1];
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  id v3 = objc_msgSend(v0, sel_value);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  return TUHandle.__allocating_init(type:value:)(v2, v4, v6);
}

#error "1C3538958: call analysis failed (funcsize=6)"

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, int64_t a19, unint64_t a20)
{
  OUTLINED_FUNCTION_36_27();
  uint64_t v21 = v20;
  if ((v20 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    OUTLINED_FUNCTION_31_36();
    _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    OUTLINED_FUNCTION_9_86();
    uint64_t v21 = a16;
  }
  else
  {
    a19 = 0;
    uint64_t v25 = -1 << *(unsigned char *)(v20 + 32);
    a17 = v20 + 56;
    a18 = ~v25;
    uint64_t v26 = -v25;
    if (v26 < 64) {
      uint64_t v27 = ~(-1 << v26);
    }
    else {
      uint64_t v27 = -1;
    }
    a20 = v27 & *(void *)(v20 + 56);
  }
  int64_t v28 = (unint64_t)(a18 + 64) >> 6;
  if (v21 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (a20)
    {
      uint64_t v29 = (a20 - 1) & a20;
      unint64_t v30 = __clz(__rbit64(a20)) | (a19 << 6);
      int64_t v31 = a19;
      goto LABEL_29;
    }
    int64_t v33 = a19 + 1;
    if (__OFADD__(a19, 1)) {
      break;
    }
    if (v33 >= v28) {
      goto LABEL_35;
    }
    unint64_t v34 = *(void *)(a17 + 8 * v33);
    int64_t v31 = a19 + 1;
    if (!v34)
    {
      int64_t v31 = a19 + 2;
      if (a19 + 2 >= v28) {
        goto LABEL_35;
      }
      unint64_t v34 = *(void *)(a17 + 8 * v31);
      if (!v34)
      {
        int64_t v31 = a19 + 3;
        if (a19 + 3 >= v28) {
          goto LABEL_35;
        }
        unint64_t v34 = *(void *)(a17 + 8 * v31);
        if (!v34)
        {
          int64_t v31 = a19 + 4;
          if (a19 + 4 >= v28) {
            goto LABEL_35;
          }
          unint64_t v34 = *(void *)(a17 + 8 * v31);
          if (!v34)
          {
            int64_t v31 = a19 + 5;
            if (a19 + 5 >= v28) {
              goto LABEL_35;
            }
            unint64_t v34 = *(void *)(a17 + 8 * v31);
            if (!v34)
            {
              int64_t v35 = a19 + 6;
              while (v35 < v28)
              {
                unint64_t v34 = *(void *)(a17 + 8 * v35++);
                if (v34)
                {
                  int64_t v31 = v35 - 1;
                  goto LABEL_28;
                }
              }
LABEL_35:
              outlined consume of [NoticePriority : NoticeQueue].Iterator._Variant();
              OUTLINED_FUNCTION_34_34();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v29 = (v34 - 1) & v34;
    unint64_t v30 = __clz(__rbit64(v34)) + (v31 << 6);
LABEL_29:
    id v32 = *(id *)(*(void *)(v21 + 48) + 8 * v30);
    if (!v32) {
      goto LABEL_35;
    }
    while (1)
    {
      type metadata accessor for ReportSpamManager();
      if (static ReportSpamManager.getContact(forHandle:)(v32))
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      a19 = v31;
      a20 = v29;
      if ((v21 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v32 = a15;
        swift_unknownObjectRelease();
        int64_t v31 = a19;
        uint64_t v29 = a20;
        if (a15) {
          continue;
        }
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

unint64_t SpamModelable.messageKey.getter()
{
  return 0xD000000000000010;
}

{
  return 0xD000000000000010;
}

unint64_t specialized SpamModelable.messageKey.getter()
{
  return 0xD000000000000010;
}

void *SpamModelable.formattedInitiatorHandle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  __n128 v9 = MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(uint64_t (**)(__n128))(v12 + 64);
  uint64_t v14 = v13(v9);
  if (v14)
  {
    id v15 = (void *)v14;
    int64_t v16 = TUHandle.formattedPhoneNumber.getter();
    uint64_t v18 = v17;
  }
  else
  {
    int64_t v16 = 0;
    uint64_t v18 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, v3, a1);
  if (!v18)
  {
    uint64_t v19 = (void *)((uint64_t (*)(uint64_t, uint64_t))v13)(a1, a2);
    int64_t v16 = v19;
    if (v19)
    {
      id v20 = objc_msgSend(v19, sel_value);

      int64_t v16 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, a1);
  return v16;
}

void specialized SpamModelable.blockInitiator()()
{
  id v0 = (id)RecentsCallItem.initiator.getter();
  objc_msgSend(v0, sel_block);
}

Swift::Void __swiftcall SpamModelable.blockInitiator()()
{
  id v1 = (id)(*(uint64_t (**)(void))(v0 + 64))();
  objc_msgSend(v1, sel_block);
}

#error "1C3538EC4: call analysis failed (funcsize=39)"

Swift::Void __swiftcall SpamModelable.blockUnknown()()
{
  SpamModelable.unblockUnknown()(v0, v1, (SEL *)&selRef_block);
}

uint64_t SpamModelable.unblockUnknown()(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 72))();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = (void **)(v4 + 32);
    do
    {
      uint64_t v7 = *v6++;
      [v7 *a3];
      --v5;
    }
    while (v5);
  }
  return swift_bridgeObjectRelease();
}

id specialized SpamModelable.pendingOrHandledNickname.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = specialized SpamModelable.formattedInitiatorHandle.getter();
  id v2 = NameAndPhotoUtilities.pendingOrCurrentIMNickname(from:)(v0, v1);
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static ReportSpamManager.logger);
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IMNickname?);
    uint64_t v9 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v5, v6, "reporting nickname: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v8, -1, -1);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }
  else
  {
  }
  return v2;
}

{
  uint64_t v0;
  unint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = specialized SpamModelable.formattedInitiatorHandle.getter();
  id v2 = NameAndPhotoUtilities.pendingOrCurrentIMNickname(from:)(v0, v1);
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static ReportSpamManager.logger);
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IMNickname?);
    uint64_t v9 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v5, v6, "reporting nickname: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v8, -1, -1);
    MEMORY[0x1C87760E0](v7, -1, -1);
  }
  else
  {
  }
  return v2;
}

void SpamModelable.pendingOrHandledNickname.getter()
{
  OUTLINED_FUNCTION_68_1();
  uint64_t v16 = v0;
  uint64_t v17 = v1;
  uint64_t v3 = v2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = OUTLINED_FUNCTION_18_57();
  uint64_t v6 = v5(v4);
  NameAndPhotoUtilities.pendingOrCurrentIMNickname(from:)(v6, v7);
  OUTLINED_FUNCTION_32_31();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static ReportSpamManager.logger);
  id v9 = v3;
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_37();
    v15[0] = OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v12 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IMNickname?);
    uint64_t v13 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v10, v11, "reporting nickname: %s", v12, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  OUTLINED_FUNCTION_22();
}

unint64_t specialized SpamModelable.unknownSenderRecordInfo.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  v0.value._uint64_t countAndFlagsBits = specialized SpamModelable.formattedInitiatorHandle.getter();
  unint64_t v1 = (unint64_t)NameAndPhotoUtilities.unknownSenderRecordInfo(for:)(v0);
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static ReportSpamManager.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]?);
    uint64_t v7 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "reporting unknownSenderRecordInfo: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v6, -1, -1);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v1;
}

void specialized SpamModelable.unknownSenderRecordInfo.getter()
{
  OUTLINED_FUNCTION_68_1();
  uint64_t v14 = v0;
  uint64_t v15 = v1;
  uint64_t v3 = v2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  v4.value._uint64_t countAndFlagsBits = v3();
  NameAndPhotoUtilities.unknownSenderRecordInfo(for:)(v4);
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static ReportSpamManager.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_37();
    v13[0] = OUTLINED_FUNCTION_9_0();
    *unint64_t v8 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]?);
    uint64_t v9 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v13);
    OUTLINED_FUNCTION_28_44();
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_31(&dword_1C2F90000, v11, v12, "reporting unknownSenderRecordInfo: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_3_9();
  }
  OUTLINED_FUNCTION_22();
}

void SpamModelable.unknownSenderRecordInfo.getter()
{
  OUTLINED_FUNCTION_68_1();
  uint64_t v14 = v0;
  uint64_t v15 = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = OUTLINED_FUNCTION_18_57();
  v4.value._uint64_t countAndFlagsBits = v3(v2);
  NameAndPhotoUtilities.unknownSenderRecordInfo(for:)(v4);
  OUTLINED_FUNCTION_32_31();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static ReportSpamManager.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_37();
    v13[0] = OUTLINED_FUNCTION_9_0();
    *unint64_t v8 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]?);
    uint64_t v9 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v13);
    OUTLINED_FUNCTION_28_44();
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_31(&dword_1C2F90000, v11, v12, "reporting unknownSenderRecordInfo: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {

    OUTLINED_FUNCTION_3_9();
  }
  OUTLINED_FUNCTION_22();
}

BOOL CHRecentCall.isIncomingCall.getter()
{
  int v1 = *MEMORY[0x1E4F57CB0];
  return (objc_msgSend(v0, sel_callStatus) & v1) != 0;
}

id CHRecentCall.initiatorHandle.getter()
{
  id v1 = objc_msgSend(v0, sel_initiator);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = CHHandle.tuHandle.getter();

  return v3;
}

uint64_t CHRecentCall.isOneToOneUnknownFaceTimeCall.getter()
{
  uint64_t result = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v0);
  if (!result) {
    return result;
  }
  specialized Set.count.getter(result);
  uint64_t v4 = OUTLINED_FUNCTION_3_20();
  if (v1 != 1) {
    return 0;
  }
  CHRecentCall.unknownHandles.getter(v4, v5, v6, v7, v8, v9, v10, v11, v21, v22);
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v0, sel_initiator);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = CHHandle.tuHandle.getter();
  }
  else
  {
    id v16 = 0;
  }
  if (!*(void *)(v13 + 16))
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_41_24();
    if (v2) {
      break;
    }
    if (!v16) {
      goto LABEL_19;
    }
LABEL_13:
    OUTLINED_FUNCTION_38_26();
    if (v20)
    {

      OUTLINED_FUNCTION_3_9();
      return 0;
    }
  }
  if (!v16) {
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_1_132();
  id v17 = v2;
  id v18 = v16;
  char v19 = OUTLINED_FUNCTION_10_75();

  if ((v19 & 1) == 0) {
    goto LABEL_13;
  }

LABEL_19:
  OUTLINED_FUNCTION_3_9();
  return 1;
}

void CHRecentCall.unknownHandles.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  OUTLINED_FUNCTION_26_3();
  uint64_t v11 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v10);
  if (!v11)
  {
    if (one-time initialization token for conversationKit != -1) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  if ((v11 & 0xC000000000000001) == 0)
  {
    uint64_t v12 = specialized _NativeSet.filter(_:)(v11);
    goto LABEL_27;
  }
  uint64_t v12 = MEMORY[0x1E4FBC870];
  uint64_t v31 = MEMORY[0x1E4FBC870];
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_21:
    swift_release();
LABEL_27:
    specialized Sequence.compactMap<A>(_:)(v12);
    swift_release();
    goto LABEL_28;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  while (1)
  {
    swift_dynamicCast();
    type metadata accessor for ReportSpamManager();
    id v13 = CHHandle.tuHandle.getter();
    unint64_t v14 = static ReportSpamManager.getContact(forHandle:)(v13);

    swift_bridgeObjectRelease();
    if (!v14) {
      break;
    }

LABEL_19:
    if (!__CocoaSet.Iterator.next()())
    {
      uint64_t v12 = v31;
      goto LABEL_21;
    }
  }
  uint64_t v15 = v31;
  unint64_t v16 = *(void *)(v31 + 16);
  if (*(void *)(v31 + 24) <= v16)
  {
    specialized _NativeSet.resize(capacity:)(v16 + 1);
    uint64_t v15 = v31;
  }
  Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(v15 + 40));
  uint64_t v18 = v15 + 56;
  uint64_t v19 = -1 << *(unsigned char *)(v15 + 32);
  unint64_t v20 = v17 & ~v19;
  unint64_t v21 = v20 >> 6;
  if (((-1 << v20) & ~*(void *)(v15 + 56 + 8 * (v20 >> 6))) != 0)
  {
    unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v15 + 56 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_18:
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v15 + 48) + 8 * v22) = a10;
    ++*(void *)(v15 + 16);
    goto LABEL_19;
  }
  char v23 = 0;
  unint64_t v24 = (unint64_t)(63 - v19) >> 6;
  while (++v21 != v24 || (v23 & 1) == 0)
  {
    BOOL v25 = v21 == v24;
    if (v21 == v24) {
      unint64_t v21 = 0;
    }
    v23 |= v25;
    uint64_t v26 = *(void *)(v18 + 8 * v21);
    if (v26 != -1)
    {
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_30:
  swift_once();
LABEL_23:
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationKit);
  int64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    unint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v30 = 0;
    _os_log_impl(&dword_1C2F90000, v28, v29, "remoteParticipantHandles = nil", v30, 2u);
    OUTLINED_FUNCTION_3();
  }

LABEL_28:
  OUTLINED_FUNCTION_16();
}

uint64_t CHRecentCall.isGroupFaceTimeWithUnknownInitiator.getter()
{
  uint64_t result = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v0);
  if (!result) {
    return result;
  }
  specialized Set.count.getter(result);
  uint64_t v4 = OUTLINED_FUNCTION_3_20();
  if (v1 < 2) {
    return 0;
  }
  CHRecentCall.unknownHandles.getter(v4, v5, v6, v7, v8, v9, v10, v11, v21, v22);
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v0, sel_initiator);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = CHHandle.tuHandle.getter();
  }
  else
  {
    id v16 = 0;
  }
  if (!*(void *)(v13 + 16))
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_41_24();
    if (v2) {
      break;
    }
    if (!v16) {
      goto LABEL_19;
    }
LABEL_13:
    OUTLINED_FUNCTION_38_26();
    if (v20)
    {

      OUTLINED_FUNCTION_3_9();
      return 0;
    }
  }
  if (!v16) {
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_1_132();
  id v17 = v2;
  id v18 = v16;
  char v19 = OUTLINED_FUNCTION_10_75();

  if ((v19 & 1) == 0) {
    goto LABEL_13;
  }

LABEL_19:
  OUTLINED_FUNCTION_3_9();
  return 1;
}

void CHRecentCall.isGroupFaceTimeWithSomeUnknownContacts.getter()
{
  OUTLINED_FUNCTION_26_3();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationKit);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v2);
    if (v6)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      Set.description.getter();
      uint64_t v6 = swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_43_21(v6, v7);
    OUTLINED_FUNCTION_12_68();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "isGroupFaceTimeWithSomeUnknownContacts :%s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v8 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v2);
  if (v8)
  {
    uint64_t v9 = v8;
    if (specialized Set.count.getter(v8) < 2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Sequence.compactMap<A>(_:)(v9);
      swift_bridgeObjectRelease();
      specialized Set.count.getter(v9);
      OUTLINED_FUNCTION_11();
    }
  }
  OUTLINED_FUNCTION_16();
}

void CHRecentCall.isGroupFaceTimeWithAllUnknownContacts.getter()
{
  OUTLINED_FUNCTION_26_3();
  if (one-time initialization token for conversationKit != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationKit);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_9_0();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v2);
    if (v6)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      Set.description.getter();
      uint64_t v6 = swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_43_21(v6, v7);
    OUTLINED_FUNCTION_12_68();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v3, v4, "isGroupFaceTimeWithAllUnknownContacts: %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
  }
  uint64_t v8 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v2);
  if (v8)
  {
    uint64_t v9 = v8;
    specialized Sequence.compactMap<A>(_:)();
    swift_bridgeObjectRelease();
    specialized Set.count.getter(v9);
    OUTLINED_FUNCTION_11();
  }
  OUTLINED_FUNCTION_16();
}

uint64_t CHRecentCall.formattedTUCallHandle.getter()
{
  uint64_t v1 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v0);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  specialized Sequence.compactMap<A>(_:)(v1);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t CHRecentCall.faceTimeSpamCallType.getter()
{
  uint64_t v2 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v0);
  if (v2)
  {
    specialized Set.count.getter(v2);
    OUTLINED_FUNCTION_3_20();
    BOOL v3 = v1 == 1;
  }
  else
  {
    BOOL v3 = 0;
  }
  uint64_t v4 = outlined bridged method (pb) of @objc CHRecentCall.serviceProvider.getter(v0);
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v6)
  {
    if (v4 == v7 && v6 == v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v3) {
        return 0xD000000000000013;
      }
      return 0x656D697465636166;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3)
    {
      if ((v10 & 1) == 0) {
        return 0;
      }
      return 0xD000000000000013;
    }
    if (v10) {
      return 0x656D697465636166;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t CHRecentCall.senderHandle.getter()
{
  uint64_t v1 = (uint64_t)CHRecentCall.initiatorHandle.getter();
  if (!v1)
  {
    uint64_t v1 = outlined bridged method (pb) of @objc CHRecentCall.remoteParticipantHandles.getter(v0);
    if (v1)
    {
      specialized Collection.first.getter();
      OUTLINED_FUNCTION_11();
      if (v0)
      {
        uint64_t v1 = (uint64_t)CHHandle.tuHandle.getter();
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

void CHRecentCall.spamModel(with:)()
{
  OUTLINED_FUNCTION_68_1();
  uint64_t v1 = v0;
  uint64_t v48 = v2;
  uint64_t v47 = CHRecentCall.formattedTUCallHandle.getter();
  uint64_t v3 = CHRecentCall.faceTimeSpamCallType.getter();
  uint64_t v45 = v4;
  uint64_t v46 = v3;
  objc_msgSend(v0, sel_duration);
  uint64_t v6 = v5;
  uint64_t v44 = CHRecentCall.senderHandle.getter();
  id v7 = objc_msgSend(v0, sel_uniqueId);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = type metadata accessor for Date();
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_60();
  objc_msgSend(v0, sel_duration);
  Date.init(timeIntervalSinceNow:)();
  Date.timeIntervalSince1970.getter();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v0, v8);
  UInt32.stringValue.getter((int)objc_msgSend(v0, sel_callStatus));
  uint64_t v13 = v12;
  id v14 = CHRecentCall.pendingOrHandledNickname.getter();
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = objc_msgSend(v14, sel_firstName);

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  id v20 = CHRecentCall.pendingOrHandledNickname.getter();
  if (v20)
  {
    uint64_t v21 = v20;
    id v22 = objc_msgSend(v20, sel_lastName);

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
  }
  id v26 = CHRecentCall.pendingOrHandledNickname.getter();
  uint64_t v27 = v26;
  if (v26)
  {
    id v28 = objc_msgSend(v26, sel_recordID);

    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v30;
  }
  else
  {
    uint64_t v29 = 0;
  }
  id v31 = v1;
  specialized SpamModelable.unknownSenderRecordInfo.getter();
  uint64_t v33 = v32;

  v43.n128_u64[1] = (unint64_t)v27;
  *((void *)&v42 + 1) = v25;
  v43.n128_u64[0] = v29;
  *((void *)&v41 + 1) = v19;
  *(void *)&long long v42 = v23;
  *(void *)&long long v41 = v17;
  *((void *)&v40 + 1) = v13;
  OUTLINED_FUNCTION_15_72();
  OUTLINED_FUNCTION_27_47();
  *((void *)&v35 + 1) = v34;
  *(void *)&long long v35 = v44;
  OUTLINED_FUNCTION_37_26(v47, v46, v45, v6, v48, v35, v36, v37, v38, v39, v40, 0, v41, v42, v43, v33);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_33_2();
}

id CHRecentCall.pendingOrHandledNickname.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v1 = v0;
  uint64_t v2 = specialized SpamModelable.formattedInitiatorHandle.getter();
  unint64_t v4 = v3;

  id v5 = NameAndPhotoUtilities.pendingOrCurrentIMNickname(from:)(v2, v4);
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static ReportSpamManager.logger);
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IMNickname?);
    uint64_t v12 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v8, v9, "reporting nickname: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v11, -1, -1);
    MEMORY[0x1C87760E0](v10, -1, -1);
  }
  else
  {
  }
  return v5;
}

Swift::Void __swiftcall CHRecentCall.block()()
{
}

Swift::Void __swiftcall CHRecentCall.unblock()()
{
}

Swift::Bool __swiftcall CHRecentCall.isBlocked()()
{
  TUCall.isBlocked()();
  return result;
}

void TUCall.isBlocked()()
{
  OUTLINED_FUNCTION_23_51();
  uint64_t v1 = v0();
  unint64_t v2 = MEMORY[0x1E4FBC860];
  unint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      id v5 = *(void **)(v1 + 8 * i + 32);
      if (v5)
      {
        id v6 = v5;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_6_3();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v2 = v16;
  }
  swift_bridgeObjectRelease();
  if (v2 >> 62) {
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x1C87744F0](0, v2);
    }
    else {
      id v8 = *(id *)(v2 + 32);
    }
    os_log_type_t v9 = v8;
    Swift::Bool v10 = TUHandle.isBlocked()();

    if (!v10 || v7 == 1) {
      break;
    }
    uint64_t v11 = 5;
    while (1)
    {
      id v12 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C87744F0](v11 - 4, v2) : *(id *)(v2 + 8 * v11);
      unint64_t v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      Swift::Bool v15 = TUHandle.isBlocked()();

      if (v15)
      {
        ++v11;
        if (v14 != v7) {
          continue;
        }
      }
      goto LABEL_15;
    }
    __break(1u);
LABEL_25:
    OUTLINED_FUNCTION_32();
  }
LABEL_15:
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_1_0();
}

uint64_t protocol witness for SpamModelable.isGroupFaceTimeWithAllUnknownContacts.getter in conformance CHRecentCall()
{
  CHRecentCall.isGroupFaceTimeWithAllUnknownContacts.getter();
  return v0 & 1;
}

uint64_t protocol witness for SpamModelable.isGroupFaceTimeWithSomeUnknownContacts.getter in conformance CHRecentCall()
{
  CHRecentCall.isGroupFaceTimeWithSomeUnknownContacts.getter();
  return v0 & 1;
}

uint64_t protocol witness for SpamModelable.isGroupFaceTimeWithUnknownInitiator.getter in conformance CHRecentCall()
{
  return CHRecentCall.isGroupFaceTimeWithUnknownInitiator.getter() & 1;
}

uint64_t protocol witness for SpamModelable.isOneToOneUnknownFaceTimeCall.getter in conformance CHRecentCall()
{
  return CHRecentCall.isOneToOneUnknownFaceTimeCall.getter() & 1;
}

BOOL protocol witness for SpamModelable.isIncomingCall.getter in conformance CHRecentCall()
{
  return CHRecentCall.isIncomingCall.getter();
}

id protocol witness for SpamModelable.initiatorHandle.getter in conformance CHRecentCall()
{
  return CHRecentCall.initiatorHandle.getter();
}

void protocol witness for SpamModelable.unknownHandles.getter in conformance CHRecentCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CHRecentCall.unknownHandles.getter(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
}

void protocol witness for SpamModelable.spamModel(with:) in conformance CHRecentCall()
{
}

void protocol witness for SpamModelable.block() in conformance CHRecentCall()
{
}

void protocol witness for SpamModelable.unblock() in conformance CHRecentCall()
{
}

BOOL protocol witness for SpamModelable.isBlocked() in conformance CHRecentCall()
{
  return CHRecentCall.isBlocked()();
}

id TUCall.isIncomingCall.getter()
{
  return objc_msgSend(v0, sel_isIncoming);
}

#error "1C353AFA8: call analysis failed (funcsize=37)"

uint64_t TUCall.isOneToOneUnknownFaceTimeCall.getter()
{
  id v1 = objc_msgSend(v0, sel_remoteParticipantHandles);
  OUTLINED_FUNCTION_1_132();
  OUTLINED_FUNCTION_46_22((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Set.count.getter(v2);
  uint64_t v4 = swift_bridgeObjectRelease();
  if (v3 != 1) {
    return 0;
  }
  uint64_t v5 = TUCall.unknownHandles.getter(v4);
  id v6 = objc_msgSend(v0, sel_initiator);
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  while (1)
  {
    os_log_type_t v9 = *(void **)(v5 + 8 * v8 + 32);
    if (v9) {
      break;
    }
    if (!v6) {
      goto LABEL_13;
    }
LABEL_9:
    if (v7 == ++v8)
    {

      OUTLINED_FUNCTION_32_1();
      return 0;
    }
  }
  if (!v6) {
    goto LABEL_9;
  }
  id v10 = v9;
  id v11 = v6;
  char v12 = OUTLINED_FUNCTION_49_18();

  if ((v12 & 1) == 0) {
    goto LABEL_9;
  }

LABEL_13:
  OUTLINED_FUNCTION_32_1();
  return 1;
}

BOOL TUCall.isGroupFaceTimeWithSomeUnknownContacts.getter()
{
  id v1 = objc_msgSend(v0, sel_remoteParticipantHandles);
  OUTLINED_FUNCTION_1_132();
  OUTLINED_FUNCTION_46_22((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = specialized Set.count.getter(v2);
  swift_bridgeObjectRelease();
  if (v3 < 2) {
    return 0;
  }
  id v4 = objc_msgSend(v0, sel_remoteParticipantHandles);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
  id v8 = objc_msgSend(v0, sel_remoteParticipantHandles);
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Set.count.getter(v9);
  OUTLINED_FUNCTION_11();
  return v7 < (uint64_t)v8;
}

void TUCall.isGroupFaceTimeWithAllUnknownContacts.getter()
{
  OUTLINED_FUNCTION_23_51();
  id v1 = objc_msgSend(v0, sel_remoteParticipantHandles);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v0, sel_remoteParticipantHandles);
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Set.count.getter(v4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_0();
}

void TUCall.spamModel(with:)()
{
  OUTLINED_FUNCTION_68_1();
  uint64_t v56 = v1;
  uint64_t v57 = v2;
  id v3 = v0;
  uint64_t v54 = v4;
  uint64_t v55 = v5;
  uint64_t v53 = v6;
  uint64_t v52 = TUCall.formattedTUCallHandle.getter();
  unint64_t v7 = TUCall.faceTimeSpamCallType.getter();
  uint64_t v50 = v8;
  unint64_t v51 = v7;
  objc_msgSend(v0, sel_callDuration);
  uint64_t v10 = v9;
  id v11 = TUCall.initiatorHandle.getter();
  if (!v11)
  {
    id v12 = objc_msgSend(v0, sel_remoteParticipantHandles);
    OUTLINED_FUNCTION_1_132();
    OUTLINED_FUNCTION_46_22((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
    static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Collection.first.getter();
    id v11 = v13;
    swift_bridgeObjectRelease();
  }
  id v14 = objc_msgSend(v3, sel_callUUID);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v49[1] = v16;
  v49[2] = v15;

  uint64_t v17 = type metadata accessor for Date();
  v49[3] = v49;
  OUTLINED_FUNCTION_4();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_60();
  objc_msgSend(v3, sel_callDuration);
  Date.init(timeIntervalSinceNow:)();
  Date.timeIntervalSince1970.getter();
  (*(void (**)(id, uint64_t))(v19 + 8))(v14, v17);
  id v21 = v3;
  id v22 = specialized SpamModelable.pendingOrHandledNickname.getter();

  if (v22)
  {
    id v23 = objc_msgSend(v22, sel_firstName);

    id v22 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v25 = 0;
  }
  id v26 = v21;
  uint64_t v27 = specialized SpamModelable.pendingOrHandledNickname.getter();

  if (v27)
  {
    id v28 = objc_msgSend(v27, sel_lastName);

    uint64_t v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v30 = 0;
  }
  id v31 = v26;
  uint64_t v32 = specialized SpamModelable.pendingOrHandledNickname.getter();

  if (v32)
  {
    id v33 = objc_msgSend(v32, sel_recordID);

    uint64_t v32 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;
  }
  else
  {
    unint64_t v35 = 0;
  }
  id v36 = v31;
  specialized SpamModelable.unknownSenderRecordInfo.getter();
  uint64_t v38 = v37;

  v48.n128_u64[1] = v35;
  *((void *)&v47 + 1) = v30;
  v48.n128_u64[0] = (unint64_t)v32;
  *((void *)&v46 + 1) = v25;
  *(void *)&long long v47 = v27;
  *(void *)&long long v46 = v22;
  *(void *)&long long v45 = 0xD000000000000011;
  *((void *)&v45 + 1) = 0x80000001C37A2C90;
  *(void *)&long long v44 = 0xD000000000000010;
  *((void *)&v44 + 1) = 0x80000001C37B2A70;
  OUTLINED_FUNCTION_27_47();
  *(void *)&long long v40 = v11;
  *((void *)&v40 + 1) = v39;
  OUTLINED_FUNCTION_37_26(v52, v51, v50, v10, v53, v40, v41, v42, v43, v44, v45, 0, v46, v47, v48, v38);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_33_2();
}

uint64_t TUCall.formattedTUCallHandle.getter()
{
  id v1 = objc_msgSend(v0, sel_remoteParticipantHandles);
  OUTLINED_FUNCTION_30_33();
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v2 = OUTLINED_FUNCTION_29_35();

  specialized Sequence.compactMap<A>(_:)(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t TUCall.faceTimeSpamCallType.getter()
{
  id v1 = objc_msgSend(v0, sel_remoteParticipantHandles);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Set.count.getter(v2);
  OUTLINED_FUNCTION_32_31();
  id v3 = objc_msgSend(v0, sel_provider);
  unsigned int v4 = objc_msgSend(v3, sel_isFaceTimeProvider);

  unint64_t v5 = 0xD000000000000013;
  if (!v4) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = 0x656D697465636166;
  if (!v4) {
    uint64_t v6 = 0;
  }
  if (v1 == (id)1) {
    return v5;
  }
  else {
    return v6;
  }
}

id TUCall.initiatorHandle.getter()
{
  id v1 = objc_msgSend(self, sel_sharedInstance);
  id v2 = objc_msgSend(v1, sel_activeConversationForCall_, v0);

  if (!v2) {
    return 0;
  }
  id v3 = objc_msgSend(v2, sel_initiator);

  return v3;
}

void CHRecentCall.block()()
{
  OUTLINED_FUNCTION_23_51();
  id v1 = v0;
  uint64_t v3 = v2();
  unint64_t v4 = MEMORY[0x1E4FBC860];
  unint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v7 = *(void **)(v3 + 8 * i + 32);
      if (v7)
      {
        v7;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          OUTLINED_FUNCTION_6_3();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v4 = v12;
  }
  swift_bridgeObjectRelease();
  if (!(v4 >> 62))
  {
    uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_11;
    }
LABEL_17:
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_1_0();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_17;
  }
LABEL_11:
  if (v8 >= 1)
  {
    for (uint64_t j = 0; j != v8; ++j)
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x1C87744F0](j, v4);
      }
      else {
        id v10 = *(id *)(v4 + 8 * j + 32);
      }
      id v11 = v10;
      [v10 *v1];
    }
    goto LABEL_17;
  }
  __break(1u);
}

Swift::Void __swiftcall TUCall.block()()
{
}

Swift::Void __swiftcall TUCall.unblock()()
{
  id v1 = objc_msgSend(v0, sel_remoteParticipantHandles);
  OUTLINED_FUNCTION_30_33();
  _sSo8TUHandleCSo8NSObjectCSH10ObjectiveCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  uint64_t v2 = OUTLINED_FUNCTION_29_35();

  specialized Sequence.forEach(_:)(v2);
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for SpamModelable.isGroupFaceTimeWithAllUnknownContacts.getter in conformance TUCall()
{
  TUCall.isGroupFaceTimeWithAllUnknownContacts.getter();
  return v0 & 1;
}

BOOL protocol witness for SpamModelable.isGroupFaceTimeWithSomeUnknownContacts.getter in conformance TUCall()
{
  return TUCall.isGroupFaceTimeWithSomeUnknownContacts.getter();
}

uint64_t protocol witness for SpamModelable.isGroupFaceTimeWithUnknownInitiator.getter in conformance TUCall()
{
  return TUCall.isGroupFaceTimeWithUnknownInitiator.getter() & 1;
}

uint64_t protocol witness for SpamModelable.isOneToOneUnknownFaceTimeCall.getter in conformance TUCall()
{
  return TUCall.isOneToOneUnknownFaceTimeCall.getter() & 1;
}

unint64_t protocol witness for SpamModelable.isIncomingCall.getter in conformance TUCall()
{
  return (unint64_t)TUCall.isIncomingCall.getter() & 1;
}

id protocol witness for SpamModelable.initiatorHandle.getter in conformance TUCall()
{
  return TUCall.initiatorHandle.getter();
}

uint64_t protocol witness for SpamModelable.unknownHandles.getter in conformance TUCall(uint64_t a1)
{
  return TUCall.unknownHandles.getter(a1);
}

void protocol witness for SpamModelable.spamModel(with:) in conformance TUCall()
{
}

void protocol witness for SpamModelable.block() in conformance TUCall()
{
}

void protocol witness for SpamModelable.unblock() in conformance TUCall()
{
}

BOOL protocol witness for SpamModelable.isBlocked() in conformance TUCall()
{
  return TUCall.isBlocked()();
}

void RecentsCallItem.isOneToOneUnknownFaceTimeCall.getter()
{
  OUTLINED_FUNCTION_68_1();
  RecentsCallItem.tuHandles.getter();
  uint64_t v3 = v2;
  specialized Set.count.getter(v2);
  OUTLINED_FUNCTION_3_20();
  if (v0 != 1) {
    goto LABEL_13;
  }
  RecentsCallItem.tuHandles.getter();
  specialized Sequence.filter(_:)(v4, v5, v6, v7, v8, v9, v10, v11, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28,
    v29);
  specialized _arrayForceCast<A, B>(_:)(v12);
  OUTLINED_FUNCTION_32_31();
  unint64_t v13 = (void *)RecentsCallItem.initiator.getter();
  if (!*(void *)(v3 + 16))
  {
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_41_24();
    if (v1) {
      break;
    }
    if (!v13) {
      goto LABEL_14;
    }
LABEL_9:
    OUTLINED_FUNCTION_38_26();
    if (v17)
    {

      OUTLINED_FUNCTION_3_9();
      goto LABEL_13;
    }
  }
  if (!v13) {
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_1_132();
  id v14 = v1;
  id v15 = v13;
  char v16 = OUTLINED_FUNCTION_10_75();

  if ((v16 & 1) == 0) {
    goto LABEL_9;
  }

LABEL_14:
  OUTLINED_FUNCTION_3_9();
LABEL_13:
  OUTLINED_FUNCTION_22();
}

#error "1C353BE04: call analysis failed (funcsize=18)"

void RecentsCallItem.isGroupFaceTimeWithUnknownInitiator.getter()
{
  OUTLINED_FUNCTION_68_1();
  RecentsCallItem.tuHandles.getter();
  uint64_t v3 = v2;
  specialized Set.count.getter(v2);
  OUTLINED_FUNCTION_3_20();
  if (v0 < 2) {
    goto LABEL_13;
  }
  RecentsCallItem.tuHandles.getter();
  specialized Sequence.filter(_:)(v4, v5, v6, v7, v8, v9, v10, v11, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28,
    v29);
  specialized _arrayForceCast<A, B>(_:)(v12);
  OUTLINED_FUNCTION_32_31();
  unint64_t v13 = (void *)RecentsCallItem.initiator.getter();
  if (!*(void *)(v3 + 16))
  {
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_41_24();
    if (v1) {
      break;
    }
    if (!v13) {
      goto LABEL_14;
    }
LABEL_9:
    OUTLINED_FUNCTION_38_26();
    if (v17)
    {

      OUTLINED_FUNCTION_3_9();
      goto LABEL_13;
    }
  }
  if (!v13) {
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_1_132();
  id v14 = v1;
  id v15 = v13;
  char v16 = OUTLINED_FUNCTION_10_75();

  if ((v16 & 1) == 0) {
    goto LABEL_9;
  }

LABEL_14:
  OUTLINED_FUNCTION_3_9();
LABEL_13:
  OUTLINED_FUNCTION_22();
}

#error "1C353BF88: call analysis failed (funcsize=70)"

uint64_t RecentsCallItem.isGroupFaceTimeWithAllUnknownContacts.getter()
{
  RecentsCallItem.tuHandles.getter();
  specialized Sequence.compactMap<A>(_:)(v0);
  OUTLINED_FUNCTION_3_20();
  uint64_t v1 = MEMORY[0x10];
  swift_bridgeObjectRelease();
  RecentsCallItem.isGroupFaceTimeCall.getter();
  return v2 & (v1 == 0);
}

uint64_t RecentsCallItem.isOneToOneFaceTime.getter()
{
  uint64_t v2 = type metadata accessor for RecentsCallItem(0);
  MEMORY[0x1F4188790](v2 - 8);
  OUTLINED_FUNCTION_17_0();
  char v3 = RecentsCallItem.isTelephony.getter();
  outlined init with copy of RecentsCallItem(v1, v0);
  if (v3)
  {
    char v4 = 0;
  }
  else
  {
    RecentsCallItem.isOneToOne.getter();
    char v4 = v5;
  }
  outlined destroy of RecentsCallItem(v0);
  return v4 & 1;
}

void RecentsCallItem.spamModel(with:)()
{
  OUTLINED_FUNCTION_68_1();
  uint64_t v82 = v1;
  uint64_t v83 = v2;
  uint64_t v81 = v3;
  RecentsCallItem.tuHandles.getter();
  specialized Sequence.compactMap<A>(_:)(v4);
  uint64_t v80 = v5;
  swift_bridgeObjectRelease();
  unint64_t v6 = RecentsCallItem.faceTimeSpamCallType.getter();
  uint64_t v78 = v7;
  uint64_t v79 = v6;
  uint64_t v77 = RecentsCallItem.duration.getter();
  HIDWORD(v73) = v8;
  RecentsCallItem.conversationLink.getter();
  uint64_t v9 = v84;
  if (v84) {
    outlined consume of ConversationLink?(v84);
  }
  uint64_t v75 = RecentsCallItem.initiator.getter();
  uint64_t v10 = RecentsCallItem.callUniqueId.getter();
  uint64_t v69 = v11;
  uint64_t v71 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v12 - 8);
  OUTLINED_FUNCTION_60();
  uint64_t v13 = type metadata accessor for RecentsCallItem(0);
  outlined init with copy of Date?(v0 + *(int *)(v13 + 36), v0);
  uint64_t v14 = type metadata accessor for Date();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v14);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Date?(v0);
    uint64_t v61 = 0;
  }
  else
  {
    Date.timeIntervalSince1970.getter();
    uint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v0, v14);
    uint64_t v61 = v17;
  }
  unint64_t v18 = RecentsCallItem.callStatus.getter();
  if ((v18 & 0x100000000) != 0)
  {
    RecentsCallItem.linkName.getter(v18, v19, v20, v21, v22, v23, v24, v25, 0, 0, v61, v63, v65, v67, v69, v71, v73, v75);
  }
  else
  {
    uint64_t v60 = UInt32.stringValue.getter(v18);
    RecentsCallItem.linkName.getter(v60, v26, v27, v28, v29, v30, v31, v32, v26, v60, v61, v63, v65, v67, v69, v71, v73, v75);
  }
  uint64_t v66 = v34;
  uint64_t v68 = v33;
  id v35 = specialized SpamModelable.pendingOrHandledNickname.getter();
  id v36 = v35;
  if (v35)
  {
    id v37 = objc_msgSend(v35, sel_firstName);

    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v36 = v38;
  }
  else
  {
    uint64_t v64 = 0;
  }
  id v39 = specialized SpamModelable.pendingOrHandledNickname.getter();
  if (v39)
  {
    long long v40 = v39;
    id v41 = objc_msgSend(v39, sel_lastName);

    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v44 = 0;
  }
  id v45 = specialized SpamModelable.pendingOrHandledNickname.getter();
  if (v45)
  {
    long long v46 = v45;
    id v47 = objc_msgSend(v45, sel_recordID);

    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v50 = v49;

    uint64_t v9 = v84;
  }
  else
  {
    uint64_t v48 = 0;
    unint64_t v50 = 0;
  }
  v57.n128_u64[1] = v50;
  unint64_t v58 = specialized SpamModelable.unknownSenderRecordInfo.getter();
  *((void *)&v56 + 1) = v44;
  v57.n128_u64[0] = v48;
  *((void *)&v55 + 1) = v36;
  *(void *)&long long v56 = v42;
  *(void *)&long long v55 = v64;
  *((void *)&v54 + 1) = v66;
  *(void *)&long long v54 = v68;
  *((void *)&v53 + 1) = v59;
  OUTLINED_FUNCTION_15_72();
  *((void *)&v51 + 1) = v72;
  *(void *)&long long v51 = v76;
  ReportSpamManager.SpamDataModel.init(invitedMembers:callType:callLength:hasLink:recipientHandleValue:senderHandle:messageId:spamTime:messageKey:callStatus:linkName:snapFirstName:snapLastName:snapRecordId:snapRecordInfo:)(v80, v79, v78, v77, v74 & 1, v9 != 0, v82, v83, v81, v51, v70, v62, EnumTagSinglePayload == 1, v52, v53, v54, v55, v56, v57,
    v58);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_33_2();
}

uint64_t RecentsCallItem.blockUnknownHandles()(SEL *a1)
{
  RecentsCallItem.tuHandles.getter();
  specialized Sequence.filter(_:)(v2, v3, v4, v5, v6, v7, v8, v9, v36, v37, v38, v39, v40, v42, v44, v46, v47[0], v47[1], v47[2],
    v47[3]);
  uint64_t v11 = specialized _arrayForceCast<A, B>(_:)(v10);
  swift_bridgeObjectRelease();
  unint64_t v12 = MEMORY[0x1E4FBC860];
  v47[0] = MEMORY[0x1E4FBC860];
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v13; ++i)
    {
      id v15 = *(void **)(v11 + 8 * i + 32);
      if (v15)
      {
        id v16 = v15;
        MEMORY[0x1C87733A0]();
        if (*(void *)((v47[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v12 = v47[0];
  }
  swift_bridgeObjectRelease();
  if (!(v12 >> 62))
  {
    uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_11;
    }
    return OUTLINED_FUNCTION_32_1();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = result;
  if (!result) {
    return OUTLINED_FUNCTION_32_1();
  }
LABEL_11:
  if (v17 >= 1)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 & 0xC000000000000001;
    unint64_t v21 = 0x1EA345000uLL;
    uint64_t v43 = a1;
    unint64_t v45 = v12;
    unint64_t v41 = v12 & 0xC000000000000001;
    do
    {
      if (v20) {
        id v22 = (id)MEMORY[0x1C87744F0](v19, v12);
      }
      else {
        id v22 = *(id *)(v12 + 8 * v19 + 32);
      }
      uint64_t v23 = v22;
      if (*(void *)(v21 + 1880) != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static ReportSpamManager.logger);
      id v25 = v23;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = OUTLINED_FUNCTION_37();
        v47[0] = OUTLINED_FUNCTION_9_0();
        *(_DWORD *)uint64_t v28 = 136315138;
        unint64_t v29 = v21;
        id v30 = objc_msgSend(v25, sel_value);
        uint64_t v31 = v17;
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v34 = v33;

        unint64_t v21 = v29;
        uint64_t v35 = v32;
        uint64_t v17 = v31;
        *(void *)(v28 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, v47);

        unint64_t v20 = v41;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v26, v27, "TUCall: block unknown handle %s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        a1 = v43;
        unint64_t v12 = v45;
        OUTLINED_FUNCTION_3();
      }
      else
      {
      }
      ++v19;
      [v25 *a1];
    }
    while (v17 != v19);
    return OUTLINED_FUNCTION_32_1();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall RecentsCallItem.block()()
{
}

Swift::Void __swiftcall RecentsCallItem.unblock()()
{
}

#error "1C353C808: call analysis failed (funcsize=114)"

uint64_t outlined bridged method (pb) of @objc CHRecentCall.serviceProvider.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_serviceProvider);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined init with copy of RecentsCallItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecentsCallItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of SpamModelable.isGroupFaceTimeWithAllUnknownContacts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SpamModelable.isGroupFaceTimeWithSomeUnknownContacts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SpamModelable.isGroupFaceTimeWithUnknownInitiator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SpamModelable.isOneToOneUnknownFaceTimeCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SpamModelable.isIncomingCall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SpamModelable.messageKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SpamModelable.formattedInitiatorHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SpamModelable.initiatorHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of SpamModelable.unknownHandles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of SpamModelable.spamModel(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of SpamModelable.block()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of SpamModelable.blockInitiator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of SpamModelable.blockUnknown()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of SpamModelable.unblock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of SpamModelable.unblockUnknown()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of SpamModelable.isBlocked()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t NSDiffableDataSourceSnapshot.appendItemsRemovingDupes(_:toSection:onDupe:)()
{
  return swift_bridgeObjectRelease();
}

BOOL closure #1 in NSDiffableDataSourceSnapshot.appendItemsRemovingDupes(_:toSection:onDupe:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  uint64_t v8 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  swift_bridgeObjectRetain();
  char v14 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  if (v14)
  {
    if (v17) {
      v17(a1);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a6);
    type metadata accessor for Set();
    Set.insert(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, a6);
  }
  return (v14 & 1) == 0;
}

BOOL partial apply for closure #1 in NSDiffableDataSourceSnapshot.appendItemsRemovingDupes(_:toSection:onDupe:)(uint64_t a1)
{
  return closure #1 in NSDiffableDataSourceSnapshot.appendItemsRemovingDupes(_:toSection:onDupe:)(a1, *(void *)(v1 + 48), *(void (**)(uint64_t))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL SGURL.isValidConversationLink.getter()
{
  type metadata accessor for TUConversationLink();
  id v2 = objc_msgSend(v0, sel_url);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = @nonobjc TUConversationLink.init(url:)(v1, v5);
  id v7 = v6;
  if (v6) {

  }
  return v7 != 0;
}

unint64_t type metadata accessor for TUConversationLink()
{
  unint64_t result = lazy cache variable for type metadata for TUConversationLink;
  if (!lazy cache variable for type metadata for TUConversationLink)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationLink);
  }
  return result;
}

uint64_t SGURL.recentsDate.getter()
{
  id v2 = objc_msgSend(v0, sel_documentDate);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v4 = OUTLINED_FUNCTION_8(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  if (v2)
  {
    uint64_t v5 = type metadata accessor for Date();
    OUTLINED_FUNCTION_4();
    uint64_t v7 = v6;
    MEMORY[0x1F4188790](v8);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = *(void (**)(void))(v7 + 32);
    OUTLINED_FUNCTION_1_133();
    v9();
    __swift_storeEnumTagSinglePayload(v1, 0, 1, v5);
    if (__swift_getEnumTagSinglePayload(v1, 1, v5) != 1)
    {
      OUTLINED_FUNCTION_1_133();
      return ((uint64_t (*)(void))v9)();
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    __swift_storeEnumTagSinglePayload(v1, 1, 1, v11);
  }
  id v12 = objc_msgSend(v0, sel_receivedAt);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  return outlined destroy of Date?(v1);
}

uint64_t SGURL.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  id v8 = objc_msgSend(v1, sel_documentDate);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v10 = OUTLINED_FUNCTION_8(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_63();
  if (!v8)
  {
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v4);
    goto LABEL_7;
  }
  MEMORY[0x1F4188790](v11);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v12 = *(void (**)(void))(v6 + 32);
  OUTLINED_FUNCTION_1_133();
  v12();
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v4);
  if (__swift_getEnumTagSinglePayload(v2, 1, v4) == 1)
  {
LABEL_7:
    outlined destroy of Date?(v2);
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_1_133();
  v12();
  if ((objc_msgSend(v1, sel_flags) & 0x40) != 0)
  {
    OUTLINED_FUNCTION_1_133();
    v12();
LABEL_11:
    uint64_t v15 = a1;
    uint64_t v16 = 0;
    return __swift_storeEnumTagSinglePayload(v15, v16, 1, v4);
  }
  if ((objc_msgSend(v1, sel_flags) & 0x20) != 0)
  {
    objc_msgSend(v1, sel_documentTimeInterval);
    Date.addingTimeInterval(_:)();
    uint64_t v17 = OUTLINED_FUNCTION_5_108();
    v18(v17);
    goto LABEL_11;
  }
  uint64_t v13 = OUTLINED_FUNCTION_5_108();
  v14(v13);
LABEL_8:
  uint64_t v15 = a1;
  uint64_t v16 = 1;
  return __swift_storeEnumTagSinglePayload(v15, v16, 1, v4);
}

uint64_t SGURL.receivedFromDisplayName(using:)()
{
  uint64_t v1 = outlined bridged method (pb) of @objc SGURL.receivedFromHandle.getter(v0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1;
  unint64_t v4 = v2;
  uint64_t v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v6 = self;
  uint64_t v7 = (void *)MEMORY[0x1C87730B0](v3, v4);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_normalizedHandleWithDestinationID_, v7);

  if (!v8) {
    return 0;
  }
  swift_retain();
  ParticipantContactDetailsCache.contactDetails(for:nickname:)();
  uint64_t v9 = v13;
  id v10 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ParticipantContactDetails.initialsFor(_:)(v12);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.localizedUppercase.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t SGURL.applicationLocalizedName.getter()
{
  id v0 = SGURL.applicationRecord.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = objc_msgSend(v0, sel_localizedName);
    uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v2 = objc_msgSend(self, sel_conversationKit);
    v8._object = (void *)0xE000000000000000;
    v4._uint64_t countAndFlagsBits = 0x6E776F6E6B6E55;
    v4._object = (void *)0xE700000000000000;
    v5.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
    v5.value._object = (void *)0xEF74694B6E6F6974;
    v6._uint64_t countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v8._uint64_t countAndFlagsBits = 0;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v2, v6, v8)._countAndFlagsBits;
  }

  return countAndFlagsBits;
}

uint64_t SGURL.hasEventDate.getter()
{
  id v1 = objc_msgSend(v0, sel_documentDate);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v3 = OUTLINED_FUNCTION_8(v2);
  MEMORY[0x1F4188790](v3);
  Swift::String_optional v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v1)
  {
    uint64_t v10 = type metadata accessor for Date();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v10);
    goto LABEL_7;
  }
  uint64_t v6 = type metadata accessor for Date();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_63();
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_1_133();
  v8();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
  {
LABEL_7:
    outlined destroy of Date?((uint64_t)v5);
    return 0;
  }
  outlined destroy of Date?((uint64_t)v5);
  if ((objc_msgSend(v0, sel_flags) & 0x20) != 0
    || (objc_msgSend(v0, sel_flags) & 0x80) != 0)
  {
    return 1;
  }
  else
  {
    return (objc_msgSend(v0, sel_flags) >> 6) & 1;
  }
}

id @nonobjc TUConversationLink.init(url:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  URL._bridgeToObjectiveC()(a2);
  uint64_t v4 = v3;
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conversationLinkForURL_, v3);

  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return v5;
}

id SGURL.applicationIcon.getter()
{
  id v0 = SGURL.applicationRecord.getter();
  if (!v0) {
    return 0;
  }
  id v1 = v0;
  uint64_t v2 = self;
  id v3 = objc_msgSend(v1, sel_compatibilityObject);
  id v4 = objc_msgSend(v2, sel__iconForResourceProxy_format_, v3, 5);

  return v4;
}

id SGURL.applicationRecord.getter()
{
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  id v5 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
  return @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v2, v4, 1);
}

uint64_t outlined bridged method (pb) of @objc SGURL.receivedFromHandle.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_receivedFromHandle);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id ConversationControlsTrailingActionsView.__allocating_init(recipe:controlsManager:menuHostViewController:context:)(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5)
{
  id v11 = objc_allocWithZone(v5);
  return ConversationControlsTrailingActionsView.init(recipe:controlsManager:menuHostViewController:context:)(a1, a2, a3, a4, a5);
}

uint64_t ConversationControlsTrailingActionsView.recipe.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15ConversationKit0A14ControlsRecipeVWOcTm_0(v1 + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_recipe, a1, (uint64_t (*)(void))type metadata accessor for ConversationControlsRecipe);
}

id ConversationControlsTrailingActionsView.controlsManager.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_controlsManager));
}

uint64_t ConversationControlsTrailingActionsView.context.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_context);
}

id ConversationControlsTrailingActionsView.alignmentView.getter()
{
  id v0 = ConversationControlsTrailingActionsView.actionButtonsHStack.getter();
  id v1 = objc_msgSend(v0, sel_arrangedSubviews);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      BOOL v4 = __OFSUB__(v3, 1);
      uint64_t v5 = v3 - 1;
      if (v4)
      {
        __break(1u);
      }
      else
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v5, (v2 & 0xC000000000000001) == 0, v2);
        if ((v2 & 0xC000000000000001) == 0)
        {
          id v6 = *(id *)(v2 + 8 * v5 + 32);
LABEL_6:
          id v7 = v6;
          swift_bridgeObjectRelease();
          return v7;
        }
      }
      id v6 = (id)MEMORY[0x1C87744F0](v5, v2);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

id ConversationControlsTrailingActionsView.actionButtonsHStack.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___actionButtonsHStack;
  unint64_t v2 = *(void **)((char *)v0
                + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___actionButtonsHStack);
  if (v2)
  {
    id v3 = *(id *)((char *)v0
               + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___actionButtonsHStack);
  }
  else
  {
    id v4 = closure #1 in ConversationControlsTrailingActionsView.actionButtonsHStack.getter(v0);
    uint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v4;
    id v3 = v4;

    unint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in ConversationControlsTrailingActionsView.actionButtonsHStack.getter(void *a1)
{
  uint64_t v40 = type metadata accessor for ConversationControlsAction();
  uint64_t v2 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  id v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C60]), sel_init);
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v5, sel_setAxis_, 0);
  static Layout.ConversationControls.values.getter((uint64_t)v42);
  objc_msgSend(v5, sel_setSpacing_, v42[15]);
  LODWORD(v6) = 1148846080;
  id v41 = v5;
  objc_msgSend(v5, sel_setContentHuggingPriority_forAxis_, 0, v6);
  id v7 = (char *)a1 + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_recipe;
  uint64_t v8 = type metadata accessor for ConversationControlsRecipe();
  if (v7[*(int *)(v8 + 44)] == 1)
  {
    id v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB8))();
    objc_msgSend(v41, sel_addArrangedSubview_, v9);
  }
  uint64_t v10 = &v7[*(int *)(v8 + 60)];
  uint64_t v11 = v10[40];
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = *(void *)v10;
    uint64_t v13 = *(void *)(*(void *)v10 + 16);
    if (v13)
    {
      uint64_t v14 = *((void *)v10 + 1);
      uint64_t v15 = *((void *)v10 + 2);
      uint64_t v16 = *((void *)v10 + 3);
      uint64_t v17 = *((void *)v10 + 4);
      uint64_t v18 = v12 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v19 = (char *)a1
          + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_menuHostViewController;
      uint64_t v39 = *(void *)((char *)a1
                      + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_controlsManager);
      uint64_t v36 = v14;
      uint64_t v37 = v12;
      uint64_t v34 = v16;
      uint64_t v35 = v15;
      uint64_t v33 = v17;
      int v38 = v11;
      outlined copy of ConversationControlsRecipe.Actions(v12, v14, v15, v16, v17, v11);
      uint64_t v20 = *(void *)(v2 + 72);
      do
      {
        unint64_t v21 = (void *)MEMORY[0x1C8776240](v19);
        ConversationControlsAction.button(controlsManager:menuHostViewController:context:options:)();
        uint64_t v23 = v22;

        id v24 = v23;
        static Layout.ConversationControls.iOS.getter((uint64_t)v43);
        objc_msgSend(v24, sel__setTouchInsets_, v43[31], v43[32], v43[33], v43[34]);

        objc_msgSend(v41, sel_addArrangedSubview_, v24);
        id v25 = objc_msgSend(v24, sel_widthAnchor);
        id v26 = objc_msgSend(v25, sel_constraintEqualToConstant_, 0.0);

        LODWORD(v27) = 1144733696;
        objc_msgSend(v26, sel_setPriority_, v27);
        objc_msgSend(v26, sel_setActive_, 1);

        _s15ConversationKit0A14ControlsRecipeVWOcTm_0(v18, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ConversationControlsAction);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload && EnumCaseMultiPayload != 9)
        {
          id v31 = v24;
          _s15ConversationKit0A14ControlsRecipeVWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ConversationControlsAction);
          LODWORD(v30) = 1144750080;
        }
        else
        {
          id v29 = v24;
          LODWORD(v30) = 1146388480;
        }
        objc_msgSend(v24, sel_setContentCompressionResistancePriority_forAxis_, 0, v30);

        v18 += v20;
        --v13;
      }
      while (v13);
      outlined consume of ConversationControlsRecipe.Actions?(v37, v36, v35, v34, v33, v38);
    }
  }
  return v41;
}

uint64_t key path getter for ConversationControlsTrailingActionsView.showCallDetailsButton : ConversationControlsTrailingActionsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationControlsTrailingActionsView.showCallDetailsButton : ConversationControlsTrailingActionsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0))(*a1);
}

id ConversationControlsTrailingActionsView.showCallDetailsButton.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___showCallDetailsButton;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___showCallDetailsButton);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___showCallDetailsButton);
  }
  else
  {
    id v4 = closure #1 in ConversationControlsTrailingActionsView.showCallDetailsButton.getter();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in ConversationControlsTrailingActionsView.showCallDetailsButton.getter()
{
  id v0 = objc_msgSend(self, sel_buttonWithType_, 4);
  objc_msgSend(v0, sel_setPointerInteractionEnabled_, 1);
  objc_msgSend(v0, sel_setMaximumContentSizeCategory_, *MEMORY[0x1E4FB2790]);
  id v1 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v0, sel_setTintColor_, v1);

  return v0;
}

void ConversationControlsTrailingActionsView.showCallDetailsButton.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1
                + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___showCallDetailsButton);
  *(void *)(v1
            + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___showCallDetailsButton) = a1;
}

void (*ConversationControlsTrailingActionsView.showCallDetailsButton.modify(id *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = ConversationControlsTrailingActionsView.showCallDetailsButton.getter();
  return ConversationControlsTrailingActionsView.showCallDetailsButton.modify;
}

void ConversationControlsTrailingActionsView.showCallDetailsButton.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    ConversationControlsTrailingActionsView.showCallDetailsButton.setter((uint64_t)v3);
  }
  else
  {
    ConversationControlsTrailingActionsView.showCallDetailsButton.setter((uint64_t)v2);
  }
}

uint64_t ConversationControlsTrailingActionsView.isOnlyShowingInfoButton.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_recipe;
  uint64_t v2 = type metadata accessor for ConversationControlsRecipe();
  id v3 = (uint64_t *)(v1 + *(int *)(v2 + 60));
  uint64_t v4 = *((char *)v3 + 40);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v5 = *v3;
    outlined copy of ConversationControlsRecipe.Actions(*v3, v3[1], v3[2], v3[3], v3[4], v4);
  }
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + *(int *)(v2 + 44));
  }
}

id ConversationControlsTrailingActionsView.init(recipe:controlsManager:menuHostViewController:context:)(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v11 = &v5[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_menuHostViewController];
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_menuHostViewController + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___actionButtonsHStack] = 0;
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___showCallDetailsButton] = 0;
  _s15ConversationKit0A14ControlsRecipeVWOcTm_0(a1, (uint64_t)&v5[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_recipe], (uint64_t (*)(void))type metadata accessor for ConversationControlsRecipe);
  *(void *)&v5[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_controlsManager] = a2;
  v5[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_context] = a5;
  *((void *)v11 + 1) = a4;
  swift_unknownObjectWeakAssign();
  v15.receiver = v5;
  v15.super_class = (Class)type metadata accessor for ConversationControlsTrailingActionsView();
  id v12 = a2;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  ConversationControlsTrailingActionsView.configureSubviews()();

  _s15ConversationKit0A14ControlsRecipeVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for ConversationControlsRecipe);
  return v13;
}

void ConversationControlsTrailingActionsView.configureSubviews()()
{
  id v1 = ConversationControlsTrailingActionsView.actionButtonsHStack.getter();
  objc_msgSend(v0, sel_addSubview_, v1);

  uint64_t v2 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C3769580;
  id v4 = ConversationControlsTrailingActionsView.actionButtonsHStack.getter();
  id v5 = objc_msgSend(v4, sel_topAnchor);

  id v6 = objc_msgSend(v0, sel_topAnchor);
  id v7 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v6);

  *(void *)(v3 + 32) = v7;
  id v8 = ConversationControlsTrailingActionsView.actionButtonsHStack.getter();
  id v9 = objc_msgSend(v8, sel_leadingAnchor);

  id v10 = objc_msgSend(v0, sel_leadingAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v3 + 40) = v11;
  id v12 = ConversationControlsTrailingActionsView.actionButtonsHStack.getter();
  id v13 = objc_msgSend(v12, sel_trailingAnchor);

  id v14 = objc_msgSend(v0, sel_trailingAnchor);
  id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  *(void *)(v3 + 48) = v15;
  id v16 = ConversationControlsTrailingActionsView.actionButtonsHStack.getter();
  id v17 = objc_msgSend(v16, sel_bottomAnchor);

  id v18 = objc_msgSend(v0, sel_bottomAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(void *)(v3 + 56) = v19;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, isa);
}

id ConversationControlsTrailingActionsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationControlsTrailingActionsView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView_menuHostViewController + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___actionButtonsHStack] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit39ConversationControlsTrailingActionsView____lazy_storage___showCallDetailsButton] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id ConversationControlsTrailingActionsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void ConversationControlsTrailingActionsView.init(frame:)()
{
}

id ConversationControlsTrailingActionsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationControlsTrailingActionsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ConversationControlsTrailingActionsView()
{
  uint64_t result = type metadata singleton initialization cache for ConversationControlsTrailingActionsView;
  if (!type metadata singleton initialization cache for ConversationControlsTrailingActionsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for ConversationControlsTrailingActionsView()
{
  return type metadata accessor for ConversationControlsTrailingActionsView();
}

uint64_t type metadata completion function for ConversationControlsTrailingActionsView()
{
  uint64_t result = type metadata accessor for ConversationControlsRecipe();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationControlsTrailingActionsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsTrailingActionsView);
}

uint64_t dispatch thunk of ConversationControlsTrailingActionsView.alignmentView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationControlsTrailingActionsView.showCallDetailsButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ConversationControlsTrailingActionsView.showCallDetailsButton.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ConversationControlsTrailingActionsView.showCallDetailsButton.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConversationControlsTrailingActionsView.isOnlyShowingInfoButton.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConversationControlsTrailingActionsView.__allocating_init(recipe:controlsManager:menuHostViewController:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t _s15ConversationKit0A14ControlsRecipeVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s15ConversationKit0A14ControlsRecipeVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, char *a2)
{
  uint64_t v43 = type metadata accessor for Participant.State(0);
  MEMORY[0x1F4188790](v43);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Participant(0);
  uint64_t v42 = *(void *)(v38 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v38);
  uint64_t v36 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  id v10 = (char *)&v33 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v40 = (uint64_t)&v33 - v12;
  MEMORY[0x1F4188790](v11);
  id v14 = (char *)&v33 - v13;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v44 = MEMORY[0x1E4FBC860];
  uint64_t v41 = *(void *)(a1 + 16);
  if (v41)
  {
    unint64_t v16 = 0;
    uint64_t v35 = (uint64_t (**)(char *))&a2[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_participantIsShownInGrid];
    uint64_t v37 = v5;
    do
    {
      if (v16 >= *(void *)(a1 + 16))
      {
        __break(1u);
        JUMPOUT(0x1C353F4A4);
      }
      unint64_t v17 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
      uint64_t v18 = *(void *)(v42 + 72);
      unint64_t v19 = v16 + 1;
      _s15ConversationKit11ParticipantVWOcTm_16(a1 + v17 + v18 * v16, (uint64_t)v14, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v14, (uint64_t)v5, (void (*)(void))type metadata accessor for Participant.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v23 = (uint64_t)&v5[*(int *)(v22 + 48)];
          outlined consume of Participant.CopresenceInfo?(*(void *)&v5[*(int *)(v22 + 64)], *(void *)&v5[*(int *)(v22 + 64) + 8]);
          outlined destroy of Participant.MediaInfo(v23);
          uint64_t v24 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v5, v24);
          uint64_t v25 = v40;
          _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v14, v40, (void (*)(void))type metadata accessor for Participant);
          unint64_t v39 = *(void *)(v25 + *(int *)(v38 + 28));
          uint64_t v26 = v25;
          uint64_t v5 = v37;
          _s15ConversationKit11ParticipantVWOhTm_10(v26, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v14, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
          if (!v39) {
            goto LABEL_7;
          }
          char v27 = (*v35)(v10);
          _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
          if (v27) {
            goto LABEL_8;
          }
          outlined init with take of Participant((uint64_t)v14, v36);
          uint64_t v28 = v44;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
            uint64_t v28 = v44;
          }
          unint64_t v30 = *(void *)(v28 + 16);
          unint64_t v29 = *(void *)(v28 + 24);
          unint64_t v31 = v30 + 1;
          if (v30 >= v29 >> 1)
          {
            unint64_t v39 = v30 + 1;
            unint64_t v34 = v30;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
            unint64_t v31 = v39;
            unint64_t v30 = v34;
            uint64_t v28 = v44;
          }
          *(void *)(v28 + 16) = v31;
          outlined init with take of Participant(v36, v28 + v17 + v30 * v18);
          break;
        case 6u:
          goto LABEL_6;
        default:
          uint64_t v20 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v5, v20);
LABEL_6:
          uint64_t v21 = v40;
          _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v14, v40, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOhTm_10(v21, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v14, (uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
LABEL_7:
          _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v10, (void (*)(void))type metadata accessor for Participant);
LABEL_8:
          _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v14, (void (*)(void))type metadata accessor for Participant);
          break;
      }
      unint64_t v16 = v19;
    }
    while (v41 != v19);
    uint64_t v15 = v44;
  }

  swift_bridgeObjectRelease();
  return v15;
}

{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  uint64_t (**v33)(char *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  unint64_t v39 = type metadata accessor for Participant.State(0);
  MEMORY[0x1F4188790](v39);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for Participant(0);
  uint64_t v38 = *(void *)(v35 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v35);
  unint64_t v34 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v31 - v8;
  id v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v31 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v31 - v14;
  unint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v40 = MEMORY[0x1E4FBC860];
  uint64_t v37 = *(void *)(v13 + 16);
  if (v37)
  {
    unint64_t v17 = 0;
    unint64_t v31 = a2;
    uint64_t v32 = v9;
    uint64_t v33 = (uint64_t (**)(char *))&a2[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_participantIsShownInGrid];
    uint64_t v36 = v13;
    while (1)
    {
      if (v17 >= *(void *)(v13 + 16))
      {
        __break(1u);
        JUMPOUT(0x1C353F9A0);
      }
      uint64_t v18 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      unint64_t v19 = *(void *)(v38 + 72);
      uint64_t v20 = v17 + 1;
      _s15ConversationKit11ParticipantVWOcTm_16(v13 + v18 + v19 * v17, (uint64_t)v15, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v15, (uint64_t)v4, (void (*)(void))type metadata accessor for Participant.State);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          char v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
          uint64_t v28 = (uint64_t)&v4[*(int *)(v27 + 48)];
          outlined consume of Participant.CopresenceInfo?(*(void *)&v4[*(int *)(v27 + 64)], *(void *)&v4[*(int *)(v27 + 64) + 8]);
          outlined destroy of Participant.MediaInfo(v28);
          unint64_t v29 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v4, v29);
          _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v15, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
          _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v15, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
          goto LABEL_14;
        case 6u:
          break;
        default:
          uint64_t v21 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v4, v21);
          break;
      }
      _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v15, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
      uint64_t v22 = *(void *)&v12[*(int *)(v35 + 28)];
      _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
      _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v15, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
      if (v22)
      {
        uint64_t v23 = (*v33)(v9);
        _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
        if ((v23 & 1) == 0)
        {
          outlined init with take of Participant((uint64_t)v15, v34);
          uint64_t v24 = v40;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
            uint64_t v24 = v40;
          }
          uint64_t v26 = *(void *)(v24 + 16);
          uint64_t v25 = *(void *)(v24 + 24);
          if (v26 >= v25 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
            uint64_t v24 = v40;
          }
          *(void *)(v24 + 16) = v26 + 1;
          outlined init with take of Participant(v34, v24 + v18 + v26 * v19);
          uint64_t v13 = v36;
          uint64_t v9 = v32;
          goto LABEL_16;
        }
      }
      else
      {
LABEL_14:
        _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
      }
      _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v15, (void (*)(void))type metadata accessor for Participant);
      uint64_t v13 = v36;
LABEL_16:
      unint64_t v17 = v20;
      if (v37 == v20)
      {
        unint64_t v16 = v40;
        a2 = v31;
        break;
      }
    }
  }

  swift_bridgeObjectRelease();
  return v16;
}

ConversationKit::ParticipantsCollectionViewDataSource::SectionType_optional __swiftcall ParticipantsCollectionViewDataSource.SectionType.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    v1.CMTimeValue value = ConversationKit_ParticipantsCollectionViewDataSource_SectionType_offline;
  }
  else {
    v1.CMTimeValue value = ConversationKit_ParticipantsCollectionViewDataSource_SectionType_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

void *static ParticipantsCollectionViewDataSource.SectionType.allCases.getter()
{
  return &outlined read-only object #0 of static ParticipantsCollectionViewDataSource.SectionType.allCases.getter;
}

uint64_t ParticipantsCollectionViewDataSource.SectionType.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParticipantsCollectionViewDataSource.SectionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticipantsCollectionViewDataSource.SectionType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantsCollectionViewDataSource.SectionType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ConversationKit::ParticipantsCollectionViewDataSource::SectionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ParticipantsCollectionViewDataSource.SectionType@<W0>(Swift::Int *a1@<X0>, ConversationKit::ParticipantsCollectionViewDataSource::SectionType_optional *a2@<X8>)
{
  result.CMTimeValue value = ParticipantsCollectionViewDataSource.SectionType.init(rawValue:)(*a1).value;
  a2->CMTimeValue value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ParticipantsCollectionViewDataSource.SectionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ParticipantsCollectionViewDataSource.SectionType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ParticipantsCollectionViewDataSource.SectionType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ParticipantsCollectionViewDataSource.SectionType.allCases.getter;
}

uint64_t ParticipantsCollectionViewDataSource.participants.getter()
{
  ConversationKit::ParticipantsCollectionViewDataSource::SectionType_optional v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants);
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_2();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  return v2;
}

uint64_t ParticipantsCollectionViewDataSource.onlineParticipants.getter()
{
  return ParticipantsCollectionViewDataSource.onlineParticipants.getter();
}

{
  OUTLINED_FUNCTION_2();
  return swift_bridgeObjectRetain();
}

uint64_t ParticipantsCollectionViewDataSource.offlineParticipants.getter()
{
  return ParticipantsCollectionViewDataSource.onlineParticipants.getter();
}

uint64_t key path getter for ParticipantsCollectionViewDataSource.didCreateCellForParticipant : ParticipantsCollectionViewDataSource@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1
                 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_didCreateCellForParticipant);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ParticipantCell, @in_guaranteed Participant) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v4);
}

uint64_t key path setter for ParticipantsCollectionViewDataSource.didCreateCellForParticipant : ParticipantsCollectionViewDataSource(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ParticipantCell, @in_guaranteed Participant) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2
                 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_didCreateCellForParticipant);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v3);
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v8);
}

uint64_t ParticipantsCollectionViewDataSource.didCreateCellForParticipant.getter()
{
  ConversationKit::ParticipantsCollectionViewDataSource::SectionType_optional v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_didCreateCellForParticipant);
  OUTLINED_FUNCTION_2();
  uint64_t v2 = *v1;
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(*v1);
  return v2;
}

uint64_t ParticipantsCollectionViewDataSource.didCreateCellForParticipant.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = *v2;
  *uint64_t v2 = a1;
  v2[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?(v5);
}

uint64_t (*ParticipantsCollectionViewDataSource.didCreateCellForParticipant.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

char *ParticipantsCollectionViewDataSource.__allocating_init(participants:participantIsShownInGrid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return ParticipantsCollectionViewDataSource.init(participants:participantIsShownInGrid:)(a1, a2, a3);
}

char *ParticipantsCollectionViewDataSource.init(participants:participantIsShownInGrid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants] = v7;
  uint64_t v8 = &v3[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_didCreateCellForParticipant];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = &v3[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_participantIsShownInGrid];
  *(void *)uint64_t v9 = a2;
  *((void *)v9 + 1) = a3;
  v19.receiver = v3;
  v19.super_class = ObjectType;
  swift_retain();
  id v10 = (char *)objc_msgSendSuper2(&v19, sel_init);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = specialized _ArrayProtocol.filter(_:)(v11, v10);
  uint64_t v13 = (uint64_t *)&v10[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants];
  swift_beginAccess();
  *uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  id v14 = v10;
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = specialized _ArrayProtocol.filter(_:)(v15, v14);
  swift_bridgeObjectRelease();

  swift_release();
  unint64_t v17 = (uint64_t *)&v14[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants];
  swift_beginAccess();
  *unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t ParticipantsCollectionViewDataSource.update(_:in:)(uint64_t a1, void *a2)
{
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v5);
  char v6 = OUTLINED_FUNCTION_2_124();
  *uint64_t v2 = static OS_dispatch_queue.main.getter();
  uint64_t v7 = OUTLINED_FUNCTION_19_3();
  v8(v7);
  _dispatchPreconditionTest(_:)();
  uint64_t v9 = OUTLINED_FUNCTION_21_2();
  uint64_t result = v10(v9);
  if (v6)
  {
    uint64_t result = type metadata accessor for Participant(0);
    if (*(void *)(a1 + *(int *)(result + 28)))
    {
      uint64_t v12 = result;
      uint64_t v13 = type metadata accessor for IndexPath();
      OUTLINED_FUNCTION_4();
      uint64_t v15 = v14;
      MEMORY[0x1F4188790](v16);
      OUTLINED_FUNCTION_64();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
      MEMORY[0x1F4188790](v17 - 8);
      objc_super v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      ParticipantsCollectionViewDataSource.indexPath(of:)(a1 + *(int *)(v12 + 20), (uint64_t)v19);
      if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v13) == 1)
      {
        return outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v19, &demangling cache variable for type metadata for IndexPath?);
      }
      else
      {
        (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 32))(v2, v19, v13);
        ParticipantsCollectionViewDataSource.updateExistingRosterParticipant(_:at:in:)(a1, v2, a2);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v2, v13);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ParticipantsCollectionViewDataSource.indexPath(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants);
  OUTLINED_FUNCTION_2();
  uint64_t v6 = *v5;
  uint64_t v20 = a1;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in ParticipantsCollectionViewDataSource.indexPath(of:), (uint64_t)v19, v6);
  char v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = 0;
LABEL_4:
    MEMORY[0x1C876F270](v7, v10);
    uint64_t v10 = 0;
    goto LABEL_5;
  }
  uint64_t v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants);
  uint64_t v12 = OUTLINED_FUNCTION_2();
  uint64_t v13 = *v11;
  MEMORY[0x1F4188790](v12);
  v18[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t))partial apply for closure #2 in ParticipantsCollectionViewDataSource.indexPath(of:), (uint64_t)v18, v13);
  char v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v10 = 1;
  if ((v15 & 1) == 0) {
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v16 = type metadata accessor for IndexPath();
  return __swift_storeEnumTagSinglePayload(a2, v10, 1, v16);
}

uint64_t ParticipantsCollectionViewDataSource.updateExistingRosterParticipant(_:at:in:)(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = v3;
  id v49 = a3;
  unint64_t v50 = (char *)a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Participant(0);
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v48 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v47 = (uint64_t)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v46 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (void *)((char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v17 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E4FBCBE8], v14);
  unint64_t v18 = _dispatchPreconditionTest(_:)();
  uint64_t v20 = *(void (**)(uint64_t *, uint64_t))(v15 + 8);
  objc_super v19 = (char *)(v15 + 8);
  v20(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  ParticipantsCollectionViewDataSource.participant(at:)((uint64_t)a2, (uint64_t)v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1) {
    return outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v8, &demangling cache variable for type metadata for Participant?);
  }
  objc_super v19 = (char *)v4;
  uint64_t v4 = (uint64_t)v13;
  outlined init with take of Participant((uint64_t)v8, (uint64_t)v13);
  uint64_t v13 = v50;
  if ((*(uint64_t (**)(char *))&v19[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_participantIsShownInGrid])(v50)) {
    return _s15ConversationKit11ParticipantVWOhTm_10(v4, (void (*)(void))type metadata accessor for Participant);
  }
  int v22 = Participant.isActive.getter();
  if ((v22 ^ Participant.isActive.getter()))
  {
    uint64_t v23 = type metadata accessor for IndexPath();
    v46[1] = v46;
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(void *)(v24 + 64);
    __n128 v26 = MEMORY[0x1F4188790](v23);
    char v27 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v24 + 16))(v27, a2, v23, v26);
    uint64_t v28 = v47;
    _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)v13, v47, (void (*)(void))type metadata accessor for Participant);
    uint64_t v29 = *(unsigned __int8 *)(v24 + 80);
    unint64_t v50 = (char *)v4;
    unint64_t v30 = v19;
    uint64_t v31 = (v29 + 16) & ~v29;
    unint64_t v32 = (v25 + *(unsigned __int8 *)(v48 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    unint64_t v33 = (v10 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v34 + v31, v27, v23);
    outlined init with take of Participant(v28, v34 + v32);
    *(void *)(v34 + v33) = v30;
    id v35 = v49;
    *(void *)(v34 + ((v33 + 15) & 0xFFFFFFFFFFFFFFF8)) = v49;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for closure #1 in ParticipantsCollectionViewDataSource.updateExistingRosterParticipant(_:at:in:);
    *(void *)(v36 + 24) = v34;
    void aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_31_1;
    uint64_t v37 = _Block_copy(aBlock);
    swift_retain_n();
    id v38 = v30;
    id v39 = v35;
    swift_release();
    objc_msgSend(v39, sel_performBatchUpdates_completion_, v37, 0);
    _Block_release(v37);
    swift_release();
    _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v50, (void (*)(void))type metadata accessor for Participant);
    return swift_release_n();
  }
  uint64_t v40 = IndexPath.section.getter();
  unint64_t v18 = IndexPath.item.getter();
  if (!v40) {
    goto LABEL_12;
  }
  a2 = (uint64_t *)&v19[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants];
  swift_beginAccess();
  uint64_t v41 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v41;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_22:
    uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()();
    *a2 = v41;
    if ((v18 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((v18 & 0x8000000000000000) != 0) {
    goto LABEL_23;
  }
LABEL_10:
  if (v18 < *(void *)(v41 + 16)) {
    goto LABEL_15;
  }
  __break(1u);
LABEL_12:
  a2 = (uint64_t *)&v19[OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants];
  swift_beginAccess();
  uint64_t v41 = *a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v41;
  if (result)
  {
    if ((v18 & 0x8000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_24:
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()();
  uint64_t v41 = result;
  *a2 = result;
  if ((v18 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
LABEL_14:
  if (v18 >= *(void *)(v41 + 16))
  {
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_15:
  outlined assign with copy of Participant((uint64_t)v13, v41+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v18);
  swift_endAccess();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v44 = objc_msgSend(v49, sel_cellForItemAtIndexPath_, isa);

  if (v44)
  {
    type metadata accessor for ParticipantCell();
    uint64_t v45 = swift_dynamicCastClass();
    if (v45) {
      ParticipantsCollectionViewDataSource.configureCell(_:with:)(v45, (uint64_t)v13);
    }
  }
  return _s15ConversationKit11ParticipantVWOhTm_10(v4, (void (*)(void))type metadata accessor for Participant);
}

uint64_t ParticipantsCollectionViewDataSource.update(_:in:with:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_2_124();
  *uint64_t v3 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v3, *MEMORY[0x1E4FBCBE8], v7);
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v3, v7);
  if (v11)
  {
    uint64_t result = type metadata accessor for Participant(0);
    if (*(void *)(a1 + *(int *)(result + 28)))
    {
      uint64_t v13 = result;
      uint64_t v14 = type metadata accessor for IndexPath();
      OUTLINED_FUNCTION_4();
      uint64_t v16 = v15;
      MEMORY[0x1F4188790](v17);
      OUTLINED_FUNCTION_64();
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
      MEMORY[0x1F4188790](v18 - 8);
      OUTLINED_FUNCTION_61();
      ParticipantsCollectionViewDataSource.indexPath(of:)(a1 + *(int *)(v13 + 20), a3);
      if (__swift_getEnumTagSinglePayload(a3, 1, v14) == 1)
      {
        return outlined destroy of Environment<RedactionReasons>.Content(a3, &demangling cache variable for type metadata for IndexPath?);
      }
      else
      {
        OUTLINED_FUNCTION_16_55();
        v19();
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        id v21 = objc_msgSend(a2, sel_cellForItemAtIndexPath_, isa);

        if (v21)
        {
          type metadata accessor for ParticipantCell();
          uint64_t v22 = swift_dynamicCastClass();
          if (v22) {
            ParticipantsCollectionViewDataSource.configureCell(_:with:)(v22, a3);
          }
        }
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8))(v3, v14);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ParticipantsCollectionViewDataSource.configureCell(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10_76();
  *uint64_t v2 = static OS_dispatch_queue.main.getter();
  uint64_t v8 = OUTLINED_FUNCTION_11_69();
  v9(v8);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v2, v4);
  if (v10)
  {
    static Participant.affineTransformForRemote(_:)(a2, &to.a);
    ParticipantView.updateLayerTransform(to:)(&to);
  }
  else
  {
    __break(1u);
  }
}

void ParticipantsCollectionViewDataSource.participant(at:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = IndexPath.section.getter();
  if (v6 != 1)
  {
    if (v6)
    {
      type metadata accessor for Participant(0);
      uint64_t v13 = OUTLINED_FUNCTION_47_0();
      goto LABEL_14;
    }
    uint64_t v7 = IndexPath.item.getter();
    v3 += OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants;
    OUTLINED_FUNCTION_2();
    if (v7 >= *(void *)(*(void *)v3 + 16)) {
      goto LABEL_15;
    }
    if (IndexPath.item.getter() < 0)
    {
      __break(1u);
      goto LABEL_17;
    }
    OUTLINED_FUNCTION_19_51();
    if (!v8) {
      goto LABEL_11;
    }
    __break(1u);
  }
  uint64_t v7 = IndexPath.item.getter();
  uint64_t v9 = v3 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants;
  OUTLINED_FUNCTION_2();
  if (v7 >= *(void *)(*(void *)v9 + 16))
  {
LABEL_15:
    type metadata accessor for Participant(0);
    uint64_t v13 = OUTLINED_FUNCTION_47_0();
    goto LABEL_14;
  }
  if (IndexPath.item.getter() < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_19_51();
  if (!v8)
  {
LABEL_11:
    uint64_t v10 = type metadata accessor for Participant(0);
    OUTLINED_FUNCTION_5_7();
    _s15ConversationKit11ParticipantVWOcTm_16(v7+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v12 + 72) * a1, a2, (void (*)(void))type metadata accessor for Participant);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = 1;
    uint64_t v16 = v10;
LABEL_14:
    __swift_storeEnumTagSinglePayload(v13, v14, v15, v16);
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t closure #1 in ParticipantsCollectionViewDataSource.updateExistingRosterParticipant(_:at:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v49 = a4;
  *(void *)&long long v47 = a3;
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for IndexPath();
  uint64_t v13 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  unint64_t v50 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (IndexPath.section.getter())
  {
    uint64_t v46 = (uint64_t (*)(uint64_t))v7;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1C3769620;
    _s15ConversationKit11ParticipantVWOcTm_16(a2, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
    uint64_t v16 = specialized >> prefix<A>(_:)();
    uint64_t v18 = v17;
    outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v12, &demangling cache variable for type metadata for Participant?);
    *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = a1;
    IndexPath.item.getter();
    uint64_t v20 = v47;
    swift_beginAccess();
    specialized Array.remove(at:)();
    swift_endAccess();
    _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    id v21 = (uint64_t *)(v20 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants);
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v22 = *(void *)(*v21 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
    uint64_t v23 = *v21;
    *(void *)(v23 + 16) = v22 + 1;
    _s15ConversationKit11ParticipantVWOcTm_16(a2, v23+ ((*((unsigned __int8 *)v46 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v46 + 80))+ *((void *)v46 + 9) * v22, (void (*)(void))type metadata accessor for Participant);
    uint64_t v24 = *v21;
    swift_endAccess();
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v26 = a1;
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    uint64_t v45 = static OS_os_log.conversationKit;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1C3769620;
    uint64_t v46 = type metadata accessor for Participant;
    _s15ConversationKit11ParticipantVWOcTm_16(a2, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
    uint64_t v25 = 1;
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
    uint64_t v28 = specialized >> prefix<A>(_:)();
    uint64_t v30 = v29;
    outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v12, &demangling cache variable for type metadata for Participant?);
    *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v27 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v30;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = v26;
    IndexPath.item.getter();
    uint64_t v31 = v47;
    swift_beginAccess();
    specialized Array.remove(at:)();
    swift_endAccess();
    _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    unint64_t v32 = (uint64_t *)(v31 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants);
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v33 = *(void *)(*v32 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
    uint64_t v34 = *v32;
    *(void *)(v34 + 16) = v33 + 1;
    _s15ConversationKit11ParticipantVWOcTm_16(a2, v34+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v33, (void (*)(void))v46);
    uint64_t v24 = *v32;
    swift_endAccess();
  }
  MEMORY[0x1C876F270](*(void *)(v24 + 16) - 1, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  unint64_t v35 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v36 = swift_allocObject();
  long long v47 = xmmword_1C3769620;
  *(_OWORD *)(v36 + 16) = xmmword_1C3769620;
  uint64_t v37 = *(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v38 = v48;
  v37(v36 + v35, v19, v48);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v40 = v49;
  objc_msgSend(v49, sel_deleteItemsAtIndexPaths_, isa);

  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v47;
  uint64_t v42 = v50;
  v37(v41 + v35, (uint64_t)v50, v38);
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_insertItemsAtIndexPaths_, v43);

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v42, v38);
}

uint64_t ParticipantsCollectionViewDataSource.configureCell(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v60 = type metadata accessor for Participant(0);
  MEMORY[0x1F4188790](v60);
  uint64_t v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ParticipantViewModel(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v52 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v18 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4FBCBE8], v15);
  uint64_t v19 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v59 = v14;
  uint64_t v62 = v5;
  uint64_t v63 = v11;
  uint64_t v64 = v9;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v61 = &v52;
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  MEMORY[0x1F4188790](v19);
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (char *)&v52 - v22;
  uint64_t v65 = a1;
  uint64_t v23 = a1 + OBJC_IVAR____TtC15ConversationKit15ParticipantCell_participantIdentifier;
  swift_beginAccess();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v2 = *(void *)(*(void *)(v24 - 8) + 64);
  MEMORY[0x1F4188790](v24 - 8);
  outlined init with copy of UUID?(v23, (uint64_t)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v19) != 1)
  {
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))((char *)&v52 - v22, (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
    uint64_t v26 = v66 + *(int *)(v60 + 20);
    MEMORY[0x1F4188790](v25);
    unint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v58((char *)&v52 - v22, v26, v19);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
    v28((char *)&v52 - v22, v19);
    if (v27)
    {
      v28(v14, v19);
      goto LABEL_8;
    }
    uint64_t v55 = v26;
    __n128 v57 = v28;
    if (one-time initialization token for conversationKit == -1)
    {
LABEL_7:
      uint64_t v56 = static OS_os_log.conversationKit;
      HIDWORD(v54) = static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v29 = swift_allocObject();
      uint64_t v52 = (uint64_t)&v52;
      *(_OWORD *)(v29 + 16) = xmmword_1C376BA10;
      MEMORY[0x1F4188790](v29);
      unint64_t v53 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v30 = (char *)&v52 - v53;
      uint64_t v31 = v58;
      v58((char *)&v52 - v53, (uint64_t)v14, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v19);
      uint64_t v32 = specialized >> prefix<A>(_:)((uint64_t)v30);
      uint64_t v34 = v33;
      outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      *(void *)(v29 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v35 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v52 = (uint64_t)&v52;
      *(void *)(v29 + 64) = v35;
      *(void *)(v29 + 32) = v32;
      *(void *)(v29 + 40) = v34;
      MEMORY[0x1F4188790](v35);
      uint64_t v36 = (char *)&v52 - v53;
      v31((char *)&v52 - v53, v55, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v19);
      uint64_t v37 = specialized >> prefix<A>(_:)((uint64_t)v36);
      uint64_t v39 = v38;
      outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v40 = MEMORY[0x1E4FBB1A0];
      *(void *)(v29 + 96) = MEMORY[0x1E4FBB1A0];
      *(void *)(v29 + 104) = v35;
      *(void *)(v29 + 72) = v37;
      *(void *)(v29 + 80) = v39;
      uint64_t v41 = (uint64_t)v59;
      _s15ConversationKit11ParticipantVWOcTm_16(v66, (uint64_t)v59, (void (*)(void))type metadata accessor for Participant);
      __swift_storeEnumTagSinglePayload(v41, 0, 1, v60);
      uint64_t v42 = specialized >> prefix<A>(_:)();
      uint64_t v44 = v43;
      outlined destroy of Environment<RedactionReasons>.Content(v41, &demangling cache variable for type metadata for Participant?);
      *(void *)(v29 + 136) = v40;
      *(void *)(v29 + 144) = v35;
      *(void *)(v29 + 112) = v42;
      *(void *)(v29 + 120) = v44;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      v57(v14, v19);
      goto LABEL_8;
    }
LABEL_10:
    swift_once();
    goto LABEL_7;
  }
  outlined destroy of Environment<RedactionReasons>.Content((uint64_t)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_8:
  uint64_t v45 = (uint64_t)v62;
  _s15ConversationKit11ParticipantVWOcTm_16(v66, (uint64_t)v62, (void (*)(void))type metadata accessor for Participant);
  LOWORD(v50) = 257;
  LOBYTE(v49) = 1;
  uint64_t v46 = (uint64_t)v63;
  ParticipantViewModel.init(participant:videoProviderType:isInGrid:isMostActive:isPipped:isPreviewingReaction:hasOtherInvitedParticipants:isLocalMemberAuthorizedToChangeGroupMembership:prefersSnapshotFadeAnimation:snapshotImage:allowsVideoCroppedByAspectRatio:shouldRegisterVideoLayers:)(v45, 1, 0, 0, 0, 0, 0, 0, v49, 0, v50, v51, v52, v53, v54, v55, v56, (uint64_t)v57, (uint64_t)v58,
    (uint64_t)v59,
    v60,
    v61,
    v62,
    BYTE1(v62));
  uint64_t v47 = (uint64_t)v64;
  ParticipantViewModel.compatibleWithRoster.getter();
  ParticipantCell.configure(with:)();
  _s15ConversationKit11ParticipantVWOhTm_10(v47, (void (*)(void))type metadata accessor for ParticipantViewModel);
  return _s15ConversationKit11ParticipantVWOhTm_10(v46, (void (*)(void))type metadata accessor for ParticipantViewModel);
}

uint64_t ParticipantsCollectionViewDataSource.updateAudioPower(forParticipant:in:withPower:)(uint64_t a1, void *a2, Swift::Float a3)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_10_76();
  *uint64_t v3 = static OS_dispatch_queue.main.getter();
  uint64_t v14 = OUTLINED_FUNCTION_11_69();
  v15(v14);
  unint64_t v16 = _dispatchPreconditionTest(_:)();
  uint64_t v18 = *(void (**)(uint64_t *, uint64_t))(v12 + 8);
  uint64_t v17 = v12 + 8;
  v18(v3, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v10 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v3 = (uint64_t *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v5 = &v30;
  MEMORY[0x1F4188790](v22 - 8);
  OUTLINED_FUNCTION_61();
  uint64_t v17 = type metadata accessor for Participant(0);
  ParticipantsCollectionViewDataSource.indexPath(of:)(a1 + *(int *)(v17 + 20), v4);
  if (__swift_getEnumTagSinglePayload(v4, 1, v10) == 1) {
    return outlined destroy of Environment<RedactionReasons>.Content(v4, &demangling cache variable for type metadata for IndexPath?);
  }
  OUTLINED_FUNCTION_16_55();
  v24();
  uint64_t v25 = IndexPath.section.getter();
  unint64_t v16 = IndexPath.item.getter();
  if (!v25) {
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_12_69();
  uint64_t v26 = v30;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v30 = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_19:
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()();
    uint64_t *v5 = v26;
    if ((v16 & 0x8000000000000000) == 0) {
      goto LABEL_7;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_20;
  }
LABEL_7:
  if (v16 < *(void *)(v26 + 16)) {
    goto LABEL_12;
  }
  __break(1u);
LABEL_9:
  OUTLINED_FUNCTION_12_69();
  uint64_t v26 = *v5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v5 = v26;
  if (result)
  {
    if ((v16 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()();
  uint64_t v26 = result;
  uint64_t *v5 = result;
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if (v16 >= *(void *)(v26 + 16))
  {
LABEL_23:
    __break(1u);
    return result;
  }
LABEL_12:
  outlined assign with copy of Participant(a1, v26+ ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80))+ *(void *)(*(void *)(v17 - 8) + 72) * v16);
  swift_endAccess();
  if (a2)
  {
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v29 = objc_msgSend(a2, sel_cellForItemAtIndexPath_, isa);

    if (v29)
    {
      type metadata accessor for ParticipantCell();
      if (swift_dynamicCastClass()) {
        ParticipantsCollectionViewDataSource.updateAudioPower(forCell:withPower:)(a3);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v3, v10);
}

void ParticipantsCollectionViewDataSource.updateAudioPower(forCell:withPower:)(Swift::Float a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  uint64_t *v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBE8], v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6) {
    ParticipantMonogramView.updateAudioVisualization(with:)(a1);
  }
  else {
    __break(1u);
  }
}

Swift::Void __swiftcall ParticipantsCollectionViewDataSource.set(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OUTLINED_FUNCTION_18_58();
  uint64_t v4 = specialized _ArrayProtocol.filter(_:)(v3, (char *)v1);
  uint64_t v5 = (uint64_t *)((char *)v1
                 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants);
  swift_beginAccess();
  uint64_t *v5 = v4;
  swift_bridgeObjectRelease();
  char v6 = v1;
  uint64_t v7 = OUTLINED_FUNCTION_18_58();
  uint64_t v8 = specialized _ArrayProtocol.filter(_:)(v7, (char *)v1);
  OUTLINED_FUNCTION_0_1();
  *ConversationKit::ParticipantsCollectionViewDataSource::SectionType_optional v1 = v8;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ParticipantsCollectionViewDataSource.set(_:in:)(Swift::OpaquePointer _, UICollectionView *in)
{
  uint64_t v4 = v2;
  type metadata accessor for DispatchPredicate();
  OUTLINED_FUNCTION_4();
  MEMORY[0x1F4188790](v7);
  unint64_t v8 = OUTLINED_FUNCTION_2_124();
  *uint64_t v3 = static OS_dispatch_queue.main.getter();
  uint64_t v9 = OUTLINED_FUNCTION_19_3();
  v10(v9);
  _dispatchPreconditionTest(_:)();
  uint64_t v11 = OUTLINED_FUNCTION_21_2();
  v12(v11);
  if (v8)
  {
    id v13 = v4;
    uint64_t v14 = OUTLINED_FUNCTION_18_58();
    uint64_t v15 = specialized _ArrayProtocol.filter(_:)(v14, (char *)v8);
    id v16 = (id)v8;
    uint64_t v17 = OUTLINED_FUNCTION_18_58();
    uint64_t v18 = specialized _ArrayProtocol.filter(_:)(v17, (char *)v8);
    uint64_t v19 = (uint64_t *)(v8 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants);
    OUTLINED_FUNCTION_2();
    uint64_t v20 = *v19;
    swift_bridgeObjectRetain();
    char v21 = ParticipantsCollectionViewDataSource.participantArrayHasEqualIdentifiers(_:to:)(v15, v20);
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0
      && (uint64_t v22 = (uint64_t *)(v8
                          + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants),
          OUTLINED_FUNCTION_2(),
          uint64_t v23 = *v22,
          swift_bridgeObjectRetain(),
          char v24 = ParticipantsCollectionViewDataSource.participantArrayHasEqualIdentifiers(_:to:)(v18, v23),
          swift_bridgeObjectRelease(),
          (v24 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = (void *)swift_allocObject();
      void v25[2] = v8;
      v25[3] = v18;
      v25[4] = in;
      v25[5] = v15;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = partial apply for closure #1 in ParticipantsCollectionViewDataSource.set(_:in:);
      *(void *)(v26 + 24) = v25;
      uint64_t v38 = partial apply for thunk for @callee_guaranteed () -> ();
      uint64_t v39 = v26;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v35 = 1107296256;
      uint64_t v36 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v37 = &block_descriptor_93;
      char v27 = _Block_copy(&aBlock);
      id v28 = (id)v8;
      id v29 = in;
      swift_release();
      uint64_t v30 = (Swift::OpaquePointer *)swift_allocObject();
      v30[2]._rawValue = _._rawValue;
      v30[3]._rawValue = v28;
      v30[4]._rawValue = v29;
      uint64_t v38 = partial apply for closure #2 in ParticipantsCollectionViewDataSource.set(_:in:);
      uint64_t v39 = (uint64_t)v30;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v35 = 1107296256;
      uint64_t v36 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v37 = &block_descriptor_9_3;
      uint64_t v31 = _Block_copy(&aBlock);
      id v32 = v28;
      swift_bridgeObjectRetain();
      uint64_t v33 = v29;
      swift_release();
      [(UICollectionView *)v33 performBatchUpdates:v27 completion:v31];
      _Block_release(v31);
      _Block_release(v27);
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t ParticipantsCollectionViewDataSource.participantArrayHasEqualIdentifiers(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = type metadata accessor for Participant(0);
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  char v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v33 = a2;
    uint64_t v40 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v37 = *(void *)(v11 + 64);
    uint64_t v38 = v9;
    uint64_t v34 = v4;
    uint64_t v12 = *(void *)(v4 + 72);
    uint64_t v35 = v11 + 32;
    uint64_t v36 = v12;
    do
    {
      MEMORY[0x1F4188790](v9);
      uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_16(v8, (uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, &v6[*(int *)(v39 + 20)], v10);
      _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
      uint64_t v15 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v40;
      }
      unint64_t v17 = *(void *)(v15 + 16);
      unint64_t v16 = *(void *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v15 = v40;
      }
      *(void *)(v15 + 16) = v17 + 1;
      uint64_t v10 = v38;
      uint64_t v9 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v17, v14, v38);
      uint64_t v40 = v15;
      v8 += v36;
      --v7;
    }
    while (v7);
    a2 = v33;
    uint64_t v4 = v34;
  }
  specialized Set.init<A>(_:)();
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19)
  {
    uint64_t v34 = v18;
    uint64_t v40 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v20 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v21 = type metadata accessor for UUID();
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(v21 - 8);
    uint64_t v37 = *(void *)(v23 + 64);
    uint64_t v38 = v21;
    uint64_t v24 = *(void *)(v4 + 72);
    uint64_t v35 = v23 + 32;
    uint64_t v36 = v24;
    do
    {
      MEMORY[0x1F4188790](v21);
      uint64_t v26 = (char *)&v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      _s15ConversationKit11ParticipantVWOcTm_16(v20, (uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, &v6[*(int *)(v39 + 20)], v22);
      _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v6, (void (*)(void))type metadata accessor for Participant);
      uint64_t v27 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
        uint64_t v27 = v40;
      }
      unint64_t v29 = *(void *)(v27 + 16);
      unint64_t v28 = *(void *)(v27 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v27 = v40;
      }
      *(void *)(v27 + 16) = v29 + 1;
      uint64_t v22 = v38;
      uint64_t v21 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v23 + 32))(v27+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v29, v26, v38);
      uint64_t v40 = v27;
      v20 += v36;
      --v19;
    }
    while (v19);
  }
  specialized Set.init<A>(_:)();
  specialized static Set.== infix(_:_:)();
  char v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v31 & 1;
}

uint64_t closure #1 in ParticipantsCollectionViewDataSource.set(_:in:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v259 = a3;
  v260 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Participant>);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v234 = (uint64_t)&v231 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v235 = (uint64_t)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v237 = (uint64_t)&v231 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v240 = (uint64_t)&v231 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v244 = (uint64_t)&v231 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  v242 = (char *)&v231 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v245 = (uint64_t *)((char *)&v231 - v20);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v250 = (uint64_t)&v231 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v255 = (uint64_t)&v231 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v251 = (uint64_t)&v231 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v263 = (uint64_t)&v231 - v27;
  uint64_t v28 = type metadata accessor for Participant(0);
  uint64_t v266 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t v233 = (uint64_t)&v231 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v243 = (uint64_t)&v231 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v236 = (uint64_t)&v231 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v267 = (uint64_t)&v231 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v248 = (uint64_t)&v231 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v231 - v40;
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  uint64_t v238 = (uint64_t)&v231 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  v239 = (char *)&v231 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v249 = (uint64_t)&v231 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  id v246 = (uint64_t *)((char *)&v231 - v49);
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v52 = (char *)&v231 - v51;
  uint64_t v53 = MEMORY[0x1F4188790](v50);
  unint64_t v269 = (unint64_t)&v231 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v253 = (uint64_t)&v231 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v247 = (uint64_t *)((char *)&v231 - v58);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v61 = (char *)&v231 - v60;
  MEMORY[0x1F4188790](v59);
  uint64_t v256 = (uint64_t)&v231 - v62;
  uint64_t v63 = type metadata accessor for DispatchPredicate();
  uint64_t v64 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v66 = (uint64_t *)((char *)&v231 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v66 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v64 + 104))(v66, *MEMORY[0x1E4FBCBE8], v63);
  char v67 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v64 + 8))(v66, v63);
  if ((v67 & 1) == 0) {
    goto LABEL_132;
  }
  unint64_t v241 = (unint64_t)v41;
  uint64_t v232 = a1;
  uint64_t v68 = (uint64_t *)(a1 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants);
  swift_beginAccess();
  uint64_t v265 = v68;
  uint64_t v69 = *(void *)(*v68 + 16) - 1;
  uint64_t v70 = swift_bridgeObjectRetain();
  LODWORD(v252) = 0;
  long long v257 = xmmword_1C37696D0;
  long long v268 = xmmword_1C3769620;
  uint64_t v262 = a4;
  uint64_t v71 = v260;
  uint64_t v261 = v52;
  uint64_t v72 = v256;
  for (i = (void (*)(char *, uint64_t))v70; ; uint64_t v70 = (uint64_t)i)
  {
    if (v69 > 0)
    {
      uint64_t v73 = v69 - 1;
      goto LABEL_7;
    }
    if ((v69 != 0) | v252 & 1) {
      break;
    }
    uint64_t v73 = 0;
    LODWORD(v252) = 1;
LABEL_7:
    if ((unint64_t)v69 >= *(void *)(v70 + 16))
    {
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    uint64_t v270 = v73;
    unint64_t v74 = (*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80);
    uint64_t v75 = *(void *)(v266 + 72);
    uint64_t v264 = v75 * v69;
    _s15ConversationKit11ParticipantVWOcTm_16(v70 + v74 + v75 * v69, v72, (void (*)(void))type metadata accessor for Participant);
    uint64_t v76 = v71[2];
    if (v76)
    {
      unint64_t v77 = v74;
      uint64_t v78 = (uint64_t)v71 + v74;
      swift_bridgeObjectRetain();
      while (1)
      {
        _s15ConversationKit11ParticipantVWOcTm_16(v78, (uint64_t)v61, (void (*)(void))type metadata accessor for Participant);
        char v79 = static UUID.== infix(_:_:)();
        _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v61, (void (*)(void))type metadata accessor for Participant);
        if (v79) {
          break;
        }
        v78 += v75;
        if (!--v76)
        {
          swift_bridgeObjectRelease();
          uint64_t v72 = v256;
          unint64_t v74 = v77;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v52 = v261;
      a4 = v262;
    }
    else
    {
LABEL_13:
      unint64_t v258 = v74;
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = v257;
      uint64_t v81 = v263;
      _s15ConversationKit11ParticipantVWOcTm_16(v72, v263, (void (*)(void))type metadata accessor for Participant);
      __swift_storeEnumTagSinglePayload(v81, 0, 1, v28);
      uint64_t v82 = v81;
      uint64_t v83 = v251;
      outlined init with copy of UUID?(v82, v251, &demangling cache variable for type metadata for Participant?);
      if (__swift_getEnumTagSinglePayload(v83, 1, v28) == 1)
      {
        outlined destroy of Environment<RedactionReasons>.Content(v83, &demangling cache variable for type metadata for Participant?);
        unint64_t v84 = 0xE300000000000000;
        uint64_t v85 = 7104878;
      }
      else
      {
        uint64_t v86 = (uint64_t)v247;
        outlined init with take of Participant(v83, (uint64_t)v247);
        _s15ConversationKit11ParticipantVWOcTm_16(v86, v253, (void (*)(void))type metadata accessor for Participant);
        uint64_t v85 = String.init<A>(reflecting:)();
        unint64_t v84 = v87;
        _s15ConversationKit11ParticipantVWOhTm_10(v86, (void (*)(void))type metadata accessor for Participant);
      }
      outlined destroy of Environment<RedactionReasons>.Content(v263, &demangling cache variable for type metadata for Participant?);
      uint64_t v88 = MEMORY[0x1E4FBB1A0];
      *(void *)(v80 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v89 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v80 + 64) = v89;
      *(void *)(v80 + 32) = v85;
      *(void *)(v80 + 40) = v84;
      uint64_t v273 = v69;
      uint64_t v90 = String.init<A>(reflecting:)();
      *(void *)(v80 + 96) = v88;
      *(void *)(v80 + 104) = v89;
      *(void *)(v80 + 72) = v90;
      *(void *)(v80 + 80) = v91;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      uint64_t v92 = v265;
      swift_beginAccess();
      uint64_t v93 = *v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew()();
      }
      uint64_t v71 = v260;
      uint64_t v52 = v261;
      uint64_t v94 = *(void *)(v93 + 16);
      a4 = v262;
      if (v69 >= v94) {
        goto LABEL_126;
      }
      uint64_t v95 = v94 - 1;
      unint64_t v96 = v93 + v258 + v264;
      _s15ConversationKit11ParticipantVWOhTm_10(v96, (void (*)(void))type metadata accessor for Participant);
      if (v95 - v69 < 0) {
        goto LABEL_133;
      }
      if (v75 > 0 || v96 >= v96 + v75 + (v95 - v69) * v75)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v75)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      *(void *)(v93 + 16) = v95;
      *uint64_t v265 = v93;
      swift_endAccess();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
      type metadata accessor for IndexPath();
      *(_OWORD *)(swift_allocObject() + 16) = v268;
      MEMORY[0x1C876F270](v69, 1);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v259, sel_deleteItemsAtIndexPaths_, isa);
    }
    uint64_t v72 = v256;
    _s15ConversationKit11ParticipantVWOhTm_10(v256, (void (*)(void))type metadata accessor for Participant);
    uint64_t v69 = v270;
  }
  uint64_t v270 = v28;
  swift_bridgeObjectRelease();
  uint64_t v99 = (uint64_t *)(v232 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants);
  swift_beginAccess();
  uint64_t v264 = (uint64_t)v99;
  uint64_t v100 = *v99;
  uint64_t v272 = MEMORY[0x1E4FBC860];
  uint64_t v101 = *(void *)(v100 + 16) - 1;
  uint64_t v102 = swift_bridgeObjectRetain();
  LODWORD(v252) = 0;
  for (i = (void (*)(char *, uint64_t))v102; ; uint64_t v102 = (uint64_t)i)
  {
    if (v101 > 0)
    {
      uint64_t v103 = v101 - 1;
      uint64_t v104 = v270;
      goto LABEL_38;
    }
    uint64_t v104 = v270;
    if ((v101 != 0) | v252 & 1) {
      break;
    }
    uint64_t v103 = 0;
    LODWORD(v252) = 1;
LABEL_38:
    if ((unint64_t)v101 >= *(void *)(v102 + 16)) {
      goto LABEL_125;
    }
    uint64_t v263 = v103;
    unint64_t v105 = (*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80);
    uint64_t v106 = *(void *)(v266 + 72);
    unint64_t v258 = v106 * v101;
    _s15ConversationKit11ParticipantVWOcTm_16(v102 + v105 + v106 * v101, v269, (void (*)(void))type metadata accessor for Participant);
    uint64_t v107 = *(void *)(a4 + 16);
    if (v107)
    {
      uint64_t v108 = a4 + v105;
      swift_bridgeObjectRetain();
      while (1)
      {
        _s15ConversationKit11ParticipantVWOcTm_16(v108, (uint64_t)v52, (void (*)(void))type metadata accessor for Participant);
        char v109 = static UUID.== infix(_:_:)();
        _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v52, (void (*)(void))type metadata accessor for Participant);
        if (v109) {
          break;
        }
        v108 += v106;
        if (!--v107)
        {
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
      _s15ConversationKit11ParticipantVWOhTm_10(v269, (void (*)(void))type metadata accessor for Participant);
      uint64_t v101 = v263;
      uint64_t v71 = v260;
    }
    else
    {
LABEL_44:
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v110 = swift_allocObject();
      *(_OWORD *)(v110 + 16) = v257;
      uint64_t v111 = v255;
      _s15ConversationKit11ParticipantVWOcTm_16(v269, v255, (void (*)(void))type metadata accessor for Participant);
      __swift_storeEnumTagSinglePayload(v111, 0, 1, v104);
      uint64_t v112 = v111;
      uint64_t v113 = v250;
      outlined init with copy of UUID?(v112, v250, &demangling cache variable for type metadata for Participant?);
      if (__swift_getEnumTagSinglePayload(v113, 1, v104) == 1)
      {
        outlined destroy of Environment<RedactionReasons>.Content(v113, &demangling cache variable for type metadata for Participant?);
        unint64_t v114 = 0xE300000000000000;
        uint64_t v115 = 7104878;
      }
      else
      {
        uint64_t v116 = (uint64_t)v246;
        outlined init with take of Participant(v113, (uint64_t)v246);
        _s15ConversationKit11ParticipantVWOcTm_16(v116, v253, (void (*)(void))type metadata accessor for Participant);
        uint64_t v115 = String.init<A>(reflecting:)();
        unint64_t v114 = v117;
        _s15ConversationKit11ParticipantVWOhTm_10(v116, (void (*)(void))type metadata accessor for Participant);
      }
      outlined destroy of Environment<RedactionReasons>.Content(v255, &demangling cache variable for type metadata for Participant?);
      uint64_t v118 = MEMORY[0x1E4FBB1A0];
      *(void *)(v110 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v119 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v110 + 64) = v119;
      *(void *)(v110 + 32) = v115;
      *(void *)(v110 + 40) = v114;
      uint64_t v271 = v101;
      uint64_t v120 = String.init<A>(reflecting:)();
      *(void *)(v110 + 96) = v118;
      *(void *)(v110 + 104) = v119;
      *(void *)(v110 + 72) = v120;
      *(void *)(v110 + 80) = v121;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      uint64_t v122 = (uint64_t *)v264;
      swift_beginAccess();
      uint64_t v123 = *v122;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v123 = specialized _ArrayBuffer._consumeAndCreateNew()();
      }
      uint64_t v124 = *(void *)(v123 + 16);
      if (v101 >= v124) {
        goto LABEL_127;
      }
      uint64_t v125 = v124 - 1;
      unint64_t v126 = v123 + v105 + v258;
      _s15ConversationKit11ParticipantVWOhTm_10(v126, (void (*)(void))type metadata accessor for Participant);
      if (v125 - v101 < 0) {
        goto LABEL_133;
      }
      if (v106 > 0 || v126 >= v126 + v106 + (v125 - v101) * v106)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v106)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      *(void *)(v123 + 16) = v125;
      *(void *)uint64_t v264 = v123;
      swift_endAccess();
      uint64_t v128 = type metadata accessor for IndexPath();
      unint64_t v258 = (unint64_t)&v231;
      uint64_t v129 = *(void *)(v128 - 8);
      MEMORY[0x1F4188790](v128);
      uint64_t v131 = (char *)&v231 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1C876F270](v101, 0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
      uint64_t v256 = v129;
      unint64_t v132 = (*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
      uint64_t v133 = swift_allocObject();
      *(_OWORD *)(v133 + 16) = v268;
      uint64_t v134 = *(void (**)(unint64_t, char *, uint64_t))(v129 + 16);
      v134(v133 + v132, v131, v128);
      specialized Array.append<A>(contentsOf:)();
      uint64_t v135 = swift_allocObject();
      *(_OWORD *)(v135 + 16) = v268;
      v134(v135 + v132, v131, v128);
      Class v136 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v259, sel_deleteItemsAtIndexPaths_, v136);

      (*(void (**)(char *, uint64_t))(v256 + 8))(v131, v128);
      _s15ConversationKit11ParticipantVWOhTm_10(v269, (void (*)(void))type metadata accessor for Participant);
      a4 = v262;
      uint64_t v101 = v263;
      uint64_t v71 = v260;
      uint64_t v52 = v261;
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v272 + 16))
  {
    uint64_t v271 = v272;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(&v271);
    uint64_t v232 = 0;
    swift_bridgeObjectRelease_n();
    uint64_t v272 = v271;
  }
  else
  {
    uint64_t v232 = 0;
  }
  uint64_t v137 = (uint64_t)v239;
  uint64_t v263 = v71[2];
  if (v263)
  {
    uint64_t v138 = v266;
    unint64_t v269 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    uint64_t v261 = (char *)v71 + v269;
    swift_bridgeObjectRetain();
    uint64_t v139 = 0;
    uint64_t v140 = *(void *)(v138 + 72);
    uint64_t v141 = v249;
    do
    {
      _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)&v261[v140 * v139], v141, (void (*)(void))type metadata accessor for Participant);
      uint64_t v142 = *(void *)(*v265 + 16);
      if (v142)
      {
        uint64_t v143 = *v265 + v269;
        swift_bridgeObjectRetain();
        while (1)
        {
          _s15ConversationKit11ParticipantVWOcTm_16(v143, v137, (void (*)(void))type metadata accessor for Participant);
          char v144 = static UUID.== infix(_:_:)();
          _s15ConversationKit11ParticipantVWOhTm_10(v137, (void (*)(void))type metadata accessor for Participant);
          if (v144) {
            break;
          }
          v143 += v140;
          if (!--v142)
          {
            swift_bridgeObjectRelease();
            goto LABEL_74;
          }
        }
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_74:
        uint64_t v145 = (uint64_t)v242;
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v146 = swift_allocObject();
        *(_OWORD *)(v146 + 16) = v268;
        uint64_t v147 = (uint64_t)v245;
        _s15ConversationKit11ParticipantVWOcTm_16(v249, (uint64_t)v245, (void (*)(void))type metadata accessor for Participant);
        uint64_t v148 = v270;
        __swift_storeEnumTagSinglePayload(v147, 0, 1, v270);
        outlined init with copy of UUID?(v147, v145, &demangling cache variable for type metadata for Participant?);
        if (__swift_getEnumTagSinglePayload(v145, 1, v148) == 1)
        {
          outlined destroy of Environment<RedactionReasons>.Content(v145, &demangling cache variable for type metadata for Participant?);
          unint64_t v149 = 0xE300000000000000;
          uint64_t v150 = 7104878;
        }
        else
        {
          uint64_t v151 = v238;
          outlined init with take of Participant(v145, v238);
          _s15ConversationKit11ParticipantVWOcTm_16(v151, v253, (void (*)(void))type metadata accessor for Participant);
          uint64_t v150 = String.init<A>(reflecting:)();
          unint64_t v149 = v152;
          uint64_t v153 = v151;
          uint64_t v137 = (uint64_t)v239;
          _s15ConversationKit11ParticipantVWOhTm_10(v153, (void (*)(void))type metadata accessor for Participant);
        }
        outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v245, &demangling cache variable for type metadata for Participant?);
        *(void *)(v146 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v146 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v146 + 32) = v150;
        *(void *)(v146 + 40) = v149;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        uint64_t v154 = v241;
        _s15ConversationKit11ParticipantVWOcTm_16(v249, v241, (void (*)(void))type metadata accessor for Participant);
        uint64_t v155 = v265;
        swift_beginAccess();
        uint64_t v156 = *v155;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v155 = v156;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v156 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v156 + 16) + 1, 1, v156);
          *uint64_t v265 = v156;
        }
        unint64_t v159 = *(void *)(v156 + 16);
        unint64_t v158 = *(void *)(v156 + 24);
        if (v159 >= v158 >> 1)
        {
          uint64_t v156 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v158 > 1, v159 + 1, 1, v156);
          *uint64_t v265 = v156;
        }
        *(void *)(v156 + 16) = v159 + 1;
        outlined init with take of Participant(v154, v156 + v269 + v159 * v140);
        uint64_t v160 = *v265;
        swift_endAccess();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
        type metadata accessor for IndexPath();
        *(_OWORD *)(swift_allocObject() + 16) = v268;
        MEMORY[0x1C876F270](*(void *)(v160 + 16) - 1, 1);
        Class v161 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v259, sel_insertItemsAtIndexPaths_, v161);
      }
      ++v139;
      uint64_t v141 = v249;
      _s15ConversationKit11ParticipantVWOhTm_10(v249, (void (*)(void))type metadata accessor for Participant);
    }
    while (v139 != v263);
    swift_bridgeObjectRelease();
  }
  uint64_t v162 = v248;
  uint64_t v263 = *(void *)(a4 + 16);
  if (!v263) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v163 = v266;
  unint64_t v269 = (*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
  uint64_t v261 = (char *)(a4 + v269);
  swift_bridgeObjectRetain();
  uint64_t v265 = 0;
  uint64_t v164 = 0;
  uint64_t v165 = *(void *)(v163 + 72);
  while (2)
  {
    _s15ConversationKit11ParticipantVWOcTm_16((uint64_t)&v261[v165 * v164], v162, (void (*)(void))type metadata accessor for Participant);
    uint64_t v166 = *(void *)(*(void *)v264 + 16);
    if (v166)
    {
      uint64_t v167 = *(void *)v264 + v269;
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v168 = v267;
        _s15ConversationKit11ParticipantVWOcTm_16(v167, v267, (void (*)(void))type metadata accessor for Participant);
        char v169 = static UUID.== infix(_:_:)();
        _s15ConversationKit11ParticipantVWOhTm_10(v168, (void (*)(void))type metadata accessor for Participant);
        if (v169) {
          break;
        }
        v167 += v165;
        if (!--v166)
        {
          swift_bridgeObjectRelease();
          goto LABEL_94;
        }
      }
      swift_bridgeObjectRelease();
LABEL_108:
      uint64_t v162 = v248;
      _s15ConversationKit11ParticipantVWOhTm_10(v248, (void (*)(void))type metadata accessor for Participant);
    }
    else
    {
LABEL_94:
      uint64_t v170 = v272;
      uint64_t v171 = v265;
      if ((uint64_t)v265 >= *(void *)(v272 + 16)) {
        goto LABEL_97;
      }
      uint64_t v172 = type metadata accessor for IndexPath();
      uint64_t v173 = *(void *)(v172 - 8);
      uint64_t v174 = *(void *)(v173 + 64);
      MEMORY[0x1F4188790](v172);
      if (((unint64_t)v171 & 0x8000000000000000) != 0) {
        goto LABEL_128;
      }
      uint64_t v251 = *(unsigned __int8 *)(v173 + 80);
      uint64_t v256 = (v251 + 32) & ~v251;
      uint64_t v250 = *(void *)(v173 + 72);
      uint64_t v252 = v250 * (void)v171;
      uint64_t v176 = *(void **)(v173 + 16);
      uint64_t v177 = v164;
      long long v178 = v175;
      uint64_t v266 = v173 + 16;
      v260 = v176;
      ((void (*)(char *, uint64_t, void *))v176)((char *)&v231 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0), v170 + v256 + v250 * (void)v171, v175);
      uint64_t v179 = IndexPath.item.getter();
      v180 = *(void (**)(char *, uint64_t))(v173 + 8);
      unint64_t v258 = (unint64_t)v178;
      v181 = v178;
      uint64_t v164 = v177;
      uint64_t v255 = v173 + 8;
      uint64_t i = v180;
      uint64_t v182 = ((uint64_t (*)(char *, void *))v180)((char *)&v231 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0), v181);
      if (*(void *)(*(void *)v264 + 16) < v179)
      {
LABEL_97:
        if (one-time initialization token for conversationKit != -1) {
          swift_once();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v183 = swift_allocObject();
        *(_OWORD *)(v183 + 16) = v268;
        uint64_t v184 = v244;
        _s15ConversationKit11ParticipantVWOcTm_16(v248, v244, (void (*)(void))type metadata accessor for Participant);
        uint64_t v185 = v270;
        __swift_storeEnumTagSinglePayload(v184, 0, 1, v270);
        uint64_t v186 = v184;
        uint64_t v187 = v240;
        outlined init with copy of UUID?(v186, v240, &demangling cache variable for type metadata for Participant?);
        if (__swift_getEnumTagSinglePayload(v187, 1, v185) == 1)
        {
          outlined destroy of Environment<RedactionReasons>.Content(v187, &demangling cache variable for type metadata for Participant?);
          unint64_t v188 = 0xE300000000000000;
          uint64_t v189 = 7104878;
        }
        else
        {
          uint64_t v190 = v236;
          outlined init with take of Participant(v187, v236);
          _s15ConversationKit11ParticipantVWOcTm_16(v190, v253, (void (*)(void))type metadata accessor for Participant);
          uint64_t v189 = String.init<A>(reflecting:)();
          unint64_t v188 = v191;
          _s15ConversationKit11ParticipantVWOhTm_10(v190, (void (*)(void))type metadata accessor for Participant);
        }
        outlined destroy of Environment<RedactionReasons>.Content(v244, &demangling cache variable for type metadata for Participant?);
        *(void *)(v183 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v183 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v183 + 32) = v189;
        *(void *)(v183 + 40) = v188;
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        _s15ConversationKit11ParticipantVWOcTm_16(v248, v243, (void (*)(void))type metadata accessor for Participant);
        int v192 = (uint64_t *)v264;
        swift_beginAccess();
        uint64_t v193 = *v192;
        char v194 = swift_isUniquelyReferenced_nonNull_native();
        *int v192 = v193;
        if ((v194 & 1) == 0)
        {
          uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v193 + 16) + 1, 1, v193);
          *(void *)uint64_t v264 = v193;
        }
        unint64_t v196 = *(void *)(v193 + 16);
        unint64_t v195 = *(void *)(v193 + 24);
        if (v196 >= v195 >> 1)
        {
          uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v195 > 1, v196 + 1, 1, v193);
          *(void *)uint64_t v264 = v193;
        }
        *(void *)(v193 + 16) = v196 + 1;
        outlined init with take of Participant(v243, v193 + v269 + v196 * v165);
        uint64_t v197 = *(void *)v264;
        swift_endAccess();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
        type metadata accessor for IndexPath();
        *(_OWORD *)(swift_allocObject() + 16) = v268;
        MEMORY[0x1C876F270](*(void *)(v197 + 16) - 1, 0);
        Class v198 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v259, sel_insertItemsAtIndexPaths_, v198);

        goto LABEL_108;
      }
      MEMORY[0x1F4188790](v182);
      if ((unint64_t)v171 >= *(void *)(v272 + 16)) {
        goto LABEL_129;
      }
      v242 = v199;
      uint64_t v200 = v258;
      ((void (*)(char *, uint64_t, unint64_t))v260)((char *)&v231 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0), v272 + v256 + v252, v258);
      uint64_t v252 = (uint64_t)&v231 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (one-time initialization token for conversationKit != -1) {
        swift_once();
      }
      uint64_t v249 = static OS_os_log.conversationKit;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v201 = swift_allocObject();
      *(_OWORD *)(v201 + 16) = v257;
      uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
      uint64_t v247 = &v231;
      uint64_t v203 = *(void *)(*(void *)(v202 - 8) + 64);
      MEMORY[0x1F4188790](v202 - 8);
      uint64_t v204 = (char *)&v231 - ((v203 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, uint64_t, uint64_t))v260)(v204, v252, v200);
      uint64_t v205 = __swift_storeEnumTagSinglePayload((uint64_t)v204, 0, 1, v200);
      id v246 = &v231;
      uint64_t v206 = MEMORY[0x1F4188790](v205);
      unint64_t v241 = (v174 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v207 = (char *)&v231 - v241;
      uint64_t v245 = &v231;
      MEMORY[0x1F4188790](v206);
      outlined init with copy of UUID?((uint64_t)v204, (uint64_t)v204, &demangling cache variable for type metadata for IndexPath?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v204, 1, v200) == 1)
      {
        outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v204, &demangling cache variable for type metadata for IndexPath?);
        unint64_t v208 = 0xE300000000000000;
        uint64_t v209 = 7104878;
      }
      else
      {
        uint64_t v210 = (*(uint64_t (**)(char *, char *, uint64_t))(v173 + 32))(v207, v204, v200);
        MEMORY[0x1F4188790](v210);
        ((void (*)(char *, char *, uint64_t))v260)((char *)&v231 - v241, v207, v200);
        uint64_t v209 = String.init<A>(reflecting:)();
        unint64_t v208 = v211;
        i(v207, v200);
      }
      outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v204, &demangling cache variable for type metadata for IndexPath?);
      *(void *)(v201 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v212 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v201 + 64) = v212;
      *(void *)(v201 + 32) = v209;
      *(void *)(v201 + 40) = v208;
      uint64_t v213 = v237;
      _s15ConversationKit11ParticipantVWOcTm_16(v248, v237, (void (*)(void))type metadata accessor for Participant);
      uint64_t v214 = v270;
      __swift_storeEnumTagSinglePayload(v213, 0, 1, v270);
      uint64_t v215 = v213;
      uint64_t v216 = v235;
      outlined init with copy of UUID?(v215, v235, &demangling cache variable for type metadata for Participant?);
      BOOL v217 = __swift_getEnumTagSinglePayload(v216, 1, v214) == 1;
      uint64_t v218 = v216;
      if (v217)
      {
        outlined destroy of Environment<RedactionReasons>.Content(v216, &demangling cache variable for type metadata for Participant?);
        unint64_t v222 = 0xE300000000000000;
        uint64_t v220 = 7104878;
      }
      else
      {
        uint64_t v219 = v233;
        outlined init with take of Participant(v218, v233);
        _s15ConversationKit11ParticipantVWOcTm_16(v219, v253, (void (*)(void))type metadata accessor for Participant);
        uint64_t v220 = String.init<A>(reflecting:)();
        unint64_t v222 = v221;
        _s15ConversationKit11ParticipantVWOhTm_10(v219, (void (*)(void))type metadata accessor for Participant);
      }
      outlined destroy of Environment<RedactionReasons>.Content(v237, &demangling cache variable for type metadata for Participant?);
      *(void *)(v201 + 96) = MEMORY[0x1E4FBB1A0];
      *(void *)(v201 + 104) = v212;
      *(void *)(v201 + 72) = v220;
      *(void *)(v201 + 80) = v222;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      uint64_t v223 = v252;
      uint64_t v224 = IndexPath.item.getter();
      uint64_t v225 = v264;
      swift_beginAccess();
      if (*(void *)(*(void *)v225 + 16) < v224) {
        goto LABEL_130;
      }
      if (v224 < 0) {
        goto LABEL_131;
      }
      uint64_t v162 = v248;
      _s15ConversationKit11ParticipantVWOcTm_16(v248, v234, (void (*)(void))type metadata accessor for Participant);
      specialized Array.replaceSubrange<A>(_:with:)();
      swift_endAccess();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
      uint64_t v226 = v256;
      uint64_t v227 = swift_allocObject();
      *(_OWORD *)(v227 + 16) = v268;
      unint64_t v228 = v258;
      ((void (*)(uint64_t, uint64_t, unint64_t))v260)(v227 + v226, v223, v258);
      Class v229 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v259, sel_insertItemsAtIndexPaths_, v229);

      i((char *)v223, v228);
      uint64_t v265 = (uint64_t *)((char *)v265 + 1);
      _s15ConversationKit11ParticipantVWOhTm_10(v162, (void (*)(void))type metadata accessor for Participant);
    }
    if (++v164 != v263) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in ParticipantsCollectionViewDataSource.set(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v34 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v33 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Participant(0);
  uint64_t v7 = MEMORY[0x1F4188790](v36);
  uint64_t v32 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13)
  {
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v35 = *(void *)(v10 + 72);
    uint64_t v31 = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v37 = v14;
      uint64_t v38 = v13;
      _s15ConversationKit11ParticipantVWOcTm_16(v14, (uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
      uint64_t v15 = type metadata accessor for IndexPath();
      uint64_t v39 = &v31;
      uint64_t v16 = *(void *)(v15 - 8);
      MEMORY[0x1F4188790](v15);
      uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
      MEMORY[0x1F4188790](v19 - 8);
      uint64_t v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      ParticipantsCollectionViewDataSource.indexPath(of:)((uint64_t)&v12[*(int *)(v36 + 20)], (uint64_t)v21);
      if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v15) == 1)
      {
        _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
        outlined destroy of Environment<RedactionReasons>.Content((uint64_t)v21, &demangling cache variable for type metadata for IndexPath?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        id v23 = objc_msgSend(v34, sel_cellForItemAtIndexPath_, isa);

        if (v23)
        {
          type metadata accessor for ParticipantCell();
          uint64_t v24 = swift_dynamicCastClass();
          if (v24)
          {
            uint64_t v25 = v24;
            uint64_t v26 = ParticipantsCollectionViewDataSource.participants.getter();
            MEMORY[0x1F4188790](v26);
            *(&v31 - 2) = (uint64_t)v12;
            specialized _ArrayProtocol.filter(_:)();
            uint64_t v27 = v33;
            specialized Collection.first.getter(v28, v33);
            swift_bridgeObjectRelease();
            if (__swift_getEnumTagSinglePayload(v27, 1, v36) == 1)
            {
              (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);

              _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
              outlined destroy of Environment<RedactionReasons>.Content(v27, &demangling cache variable for type metadata for Participant?);
            }
            else
            {
              uint64_t v29 = v27;
              uint64_t v30 = v32;
              outlined init with take of Participant(v29, v32);
              ParticipantsCollectionViewDataSource.configureCell(_:with:)(v25, v30);

              _s15ConversationKit11ParticipantVWOhTm_10(v30, (void (*)(void))type metadata accessor for Participant);
              (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
              _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
            }
            goto LABEL_12;
          }
        }
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v12, (void (*)(void))type metadata accessor for Participant);
      }
LABEL_12:
      uint64_t v14 = v37 + v35;
      uint64_t v13 = v38 - 1;
      if (v38 == 1) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t closure #1 in ParticipantsCollectionViewDataSource.indexPath(of:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

Swift::Int __swiftcall ParticipantsCollectionViewDataSource.numberOfItemsInSection(_:)(Swift::Int a1)
{
  if (a1 == 1)
  {
    uint64_t v2 = OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants;
    goto LABEL_5;
  }
  if (!a1)
  {
    uint64_t v2 = OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants;
LABEL_5:
    uint64_t v3 = v1 + v2;
    OUTLINED_FUNCTION_2();
    return *(void *)(*(void *)v3 + 16);
  }
  return 0;
}

id ParticipantsCollectionViewDataSource.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ParticipantsCollectionViewDataSource.init()()
{
}

id ParticipantsCollectionViewDataSource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Int __swiftcall ParticipantsCollectionViewDataSource.numberOfSections(in:)(UICollectionView *in)
{
  return 2;
}

Swift::Int __swiftcall ParticipantsCollectionViewDataSource.collectionView(_:numberOfItemsInSection:)(UICollectionView *_, Swift::Int numberOfItemsInSection)
{
  return ParticipantsCollectionViewDataSource.numberOfItemsInSection(_:)(numberOfItemsInSection);
}

uint64_t ParticipantsCollectionViewDataSource._collectionView(_:cellForItemAt:)(void *a1, id a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Participant(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = IndexPath.section.getter();
  if (v10 == 1) {
    LODWORD(v11) = 1;
  }
  else {
    LODWORD(v11) = 2;
  }
  if (!v10) {
    LODWORD(v11) = 0;
  }
  if (!v11)
  {
    unint64_t v12 = IndexPath.item.getter();
    uint64_t v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_onlineParticipants);
    swift_beginAccess();
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    uint64_t v11 = *v13;
    if (v12 < *(void *)(*v13 + 16)) {
      goto LABEL_13;
    }
    __break(1u);
  }
  if (v11 == 2)
  {
    uint64_t v22 = type metadata accessor for IndexPath();
    __n128 v23 = MEMORY[0x1F4188790](v22);
    (*(void (**)(char *, id, __n128))(v25 + 16))((char *)v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v23);
    unint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    unint64_t v28 = 0xD000000000000010;
    unint64_t v29 = 0x80000001C37B2D00;
    v27[0] = IndexPath.section.getter();
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  unint64_t v12 = IndexPath.item.getter();
  uint64_t v14 = (uint64_t *)(v3 + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_offlineParticipants);
  swift_beginAccess();
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_21;
  }
  uint64_t v11 = *v14;
  if (v12 >= *(void *)(*v14 + 16))
  {
LABEL_22:
    __break(1u);
LABEL_23:

LABEL_25:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_13:
  _s15ConversationKit11ParticipantVWOcTm_16(v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v12, (uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
  if (one-time initialization token for reuseIdentifier != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)MEMORY[0x1C87730B0](static ParticipantCell.reuseIdentifier, *(void *)algn_1EA37DF48);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  a2 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v15, isa);

  type metadata accessor for ParticipantCell();
  uint64_t v17 = swift_dynamicCastClass();
  if (!v17) {
    goto LABEL_23;
  }
  uint64_t v18 = v17;
  ParticipantsCollectionViewDataSource.configureCell(_:with:)(v17, (uint64_t)v9);
  uint64_t v19 = (void (**)(uint64_t, char *))(v3
                                              + OBJC_IVAR____TtC15ConversationKit36ParticipantsCollectionViewDataSource_didCreateCellForParticipant);
  swift_beginAccess();
  uint64_t v20 = *v19;
  if (*v19)
  {
    swift_endAccess();
    swift_retain();
    v20(v18, v9);
    outlined consume of (@escaping @callee_guaranteed (@unowned CGRect, @unowned Bool) -> ())?((uint64_t)v20);
    _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
  }
  else
  {
    _s15ConversationKit11ParticipantVWOhTm_10((uint64_t)v9, (void (*)(void))type metadata accessor for Participant);
    swift_endAccess();
  }
  return v18;
}

uint64_t partial apply for closure #2 in ParticipantsCollectionViewDataSource.indexPath(of:)()
{
  return closure #1 in ParticipantsCollectionViewDataSource.indexPath(of:)() & 1;
}

uint64_t sub_1C3545940()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ParticipantsCollectionViewDataSource.set(_:in:)()
{
  return closure #1 in ParticipantsCollectionViewDataSource.set(_:in:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1C35459A0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ParticipantsCollectionViewDataSource.set(_:in:)(uint64_t a1)
{
  return closure #2 in ParticipantsCollectionViewDataSource.set(_:in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type ParticipantsCollectionViewDataSource.SectionType and conformance ParticipantsCollectionViewDataSource.SectionType()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticipantsCollectionViewDataSource.SectionType and conformance ParticipantsCollectionViewDataSource.SectionType;
  if (!lazy protocol witness table cache variable for type ParticipantsCollectionViewDataSource.SectionType and conformance ParticipantsCollectionViewDataSource.SectionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantsCollectionViewDataSource.SectionType and conformance ParticipantsCollectionViewDataSource.SectionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ParticipantsCollectionViewDataSource.SectionType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ParticipantsCollectionViewDataSource.SectionType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ParticipantsCollectionViewDataSource.SectionType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ParticipantsCollectionViewDataSource.SectionType]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ParticipantsCollectionViewDataSource.SectionType] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for ParticipantsCollectionViewDataSource()
{
  return self;
}

uint64_t method lookup function for ParticipantsCollectionViewDataSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParticipantsCollectionViewDataSource);
}

uint64_t dispatch thunk of ParticipantsCollectionViewDataSource.__allocating_init(participants:participantIsShownInGrid:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *storeEnumTagSinglePayload for ParticipantsCollectionViewDataSource.SectionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C3545BC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantsCollectionViewDataSource.SectionType()
{
  return &type metadata for ParticipantsCollectionViewDataSource.SectionType;
}

uint64_t sub_1C3545BF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ParticipantCell, @in_guaranteed Participant) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ParticipantCell, @in_guaranteed Participant) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t _s15ConversationKit11ParticipantVWOhTm_10(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_48();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t sub_1C3545D38()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = (int *)type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_5_7();
  unint64_t v9 = (v4 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v10 + 64);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  uint64_t v12 = v0 + v9;
  type metadata accessor for Participant.State(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 5u:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_12_0();
      (*(void (**)(unint64_t))(v13 + 8))(v0 + v9);
      break;
    case 4u:
      type metadata accessor for Date();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_26_2();
      v23();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (date: Date, mediaInfo: Participant.MediaInfo, copresenceInfo: Participant.CopresenceInfo?));
      uint64_t v25 = v12 + *(int *)(v24 + 48);
      swift_bridgeObjectRelease();
      if (*(void *)(v25 + 120) >= 2uLL) {
        __swift_destroy_boxed_opaque_existential_1(v25 + 96);
      }
      if (*(void *)(v25 + 312))
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v12 + *(int *)(v24 + 64) + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      break;
    default:
      break;
  }
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_26_2();
  v14();
  uint64_t v15 = (id *)(v12 + v7[7]);
  if (*v15)
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v16 = v12 + v7[14];
  uint64_t v17 = type metadata accessor for Date();
  if (!__swift_getEnumTagSinglePayload(v16, 1, v17))
  {
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  uint64_t v19 = v16 + *(int *)(type metadata accessor for Participant.CountdownInfo(0) + 20);
  if (!__swift_getEnumTagSinglePayload(v19, 1, v17))
  {
    OUTLINED_FUNCTION_48();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v17);
  }
  unint64_t v21 = (v11 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ParticipantsCollectionViewDataSource.updateExistingRosterParticipant(_:at:in:)()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  OUTLINED_FUNCTION_1(v1);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = type metadata accessor for Participant(0);
  OUTLINED_FUNCTION_1(v6);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  unint64_t v11 = (v3 + v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(v0 + v12);
  uint64_t v14 = *(void **)(v0 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in ParticipantsCollectionViewDataSource.updateExistingRosterParticipant(_:at:in:)(v0 + v3, v0 + v11, v13, v14);
}

uint64_t _s15ConversationKit11ParticipantVWOcTm_16(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_48();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t partial apply for closure #1 in ParticipantsCollectionViewDataSource.indexPath(of:)()
{
  return partial apply for closure #2 in ParticipantsCollectionViewDataSource.indexPath(of:)() & 1;
}

uint64_t CallDisplayStatus.isConnecting.getter()
{
  return *v0;
}

uint64_t CallDisplayStatus.isConnected.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t CallDisplayStatus.status.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t CallDisplayStatus.description.getter()
{
  int v1 = *v0;
  int v2 = v0[1];
  _StringGuts.grow(_:)(60);
  v3._object = (void *)0x80000001C37B2FA0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v3);
  if (v1) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x656E6E6F43736920;
  v7._object = (void *)0xED00003D64657463;
  String.append(_:)(v7);
  if (v2) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (v2) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x3D73757461747320;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  type metadata accessor for TUCallStatus(0);
  v12._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CallDisplayStatus.init(call:)@<X0>(uint64_t (**a1)(void, void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  char v5 = a1[13](ObjectType, a1);
  char v6 = a1[12](ObjectType, a1);
  LODWORD(a1) = a1[23](ObjectType, a1);
  uint64_t result = swift_unknownObjectRelease();
  *(unsigned char *)a2 = v5 & 1;
  *(unsigned char *)(a2 + 1) = v6 & 1;
  *(_DWORD *)(a2 + 4) = a1;
  return result;
}

uint64_t CallDisplayStatus.init(isConnecting:isConnected:status:)@<X0>(uint64_t result@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = result;
  *(unsigned char *)(a4 + 1) = a2;
  *(_DWORD *)(a4 + 4) = a3;
  return result;
}

BOOL static CallDisplayStatus.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0) {
    return *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
  }
  return result;
}

void CallDisplayStatus.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int CallDisplayStatus.hashValue.getter()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CallDisplayStatus()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *BOOL result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CallDisplayStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[8])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallDisplayStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)BOOL result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)BOOL result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallDisplayStatus()
{
  return &type metadata for CallDisplayStatus;
}

uint64_t ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)()
{
  OUTLINED_FUNCTION_1_2();
  *(void *)(v1 + 152) = 0;
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  *(void *)(v1 + 152) = v0;
  swift_unknownObjectWeakAssign();

  *(void *)(v1 + 136) = v5;
  return ControlsButtonProvider.init(context:shape:)(v4, v3);
}

uint64_t ConversationControlsMenuButtonProvider.deinit()
{
  uint64_t v0 = ControlsButtonProvider.deinit();

  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 144);
  return v0;
}

uint64_t ConversationControlsMenuButtonProvider.menuDataSource.getter()
{
  OUTLINED_FUNCTION_50();
  if (((*(uint64_t (**)(void))(v1 + 512))() & 1) == 0) {
    return 0;
  }
  swift_retain();
  return v0;
}

Swift::Void __swiftcall ConversationControlsMenuButtonProvider.updateButtonConfiguration()()
{
  ControlsButtonProvider.updateButtonConfiguration()();
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v0 + 168))())
  {
    OUTLINED_FUNCTION_50();
    int v2 = *(uint64_t (**)(void))(v1 + 512);
    id v4 = v3;
    objc_msgSend(v4, sel_setContextMenuInteractionEnabled_, v2() & 1);

    id v5 = v4;
    objc_msgSend(v5, sel_setShowsMenuAsPrimaryAction_, v2() & 1);
  }
}

void ConversationControlsMenuButtonProvider.buttonConfiguration.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIBackgroundConfiguration();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = type metadata accessor for UIButton.Configuration();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ControlsButtonProvider.defaultButtonConfiguration.getter();
  OUTLINED_FUNCTION_50();
  uint64_t v8 = (void *)(*(uint64_t (**)(void))(v7 + 168))();
  if (v8)
  {
    unint64_t v9 = v8;
    if (objc_msgSend(v8, sel_isSelected))
    {
      unint64_t v10 = self;
      id v11 = objc_msgSend(v10, sel_blackColor);
      UIButton.Configuration.baseForegroundColor.setter();
      id v12 = objc_msgSend(v10, sel_whiteColor);
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(a1, v6, v3);
      id v13 = v12;
      static UIBackgroundConfiguration.clear()();
      UIButton.Configuration.background.setter();
      UIButton.Configuration.baseBackgroundColor.setter();

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      uint64_t v16 = OUTLINED_FUNCTION_1_134();
      v17(v16);
    }
  }
  else
  {
    uint64_t v14 = OUTLINED_FUNCTION_1_134();
    v15(v14);
  }
}

uint64_t ConversationControlsMenuButtonProvider.startedContextMenu(button:animator:)(void *a1)
{
  ControlsButtonProvider.startedContextMenu(button:animator:)(a1);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  uint64_t v3 = *(void (**)(uint64_t))(v2 + 96);
  uint64_t v4 = swift_retain();
  v3(v4);
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v1 + 552);
  return v5();
}

uint64_t ConversationControlsMenuButtonProvider.endedContextMenu(button:animator:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  ControlsButtonProvider.endedContextMenu(button:animator:)(a1, a2);
  if (a2)
  {
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    v12[4] = partial apply for closure #1 in ConversationControlsMenuButtonProvider.endedContextMenu(button:animator:);
    void v12[5] = v5;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1107296256;
    long long v12[2] = thunk for @escaping @callee_guaranteed () -> ();
    v12[3] = &block_descriptor_94;
    char v6 = _Block_copy(v12);
    swift_release();
    objc_msgSend(a2, sel_addCompletion_, v6);
    _Block_release(v6);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_50();
  uint64_t v8 = (*(uint64_t (**)(void))(v7 + 88))();
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v8 = swift_release();
    if (v9 == v3)
    {
      OUTLINED_FUNCTION_50();
      uint64_t v8 = (*(uint64_t (**)(void))(v10 + 96))(0);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 544))(v8);
}

void ConversationControlsMenuButtonProvider.__allocating_init(controlsManager:context:shape:)()
{
}

uint64_t ConversationControlsMenuButtonProvider.menuHostViewController.getter()
{
  swift_beginAccess();
  return MEMORY[0x1C8776240](v0 + 144);
}

Swift::Void __swiftcall ConversationControlsMenuButtonProvider.dismissMenu(context:)(Swift::String context)
{
  uint64_t v2 = v1;
  object = context._object;
  uint64_t countAndFlagsBits = context._countAndFlagsBits;
  OUTLINED_FUNCTION_50();
  char v6 = (void *)(*(uint64_t (**)(void))(v5 + 488))();

  if (v6)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationControls);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v20 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F90000, v8, v9, "Dismissing menu for %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v11, -1, -1);
      MEMORY[0x1C87760E0](v10, -1, -1);
    }
    else
    {

      uint64_t v12 = swift_bridgeObjectRelease_n();
    }
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v12);
    if (v16)
    {
      uint64_t v17 = v16;
      id v18 = objc_msgSend(v16, sel_contextMenuInteraction);

      objc_msgSend(v18, sel_dismissMenu);
    }
  }
  else
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationControls);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1C2F90000, oslog, v14, "Menu's containerView is gone, can't dismiss menu", v15, 2u);
      MEMORY[0x1C87760E0](v15, -1, -1);
    }
  }
}

Swift::Void __swiftcall ConversationControlsMenuButtonProvider.disableMenuContainerViewInteraction()()
{
  OUTLINED_FUNCTION_50();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 488))();
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    uint64_t v4 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
  }
}

Swift::Void __swiftcall ConversationControlsMenuButtonProvider.scheduleDismissTimer()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 136)) + 0xA00))();
}

Swift::Void __swiftcall ConversationControlsMenuButtonProvider.invalidateDismissTimer()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 136)) + 0xA08))();
}

void *ConversationControlsMenuButtonProvider.menuStyle(for:existingStyle:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    OUTLINED_FUNCTION_50();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 488);
    id v6 = a3;
    uint64_t v7 = v5();
    if (v7)
    {
      os_log_type_t v9 = (void *)v7;
      uint64_t v10 = v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);

      if (v12)
      {
        objc_msgSend(v6, sel_setIgnoresContainerSizeChange_, 1);
        objc_msgSend(v6, sel_setContainerView_, v12);
      }
    }
  }
  return a3;
}

void *ConversationControlsMenuButtonProvider.attachmentPoint(for:configuration:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_50();
  BOOL result = (void *)(*(uint64_t (**)(void))(v3 + 168))();
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  id v6 = objc_msgSend(result, sel_imageView);
  if (!v6)
  {

    return 0;
  }
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_50();
  os_log_type_t v9 = (void *)(*(uint64_t (**)(void))(v8 + 488))();
  if (!v9 || (uint64_t v10 = v9, v11 = objc_msgSend(v9, sel_view), v10, !v11))
  {

    return 0;
  }
  id v12 = objc_msgSend(v5, sel_window);
  if (!v12)
  {

    return 0;
  }
  uint64_t v13 = v12;
  objc_msgSend(v11, sel_bounds);
  double MidX = CGRectGetMidX(v47);
  objc_msgSend(v5, sel_bounds);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  double v20 = v19;
  double v22 = v21;
  id v23 = v5;
  v48.origin.x = OUTLINED_FUNCTION_6_2();
  double v24 = CGRectGetMidX(v48);
  v49.origin.x = OUTLINED_FUNCTION_6_2();
  objc_msgSend(v23, sel_convertPoint_toCoordinateSpace_, v11, v24, CGRectGetMidY(v49));
  double v26 = v25;
  double v28 = v27;

  BOOL v29 = MidX + -2.0 <= v26 && v26 < MidX + 2.0 + 1.0;
  CGFloat v44 = v20;
  CGFloat v45 = v22;
  if (!v29)
  {
    if (MidX >= v26)
    {
      uint64_t ObjectType = swift_getObjectType();
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2) == 2) {
        uint64_t v32 = v23;
      }
      else {
        uint64_t v32 = v7;
      }
      objc_msgSend(v32, sel_frame);
      double MinX = CGRectGetMinX(v51);
    }
    else
    {
      objc_msgSend(v7, sel_frame);
      double MinX = CGRectGetMaxX(v50);
    }
    double MidX = MinX;
  }
  static Layout.ConversationControls.values.getter((uint64_t)v46);
  objc_msgSend(v11, sel_convertPoint_toView_, 0, v26, v28);
  objc_msgSend(v13, sel_convertPoint_toWindow_, 0);
  double v34 = v33;
  id v35 = objc_msgSend(v13, sel_screen);
  objc_msgSend(v35, sel_bounds);
  CGFloat v37 = v36;
  CGFloat v39 = v38;
  CGFloat v41 = v40;
  CGFloat v43 = v42;

  v52.origin.x = v37;
  v52.origin.y = v39;
  v52.size.double width = v41;
  v52.size.double height = v43;
  if (CGRectGetMidY(v52) >= v34)
  {
    v54.origin.x = v16;
    v54.origin.y = v18;
    v54.size.double width = v44;
    v54.size.double height = v45;
    CGRectGetMaxY(v54);
  }
  else
  {
    v53.origin.x = v16;
    v53.origin.y = v18;
    v53.size.double width = v44;
    v53.size.double height = v45;
    CGRectGetMinY(v53);
  }

  return *(void **)&MidX;
}

uint64_t key path setter for ConversationControlsMenuButtonProvider.menuHostViewController : ConversationControlsMenuButtonProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 152) = v2;
  return swift_unknownObjectWeakAssign();
}

Swift::Bool __swiftcall ConversationControlsMenuButtonProvider.shouldEnableMenu()()
{
  return 1;
}

uint64_t ConversationControlsMenuButtonProvider.__allocating_init(controlsManager:context:shape:menuHostViewController:)()
{
  return ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:menuHostViewController:)();
}

uint64_t ConversationControlsMenuButtonProvider.menu(for:)()
{
  return 0;
}

BOOL CGFloat.within(tolerance:of:)(double a1, double a2, double a3)
{
  return a1 + a2 + 1.0 > a3 && a2 - a1 <= a3;
}

uint64_t closure #1 in ConversationControlsMenuButtonProvider.endedContextMenu(button:animator:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (*(uint64_t (**)(void))(*(void *)result + 488))();
    if (v1)
    {
      uint64_t v3 = (void *)v1;
      uint64_t v4 = v2;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v4 + 24))(ObjectType, v4);
    }
    return swift_release();
  }
  return result;
}

void ConversationControlsMenuButtonProvider.init(controlsManager:context:shape:)()
{
}

uint64_t ConversationControlsMenuButtonProvider.__ivar_destroyer()
{
  return outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 144);
}

uint64_t ConversationControlsMenuButtonProvider.__deallocating_deinit()
{
  ConversationControlsMenuButtonProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ControlMenuDataSource.menu(for:) in conformance ConversationControlsMenuButtonProvider()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t protocol witness for ControlMenuDataSource.attachmentPoint(for:configuration:) in conformance ConversationControlsMenuButtonProvider()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t protocol witness for ControlMenuDataSource.menuStyle(for:existingStyle:) in conformance ConversationControlsMenuButtonProvider()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

double Range<>.init(center:tolerance:)(double a1, double a2)
{
  return a1 - a2;
}

uint64_t sub_1C35478B8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationControlsMenuButtonProvider.endedContextMenu(button:animator:)()
{
  return closure #1 in ConversationControlsMenuButtonProvider.endedContextMenu(button:animator:)();
}

uint64_t sub_1C35478F8@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 488))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t dispatch thunk of MenuHostProvider.disableMenuContainerViewInteraction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MenuHostProvider.setupMenuContainerView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MenuHostProvider.teardownMenuContainerView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for ConversationControlsMenuButtonProvider()
{
  return self;
}

uint64_t method lookup function for ConversationControlsMenuButtonProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsMenuButtonProvider);
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.menuHostViewController.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.shouldEnableMenu()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.__allocating_init(controlsManager:context:shape:menuHostViewController:)()
{
  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.dismissMenu(context:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.disableMenuContainerViewInteraction()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.scheduleDismissTimer()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.invalidateDismissTimer()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.menu(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.menuStyle(for:existingStyle:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of ConversationControlsMenuButtonProvider.attachmentPoint(for:configuration:)()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 576))();
}

uint64_t DialButtonViewModel.__allocating_init(service:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  DialButtonViewModel.init(service:)(a1);
  return v2;
}

uint64_t DialButtonViewModel.init(service:)(long long *a1)
{
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 80) = -1;
  *(void *)(v1 + 88) = 0;
  outlined init with take of Notice(a1, v1 + 32);
  return v1;
}

uint64_t DialButtonViewModel.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x1C8776240](v0 + 16);
}

uint64_t DialButtonViewModel.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*DialButtonViewModel.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1C8776240](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  long long v3[3] = v4;
  v3[4] = v5;
  return CancelConfirmationViewModel.delegate.modify;
}

uint64_t DialButtonViewModel.enabled(for:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = *(void *)a1;
  unsigned __int8 v5 = *(unsigned char *)(v1 + 80);
  *(unsigned char *)(v1 + 80) = v3;
  outlined copy of PreCallControlsContext(v2);
  outlined consume of PreCallControlsContext?(v4, v5);
  return 1;
}

uint64_t DialButtonViewModel.controlType.getter()
{
  return DialButtonViewModel.config.getter();
}

uint64_t DialButtonViewModel.config.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Font.Leading();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Image.Scale();
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 88))
  {
    uint64_t v14 = *(void *)(v1 + 88);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(self, sel_systemGreenColor);
    uint64_t v16 = MEMORY[0x1C87725F0](v15);
    uint64_t v17 = static Color.white.getter();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4F3EC70], v8);
    uint64_t v18 = static Font.body.getter();
    static Font.Weight.regular.getter();
    static SystemSymbol<A>.catalystCallControl(name:color:backgroundColor:scale:font:weight:)(0x69662E6F65646976, 0xEA00000000006C6CLL, v17, v16, (uint64_t)v13, v18, v43, v19);
    long long v42 = v43[3];
    long long v41 = v43[4];
    uint64_t v40 = v44;
    uint64_t v39 = v45;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    double v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    long long v38 = v43[0];
    long long v37 = v43[1];
    long long v36 = v43[2];
    v20(v13, v8);
    uint64_t v21 = static Color.white.getter();
    static Font.subheadline.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4F3E0F8], v2);
    uint64_t v22 = Font.leading(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
    long long v46 = xmmword_1C376AA10;
    uint64_t v47 = 0x401C000000000000;
    uint64_t v48 = v21;
    long long v50 = v38;
    long long v51 = v37;
    long long v52 = v36;
    long long v53 = v42;
    long long v54 = v41;
    uint64_t v49 = v22;
    uint64_t v55 = v40;
    uint64_t v56 = v39;
    id v23 = self;
    id v24 = objc_msgSend(v23, sel_conversationKit);
    v25._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_0_105();
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v57._uint64_t countAndFlagsBits = 0;
    Swift::String v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v27, (NSBundle)v24, v26, v57);

    id v29 = objc_msgSend(v23, sel_conversationKit);
    v30._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_0_105();
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v58._uint64_t countAndFlagsBits = 0;
    Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v32, (NSBundle)v29, v31, v58);

    uint64_t v34 = swift_allocObject();
    swift_weakInit();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IconButtonConfig<()>);
    swift_allocObject();
    *((void *)&v36 + 1) = partial apply for closure #1 in DialButtonViewModel.config.getter;
    *(void *)&long long v37 = v34;
    uint64_t v14 = specialized IconButtonConfig.init(buttonStyle:title:hasBadge:accessibilityLabel:accessibilityIdentifier:state:enabled:didTap:)((uint64_t)&v46, v28._countAndFlagsBits, (uint64_t)v28._object, 0, v33._countAndFlagsBits, (uint64_t)v33._object, 0x747475426E696F6ALL, 0xEA00000000006E6FLL, 1);
    *(void *)(v1 + 88) = v14;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v14;
}

Swift::Void __swiftcall DialButtonViewModel.onDisappear()()
{
  uint64_t v1 = *(void **)(v0 + 72);
  *(void *)(v0 + 72) = 0;
  unsigned __int8 v2 = *(unsigned char *)(v0 + 80);
  *(unsigned char *)(v0 + 80) = -1;
  outlined consume of PreCallControlsContext?(v1, v2);
}

Swift::Void __swiftcall DialButtonViewModel.didTap()()
{
  uint64_t v1 = v0;
  int v2 = *(unsigned __int8 *)(v0 + 80);
  if (v2 == 255)
  {
    if (one-time initialization token for sidebar != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.sidebar);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C2F90000, v9, v10, "DialButton missing request context", v11, 2u);
      MEMORY[0x1C87760E0](v11, -1, -1);
    }

    OUTLINED_FUNCTION_2_125();
    if (MEMORY[0x1C8776240](v9))
    {
      uint64_t v12 = *(void *)(v1 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(ObjectType, v12);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v3 = *(void **)(v0 + 72);
    uint64_t v5 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 32), *(void *)(v0 + 56));
    if (v2) {
      uint64_t v6 = *(void (**)(uint64_t))(v4 + 16);
    }
    else {
      uint64_t v6 = *(void (**)(uint64_t))(v4 + 8);
    }
    outlined copy of PreCallControlsContext(v3);
    uint64_t v7 = OUTLINED_FUNCTION_3_125();
    v6(v7);
    OUTLINED_FUNCTION_2_125();
    if (MEMORY[0x1C8776240](v5))
    {
      uint64_t v14 = *(void *)(v1 + 24);
      uint64_t v15 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14);
      swift_unknownObjectRelease();
    }
    outlined consume of PreCallControlsContext?(v3, v2);
  }
}

uint64_t sub_1C3548418()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t key path setter for DialButtonViewModel.config : DialButtonViewModel()
{
  uint64_t v0 = swift_retain();
  return DialButtonViewModel.config.setter(v0);
}

uint64_t DialButtonViewModel.config.setter(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t closure #1 in DialButtonViewModel.config.getter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DialButtonViewModel.didTap()();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in DialButtonViewModel.config.getter()
{
  return closure #1 in DialButtonViewModel.config.getter();
}

uint64_t DialButtonViewModel.deinit()
{
  outlined destroy of weak ConversationControlsCountdownJoinButtonDelegate?(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  outlined consume of PreCallControlsContext?(*(id *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_release();
  return v0;
}

uint64_t DialButtonViewModel.__deallocating_deinit()
{
  DialButtonViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CallControlsPreCallButtonViewModel.enabled(for:) in conformance DialButtonViewModel(uint64_t a1)
{
  return 1;
}

uint64_t protocol witness for CallControlsButtonViewModel.controlType.getter in conformance DialButtonViewModel()
{
  return DialButtonViewModel.controlType.getter();
}

void protocol witness for CallControlsButtonViewModel.onDisappear() in conformance DialButtonViewModel()
{
}

uint64_t sub_1C35485DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DialButtonViewModel.config.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for DialButtonViewModel()
{
  return self;
}

uint64_t method lookup function for DialButtonViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DialButtonViewModel);
}

uint64_t dispatch thunk of DialButtonViewModel.__allocating_init(service:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ScreenSharingBroadcasterViewModel.__allocating_init(interactionController:bannerPresentationManager:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(a1, a2);
  return v4;
}

id TUHandle.init(destinationID:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x1C87730B0](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithDestinationID_, v5);

  return v6;
}

uint64_t Participant.displayName.getter()
{
  type metadata accessor for TUHandle();
  uint64_t v0 = Participant.handle.getter();
  id v2 = TUHandle.init(destinationID:)(v0, v1);
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  swift_retain();
  ParticipantContactDetailsCache.contactDetails(for:nickname:)();
  id v3 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ParticipantContactDetails.initialsFor(_:)(v5);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.localizedUppercase.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v6;
}

id ScreenSharingBroadcasterViewModel.interactionController.getter()
{
  return *(id *)(v0 + 16);
}

void *ScreenSharingBroadcasterViewModel.bannerPresentationManager.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

unint64_t ScreenSharingBroadcasterViewModel._remoteControlState.didset()
{
  uint64_t v1 = (int *)type metadata accessor for FaceIDUnavailableNotice(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  id v4 = (uint64_t *)((char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*v0 + 144))(&v19, v2);
  unint64_t v5 = v19;
  if (v19 >> 61 == 4 && *(unsigned char *)((v19 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == 2)
  {
    *id v4 = 0;
    v4[1] = 0;
    UUID.init()();
    Date.init()();
    *((unsigned char *)v4 + v1[7]) = 0;
    uint64_t v6 = v1[8];
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    *(double *)((char *)v4 + v6) = (*(double (**)(void))(*(void *)static Defaults.shared + 984))();
    *((unsigned char *)v4 + v1[9]) = 1;
    *((unsigned char *)v4 + v1[10]) = 1;
    uint64_t v7 = (void *)((char *)v4 + v1[11]);
    *uint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v8 = (void *)((char *)v4 + v1[12]);
    *uint64_t v8 = 0;
    v8[1] = 0;
    *((unsigned char *)v4 + v1[13]) = 0;
    uint64_t v9 = (void *)((char *)v4 + v1[14]);
    *uint64_t v9 = 0;
    v9[1] = 0;
    os_log_type_t v10 = (void *)v0[3];
    if (v10)
    {
      uint64_t v11 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x180);
      uint64_t v12 = v10;
      uint64_t v13 = v11();
      if (!v13)
      {
        outlined destroy of FaceIDUnavailableNotice((uint64_t)v4);

        return outlined consume of RemoteControlState(v5);
      }
      uint64_t v14 = (void *)v13;
      id v15 = *(id *)(v13 + OBJC_IVAR____TtC15ConversationKit27ConversationControlsManager_noticeCoordinator);

      specialized ConversationControlsNoticeCoordinator.post(notice:)();
    }
    outlined destroy of FaceIDUnavailableNotice((uint64_t)v4);
    return outlined consume of RemoteControlState(v5);
  }
  unint64_t v16 = v19;
  return outlined consume of RemoteControlState(v16);
}

unint64_t ScreenSharingBroadcasterViewModel._remoteControlState.getter@<X0>(unint64_t *a1@<X8>)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 32);
  *a1 = v3;
  return outlined copy of RemoteControlState(v3);
}

unint64_t ScreenSharingBroadcasterViewModel._remoteControlState.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = v2;
  outlined consume of RemoteControlState(v3);
  return ScreenSharingBroadcasterViewModel._remoteControlState.didset();
}

unint64_t (*ScreenSharingBroadcasterViewModel._remoteControlState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_9();
  return ScreenSharingBroadcasterViewModel._remoteControlState.modify;
}

unint64_t ScreenSharingBroadcasterViewModel._remoteControlState.modify(uint64_t a1, char a2)
{
  unint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return ScreenSharingBroadcasterViewModel._remoteControlState.didset();
  }
  return result;
}

void *key path getter for ScreenSharingBroadcasterViewModel.remoteControlState : ScreenSharingBroadcasterViewModel@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 144))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for ScreenSharingBroadcasterViewModel.remoteControlState : ScreenSharingBroadcasterViewModel(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v5 = *a1;
  unint64_t v3 = *(uint64_t (**)(unint64_t *))(*(void *)v2 + 152);
  outlined copy of RemoteControlState(v5);
  return v3(&v5);
}

void *ScreenSharingBroadcasterViewModel.remoteControlState.init@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t ScreenSharingBroadcasterViewModel.remoteControlState.getter@<X0>(unint64_t *a1@<X8>)
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v2 + 272))();
  swift_release();
  return ScreenSharingBroadcasterViewModel._remoteControlState.getter(a1);
}

uint64_t ScreenSharingBroadcasterViewModel.remoteControlState.setter(unint64_t *a1)
{
  unint64_t v2 = *a1;
  swift_getKeyPath();
  uint64_t v5 = v1;
  unint64_t v6 = v2;
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v3 + 280))();
  outlined consume of RemoteControlState(v2);
  return swift_release();
}

unint64_t closure #1 in ScreenSharingBroadcasterViewModel.remoteControlState.setter(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  outlined copy of RemoteControlState(a2);
  return ScreenSharingBroadcasterViewModel._remoteControlState.setter((uint64_t *)&v3);
}

void (*ScreenSharingBroadcasterViewModel.remoteControlState.modify(void *a1))(void *a1)
{
  unint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v4 + 272))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit33ScreenSharingBroadcasterViewModel___observationRegistrar);
  unint64_t v5 = lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel();
  OUTLINED_FUNCTION_11_3(v5);
  swift_release();
  v3[7] = ScreenSharingBroadcasterViewModel._remoteControlState.modify((uint64_t)v3);
  return ScreenSharingBroadcasterViewModel.remoteControlState.modify;
}

void ScreenSharingBroadcasterViewModel.remoteControlState.modify(void *a1)
{
}

uint64_t (*ScreenSharingBroadcasterViewModel._isPresentingOnboardingView.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.init@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.getter()
{
  swift_getKeyPath();
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v1 + 272))();
  swift_release();
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.setter(char a1)
{
  swift_getKeyPath();
  uint64_t v5 = v1;
  char v6 = a1;
  OUTLINED_FUNCTION_50();
  (*(void (**)(void))(v3 + 280))();
  return swift_release();
}

uint64_t closure #1 in ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 40) = a2;
  return result;
}

void (*ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  OUTLINED_FUNCTION_3_2();
  (*(void (**)(void))(v4 + 272))();
  swift_release();
  OUTLINED_FUNCTION_10_36(OBJC_IVAR____TtC15ConversationKit33ScreenSharingBroadcasterViewModel___observationRegistrar);
  unint64_t v5 = lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel();
  OUTLINED_FUNCTION_11_3(v5);
  swift_release();
  v3[7] = ScreenSharingBroadcasterViewModel._isPresentingOnboardingView.modify();
  return ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.modify;
}

void ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.modify(void *a1)
{
}

uint64_t ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(void *a1, void *a2)
{
  void (*v7)(unint64_t *__return_ptr);
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t (*)(), uint64_t);
  id v14;
  unint64_t v16;

  uint64_t v3 = v2;
  *(void *)(v3 + 32) = 0xA000000000000008;
  *(unsigned char *)(v3 + 40) = 0;
  ObservationRegistrar.init()();
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  OUTLINED_FUNCTION_2_126();
  uint64_t v7 = *(void (**)(unint64_t *__return_ptr))(v6 + 376);
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  v7(&v16);
  ScreenSharingBroadcasterViewModel.remoteControlState.setter(&v16);
  os_log_type_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  OUTLINED_FUNCTION_2_126();
  uint64_t v13 = *(void (**)(uint64_t (*)(), uint64_t))(v12 + 432);
  uint64_t v14 = v9;
  swift_retain();
  v13(partial apply for closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:), v11);
  swift_release();

  return v3;
}

unint64_t partial apply for closure #1 in ScreenSharingBroadcasterViewModel.remoteControlState.setter()
{
  return closure #1 in ScreenSharingBroadcasterViewModel.remoteControlState.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel;
  if (!lazy protocol witness table cache variable for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel)
  {
    type metadata accessor for ScreenSharingBroadcasterViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScreenSharingBroadcasterViewModel and conformance ScreenSharingBroadcasterViewModel);
  }
  return result;
}

uint64_t type metadata accessor for ScreenSharingBroadcasterViewModel()
{
  uint64_t result = type metadata singleton initialization cache for ScreenSharingBroadcasterViewModel;
  if (!type metadata singleton initialization cache for ScreenSharingBroadcasterViewModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for closure #1 in ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.setter()
{
  return closure #1 in ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.setter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1C35493D8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(uint64_t a1, void *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v8);
    type metadata accessor for MainActor();
    swift_retain();
    id v9 = a2;
    uint64_t v10 = static MainActor.shared.getter();
    uint64_t v11 = (void *)swift_allocObject();
    uint64_t v12 = MEMORY[0x1E4FBCFD8];
    v11[2] = v10;
    v11[3] = v12;
    v11[4] = v7;
    void v11[5] = v9;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3549550()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)()
{
  return closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t closure #1 in closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  void v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:), v7, v6);
}

uint64_t closure #1 in closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)()
{
  uint64_t v8 = v0;
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v0[2];
  uint64_t v3 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x178))(&v7, v3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*(void *)v2 + 152))(&v7);
  (*(void (**)(uint64_t))(*(void *)v2 + 224))(v4);
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

Swift::Void __swiftcall ScreenSharingBroadcasterViewModel.checkOnboardingState()()
{
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_4_114();
  v0();
  if (!(v3 >> 61))
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant, Bool));
    if (*(unsigned char *)(swift_projectBox() + *(int *)(v1 + 64)) == 1)
    {
      OUTLINED_FUNCTION_50();
      (*(void (**)(uint64_t))(v2 + 200))(1);
    }
  }
  outlined consume of RemoteControlState(v3);
}

Swift::Void __swiftcall ScreenSharingBroadcasterViewModel.endRemoteControl()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x208))();
}

uint64_t ScreenSharingBroadcasterViewModel.activeControlParticipant.getter@<X0>(char *a1@<X8>)
{
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_4_114();
  v3();
  uint64_t result = outlined consume of RemoteControlState(v7);
  if ((v7 >> 61) - 2 <= 2
    && (uint64_t result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v1 + 16)) + 0xF8))(result)) != 0)
  {
    ScreenSharingInteractionSession.activeControlParticipant.getter(&v6);
    uint64_t result = swift_release();
    char v5 = v6;
  }
  else
  {
    char v5 = 0;
  }
  *a1 = v5;
  return result;
}

uint64_t ScreenSharingBroadcasterViewModel.statusText.getter()
{
  uint64_t v0 = type metadata accessor for Participant();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v3 = (char *)&v25._object - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_50();
  (*(void (**)(unint64_t *__return_ptr))(v4 + 144))(&v23);
  unint64_t v5 = v23;
  OUTLINED_FUNCTION_50();
  (*(void (**)(char *__return_ptr))(v6 + 240))((char *)&v25._object + 7);
  if (HIBYTE(v25._object) == 1) {
    goto LABEL_9;
  }
  if (v5 >> 61 == 3)
  {
    if (HIBYTE(v25._object) == 2)
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RemoteControlRequest, Participant));
      uint64_t v9 = swift_projectBox();
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v9 + *(int *)(v8 + 48), v0);
      id v10 = objc_msgSend(self, sel_conversationKit);
      OUTLINED_FUNCTION_13_22();
      OUTLINED_FUNCTION_4_6();
      v11._uint64_t countAndFlagsBits = 0;
      v11._object = (void *)0xE000000000000000;
      v24._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v10, v11, v24);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1C3769620;
      uint64_t v15 = Participant.displayName.getter();
      uint64_t v17 = v16;
      *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v14 + 32) = v15;
      *(void *)(v14 + 40) = v17;
      uint64_t countAndFlagsBits = String.init(format:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
LABEL_10:
      outlined consume of RemoteControlState(v5);
      return countAndFlagsBits;
    }
LABEL_9:
    id v18 = objc_msgSend(self, sel_conversationKit);
    OUTLINED_FUNCTION_13_22();
    OUTLINED_FUNCTION_4_6();
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    v25._uint64_t countAndFlagsBits = 0;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v18, v19, v25)._countAndFlagsBits;

    goto LABEL_10;
  }
  if (v5 >> 61 == 4 && *(unsigned char *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == 2) {
    goto LABEL_9;
  }
  outlined consume of RemoteControlState(v5);
  return 0;
}

BOOL ScreenSharingBroadcasterViewModel.isUnderRemoteControl.getter()
{
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_4_114();
  v0();
  BOOL v1 = 1;
  uint64_t v2 = 0;
  switch(v4 >> 61)
  {
    case 3uLL:
      goto LABEL_4;
    case 4uLL:
      BOOL v1 = *(void *)((v4 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) >> 61 == 3;
      goto LABEL_4;
    case 5uLL:
      return v2;
    default:
      BOOL v1 = 0;
LABEL_4:
      outlined consume of RemoteControlState(v4);
      return v1;
  }
}

void ScreenSharingBroadcasterViewModel.bezelEffects.getter()
{
  OUTLINED_FUNCTION_50();
  if ((*(uint64_t (**)(void))(v0 + 256))())
  {
    OUTLINED_FUNCTION_50();
    (*(void (**)(uint64_t *__return_ptr))(v1 + 240))(&var1);
    specialized Set.init(_nonEmptyArrayLiteral:)();
  }
}

uint64_t ScreenSharingBroadcasterViewModel.access<A>(keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ScreenSharingBroadcasterViewModel.withMutation<A, B>(keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ScreenSharingBroadcasterViewModel.deinit()
{
  outlined consume of RemoteControlState(*(void *)(v0 + 32));
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit33ScreenSharingBroadcasterViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ScreenSharingBroadcasterViewModel.__deallocating_deinit()
{
  ScreenSharingBroadcasterViewModel.deinit();
  OUTLINED_FUNCTION_3_2();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ScreenSharingBroadcasterViewModel()
{
  return type metadata accessor for ScreenSharingBroadcasterViewModel();
}

uint64_t type metadata completion function for ScreenSharingBroadcasterViewModel()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ScreenSharingBroadcasterViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ScreenSharingBroadcasterViewModel);
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.remoteControlState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.remoteControlState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.remoteControlState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.isPresentingOnboardingView.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.__allocating_init(interactionController:bannerPresentationManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.checkOnboardingState()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.endRemoteControl()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.activeControlParticipant.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.statusText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.isUnderRemoteControl.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.bezelEffects.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.access<A>(keyPath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of ScreenSharingBroadcasterViewModel.withMutation<A, B>(keyPath:_:)()
{
  OUTLINED_FUNCTION_50();
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t outlined destroy of FaceIDUnavailableNotice(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FaceIDUnavailableNotice(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C354A300()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #1 in closure #1 in ScreenSharingBroadcasterViewModel.init(interactionController:bannerPresentationManager:)(a1, v4, v5, v7, v6);
}

id clarityUIRootView_generic()
{
  uint64_t v0 = (void *)clarityUIRootView_generic()();
  return v0;
}

uint64_t clarityUIRootView_generic()()
{
  type metadata accessor for ClarityUIRootView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v8 - v4;
  ClarityUIRootView.init()((uint64_t)&v8 - v4);
  outlined init with copy of ClarityUIRootView((uint64_t)v5, (uint64_t)v2);
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  outlined destroy of ClarityUIRootView((uint64_t)v5, (void (*)(void))type metadata accessor for ClarityUIRootView);
  return v6;
}

uint64_t type metadata accessor for ClarityUIRootView()
{
  uint64_t result = type metadata singleton initialization cache for ClarityUIRootView;
  if (!type metadata singleton initialization cache for ClarityUIRootView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ClarityUIRootView.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NavigationPath();
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v20[-v9];
  uint64_t v11 = type metadata accessor for ClarityUIRootView();
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_21();
  uint64_t v15 = v14 - v13;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)uint64_t v15 = static ClarityUIPreferences.shared;
  v20[15] = 0;
  swift_retain();
  State.init(wrappedValue:)();
  uint64_t v16 = v21;
  *(unsigned char *)(v15 + 8) = v20[16];
  *(void *)(v15 + 16) = v16;
  uint64_t v17 = (uint64_t *)(v15 + *(int *)(v11 + 24));
  *uint64_t v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
  swift_storeEnumTagMultiPayload();
  NavigationPath.init()();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 16))(v7, v10, v2);
  State.init(wrappedValue:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v10, v2);
  uint64_t v18 = *(int *)(v11 + 32);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(v15 + v18) = static ClarityUICallHistory.shared;
  outlined init with take of ClarityUIRootView(v15, a1);
  return swift_retain();
}

uint64_t outlined init with copy of ClarityUIRootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClarityUIRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ClarityUIRootView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<NavigationPath>);
  MEMORY[0x1F4188790](v2 - 8);
  OUTLINED_FUNCTION_21();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v9 = v8 - v7;
  type metadata accessor for ClarityUIRootView();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  State.projectedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onChange<A>(of:initial:_:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>>);
  swift_getOpaqueTypeConformance2();
  NavigationStack.init<>(path:root:)();
  static Color.green.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v11 = AnyShapeStyle.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v9, v3);
  swift_release();
  uint64_t v12 = (uint64_t *)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>)
                           + 36));
  *uint64_t v12 = KeyPath;
  v12[1] = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t closure #1 in ClarityUIRootView.body.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>>);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v4 = static Alignment.center.getter();
  v4[1] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>>);
  closure #1 in closure #1 in ClarityUIRootView.body.getter(a1, (uint64_t)v4 + *(int *)(v6 + 44));
  uint64_t v7 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 8);
  uint64_t v11 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  char v10 = v12;
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>>);
  View.onChange<A>(of:initial:_:)();
  return outlined destroy of SystemUpdateNotice?((uint64_t)v4, &demangling cache variable for type metadata for ZStack<TupleView<(ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView)>>);
}

uint64_t closure #1 in closure #1 in ClarityUIRootView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v92 = a2;
  uint64_t v3 = type metadata accessor for ClarityUIRootView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for ClarityUIFavoritesView();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0);
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v76 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0);
  uint64_t v80 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v97 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0);
  uint64_t v85 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  unint64_t v84 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0);
  uint64_t v88 = *(void *)(v13 - 8);
  uint64_t v89 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v86 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>);
  MEMORY[0x1F4188790](v83);
  uint64_t v91 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v81 = (char *)&v75 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v90 = (uint64_t)&v75 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  State.projectedValue.getter();
  unint64_t v20 = *(void *)(a1 + 16);
  LOBYTE(v104) = *(unsigned char *)(a1 + 8);
  unint64_t v105 = v20;
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  uint64_t v21 = v99;
  char v22 = v100;
  unint64_t v23 = &v9[v7[5]];
  *(void *)unint64_t v23 = v98;
  *((void *)v23 + 1) = v21;
  v23[16] = v22;
  uint64_t v24 = v7[6];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)&v9[v24] = static ClarityUIPreferences.shared;
  uint64_t v25 = v7[7];
  uint64_t v26 = one-time initialization token for shared;
  swift_retain();
  if (v26 != -1) {
    swift_once();
  }
  *(void *)&v9[v25] = static ClarityUICallHistory.shared;
  uint64_t v27 = v7[8];
  uint64_t v28 = one-time initialization token for shared;
  swift_retain();
  uint64_t v75 = v7;
  if (v28 != -1) {
    swift_once();
  }
  *(void *)&v9[v27] = static ClarityUIFavoritesList.shared;
  outlined init with copy of ClarityUIRootView(a1, (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v94 = ((v29 + 16) & ~v29) + v5;
  uint64_t v95 = (v29 + 16) & ~v29;
  uint64_t v30 = v95;
  uint64_t v93 = v29 | 7;
  uint64_t v31 = swift_allocObject();
  outlined init with take of ClarityUIRootView((uint64_t)v6, v31 + v30);
  uint64_t v32 = type metadata accessor for ClarityUIOutgoingCallActionsView();
  uint64_t v33 = lazy protocol witness table accessor for type ClarityUIFavoritesView and conformance ClarityUIFavoritesView(&lazy protocol witness table cache variable for type ClarityUIFavoritesView and conformance ClarityUIFavoritesView, (void (*)(uint64_t))type metadata accessor for ClarityUIFavoritesView);
  uint64_t v96 = a1;
  uint64_t v34 = v33;
  uint64_t v35 = (uint64_t)v9;
  uint64_t v36 = (uint64_t)v6;
  unint64_t v37 = lazy protocol witness table accessor for type ClarityUIOutgoingCallActionsNavigationDestination and conformance ClarityUIOutgoingCallActionsNavigationDestination();
  uint64_t v38 = lazy protocol witness table accessor for type ClarityUIFavoritesView and conformance ClarityUIFavoritesView(&lazy protocol witness table cache variable for type ClarityUIOutgoingCallActionsView and conformance ClarityUIOutgoingCallActionsView, (void (*)(uint64_t))type metadata accessor for ClarityUIOutgoingCallActionsView);
  swift_retain();
  uint64_t v39 = v76;
  uint64_t v40 = v75;
  View.navigationDestination<A, B>(for:destination:)();
  swift_release();
  outlined destroy of ClarityUIRootView(v35, (void (*)(void))type metadata accessor for ClarityUIFavoritesView);
  outlined init with copy of ClarityUIRootView(a1, v36);
  uint64_t v41 = swift_allocObject();
  outlined init with take of ClarityUIRootView(v36, v41 + v95);
  uint64_t v42 = type metadata accessor for ClarityPreviewView();
  uint64_t v98 = (uint64_t)v40;
  uint64_t v99 = &type metadata for ClarityUIOutgoingCallActionsNavigationDestination;
  uint64_t v100 = v32;
  uint64_t v101 = v34;
  unint64_t v102 = v37;
  uint64_t v103 = v38;
  uint64_t v75 = (int *)MEMORY[0x1E4F3E810];
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v44 = lazy protocol witness table accessor for type ClarityUIPreviewNavigationDestination and conformance ClarityUIPreviewNavigationDestination();
  uint64_t v45 = lazy protocol witness table accessor for type ClarityUIFavoritesView and conformance ClarityUIFavoritesView(&lazy protocol witness table cache variable for type ClarityPreviewView and conformance ClarityPreviewView, (void (*)(uint64_t))type metadata accessor for ClarityPreviewView);
  uint64_t v46 = v78;
  View.navigationDestination<A, B>(for:destination:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v39, v46);
  outlined init with copy of ClarityUIRootView(v96, v36);
  uint64_t v47 = swift_allocObject();
  outlined init with take of ClarityUIRootView(v36, v47 + v95);
  uint64_t v48 = type metadata accessor for ClarityUIContactsView();
  uint64_t v98 = v46;
  uint64_t v99 = &type metadata for ClarityUIPreviewNavigationDestination;
  uint64_t v100 = v42;
  uint64_t v101 = OpaqueTypeConformance2;
  unint64_t v102 = v44;
  uint64_t v103 = v45;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  unint64_t v50 = lazy protocol witness table accessor for type ClarityUIContactsNavigationDestination and conformance ClarityUIContactsNavigationDestination();
  uint64_t v51 = lazy protocol witness table accessor for type ClarityUIFavoritesView and conformance ClarityUIFavoritesView(&lazy protocol witness table cache variable for type ClarityUIContactsView and conformance ClarityUIContactsView, (void (*)(uint64_t))type metadata accessor for ClarityUIContactsView);
  long long v52 = v84;
  uint64_t v53 = v82;
  long long v54 = v97;
  View.navigationDestination<A, B>(for:destination:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v53);
  uint64_t v98 = v53;
  uint64_t v99 = &type metadata for ClarityUIContactsNavigationDestination;
  uint64_t v100 = v48;
  uint64_t v101 = v49;
  unint64_t v102 = v50;
  uint64_t v103 = v51;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type ClarityUIRecentsNavigationDestination and conformance ClarityUIRecentsNavigationDestination();
  lazy protocol witness table accessor for type ClarityUIRecentsView and conformance ClarityUIRecentsView();
  uint64_t v55 = v86;
  uint64_t v56 = v87;
  View.navigationDestination<A, B>(for:destination:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v52, v56);
  Swift::String v57 = *(ValueMetadata **)(v96 + 16);
  uint64_t v58 = v96;
  LOBYTE(v98) = *(unsigned char *)(v96 + 8);
  uint64_t v99 = v57;
  State.wrappedValue.getter();
  if ((_BYTE)v104) {
    double v59 = 0.0;
  }
  else {
    double v59 = 1.0;
  }
  uint64_t v61 = v88;
  uint64_t v60 = v89;
  uint64_t v62 = (uint64_t)v81;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v81, v55, v89);
  *(double *)(v62 + *(int *)(v83 + 36)) = v59;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v55, v60);
  uint64_t v63 = v90;
  outlined init with take of ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>(v62, v90);
  unint64_t v64 = *(void *)(v58 + 16);
  LOBYTE(v104) = *(unsigned char *)(v58 + 8);
  unint64_t v105 = v64;
  State.projectedValue.getter();
  uint64_t v65 = v98;
  uint64_t v66 = v99;
  char v67 = v100;
  uint64_t v104 = 0;
  unint64_t v105 = 0xE000000000000000;
  State.init(wrappedValue:)();
  uint64_t v69 = v98;
  uint64_t v68 = v99;
  uint64_t v70 = v100;
  uint64_t v71 = v91;
  outlined init with copy of ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>(v63, v91);
  uint64_t v72 = v92;
  outlined init with copy of ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>(v71, v92);
  uint64_t v73 = v72
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>, ClarityUIDialerView))
               + 48);
  *(void *)uint64_t v73 = v65;
  *(void *)(v73 + 8) = v66;
  *(unsigned char *)(v73 + 16) = v67;
  *(void *)(v73 + 24) = v69;
  *(void *)(v73 + 32) = v68;
  *(void *)(v73 + 40) = v70;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined destroy of SystemUpdateNotice?(v63, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined destroy of SystemUpdateNotice?(v71, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>);
}

uint64_t closure #1 in closure #1 in closure #1 in ClarityUIRootView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  type metadata accessor for ClarityUIRootView();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  State.projectedValue.getter();
  uint64_t v8 = (int *)type metadata accessor for ClarityUIOutgoingCallActionsView();
  uint64_t v9 = (void *)(a2 + v8[5]);
  *uint64_t v9 = v3;
  v9[1] = v4;
  _OWORD v9[2] = v6;
  long long v9[3] = v5;
  *(void *)(a2 + v8[6]) = v7;
  uint64_t v10 = v8[7];
  uint64_t v11 = one-time initialization token for shared;
  id v12 = v3;
  id v13 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  *(void *)(a2 + v10) = static ClarityUIOutgoingCallActionProvider.shared;
  uint64_t v14 = v8[8];
  uint64_t v15 = one-time initialization token for shared;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  *(void *)(a2 + v14) = static ClarityUICallHistory.shared;
  return swift_retain();
}

uint64_t closure #2 in closure #1 in closure #1 in ClarityUIRootView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  char v20 = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  type metadata accessor for ClarityUIRootView();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  State.projectedValue.getter();
  uint64_t v11 = (int *)type metadata accessor for ClarityPreviewView();
  id v12 = (void *)(a2 + v11[5]);
  *id v12 = v4;
  v12[1] = v3;
  long long v12[2] = v6;
  v12[3] = v5;
  uint64_t v13 = a2 + v11[6];
  *(void *)uint64_t v13 = v8;
  *(void *)(v13 + 8) = v7;
  *(unsigned char *)(v13 + 16) = v20;
  *(void *)(v13 + 24) = v9;
  *(void *)(v13 + 32) = v10;
  uint64_t v14 = v11[7];
  id v15 = v4;
  id v16 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sx7SwiftUI4FontV6WeightVRi_zRi0_zlyxIsegnd_SglWOy(v9);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(a2 + v14) = static ClarityCameraModel.shared;
  uint64_t v17 = v11[8];
  uint64_t v18 = one-time initialization token for shared;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  *(void *)(a2 + v17) = static ClarityUICallHistory.shared;
  return swift_retain();
}

uint64_t closure #3 in closure #1 in closure #1 in ClarityUIRootView.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ClarityUIRootView();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  State.projectedValue.getter();
  uint64_t v2 = type metadata accessor for ClarityUIContactsView();
  uint64_t v3 = (void *)(a1 + *(int *)(v2 + 20));
  type metadata accessor for ClarityUIContactsList();
  swift_allocObject();
  ClarityUIContactsList.init()();
  State.init(wrappedValue:)();
  *uint64_t v3 = v6;
  v3[1] = v7;
  uint64_t v4 = *(int *)(v2 + 24);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(a1 + v4) = static ClarityUICallHistory.shared;
  return swift_retain();
}

uint64_t closure #4 in closure #1 in closure #1 in ClarityUIRootView.body.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *a1 = static ClarityUICallHistory.shared;
  return swift_retain();
}

uint64_t closure #2 in closure #1 in ClarityUIRootView.body.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.ScreenChanged();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v5, 0, sizeof(v5));
  MEMORY[0x1C876F6A0](v5);
  _AccessibilityNotifications.post()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t key path getter for EnvironmentValues.multimodalListLayout : EnvironmentValues()
{
  return EnvironmentValues.multimodalListLayout.getter();
}

uint64_t sub_1C354BBBC()
{
  return EnvironmentValues.multimodalListLayout.getter();
}

uint64_t outlined init with take of ClarityUIRootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClarityUIRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ClarityUIRootView.body.getter()
{
  return closure #1 in ClarityUIRootView.body.getter(*(void *)(v0 + 16));
}

uint64_t associated type witness table accessor for View.Body : View in ClarityUIRootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for ClarityUIRootView(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  }
  else
  {
    uint64_t v7 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for MultimodalListStyle.Layout();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = a3[7];
    uint64_t v13 = v7 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for NavigationPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
    *(void *)(v13 + *(int *)(v16 + 28)) = *(void *)(v14 + *(int *)(v16 + 28));
    *(void *)(v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for ClarityUIRootView(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for MultimodalListStyle.Layout();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ClarityUIRootView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for MultimodalListStyle.Layout();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  *(void *)(v11 + *(int *)(v14 + 28)) = *(void *)(v12 + *(int *)(v14 + 28));
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ClarityUIRootView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = a3[6];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    outlined destroy of SystemUpdateNotice?(a1 + v6, &demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for MultimodalListStyle.Layout();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  *(void *)(v11 + *(int *)(v14 + 28)) = *(void *)(v12 + *(int *)(v14 + 28));
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ClarityUIRootView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for MultimodalListStyle.Layout();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  *(void *)(v12 + *(int *)(v15 + 28)) = *(void *)(v13 + *(int *)(v15 + 28));
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for ClarityUIRootView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = a3[6];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    outlined destroy of SystemUpdateNotice?(a1 + v6, &demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for MultimodalListStyle.Layout();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for NavigationPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  *(void *)(v12 + *(int *)(v15 + 28)) = *(void *)(v13 + *(int *)(v15 + 28));
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClarityUIRootView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C354C554);
}

uint64_t sub_1C354C554(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
      uint64_t v11 = *(int *)(a3 + 28);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ClarityUIRootView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C354C61C);
}

void *sub_1C354C61C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
      uint64_t v11 = *(int *)(a4 + 28);
    }
    return (void *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for ClarityUIRootView()
{
  type metadata accessor for Environment<MultimodalListStyle.Layout>.Content(319, (unint64_t *)&lazy cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content, MEMORY[0x1E4F3D638], MEMORY[0x1E4F3C648]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<MultimodalListStyle.Layout>.Content(319, &lazy cache variable for type metadata for State<NavigationPath>, MEMORY[0x1E4F3C9E0], MEMORY[0x1E4F3ECC8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Environment<MultimodalListStyle.Layout>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0> and conformance NavigationStack<A, B>, &demangling cache variable for type metadata for NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>);
    lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<NavigationStack<NavigationPath, <<opaque return type of View.onChange<A>(of:initial:_:)>>.0>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ClarityUIRootView.body.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_6_108();
  OUTLINED_FUNCTION_1_1(v0);
  uint64_t v1 = OUTLINED_FUNCTION_4_115();
  return closure #1 in closure #1 in closure #1 in ClarityUIRootView.body.getter(v1, v2);
}

uint64_t outlined destroy of ClarityUIRootView(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v3();
  return a1;
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in ClarityUIRootView.body.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_6_108();
  OUTLINED_FUNCTION_1_1(v0);
  uint64_t v1 = OUTLINED_FUNCTION_4_115();
  return closure #2 in closure #1 in closure #1 in ClarityUIRootView.body.getter(v1, v2);
}

uint64_t objectdestroyTm_17()
{
  type metadata accessor for ClarityUIRootView();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<MultimodalListStyle.Layout>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MultimodalListStyle.Layout();
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_26_2();
    v0();
  }
  else
  {
    swift_release();
  }
  type metadata accessor for NavigationPath();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_26_2();
  v1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<NavigationPath>);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in ClarityUIRootView.body.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_6_108();
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_4_115();
  return closure #3 in closure #1 in closure #1 in ClarityUIRootView.body.getter(v1);
}

uint64_t lazy protocol witness table accessor for type ClarityUIFavoritesView and conformance ClarityUIFavoritesView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ClarityUIRecentsView and conformance ClarityUIRecentsView()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIRecentsView and conformance ClarityUIRecentsView;
  if (!lazy protocol witness table cache variable for type ClarityUIRecentsView and conformance ClarityUIRecentsView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIRecentsView and conformance ClarityUIRecentsView);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.navigationDestination<A, B>(for:destination:)>>.0, _OpacityEffect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PeoplePickerViewController.presentMessageComposeViewController(for:withRecipientHandles:shouldIgnoreEmails:delegate:)(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  swift_getObjectType();
  return specialized PeoplePickerViewController.presentMessageComposeViewController(for:withRecipientHandles:shouldIgnoreEmails:delegate:)(a1, a2, a3, a4, v4);
}

void outlined bridged method (mbgnn) of @objc MFMessageComposeViewController.recipients.setter(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, sel_setRecipients_, isa);
}

void outlined bridged method (mbnn) of @objc MFMessageComposeViewController.body.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setBody_, v4);
}

uint64_t dispatch thunk of AnsweringMachine.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

Swift::Void __swiftcall FaceTimeControlsView.handleUpdateDuringEphemeralAlert()()
{
  OUTLINED_FUNCTION_8_77();
  uint64_t v1 = (void *)v0();
  outlined consume of ConversationControlsRecipe.View?(v1, v2);
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_18_4();
    uint64_t v5 = (void *)v4(v3);
    if (v5)
    {
      id v15 = v5;
      unsigned int v6 = objc_msgSend(v5, sel_isValid);
      uint64_t v7 = v15;
      if (v6)
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl(&dword_1C2F90000, v9, v10, "setupRootView: displaying ephemeral alert, hiding new status view", v11, 2u);
          OUTLINED_FUNCTION_4_116();
        }

        uint64_t v12 = OUTLINED_FUNCTION_18_4();
        uint64_t v14 = (void *)v13(v12);
        objc_msgSend(v14, sel_setAlpha_, 0.0);

        uint64_t v7 = v14;
      }
    }
  }
}

Swift::Void __swiftcall FaceTimeControlsView.displayEphemeralAlert()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  OUTLINED_FUNCTION_8_77();
  unsigned int v6 = (void *)v5();
  outlined consume of ConversationControlsRecipe.View?(v6, v7);
  if (v6)
  {
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationControls);
    id v9 = v2;
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = OUTLINED_FUNCTION_0_106(4.8149e-34);
      v14(v13);
      uint64_t v15 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &aBlock);
      OUTLINED_FUNCTION_3_126();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_28_9(&dword_1C2F90000, v17, v18, "⇢ [%s] 1. Starting display of ephemeral alert");
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v12, -1, -1);
      OUTLINED_FUNCTION_4_116();
    }
    else
    {
    }
    uint64_t v19 = OUTLINED_FUNCTION_2_127();
    uint64_t v21 = (void *)v20(v19);
    objc_msgSend(v21, sel_invalidate);

    self;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static Defaults.shared + 1016))();
    uint64_t v22 = OUTLINED_FUNCTION_1_135();
    OUTLINED_FUNCTION_7_101();
    unint64_t v23 = (void *)OUTLINED_FUNCTION_3_0();
    v23[2] = v4;
    v23[3] = v3;
    v23[4] = v22;
    uint64_t v33 = partial apply for closure #1 in FaceTimeControlsView.displayEphemeralAlert();
    uint64_t v34 = v23;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v30 = 1107296256;
    uint64_t v31 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v32 = &block_descriptor_95;
    uint64_t v24 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v25 = OUTLINED_FUNCTION_1_135();
    OUTLINED_FUNCTION_7_101();
    uint64_t v26 = (void *)OUTLINED_FUNCTION_3_0();
    v26[2] = v4;
    long long v26[3] = v3;
    v26[4] = v25;
    uint64_t v33 = partial apply for closure #2 in FaceTimeControlsView.displayEphemeralAlert();
    uint64_t v34 = v26;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v30 = 1107296256;
    uint64_t v31 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v32 = &block_descriptor_10_1;
    uint64_t v27 = _Block_copy(&aBlock);
    uint64_t v28 = swift_release();
    OUTLINED_FUNCTION_10_77(v28, sel_animateWithDuration_animations_completion_);
    _Block_release(v27);
    _Block_release(v24);
  }
}

Swift::Void __swiftcall FaceTimeControlsView.cleanUpEphemeralAlert()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationControls);
  id v6 = v2;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = OUTLINED_FUNCTION_0_106(4.8149e-34);
    v11(v10);
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &aBlock);
    OUTLINED_FUNCTION_3_126();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28_9(&dword_1C2F90000, v14, v15, "⇢ [%s] 3. Removing ephemeral alert");
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v9, -1, -1);
    OUTLINED_FUNCTION_4_116();
  }
  else
  {
  }
  uint64_t v16 = OUTLINED_FUNCTION_2_127();
  uint64_t v18 = (void *)v17(v16);
  objc_msgSend(v18, sel_invalidate);

  self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)static Defaults.shared + 1016))();
  uint64_t v19 = OUTLINED_FUNCTION_1_135();
  OUTLINED_FUNCTION_7_101();
  char v20 = (void *)OUTLINED_FUNCTION_3_0();
  v20[2] = v4;
  v20[3] = v3;
  v20[4] = v19;
  uint64_t v30 = partial apply for closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert();
  uint64_t v31 = v20;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  uint64_t v28 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v29 = &block_descriptor_17_1;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v22 = OUTLINED_FUNCTION_1_135();
  OUTLINED_FUNCTION_7_101();
  unint64_t v23 = (void *)OUTLINED_FUNCTION_3_0();
  v23[2] = v4;
  v23[3] = v3;
  v23[4] = v22;
  uint64_t v30 = partial apply for closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
  uint64_t v31 = v23;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  uint64_t v28 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v29 = &block_descriptor_24_2;
  uint64_t v24 = _Block_copy(&aBlock);
  uint64_t v25 = swift_release();
  OUTLINED_FUNCTION_10_77(v25, sel_animateWithDuration_animations_completion_);
  _Block_release(v24);
  _Block_release(v21);
}

void closure #1 in FaceTimeControlsView.displayEphemeralAlert()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    os_log_type_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
    objc_msgSend(v8, sel_setAlpha_, 0.0);

    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
    objc_msgSend(v9, sel_setAlpha_, 0.0);

    (*(void (**)(uint64_t, uint64_t, double))(a3 + 128))(a2, a3, 0.0);
  }
}

void closure #2 in FaceTimeControlsView.displayEphemeralAlert()(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1C8776240](v7);
  if (v8)
  {
    id v9 = (id)v8;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    if (v10)
    {
      unint64_t v13 = (void *)v10;
      char v34 = v12 & 1;
      uint64_t v35 = v11;
      if (a1)
      {
        uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
        uint64_t v15 = (void *)v14(a3, a4);
      }
      else
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationControls);
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl(&dword_1C2F90000, v17, v18, "displayEphemeralAlert: statusView.alpha/ephemeralAlertStack.alpha -> 0 didn't finish", v19, 2u);
          MEMORY[0x1C87760E0](v19, -1, -1);
        }

        char v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 88))(a3, a4);
        objc_msgSend(v20, sel_setAlpha_, 0.0);

        uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
        uint64_t v21 = (void *)v14(a3, a4);
        objc_msgSend(v21, sel_setAlpha_, 0.0);

        (*(void (**)(uint64_t, uint64_t, double))(a4 + 128))(a3, a4, 0.0);
        uint64_t v15 = (void *)v14(a3, a4);
      }
      uint64_t v22 = v15;
      objc_msgSend(v15, sel_setHidden_, 1);

      unint64_t v23 = (void *)v14(a3, a4);
      uint64_t v24 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v25 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v23) + 0x88))();

      objc_msgSend(v25, sel_setAttributedText_, v13);
      uint64_t v26 = (void *)v14(a3, a4);
      uint64_t v27 = (void *)(*(uint64_t (**)(void))((*v24 & *v26) + 0xA0))();

      objc_msgSend(v27, sel_setAttributedText_, v35);
      uint64_t v28 = self;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      double v29 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = a3;
      *(void *)(v30 + 24) = a4;
      *(void *)(v30 + 32) = v9;
      *(void *)(v30 + 40) = v13;
      *(void *)(v30 + 48) = v35;
      *(unsigned char *)(v30 + 56) = v34;
      void aBlock[4] = partial apply for closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert();
      aBlock[5] = v30;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_43_2;
      uint64_t v31 = _Block_copy(aBlock);
      id v32 = v9;
      id v9 = v13;
      id v33 = v35;
      swift_release();
      objc_msgSend(v28, sel_animateWithDuration_animations_, v31, v29);
      _Block_release(v31);
    }
  }
}

void closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 88))(a5, a6);
  objc_msgSend(v10, sel_setAlpha_, 0.0);

  (*(void (**)(uint64_t, uint64_t, double))(a6 + 128))(a5, a6, 0.0);
  os_log_type_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 48);
  char v12 = (void *)v11(a5, a6);
  objc_msgSend(v12, sel_setHidden_, 0);

  unint64_t v13 = (void *)v11(a5, a6);
  uint64_t v14 = *(void *)(a6 + 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(a5, v14);
  objc_msgSend(v13, sel_setAlpha_);

  if (one-time initialization token for conversationControls != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationControls);
  id v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    aBlock[0] = v20;
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a5, v14);
    uint64_t v21 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F90000, v17, v18, "⇢ [%s] 2. Displaying ephemeral alert", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C87760E0](v20, -1, -1);
    MEMORY[0x1C87760E0](v19, -1, -1);

    if ((a4 & 1) == 0) {
      return;
    }
  }
  else
  {

    if ((a4 & 1) == 0) {
      return;
    }
  }
  unint64_t v23 = self;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  double v24 = (*(double (**)(void))(*(void *)static Defaults.shared + 1008))();
  uint64_t v25 = (void *)swift_allocObject();
  void v25[2] = a5;
  v25[3] = a6;
  v25[4] = v16;
  void aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert();
  aBlock[5] = (uint64_t)v25;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_49_3;
  uint64_t v26 = _Block_copy(aBlock);
  v16;
  swift_release();
  id v27 = objc_msgSend(v23, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v26, v24);
  _Block_release(v26);
  (*(void (**)(id, uint64_t, uint64_t))(a6 + 64))(v27, a5, a6);
}

void closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)(a4 + 8) + 8))(a3, *(void *)(a4 + 8));
  (*(void (**)(void, void, void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x7F8))(0, 0, 0);
}

void closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
    objc_msgSend(v8, sel_setAlpha_, 0.0);
  }
}

void closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1C8776240](v7);
  if (v8)
  {
    id v9 = (void *)v8;
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    outlined consume of ConversationControlsRecipe.View?(v10, v11);
    if (!v10)
    {
      if (a1)
      {
        char v12 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
        unint64_t v13 = (void *)v12(a3, a4);
      }
      else
      {
        if (one-time initialization token for conversationControls != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationControls);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl(&dword_1C2F90000, v15, v16, "cleanUpEphemeralAlert: ephemeralAlertStack.alpha -> 0 didn't finish", v17, 2u);
          MEMORY[0x1C87760E0](v17, -1, -1);
        }

        char v12 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
        os_log_type_t v18 = (void *)v12(a3, a4);
        objc_msgSend(v18, sel_setAlpha_, 0.0);

        unint64_t v13 = (void *)v12(a3, a4);
      }
      uint64_t v19 = v13;
      objc_msgSend(v13, sel_setHidden_, 1);

      uint64_t v20 = (void *)v12(a3, a4);
      uint64_t v21 = (void *)MEMORY[0x1E4FBC8C8];
      unint64_t v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v20) + 0x88))();

      objc_msgSend(v22, sel_setAttributedText_, 0);
      unint64_t v23 = (void *)v12(a3, a4);
      double v24 = (void *)(*(uint64_t (**)(void))((*v21 & *v23) + 0xA0))();

      objc_msgSend(v24, sel_setAttributedText_, 0);
      uint64_t v25 = self;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      double v26 = (*(double (**)(void))(*(void *)static Defaults.shared + 1016))();
      id v27 = (void *)swift_allocObject();
      v27[2] = a3;
      void v27[3] = a4;
      v27[4] = v9;
      unint64_t v37 = partial apply for closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
      uint64_t v38 = v27;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v34 = 1107296256;
      uint64_t v35 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v36 = &block_descriptor_30_0;
      uint64_t v28 = _Block_copy(&aBlock);
      id v29 = v9;
      swift_release();
      uint64_t v30 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v31 = (void *)swift_allocObject();
      v31[2] = a3;
      v31[3] = a4;
      v31[4] = v30;
      unint64_t v37 = partial apply for closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert();
      uint64_t v38 = v31;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v34 = 1107296256;
      uint64_t v35 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v36 = &block_descriptor_37_1;
      id v32 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v25, sel_animateWithDuration_animations_completion_, v28, v32, v26);
      _Block_release(v32);
      _Block_release(v28);
    }
  }
}

uint64_t closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
  v7(a2, v6);
  objc_msgSend(v5, sel_setAlpha_);

  v7(a2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 128))(a2, a3);
}

void closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1C8776240](v7);
  if (v8)
  {
    id v9 = (void *)v8;
    uint64_t v10 = (void *)&unk_1C3768000;
    if ((a1 & 1) == 0)
    {
      if (one-time initialization token for conversationControls != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationControls);
      id v12 = v9;
      unint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136315138;
        uint64_t v32 = v16;
        (*(void (**)(uint64_t))(*(void *)(a4 + 8) + 24))(a3);
        uint64_t v17 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F90000, v13, v14, "cleanUpEphemeralAlert: statusView.alpha -> %s didn't finish", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87760E0](v16, -1, -1);
        MEMORY[0x1C87760E0](v15, -1, -1);
      }
      else
      {
      }
      uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 88))(a3, a4);
      uint64_t v20 = *(void *)(a4 + 8);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v20 + 24);
      v21(a3, v20);
      objc_msgSend(v19, sel_setAlpha_);

      v21(a3, v20);
      (*(void (**)(uint64_t, uint64_t))(a4 + 128))(a3, a4);
      uint64_t v10 = &unk_1C3768000;
    }
    if (one-time initialization token for conversationControls != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationControls);
    id v23 = v9;
    double v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      double v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)double v26 = v10[454];
      uint64_t v32 = v27;
      uint64_t v28 = *(void *)(a4 + 8);
      (*(void (**)(uint64_t, uint64_t))(v28 + 16))(a3, v28);
      uint64_t v29 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F90000, v24, v25, "⇢ [%s] 4. Removed ephemeral alert, displaying status view", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v27, -1, -1);
      MEMORY[0x1C87760E0](v26, -1, -1);
    }
    else
    {

      uint64_t v28 = *(void *)(a4 + 8);
    }
    uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(a3, v28);
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v31) + 0xA00))();
  }
}

uint64_t sub_1C354F02C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in FaceTimeControlsView.displayEphemeralAlert()()
{
  closure #1 in FaceTimeControlsView.displayEphemeralAlert()(v0[4], v0[2], v0[3]);
}

void partial apply for closure #2 in FaceTimeControlsView.displayEphemeralAlert()(char a1)
{
  closure #2 in FaceTimeControlsView.displayEphemeralAlert()(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1C354F07C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert()()
{
  closure #1 in FaceTimeControlsView.cleanUpEphemeralAlert()(v0[4], v0[2], v0[3]);
}

void partial apply for closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1)
{
  closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(a1, v1[4], v1[2], v1[3]);
}

uint64_t dispatch thunk of ControlsView.controlsManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ControlsView.context.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ControlsView.cnkContentAlpha.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ControlsView.cnkContentAlpha.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ControlsView.cnkContentAlpha.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ControlsView.recipe.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ControlsView.recipe.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ControlsView.recipe.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of SystemAperturePreferredContentSizeProvider.systemAperturePreferredContentSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FaceTimeControlsView.ephemeralAlert.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FaceTimeControlsView.ephemeralAlert.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of FaceTimeControlsView.ephemeralAlert.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of FaceTimeControlsView.ephemeralAlertNotice.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FaceTimeControlsView.ephemeralAlertTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of FaceTimeControlsView.ephemeralAlertTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of FaceTimeControlsView.ephemeralAlertTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of FaceTimeControlsView.showCallDetailsButton.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of FaceTimeControlsView.statusView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of FaceTimeControlsView.buttonShelfView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of FaceTimeControlsView.cleanUpEphemeralAlert()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of FaceTimeControlsView.displayEphemeralAlert()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of FaceTimeControlsView.handleUpdateDuringEphemeralAlert()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of FaceTimeControlsView.updateAdditionalView(alpha:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of SystemApertureFaceTimeControlsView.showAppLaunchPill(buttonType:menuHost:target:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of SystemApertureFaceTimeControlsView.removeAppLaunchPill()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1C354F2E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()()
{
  return closure #1 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(v0[4], v0[2], v0[3]);
}

void partial apply for closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(char a1)
{
  closure #2 in closure #2 in FaceTimeControlsView.cleanUpEphemeralAlert()(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1C354F330()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()()
{
  closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(*(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(uint64_t a1)
{
  closure #1 in closure #1 in closure #2 in FaceTimeControlsView.displayEphemeralAlert()(a1, v1[4], v1[2], v1[3]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit22TranscriptionViewModelC7CaptionVG_AH0I2IDVs5NeverOTg504_s15d52Kit27AccessibilityCaptionsReaderV4bodyQrvgyycfU_AA22fgh2C9I61IDVAF0J0Vcfu_33_60f51043fe6654d0e082ed91edd7e083AjHTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v10;
    uint64_t v4 = *(void *)(type metadata accessor for TranscriptionViewModel.Caption(0) - 8);
    uint64_t v5 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = *v5;
      unint64_t v8 = *(void *)(v10 + 16);
      if (v8 >= *(void *)(v10 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      uint64_t v5 = (uint64_t *)((char *)v5 + v6);
      *(void *)(v10 + 16) = v8 + 1;
      *(void *)(v10 + 8 * v8 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AccessibilityCaptionsReader.init(viewModel:content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = property wrapper backing initializer of AccessibilityCaptionsReader.viewModel();
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = swift_getKeyPath();
  *(unsigned char *)(a3 + 24) = 0;
  uint64_t v7 = (int *)type metadata accessor for AccessibilityCaptionsReader();
  unint64_t v8 = (uint64_t *)(a3 + v7[10]);
  *unint64_t v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  swift_storeEnumTagMultiPayload();
  AccessibilityFocusState.init<>()();
  id v9 = (uint64_t *)(a3 + v7[12]);
  uint64_t result = property wrapper backing initializer of AccessibilityCaptionsReader.announcedCaptions();
  *id v9 = result;
  v9[1] = v11;
  id v12 = (void *)(a3 + v7[13]);
  *id v12 = a1;
  v12[1] = a2;
  return result;
}

uint64_t key path getter for EnvironmentValues.redactionReasons : EnvironmentValues()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t key path setter for EnvironmentValues.redactionReasons : EnvironmentValues(uint64_t a1)
{
  type metadata accessor for RedactionReasons();
  OUTLINED_FUNCTION_5_3();
  __n128 v3 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.redactionReasons.setter();
}

uint64_t property wrapper backing initializer of AccessibilityCaptionsReader.viewModel()
{
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  return ObservedObject.init(wrappedValue:)();
}

uint64_t AccessibilityCaptionsReader.viewModel.getter()
{
  return swift_retain();
}

uint64_t key path getter for AccessibilityCaptionsReader.viewModel : <A>AccessibilityCaptionsReader<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AccessibilityCaptionsReader.viewModel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for AccessibilityCaptionsReader.viewModel : <A>AccessibilityCaptionsReader<A>()
{
  uint64_t v0 = swift_retain();
  return AccessibilityCaptionsReader.viewModel.setter(v0);
}

uint64_t AccessibilityCaptionsReader.viewModel.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AccessibilityCaptionsReader.viewModel.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t AccessibilityCaptionsReader.$viewModel.getter()
{
  type metadata accessor for TranscriptionViewModel(0);
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type TranscriptionViewModel and conformance TranscriptionViewModel, (void (*)(uint64_t))type metadata accessor for TranscriptionViewModel);
  return ObservedObject.projectedValue.getter();
}

uint64_t property wrapper backing initializer of AccessibilityCaptionsReader.announcedCaptions()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TranscriptionViewModel.CaptionID>);
  State.init(wrappedValue:)();
  return v1;
}

uint64_t AccessibilityCaptionsReader.content.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  swift_retain();
  return v2;
}

uint64_t AccessibilityCaptionsReader.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v100 = a2;
  OUTLINED_FUNCTION_5_3();
  uint64_t v102 = v4;
  uint64_t v104 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v88 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_5_3();
  uint64_t v103 = v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v82 = (void (*)(char *, uint64_t, uint64_t))((char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(v11 + 24);
  uint64_t v109 = v13;
  uint64_t v110 = v12;
  uint64_t v14 = v13;
  uint64_t v106 = v13;
  uint64_t v15 = v12;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  OUTLINED_FUNCTION_5_3();
  uint64_t v89 = v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v81 = (char *)&v78 - v18;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  OUTLINED_FUNCTION_5_3();
  uint64_t v98 = v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v107 = (char *)&v78 - v22;
  uint64_t v109 = v14;
  uint64_t v110 = v15;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v113 = OpaqueTypeConformance2;
  uint64_t v114 = MEMORY[0x1E4F3DCD8];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = MEMORY[0x1E4FBB390];
  uint64_t v109 = v19;
  uint64_t v110 = MEMORY[0x1E4FBB390];
  uint64_t v25 = v19;
  uint64_t v84 = v19;
  unint64_t v26 = MEMORY[0x1E4FBB3A8];
  uint64_t v111 = WitnessTable;
  unint64_t v112 = MEMORY[0x1E4FBB3A8];
  uint64_t v85 = WitnessTable;
  uint64_t v95 = MEMORY[0x1E4F3EA40];
  uint64_t v27 = swift_getOpaqueTypeMetadata2();
  uint64_t v93 = v27;
  OUTLINED_FUNCTION_5_3();
  uint64_t v99 = v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v108 = (char *)&v78 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [TranscriptionViewModel.Caption]);
  uint64_t v92 = v31;
  uint64_t v109 = v25;
  uint64_t v110 = v24;
  uint64_t v111 = WitnessTable;
  unint64_t v112 = v26;
  uint64_t v32 = swift_getOpaqueTypeConformance2();
  uint64_t v91 = v32;
  unint64_t v90 = lazy protocol witness table accessor for type [TranscriptionViewModel.Caption] and conformance <A> [A]();
  uint64_t v109 = v27;
  uint64_t v110 = v31;
  uint64_t v111 = v32;
  unint64_t v112 = v90;
  swift_getOpaqueTypeMetadata2();
  OUTLINED_FUNCTION_5_3();
  uint64_t v96 = v33;
  uint64_t v97 = v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v87 = (char *)&v78 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v37 = MEMORY[0x1F4188790](v36);
  uint64_t v94 = (char *)&v78 - v38;
  uint64_t v101 = a1;
  (*(void (**)(__n128))(v2 + *(int *)(a1 + 52)))(v37);
  uint64_t v79 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  AccessibilityFocusState.projectedValue.getter();
  uint64_t v39 = v106;
  uint64_t v105 = v15;
  View.accessibilityFocused(_:)();
  swift_release();
  swift_release();
  uint64_t v40 = v39;
  OUTLINED_FUNCTION_26_2();
  v41();
  uint64_t v42 = v102;
  uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v102 + 16);
  CGFloat v43 = v88;
  uint64_t v44 = v101;
  v82(v88, v2, v101);
  uint64_t v45 = *(unsigned __int8 *)(v42 + 80);
  v104 += (v45 + 32) & ~v45;
  uint64_t v46 = (v45 + 32) & ~v45;
  uint64_t v80 = v46;
  uint64_t v103 = v45 | 7;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v40;
  *(void *)(v47 + 24) = v15;
  uint64_t v48 = v47 + v46;
  uint64_t v102 = *(void *)(v42 + 32);
  uint64_t v49 = v43;
  ((void (*)(uint64_t, char *, uint64_t))v102)(v48, v43, v44);
  View.onAppear(perform:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v50();
  uint64_t v51 = v79;
  uint64_t v52 = *(void *)(v79 + 16);
  char v53 = *(unsigned char *)(v79 + 24);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v52, v53);
  specialized Environment.wrappedValue.getter();
  LOBYTE(v44) = v54;
  outlined consume of Environment<CGFloat>.Content(v52, v53);
  LOBYTE(v109) = v44 & 1;
  uint64_t v55 = v101;
  uint64_t v56 = v82;
  v82(v49, v51, v101);
  uint64_t v57 = swift_allocObject();
  uint64_t v58 = v105;
  *(void *)(v57 + 16) = v40;
  *(void *)(v57 + 24) = v58;
  uint64_t v59 = OUTLINED_FUNCTION_4_117(v57);
  v60(v59);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  OUTLINED_FUNCTION_26_2();
  v61();
  swift_retain();
  uint64_t v62 = TranscriptionViewModel.captions.getter();
  swift_release();
  uint64_t v109 = v62;
  v56(v49, v51, v55);
  uint64_t v63 = swift_allocObject();
  uint64_t v64 = v105;
  *(void *)(v63 + 16) = v106;
  *(void *)(v63 + 24) = v64;
  uint64_t v65 = OUTLINED_FUNCTION_4_117(v63);
  v66(v65);
  char v67 = v87;
  uint64_t v68 = v93;
  uint64_t v69 = v92;
  uint64_t v70 = v91;
  unint64_t v71 = v90;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_2();
  v72();
  uint64_t v109 = v68;
  uint64_t v110 = v69;
  uint64_t v111 = v70;
  unint64_t v112 = v71;
  uint64_t v73 = swift_getOpaqueTypeConformance2();
  unint64_t v74 = v94;
  uint64_t v75 = v96;
  static ViewBuilder.buildExpression<A>(_:)(v67, v96, v73);
  uint64_t v76 = *(void (**)(char *, uint64_t))(v97 + 8);
  v76(v67, v75);
  static ViewBuilder.buildExpression<A>(_:)(v74, v75, v73);
  return ((uint64_t (*)(char *, uint64_t))v76)(v74, v75);
}

uint64_t closure #1 in AccessibilityCaptionsReader.body.getter()
{
  type metadata accessor for AccessibilityCaptionsReader();
  swift_retain();
  uint64_t v0 = TranscriptionViewModel.captions.getter();
  swift_release();
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit22TranscriptionViewModelC7CaptionVG_AH0I2IDVs5NeverOTg504_s15d52Kit27AccessibilityCaptionsReaderV4bodyQrvgyycfU_AA22fgh2C9I61IDVAF0J0Vcfu_33_60f51043fe6654d0e082ed91edd7e083AjHTf3nnnpk_nTf1cn_nTm(v0);
  swift_bridgeObjectRelease();
  specialized Set.init<A>(_:)(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Set<TranscriptionViewModel.CaptionID>>);
  State.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  return AccessibilityFocusState.wrappedValue.setter();
}

void closure #2 in AccessibilityCaptionsReader.body.getter(uint64_t a1, unsigned char *a2)
{
  if (*a2 == 1)
  {
    type metadata accessor for AccessibilityCaptionsReader();
    swift_retain();
    uint64_t v2 = TranscriptionViewModel.captions.getter();
    swift_release();
    uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit22TranscriptionViewModelC7CaptionVG_AH0I2IDVs5NeverOTg504_s15d52Kit27AccessibilityCaptionsReaderV4bodyQrvgyycfU_AA22fgh2C9I61IDVAF0J0Vcfu_33_60f51043fe6654d0e082ed91edd7e083AjHTf3nnnpk_nTf1cn_nTm(v2);
    swift_bridgeObjectRelease();
    specialized Set.init<A>(_:)(v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Set<TranscriptionViewModel.CaptionID>>);
    State.wrappedValue.setter();
  }
}

uint64_t closure #3 in AccessibilityCaptionsReader.body.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityCaptionsReader();
  return AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()(v0);
}

uint64_t AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessibilityNotification.Announcement();
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v62 = &v57[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for RedactionReasons();
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v65 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v57[-v9];
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v68 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v57[-v15];
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = &v57[-v18];
  uint64_t v20 = *(void *)(v1 + 16);
  char v21 = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v20, v21);
  specialized Environment.wrappedValue.getter();
  char v23 = v22;
  outlined consume of Environment<CGFloat>.Content(v20, v21);
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16);
  v24(v19, v2, a1);
  if ((v23 & 1) == 0)
  {
    uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
    v25(v19, a1);
    v24(v16, v2, a1);
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  AccessibilityFocusState.wrappedValue.getter();
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v25(v19, a1);
  char v26 = v69;
  v24(v16, v2, a1);
  if ((v26 & 1) == 0)
  {
LABEL_7:
    v25(v16, a1);
    uint64_t v32 = v68;
    v24(v68, v2, a1);
    return ((uint64_t (*)(unsigned char *, uint64_t))v25)(v32, a1);
  }
  uint64_t v59 = v16;
  uint64_t v60 = v25;
  uint64_t v27 = v10;
  specialized Environment.wrappedValue.getter();
  uint64_t v28 = v65;
  static RedactionReasons.privacy.getter();
  _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_2(&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons, MEMORY[0x1E4F3CD58]);
  uint64_t v29 = v67;
  int v58 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v61 = v2;
  uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v66 + 8);
  v30(v28, v29);
  v30(v27, v29);
  uint64_t v25 = v60;
  uint64_t v31 = v61;
  v60(v59, a1);
  uint64_t v32 = v68;
  v24(v68, v31, a1);
  if (v58) {
    return ((uint64_t (*)(unsigned char *, uint64_t))v25)(v32, a1);
  }
  swift_retain();
  char v33 = TranscriptionViewModel.hidePrivacySensitiveContent.getter();
  swift_release();
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v25)(v32, a1);
  if ((v33 & 1) == 0)
  {
    swift_retain();
    TranscriptionViewModel.captions.getter();
    uint64_t v35 = swift_release();
    MEMORY[0x1F4188790](v35);
    uint64_t v36 = *(void *)(a1 + 16);
    uint64_t v37 = *(void *)(a1 + 24);
    *(void *)&v57[-32] = v36;
    *(void *)&v57[-24] = v37;
    *(void *)&v57[-16] = v31;
    specialized _ArrayProtocol.filter(_:)();
    uint64_t v39 = v38;
    MEMORY[0x1F4188790](v38);
    *(void *)&v57[-32] = v36;
    *(void *)&v57[-24] = v37;
    *(void *)&v57[-16] = v31;
    uint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15ConversationKit22TranscriptionViewModelC7CaptionVG_SSs5NeverOTg5((uint64_t)partial apply for closure #2 in AccessibilityCaptionsReader.announceNewCaptionsIfNeeded(), (uint64_t)&v57[-48], v39);
    swift_bridgeObjectRelease();
    uint64_t v69 = v40;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = type metadata accessor for AttributedString();
    uint64_t v68 = v57;
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v43 = *(void *)(v42 + 64);
    MEMORY[0x1F4188790](v41);
    unint64_t v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v45 = type metadata accessor for AttributeContainer();
    MEMORY[0x1F4188790](v45 - 8);
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(void *)&v57[-16] = v47;
    swift_getKeyPath();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority?);
    MEMORY[0x1F4188790](v48 - 8);
    unint64_t v50 = &v57[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v51 = *MEMORY[0x1E4F17410];
    uint64_t v52 = type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 104))(v50, v51, v52);
    __swift_storeEnumTagSinglePayload((uint64_t)v50, 0, 1, v52);
    lazy protocol witness table accessor for type AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute and conformance AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute();
    uint64_t v53 = AttributedString.subscript.setter();
    __n128 v54 = MEMORY[0x1F4188790](v53);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t, __n128))(v42 + 16))(&v57[-v44], &v57[-v44], v41, v54);
    uint64_t v55 = v62;
    MEMORY[0x1C876F680](&v57[-v44]);
    uint64_t v56 = v64;
    _AccessibilityNotifications.post()();
    (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v55, v56);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v42 + 8))(&v57[-v44], v41);
  }
  return result;
}

uint64_t closure #1 in AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptionViewModel.Caption(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (void *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AccessibilityCaptionsReader();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v20 - v11;
  int v13 = *(unsigned __int8 *)(a1 + *(int *)(v5 + 48));
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)v20 - v11, a2, v8, v10);
  outlined init with copy of TranscriptionViewModel.Caption(a1, (uint64_t)v7);
  if (v13 == 1)
  {
    uint64_t v14 = &v12[*(int *)(v8 + 48)];
    uint64_t v16 = *(void *)v14;
    uint64_t v15 = *((void *)v14 + 1);
    v20[0] = v16;
    v20[1] = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Set<TranscriptionViewModel.CaptionID>>);
    State.wrappedValue.getter();
    char v17 = specialized Set.contains(_:)(*v7, v20[3]);
    swift_bridgeObjectRelease();
    char v18 = v17 ^ 1;
  }
  else
  {
    char v18 = 0;
  }
  outlined destroy of TranscriptionViewModel.Caption((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v18 & 1;
}

uint64_t closure #2 in AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  type metadata accessor for AccessibilityCaptionsReader();
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Set<TranscriptionViewModel.CaptionID>>);
  State.wrappedValue.getter();
  specialized Set._Variant.insert(_:)((uint64_t)v8, v4);
  State.wrappedValue.setter();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for TranscriptionViewModel.Caption(0) + 28));
  uint64_t v6 = v5[1];
  *a2 = *v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.AccessibilityAttributes, AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.AccessibilityAttributes, AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute>)()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute()
{
}

uint64_t key path getter for EnvironmentValues.accessibilityVoiceOverEnabled : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityVoiceOverEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C3550E40@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityVoiceOverEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t type metadata accessor for AccessibilityCaptionsReader()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3550E88()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t partial apply for closure #1 in AccessibilityCaptionsReader.body.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityCaptionsReader();
  OUTLINED_FUNCTION_1_1(v0);
  return closure #1 in AccessibilityCaptionsReader.body.getter();
}

void partial apply for closure #2 in AccessibilityCaptionsReader.body.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityCaptionsReader();
  OUTLINED_FUNCTION_1_1(v0);
  uint64_t v1 = OUTLINED_FUNCTION_3_127();
  closure #2 in AccessibilityCaptionsReader.body.getter(v1, v2);
}

uint64_t objectdestroyTm_18()
{
  uint64_t v1 = type metadata accessor for AccessibilityCaptionsReader();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  outlined consume of Environment<CGFloat>.Content(*(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for RedactionReasons();
    OUTLINED_FUNCTION_26_2();
    v3();
  }
  else
  {
    swift_release();
  }
  uint64_t v4 = v2 + *(int *)(v1 + 44);
  uint64_t v5 = type metadata accessor for AccessibilityTechnologies();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AccessibilityCaptionsReader.body.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityCaptionsReader();
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_3_127();
  return closure #3 in AccessibilityCaptionsReader.body.getter();
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityCaptionsReader<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C3551208()
{
  return 16;
}

__n128 sub_1C3551214(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata instantiation function for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

void type metadata completion function for AccessibilityCaptionsReader()
{
  type metadata accessor for Environment<RedactionReasons>.Content();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AccessibilityFocusState<Bool>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for AccessibilityCaptionsReader(void *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *uint64_t v4 = *a2;
    v4[1] = v7;
    uint64_t v8 = a2[2];
    char v9 = *((unsigned char *)a2 + 24);
    swift_retain();
    outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v8, v9);
    v4[2] = v8;
    *((unsigned char *)v4 + 24) = v9;
    uint64_t v10 = a3[10];
    uint64_t v11 = (void *)((char *)v4 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for RedactionReasons();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[11];
    uint64_t v16 = (char *)v4 + v15;
    char v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for AccessibilityTechnologies();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityTechnologies?);
      memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
    }
    uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
    v16[v20[9]] = v17[v20[9]];
    *(void *)&v16[v20[10]] = *(void *)&v17[v20[10]];
    v16[v20[11]] = v17[v20[11]];
    uint64_t v21 = a3[12];
    uint64_t v22 = a3[13];
    char v23 = (void *)((char *)v4 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *char v23 = *v24;
    v23[1] = v25;
    char v26 = (void *)((char *)v4 + v22);
    uint64_t v27 = (uint64_t *)((char *)a2 + v22);
    uint64_t v28 = v27[1];
    *char v26 = *v27;
    v26[1] = v28;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2)
{
  swift_release();
  outlined consume of Environment<CGFloat>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for RedactionReasons();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t v7 = type metadata accessor for AccessibilityTechnologies();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 24);
  swift_retain();
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v7, v8);
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v8;
  uint64_t v9 = a3[10];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for RedactionReasons();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[11];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AccessibilityTechnologies();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityTechnologies?);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  uint64_t v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  v14[v18[9]] = v15[v18[9]];
  *(void *)&v14[v18[10]] = *(void *)&v15[v18[10]];
  v14[v18[11]] = v15[v18[11]];
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (void *)(a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void *)(a1 + v20);
  uint64_t v25 = (void *)(a2 + v20);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<MultiwayViewController.LayoutIdiom>.Content(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[10];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    outlined destroy of Environment<RedactionReasons>.Content(a1 + v10);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for RedactionReasons();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AccessibilityTechnologies();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v17);
  int v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17);
  if (!EnumTagSinglePayload)
  {
    uint64_t v20 = *(void *)(v17 - 8);
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v15, v16, v17);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
    goto LABEL_11;
  }
  if (v19)
  {
LABEL_11:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityTechnologies?);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
LABEL_12:
  uint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  v15[v22[9]] = v16[v22[9]];
  *(void *)&v15[v22[10]] = *(void *)&v16[v22[10]];
  swift_retain();
  swift_release();
  v15[v22[11]] = v16[v22[11]];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  swift_retain();
  swift_release();
  uint64_t v26 = a3[13];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of Environment<RedactionReasons>.Content(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = a3[10];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for RedactionReasons();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[11];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AccessibilityTechnologies();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityTechnologies?);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  v12[v16[9]] = v13[v16[9]];
  *(void *)&v12[v16[10]] = *(void *)&v13[v16[10]];
  v12[v16[11]] = v13[v16[11]];
  uint64_t v17 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t assignWithTake for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_release();
  char v7 = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[10];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    outlined destroy of Environment<RedactionReasons>.Content(a1 + v10);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<RedactionReasons>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for RedactionReasons();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for AccessibilityTechnologies();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v18);
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18);
  if (!EnumTagSinglePayload)
  {
    uint64_t v21 = *(void *)(v18 - 8);
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v17, v18);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
    goto LABEL_10;
  }
  if (v20)
  {
LABEL_10:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityTechnologies?);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
LABEL_11:
  uint64_t v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
  v16[v23[9]] = v17[v23[9]];
  *(void *)&v16[v23[10]] = *(void *)&v17[v23[10]];
  swift_release();
  v16[v23[11]] = v17[v23[11]];
  uint64_t v24 = a3[12];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(void *)(a1 + v24) = *(void *)(a2 + v24);
  swift_bridgeObjectRelease();
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  swift_release();
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C35520D0);
}

uint64_t sub_1C35520D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<RedactionReasons>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 40);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
      uint64_t v11 = *(int *)(a3 + 44);
    }
    return __swift_getEnumTagSinglePayload(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityCaptionsReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C3552198);
}

uint64_t sub_1C3552198(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<RedactionReasons>);
    OUTLINED_FUNCTION_1_5();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 40);
    }
    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityFocusState<Bool>);
      uint64_t v11 = *(int *)(a4 + 44);
    }
    return __swift_storeEnumTagSinglePayload(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata accessor for AccessibilityFocusState<Bool>()
{
  if (!lazy cache variable for type metadata for AccessibilityFocusState<Bool>)
  {
    unint64_t v0 = type metadata accessor for AccessibilityFocusState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityFocusState<Bool>);
    }
  }
}

uint64_t sub_1C355229C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()(uint64_t a1)
{
  return closure #1 in AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()(a1, *(void *)(v1 + 32)) & 1;
}

uint64_t partial apply for closure #2 in AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #2 in AccessibilityCaptionsReader.announceNewCaptionsIfNeeded()(a1, a2);
}

void sub_1C3552438()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute and conformance AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute and conformance AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute and conformance AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute and conformance AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute);
  }
  return result;
}

uint64_t sub_1C355249C()
{
  return 8;
}

uint64_t sub_1C35524A8()
{
  return swift_release();
}

uint64_t sub_1C35524B0(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1C35524C4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t _s15ConversationKit22TranscriptionViewModelCAC7Combine16ObservableObjectAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id @nonobjc CABasicAnimation.__allocating_init(keyPath:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)MEMORY[0x1C87730B0]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_animationWithKeyPath_, v2);

  return v3;
}

double ConversationControlsJoinCallCountdownView.RingLayer.percentage.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

id ConversationControlsJoinCallCountdownView.RingLayer.percentage.setter(double a1)
{
  return ConversationControlsJoinCallCountdownView.RingLayer.percentage.setter(&OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_percentage, a1);
}

void key path getter for ConversationControlsJoinCallCountdownView.RingLayer.lineWidth : ConversationControlsJoinCallCountdownView.RingLayer(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))();
}

uint64_t key path setter for ConversationControlsJoinCallCountdownView.RingLayer.lineWidth : ConversationControlsJoinCallCountdownView.RingLayer(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x78))(*a1);
}

double ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(double *)v0;
}

id ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.setter(double a1)
{
  return ConversationControlsJoinCallCountdownView.RingLayer.percentage.setter(&OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_lineWidth, a1);
}

id ConversationControlsJoinCallCountdownView.RingLayer.percentage.setter(void *a1, double a2)
{
  unint64_t v4 = (double *)&v2[*a1];
  OUTLINED_FUNCTION_11_0();
  *unint64_t v4 = a2;
  return objc_msgSend(v2, sel_setNeedsDisplay);
}

uint64_t (*ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.modify;
}

uint64_t key path getter for ConversationControlsJoinCallCountdownView.RingLayer.fillColor : ConversationControlsJoinCallCountdownView.RingLayer@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationControlsJoinCallCountdownView.RingLayer.fillColor : ConversationControlsJoinCallCountdownView.RingLayer(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90))(*a1);
}

id ConversationControlsJoinCallCountdownView.RingLayer.fillColor.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  return v1;
}

void ConversationControlsJoinCallCountdownView.RingLayer.fillColor.setter(void *a1)
{
}

uint64_t (*ConversationControlsJoinCallCountdownView.RingLayer.fillColor.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.modify;
}

uint64_t key path getter for ConversationControlsJoinCallCountdownView.RingLayer.strokeColor : ConversationControlsJoinCallCountdownView.RingLayer@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationControlsJoinCallCountdownView.RingLayer.strokeColor : ConversationControlsJoinCallCountdownView.RingLayer(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8))(*a1);
}

id ConversationControlsJoinCallCountdownView.RingLayer.strokeColor.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  return v1;
}

void ConversationControlsJoinCallCountdownView.RingLayer.strokeColor.setter(void *a1)
{
}

void ConversationControlsJoinCallCountdownView.RingLayer.fillColor.setter(void *a1, void *a2)
{
  unint64_t v4 = (void **)&v2[*a2];
  OUTLINED_FUNCTION_11_0();
  uint64_t v5 = *v4;
  *unint64_t v4 = a1;
  id v6 = a1;

  objc_msgSend(v2, sel_setNeedsDisplay);
}

uint64_t (*ConversationControlsJoinCallCountdownView.RingLayer.strokeColor.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_24();
  return ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.modify;
}

id ConversationControlsJoinCallCountdownView.RingLayer.init()()
{
  *(void *)&v0[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_percentage] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_lineWidth] = 0x4020000000000000;
  uint64_t v1 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_fillColor;
  uint64_t v2 = self;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_systemDarkGreenColor);
  id v5 = objc_msgSend(v4, sel_CGColor);

  *(void *)&v0[v1] = v5;
  uint64_t v6 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_strokeColor;
  id v7 = objc_msgSend(v2, sel_systemGreenColor);
  id v8 = objc_msgSend(v7, sel_CGColor);

  *(void *)&v3[v6] = v8;
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for ConversationControlsJoinCallCountdownView.RingLayer();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t type metadata accessor for ConversationControlsJoinCallCountdownView.RingLayer()
{
  return self;
}

char *ConversationControlsJoinCallCountdownView.RingLayer.init(layer:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_percentage] = 0;
  *(void *)&v1[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_lineWidth] = 0x4020000000000000;
  uint64_t v3 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_fillColor;
  id v4 = self;
  id v5 = v1;
  id v6 = objc_msgSend(v4, sel_systemDarkGreenColor);
  id v7 = objc_msgSend(v6, sel_CGColor);

  *(void *)&v1[v3] = v7;
  uint64_t v8 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_strokeColor;
  id v9 = objc_msgSend(v4, sel_systemGreenColor);
  id v10 = objc_msgSend(v9, sel_CGColor);

  *(void *)&v5[v8] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
  v31.receiver = v5;
  v31.super_class = (Class)type metadata accessor for ConversationControlsJoinCallCountdownView.RingLayer();
  id v12 = objc_msgSendSuper2(&v31, sel_initWithLayer_, v11);
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v30);
  uint64_t v13 = (char *)v12;
  if (swift_dynamicCast())
  {
    objc_msgSend(v29, sel_percentage);
    uint64_t v15 = v14;
    uint64_t v16 = &v13[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_percentage];
    OUTLINED_FUNCTION_11_0();
    *(void *)uint64_t v16 = v15;
    OUTLINED_FUNCTION_99();
    double v18 = (*(double (**)(void))(v17 + 112))();
    int v19 = (double *)&v13[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_lineWidth];
    OUTLINED_FUNCTION_11_0();
    *int v19 = v18;
    OUTLINED_FUNCTION_99();
    uint64_t v21 = (*(uint64_t (**)(void))(v20 + 136))();
    uint64_t v22 = (void **)&v13[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_fillColor];
    OUTLINED_FUNCTION_11_0();
    uint64_t v23 = *v22;
    *uint64_t v22 = (void *)v21;

    OUTLINED_FUNCTION_99();
    uint64_t v25 = (*(uint64_t (**)(void))(v24 + 160))();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v26 = (void **)&v13[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_strokeColor];
    OUTLINED_FUNCTION_11_0();
    uint64_t v27 = *v26;
    *uint64_t v26 = (void *)v25;
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v13;
}

void ConversationControlsJoinCallCountdownView.RingLayer.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_percentage] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_lineWidth] = 0x4020000000000000;
  uint64_t v1 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_fillColor;
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_systemDarkGreenColor);
  id v4 = objc_msgSend(v3, sel_CGColor);

  *(void *)&v0[v1] = v4;
  uint64_t v5 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer_strokeColor;
  id v6 = objc_msgSend(v2, sel_systemGreenColor);
  id v7 = objc_msgSend(v6, sel_CGColor);

  *(void *)&v0[v5] = v7;
  OUTLINED_FUNCTION_12_70();
  __break(1u);
}

uint64_t static ConversationControlsJoinCallCountdownView.RingLayer.needsDisplay(forKey:)()
{
  OUTLINED_FUNCTION_11_70();
  BOOL v3 = v3 && v1 == v2;
  if (v3) {
    return 1;
  }
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  if (OUTLINED_FUNCTION_9_87()) {
    return 1;
  }
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v8 = (void *)MEMORY[0x1C87730B0](v5, v4);
  v10.receiver = ObjCClassFromMetadata;
  v10.super_class = (Class)&OBJC_METACLASS____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView9RingLayer;
  id v6 = objc_msgSendSuper2(&v10, sel_needsDisplayForKey_, v8);

  return (uint64_t)v6;
}

id ConversationControlsJoinCallCountdownView.RingLayer.action(forKey:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = v2;
  OUTLINED_FUNCTION_11_70();
  BOOL v8 = v8 && v6 == v7;
  if (v8 || (OUTLINED_FUNCTION_9_87() & 1) != 0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CABasicAnimation);
    swift_bridgeObjectRetain();
    id v9 = @nonobjc CABasicAnimation.__allocating_init(keyPath:)(a1, a2);
    id v10 = objc_msgSend(v3, sel_presentationLayer);
    if (v10)
    {
      uint64_t v11 = v10;
      objc_msgSend(v10, sel_percentage);
    }
    else
    {
      objc_msgSend(v3, sel_percentage);
    }
    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v9, sel_setFromValue_, isa);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1C87730B0](a1, a2);
    v15.receiver = v3;
    v15.super_class = (Class)type metadata accessor for ConversationControlsJoinCallCountdownView.RingLayer();
    id v9 = objc_msgSendSuper2(&v15, sel_actionForKey_, v13);
  }
  return v9;
}

Swift::Void __swiftcall ConversationControlsJoinCallCountdownView.RingLayer.draw(in:)(CGContextRef in)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CGPathFillRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v8 = (objc_class *)type metadata accessor for ConversationControlsJoinCallCountdownView.RingLayer();
  v39.receiver = v1;
  v39.super_class = v8;
  [(CGContext *)&v39 drawInContext:in];
  id v9 = objc_msgSend(v1, sel_presentationLayer);
  if (v9)
  {
    uint64_t v1 = v9;
    objc_msgSend(v9, sel_bounds);
    OUTLINED_FUNCTION_17_3();
  }
  else
  {
    objc_msgSend(v1, sel_bounds);
    OUTLINED_FUNCTION_17_3();
  }
  if (OUTLINED_FUNCTION_18_59())
  {
    OUTLINED_FUNCTION_4_118();
    double v38 = (*(double (**)(void))(v10 + 112))();
  }
  else
  {
    OUTLINED_FUNCTION_6_109();
    uint64_t v1 = v2;
    double v38 = (*(double (**)(void))(v11 + 112))();
  }
  id v12 = OUTLINED_FUNCTION_18_59();
  if (v12)
  {
    uint64_t v1 = v12;
    objc_msgSend(v12, sel_percentage);
    double v36 = v13;
  }
  else
  {
    objc_msgSend(v2, sel_percentage);
    double v36 = v14;
  }
  if (OUTLINED_FUNCTION_18_59())
  {
    OUTLINED_FUNCTION_4_118();
    CGColorRef v37 = (CGColorRef)(*(uint64_t (**)(void))(v15 + 160))();
  }
  else
  {
    OUTLINED_FUNCTION_6_109();
    uint64_t v1 = v2;
    CGColorRef v37 = (CGColorRef)(*(uint64_t (**)(void))(v16 + 160))();
  }
  if (OUTLINED_FUNCTION_18_59())
  {
    OUTLINED_FUNCTION_4_118();
    double v18 = (CGColor *)(*(uint64_t (**)(void))(v17 + 136))();
  }
  else
  {
    OUTLINED_FUNCTION_6_109();
    double v18 = (CGColor *)(*(uint64_t (**)(void))(v19 + 136))();
  }
  v40.origin.x = OUTLINED_FUNCTION_4_0();
  CGFloat v20 = CGRectGetMaxX(v40) * 0.5;
  v41.origin.x = OUTLINED_FUNCTION_4_0();
  CGFloat v21 = CGRectGetMaxY(v41) * 0.5;
  OUTLINED_FUNCTION_15_73();
  uint64_t v22 = self;
  double v23 = OUTLINED_FUNCTION_4_0();
  id v26 = objc_msgSend(v24, v25, v23);
  uint64_t v27 = (const CGPath *)objc_msgSend(v26, sel_CGPath);
  CGContextSaveGState(in);
  CGContextAddPath(in, v27);
  CGContextSetFillColorWithColor(in, v18);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F1DA40], v4);
  CGContextRef.fillPath(using:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  CGContextRestoreGState(in);
  double v28 = OUTLINED_FUNCTION_15_73();
  CGFloat v29 = v38;
  id v30 = objc_msgSend(v22, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, v20, v21, v28 * 0.5 - v38 * 0.5, -1.57079633, (v36 * 360.0 + -90.0) * 0.0174532925);
  id v31 = objc_msgSend(v30, sel_CGPath);
  CGContextSaveGState(in);
  uint64_t v32 = (CGContext *)OUTLINED_FUNCTION_34_9();
  CGContextAddPath(v32, v33);
  CGColorRef v34 = v37;
  CGContextSetStrokeColorWithColor(in, v37);
  CGContextSetLineCap(in, kCGLineCapRound);
  CGContextSetLineWidth(in, v29);
  CGContextStrokePath(in);
  CGContextSetShouldAntialias(in, 1);
  CGContextRestoreGState(in);
}

id ConversationControlsJoinCallCountdownView.RingLayer.__deallocating_deinit()
{
  return ConversationControlsJoinCallCountdownView.RingLayer.__deallocating_deinit(type metadata accessor for ConversationControlsJoinCallCountdownView.RingLayer);
}

uint64_t ConversationControlsJoinCallCountdownView.CountingLayer.value.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(void *)v0;
}

id ConversationControlsJoinCallCountdownView.CountingLayer.value.setter(uint64_t a1)
{
  BOOL v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_value);
  OUTLINED_FUNCTION_11_0();
  uint64_t v4 = *v3;
  *BOOL v3 = a1;
  return ConversationControlsJoinCallCountdownView.CountingLayer.value.didset(v4);
}

id ConversationControlsJoinCallCountdownView.CountingLayer.value.didset(uint64_t a1)
{
  BOOL v3 = (void *)(v1 + OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_value);
  id result = (id)swift_beginAccess();
  if (*v3 != a1) {
    return ConversationControlsJoinCallCountdownView.CountingLayer.updateString()();
  }
  return result;
}

uint64_t key path getter for ConversationControlsJoinCallCountdownView.CountingLayer.valueFont : ConversationControlsJoinCallCountdownView.CountingLayer@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationControlsJoinCallCountdownView.CountingLayer.valueFont : ConversationControlsJoinCallCountdownView.CountingLayer(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68))(*a1);
}

void ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.didset()
{
  uint64_t v1 = (void **)(v0
               + OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_valueFont);
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  id v3 = v2;
  char v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) == 0) {
    ConversationControlsJoinCallCountdownView.CountingLayer.updateString()();
  }
}

id ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  return v1;
}

void ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.setter(void *a1)
{
  id v3 = (void **)(v1
               + OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_valueFont);
  OUTLINED_FUNCTION_11_0();
  char v4 = *v3;
  *id v3 = a1;
  id v5 = a1;
  ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.didset();
}

uint64_t ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.modify()
{
  uint64_t v0 = malloc(0x28uLL);
  OUTLINED_FUNCTION_13_72((uint64_t)v0);
  OUTLINED_FUNCTION_6_44();
  OUTLINED_FUNCTION_16_56();
  id v2 = v1;
  return OUTLINED_FUNCTION_34_9();
}

void ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.modify(void **a1, char a2)
{
  id v2 = *a1;
  char v4 = (id *)((char *)*a1 + 24);
  id v3 = *v4;
  if (a2)
  {
    ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.setter(v3);
  }
  else
  {
    ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.setter(v3);
  }
  free(v2);
}

id ConversationControlsJoinCallCountdownView.CountingLayer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ConversationControlsJoinCallCountdownView.CountingLayer.init()()
{
  id v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_value] = 0;
  uint64_t v2 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_valueFont;
  id v3 = self;
  uint64_t v4 = *MEMORY[0x1E4FB2950];
  id v5 = v1;
  id v6 = objc_msgSend(v3, sel_preferredFontForTextStyle_, v4);
  Class isa = UIFont.withTraits(_:)(0x8002u).super.isa;

  *(void *)&v1[v2] = isa;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for ConversationControlsJoinCallCountdownView.CountingLayer();
  return objc_msgSendSuper2(&v9, sel_init);
}

id ConversationControlsJoinCallCountdownView.RingLayer.__allocating_init(layer:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  uint64_t v4 = (void *)OUTLINED_FUNCTION_34_9();
  __swift_project_boxed_opaque_existential_1(v4, v5);
  id v6 = objc_msgSend(v3, sel_initWithLayer_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

char *ConversationControlsJoinCallCountdownView.CountingLayer.init(layer:)(void *a1)
{
  uint64_t v2 = v1;
  *(void *)&v1[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_value] = 0;
  uint64_t v4 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_valueFont;
  uint64_t v5 = self;
  uint64_t v6 = *MEMORY[0x1E4FB2950];
  uint64_t v7 = v2;
  id v8 = objc_msgSend(v5, sel_preferredFontForTextStyle_, v6);
  Class isa = UIFont.withTraits(_:)(0x8002u).super.isa;

  *(void *)&v2[v4] = isa;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for ConversationControlsJoinCallCountdownView.CountingLayer();
  id v11 = objc_msgSendSuper2(&v18, sel_initWithLayer_, v10);
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v17);
  id v12 = (char *)v11;
  if (swift_dynamicCast())
  {
    id v13 = objc_msgSend(v16, sel_value);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    double v14 = &v12[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_value];
    OUTLINED_FUNCTION_11_0();
    *(void *)double v14 = v13;
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v12;
}

uint64_t @objc ConversationControlsJoinCallCountdownView.RingLayer.init(layer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return a4(&v6);
}

id ConversationControlsJoinCallCountdownView.CountingLayer.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ConversationControlsJoinCallCountdownView.CountingLayer.init(coder:)()
{
  id v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_value] = 0;
  uint64_t v2 = OBJC_IVAR____TtCC15ConversationKit41ConversationControlsJoinCallCountdownView13CountingLayer_valueFont;
  id v3 = objc_msgSend(self, sel_preferredFontForTextStyle_, *MEMORY[0x1E4FB2950]);
  Class isa = UIFont.withTraits(_:)(0x8002u).super.isa;

  *(void *)&v1[v2] = isa;
  OUTLINED_FUNCTION_12_70();
  __break(1u);
}

id ConversationControlsJoinCallCountdownView.CountingLayer.updateString()()
{
  id v1 = v0;
  uint64_t v2 = self;
  id v3 = objc_msgSend(v1, sel_value);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EC8]), sel_initWithInteger_, v3);
  id v5 = objc_msgSend(v2, sel_localizedStringFromNumber_numberStyle_, v4, 0);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C37696D0;
  uint64_t v10 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  uint64_t v11 = (*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60))(v10);
  uint64_t v12 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  *(void *)(inited + 40) = v11;
  id v13 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 64) = v12;
  *(void *)(inited + 72) = v13;
  double v14 = self;
  id v15 = v13;
  id v16 = objc_msgSend(v14, sel_whiteColor);
  *(void *)(inited + 104) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)(inited + 80) = v16;
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)();
  id v18 = objc_allocWithZone(MEMORY[0x1E4F28B10]);
  id v19 = @nonobjc NSAttributedString.init(string:attributes:)(v6, v8, v17);
  objc_msgSend(v1, sel_setString_, v19);

  return objc_msgSend(v1, sel_setNeedsDisplay);
}

id ConversationControlsJoinCallCountdownView.CountingLayer.__deallocating_deinit()
{
  return ConversationControlsJoinCallCountdownView.RingLayer.__deallocating_deinit(type metadata accessor for ConversationControlsJoinCallCountdownView.CountingLayer);
}

void ConversationControlsJoinCallCountdownView.percentageAnimation.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_percentageAnimation);
  *(void *)(v1 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_percentageAnimation) = a1;
}

uint64_t key path getter for ConversationControlsJoinCallCountdownView.ringWidth : ConversationControlsJoinCallCountdownView@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t key path setter for ConversationControlsJoinCallCountdownView.ringWidth : ConversationControlsJoinCallCountdownView(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t ConversationControlsJoinCallCountdownView.ringWidth.didset(unint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringWidth;
  uint64_t result = swift_beginAccess();
  if (a2)
  {
    if (*(unsigned char *)(v5 + 8)) {
      return result;
    }
    v7.n128_u64[0] = *(void *)v5;
    return (*(uint64_t (**)(uint64_t, __n128, __n128))((*MEMORY[0x1E4FBC8C8] & **(void **)(v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer))
                                                              + 0x78))(result, v7, v8);
  }
  if ((*(unsigned char *)(v5 + 8) & 1) == 0)
  {
    v7.n128_u64[0] = *(void *)v5;
    v8.n128_u64[0] = a1;
    if (*(double *)&a1 != *(double *)v5) {
      return (*(uint64_t (**)(uint64_t, __n128, __n128))((*MEMORY[0x1E4FBC8C8] & **(void **)(v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer))
    }
                                                                + 0x78))(result, v7, v8);
  }
  return result;
}

uint64_t ConversationControlsJoinCallCountdownView.ringWidth.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *(void *)v0;
}

uint64_t ConversationControlsJoinCallCountdownView.ringWidth.setter(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringWidth;
  OUTLINED_FUNCTION_11_0();
  unint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  return ConversationControlsJoinCallCountdownView.ringWidth.didset(v6, v7);
}

void (*ConversationControlsJoinCallCountdownView.ringWidth.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  OUTLINED_FUNCTION_6_44();
  OUTLINED_FUNCTION_16_56();
  *((unsigned char *)v3 + 8) = *(unsigned char *)(v1 + 8);
  return ConversationControlsJoinCallCountdownView.ringWidth.modify;
}

void ConversationControlsJoinCallCountdownView.ringWidth.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ConversationControlsJoinCallCountdownView.ringWidth.setter(*(void *)(*(void *)a1 + 24), *(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t key path getter for ConversationControlsJoinCallCountdownView.fillColor : ConversationControlsJoinCallCountdownView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationControlsJoinCallCountdownView.fillColor : ConversationControlsJoinCallCountdownView(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB8);
  id v4 = *a1;
  return v3(v2);
}

void ConversationControlsJoinCallCountdownView.fillColor.didset(void *a1)
{
  uint64_t v2 = v1;
  id v4 = (void **)(v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_fillColor);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (!a1) {
    goto LABEL_5;
  }
  if (v5)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    id v6 = v5;
    id v7 = a1;
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v5 = *v4;
LABEL_5:
      if (v5)
      {
        objc_super v9 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer);
        id v10 = v5;
        id v11 = objc_msgSend(v10, sel_CGColor);
        (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v9) + 0x90))(v11);
      }
    }
  }
}

void *ConversationControlsJoinCallCountdownView.fillColor.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void ConversationControlsJoinCallCountdownView.fillColor.setter(void *a1)
{
}

uint64_t ConversationControlsJoinCallCountdownView.fillColor.modify()
{
  uint64_t v0 = malloc(0x28uLL);
  OUTLINED_FUNCTION_13_72((uint64_t)v0);
  OUTLINED_FUNCTION_6_44();
  OUTLINED_FUNCTION_16_56();
  id v2 = v1;
  return OUTLINED_FUNCTION_34_9();
}

void ConversationControlsJoinCallCountdownView.fillColor.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for ConversationControlsJoinCallCountdownView.strokeColor : ConversationControlsJoinCallCountdownView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for ConversationControlsJoinCallCountdownView.strokeColor : ConversationControlsJoinCallCountdownView(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0);
  id v4 = *a1;
  return v3(v2);
}

void ConversationControlsJoinCallCountdownView.strokeColor.didset(void *a1)
{
  uint64_t v2 = v1;
  id v4 = (void **)(v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_strokeColor);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (!a1) {
    goto LABEL_5;
  }
  if (v5)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    id v6 = v5;
    id v7 = a1;
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v5 = *v4;
LABEL_5:
      if (v5)
      {
        objc_super v9 = *(void **)(v2 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer);
        id v10 = v5;
        id v11 = objc_msgSend(v10, sel_CGColor);
        (*(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *v9) + 0xA8))(v11);
      }
    }
  }
}

void *ConversationControlsJoinCallCountdownView.strokeColor.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void ConversationControlsJoinCallCountdownView.strokeColor.setter(void *a1)
{
}

void ConversationControlsJoinCallCountdownView.fillColor.setter(void *a1, void *a2, void (*a3)(void *))
{
  id v6 = (void **)(v3 + *a2);
  OUTLINED_FUNCTION_11_0();
  id v7 = *v6;
  *id v6 = a1;
  id v8 = a1;
  a3(v7);
}

uint64_t ConversationControlsJoinCallCountdownView.strokeColor.modify()
{
  uint64_t v0 = malloc(0x28uLL);
  OUTLINED_FUNCTION_13_72((uint64_t)v0);
  OUTLINED_FUNCTION_6_44();
  OUTLINED_FUNCTION_16_56();
  id v2 = v1;
  return OUTLINED_FUNCTION_34_9();
}

void ConversationControlsJoinCallCountdownView.strokeColor.modify(uint64_t a1, char a2)
{
}

void ConversationControlsJoinCallCountdownView.fillColor.modify(uint64_t a1, char a2, void (*a3)(id))
{
  id v4 = *(void **)a1;
  id v6 = (id *)(*(void *)a1 + 24);
  id v5 = *v6;
  if (a2)
  {
    id v7 = v5;
    a3(v5);
  }
  else
  {
    a3(*(id *)(*(void *)a1 + 24));
  }
  free(v4);
}

id ConversationControlsJoinCallCountdownView.__allocating_init(frame:)()
{
  OUTLINED_FUNCTION_7();
  id v1 = objc_allocWithZone(v0);
  double v4 = OUTLINED_FUNCTION_6_2();
  return objc_msgSend(v2, v3, v4);
}

char *ConversationControlsJoinCallCountdownView.init(frame:)()
{
  OUTLINED_FUNCTION_7();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_percentageAnimation] = 0;
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringWidth];
  *(void *)id v1 = 0;
  v1[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_fillColor] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_strokeColor] = 0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for ConversationControlsJoinCallCountdownView.RingLayer());
  uint64_t v3 = v0;
  id v4 = objc_msgSend(v2, sel_init);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer] = v4;
  id v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConversationControlsJoinCallCountdownView.CountingLayer()), sel_init);
  *(void *)&v3[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_countdownLayer] = v5;
  id v6 = v5;
  objc_msgSend(v6, sel_setAllowsFontSubpixelQuantization_, 1);

  uint64_t v26 = type metadata accessor for ConversationControlsJoinCallCountdownView();
  double v7 = OUTLINED_FUNCTION_6_2();
  id v10 = objc_msgSendSuper2(v8, v9, v7, v3, v26);
  objc_msgSend(v10, sel_setUserInteractionEnabled_, 0);
  id v11 = (char *)v10;
  id v12 = objc_msgSend(v11, sel_layer);
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer;
  objc_msgSend(v12, sel_addSublayer_, *(void *)&v11[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer]);

  id v14 = *(id *)&v11[v13];
  objc_msgSend(v11, sel_bounds);
  objc_msgSend(v14, sel_setFrame_);

  id v15 = *(void **)&v11[v13];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  id v16 = v15;
  objc_msgSend(v16, sel_setContentsScale_, static UIView.screenScale.getter());

  uint64_t v17 = v11;
  id v18 = objc_msgSend(v17, sel_layer);
  uint64_t v19 = OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_countdownLayer;
  objc_msgSend(v18, sel_addSublayer_, *(void *)&v17[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_countdownLayer]);

  id v20 = *(id *)&v17[v19];
  objc_msgSend(v17, sel_bounds);
  objc_msgSend(v20, sel_setFrame_);

  CGFloat v21 = *(void **)&v17[v19];
  objc_msgSend(v21, sel_setAlignmentMode_, *MEMORY[0x1E4F39D38]);
  id v22 = v21;
  objc_msgSend(v22, sel_setContentsScale_, static UIView.screenScale.getter());

  double v23 = v17;
  id v24 = objc_msgSend(v23, sel_layer);
  objc_msgSend(v24, sel_setContentsScale_, static UIView.screenScale.getter());

  return v23;
}

void ConversationControlsJoinCallCountdownView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_percentageAnimation] = 0;
  id v1 = &v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringWidth];
  *(void *)id v1 = 0;
  v1[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_fillColor] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_strokeColor] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id ConversationControlsJoinCallCountdownView.frame.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationControlsJoinCallCountdownView();
  return objc_msgSendSuper2(&v2, sel_frame);
}

id ConversationControlsJoinCallCountdownView.frame.setter()
{
  OUTLINED_FUNCTION_7();
  id v1 = (objc_class *)type metadata accessor for ConversationControlsJoinCallCountdownView();
  v14.receiver = v0;
  v14.super_class = v1;
  objc_msgSendSuper2(&v14, sel_frame);
  CGFloat v3 = v2;
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  double v10 = OUTLINED_FUNCTION_6_2();
  objc_msgSendSuper2(v11, v12, v10, v0, v1);
  return ConversationControlsJoinCallCountdownView.frame.didset(v3, v5, v7, v9);
}

id ConversationControlsJoinCallCountdownView.frame.didset(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat v5 = v4;
  objc_msgSend(v4, sel_frame);
  v24.origin.x = a1;
  v24.origin.y = a2;
  v24.size.double width = a3;
  v24.size.double height = a4;
  id result = (id)CGRectEqualToRect(v20, v24);
  if ((result & 1) == 0)
  {
    id v11 = objc_msgSend(v4, sel_layer);
    objc_msgSend(v5, sel_bounds);
    objc_msgSend(v11, sel_setCornerRadius_, v12 * 0.5);

    uint64_t v13 = *(void **)&v5[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer];
    objc_msgSend(v5, sel_bounds);
    objc_msgSend(v13, sel_setFrame_);
    id v14 = objc_msgSend(v13, sel_setNeedsDisplay);
    id v15 = *(void **)&v5[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_countdownLayer];
    id v16 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v15) + 0x60))(v14);
    double v17 = UIFont.layoutLineHeight.getter();

    objc_msgSend(v5, sel_bounds);
    CGFloat v18 = (CGRectGetHeight(v21) - v17) * 0.5;
    objc_msgSend(v5, sel_bounds);
    v22.origin.x = 0.0;
    v22.origin.y = v18;
    v22.size.double height = v17;
    CGRect v23 = CGRectIntegral(v22);
    objc_msgSend(v15, sel_setFrame_, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
    return objc_msgSend(v15, sel_setNeedsDisplay);
  }
  return result;
}

Swift::Void __swiftcall ConversationControlsJoinCallCountdownView.initializeCountdown(with:fullValue:)(Swift::Double with, Swift::Double fullValue)
{
  uint64_t v3 = v2;
  double v5 = with / fullValue;
  if (with == fullValue) {
    double v6 = 1.0;
  }
  else {
    double v6 = v5;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CABasicAnimation);
  id v7 = @nonobjc CABasicAnimation.__allocating_init(keyPath:)(0x61746E6563726570, 0xEA00000000006567);
  objc_msgSend(v7, sel_setDuration_, with);
  Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v7, sel_setFromValue_, isa);

  Class v9 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v7, sel_setToValue_, v9);

  objc_msgSend(v7, sel_setFillMode_, *MEMORY[0x1E4F39FA8]);
  objc_msgSend(v7, sel_setRemovedOnCompletion_, 0);
  if ((~*(void *)&with & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (with <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (with >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    return;
  }
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_countdownLayer), sel_setValue_, (uint64_t)with);
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer), sel_setPercentage_, v6);
  id v10 = v7;
  ConversationControlsJoinCallCountdownView.percentageAnimation.setter((uint64_t)v7);
}

Swift::Void __swiftcall ConversationControlsJoinCallCountdownView.startCountdown()()
{
  id v1 = *(void **)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_percentageAnimation];
  if (v1)
  {
    uint64_t v2 = self;
    id v3 = v1;
    objc_msgSend(v2, sel_begin);
    objc_msgSend(v2, sel_setDisableActions_, 1);
    objc_msgSend(v0, sel_setNeedsLayout);
    outlined bridged method (mnbnn) of @objc CALayer.add(_:forKey:)((uint64_t)v3, 0x61746E6563726570, 0xEA00000000006567, *(void **)&v0[OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_ringLayer]);
    objc_msgSend(v2, sel_commit);
  }
}

Swift::Void __swiftcall ConversationControlsJoinCallCountdownView.tick()()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit41ConversationControlsJoinCallCountdownView_countdownLayer);
  id v2 = objc_msgSend(v1, sel_value);
  if (__OFSUB__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v1, sel_setValue_, ((uint64_t)v2 - 1) & ~(((uint64_t)v2 - 1) >> 63));
  }
}

id ConversationControlsJoinCallCountdownView.__deallocating_deinit()
{
  return ConversationControlsJoinCallCountdownView.RingLayer.__deallocating_deinit(type metadata accessor for ConversationControlsJoinCallCountdownView);
}

id ConversationControlsJoinCallCountdownView.RingLayer.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id @nonobjc NSAttributedString.init(string:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = (void *)MEMORY[0x1C87730B0]();
  swift_bridgeObjectRelease();
  if (a3)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }
  id v7 = objc_msgSend(v3, sel_initWithString_attributes_, v5, v6.super.isa);

  return v7;
}

uint64_t type metadata accessor for ConversationControlsJoinCallCountdownView.CountingLayer()
{
  return self;
}

uint64_t type metadata accessor for ConversationControlsJoinCallCountdownView()
{
  return self;
}

void outlined bridged method (mnbnn) of @objc CALayer.add(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (id)MEMORY[0x1C87730B0](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(a4, sel_addAnimation_forKey_, a1, v6);
}

char *keypath_get_selector_percentage()
{
  return sel_percentage;
}

id sub_1C35559C8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_percentage);
  *a2 = v4;
  return result;
}

id sub_1C35559FC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPercentage_, *a1);
}

char *keypath_get_selector_value()
{
  return sel_value;
}

id sub_1C3555A34@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_value);
  *a2 = result;
  return result;
}

id sub_1C3555A68(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setValue_, *a1);
}

uint64_t method lookup function for ConversationControlsJoinCallCountdownView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsJoinCallCountdownView);
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.ringWidth.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.ringWidth.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA0))(a1, a2 & 1);
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.ringWidth.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.fillColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.fillColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.fillColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.strokeColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.strokeColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.strokeColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.initializeCountdown(with:fullValue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.startCountdown()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.tick()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t method lookup function for ConversationControlsJoinCallCountdownView.RingLayer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsJoinCallCountdownView.RingLayer);
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.lineWidth.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.fillColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.fillColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.fillColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.strokeColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.strokeColor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.RingLayer.strokeColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t method lookup function for ConversationControlsJoinCallCountdownView.CountingLayer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationControlsJoinCallCountdownView.CountingLayer);
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ConversationControlsJoinCallCountdownView.CountingLayer.valueFont.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6TUCallCG_15ConversationKit26AnsweringMachineCallStatusVs5NeverOTg504_s15e5Kit17ij39ServiceC07currentD11ForAllCallsSayAA016g19MachinecD0VGyFAFSo6D6CXEfU_AI0ijN0CTf1cn_n(unint64_t a1)
{
  unint64_t v2 = v1;
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      uint64_t v23 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v4 < 0) {
        break;
      }
      uint64_t v5 = 0;
      uint64_t v6 = v23;
      uint64_t v20 = v2;
      unint64_t v21 = v3 & 0xC000000000000001;
      unint64_t v7 = v3;
      while (v4 != v5)
      {
        if (v21) {
          id v8 = (id)MEMORY[0x1C87744F0](v5, v3);
        }
        else {
          id v8 = *(id *)(v3 + 8 * v5 + 32);
        }
        Class v9 = v8;
        id v10 = objc_msgSend(v8, sel_callUUID, v20);
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        v14._uint64_t countAndFlagsBits = 0xD000000000000018;
        v14._object = (void *)0x80000001C37B3450;
        v15._uint64_t countAndFlagsBits = v11;
        v15._object = v13;
        CallStatusService.currentStatus(updateSource:for:)(&v22, v14, v15);

        swift_bridgeObjectRelease();
        uint64_t v23 = v6;
        unint64_t v2 = *(void *)(v6 + 16);
        if (v2 >= *(void *)(v6 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v23;
        }
        ++v5;
        *(void *)(v6 + 16) = v2 + 1;
        uint64_t v16 = v6 + 56 * v2;
        Swift::String updateSource = v22.updateSource;
        Swift::String callUUID = v22.callUUID;
        long long v19 = *(_OWORD *)&v22.status;
        *(unsigned char *)(v16 + 80) = v22.announcementHasFinished;
        *(Swift::String *)(v16 + 48) = callUUID;
        *(_OWORD *)(v16 + 64) = v19;
        *(Swift::String *)(v16 + 32) = updateSource;
        unint64_t v3 = v7;
        if (v4 == v5) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v4) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_release();
  }
}

uint64_t CallStatusService.currentStatusForAllCalls()()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC15ConversationKit17CallStatusService_callCenter), sel_currentCalls));
  type metadata accessor for TUCall();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6TUCallCG_15ConversationKit26AnsweringMachineCallStatusVs5NeverOTg504_s15e5Kit17ij39ServiceC07currentD11ForAllCallsSayAA016g19MachinecD0VGyFAFSo6D6CXEfU_AI0ijN0CTf1cn_n(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  return v4;
}

void __swiftcall CallStatusService.currentStatus(updateSource:for:)(ConversationKit::AnsweringMachineCallStatus *__return_ptr retstr, Swift::String updateSource, Swift::String a3)
{
  object = a3._object;
  uint64_t countAndFlagsBits = a3._countAndFlagsBits;
  uint64_t v6 = updateSource._object;
  uint64_t v7 = updateSource._countAndFlagsBits;
  Class v9 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_callCenter);
  id v10 = (void *)MEMORY[0x1C87730B0](a3._countAndFlagsBits, a3._object);
  id v11 = objc_msgSend(v9, sel_callWithCallUUID_, v10);

  if (v11)
  {
    callStatus(updateSource:for:)(v11, v7, (uint64_t)v6, (uint64_t)v18);

    Swift::Bool v12 = v24;
    Swift::Int v13 = v23;
    Swift::Bool v14 = v22;
    Swift::Bool v15 = v21;
    Swift::Bool v16 = v20;
    ConversationKit::CallStatus v17 = v19;
    uint64_t countAndFlagsBits = v18[2];
    object = (void *)v18[3];
    uint64_t v7 = v18[0];
    uint64_t v6 = (void *)v18[1];
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::Bool v16 = 0;
    Swift::Bool v15 = 0;
    Swift::Bool v14 = 0;
    Swift::Int v13 = 0;
    Swift::Bool v12 = 0;
    ConversationKit::CallStatus v17 = ConversationKit_CallStatus_disconnected;
  }
  retstr->updateSource._uint64_t countAndFlagsBits = v7;
  retstr->updateSource._object = v6;
  retstr->callUUID._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->callUUID._object = object;
  retstr->status = v17;
  retstr->isScreening = v16;
  retstr->isScreeningDueToUserInteraction = v15;
  retstr->callIsEligibleForScreening = v14;
  retstr->streamToken = v13;
  retstr->announcementHasFinished = v12;
}

uint64_t CallStatusService.__allocating_init(logger:notificationCenter:callCenter:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  CallStatusService.init(logger:notificationCenter:callCenter:)(a1, a2, a3);
  return v6;
}

uint64_t CallStatusService.callsStatus.getter()
{
  return swift_retain();
}

id CallStatusService.notificationCenter.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t CallStatusService.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CallStatusService.init(logger:notificationCenter:callCenter:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<AnsweringMachineCallStatus, Never>);
  swift_allocObject();
  *(void *)(v3 + 16) = PassthroughSubject.init()();
  *(void *)(v3 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_observers) = MEMORY[0x1E4FBC860];
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000074, 0x80000001C37B3360, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x80000001C37B33E0, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2048;
    uint64_t v34 = 27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F90000, v8, v9, "%s%s:#%ld Called", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }

  uint64_t v11 = v4 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_logger;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_5_3();
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v11, a1);
  *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_callCenter) = a3;
  *(void *)(v4 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>);
  uint64_t inited = swift_initStackObject();
  v31[1] = v31;
  *(_OWORD *)(inited + 16) = xmmword_1C376A6F0;
  uint64_t v16 = a1;
  ConversationKit::CallStatus v17 = (void *)*MEMORY[0x1E4FADD90];
  CGFloat v18 = a2;
  ConversationKit::CallStatus v19 = (void *)*MEMORY[0x1E4FADD58];
  *(void *)(inited + 32) = *MEMORY[0x1E4FADD90];
  *(void *)(inited + 40) = v19;
  Swift::Bool v20 = (void *)*MEMORY[0x1E4FADDD0];
  Swift::Bool v21 = (void *)*MEMORY[0x1E4FADE38];
  *(void *)(inited + 48) = *MEMORY[0x1E4FADDD0];
  *(void *)(inited + 56) = v21;
  MEMORY[0x1F4188790](inited);
  v30[2] = v18;
  void v30[3] = v4;
  v30[4] = v16;
  id v22 = a3;
  id v23 = v18;
  id v24 = v17;
  id v25 = v19;
  id v26 = v20;
  id v27 = v21;
  uint64_t v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18NSNotificationNameaG_So8NSObject_ps5NeverOTg5((void (*)(void))partial apply for closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:), (uint64_t)v30, inited);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v16, v32);
  *(void *)(v4 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_observers) = v28;
  swift_bridgeObjectRelease();
  return v4;
}

void closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  id v22 = a2;
  id v23 = a4;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = *a1;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v11;
  uint64_t v21 = v10;
  id v12 = objc_msgSend(self, sel_mainQueue);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v16 = (uint64_t *)(v15 + ((v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = v20;
  *uint64_t v16 = v21;
  v16[1] = v17;
  void aBlock[4] = partial apply for closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = &block_descriptor_96;
  CGFloat v18 = _Block_copy(aBlock);
  swift_release();
  id v19 = objc_msgSend(v22, sel_addObserverForName_object_queue_usingBlock_, v9, 0, v12, v18);
  _Block_release(v18);

  *id v23 = v19;
}

void closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(uint64_t a1, uint64_t a2, uint8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v58 = a5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v15 = Strong;
  Notification.object.getter();
  if (!*((void *)&v61 + 1))
  {
    outlined destroy of Any?((uint64_t)&v60);
LABEL_9:
    uint64_t v38 = type metadata accessor for Notification();
    uint64_t v39 = *(void *)(v38 - 8);
    __n128 v40 = MEMORY[0x1F4188790](v38);
    uint64_t v42 = (char *)&v51 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v39 + 16))(v42, a1, v38, v40);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v58 = v15;
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      id v56 = (id)swift_slowAlloc();
      *(void *)&long long v60 = v56;
      uint64_t v57 = &v51;
      *(_DWORD *)uint64_t v45 = 136446210;
      uint64_t v55 = v45 + 4;
      uint64_t v46 = (void *)Notification.name.getter();
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;

      id v59 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
      _os_log_impl(&dword_1C2F90000, v43, v44, "ignoring %{public}s missing TUCall", v45, 0xCu);
      id v50 = v56;
      swift_arrayDestroy();
      MEMORY[0x1C87760E0](v50, -1, -1);
      MEMORY[0x1C87760E0](v45, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    }
    return;
  }
  type metadata accessor for TUCall();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v55 = a3;
  id v16 = v59;
  id v17 = objc_msgSend(v59, sel_callUUID);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v19;
  uint64_t v54 = v18;

  id v20 = objc_msgSend(v16, sel_description);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v22;
  uint64_t v52 = v21;

  id v56 = v16;
  uint64_t v57 = (uint64_t *)a4;
  callStatus(updateSource:for:)(v16, a4, v58, (uint64_t)&v60);
  if v62 == 6 && (BYTE2(v62))
  {
    type metadata accessor for Defaults();
    swift_allocObject();
    uint64_t v23 = Defaults.init()();
    (*(void (**)(void))(*(void *)v23 + 240))(0);
    swift_release();
  }
  uint64_t v24 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v24);
  (*(void (**)(char *, uint8_t *, uint64_t))(v9 + 16))((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v55, v8);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v25 = v58;
  swift_bridgeObjectRetain();
  uint64_t v26 = static MainActor.shared.getter();
  uint64_t v27 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v55 = (uint8_t *)v8;
  uint64_t v28 = (v27 + 72) & ~v27;
  CGFloat v29 = (char *)swift_allocObject();
  uint64_t v30 = MEMORY[0x1E4FBCFD8];
  *((void *)v29 + 2) = v26;
  *((void *)v29 + 3) = v30;
  id v31 = v57;
  *((void *)v29 + 4) = v15;
  *((void *)v29 + 5) = v31;
  uint64_t v33 = v54;
  uint64_t v32 = v55;
  *((void *)v29 + 6) = v25;
  *((void *)v29 + 7) = v33;
  *((void *)v29 + 8) = v53;
  (*(void (**)(char *, char *, uint8_t *))(v9 + 32))(&v29[v28], (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v32);
  uint64_t v34 = &v29[(v28 + v10 + 7) & 0xFFFFFFFFFFFFFFF8];
  long long v35 = v61;
  *(_OWORD *)uint64_t v34 = v60;
  *((_OWORD *)v34 + 1) = v35;
  *((_OWORD *)v34 + 2) = v62;
  v34[48] = v63;
  double v36 = (uint64_t *)&v29[(v28 + v10 + 63) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v37 = v51;
  *double v36 = v52;
  v36[1] = v37;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  swift_release();
}

uint64_t callStatus(updateSource:for:)@<X0>(id a1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  id v7 = objc_msgSend(a1, sel_callUUID);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  LOBYTE(v7) = CallStatus.init(_:)((uint64_t)objc_msgSend(a1, sel_status));
  unsigned __int8 v11 = objc_msgSend(a1, sel_isScreening);
  unsigned __int8 v12 = objc_msgSend(a1, sel_isScreeningDueToUserInteraction);
  unsigned __int8 v13 = objc_msgSend(a1, sel_isEligibleForScreening);
  id v14 = objc_msgSend(a1, sel_answeringMachineStreamToken);
  unsigned __int8 v15 = objc_msgSend(a1, sel_screeningAnnouncementHasFinished);
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v10;
  *(unsigned char *)(a4 + 32) = (_BYTE)v7;
  *(unsigned char *)(a4 + 33) = v11;
  *(unsigned char *)(a4 + 34) = v12;
  *(unsigned char *)(a4 + 35) = v13;
  *(void *)(a4 + 40) = v14;
  *(unsigned char *)(a4 + 48) = v15;
  return swift_bridgeObjectRetain();
}

void partial apply for closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(uint64_t *a1@<X0>, void *a2@<X8>)
{
  closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(a1, *(void **)(v2 + 16), *(void *)(v2 + 32), a2);
}

uint64_t closure #1 in closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 136) = v14;
  *(void *)(v8 + 144) = v15;
  *(_OWORD *)(v8 + 120) = v13;
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = a8;
  *(void *)(v8 + 88) = a5;
  *(void *)(v8 + 96) = a6;
  *(void *)(v8 + 80) = a4;
  type metadata accessor for MainActor();
  *(void *)(v8 + 152) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:), v10, v9);
}

uint64_t closure #1 in closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void **)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v5 = *(void **)(v0 + 96);
  swift_release();
  v7._uint64_t countAndFlagsBits = v6;
  v7._object = v5;
  v8._uint64_t countAndFlagsBits = v4;
  v8._object = v3;
  CallStatusService.currentStatus(updateSource:for:)((ConversationKit::AnsweringMachineCallStatus *)(v0 + 16), v7, v8);
  swift_bridgeObjectRetain();
  outlined retain of AnsweringMachineCallStatus(v2);
  outlined retain of AnsweringMachineCallStatus(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of AnsweringMachineCallStatus(v2);
  outlined retain of AnsweringMachineCallStatus(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = v26[16];
    unint64_t v24 = v26[18];
    uint64_t v25 = v26[17];
    uint64_t v12 = v26[11];
    unint64_t v13 = v26[12];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446978;
    swift_bridgeObjectRetain();
    v26[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v27);
    OUTLINED_FUNCTION_3_128();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2082;
    outlined retain of AnsweringMachineCallStatus(v11);
    uint64_t v15 = AnsweringMachineCallStatus.description.getter();
    unint64_t v17 = v16;
    outlined release of AnsweringMachineCallStatus(v11);
    v26[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v27);
    OUTLINED_FUNCTION_3_128();
    swift_bridgeObjectRelease();
    outlined release of AnsweringMachineCallStatus(v11);
    outlined release of AnsweringMachineCallStatus(v11);
    *(_WORD *)(v14 + 22) = 2082;
    outlined retain of AnsweringMachineCallStatus(v1);
    uint64_t v18 = AnsweringMachineCallStatus.description.getter();
    unint64_t v20 = v19;
    outlined release of AnsweringMachineCallStatus(v1);
    v26[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v27);
    OUTLINED_FUNCTION_3_128();
    swift_bridgeObjectRelease();
    outlined release of AnsweringMachineCallStatus(v1);
    outlined release of AnsweringMachineCallStatus(v1);
    *(_WORD *)(v14 + 32) = 2082;
    swift_bridgeObjectRetain();
    v26[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F90000, v9, v10, "CallStatusService: recieved notification from source %{public}s for status: %{public}s, fetched new Status to send: %{public}s \n call: %{public}s", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_3();
  }
  else
  {
    uint64_t v21 = v26[16];

    swift_bridgeObjectRelease_n();
    outlined release of AnsweringMachineCallStatus(v21);
    outlined release of AnsweringMachineCallStatus(v21);
    outlined release of AnsweringMachineCallStatus(v1);
    outlined release of AnsweringMachineCallStatus(v1);
    swift_bridgeObjectRelease_n();
  }
  CallStatusService.send(status:)();
  outlined release of AnsweringMachineCallStatus(v1);
  uint64_t v22 = (uint64_t (*)(void))v26[1];
  return v22();
}

uint64_t CallStatusService.send(status:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t CallStatusService.deinit()
{
  objc_msgSend(*(id *)(v0 + 24), sel_removeObserver_, v0);
  swift_release();

  uint64_t v1 = v0 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CallStatusService.__deallocating_deinit()
{
  CallStatusService.deinit();
  return swift_deallocClassInstance();
}

void __swiftcall CallStatusService.currentStatus(updateSource:for:)(ConversationKit::AnsweringMachineCallStatus *__return_ptr retstr, Swift::String updateSource, ConversationKit::AnsweringMachineCallStatus *a3)
{
  object = updateSource._object;
  uint64_t countAndFlagsBits = updateSource._countAndFlagsBits;
  Swift::String v8 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_callCenter);
  uint64_t v9 = a3->callUUID._countAndFlagsBits;
  os_log_type_t v10 = a3->callUUID._object;
  uint64_t v11 = (void *)MEMORY[0x1C87730B0](v9, v10);
  id callIsEligibleForScreening = objc_msgSend(v8, sel_callWithCallUUID_, v11);

  if (callIsEligibleForScreening)
  {
    callStatus(updateSource:for:)(callIsEligibleForScreening, countAndFlagsBits, (uint64_t)object, (uint64_t)v22);

    Swift::Bool v13 = v28;
    Swift::Int v14 = v27;
    LOBYTE(callIsEligibleForScreening) = v26;
    Swift::Bool isScreeningDueToUserInteraction = v25;
    Swift::Bool isScreening = v24;
    ConversationKit::CallStatus status = v23;
    uint64_t v9 = v22[2];
    os_log_type_t v10 = (void *)v22[3];
    uint64_t v18 = v22[0];
    unint64_t v19 = (void *)v22[1];
  }
  else
  {
    Swift::Bool announcementHasFinished = a3->announcementHasFinished;
    Swift::Int streamToken = a3->streamToken;
    id callIsEligibleForScreening = (id)a3->callIsEligibleForScreening;
    Swift::Bool isScreeningDueToUserInteraction = a3->isScreeningDueToUserInteraction;
    Swift::Bool isScreening = a3->isScreening;
    ConversationKit::CallStatus status = a3->status;
    uint64_t v18 = a3->updateSource._countAndFlagsBits;
    unint64_t v19 = a3->updateSource._object;
    outlined retain of AnsweringMachineCallStatus((uint64_t)a3);
    Swift::Int v14 = streamToken;
    Swift::Bool v13 = announcementHasFinished;
  }
  retstr->updateSource._uint64_t countAndFlagsBits = v18;
  retstr->updateSource._object = v19;
  retstr->callUUID._uint64_t countAndFlagsBits = v9;
  retstr->callUUID._object = v10;
  retstr->ConversationKit::CallStatus status = status;
  retstr->Swift::Bool isScreening = isScreening;
  retstr->Swift::Bool isScreeningDueToUserInteraction = isScreeningDueToUserInteraction;
  retstr->id callIsEligibleForScreening = (char)callIsEligibleForScreening;
  retstr->Swift::Int streamToken = v14;
  retstr->Swift::Bool announcementHasFinished = v13;
}

Swift::Void __swiftcall CallStatusService.updateStatus(updateSource:for:withNotification:)(Swift::String updateSource, Swift::String a2, Swift::Bool withNotification)
{
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  if (withNotification)
  {
    uint64_t v6 = *(void **)(v3 + OBJC_IVAR____TtC15ConversationKit17CallStatusService_callCenter);
    Swift::String v7 = (void *)MEMORY[0x1C87730B0](a2._countAndFlagsBits, a2._object);
    os_log_t oslog = objc_msgSend(v6, sel_callWithCallUUID_, v7);

    if (oslog)
    {
      objc_msgSend(*(id *)(v3 + 24), sel_postNotificationName_object_, *MEMORY[0x1E4FADD90], oslog);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        v11.updateSource._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v11.updateSource._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2F90000, oslog, v8, "unable to update status for call with uuid %s", v9, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
        OUTLINED_FUNCTION_3();

        return;
      }
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    CallStatusService.currentStatus(updateSource:for:)(&v11, updateSource, a2);
    CallStatusService.send(status:)();
    outlined release of AnsweringMachineCallStatus((uint64_t)&v11);
  }
}

uint64_t ObjC metadata update function for CallStatusService()
{
  return type metadata accessor for CallStatusService();
}

uint64_t type metadata accessor for CallStatusService()
{
  uint64_t result = type metadata singleton initialization cache for CallStatusService;
  if (!type metadata singleton initialization cache for CallStatusService) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CallStatusService()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CallStatusService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallStatusService);
}

uint64_t dispatch thunk of CallStatusService.__allocating_init(logger:notificationCenter:callCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1C3557B08()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C3557B40()
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_5_3();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_106();
  v1(v0);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_1(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = *(void *)(v1 + 16);
  os_log_type_t v10 = (uint8_t *)(v1 + v8);
  ConversationKit::AnsweringMachineCallStatus v11 = (uint64_t *)(v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(a1, v9, v10, v12, v13);
}

uint64_t sub_1C3557C78()
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_5_3();
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_106();
  v1(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_1(v3);
  uint64_t v12 = v1[2];
  uint64_t v4 = v1[4];
  uint64_t v11 = v1[3];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in SyncedScreeningAlphaGradientView.gradient(for:);
  return closure #1 in closure #1 in closure #1 in CallStatusService.init(logger:notificationCenter:callCenter:)(a1, v12, v11, v4, v5, v6, v7, v8);
}

id LocalParticipantControlsView.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

ConversationKit::LocalParticipantControlsView::Capabilities __swiftcall LocalParticipantControlsView.Capabilities.updated(cinematicFraming:cameraBlur:effects:cameraFlip:cameraRotate:reactionGestures:studioLight:)(Swift::Bool_optional cinematicFraming, Swift::Bool_optional cameraBlur, Swift::Bool_optional effects, Swift::Bool_optional cameraFlip, Swift::Bool_optional cameraRotate, Swift::Bool_optional reactionGestures, Swift::Bool_optional studioLight)
{
  if (studioLight.value == 2) {
    char value = BYTE6(v7) & 1;
  }
  else {
    char value = studioLight.value;
  }
  BOOL v9 = (value & 1) == 0;
  uint64_t v10 = 0x1000000000000;
  if (v9) {
    uint64_t v10 = 0;
  }
  return (ConversationKit::LocalParticipantControlsView::Capabilities)OUTLINED_FUNCTION_49_19(v10);
}

ConversationKit::LocalParticipantControlsView::Capabilities __swiftcall LocalParticipantControlsView.Capabilities.init(cinematicFraming:cameraBlur:effects:cameraFlip:cameraRotate:reactionGestures:studioLight:)(Swift::Bool cinematicFraming, Swift::Bool cameraBlur, Swift::Bool effects, Swift::Bool cameraFlip, Swift::Bool cameraRotate, Swift::Bool reactionGestures, Swift::Bool studioLight)
{
  uint64_t v7 = 0x1000000000000;
  if (!studioLight) {
    uint64_t v7 = 0;
  }
  return (ConversationKit::LocalParticipantControlsView::Capabilities)OUTLINED_FUNCTION_49_19(v7);
}

void *LocalParticipantControlsView.Style.alphaAnimationDuration.unsafeMutableAddressor()
{
  return &static LocalParticipantControlsView.Style.alphaAnimationDuration;
}

Swift::Void __swiftcall LocalParticipantControlsViewProtocol.updateControlsAlpha()()
{
  (*(void (**)(void))(v0 + 24))(0);
}

BOOL static LocalParticipantControlsView.Style.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

double static LocalParticipantControlsView.Style.alphaAnimationDuration.getter()
{
  return 0.25;
}

void *LocalParticipantControlsView.Style.hideLabelButtonAnimationDelay.unsafeMutableAddressor()
{
  return &static LocalParticipantControlsView.Style.hideLabelButtonAnimationDelay;
}

double static LocalParticipantControlsView.Style.hideLabelButtonAnimationDelay.getter()
{
  return 0.1;
}

id LocalParticipantControlsView.Style.textStyle.getter(unsigned __int8 a1)
{
  id v2 = objc_msgSend(self, sel_currentDevice);
  id v3 = objc_msgSend(v2, sel_userInterfaceIdiom);

  uint64_t v4 = (void **)MEMORY[0x1E4FB28C8];
  uint64_t v5 = (void **)MEMORY[0x1E4FB28E0];
  if (v3 == (id)1) {
    uint64_t v5 = (void **)MEMORY[0x1E4FB28C8];
  }
  if (!a1) {
    uint64_t v4 = v5;
  }
  if (a1 - 2 < 2) {
    uint64_t v4 = (void **)MEMORY[0x1E4FB2998];
  }
  uint64_t v6 = *v4;
  return v6;
}

double LocalParticipantControlsView.Style.margin.getter(unsigned __int8 a1)
{
  if (a1 >= 2u)
  {
    if (a1 == 2)
    {
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      double v1 = *(double *)v3;
    }
    else
    {
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      double v1 = *(double *)&v3[7];
    }
  }
  else
  {
    Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
    double v1 = *(double *)&v3[3];
  }
  static Platform.current.getter();
  return v1;
}

double LocalParticipantControlsView.Style.bottomMargin.getter(unsigned __int8 a1)
{
  if (a1 >= 2u)
  {
    if (a1 == 2)
    {
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      double v1 = *(double *)v3;
    }
    else
    {
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      double v1 = *(double *)&v3[8];
    }
  }
  else
  {
    Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
    double v1 = *(double *)&v3[3];
  }
  static Platform.current.getter();
  return v1;
}

double LocalParticipantControlsView.Style.buttonSize.getter(char a1)
{
  switch(a1)
  {
    case 1:
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      double v1 = v4;
      goto LABEL_8;
    case 2:
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      double v1 = *(double *)&v3[1];
      goto LABEL_8;
    case 3:
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      double v1 = *(double *)&v3[2];
LABEL_8:
      static Platform.current.getter();
      break;
    default:
      Layout.LocalParticipantViewCameraControls.init()((uint64_t)v3);
      if (static Platform.current.getter() == 1) {
        double v1 = v4;
      }
      else {
        double v1 = 17.0;
      }
      break;
  }
  return v1;
}

double LocalParticipantControlsView.Style.buttonSpacing.getter(char a1)
{
  if (a1 == 3)
  {
    Layout.LocalParticipantViewCameraControls.init()((uint64_t)v4);
    id v2 = (double *)&v6;
    goto LABEL_5;
  }
  double v1 = 0.0;
  if (a1 == 2)
  {
    Layout.LocalParticipantViewCameraControls.init()((uint64_t)v4);
    id v2 = (double *)&v5;
LABEL_5:
    double v1 = *v2;
    static Platform.current.getter();
  }
  return v1;
}

void LocalParticipantControlsView.Style.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int LocalParticipantControlsView.Style.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LocalParticipantControlsView.Style(char *a1, char *a2)
{
  return static LocalParticipantControlsView.Style.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalParticipantControlsView.Style()
{
  return LocalParticipantControlsView.Style.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance LocalParticipantControlsView.Style(uint64_t a1)
{
  LocalParticipantControlsView.Style.hash(into:)(a1, *v1);
}

void static LocalParticipantControlsView.ViewModel.== infix(_:_:)()
{
  OUTLINED_FUNCTION_31();
  id v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  uint64_t v7 = OUTLINED_FUNCTION_8(v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v55 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v54 = (uint64_t)&v52 - v10;
  uint64_t v53 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_40_24();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v52 - v13;
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)&v52 - v16;
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)&v52 - v19;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_16_6();
  MEMORY[0x1F4188790](v22);
  Swift::Bool v24 = (char *)&v52 - v23;
  if (v5[6]) {
    uint64_t v25 = 0x1000000000000;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = 0x10000000000;
  if (v5[5]) {
    uint64_t v27 = 0x10000000000;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = 0x100000000;
  if (v5[4]) {
    uint64_t v29 = 0x100000000;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = 0x1000000;
  if (v5[3]) {
    uint64_t v31 = 0x1000000;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = 0x10000;
  if (v5[2]) {
    uint64_t v33 = 0x10000;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = 256;
  if (v5[1]) {
    uint64_t v35 = 256;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v35 | *v5 | v33 | v31 | v29 | v27 | v25;
  if (v3[6]) {
    uint64_t v37 = 0x1000000000000;
  }
  else {
    uint64_t v37 = 0;
  }
  if (!v3[5]) {
    uint64_t v26 = 0;
  }
  if (!v3[4]) {
    uint64_t v28 = 0;
  }
  if (!v3[3]) {
    uint64_t v30 = 0;
  }
  if (!v3[2]) {
    uint64_t v32 = 0;
  }
  if (!v3[1]) {
    uint64_t v34 = 0;
  }
  BOOL v38 = static LocalParticipantControlsView.Capabilities.== infix(_:_:)(v36, v34 | *v3 | v32 | v30 | v28 | v26 | v37);
  outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (uint64_t)v24, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v3, v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (!v38)
  {
    outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v24, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (uint64_t)v20, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v3, (uint64_t)v17, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    goto LABEL_40;
  }
  uint64_t v52 = v1;
  char v39 = *(unsigned char *)(v0 + 7);
  uint64_t v40 = VideoMessageController.State.rawValue.getter(v24[7]);
  uint64_t v42 = v41;
  if (v40 == VideoMessageController.State.rawValue.getter(v39) && v42 == v43)
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v24, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (uint64_t)v20, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v3, (uint64_t)v17, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    uint64_t v1 = v52;
    goto LABEL_42;
  }
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v24, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (uint64_t)v20, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v3, (uint64_t)v17, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  uint64_t v1 = v52;
  if ((v45 & 1) == 0)
  {
LABEL_40:
    outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v17, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v20, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (uint64_t)v14, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v3, v1, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    goto LABEL_43;
  }
LABEL_42:
  int v46 = v20[8];
  outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v20, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  int v47 = v17[8];
  outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v17, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (uint64_t)v14, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v3, v1, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (v46 == v47)
  {
    uint64_t v49 = v53;
    uint64_t v48 = v54;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)&v14[*(int *)(v53 + 28)], v54, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v50 = type metadata accessor for ConversationControlsRecipe();
    __swift_getEnumTagSinglePayload(v48, 1, v50);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v48, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    uint64_t v51 = v55;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v1 + *(int *)(v49 + 28), v55, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    __swift_getEnumTagSinglePayload(v51, 1, v50);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v51, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    goto LABEL_45;
  }
LABEL_43:
  outlined destroy of LocalParticipantControlsView.ViewModel(v1, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v14, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
LABEL_45:
  OUTLINED_FUNCTION_28();
}

BOOL static LocalParticipantControlsView.Capabilities.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return ((a1 ^ a2) & 1 | (a1 >> 8) & 1 ^ (a2 >> 8) & 1 | (a1 >> 16) & 1 ^ (a2 >> 16) & 1 | (a1 >> 24) & 1 ^ (a2 >> 24) & 1 | BYTE4(a1) & 1 ^ BYTE4(a2) & 1 | (a1 >> 40) & 1 ^ (a2 >> 40) & 1 | HIWORD(a1) & 1 ^ HIWORD(a2) & 1) == 0;
}

uint64_t LocalParticipantControlsView.ViewModel.capabilities.getter()
{
  uint64_t v1 = 0x1000000000000;
  if (!v0[6]) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = 0x10000000000;
  if (!v0[5]) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = 0x100000000;
  if (!v0[4]) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0x1000000;
  if (!v0[3]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x10000;
  if (!v0[2]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 256;
  if (!v0[1]) {
    uint64_t v6 = 0;
  }
  return v6 | *v0 | v5 | v4 | v3 | v2 | v1;
}

int8x8_t LocalParticipantControlsView.ViewModel.capabilities.setter(unint64_t a1)
{
  *uint64_t v1 = a1 & 1;
  uint64x2_t v2 = (uint64x2_t)vdupq_n_s64(a1);
  return OUTLINED_FUNCTION_25_52(a1, v2, (int32x4_t)vshlq_u64(v2, (uint64x2_t)xmmword_1C3782D40), (uint64x2_t)xmmword_1C3782D50);
}

uint64_t (*LocalParticipantControlsView.ViewModel.capabilities.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t LocalParticipantControlsView.ViewModel.videoMessagingState.getter()
{
  return *(unsigned __int8 *)(v0 + 7);
}

uint64_t LocalParticipantControlsView.ViewModel.videoMessagingState.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 7) = result;
  return result;
}

uint64_t (*LocalParticipantControlsView.ViewModel.videoMessagingState.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t LocalParticipantControlsView.ViewModel.isInComingCall.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t LocalParticipantControlsView.ViewModel.isInComingCall.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*LocalParticipantControlsView.ViewModel.isInComingCall.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t LocalParticipantControlsView.ViewModel.hudRecipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  return outlined init with copy of FeatureEligibility?(v1 + *(int *)(v3 + 28), a1, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
}

uint64_t LocalParticipantControlsView.ViewModel.hudRecipe.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_62_10();
  return outlined assign with take of ConversationControlsRecipe?(a1, v2);
}

double (*LocalParticipantControlsView.ViewModel.hudRecipe.modify())(void)
{
  return TPNumberPadCharacter.rawValue.getter;
}

uint64_t LocalParticipantControlsView.ViewModel.init(capabilities:videoMessagingState:isInComingCall:hudRecipe:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X3>, unsigned char *a3@<X8>)
{
  *a3 = a1 & 1;
  uint64x2_t v5 = (uint64x2_t)vdupq_n_s64(a1);
  OUTLINED_FUNCTION_25_52(a1, v5, (int32x4_t)vshlq_u64(v5, (uint64x2_t)xmmword_1C3782D40), (uint64x2_t)xmmword_1C3782D50);
  a3[7] = v6;
  a3[8] = v7;
  OUTLINED_FUNCTION_62_10();
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(a2, v8, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
}

uint64_t LocalParticipantControlsView.Capabilities.cinematicFraming.getter(char a1)
{
  return a1 & 1;
}

uint64_t LocalParticipantControlsView.Capabilities.cameraBlur.getter(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t LocalParticipantControlsView.Capabilities.effects.getter(unint64_t a1)
{
  return (a1 >> 16) & 1;
}

uint64_t LocalParticipantControlsView.Capabilities.cameraFlip.getter(unint64_t a1)
{
  return (a1 >> 24) & 1;
}

uint64_t LocalParticipantControlsView.Capabilities.cameraRotate.getter(unint64_t a1)
{
  return HIDWORD(a1) & 1;
}

uint64_t LocalParticipantControlsView.Capabilities.reactionGestures.getter(unint64_t a1)
{
  return (a1 >> 40) & 1;
}

uint64_t LocalParticipantControlsView.Capabilities.studioLight.getter(unint64_t a1)
{
  return HIWORD(a1) & 1;
}

void *LocalParticipantControlsView.Capabilities.default.unsafeMutableAddressor()
{
  return &static LocalParticipantControlsView.Capabilities.default;
}

uint64_t static LocalParticipantControlsView.Capabilities.default.getter()
{
  return 0;
}

void LocalParticipantControlsView.Capabilities.hash(into:)(uint64_t a1, uint64_t a2)
{
}

Swift::Int LocalParticipantControlsView.Capabilities.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  LocalParticipantControlsView.Capabilities.hash(into:)((uint64_t)v3, a1 & 0x1010101010101);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalParticipantControlsView.Capabilities()
{
  uint64_t v1 = 0x1000000000000;
  if (!v0[6]) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = 0x10000000000;
  if (!v0[5]) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = 0x100000000;
  if (!v0[4]) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0x1000000;
  if (!v0[3]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x10000;
  if (!v0[2]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 256;
  if (!v0[1]) {
    uint64_t v6 = 0;
  }
  return LocalParticipantControlsView.Capabilities.hashValue.getter(v6 | *v0 | v5 | v4 | v3 | v2 | v1);
}

void protocol witness for Hashable.hash(into:) in conformance LocalParticipantControlsView.Capabilities(uint64_t a1)
{
  uint64_t v2 = 0x1000000000000;
  if (!v1[6]) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = 0x10000000000;
  if (!v1[5]) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0x100000000;
  if (!v1[4]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x1000000;
  if (!v1[3]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0x10000;
  if (!v1[2]) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 256;
  if (!v1[1]) {
    uint64_t v7 = 0;
  }
  LocalParticipantControlsView.Capabilities.hash(into:)(a1, v7 | *v1 | v6 | v5 | v4 | v3 | v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalParticipantControlsView.Capabilities()
{
  uint64_t v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  int v5 = v0[4];
  int v6 = v0[5];
  int v7 = v0[6];
  Hasher.init(_seed:)();
  uint64_t v8 = 0x1000000000000;
  if (!v7) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 0x10000000000;
  if (!v6) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = 0x100000000;
  if (!v5) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = 0x1000000;
  if (!v4) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0x10000;
  if (!v3) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 256;
  if (!v2) {
    uint64_t v13 = 0;
  }
  LocalParticipantControlsView.Capabilities.hash(into:)((uint64_t)v15, v13 | v1 | v12 | v11 | v10 | v9 | v8);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LocalParticipantControlsView.Capabilities(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  int v4 = a1[1];
  int v5 = a1[2];
  int v6 = a1[3];
  int v7 = a1[4];
  int v8 = a1[5];
  uint64_t v9 = *a2;
  int v10 = a2[1];
  int v11 = a2[2];
  int v12 = a2[3];
  int v13 = a2[4];
  int v14 = a2[5];
  int v15 = a2[6];
  if (a1[6]) {
    uint64_t v16 = 0x1000000000000;
  }
  else {
    uint64_t v16 = 0;
  }
  BOOL v17 = v8 == 0;
  uint64_t v18 = 0x10000000000;
  if (v17) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = 0x10000000000;
  }
  BOOL v17 = v7 == 0;
  uint64_t v20 = 0x100000000;
  if (v17) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = 0x100000000;
  }
  BOOL v17 = v6 == 0;
  uint64_t v22 = 0x1000000;
  if (v17) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = 0x1000000;
  }
  BOOL v17 = v5 == 0;
  uint64_t v24 = 0x10000;
  if (v17) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = 0x10000;
  }
  BOOL v17 = v4 == 0;
  uint64_t v26 = 256;
  if (v17) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = 256;
  }
  unint64_t v28 = v27 | v3 | v25 | v23 | v21 | v19 | v16;
  if (v15) {
    uint64_t v29 = 0x1000000000000;
  }
  else {
    uint64_t v29 = 0;
  }
  if (!v14) {
    uint64_t v18 = 0;
  }
  if (!v13) {
    uint64_t v20 = 0;
  }
  if (!v12) {
    uint64_t v22 = 0;
  }
  if (!v11) {
    uint64_t v24 = 0;
  }
  if (!v10) {
    uint64_t v26 = 0;
  }
  return static LocalParticipantControlsView.Capabilities.== infix(_:_:)(v28, v26 | v9 | v24 | v22 | v20 | v18 | v29);
}

id LocalParticipantControlsView.effectsButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsButton);
}

id LocalParticipantControlsView.cameraBlurButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton);
}

void *closure #1 in variable initialization expression of LocalParticipantControlsView.effectsButton()
{
  OUTLINED_FUNCTION_65_11();
  uint64_t v0 = OUTLINED_FUNCTION_31_37();
  uint64_t v2 = v1;
  id v11 = (id)InCallControlButton.__allocating_init(style:symbolDescriber:text:discSize:imageSpacing:visualEffectGroupName:wantsPointerInteraction:isImageTrailing:)(v0, v3, v4, v5, v6, v7, v8, v9, v10, 1);
  OUTLINED_FUNCTION_69_8(v11);

  return v2;
}

id LocalParticipantControlsView.cinematicFramingButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingButton);
}

id LocalParticipantControlsView.collapseButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_collapseButton);
}

id closure #1 in variable initialization expression of LocalParticipantControlsView.rotateButton()
{
  type metadata accessor for InCallControlButton();
  uint64_t v16 = &type metadata for SymbolImageDescribers.ParticipantView;
  BOOL v17 = &protocol witness table for SymbolImageDescribers.ParticipantView;
  v15[0] = 2;
  Layout.LocalParticipantViewCameraControls.init()((uint64_t)v18);
  double v0 = v19;
  static Platform.current.getter();
  uint64_t v1 = (void *)InCallControlButton.__allocating_init(style:symbolDescriber:text:discSize:imageSpacing:visualEffectGroupName:wantsPointerInteraction:isImageTrailing:)(1, (uint64_t)v15, 0, 0, 0, 1, 0xD00000000000001DLL, 0x80000001C37A0E70, v0, 1);
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_conversationKit);
  v20._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x4320657461746F52;
  v5._object = (void *)0xED00006172656D61;
  v6.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v6.value._object = (void *)0xEF74694B6E6F6974;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v20._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v20);

  outlined bridged method (mbnn) of @objc NSObject.accessibilityIdentifier.setter(v8._countAndFlagsBits, (uint64_t)v8._object, v3);
  id v9 = objc_msgSend(v2, sel_conversationKit);
  v21._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0x4320657461746F52;
  v10._object = (void *)0xED00006172656D61;
  v11.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v11.value._object = (void *)0xEF74694B6E6F6974;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v21);

  outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v13._countAndFlagsBits, (uint64_t)v13._object, v3);
  return v3;
}

id LocalParticipantControlsView.rotateButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_rotateButton);
}

id LocalParticipantControlsView.cameraFlipButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraFlipButton);
}

id LocalParticipantControlsView.reactionEffectGestureButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureButton);
}

void *closure #1 in variable initialization expression of LocalParticipantControlsView.collapseButton()
{
  double v0 = (void *)OUTLINED_FUNCTION_65_11();
  Layout.LocalParticipantViewCameraControls.init()((uint64_t)v12);
  static Platform.current.getter();
  uint64_t v1 = OUTLINED_FUNCTION_31_37();
  id v10 = (id)InCallControlButton.__allocating_init(style:symbolDescriber:text:discSize:imageSpacing:visualEffectGroupName:wantsPointerInteraction:isImageTrailing:)(v1, v2, v3, v4, v5, v6, v7, v8, v9, 1);
  OUTLINED_FUNCTION_69_8(v10);

  return v0;
}

id LocalParticipantControlsView.studioLightButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightButton);
}

id closure #1 in variable initialization expression of LocalParticipantControlsView.videoPauseButton()
{
  type metadata accessor for InCallControlButton();
  Swift::String_optional v11 = &type metadata for SymbolImageDescribers.LocalParticipantView;
  Swift::String v12 = &protocol witness table for SymbolImageDescribers.LocalParticipantView;
  v10[0] = 7;
  Layout.LocalParticipantViewCameraControls.init()((uint64_t)v13);
  double v0 = v14;
  static Platform.current.getter();
  uint64_t v1 = (void *)InCallControlButton.__allocating_init(style:symbolDescriber:text:discSize:imageSpacing:visualEffectGroupName:wantsPointerInteraction:isImageTrailing:)(6, (uint64_t)v10, 0, 0, 0, 1, 0xD00000000000001DLL, 0x80000001C37A0E70, v0, 1);
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_conversationKit);
  v15._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001C37B3870;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v6.value._uint64_t countAndFlagsBits = 0x61737265766E6F43;
  v6.value._object = (void *)0xEF74694B6E6F6974;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v15);

  outlined bridged method (mbnn) of @objc NSObject.accessibilityLabel.setter(v8._countAndFlagsBits, (uint64_t)v8._object, v3);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  return v3;
}

id LocalParticipantControlsView.videoPauseButton.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_videoPauseButton);
}

uint64_t key path getter for LocalParticipantControlsView.videoMessageControls : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x138))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.videoMessageControls : LocalParticipantControlsView(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x140);
  id v4 = *a1;
  return v3(v2);
}

void *LocalParticipantControlsView.videoMessageControls.getter()
{
  OUTLINED_FUNCTION_5_4();
  uint64_t v1 = *v0;
  id v2 = v1;
  return v1;
}

void LocalParticipantControlsView.videoMessageControls.setter(void *a1)
{
  OUTLINED_FUNCTION_0_1();
  id v3 = *v1;
  *uint64_t v1 = a1;
}

uint64_t (*LocalParticipantControlsView.videoMessageControls.modify())()
{
  return CallRecordingPillViewController.cancellable.modify;
}

uint64_t key path getter for LocalParticipantControlsView.videoMessageViewModel : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x150))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.videoMessageViewModel : LocalParticipantControlsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x158))(*a1);
}

void *LocalParticipantControlsView.videoMessageViewModel.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___videoMessageViewModel;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___videoMessageViewModel);
  if (v2)
  {
    id v3 = *(void **)(v0
                    + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___videoMessageViewModel);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v6 = OUTLINED_FUNCTION_8(v5);
    MEMORY[0x1F4188790](v6);
    OUTLINED_FUNCTION_21();
    uint64_t v7 = type metadata accessor for URL();
    OUTLINED_FUNCTION_13_18(v7);
    id v8 = objc_allocWithZone((Class)type metadata accessor for VideoMessagePlayerViewModel(0));
    VideoMessagePlayerViewModel.init(videoMessageURL:playerSpaciality:)();
    id v10 = v9;
    Swift::String_optional v11 = closure #1 in LocalParticipantControlsView.videoMessageViewModel.getter(v9);

    Swift::String v12 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v11;
    id v3 = v11;

    id v2 = 0;
  }
  id v13 = v2;
  return v3;
}

void *closure #1 in LocalParticipantControlsView.videoMessageViewModel.getter(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xF8))(0);
  uint64_t v2 = *(void *)((char *)a1 + OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_shutterModel);
  (*(void (**)(void))(*(void *)v2 + 520))(0);
  (*(void (**)(void))((*v1 & *a1) + 0xC8))(0);
  Layout.LocalParticipantViewCameraControls.init()((uint64_t)v19);
  double v3 = v20;
  uint64_t v4 = static Platform.current.getter();
  double v5 = (*(double (**)(uint64_t))(*(void *)v2 + 368))(v4);
  v6.n128_f64[0] = v3 - (v5 + v5);
  (*(void (**)(__n128))(*(void *)v2 + 328))(v6);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v8 = *(uint64_t (**)(unsigned char *))((*v1 & *a1) + 0x1C0);
  swift_retain();
  double v9 = (void (*)(unsigned char *, void))v8(v18);
  *id v10 = partial apply for closure #1 in closure #1 in LocalParticipantControlsView.videoMessageViewModel.getter;
  v10[1] = (void (*)())v7;
  swift_release();
  v9(v18, 0);
  swift_release();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v11;
  swift_retain();
  swift_retain();
  double v14 = (void (*)(unsigned char *, void))v8(v18);
  *(void *)(v15 + 32) = partial apply for closure #2 in closure #1 in LocalParticipantControlsView.videoMessageViewModel.getter;
  *(void *)(v15 + 40) = v13;
  swift_release();
  v14(v18, 0);
  swift_release();
  swift_release();
  return a1;
}

void closure #1 in closure #1 in LocalParticipantControlsView.videoMessageViewModel.getter(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1C8776240](v1);
  if (v2)
  {
    double v3 = v2;
    uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1F8))();
    uint64_t v6 = v5;

    if (v4)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(2, ObjectType, v6);
      swift_unknownObjectRelease();
    }
  }
}

void closure #2 in closure #1 in LocalParticipantControlsView.videoMessageViewModel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v2);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  if (v4
    && (uint64_t v6 = v4, v7 = (*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xF0))(), v6, !v7))
  {
    swift_beginAccess();
    Swift::String v21 = (void *)MEMORY[0x1C8776240](v2);
    if (v21)
    {
      uint64_t v22 = v21;
      (*(void (**)(uint64_t))((*v5 & *v21) + 0xF8))(3);
    }
    swift_beginAccess();
    uint64_t v23 = (void *)MEMORY[0x1C8776240](v3);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = (*(uint64_t (**)(void))((*v5 & *v23) + 0x1F8))();
      uint64_t v27 = v26;

      if (v25)
      {
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 8))(1, ObjectType, v27);
        goto LABEL_17;
      }
    }
  }
  else
  {
    swift_beginAccess();
    id v8 = (void *)MEMORY[0x1C8776240](v2);
    if (v8)
    {
      double v9 = v8;
      int v10 = (*(unsigned __int8 (**)(void))((*v5 & *v8) + 0xF0))();

      if (v10 == 2)
      {
        swift_beginAccess();
        uint64_t v11 = (void *)MEMORY[0x1C8776240](v3);
        if (v11)
        {
          uint64_t v12 = v11;
          (*(void (**)(void))((*v5 & *v11) + 0x418))();
        }
        return;
      }
    }
    swift_beginAccess();
    uint64_t v13 = (void *)MEMORY[0x1C8776240](v2);
    if (v13)
    {
      double v14 = v13;
      (*(void (**)(void))((*v5 & *v13) + 0xF8))(0);
    }
    swift_beginAccess();
    uint64_t v15 = (void *)MEMORY[0x1C8776240](v3);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = (*(uint64_t (**)(void))((*v5 & *v15) + 0x1F8))();
      uint64_t v19 = v18;

      if (v17)
      {
        uint64_t v20 = swift_getObjectType();
        (*(void (**)(void, uint64_t, uint64_t))(v19 + 8))(0, v20, v19);
LABEL_17:
        swift_unknownObjectRelease();
      }
    }
  }
}

void LocalParticipantControlsView.videoMessageViewModel.setter(uint64_t a1)
{
}

void (*LocalParticipantControlsView.videoMessageViewModel.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = LocalParticipantControlsView.videoMessageViewModel.getter();
  return LocalParticipantControlsView.videoMessageViewModel.modify;
}

void LocalParticipantControlsView.videoMessageViewModel.modify(void **a1, char a2)
{
}

uint64_t key path getter for LocalParticipantControlsView.callAgainHUDView : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.callAgainHUDView : LocalParticipantControlsView(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x170);
  id v4 = *a1;
  return v3(v2);
}

uint64_t LocalParticipantControlsView.callAgainHUDView.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

void LocalParticipantControlsView.callAgainHUDView.setter(void *a1)
{
}

void (*LocalParticipantControlsView.callAgainHUDView.modify())()
{
  id v2 = OUTLINED_FUNCTION_58_12();
  uint64_t v3 = OUTLINED_FUNCTION_56((uint64_t)v2);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_callAgainHUDView;
  *(void *)(v3 + 32) = v0;
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = v0 + v4;
  OUTLINED_FUNCTION_6_1();
  *(void *)(v1 + 24) = MEMORY[0x1C8776240](v5);
  return AvatarViewControllerDelegateWrapper.hostingViewController.modify;
}

uint64_t key path getter for LocalParticipantControlsView.hudRecipe : LocalParticipantControlsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x180))();
}

uint64_t key path setter for LocalParticipantControlsView.hudRecipe : LocalParticipantControlsView(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FeatureEligibility?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x188))(v6);
}

uint64_t LocalParticipantControlsView.hudRecipe.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v5 + 600))();
  return outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>(v1 + *(int *)(v4 + 36), a1, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
}

uint64_t LocalParticipantControlsView.hudRecipe.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_37_27();
  uint64_t v3 = (void (*)(uint64_t *, void))v2();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  outlined assign with copy of ConversationControlsRecipe?(a1, v5 + *(int *)(v6 + 28));
  v3(&v8, 0);
  return outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(a1, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
}

void (*LocalParticipantControlsView.hudRecipe.modify())()
{
  OUTLINED_FUNCTION_14();
  id v2 = malloc(0x68uLL);
  *(void *)(OUTLINED_FUNCTION_56((uint64_t)v2) + 64) = v0;
  uint64_t v3 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  v1[9] = v3;
  OUTLINED_FUNCTION_0();
  uint64_t v5 = malloc(*(void *)(v4 + 64));
  v1[10] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  OUTLINED_FUNCTION_8(v6);
  size_t v8 = *(void *)(v7 + 64);
  v1[11] = malloc(v8);
  double v9 = malloc(v8);
  v1[12] = v9;
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v10 + 600))();
  outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v5 + *(int *)(v3 + 28), (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  return LocalParticipantControlsView.hudRecipe.modify;
}

void LocalParticipantControlsView.hudRecipe.modify()
{
  OUTLINED_FUNCTION_14();
  uint64_t v15 = v0;
  id v2 = *v1;
  uint64_t v5 = (void *)(*v1)[11];
  uint64_t v4 = (void *)(*v1)[12];
  uint64_t v7 = (*v1)[9];
  uint64_t v6 = (void *)(*v1)[10];
  if (v3)
  {
    outlined init with copy of FeatureEligibility?(v2[12], v2[11], (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
    OUTLINED_FUNCTION_0_3();
    double v9 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t *))(v8 + 616))(v2);
    outlined assign with copy of ConversationControlsRecipe?((uint64_t)v5, v10 + *(int *)(v7 + 28));
    uint64_t v11 = OUTLINED_FUNCTION_31_35();
    v9(v11);
    outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  }
  else
  {
    OUTLINED_FUNCTION_0_20();
    OUTLINED_FUNCTION_37_27();
    uint64_t v13 = (void (*)(uint64_t *, void))v12();
    outlined assign with copy of ConversationControlsRecipe?((uint64_t)v4, v14 + *(int *)(v7 + 28));
    v13(v2 + 4, 0);
  }
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  free(v4);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t key path getter for LocalParticipantControlsView.spinnerView : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x198))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.spinnerView : LocalParticipantControlsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A0))(*a1);
}

id LocalParticipantControlsView.spinnerView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___spinnerView;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___spinnerView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___spinnerView);
  }
  else
  {
    uint64_t v4 = v0;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIActivityIndicatorView);
    UIActivityIndicatorView.init(style:size:)(v5, ConversationKit_PlatformActivityIndicatorStyle_spinner, ConversationKit_PlatformActivityIndicatorSize_large);
    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v7;
    id v3 = v7;

    id v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void LocalParticipantControlsView.spinnerView.setter(uint64_t a1)
{
}

void (*LocalParticipantControlsView.spinnerView.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = LocalParticipantControlsView.spinnerView.getter();
  return LocalParticipantControlsView.spinnerView.modify;
}

void LocalParticipantControlsView.spinnerView.modify(void **a1, char a2)
{
}

uint64_t key path getter for LocalParticipantControlsView.hasInitializedShutterButton : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.hasInitializedShutterButton : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1B8))(*a1);
}

uint64_t LocalParticipantControlsView.hasInitializedShutterButton.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

uint64_t LocalParticipantControlsView.hasInitializedShutterButton.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*LocalParticipantControlsView.hasInitializedShutterButton.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

id LocalParticipantControlsView.shutterButton.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___shutterButton;
  id v2 = *(void **)((char *)v0
                + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___shutterButton);
  if (v2)
  {
    id v3 = *(id *)((char *)v0
               + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___shutterButton);
  }
  else
  {
    id v4 = closure #1 in LocalParticipantControlsView.shutterButton.getter(v0);
    uint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void LocalParticipantControlsView.shutterButton.setter(uint64_t a1)
{
}

uint64_t key path getter for LocalParticipantControlsView.shutterButton : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1C8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.shutterButton : LocalParticipantControlsView(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1D0))(*a1);
}

id closure #1 in LocalParticipantControlsView.shutterButton.getter(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v22 - v6;
  __n128 v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v13 = (*(uint64_t (**)(uint64_t, __n128))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x1B8))(1, v9);
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))((*v12 & *a1) + 0x150))(v13);
  static Color.white.getter();
  static Color.red.getter();
  VideoMessagePlayerViewModel.shutterButton(trackBackgroundColor:trackForegroundColor:)();

  swift_release();
  swift_release();
  outlined init with copy of FeatureEligibility?((uint64_t)v11, (uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  id v15 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockScreenHostingController<ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>));
  outlined init with copy of FeatureEligibility?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  uint64_t v16 = (void *)UIHostingController.init(rootView:)();
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>((uint64_t)v11, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  id result = objc_msgSend(v16, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v18 = result;
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id result = objc_msgSend(v16, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v19 = result;
  id v20 = objc_msgSend(self, sel_clearColor);
  objc_msgSend(v19, sel_setBackgroundColor_, v20);

  id result = objc_msgSend(v16, sel_view);
  if (result)
  {
    id v21 = result;

    return v21;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*LocalParticipantControlsView.shutterButton.modify(uint64_t a1))(void **a1, char a2)
{
  OUTLINED_FUNCTION_3_7(a1);
  *uint64_t v1 = LocalParticipantControlsView.shutterButton.getter();
  return LocalParticipantControlsView.shutterButton.modify;
}

void LocalParticipantControlsView.shutterButton.modify(void **a1, char a2)
{
}

void LocalParticipantControlsView.videoMessageViewModel.modify(void **a1, char a2, void (*a3)(void))
{
  id v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

uint64_t key path getter for LocalParticipantControlsView.currentConstraints : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1E0))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.currentConstraints : LocalParticipantControlsView(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1E8);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t LocalParticipantControlsView.currentConstraints.getter()
{
  return ConversationControlsManager.ignoredScreenSharingRequestUUIDs.getter();
}

uint64_t LocalParticipantControlsView.currentConstraints.setter(uint64_t a1)
{
  return PeoplePickerViewController.idsDestinations.setter(a1);
}

uint64_t (*LocalParticipantControlsView.currentConstraints.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for LocalParticipantControlsView.delegate : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1F8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.delegate : LocalParticipantControlsView(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x200);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t LocalParticipantControlsView.delegate.getter()
{
  OUTLINED_FUNCTION_5_4();
  return MEMORY[0x1C8776240](v0);
}

uint64_t LocalParticipantControlsView.delegate.setter(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  *(void *)(v2 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*LocalParticipantControlsView.delegate.modify())()
{
  uint64_t v2 = malloc(0x38uLL);
  uint64_t v3 = OUTLINED_FUNCTION_56((uint64_t)v2);
  uint64_t v4 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_delegate;
  *(void *)(v3 + 40) = v0;
  *(void *)(v3 + 48) = v4;
  uint64_t v5 = v0 + v4;
  OUTLINED_FUNCTION_6_1();
  uint64_t v6 = MEMORY[0x1C8776240](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = v7;
  return RecentsListViewController.macCatalystDelegate.modify;
}

id LocalParticipantControlsView.controlsLayoutGuide.getter()
{
  return OUTLINED_FUNCTION_4_2(OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_controlsLayoutGuide);
}

uint64_t key path getter for LocalParticipantControlsView.style : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x210))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.style : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x218))(*a1);
}

void LocalParticipantControlsView.style.didset(unsigned __int8 a1)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_style);
  swift_beginAccess();
  if (*v3 != a1) {
    LocalParticipantControlsView.updateViews()();
  }
}

uint64_t LocalParticipantControlsView.style.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

void LocalParticipantControlsView.style.setter(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_4_10();
  unsigned __int8 v3 = *v1;
  *uint64_t v1 = a1;
  LocalParticipantControlsView.style.didset(v3);
}

void (*LocalParticipantControlsView.style.modify())(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  OUTLINED_FUNCTION_16_2((uint64_t)v2);
  unsigned __int8 v3 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_style);
  OUTLINED_FUNCTION_2();
  *(unsigned char *)(v1 + 32) = *v3;
  return LocalParticipantControlsView.style.modify;
}

void LocalParticipantControlsView.style.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  LocalParticipantControlsView.style.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

int8x8_t key path getter for LocalParticipantControlsView.capabilities : LocalParticipantControlsView@<D0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x228))();
  *(unsigned char *)a2 = v3 & 1;
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(v3);
  int16x8_t v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1C3782D50), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1C3782D40));
  *(int8x8_t *)v5.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v5), (int8x8_t)0x1000100010001);
  int8x8_t result = vmovn_s16(v5);
  *(_DWORD *)(a2 + 1) = result.i32[0];
  *(unsigned char *)(a2 + 5) = BYTE5(v3) & 1;
  *(unsigned char *)(a2 + 6) = BYTE6(v3) & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.capabilities : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  uint64_t v2 = 0x1000000000000;
  if (!a1[6]) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = 0x10000000000;
  if (!a1[5]) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0x100000000;
  if (!a1[4]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x1000000;
  if (!a1[3]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0x10000;
  if (!a1[2]) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 256;
  if (!a1[1]) {
    uint64_t v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x230))(v7 | *a1 | v6 | v5 | v4 | v3 | v2);
}

uint64_t LocalParticipantControlsView.capabilities.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v1 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_11_71();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_22_47();
  v2();
  int v3 = *(unsigned __int8 *)(v0 + 6);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  uint64_t v4 = 0x1000000000000;
  if (!v3) {
    uint64_t v4 = 0;
  }
  return OUTLINED_FUNCTION_49_19(v4);
}

uint64_t LocalParticipantControlsView.capabilities.setter(unint64_t a1)
{
  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_37_27();
  v2();
  *int v3 = a1 & 1;
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(a1);
  unsigned __int32 v5 = OUTLINED_FUNCTION_191_2(v4, (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1C3782D40), (uint64x2_t)xmmword_1C3782D50).u32[0];
  *(_DWORD *)(v6 + 1) = v5;
  *(unsigned char *)(v6 + 5) = BYTE5(a1) & 1;
  *(unsigned char *)(v6 + 6) = BYTE6(a1) & 1;
  OUTLINED_FUNCTION_50_19();
  return v7();
}

void (*LocalParticipantControlsView.capabilities.modify())()
{
  uint64_t v2 = (char *)OUTLINED_FUNCTION_58_12();
  void *v0 = v2;
  *((void *)v2 + 4) = v1;
  unint64_t v3 = LocalParticipantControlsView.capabilities.getter();
  v2[40] = v3 & 1;
  v2 += 40;
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(v3);
  *(_DWORD *)(v2 + 1) = OUTLINED_FUNCTION_191_2(v4, (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1C3782D40), (uint64x2_t)xmmword_1C3782D50).u32[0];
  v2[5] = v5 & 1;
  v2[6] = v6;
  return LocalParticipantControlsView.capabilities.modify;
}

void LocalParticipantControlsView.capabilities.modify()
{
  OUTLINED_FUNCTION_31();
  char v1 = *(unsigned char *)(*(void *)v0 + 40);
  char v2 = *(unsigned char *)(*(void *)v0 + 41);
  char v3 = *(unsigned char *)(*(void *)v0 + 42);
  char v4 = *(unsigned char *)(*(void *)v0 + 43);
  char v5 = *(unsigned char *)(*(void *)v0 + 44);
  char v6 = *(unsigned char *)(*(void *)v0 + 45);
  char v7 = *(unsigned char *)(*(void *)v0 + 46);
  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_37_27();
  v8();
  *__n128 v9 = v1;
  v9[1] = v2;
  _OWORD v9[2] = v3;
  long long v9[3] = v4;
  v9[4] = v5;
  v9[5] = v6;
  v9[6] = v7;
  uint64_t v10 = OUTLINED_FUNCTION_31_35();
  v11(v10);
  OUTLINED_FUNCTION_28();
  free(v12);
}

uint64_t key path getter for LocalParticipantControlsView.isInComingCall : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x240))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.isInComingCall : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x248))(*a1);
}

uint64_t LocalParticipantControlsView.isInComingCall.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_11_71();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_22_47();
  v2();
  uint64_t v3 = *(unsigned __int8 *)(v0 + 8);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  return v3;
}

uint64_t LocalParticipantControlsView.isInComingCall.setter(char a1)
{
  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_37_27();
  v2();
  *(unsigned char *)(v3 + 8) = a1;
  OUTLINED_FUNCTION_50_19();
  return v4();
}

void (*LocalParticipantControlsView.isInComingCall.modify())(uint64_t a1)
{
  char v2 = OUTLINED_FUNCTION_58_12();
  void *v0 = v2;
  v2[4] = v1;
  *((unsigned char *)v2 + 40) = LocalParticipantControlsView.isInComingCall.getter() & 1;
  return LocalParticipantControlsView.isInComingCall.modify;
}

void LocalParticipantControlsView.isInComingCall.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 40);
  OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_37_27();
  v3();
  *(unsigned char *)(v4 + 8) = v2;
  uint64_t v5 = OUTLINED_FUNCTION_31_35();
  v6(v5);
  free(v1);
}

uint64_t key path getter for LocalParticipantControlsView.viewModel : LocalParticipantControlsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x258))();
}

uint64_t key path setter for LocalParticipantControlsView.viewModel : LocalParticipantControlsView(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocalParticipantControlsView.ViewModel(a1, (uint64_t)v6, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x260))(v6);
}

uint64_t LocalParticipantControlsView.viewModel.didset(unsigned char *a1)
{
  uint64_t v3 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_viewModel;
  swift_beginAccess();
  outlined init with copy of LocalParticipantControlsView.ViewModel(v6, (uint64_t)v5, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  static LocalParticipantControlsView.ViewModel.== infix(_:_:)();
  char v8 = v7;
  uint64_t result = outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if ((v8 & 1) == 0)
  {
    outlined init with copy of LocalParticipantControlsView.ViewModel(v6, (uint64_t)v5, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    LocalParticipantControlsView.changed(_:from:)(v5, a1);
    return outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v5, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  }
  return result;
}

uint64_t LocalParticipantControlsView.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_viewModel;
  OUTLINED_FUNCTION_2();
  return outlined init with copy of LocalParticipantControlsView.ViewModel(v3, a1, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
}

uint64_t LocalParticipantControlsView.viewModel.setter(uint64_t a1)
{
  uint64_t v4 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16_0();
  uint64_t v5 = v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_viewModel;
  OUTLINED_FUNCTION_2();
  outlined init with copy of LocalParticipantControlsView.ViewModel(v5, (uint64_t)v2, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  OUTLINED_FUNCTION_6_1();
  outlined assign with copy of LocalParticipantControlsView.ViewModel(a1, v5);
  swift_endAccess();
  LocalParticipantControlsView.viewModel.didset(v2);
  outlined destroy of LocalParticipantControlsView.ViewModel(a1, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  return outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v2, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
}

void (*LocalParticipantControlsView.viewModel.modify())(uint64_t a1, char a2)
{
  char v2 = OUTLINED_FUNCTION_58_12();
  OUTLINED_FUNCTION_16_2((uint64_t)v2);
  OUTLINED_FUNCTION_8_78();
  size_t v4 = *(void *)(v3 + 64);
  *(void *)(v1 + 32) = malloc(v4);
  uint64_t v5 = malloc(v4);
  *(void *)(v1 + 40) = v5;
  uint64_t v6 = v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_viewModel;
  OUTLINED_FUNCTION_2();
  outlined init with copy of LocalParticipantControlsView.ViewModel(v6, (uint64_t)v5, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  return LocalParticipantControlsView.viewModel.modify;
}

void LocalParticipantControlsView.viewModel.modify(uint64_t a1, char a2)
{
  char v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  size_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of LocalParticipantControlsView.ViewModel(*(void *)(*(void *)a1 + 40), (uint64_t)v3, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
    LocalParticipantControlsView.viewModel.setter((uint64_t)v3);
    outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v4, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  }
  else
  {
    LocalParticipantControlsView.viewModel.setter(*(void *)(*(void *)a1 + 40));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t key path getter for LocalParticipantControlsView.effectsSelected : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x270))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.effectsSelected : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x278))(*a1);
}

uint64_t LocalParticipantControlsView.effectsSelected.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

id LocalParticipantControlsView.effectsSelected.setter(char a1)
{
  return LocalParticipantControlsView.effectsSelected.setter(a1, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsSelected, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsButton);
}

id (*LocalParticipantControlsView.effectsSelected.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.effectsSelected.modify;
}

id LocalParticipantControlsView.effectsSelected.modify(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.effectsSelected.modify(a1, a2, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsButton, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsSelected);
}

uint64_t key path getter for LocalParticipantControlsView.blurEnabled : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x288))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.blurEnabled : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x290))(*a1);
}

uint64_t LocalParticipantControlsView.blurEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

id LocalParticipantControlsView.blurEnabled.setter(char a1)
{
  return LocalParticipantControlsView.effectsSelected.setter(a1, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_blurEnabled, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton);
}

id LocalParticipantControlsView.effectsSelected.setter(char a1, void *a2, void *a3)
{
  char v7 = (unsigned char *)(v3 + *a2);
  swift_beginAccess();
  *char v7 = a1;
  return LocalParticipantControlsView.effectsSelected.didset(a3, a2);
}

id (*LocalParticipantControlsView.blurEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.blurEnabled.modify;
}

id LocalParticipantControlsView.blurEnabled.modify(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.effectsSelected.modify(a1, a2, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_blurEnabled);
}

id LocalParticipantControlsView.effectsSelected.modify(uint64_t a1, char a2, void *a3, void *a4)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0) {
    return LocalParticipantControlsView.effectsSelected.didset(a3, a4);
  }
  return result;
}

uint64_t key path getter for LocalParticipantControlsView.cinematicFramingIsEnabled : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2A0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.cinematicFramingIsEnabled : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2A8))(*a1);
}

uint64_t LocalParticipantControlsView.cinematicFramingIsEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

id LocalParticipantControlsView.cinematicFramingIsEnabled.setter(char a1)
{
  return LocalParticipantControlsView.effectsSelected.setter(a1, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingIsEnabled, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingButton);
}

id (*LocalParticipantControlsView.cinematicFramingIsEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.cinematicFramingIsEnabled.modify;
}

id LocalParticipantControlsView.cinematicFramingIsEnabled.modify(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.effectsSelected.modify(a1, a2, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingButton, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingIsEnabled);
}

uint64_t key path getter for LocalParticipantControlsView.reactionEffectGestureIsEnabled : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2B8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.reactionEffectGestureIsEnabled : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2C0))(*a1);
}

uint64_t LocalParticipantControlsView.reactionEffectGestureIsEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

id LocalParticipantControlsView.reactionEffectGestureIsEnabled.setter(char a1)
{
  return LocalParticipantControlsView.effectsSelected.setter(a1, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureIsEnabled, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureButton);
}

id (*LocalParticipantControlsView.reactionEffectGestureIsEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.reactionEffectGestureIsEnabled.modify;
}

id LocalParticipantControlsView.reactionEffectGestureIsEnabled.modify(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.effectsSelected.modify(a1, a2, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureButton, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureIsEnabled);
}

uint64_t key path getter for LocalParticipantControlsView.studioLightIsEnabled : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2D0))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.studioLightIsEnabled : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2D8))(*a1);
}

id LocalParticipantControlsView.effectsSelected.didset(void *a1, void *a2)
{
  uint64_t v3 = *(void **)(v2 + *a1);
  size_t v4 = (unsigned __int8 *)(v2 + *a2);
  OUTLINED_FUNCTION_2();
  return objc_msgSend(v3, sel_setSelected_, *v4);
}

uint64_t LocalParticipantControlsView.studioLightIsEnabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

id LocalParticipantControlsView.studioLightIsEnabled.setter(char a1)
{
  return LocalParticipantControlsView.effectsSelected.setter(a1, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightIsEnabled, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightButton);
}

id (*LocalParticipantControlsView.studioLightIsEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.studioLightIsEnabled.modify;
}

id LocalParticipantControlsView.studioLightIsEnabled.modify(uint64_t a1, char a2)
{
  return LocalParticipantControlsView.effectsSelected.modify(a1, a2, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightButton, &OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightIsEnabled);
}

uint64_t key path getter for LocalParticipantControlsView.isDisabled : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x2E8))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.isDisabled : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x2F0))(*a1);
}

void LocalParticipantControlsView.isDisabled.didset(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_isDisabled);
  swift_beginAccess();
  if (*v3 != v2) {
    LocalParticipantControlsView.updateViews()();
  }
}

uint64_t LocalParticipantControlsView.isDisabled.getter()
{
  OUTLINED_FUNCTION_5_4();
  return *v0;
}

void LocalParticipantControlsView.isDisabled.setter(char a1)
{
  OUTLINED_FUNCTION_4_10();
  char v3 = *v1;
  *uint64_t v1 = a1;
  LocalParticipantControlsView.isDisabled.didset(v3);
}

void (*LocalParticipantControlsView.isDisabled.modify())(uint64_t a1)
{
  int v2 = malloc(0x28uLL);
  OUTLINED_FUNCTION_16_2((uint64_t)v2);
  char v3 = (unsigned char *)(v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_isDisabled);
  OUTLINED_FUNCTION_2();
  *(unsigned char *)(v1 + 32) = *v3;
  return LocalParticipantControlsView.isDisabled.modify;
}

void LocalParticipantControlsView.isDisabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  LocalParticipantControlsView.isDisabled.setter(*(unsigned char *)(*(void *)a1 + 32));
  free(v1);
}

uint64_t LocalParticipantControlsView.callAgainHUDViewIsHidden.getter()
{
  OUTLINED_FUNCTION_0_20();
  v0 += 45;
  uint64_t v1 = *v0;
  int v2 = (void *)(*v0)();
  if (v2)
  {
    char v3 = v2;
    objc_msgSend(v2, sel_alpha);
    double v5 = v4;

    if (v5 == 0.0) {
      return 1;
    }
  }
  uint64_t v6 = (void *)v1();
  if (!v6) {
    return 1;
  }

  return 0;
}

BOOL LocalParticipantControlsView.isInSendingCallState.getter()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_videoPauseButton), sel_alpha);
  return v1 == 0.0;
}

uint64_t LocalParticipantControlsView.needsVideoMessageControls.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v27 = v2;
  uint64_t v28 = v3;
  uint64_t v4 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_196();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_6();
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v26 - v7;
  OUTLINED_FUNCTION_0_3();
  uint64_t v10 = *(void (**)(void))(v9 + 600);
  v10();
  char v11 = v8[7];
  outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v8, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v11) == 0x676E696D726177 && v12 == 0xE700000000000000) {
    goto LABEL_16;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v15 = swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_17;
  }
  ((void (*)(uint64_t))v10)(v15);
  char v16 = *(unsigned char *)(v1 + 7);
  outlined destroy of LocalParticipantControlsView.ViewModel(v1, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v16) == 0x7964616572 && v17 == 0xE500000000000000) {
    goto LABEL_16;
  }
  uint64_t v19 = v17;
  uint64_t v20 = OUTLINED_FUNCTION_43_22();
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_17:
    char v24 = 1;
    return v24 & 1;
  }
  OUTLINED_FUNCTION_26_47();
  v10();
  char v21 = *(unsigned char *)(v0 + 7);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v21) == v20 && v22 == v19)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v24 = OUTLINED_FUNCTION_13_73();
  swift_bridgeObjectRelease();
  return v24 & 1;
}

uint64_t LocalParticipantControlsView.shouldNotHaveVideoMessageControls.getter()
{
  OUTLINED_FUNCTION_14();
  uint64_t v20 = v1;
  uint64_t v21 = v2;
  uint64_t v3 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_196();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v19 - v5;
  OUTLINED_FUNCTION_0_3();
  char v8 = *(void (**)(void))(v7 + 600);
  v8();
  char v9 = v6[7];
  outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v6, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v9) == 1953391987 && v10 == 0xE400000000000000) {
    goto LABEL_11;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v13 = swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_12:
    char v17 = 1;
    return v17 & 1;
  }
  ((void (*)(uint64_t))v8)(v13);
  char v14 = *(unsigned char *)(v0 + 7);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v14) == 0x7964616552746F6ELL && v15 == 0xE800000000000000)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v17 & 1;
}

uint64_t LocalParticipantControlsView.shouldShowAllEffectsControls.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_11_71();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_22_47();
  v2();
  unsigned int v3 = *(unsigned __int8 *)(v0 + 7);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (v3 > 1)
  {
    char v5 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_5_13();
    if ((*(uint64_t (**)(void))(v4 + 768))())
    {
      char v5 = 1;
    }
    else
    {
      OUTLINED_FUNCTION_5_13();
      char v5 = (*(uint64_t (**)(void))(v6 + 776))();
    }
  }
  return v5 & 1;
}

uint64_t LocalParticipantControlsView.shouldShowOnlyCameraFlipPreRecording.getter()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_11_71();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_22_47();
  v2();
  char v3 = *(unsigned char *)(v0 + 7);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v3) == 0x7964616572 && v4 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v6 = 1;
  }
  else
  {
    char v6 = OUTLINED_FUNCTION_43_22();
    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

uint64_t LocalParticipantControlsView.shouldHideCameraFlipDuringRecording.getter()
{
  OUTLINED_FUNCTION_26_47();
  uint64_t v3 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_11_71();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_22_47();
  v4();
  char v5 = *(unsigned char *)(v0 + 7);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v5) == v2 && v6 == v1)
  {
    OUTLINED_FUNCTION_51_19();
    char v8 = 1;
  }
  else
  {
    char v8 = OUTLINED_FUNCTION_13_73();
    swift_bridgeObjectRelease();
  }
  return v8 & 1;
}

uint64_t key path getter for LocalParticipantControlsView.videoMessagingState : LocalParticipantControlsView@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x338))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.videoMessagingState : LocalParticipantControlsView(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x340))(*a1);
}

uint64_t LocalParticipantControlsView.videoMessagingState.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t LocalParticipantControlsView.videoMessagingState.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

void (*LocalParticipantControlsView.videoMessagingState.modify())(void **a1)
{
  id v1 = malloc(0x38uLL);
  OUTLINED_FUNCTION_56((uint64_t)v1);
  v0[4] = swift_getKeyPath();
  v0[5] = swift_getKeyPath();
  v0[6] = static Published.subscript.modify();
  return LocalParticipantControlsView.videoMessagingState.modify;
}

void LocalParticipantControlsView.videoMessagingState.modify(void **a1)
{
  id v1 = *a1;
  uint64_t v2 = OUTLINED_FUNCTION_31_35();
  v3(v2);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t key path getter for LocalParticipantControlsView.$videoMessagingState : LocalParticipantControlsView(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x350))();
}

uint64_t key path setter for LocalParticipantControlsView.$videoMessagingState : LocalParticipantControlsView(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  __n128 v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 16))(v7, a1, v5);
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x358))(v7);
}

uint64_t LocalParticipantControlsView.$videoMessagingState.getter()
{
  return swift_endAccess();
}

uint64_t LocalParticipantControlsView.$videoMessagingState.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_62();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
}

void (*LocalParticipantControlsView.$videoMessagingState.modify())(uint64_t a1, char a2)
{
  uint64_t v1 = malloc(0x40uLL);
  OUTLINED_FUNCTION_16_2((uint64_t)v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  v0[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[5] = v3;
  size_t v4 = *(void *)(v3 + 64);
  v0[6] = malloc(v4);
  v0[7] = malloc(v4);
  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  return LocalParticipantControlsView.$videoMessagingState.modify;
}

void LocalParticipantControlsView.$videoMessagingState.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  size_t v4 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    LocalParticipantControlsView.$videoMessagingState.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    LocalParticipantControlsView.$videoMessagingState.setter(*(void *)(*(void *)a1 + 56));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t key path getter for LocalParticipantControlsView.subscriptions : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x368))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.subscriptions : LocalParticipantControlsView(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x370);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t LocalParticipantControlsView.subscriptions.getter()
{
  return ConversationControlsManager.ignoredScreenSharingRequestUUIDs.getter();
}

uint64_t LocalParticipantControlsView.subscriptions.setter(uint64_t a1)
{
  return PeoplePickerViewController.idsDestinations.setter(a1);
}

uint64_t (*LocalParticipantControlsView.subscriptions.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t key path getter for LocalParticipantControlsView.timerSink : LocalParticipantControlsView@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x380))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LocalParticipantControlsView.timerSink : LocalParticipantControlsView(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x388);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t LocalParticipantControlsView.timerSink.getter()
{
  return swift_retain();
}

uint64_t LocalParticipantControlsView.timerSink.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  *uint64_t v1 = a1;
  return swift_release();
}

uint64_t (*LocalParticipantControlsView.timerSink.modify())()
{
  return CaptionsViewController.captionVisibilityDuringCapture.modify;
}

uint64_t LocalParticipantControlsView.init()()
{
  uint64_t v1 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for ConversationControlsRecipe();
  OUTLINED_FUNCTION_13_18(v3);
  *(_DWORD *)(v0 + 3) = 0;
  *(_DWORD *)uint64_t v0 = 0;
  *(_WORD *)(v0 + 7) = 257;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(ObjectType + 920))(v0);
  OUTLINED_FUNCTION_1_12();
  swift_deallocPartialClassInstance();
  return v4;
}

void LocalParticipantControlsView.__allocating_init(viewModel:)()
{
  id v1 = objc_allocWithZone(v0);
  LocalParticipantControlsView.init(viewModel:)();
}

void LocalParticipantControlsView.init(viewModel:)()
{
  OUTLINED_FUNCTION_31();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_62();
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsButton;
  char v9 = v0;
  *(void *)&v0[v8] = OUTLINED_FUNCTION_24_51();
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton;
  *(void *)&v9[v10] = closure #1 in variable initialization expression of LocalParticipantControlsView.effectsButton();
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingButton;
  *(void *)&v9[v11] = closure #1 in variable initialization expression of LocalParticipantControlsView.effectsButton();
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_collapseButton;
  *(void *)&v9[v12] = OUTLINED_FUNCTION_23_52();
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_rotateButton;
  *(void *)&v9[v13] = closure #1 in variable initialization expression of LocalParticipantControlsView.rotateButton();
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraFlipButton;
  *(void *)&v9[v14] = OUTLINED_FUNCTION_47_19();
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureButton;
  *(void *)&v9[v15] = closure #1 in variable initialization expression of LocalParticipantControlsView.collapseButton();
  uint64_t v16 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightButton;
  *(void *)&v9[v16] = closure #1 in variable initialization expression of LocalParticipantControlsView.collapseButton();
  uint64_t v17 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_videoPauseButton;
  *(void *)&v9[v17] = closure #1 in variable initialization expression of LocalParticipantControlsView.videoPauseButton();
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_videoMessageControls] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___videoMessageViewModel] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___spinnerView] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_hasInitializedShutterButton] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___shutterButton] = 0;
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_currentConstraints] = MEMORY[0x1E4FBC860];
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v18 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_controlsLayoutGuide;
  *(void *)&v9[v18] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_style] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsSelected] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_blurEnabled] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingIsEnabled] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureIsEnabled] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightIsEnabled] = 0;
  v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_isDisabled] = 0;
  uint64_t v19 = &v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView__videoMessagingState];
  char v22 = 1;
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v19, v1, v4);
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_subscriptions] = MEMORY[0x1E4FBC870];
  *(void *)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_timerSink] = 0;
  outlined init with copy of LocalParticipantControlsView.ViewModel(v3, (uint64_t)&v9[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_viewModel], (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);

  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for LocalParticipantControlsView(0);
  id v20 = objc_msgSendSuper2(&v21, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  LocalParticipantControlsView.commonInit()();

  outlined destroy of LocalParticipantControlsView.ViewModel(v3, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  OUTLINED_FUNCTION_28();
}

id LocalParticipantControlsView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void LocalParticipantControlsView.init(coder:)()
{
  OUTLINED_FUNCTION_14();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<VideoMessageController.State>);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  uint64_t v6 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsButton;
  *(void *)&v0[v6] = OUTLINED_FUNCTION_24_51();
  uint64_t v7 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton;
  *(void *)&v0[v7] = closure #1 in variable initialization expression of LocalParticipantControlsView.effectsButton();
  uint64_t v8 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingButton;
  *(void *)&v0[v8] = closure #1 in variable initialization expression of LocalParticipantControlsView.effectsButton();
  uint64_t v9 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_collapseButton;
  *(void *)&v0[v9] = OUTLINED_FUNCTION_23_52();
  uint64_t v10 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_rotateButton;
  *(void *)&v0[v10] = closure #1 in variable initialization expression of LocalParticipantControlsView.rotateButton();
  uint64_t v11 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraFlipButton;
  *(void *)&v0[v11] = OUTLINED_FUNCTION_47_19();
  uint64_t v12 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureButton;
  *(void *)&v0[v12] = closure #1 in variable initialization expression of LocalParticipantControlsView.collapseButton();
  uint64_t v13 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightButton;
  *(void *)&v0[v13] = closure #1 in variable initialization expression of LocalParticipantControlsView.collapseButton();
  uint64_t v14 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_videoPauseButton;
  *(void *)&v0[v14] = closure #1 in variable initialization expression of LocalParticipantControlsView.videoPauseButton();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_videoMessageControls] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___videoMessageViewModel] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___spinnerView] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_hasInitializedShutterButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView____lazy_storage___shutterButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_currentConstraints] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_controlsLayoutGuide;
  *(void *)&v0[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1940]), sel_init);
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_style] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsSelected] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_blurEnabled] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingIsEnabled] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureIsEnabled] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightIsEnabled] = 0;
  v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_isDisabled] = 0;
  uint64_t v16 = &v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView__videoMessagingState];
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v16, v1, v2);
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_subscriptions] = MEMORY[0x1E4FBC870];
  *(void *)&v0[OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_timerSink] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void LocalParticipantControlsView.commonInit()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  OUTLINED_FUNCTION_4();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<VideoMessageController.State>.Publisher>);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v12 + 848))();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Published<VideoMessageController.State>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<VideoMessageController.State>.Publisher);
  lazy protocol witness table accessor for type VideoMessageController.State and conformance VideoMessageController.State();
  Publisher<>.removeDuplicates()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<VideoMessageController.State>.Publisher> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<VideoMessageController.State>.Publisher>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v8);
  OUTLINED_FUNCTION_1_12();
  uint64_t v14 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(v13 + 888))(&v15);
  AnyCancellable.store(in:)();
  swift_release();
  OUTLINED_FUNCTION_50_19();
  v14();
  OUTLINED_FUNCTION_28();
}

void closure #1 in LocalParticipantControlsView.commonInit()(char *a1, uint64_t a2)
{
  char v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v4)
                                                                                  + 0x268))(v8);
    *(unsigned char *)(v7 + 7) = v2;
    v6(v8, 0);
  }
}

uint64_t LocalParticipantControlsView.buttons(for:)(unsigned char *a1)
{
  uint64_t v15 = MEMORY[0x1E4FBC860];
  id v3 = *(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_collapseButton);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_9_88();
  if (v4) {
    OUTLINED_FUNCTION_5_109();
  }
  OUTLINED_FUNCTION_17_55();
  uint64_t v5 = specialized Array._endMutation()();
  if (a1[2] == 1)
  {
    id v6 = *(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsButton);
    OUTLINED_FUNCTION_27_48();
    OUTLINED_FUNCTION_9_88();
    if (v4) {
      OUTLINED_FUNCTION_5_109();
    }
    OUTLINED_FUNCTION_17_55();
    uint64_t v5 = specialized Array._endMutation()();
  }
  if (a1[4] == 1)
  {
    id v7 = *(id *)((char *)v1 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_rotateButton);
    OUTLINED_FUNCTION_27_48();
    OUTLINED_FUNCTION_9_88();
    if (v4) {
      OUTLINED_FUNCTION_5_109();
    }
    OUTLINED_FUNCTION_17_55();
    uint64_t v5 = specialized Array._endMutation()();
  }
  if (a1[1] == 1)
  {
    id v8 = objc_retain(*(id *)((char *)v1
                           + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton));
    OUTLINED_FUNCTION_27_48();
    OUTLINED_FUNCTION_9_88();
    if (v4) {
      OUTLINED_FUNCTION_5_109();
    }
    OUTLINED_FUNCTION_17_55();
    uint64_t v5 = specialized Array._endMutation()();
  }
  if (a1[3] == 1)
  {
    id v9 = objc_retain(*(id *)((char *)v1
                           + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraFlipButton));
    OUTLINED_FUNCTION_27_48();
    OUTLINED_FUNCTION_9_88();
    if (v4) {
      OUTLINED_FUNCTION_5_109();
    }
    OUTLINED_FUNCTION_17_55();
    uint64_t v5 = specialized Array._endMutation()();
  }
  if (*a1 == 1)
  {
    id v10 = objc_retain(*(id *)((char *)v1
                            + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cinematicFramingButton));
    OUTLINED_FUNCTION_27_48();
    OUTLINED_FUNCTION_9_88();
    if (v4) {
      OUTLINED_FUNCTION_5_109();
    }
    OUTLINED_FUNCTION_17_55();
    uint64_t v5 = specialized Array._endMutation()();
  }
  if (a1[6] == 1)
  {
    id v11 = objc_retain(*(id *)((char *)v1
                            + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_studioLightButton));
    OUTLINED_FUNCTION_27_48();
    OUTLINED_FUNCTION_9_88();
    if (v4) {
      OUTLINED_FUNCTION_5_109();
    }
    OUTLINED_FUNCTION_17_55();
    uint64_t v5 = specialized Array._endMutation()();
  }
  if (a1[5] == 1)
  {
    id v12 = objc_retain(*(id *)((char *)v1
                            + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_reactionEffectGestureButton));
    OUTLINED_FUNCTION_27_48();
    OUTLINED_FUNCTION_9_88();
    if (v4) {
      OUTLINED_FUNCTION_5_109();
    }
    OUTLINED_FUNCTION_17_55();
    uint64_t v5 = specialized Array._endMutation()();
  }
  switch(a1[7])
  {
    case 2:
    case 3:
    case 5:
      goto LABEL_35;
    case 4:
      id v13 = objc_retain(*(id *)((char *)v1
                              + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_videoPauseButton));
      MEMORY[0x1C87733A0]();
      if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        OUTLINED_FUNCTION_6_3();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v5 = specialized Array._endMutation()();
LABEL_35:
      (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1C8))(v5);
      MEMORY[0x1C87733A0]();
      if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        OUTLINED_FUNCTION_6_3();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      break;
    default:
      return v15;
  }
  return v15;
}

Swift::Void __swiftcall LocalParticipantControlsView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for LocalParticipantControlsView(0);
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  LocalParticipantControlsView.layoutViews()();
}

Swift::Void __swiftcall LocalParticipantControlsView.updateButtonUserInteraction(for:shouldHaveUserInteraction:)(UIControl *a1, Swift::Bool shouldHaveUserInteraction)
{
  BOOL v3 = shouldHaveUserInteraction;
  double v4 = 0.0;
  if (shouldHaveUserInteraction) {
    double v4 = 1.0;
  }
  UIControl._cnkContentAlpha.setter(v4);
  [(UIControl *)a1 setUserInteractionEnabled:v3];
}

void UIControl._cnkContentAlpha.setter(double a1)
{
  type metadata accessor for InCallControlButton();
  BOOL v3 = (void *)swift_dynamicCastClass();
  if (v3)
  {
    double v4 = *(void (**)(double))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1A0);
    id v5 = v1;
    v4(a1);
  }
  else
  {
    objc_msgSend(v1, sel_setAlpha_, a1);
  }
}

Swift::Void __swiftcall LocalParticipantControlsView.handleEffectsTapped()()
{
  uint64_t v0 = type metadata accessor for SpringBoardUtilities();
  uint64_t v1 = OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  specialized static SpringBoardUtilities.requestPasscodeUnlock(_:)(v0, v1);
}

void closure #1 in LocalParticipantControlsView.handleEffectsTapped()(char a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (a1)
  {
    OUTLINED_FUNCTION_2();
    uint64_t v3 = MEMORY[0x1C8776240](v2);
    if (v3)
    {
      double v4 = (void *)v3;
      OUTLINED_FUNCTION_52_19();
      uint64_t v6 = v5();

      if (v6)
      {
        swift_getObjectType();
        OUTLINED_FUNCTION_34_35();
        OUTLINED_FUNCTION_42_25();
        v7();
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    if (one-time initialization token for conversationKit != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769620;
    OUTLINED_FUNCTION_2();
    uint64_t v9 = MEMORY[0x1C8776240](v2);
    if (v9)
    {
      id v10 = (void *)v9;
      *(id *)(v9 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_effectsButton);

      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIControl);
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v8 + 32) = v11;
    *(void *)(v8 + 40) = v13;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall LocalParticipantControlsView.handleCinematicFramingTapped()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.handleCameraBlurTapped()()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton), sel_setSelected_, objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ConversationKit28LocalParticipantControlsView_cameraBlurButton), sel_isSelected) ^ 1);
  OUTLINED_FUNCTION_0_3();
  if ((*(uint64_t (**)(void))(v1 + 504))())
  {
    swift_getObjectType();
    OUTLINED_FUNCTION_34_35();
    OUTLINED_FUNCTION_42_25();
    v2();
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall LocalParticipantControlsView.handleCollapseButtonTapped()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.handleRotateButtonTapped()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.handleCameraFlipTapped()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.handleReactionEffectGestureTapped()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.handleStudioLightTapped()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.handleVideoMessageButtonTapped()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.showCallDetails()()
{
}

uint64_t LocalParticipantControlsView.handleCinematicFramingTapped()()
{
  OUTLINED_FUNCTION_0_20();
  uint64_t result = (*(uint64_t (**)(void))(v0 + 504))();
  if (result)
  {
    swift_getObjectType();
    uint64_t v2 = OUTLINED_FUNCTION_35_25();
    v3(v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall LocalParticipantControlsView.callBack()()
{
}

Swift::Void __swiftcall LocalParticipantControlsView.close()()
{
}

uint64_t LocalParticipantControlsView.handleVideoMessageButtonTapped()(const char *a1)
{
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.videoMessaging);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, a1, v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  OUTLINED_FUNCTION_52_19();
  uint64_t result = v6();
  if (result)
  {
    swift_getObjectType();
    uint64_t v8 = OUTLINED_FUNCTION_35_25();
    v9(v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall LocalParticipantControlsView.handleShutterButtonTapped()()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_78();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_0();
  if (one-time initialization token for videoMessaging != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.videoMessaging);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_1C2F90000, v3, v4, "Shutter for video message button tapped", v5, 2u);
    MEMORY[0x1C87760E0](v5, -1, -1);
  }

  OUTLINED_FUNCTION_42_20();
  (*(void (**)(void))(v6 + 600))();
  char v7 = *(unsigned char *)(v0 + 7);
  outlined destroy of LocalParticipantControlsView.ViewModel(v0, (void (*)(void))type metadata accessor for LocalParticipantControlsView.ViewModel);
  if (VideoMessageController.State.rawValue.getter(v7) == 0x6552657669746361 && v8 == 0xEF676E6964726F63)
  {
    OUTLINED_FUNCTION_51_19();
LABEL_13:
    OUTLINED_FUNCTION_42_20();
    OUTLINED_FUNCTION_52_19();
    if (!v12()) {
      return;
    }
    goto LABEL_14;
  }
  char v10 = OUTLINED_FUNCTION_13_73();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_42_20();
  OUTLINED_FUNCTION_52_19();
  if (!v11()) {
    return;
  }
LABEL_14:
  swift_getObjectType();
  OUTLINED_FUNCTION_34_35();
  OUTLINED_FUNCTION_42_25();
  v13();
  swift_unknownObjectRelease();
}

void __swiftcall LocalParticipantControlsView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for LocalParticipantControlsView(0);
  id v7 = -[UIView_optional hitTest:withEvent:](&v11, sel_hitTest_withEvent_, isa, x, y);
  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v8 = v3;
    id v9 = v7;
    char v10 = static NSObject.== infix(_:_:)();

    if (v10) {
  }
    }
}

id LocalParticipantControlsView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void LocalParticipantControlsView.init(frame:)()
{
}

id LocalParticipantControlsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocalParticipantControlsView(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall LocalParticipantControlsView.addVideoMessageControls()()
{
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
  uint64_t v5 = OUTLINED_FUNCTION_8(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_40_24();
  MEMORY[0x1F4188790](v6);
  id v8 = (uint64_t *)((char *)&v70 - v7);
  id v9 = (int *)type metadata accessor for VideoMessageControlsView(0);
  OUTLINED_FUNCTION_0();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_16_6();
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v70 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v70 - v15;
  OUTLINED_FUNCTION_0_3();
  if (!(*(uint64_t (**)(void))(v17 + 504))()) {
    goto LABEL_18;
  }
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType();
  id v70 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(ObjectType, v19);
  swift_unknownObjectRelease();
  if (!v70) {
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_67_10();
  char v22 = (void *)(*(uint64_t (**)(void))(v21 + 312))();

  if (!v22)
  {
    OUTLINED_FUNCTION_67_10();
    (*(void (**)(void))(v25 + 336))();
    *id v8 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content);
    swift_storeEnumTagMultiPayload();
    *objc_super v2 = swift_getKeyPath();
    swift_storeEnumTagMultiPayload();
    *(void *)uint64_t v16 = swift_getKeyPath();
    v16[8] = 0;
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v8, (uint64_t)&v16[v9[5]], &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
    outlined init with take of ModifiedContent<_ShapeView<Rectangle._Inset, Material>, _OffsetEffect>((uint64_t)v2, (uint64_t)&v16[v9[6]], &demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>);
    uint64_t v26 = (uint64_t *)&v16[v9[7]];
    type metadata accessor for VideoMessagePlayerViewModel(0);
    lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel();
    *uint64_t v26 = ObservedObject.init(wrappedValue:)();
    v26[1] = v27;
    uint64_t v28 = &v16[v9[8]];
    char v71 = 0;
    State.init(wrappedValue:)();
    uint64_t v29 = v73;
    *uint64_t v28 = v72;
    *((void *)v28 + 1) = v29;
    *(void *)&v16[v9[9]] = 0;
    *(void *)&v16[v9[10]] = 0x3FC51EB851EB851FLL;
    *(void *)&v16[v9[11]] = 0x4077C00000000000;
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v16, (uint64_t)v13, (void (*)(void))type metadata accessor for VideoMessageControlsView);
    objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockScreenHostingController<VideoMessageControlsView>));
    outlined init with copy of LocalParticipantControlsView.ViewModel((uint64_t)v13, v1, (void (*)(void))type metadata accessor for VideoMessageControlsView);
    uint64_t v30 = (void *)UIHostingController.init(rootView:)();
    outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v13, (void (*)(void))type metadata accessor for VideoMessageControlsView);
    outlined destroy of LocalParticipantControlsView.ViewModel((uint64_t)v16, (void (*)(void))type metadata accessor for VideoMessageControlsView);
    id v31 = OUTLINED_FUNCTION_8_6();
    if (v31)
    {
      uint64_t v32 = v31;
      objc_msgSend(v31, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

      id v33 = OUTLINED_FUNCTION_8_6();
      if (v33)
      {
        uint64_t v34 = v33;
        id v35 = objc_msgSend(self, sel_clearColor);
        objc_msgSend(v34, sel_setBackgroundColor_, v35);

        id v36 = OUTLINED_FUNCTION_8_6();
        if (v36)
        {
          uint64_t v37 = v36;
          objc_msgSend(v3, sel_insertSubview_atIndex_, v36, 0);

          objc_msgSend(v70, sel_addChildViewController_, v30);
          objc_msgSend(v30, sel_didMoveToParentViewController_, v70);
          id v38 = objc_msgSend(v3, sel_superview);
          if (v38)
          {
            char v39 = v38;
            objc_msgSend(v38, sel_bounds);
            OUTLINED_FUNCTION_17_3();
          }
          else
          {
            objc_msgSend(v3, sel_bounds);
            OUTLINED_FUNCTION_17_3();
          }
          v74.origin.double x = OUTLINED_FUNCTION_4_0();
          double Height = CGRectGetHeight(v74);
          objc_msgSend(v3, sel_bounds);
          v75.origin.double x = OUTLINED_FUNCTION_4_0();
          CGRect v76 = CGRectIntersection(v75, v77);
          double v41 = CGRectGetHeight(v76);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v42 = swift_allocObject();
          *(_OWORD *)(v42 + 16) = xmmword_1C3769580;
          id v43 = OUTLINED_FUNCTION_8_6();
          if (v43)
          {
            os_log_type_t v44 = v43;
            id v45 = objc_msgSend(v43, sel_leadingAnchor);

            id v46 = objc_msgSend(v3, sel_safeAreaLayoutGuide);
            id v47 = objc_msgSend(v46, sel_leadingAnchor);

            id v48 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v47);
            *(void *)(v42 + 32) = v48;
            id v49 = OUTLINED_FUNCTION_8_6();
            if (v49)
            {
              uint64_t v50 = v49;
              id v51 = objc_msgSend(v49, sel_trailingAnchor);

              id v52 = objc_msgSend(v3, sel_safeAreaLayoutGuide);
              id v53 = objc_msgSend(v52, sel_trailingAnchor);

              id v54 = objc_msgSend(v51, sel_constraintEqualToAnchor_, v53);
              *(void *)(v42 + 40) = v54;
              id v55 = OUTLINED_FUNCTION_8_6();
              if (v55)
              {
                id v56 = v55;
                id v57 = objc_msgSend(v55, sel_topAnchor);

                id v58 = objc_msgSend(v3, sel_topAnchor);
                id v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_, v58);

                *(void *)(v42 + 48) = v59;
                id v60 = OUTLINED_FUNCTION_8_6();
                if (v60)
                {
                  long long v61 = v60;
                  long long v62 = self;
                  id v63 = objc_msgSend(v61, sel_bottomAnchor);

                  id v64 = objc_msgSend(v3, sel_bottomAnchor);
                  id v65 = objc_msgSend(v63, sel_constraintEqualToAnchor_constant_, v64, Height - v41);

                  *(void *)(v42 + 56) = v65;
                  uint64_t v72 = v42;
                  specialized Array._endMutation()();
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
                  Class isa = Array._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease();
                  objc_msgSend(v62, sel_activateConstraints_, isa);

                  OUTLINED_FUNCTION_1_12();
                  uint64_t v68 = *(void (**)(void *))(v67 + 320);
                  id v69 = v30;
                  v68(v30);

LABEL_18:
                  OUTLINED_FUNCTION_66_9();
                  return;
                }
LABEL_25:
                __break(1u);
                return;
              }
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_66_9();
}

Swift::Void __swiftcall LocalParticipantControlsView.removeVideoMessageControls()()
{
  OUTLINED_FUNCTION_161();
  v0 += 39;
  uint64_t v1 = *v0;
  objc_super v2 = (void *)(*v0)();
  if (v2)
  {
    uint64_t v3 = v2;
    objc_msgSend(v2, sel_willMoveToParentViewController_, 0);
  }
  uint64_t v4 = (void *)v1();
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_view);

    if (!v6)
    {
      __break(1u);
      return;
    }
    objc_msgSend(v6, sel_removeFromSuperview);
  }
  uint64_t v7 = (void *)v1();
  if (v7)
  {
    id v8 = v7;
    objc_msgSend(v7, sel_removeFromParentViewController);
  }
  OUTLINED_FUNCTION_161();
  (*(void (**)(void))(v9 + 320))(0);
  OUTLINED_FUNCTION_0_3();
  uint64_t v11 = *(void (**)(void))(v10 + 904);
  v11(0);
}

Swift::Void __swiftcall LocalParticipantControlsView.startElapsedTimeCounter()()
{
  OUTLINED_FUNCTION_31();
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  objc_super v2 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150);
  uint64_t v3 = (void *)v2();
  static String.localizedStringWithFormat(_:_:)();
  OUTLINED_FUNCTION_0_3();
  (*(void (**)(void))(v4 + 344))();

  uint64_t v5 = (void *)v2();
  (*(void (**)(uint64_t))((*v1 & *v5) + 0xF8))(2);

  *(void *)(OUTLINED_FUNCTION_20() + 16) = 0;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.Autoconnect<NSTimer.TimerPublisher>, Int>);
  uint64_t v26 = &v24;
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_21();
  uint64_t v11 = v10 - v9;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSTimer);
  id v12 = objc_msgSend(self, sel_currentRunLoop);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v14 = OUTLINED_FUNCTION_8(v13);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for NSRunLoop.SchedulerOptions();
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v18);
  uint64_t v19 = static NSTimer.publish(every:tolerance:on:in:options:)();

  outlined destroy of ZStack<ModifiedContent<ConversationStatusView, _PaddingLayout>?>(v17, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  uint64_t v27 = v19;
  type metadata accessor for NSTimer.TimerPublisher();
  lazy protocol witness table accessor for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher();
  uint64_t v20 = ConnectablePublisher.autoconnect()();
  swift_release();
  uint64_t v27 = v20;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_20();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type CurrentValueSubject<PreCallControlsContext?, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type Publishers.Map<Publishers.Autoconnect<NSTimer.TimerPublisher>, Int> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.Autoconnect<NSTimer.TimerPublisher>, Int>);
  uint64_t v21 = v25;
  uint64_t v22 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v21);
  OUTLINED_FUNCTION_1_12();
  (*(void (**)(uint64_t))(v23 + 904))(v22);
  swift_release();
  OUTLINED_FUNCTION_28();
}

uint64_t closure #1 in LocalParticipantControlsView.startElapsedTimeCounter()@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    *uint64_t v4 = v8;
    *a2 = v8;
  }
  return result;
}

void closure #2 in LocalParticipantControlsView.startElapsedTimeCounter()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x1C8776240](v3);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  BOOL v7 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x150);
  uint64_t v8 = (void *)v7();
  if (v2 < 1) {
    goto LABEL_6;
  }
  double v9 = (double)v2;
  if (one-time initialization token for timeFormatter != -1) {
    goto LABEL_18;
  }
  while (1)
  {
    id v10 = objc_msgSend((id)static NSDateComponentsFormatter.timeFormatter, sel_stringFromTimeInterval_, v9);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
    }
    else
    {
LABEL_6:
      uint64_t v12 = static String.localizedStringWithFormat(_:_:)();
      uint64_t v14 = v15;
    }
    (*(void (**)(uint64_t, uint64_t))((*v6 & *v8) + 0x158))(v12, v14);

    uint64_t v8 = (void *)v7();
    uint64_t v16 = *(void *)((char *)v8 + OBJC_IVAR____TtC15ConversationKit27VideoMessagePlayerViewModel_shutterModel);
    swift_retain();

    double v9 = *(double *)(v16 + 16);
    swift_release();
    if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (v9 <= -9.22337204e18) {
      goto LABEL_16;
    }
    if (v9 < 9.22337204e18) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    swift_once();
  }
  if (v2 >= (uint64_t)v9
    && (uint64_t v17 = (*(uint64_t (**)(void))((*v6 & *v5) + 0x388))(0),
        (*(uint64_t (**)(uint64_t))((*v6 & *v5) + 0x1F8))(v17)))
  {
    uint64_t v19 = v18;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 8))(3, ObjectType, v19);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

Swift::Void __swiftcall LocalParticipantControlsView.showLoading()()
{
  OUTLINED_FUNCTION_0_20();
  v1 += 51;
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)(*v1)();
  id v4 = objc_msgSend(v3, sel_superview);

  if (!v4)
  {
    OUTLINED_FUNCTION_53_17();
    uint64_t v5 = (void *)v2();
    objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    OUTLINED_FUNCTION_53_17();
    uint64_t v6 = (void *)v2();
    objc_msgSend(v0, sel_addSubview_, v6);

    BOOL v7 = self;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C3769610;
    OUTLINED_FUNCTION_53_17();
    double v9 = (void *)v2();
    id v10 = objc_msgSend(v9, sel_centerYAnchor);

    id v11 = objc_msgSend(v0, sel_centerYAnchor);
    id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

    *(void *)(v8 + 32) = v12;
    OUTLINED_FUNCTION_53_17();
    uint64_t v13 = (void *)v2();
    id v14 = objc_msgSend(v13, sel_centerXAnchor);

    id v15 = objc_msgSend(v0, sel_centerXAnchor);
    id v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

    *(void *)(v8 + 40) = v16;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_activateConstraints_, isa);
  }
}

Swift::Void __swiftcall LocalParticipantControlsView.hideLoading()()
{
  OUTLINED_FUNCTION_0_20();
  id v1 = (id)(*(uint64_t (**)(void))(v0 + 408))();
  objc_msgSend(v1, sel_removeFromSuperview);
}

void UIControl._cnkContentAlpha.getter()
{
  type metadata accessor for InCallControlButton();
  id v1 = (void *)swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x198);
    id v3 = v0;
    v2();
  }
  else
  {
    objc_msgSend(v0, sel_alpha);
  }
}

void (*UIControl._cnkContentAlpha.modify(uint64_t a1))(double *a1)
{
  OUTLINED_FUNCTION_3_7(a1);
  UIControl._cnkContentAlpha.getter();
  *id v1 = v2;
  return UIControl._cnkContentAlpha.modify;
}

void UIControl._cnkContentAlpha.modify(double *a1)
{
}

uint64_t type metadata accessor for LocalParticipantControlsView.ViewModel(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for LocalParticipantControlsView.ViewModel);
}

uint64_t outlined assign with take of ConversationControlsRecipe?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of ConversationControlsRecipe?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConversationControlsRecipe?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of LocalParticipantControlsView.ViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalParticipantControlsView.ViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LocalParticipantControlsView(uint64_t a1)
{
  return type metadata accessor for ConversationControlsAppLaunchButtonType(a1, (uint64_t *)&type metadata singleton initialization cache for LocalParticipantControlsView);
}

uint64_t sub_1C35613D4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel;
  if (!lazy protocol witness table cache variable for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel)
  {
    type metadata accessor for VideoMessagePlayerViewModel(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoMessagePlayerViewModel and conformance VideoMessagePlayerViewModel);
  }
  return result;
}

uint64_t outlined init with copy of LocalParticipantControlsView.ViewModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0();
  uint64_t v4 = OUTLINED_FUNCTION_89_0();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of LocalParticipantControlsView.ViewModel(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1C3561520()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LocalParticipantControlsView.startElapsedTimeCounter()@<X0>(void *a1@<X8>)
{
  return closure #1 in LocalParticipantControlsView.startElapsedTimeCounter()(v1, a1);
}

void partial apply for closure #2 in LocalParticipantControlsView.startElapsedTimeCounter()(uint64_t *a1)
{
  closure #2 in LocalParticipantControlsView.startElapsedTimeCounter()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type LocalParticipantControlsView.Style and conformance LocalParticipantControlsView.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalParticipantControlsView.Style and conformance LocalParticipantControlsView.Style;
  if (!lazy protocol witness table cache variable for type LocalParticipantControlsView.Style and conformance LocalParticipantControlsView.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalParticipantControlsView.Style and conformance LocalParticipantControlsView.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalParticipantControlsView.Capabilities and conformance LocalParticipantControlsView.Capabilities()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalParticipantControlsView.Capabilities and conformance LocalParticipantControlsView.Capabilities;
  if (!lazy protocol witness table cache variable for type LocalParticipantControlsView.Capabilities and conformance LocalParticipantControlsView.Capabilities)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalParticipantControlsView.Capabilities and conformance LocalParticipantControlsView.Capabilities);
  }
  return result;
}

void sub_1C3561690(void *a1@<X8>)
{
  UIControl._cnkContentAlpha.getter();
  *a1 = v2;
}

void sub_1C35616BC(double *a1)
{
}

uint64_t dispatch thunk of LocalParticipantControlsViewDelegate.didTap(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of LocalParticipantControlsViewDelegate.hostingController()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocalParticipantControlsViewProtocol.layoutViews()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LocalParticipantControlsViewProtocol.updateViews()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocalParticipantControlsViewProtocol.updateControlsAlpha(animated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of LocalParticipantControlsViewProtocol.changed(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t ObjC metadata update function for LocalParticipantControlsView()
{
  return type metadata accessor for LocalParticipantControlsView(0);
}

void type metadata completion function for LocalParticipantControlsView()
{
  type metadata accessor for LocalParticipantControlsView.ViewModel(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<VideoMessageController.State>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for LocalParticipantControlsView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LocalParticipantControlsView);
}

uint64_t dispatch thunk of LocalParticipantControlsView.videoMessageControls.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.videoMessageControls.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.videoMessageControls.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.videoMessageViewModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.videoMessageViewModel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.videoMessageViewModel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.callAgainHUDView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.callAgainHUDView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.callAgainHUDView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.hudRecipe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of LocalParticipantControlsView.hudRecipe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}